{"text": " Hey everyone, welcome to yet another episode of my video series on Joshua Bloch's effective Java Where I'll take the items that he has Enumerated in this book and expand on them and try and make sense and understand What advice slash programming principles? He's noted down in this book and hopefully of course the reason for me to record this is as I'm trying to make sense of them And understand them you too will learn something and gain value from it Apropos Java and object-oriented programming in general of course as I usually do I need to go through the proviso if you already watched the previous items you could just skip this part and save your time But without further ado, I'll get started Firstly, this is not a tutorial. I'm definitely not a teacher and as I've said many times already The more I'm learning about Java and OOP programming The more the more I realize how much of an expert I'm not therefore Please don't think of this as a tutorial where what I say is Gospel truth so to speak. I'm pretty sure already. I'm still in item five I'm pretty sure I've already made a lot of mistakes. In fact one person commented out a few mistakes that I've made in I think the first item so I'm really grateful for that so I Do request if I do make any mistakes, please point them out Leave them down below in the comment section. I'll pin them if there's something if it's something significant Because then it's not not only just for me But also anyone else watching these videos can can learn from the mistakes that I made think of this as the blind leading the blind This is more of a Exploratory disquisition and I'm as blind as you are perhaps even more It's got nothing to do with the fact that I'm wearing glasses It's simply the fact that I'm still very much new to Java And an analogy that I've been using in the previous videos in this proviso section is It's a lot similar to what one would do in a university tutorial setting Where we've got we've got the teacher, of course, then we've got the bunch bunch of students Working together on a certain assignment or problem statement trying to figure it out and make sense of it So that's why I call it a collective Exploratory disquisition and he has the third point as I said, I will inevitably make mistakes There's no way that I can get all of this right because a lot of the concepts that he is a Highlighted in these books. I've never ever used them in my day-to-day job Let's say or my day-to-day programming. So it's all quite new to me Some of it at least therefore again, sorry to keep being on a dead horse here Please do point them out and given that this is a YouTube video series. Sorry, given that this is a coding video series And it's on programming. It just makes sense to have all the code that I use on get up So for each item, I'll break them down I'll break the get up repository into different items and you could find not only mine But even just your blocks personal repository to that is published, you know in his Get up account, which is all the code used in the book. In fact Alrighty, let's get started. So this is gonna be item number five This was a very very interesting item. I've got to be honest the more I've learned about the Dependency injection pattern the more I've begun to appreciate it and see the beauty in the inversion of control concepts I would say Gwen Reed Martin Fowler's blogs He's probably the person who introduced it to the broader programming community But Martin Fowler has some great blog posts on in version of control and of course with dependency injection Normally programmers at least I normally use it with the framework with with spring or caucus another framework that we use at work And yeah, I've really begun to appreciate that pattern and item five, of course states Prefer dependency injection to hardwiring resources now before we get to any of the code Let's try and get a few just definitions across now Some people might not appreciate this and some people might be a bit turned off by just reading of definitions, but personally I have Great admiration and I'd say even even respect for words. I love language Therefore I do try and rely on definitions quite a lot because I think it's a good way to get a high-level understanding Before getting deeply into the code and sort of practically understanding It's all it always I think it's always good to first get a theoretical understanding Despite what some people might say where you know, it's all about the code and the practical understanding in any case, sorry I'm way too equations So of course two key words is dependency injection Well, two key phrases would be dependency injection and hardwiring resources So firstly before we look at any code, let's try and understand what what hardwiring resources is I couldn't find a really good definition online I couldn't find one that was succinct and Conveyed and sort of encapsulated. That's not a programming pun Encapsulated all of what this term meant. So I ended up writing my own and here's what I wrote down Classes have dependencies, obviously. So if you have a class, let's say called Person or a better class a class called employee That class may have a dependency called class department because that employee might be a class of That employee might be a part of a department. So in that case the employee class is dependent on the department class Formally the client class dependent class depends on the service class for different utilities It doesn't have to always be utilities, but in this case it makes more sense to think of it as a utility class and Having dependencies can create tied coupling. That is true Which should be avoided in software engineering, of course fundamental principles in OOP programming It can create inflexible. Sorry, I shouldn't say OOP programming It's software engineering in general, which is why we have patterns such as the microservice architecture because we won't Services itself to be the couple not just at an OOP level Getting back to this It can create inflexible and untestable code if resources are hardwired by instantiating a service class and creating objects within a class Ergo, we should prefer dependency injection design pattern Correct. So this is the bit that we're gonna Elucidate and expand on the most the idea of why oh, sorry why it's not a good idea to instantiate and and hardware resources in a client class If it's depending on some other utility class so now let's take a look at what dependency injection is because that is the The solution that we're prescribed to this problem we faced with tied coupling So I found this I found two definitions one is on geeks for geeks by Gherpreet Sashdeiva. Here's his I'm assuming Gherpreet. Yeah, Gherpreet is probably a bloke's name. I'm assuming Not I'm not I'm assuming here's his Definition of what? Dependency dependency injection is just to make it easy. I'm gonna call it DI because sometimes dependency injection It's kind of like a tongue twister. So I'll just call it DI DI is a design pattern in which one object supplies the dependencies of another object, correct? It removes the tied coupling of dependencies. So the problem we had before with hardwiring From the programming code so that it is easy to manage and test the application DI is also classified as a form of the broader technique of inversion of control, which is something I touched on So the way I think of it is Inversion of control is a broader Principle more of a even like a paradigm in programming I wouldn't probably put it at that level, but it's somewhere between a pattern and a paradigm Let's think of it that way which again as I said Martin Fowler and I believe Uncle Bob, so I think those two people invented it or popularized it introduced and dependency injection or DI is more of a Implementation of what inversion of control is so inversion of control is more for a practice a Principle that one can follow whereas DI is that most solid implementation in the form of a engineering pattern The responsibility of providing dependencies is delegated to the external code, correct? The interjecting code constructs the services and invokes the client to inject them The client code clothe the client code need not worry about the Interjecting code and how to build the services or in some cases Even what actuals even what the actual service is being used? Let me read that sorry the client code need not worry about the interjecting interjecting code and how to build the services Oh, in some cases even what actual service is being used. Oh gotcha. So because it's a reference that we are passing Through a parameter in some kind of method in some cases We don't even have to worry about what the actual service that the client is using So of course reading this definition one thing that should remind you of is frameworks a very popular one or probably the most popular one is spring and You know the auto white annotation which helps us to inject dependencies into our components and That's essentially the framework taking care of that. So there is this bit here where it says That line right there The responsibility of providing dependencies is delegated to external code So this is really what inversion of control is we are inverting the control They're giving that control to an external party or an external framework in this case and that's what's going on here so the definition by Oracle docs and would be Di enables you to turn regular Java classes into managed objects Again in inversion of control this management is done by the framework and and to interject them into any into any other Managed object using Di your code can declare dependencies on any managed object So if you really think about it what DI allows is in many ways is to follow that good old OOP principle to prefer composition over inheritance because you will see in the example soon the dependent class is composed from the class that depends on and Di allows this composition to take place So I've made a mistake here. I should type effective Java example because these are the examples. We're gonna take a look at Alrighty firstly, let's take a look at how not to do this How it would be done if we didn't use the DI pattern by hard-wiring resources the first approach that Joshua block has given in the book is By using Static utility classes or by using static utility methods So firstly in the example, we're gonna use there's a class called spell checker which depends on a class called lexicon and That example is what we're gonna use across and eventually we're gonna use DI onto that just to show how it works And and why it's a better option. So it's quite straightforward despite not being the proper way to do this It's sort of an anti pattern. We're doing a clear hard-wiring here on line number nine. We're creating this immutable object The spell checker class is dependent on the lexicon class and we're storing it in a variable Coordictionary and that's what we're using throughout this class and we're creating this immutable object using private static final despite it being immutable It's still tightly coupled because it's hard-wired onto the class itself every time the spell checker class is instantiated Another example Joshua block highlights is using a singleton another way people do this. It's quite similar Nevertheless, we're still hard-wiring a resource. I realize I've made a mistake here. I should get rid of the static keyword That's where that instance of this class is given now Yes, there'll only be one object of the spell checker class, but the hard-wiring has still taken place, which is why he states neither of these approaches is satisfactory because they assume that there is only one dictionary worth using which is the one that be hard-wire here and Here in practice each language has its own dictionary and special dictionaries are used for special vocabularies Also, it may be desirable to use a special dictionary for testing. Correct I think I might get to the testing bit a bit later, but I found a really good article Or like a blog post by spring as to why the DI pattern Makes testing much more easier in any case getting back to this It is visual thinking to assume that a single dictionary will surface for all time. So this Tide coupling again that we touched on makes all these assumptions which in the real world probably Won't stand static utility classes and singletons are inappropriate for classes whose behavior is parameterized by an underlying resource classes like the spell checker What is required is the ability to support multiple instances of the class in our examples spell checker Each of which uses the resource desired by the client in our example the the dictionary. So that's the resource a Simple pattern that satisfies this requirement is to pass the resource into the construct in constructor when a new instance when creating a new instance and that is the solution that we shall You know do a deep dive into That's happening right here in line number 16 and this here is in fact dependency injection So we are passing that into the constructor of this class This is one form of dependency injection The dictionary is a dependency of the spell checker and is injected into the spell checker when it is created So every single time a client's gonna create an instance of the spell checker class the dependency is injected we expect the client in fact to Inject that dependency or pass it when using this class So before we look deeply into the spell checker example in effective Java Let's take a quick look at this example. I found line a courtesy of by all done I can never pronounce that name. I know every Java programmer uses this blog by all done For work, but I know that most of us can't pronounce it so this example here is How one would normally use di because a framework Is it for us? So this is an example from spring, of course And what we have here is we have a class called foo foo matter and you've annotated it with the component annotation and what this Tells the compiler or the framework is to put this into the dependency pool or the object graph. I believe and and then the it's in the Context of the application in the application container and all these dependencies will be created and they will exist Within a given scope, of course the scope can change. I believe there's the application context as the request context So depending on what the scope that we want We can define how this component can live and exist And then this foo service class is a dependent is dependent on foo foo matter And all we're doing here is we're injecting the dependency Using the auto watt annotation and this framework takes care of all of that So spring really injects foo formatter into the foo service class Now this is mostly how on our day-to-day view would use di But of course, we're not here to learn about spring. We'll he'll learn about the dependence injection pattern at least how it's defined in this item In comparison or in contrast to hardware and resources So here's the example we have. We have simply defined a private final variable of lexicon type collisionary There's no obviously instantiation taking place. So there's no object creation taking place Therefore, there's no hard wiring And then we have the constructor where we pass the dependency So we pass the reference the the dependent object of the reference as the client's creating an object from the spell checker class and then Within the constructor, we set that into the private final variable within the class So in that way, we expect the client to provide us with the implementation We don't do the implementation and over here just to be safe Just your block has used objects dot required on now So what that tells us is that we can't pass a null value into this if if we do pass Anything that's null it's going to throw another point of exception and that's a extract check that we Pass that we have in this constructor. So then when the client wants to use this spell checker class It'll look something like this. Let me quickly demonstrate that. So if I'm going to create an object of spell checker I don't know why IntelliJ keeps doing that. It's kind of annoying All I got to do is this new oops And then I and here I'm passing the implementation where I'm creating a new lexicon class So that's what we're passing here on into line number 16 in the constructor And that's it. It's as simple as that. That is what dependence injection is So we expect the client to do the implementation without doing any hard wiring and the great thing here is now This gives the client the flexibility to pass any type of lexicon. You know, it could be Dictionary two dictionary three doesn't really matter over here. I'm just creating it on the go But or on the fly. Sorry But it could be a different type. It could be a sub type of lexicon There are many things that we could pass into this constructor And that creates loosely coupled code. So we continue while our spell checker example had only a single resource to dictionary dependency injection works with an arbitrary number of resources and arbitrary dependency graphs It preserves immutability, which is because one one object exists in the dependency graph So multiple clients can share dependent objects exactly assuming the client's desire the same underlying resources Dependence injection is equally applicable to constructors static factories and builders Of course, because all those things are just methods which can pass Values into so just saw that idea of Or the what he mentions here that in this example, there's only a single resource being used For an example like this in in real life This is quite rare because one class or one object generally will be dependent on many other objects In a case like that It's much easier using a framework because then all you got to do is use auto wired or inject or or any other annotation depending on the framework and Let the framework take care of it by Inversion of control, let's say and then we give an example of how the di pattern has been used in the java utils library Uh, in fact in it's it's used the example. He's given it's for functional programming He says a useful variant of the pattern is to pass a resource factory to the constructor A factory is an object that can be called repeatedly to create instances of a type We shall see soon a good example of it such factories embody the factory method pattern before we continue Let's quickly get a quick definition of what the factory method pattern is probably one of the most popular patterns in oop It is design patterns in oop Factory method is a creational design pattern that provides an interface for creating objects in a super class But allows subclasses to all to the type of objects that will be created. This is from refactoring guru So i'm not going to go go deeply into what the factory method pattern is But essentially it's a pattern that's used when creating objects and it sort of makes sense to use di or a variant of di in the factory method pattern because what we're really doing here is creating objects So the example joshua bloke has used is the supply interface that was introduced in java 8 To implement functional programming. It's a part of the java utils function package And what this really allows us to create objects In a functional way or in a functional programming paradigm What we what a client can do is pass in a factory, which is this supplier To create a subtype of the specified type via the generic because We if you go to the example in fact, should I okay? So a really good example I found is on in this article by Who's written this? Someone called the cell 23. Okay. I haven't got a proper name. It's just a pseudonym Anyway, this example here was is really good. It explains what the supply interface does so What it allows is it uses a wildcard. So it uses something called bounded wildcard type In fact, before I get to explaining it, I mean, let me quickly read this paragraph by joshua bloke himself. So methods that take a supplier So that would be this method here The the the create method. I'll read that again methods that take a supplier or an input should typically constrain the factory's type parameter Using a bounded wildcard type and that's what we're doing here the bounded wildcard type what this really means is this generic type we are passing into this method Into the supplier it should be a subtype of tile And that's why it's called so the the upper bound of that is tile and it's that's why it's called bounded wildcard type So generally the highest upper bound of something would be object because everything is a subtype of object in java but in this case And if any type that we pass here should should extend or be a subtype of tile So it's really constrained as joshua bloke has delineated on the book Using this bounded wildcard type to allow the client to pass in a factory that creates any subtype of a specified type Simply what the tile factory is is an object that can be called repeatedly to create instances of type tile And then another example, which I was showing here this block post by this random person on geeks for geeks Is much clearer than the one in fact joshua bloke has given in the book So at least to explain what the supplier interface does so over here We have a supplier and we're saying its type is double And we have this right random value variable that we're creating And then simply what this does is it it creates an object every every time it's called and then The only thing the supplier interface Contains is one method called get which allows us to get the object that we create using Yeah, of course using using the cat method. So yeah, the point that he's trying to make in the book is that this supplier interface Is a variant of the dependence injection pattern being used in fact in a factory method pattern And then he continues although dependence injection greatly improves flexibility and testability So that now I want to get to this article on spring. I would leave a link to this down below in the description It's a great article. I highly recommend you reading it. Um You will see the value of using di especially when it comes to testing now. I've personally had the experience of appreciating Di especially in the context of things like hyphenate using ORM tools That'll make testing much easier with j unit in java. So Therefore, I highly recommend you read this article. It's it's well worth it worth a read So I'll read that again because I keep interrupting myself Although dependence injection greatly improves flexibility and testability It can clutter up large projects which typically contains thousands of dependencies This clutter can be all but eliminated by using a dependency injection framework such as dagger Goose juice GUIC never heard of it and of course spring. So that's kind of what I mentioned before Over here. There's only one dependency, but generally in large projects. That's not the case. There are many dependencies In that case, it just makes sense to use a framework And then we finished off by just your blog saying In summary, do not use a singleton or static utility class to implement a class that depends on one or more underlying resources that would be hardwiring Whose behavior affects that of the class And do not have the class create these resources directly as we saw in the anti pattern examples instead pass the resources like that Or factories to create them into the constructor or static factory or builder This practice known as dependence injection will greatly enhance the flexibility Reusability and testability of the class. That's it. It's quite a simple item but it's it's ubiquitous this pattern is ubiquitous in Java programming and I think especially using it via framework As a client we would be clients in that case. We will start seeing its value Therefore, it's something that's worth diving deep into and trying to understand That's it. Thanks. That's watching. I hope you found value in the video and enjoyed that And really I do hope that I'm getting a bit better at making these videos because sometimes as you can clearly see I struggle one to Code live but also to to articulate some of these concepts in my own words But hey, it's a process. It's it's it's it's a journey that counts to use a terrible cliche Thanks for watching. Cheers", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 6.12, "text": " Hey everyone, welcome to yet another episode of my video series on Joshua Bloch's effective Java", "tokens": [50364, 1911, 1518, 11, 2928, 281, 1939, 1071, 3500, 295, 452, 960, 2638, 322, 24005, 9865, 339, 311, 4942, 10745, 50670], "temperature": 0.0, "avg_logprob": -0.23705297197614397, "compression_ratio": 1.663003663003663, "no_speech_prob": 0.15722981095314026}, {"id": 1, "seek": 0, "start": 6.640000000000001, "end": 9.120000000000001, "text": " Where I'll take the items that he has", "tokens": [50696, 2305, 286, 603, 747, 264, 4754, 300, 415, 575, 50820], "temperature": 0.0, "avg_logprob": -0.23705297197614397, "compression_ratio": 1.663003663003663, "no_speech_prob": 0.15722981095314026}, {"id": 2, "seek": 0, "start": 9.44, "end": 13.98, "text": " Enumerated in this book and expand on them and try and make sense and understand", "tokens": [50836, 2193, 15583, 770, 294, 341, 1446, 293, 5268, 322, 552, 293, 853, 293, 652, 2020, 293, 1223, 51063], "temperature": 0.0, "avg_logprob": -0.23705297197614397, "compression_ratio": 1.663003663003663, "no_speech_prob": 0.15722981095314026}, {"id": 3, "seek": 0, "start": 14.56, "end": 17.900000000000002, "text": " What advice slash programming principles?", "tokens": [51092, 708, 5192, 17330, 9410, 9156, 30, 51259], "temperature": 0.0, "avg_logprob": -0.23705297197614397, "compression_ratio": 1.663003663003663, "no_speech_prob": 0.15722981095314026}, {"id": 4, "seek": 0, "start": 18.64, "end": 25.34, "text": " He's noted down in this book and hopefully of course the reason for me to record this is as I'm trying to make sense of them", "tokens": [51296, 634, 311, 12964, 760, 294, 341, 1446, 293, 4696, 295, 1164, 264, 1778, 337, 385, 281, 2136, 341, 307, 382, 286, 478, 1382, 281, 652, 2020, 295, 552, 51631], "temperature": 0.0, "avg_logprob": -0.23705297197614397, "compression_ratio": 1.663003663003663, "no_speech_prob": 0.15722981095314026}, {"id": 5, "seek": 0, "start": 25.34, "end": 29.580000000000002, "text": " And understand them you too will learn something and gain value from it", "tokens": [51631, 400, 1223, 552, 291, 886, 486, 1466, 746, 293, 6052, 2158, 490, 309, 51843], "temperature": 0.0, "avg_logprob": -0.23705297197614397, "compression_ratio": 1.663003663003663, "no_speech_prob": 0.15722981095314026}, {"id": 6, "seek": 3000, "start": 30.3, "end": 35.4, "text": " Apropos Java and object-oriented programming in general of course as I usually do", "tokens": [50379, 8723, 1513, 329, 10745, 293, 2657, 12, 27414, 9410, 294, 2674, 295, 1164, 382, 286, 2673, 360, 50634], "temperature": 0.0, "avg_logprob": -0.22103516260782877, "compression_ratio": 1.5856573705179282, "no_speech_prob": 0.005382252391427755}, {"id": 7, "seek": 3000, "start": 35.4, "end": 40.620000000000005, "text": " I need to go through the proviso if you already watched the previous items you could just skip this part and save your time", "tokens": [50634, 286, 643, 281, 352, 807, 264, 1439, 19227, 498, 291, 1217, 6337, 264, 3894, 4754, 291, 727, 445, 10023, 341, 644, 293, 3155, 428, 565, 50895], "temperature": 0.0, "avg_logprob": -0.22103516260782877, "compression_ratio": 1.5856573705179282, "no_speech_prob": 0.005382252391427755}, {"id": 8, "seek": 3000, "start": 41.24, "end": 43.76, "text": " But without further ado, I'll get started", "tokens": [50926, 583, 1553, 3052, 22450, 11, 286, 603, 483, 1409, 51052], "temperature": 0.0, "avg_logprob": -0.22103516260782877, "compression_ratio": 1.5856573705179282, "no_speech_prob": 0.005382252391427755}, {"id": 9, "seek": 3000, "start": 44.36, "end": 50.68, "text": " Firstly, this is not a tutorial. I'm definitely not a teacher and as I've said many times already", "tokens": [51082, 20042, 11, 341, 307, 406, 257, 7073, 13, 286, 478, 2138, 406, 257, 5027, 293, 382, 286, 600, 848, 867, 1413, 1217, 51398], "temperature": 0.0, "avg_logprob": -0.22103516260782877, "compression_ratio": 1.5856573705179282, "no_speech_prob": 0.005382252391427755}, {"id": 10, "seek": 3000, "start": 51.04, "end": 54.8, "text": " The more I'm learning about Java and OOP programming", "tokens": [51416, 440, 544, 286, 478, 2539, 466, 10745, 293, 422, 12059, 9410, 51604], "temperature": 0.0, "avg_logprob": -0.22103516260782877, "compression_ratio": 1.5856573705179282, "no_speech_prob": 0.005382252391427755}, {"id": 11, "seek": 5480, "start": 55.279999999999994, "end": 59.76, "text": " The more the more I realize how much of an expert I'm not therefore", "tokens": [50388, 440, 544, 264, 544, 286, 4325, 577, 709, 295, 364, 5844, 286, 478, 406, 4412, 50612], "temperature": 0.0, "avg_logprob": -0.2063531958538553, "compression_ratio": 1.7093023255813953, "no_speech_prob": 0.11913003772497177}, {"id": 12, "seek": 5480, "start": 60.04, "end": 64.02, "text": " Please don't think of this as a tutorial where what I say is", "tokens": [50626, 2555, 500, 380, 519, 295, 341, 382, 257, 7073, 689, 437, 286, 584, 307, 50825], "temperature": 0.0, "avg_logprob": -0.2063531958538553, "compression_ratio": 1.7093023255813953, "no_speech_prob": 0.11913003772497177}, {"id": 13, "seek": 5480, "start": 64.72, "end": 68.56, "text": " Gospel truth so to speak. I'm pretty sure already. I'm still in item five", "tokens": [50860, 23163, 3494, 370, 281, 1710, 13, 286, 478, 1238, 988, 1217, 13, 286, 478, 920, 294, 3174, 1732, 51052], "temperature": 0.0, "avg_logprob": -0.2063531958538553, "compression_ratio": 1.7093023255813953, "no_speech_prob": 0.11913003772497177}, {"id": 14, "seek": 5480, "start": 68.56, "end": 71.66, "text": " I'm pretty sure I've already made a lot of mistakes. In fact", "tokens": [51052, 286, 478, 1238, 988, 286, 600, 1217, 1027, 257, 688, 295, 8038, 13, 682, 1186, 51207], "temperature": 0.0, "avg_logprob": -0.2063531958538553, "compression_ratio": 1.7093023255813953, "no_speech_prob": 0.11913003772497177}, {"id": 15, "seek": 5480, "start": 71.92, "end": 77.84, "text": " one person commented out a few mistakes that I've made in I think the first item so I'm really grateful for that so I", "tokens": [51220, 472, 954, 26940, 484, 257, 1326, 8038, 300, 286, 600, 1027, 294, 286, 519, 264, 700, 3174, 370, 286, 478, 534, 7941, 337, 300, 370, 286, 51516], "temperature": 0.0, "avg_logprob": -0.2063531958538553, "compression_ratio": 1.7093023255813953, "no_speech_prob": 0.11913003772497177}, {"id": 16, "seek": 5480, "start": 78.44, "end": 82.8, "text": " Do request if I do make any mistakes, please point them out", "tokens": [51546, 1144, 5308, 498, 286, 360, 652, 604, 8038, 11, 1767, 935, 552, 484, 51764], "temperature": 0.0, "avg_logprob": -0.2063531958538553, "compression_ratio": 1.7093023255813953, "no_speech_prob": 0.11913003772497177}, {"id": 17, "seek": 8280, "start": 82.8, "end": 88.56, "text": " Leave them down below in the comment section. I'll pin them if there's something if it's something significant", "tokens": [50364, 9825, 552, 760, 2507, 294, 264, 2871, 3541, 13, 286, 603, 5447, 552, 498, 456, 311, 746, 498, 309, 311, 746, 4776, 50652], "temperature": 0.0, "avg_logprob": -0.22861617970689435, "compression_ratio": 1.6833976833976834, "no_speech_prob": 0.03620864450931549}, {"id": 18, "seek": 8280, "start": 89.2, "end": 91.2, "text": " Because then it's not not only just for me", "tokens": [50684, 1436, 550, 309, 311, 406, 406, 787, 445, 337, 385, 50784], "temperature": 0.0, "avg_logprob": -0.22861617970689435, "compression_ratio": 1.6833976833976834, "no_speech_prob": 0.03620864450931549}, {"id": 19, "seek": 8280, "start": 91.2, "end": 99.3, "text": " But also anyone else watching these videos can can learn from the mistakes that I made think of this as the blind leading the blind", "tokens": [50784, 583, 611, 2878, 1646, 1976, 613, 2145, 393, 393, 1466, 490, 264, 8038, 300, 286, 1027, 519, 295, 341, 382, 264, 6865, 5775, 264, 6865, 51189], "temperature": 0.0, "avg_logprob": -0.22861617970689435, "compression_ratio": 1.6833976833976834, "no_speech_prob": 0.03620864450931549}, {"id": 20, "seek": 8280, "start": 100.36, "end": 102.36, "text": " This is more of a", "tokens": [51242, 639, 307, 544, 295, 257, 51342], "temperature": 0.0, "avg_logprob": -0.22861617970689435, "compression_ratio": 1.6833976833976834, "no_speech_prob": 0.03620864450931549}, {"id": 21, "seek": 8280, "start": 102.67999999999999, "end": 107.36, "text": " Exploratory disquisition and I'm as blind as you are perhaps even more", "tokens": [51358, 12514, 284, 4745, 717, 15398, 849, 293, 286, 478, 382, 6865, 382, 291, 366, 4317, 754, 544, 51592], "temperature": 0.0, "avg_logprob": -0.22861617970689435, "compression_ratio": 1.6833976833976834, "no_speech_prob": 0.03620864450931549}, {"id": 22, "seek": 8280, "start": 107.96, "end": 110.44, "text": " It's got nothing to do with the fact that I'm wearing glasses", "tokens": [51622, 467, 311, 658, 1825, 281, 360, 365, 264, 1186, 300, 286, 478, 4769, 10812, 51746], "temperature": 0.0, "avg_logprob": -0.22861617970689435, "compression_ratio": 1.6833976833976834, "no_speech_prob": 0.03620864450931549}, {"id": 23, "seek": 11044, "start": 111.03999999999999, "end": 114.56, "text": " It's simply the fact that I'm still very much new to Java", "tokens": [50394, 467, 311, 2935, 264, 1186, 300, 286, 478, 920, 588, 709, 777, 281, 10745, 50570], "temperature": 0.0, "avg_logprob": -0.23457244873046876, "compression_ratio": 1.657370517928287, "no_speech_prob": 0.011680268682539463}, {"id": 24, "seek": 11044, "start": 115.64, "end": 120.28, "text": " And an analogy that I've been using in the previous videos in this proviso section is", "tokens": [50624, 400, 364, 21663, 300, 286, 600, 668, 1228, 294, 264, 3894, 2145, 294, 341, 1439, 19227, 3541, 307, 50856], "temperature": 0.0, "avg_logprob": -0.23457244873046876, "compression_ratio": 1.657370517928287, "no_speech_prob": 0.011680268682539463}, {"id": 25, "seek": 11044, "start": 120.67999999999999, "end": 125.2, "text": " It's a lot similar to what one would do in a university tutorial setting", "tokens": [50876, 467, 311, 257, 688, 2531, 281, 437, 472, 576, 360, 294, 257, 5454, 7073, 3287, 51102], "temperature": 0.0, "avg_logprob": -0.23457244873046876, "compression_ratio": 1.657370517928287, "no_speech_prob": 0.011680268682539463}, {"id": 26, "seek": 11044, "start": 125.88, "end": 130.04, "text": " Where we've got we've got the teacher, of course, then we've got the bunch bunch of students", "tokens": [51136, 2305, 321, 600, 658, 321, 600, 658, 264, 5027, 11, 295, 1164, 11, 550, 321, 600, 658, 264, 3840, 3840, 295, 1731, 51344], "temperature": 0.0, "avg_logprob": -0.23457244873046876, "compression_ratio": 1.657370517928287, "no_speech_prob": 0.011680268682539463}, {"id": 27, "seek": 11044, "start": 130.52, "end": 135.64, "text": " Working together on a certain assignment or problem statement trying to figure it out and make sense of it", "tokens": [51368, 18337, 1214, 322, 257, 1629, 15187, 420, 1154, 5629, 1382, 281, 2573, 309, 484, 293, 652, 2020, 295, 309, 51624], "temperature": 0.0, "avg_logprob": -0.23457244873046876, "compression_ratio": 1.657370517928287, "no_speech_prob": 0.011680268682539463}, {"id": 28, "seek": 13564, "start": 135.76, "end": 138.32, "text": " So that's why I call it a collective", "tokens": [50370, 407, 300, 311, 983, 286, 818, 309, 257, 12590, 50498], "temperature": 0.0, "avg_logprob": -0.22285735222601122, "compression_ratio": 1.6109090909090908, "no_speech_prob": 0.01882392354309559}, {"id": 29, "seek": 13564, "start": 138.88, "end": 143.48, "text": " Exploratory disquisition and he has the third point as I said, I will inevitably make mistakes", "tokens": [50526, 12514, 284, 4745, 717, 15398, 849, 293, 415, 575, 264, 2636, 935, 382, 286, 848, 11, 286, 486, 28171, 652, 8038, 50756], "temperature": 0.0, "avg_logprob": -0.22285735222601122, "compression_ratio": 1.6109090909090908, "no_speech_prob": 0.01882392354309559}, {"id": 30, "seek": 13564, "start": 144.44, "end": 149.2, "text": " There's no way that I can get all of this right because a lot of the concepts that he is a", "tokens": [50804, 821, 311, 572, 636, 300, 286, 393, 483, 439, 295, 341, 558, 570, 257, 688, 295, 264, 10392, 300, 415, 307, 257, 51042], "temperature": 0.0, "avg_logprob": -0.22285735222601122, "compression_ratio": 1.6109090909090908, "no_speech_prob": 0.01882392354309559}, {"id": 31, "seek": 13564, "start": 150.07999999999998, "end": 154.51999999999998, "text": " Highlighted in these books. I've never ever used them in my day-to-day job", "tokens": [51086, 5229, 2764, 292, 294, 613, 3642, 13, 286, 600, 1128, 1562, 1143, 552, 294, 452, 786, 12, 1353, 12, 810, 1691, 51308], "temperature": 0.0, "avg_logprob": -0.22285735222601122, "compression_ratio": 1.6109090909090908, "no_speech_prob": 0.01882392354309559}, {"id": 32, "seek": 13564, "start": 154.51999999999998, "end": 157.79999999999998, "text": " Let's say or my day-to-day programming. So it's all quite new to me", "tokens": [51308, 961, 311, 584, 420, 452, 786, 12, 1353, 12, 810, 9410, 13, 407, 309, 311, 439, 1596, 777, 281, 385, 51472], "temperature": 0.0, "avg_logprob": -0.22285735222601122, "compression_ratio": 1.6109090909090908, "no_speech_prob": 0.01882392354309559}, {"id": 33, "seek": 13564, "start": 158.11999999999998, "end": 162.88, "text": " Some of it at least therefore again, sorry to keep being on a dead horse here", "tokens": [51488, 2188, 295, 309, 412, 1935, 4412, 797, 11, 2597, 281, 1066, 885, 322, 257, 3116, 6832, 510, 51726], "temperature": 0.0, "avg_logprob": -0.22285735222601122, "compression_ratio": 1.6109090909090908, "no_speech_prob": 0.01882392354309559}, {"id": 34, "seek": 16288, "start": 162.88, "end": 171.35999999999999, "text": " Please do point them out and given that this is a YouTube video series. Sorry, given that this is a coding video series", "tokens": [50364, 2555, 360, 935, 552, 484, 293, 2212, 300, 341, 307, 257, 3088, 960, 2638, 13, 4919, 11, 2212, 300, 341, 307, 257, 17720, 960, 2638, 50788], "temperature": 0.0, "avg_logprob": -0.22510811834052058, "compression_ratio": 1.6706827309236947, "no_speech_prob": 0.04269993305206299}, {"id": 35, "seek": 16288, "start": 171.35999999999999, "end": 176.64, "text": " And it's on programming. It just makes sense to have all the code that I use on get up", "tokens": [50788, 400, 309, 311, 322, 9410, 13, 467, 445, 1669, 2020, 281, 362, 439, 264, 3089, 300, 286, 764, 322, 483, 493, 51052], "temperature": 0.0, "avg_logprob": -0.22510811834052058, "compression_ratio": 1.6706827309236947, "no_speech_prob": 0.04269993305206299}, {"id": 36, "seek": 16288, "start": 176.64, "end": 179.1, "text": " So for each item, I'll break them down", "tokens": [51052, 407, 337, 1184, 3174, 11, 286, 603, 1821, 552, 760, 51175], "temperature": 0.0, "avg_logprob": -0.22510811834052058, "compression_ratio": 1.6706827309236947, "no_speech_prob": 0.04269993305206299}, {"id": 37, "seek": 16288, "start": 179.1, "end": 182.68, "text": " I'll break the get up repository into different items and you could find not only mine", "tokens": [51175, 286, 603, 1821, 264, 483, 493, 25841, 666, 819, 4754, 293, 291, 727, 915, 406, 787, 3892, 51354], "temperature": 0.0, "avg_logprob": -0.22510811834052058, "compression_ratio": 1.6706827309236947, "no_speech_prob": 0.04269993305206299}, {"id": 38, "seek": 16288, "start": 182.68, "end": 188.12, "text": " But even just your blocks personal repository to that is published, you know in his", "tokens": [51354, 583, 754, 445, 428, 8474, 2973, 25841, 281, 300, 307, 6572, 11, 291, 458, 294, 702, 51626], "temperature": 0.0, "avg_logprob": -0.22510811834052058, "compression_ratio": 1.6706827309236947, "no_speech_prob": 0.04269993305206299}, {"id": 39, "seek": 18812, "start": 188.68, "end": 192.1, "text": " Get up account, which is all the code used in the book. In fact", "tokens": [50392, 3240, 493, 2696, 11, 597, 307, 439, 264, 3089, 1143, 294, 264, 1446, 13, 682, 1186, 50563], "temperature": 0.0, "avg_logprob": -0.23716183097995058, "compression_ratio": 1.552, "no_speech_prob": 0.01614556461572647}, {"id": 40, "seek": 18812, "start": 193.32, "end": 197.48000000000002, "text": " Alrighty, let's get started. So this is gonna be item number five", "tokens": [50624, 43301, 11, 718, 311, 483, 1409, 13, 407, 341, 307, 799, 312, 3174, 1230, 1732, 50832], "temperature": 0.0, "avg_logprob": -0.23716183097995058, "compression_ratio": 1.552, "no_speech_prob": 0.01614556461572647}, {"id": 41, "seek": 18812, "start": 197.88, "end": 202.96, "text": " This was a very very interesting item. I've got to be honest the more I've learned about the", "tokens": [50852, 639, 390, 257, 588, 588, 1880, 3174, 13, 286, 600, 658, 281, 312, 3245, 264, 544, 286, 600, 3264, 466, 264, 51106], "temperature": 0.0, "avg_logprob": -0.23716183097995058, "compression_ratio": 1.552, "no_speech_prob": 0.01614556461572647}, {"id": 42, "seek": 18812, "start": 203.6, "end": 210.0, "text": " Dependency injection pattern the more I've begun to appreciate it and see the beauty in the inversion of control concepts", "tokens": [51138, 4056, 521, 3020, 22873, 5102, 264, 544, 286, 600, 16009, 281, 4449, 309, 293, 536, 264, 6643, 294, 264, 43576, 295, 1969, 10392, 51458], "temperature": 0.0, "avg_logprob": -0.23716183097995058, "compression_ratio": 1.552, "no_speech_prob": 0.01614556461572647}, {"id": 43, "seek": 18812, "start": 211.0, "end": 213.72, "text": " I would say Gwen Reed Martin Fowler's blogs", "tokens": [51508, 286, 576, 584, 42499, 32071, 9184, 479, 305, 1918, 311, 31038, 51644], "temperature": 0.0, "avg_logprob": -0.23716183097995058, "compression_ratio": 1.552, "no_speech_prob": 0.01614556461572647}, {"id": 44, "seek": 21372, "start": 213.72, "end": 217.32, "text": " He's probably the person who introduced it to the broader programming community", "tokens": [50364, 634, 311, 1391, 264, 954, 567, 7268, 309, 281, 264, 13227, 9410, 1768, 50544], "temperature": 0.0, "avg_logprob": -0.24356423301258306, "compression_ratio": 1.6345381526104417, "no_speech_prob": 0.011326735839247704}, {"id": 45, "seek": 21372, "start": 217.44, "end": 224.2, "text": " But Martin Fowler has some great blog posts on in version of control and of course with dependency injection", "tokens": [50550, 583, 9184, 479, 305, 1918, 575, 512, 869, 6968, 12300, 322, 294, 3037, 295, 1969, 293, 295, 1164, 365, 33621, 22873, 50888], "temperature": 0.0, "avg_logprob": -0.24356423301258306, "compression_ratio": 1.6345381526104417, "no_speech_prob": 0.011326735839247704}, {"id": 46, "seek": 21372, "start": 225.36, "end": 231.8, "text": " Normally programmers at least I normally use it with the framework with with spring or caucus another framework that we use at work", "tokens": [50946, 17424, 41504, 412, 1935, 286, 5646, 764, 309, 365, 264, 8388, 365, 365, 5587, 420, 47950, 1071, 8388, 300, 321, 764, 412, 589, 51268], "temperature": 0.0, "avg_logprob": -0.24356423301258306, "compression_ratio": 1.6345381526104417, "no_speech_prob": 0.011326735839247704}, {"id": 47, "seek": 21372, "start": 232.44, "end": 235.56, "text": " And yeah, I've really begun to appreciate that pattern", "tokens": [51300, 400, 1338, 11, 286, 600, 534, 16009, 281, 4449, 300, 5102, 51456], "temperature": 0.0, "avg_logprob": -0.24356423301258306, "compression_ratio": 1.6345381526104417, "no_speech_prob": 0.011326735839247704}, {"id": 48, "seek": 21372, "start": 236.28, "end": 238.28, "text": " and item five, of course states", "tokens": [51492, 293, 3174, 1732, 11, 295, 1164, 4368, 51592], "temperature": 0.0, "avg_logprob": -0.24356423301258306, "compression_ratio": 1.6345381526104417, "no_speech_prob": 0.011326735839247704}, {"id": 49, "seek": 23828, "start": 239.0, "end": 244.96, "text": " Prefer dependency injection to hardwiring resources now before we get to any of the code", "tokens": [50400, 48401, 33621, 22873, 281, 1152, 86, 5057, 3593, 586, 949, 321, 483, 281, 604, 295, 264, 3089, 50698], "temperature": 0.0, "avg_logprob": -0.20743501966244707, "compression_ratio": 1.6631205673758864, "no_speech_prob": 0.020959312096238136}, {"id": 50, "seek": 23828, "start": 245.12, "end": 248.76, "text": " Let's try and get a few just definitions across now", "tokens": [50706, 961, 311, 853, 293, 483, 257, 1326, 445, 21988, 2108, 586, 50888], "temperature": 0.0, "avg_logprob": -0.20743501966244707, "compression_ratio": 1.6631205673758864, "no_speech_prob": 0.020959312096238136}, {"id": 51, "seek": 23828, "start": 248.76, "end": 254.84, "text": " Some people might not appreciate this and some people might be a bit turned off by just reading of definitions, but personally I", "tokens": [50888, 2188, 561, 1062, 406, 4449, 341, 293, 512, 561, 1062, 312, 257, 857, 3574, 766, 538, 445, 3760, 295, 21988, 11, 457, 5665, 286, 51192], "temperature": 0.0, "avg_logprob": -0.20743501966244707, "compression_ratio": 1.6631205673758864, "no_speech_prob": 0.020959312096238136}, {"id": 52, "seek": 23828, "start": 255.68, "end": 256.88, "text": " have", "tokens": [51234, 362, 51294], "temperature": 0.0, "avg_logprob": -0.20743501966244707, "compression_ratio": 1.6631205673758864, "no_speech_prob": 0.020959312096238136}, {"id": 53, "seek": 23828, "start": 256.88, "end": 262.12, "text": " Great admiration and I'd say even even respect for words. I love language", "tokens": [51294, 3769, 44597, 293, 286, 1116, 584, 754, 754, 3104, 337, 2283, 13, 286, 959, 2856, 51556], "temperature": 0.0, "avg_logprob": -0.20743501966244707, "compression_ratio": 1.6631205673758864, "no_speech_prob": 0.020959312096238136}, {"id": 54, "seek": 23828, "start": 263.0, "end": 268.12, "text": " Therefore I do try and rely on definitions quite a lot because I think it's a good way to get a high-level understanding", "tokens": [51600, 7504, 286, 360, 853, 293, 10687, 322, 21988, 1596, 257, 688, 570, 286, 519, 309, 311, 257, 665, 636, 281, 483, 257, 1090, 12, 12418, 3701, 51856], "temperature": 0.0, "avg_logprob": -0.20743501966244707, "compression_ratio": 1.6631205673758864, "no_speech_prob": 0.020959312096238136}, {"id": 55, "seek": 26828, "start": 268.32, "end": 272.67999999999995, "text": " Before getting deeply into the code and sort of practically understanding", "tokens": [50366, 4546, 1242, 8760, 666, 264, 3089, 293, 1333, 295, 15667, 3701, 50584], "temperature": 0.0, "avg_logprob": -0.2162388249447471, "compression_ratio": 1.778688524590164, "no_speech_prob": 0.0019865420181304216}, {"id": 56, "seek": 26828, "start": 272.67999999999995, "end": 276.2, "text": " It's all it always I think it's always good to first get a theoretical understanding", "tokens": [50584, 467, 311, 439, 309, 1009, 286, 519, 309, 311, 1009, 665, 281, 700, 483, 257, 20864, 3701, 50760], "temperature": 0.0, "avg_logprob": -0.2162388249447471, "compression_ratio": 1.778688524590164, "no_speech_prob": 0.0019865420181304216}, {"id": 57, "seek": 26828, "start": 276.59999999999997, "end": 282.88, "text": " Despite what some people might say where you know, it's all about the code and the practical understanding in any case, sorry", "tokens": [50780, 11334, 437, 512, 561, 1062, 584, 689, 291, 458, 11, 309, 311, 439, 466, 264, 3089, 293, 264, 8496, 3701, 294, 604, 1389, 11, 2597, 51094], "temperature": 0.0, "avg_logprob": -0.2162388249447471, "compression_ratio": 1.778688524590164, "no_speech_prob": 0.0019865420181304216}, {"id": 58, "seek": 26828, "start": 282.88, "end": 284.88, "text": " I'm way too equations", "tokens": [51094, 286, 478, 636, 886, 11787, 51194], "temperature": 0.0, "avg_logprob": -0.2162388249447471, "compression_ratio": 1.778688524590164, "no_speech_prob": 0.0019865420181304216}, {"id": 59, "seek": 26828, "start": 284.96, "end": 289.76, "text": " So of course two key words is dependency injection", "tokens": [51198, 407, 295, 1164, 732, 2141, 2283, 307, 33621, 22873, 51438], "temperature": 0.0, "avg_logprob": -0.2162388249447471, "compression_ratio": 1.778688524590164, "no_speech_prob": 0.0019865420181304216}, {"id": 60, "seek": 26828, "start": 289.76, "end": 293.76, "text": " Well, two key phrases would be dependency injection and hardwiring resources", "tokens": [51438, 1042, 11, 732, 2141, 20312, 576, 312, 33621, 22873, 293, 1152, 86, 5057, 3593, 51638], "temperature": 0.0, "avg_logprob": -0.2162388249447471, "compression_ratio": 1.778688524590164, "no_speech_prob": 0.0019865420181304216}, {"id": 61, "seek": 29376, "start": 293.76, "end": 300.03999999999996, "text": " So firstly before we look at any code, let's try and understand what what hardwiring resources is", "tokens": [50364, 407, 27376, 949, 321, 574, 412, 604, 3089, 11, 718, 311, 853, 293, 1223, 437, 437, 1152, 86, 5057, 3593, 307, 50678], "temperature": 0.0, "avg_logprob": -0.21318744576495627, "compression_ratio": 1.5954545454545455, "no_speech_prob": 0.0007321233861148357}, {"id": 62, "seek": 29376, "start": 301.84, "end": 305.32, "text": " I couldn't find a really good definition online", "tokens": [50768, 286, 2809, 380, 915, 257, 534, 665, 7123, 2950, 50942], "temperature": 0.0, "avg_logprob": -0.21318744576495627, "compression_ratio": 1.5954545454545455, "no_speech_prob": 0.0007321233861148357}, {"id": 63, "seek": 29376, "start": 305.32, "end": 308.12, "text": " I couldn't find one that was succinct and", "tokens": [50942, 286, 2809, 380, 915, 472, 300, 390, 21578, 5460, 293, 51082], "temperature": 0.0, "avg_logprob": -0.21318744576495627, "compression_ratio": 1.5954545454545455, "no_speech_prob": 0.0007321233861148357}, {"id": 64, "seek": 29376, "start": 308.76, "end": 312.24, "text": " Conveyed and sort of encapsulated. That's not a programming pun", "tokens": [51114, 2656, 5603, 292, 293, 1333, 295, 38745, 6987, 13, 663, 311, 406, 257, 9410, 4468, 51288], "temperature": 0.0, "avg_logprob": -0.21318744576495627, "compression_ratio": 1.5954545454545455, "no_speech_prob": 0.0007321233861148357}, {"id": 65, "seek": 29376, "start": 312.88, "end": 319.8, "text": " Encapsulated all of what this term meant. So I ended up writing my own and here's what I wrote down", "tokens": [51320, 2193, 496, 1878, 6987, 439, 295, 437, 341, 1433, 4140, 13, 407, 286, 4590, 493, 3579, 452, 1065, 293, 510, 311, 437, 286, 4114, 760, 51666], "temperature": 0.0, "avg_logprob": -0.21318744576495627, "compression_ratio": 1.5954545454545455, "no_speech_prob": 0.0007321233861148357}, {"id": 66, "seek": 31980, "start": 320.8, "end": 324.72, "text": " Classes have dependencies, obviously. So if you have a class, let's say called", "tokens": [50414, 9471, 279, 362, 36606, 11, 2745, 13, 407, 498, 291, 362, 257, 1508, 11, 718, 311, 584, 1219, 50610], "temperature": 0.0, "avg_logprob": -0.2081881436434659, "compression_ratio": 2.017543859649123, "no_speech_prob": 0.0016221210826188326}, {"id": 67, "seek": 31980, "start": 325.72, "end": 328.76, "text": " Person or a better class a class called employee", "tokens": [50660, 8443, 420, 257, 1101, 1508, 257, 1508, 1219, 10738, 50812], "temperature": 0.0, "avg_logprob": -0.2081881436434659, "compression_ratio": 2.017543859649123, "no_speech_prob": 0.0016221210826188326}, {"id": 68, "seek": 31980, "start": 329.04, "end": 334.88, "text": " That class may have a dependency called class department because that employee might be a class of", "tokens": [50826, 663, 1508, 815, 362, 257, 33621, 1219, 1508, 5882, 570, 300, 10738, 1062, 312, 257, 1508, 295, 51118], "temperature": 0.0, "avg_logprob": -0.2081881436434659, "compression_ratio": 2.017543859649123, "no_speech_prob": 0.0016221210826188326}, {"id": 69, "seek": 31980, "start": 335.40000000000003, "end": 343.24, "text": " That employee might be a part of a department. So in that case the employee class is dependent on the department class", "tokens": [51144, 663, 10738, 1062, 312, 257, 644, 295, 257, 5882, 13, 407, 294, 300, 1389, 264, 10738, 1508, 307, 12334, 322, 264, 5882, 1508, 51536], "temperature": 0.0, "avg_logprob": -0.2081881436434659, "compression_ratio": 2.017543859649123, "no_speech_prob": 0.0016221210826188326}, {"id": 70, "seek": 34324, "start": 344.24, "end": 350.88, "text": " Formally the client class dependent class depends on the service class for different utilities", "tokens": [50414, 10126, 379, 264, 6423, 1508, 12334, 1508, 5946, 322, 264, 2643, 1508, 337, 819, 30482, 50746], "temperature": 0.0, "avg_logprob": -0.22013551812422902, "compression_ratio": 1.688715953307393, "no_speech_prob": 0.00638669403269887}, {"id": 71, "seek": 34324, "start": 350.88, "end": 355.96000000000004, "text": " It doesn't have to always be utilities, but in this case it makes more sense to think of it as a utility class and", "tokens": [50746, 467, 1177, 380, 362, 281, 1009, 312, 30482, 11, 457, 294, 341, 1389, 309, 1669, 544, 2020, 281, 519, 295, 309, 382, 257, 14877, 1508, 293, 51000], "temperature": 0.0, "avg_logprob": -0.22013551812422902, "compression_ratio": 1.688715953307393, "no_speech_prob": 0.00638669403269887}, {"id": 72, "seek": 34324, "start": 356.68, "end": 360.24, "text": " Having dependencies can create tied coupling. That is true", "tokens": [51036, 10222, 36606, 393, 1884, 9601, 37447, 13, 663, 307, 2074, 51214], "temperature": 0.0, "avg_logprob": -0.22013551812422902, "compression_ratio": 1.688715953307393, "no_speech_prob": 0.00638669403269887}, {"id": 73, "seek": 34324, "start": 360.6, "end": 366.40000000000003, "text": " Which should be avoided in software engineering, of course fundamental principles in OOP programming", "tokens": [51232, 3013, 820, 312, 24890, 294, 4722, 7043, 11, 295, 1164, 8088, 9156, 294, 422, 12059, 9410, 51522], "temperature": 0.0, "avg_logprob": -0.22013551812422902, "compression_ratio": 1.688715953307393, "no_speech_prob": 0.00638669403269887}, {"id": 74, "seek": 34324, "start": 366.40000000000003, "end": 370.84000000000003, "text": " It can create inflexible. Sorry, I shouldn't say OOP programming", "tokens": [51522, 467, 393, 1884, 1536, 2021, 964, 13, 4919, 11, 286, 4659, 380, 584, 422, 12059, 9410, 51744], "temperature": 0.0, "avg_logprob": -0.22013551812422902, "compression_ratio": 1.688715953307393, "no_speech_prob": 0.00638669403269887}, {"id": 75, "seek": 37084, "start": 370.84, "end": 376.79999999999995, "text": " It's software engineering in general, which is why we have patterns such as the microservice architecture because we won't", "tokens": [50364, 467, 311, 4722, 7043, 294, 2674, 11, 597, 307, 983, 321, 362, 8294, 1270, 382, 264, 15547, 25006, 9482, 570, 321, 1582, 380, 50662], "temperature": 0.0, "avg_logprob": -0.22516358417013418, "compression_ratio": 1.5912698412698412, "no_speech_prob": 0.0021484214812517166}, {"id": 76, "seek": 37084, "start": 377.28, "end": 380.4, "text": " Services itself to be the couple not just at an OOP level", "tokens": [50686, 12124, 2564, 281, 312, 264, 1916, 406, 445, 412, 364, 422, 12059, 1496, 50842], "temperature": 0.0, "avg_logprob": -0.22516358417013418, "compression_ratio": 1.5912698412698412, "no_speech_prob": 0.0021484214812517166}, {"id": 77, "seek": 37084, "start": 380.91999999999996, "end": 382.2, "text": " Getting back to this", "tokens": [50868, 13674, 646, 281, 341, 50932], "temperature": 0.0, "avg_logprob": -0.22516358417013418, "compression_ratio": 1.5912698412698412, "no_speech_prob": 0.0021484214812517166}, {"id": 78, "seek": 37084, "start": 382.2, "end": 390.96, "text": " It can create inflexible and untestable code if resources are hardwired by instantiating a service class and creating objects within a class", "tokens": [50932, 467, 393, 1884, 1536, 2021, 964, 293, 1701, 377, 712, 3089, 498, 3593, 366, 1152, 86, 1824, 538, 9836, 72, 990, 257, 2643, 1508, 293, 4084, 6565, 1951, 257, 1508, 51370], "temperature": 0.0, "avg_logprob": -0.22516358417013418, "compression_ratio": 1.5912698412698412, "no_speech_prob": 0.0021484214812517166}, {"id": 79, "seek": 37084, "start": 392.2, "end": 395.91999999999996, "text": " Ergo, we should prefer dependency injection design pattern", "tokens": [51432, 3300, 1571, 11, 321, 820, 4382, 33621, 22873, 1715, 5102, 51618], "temperature": 0.0, "avg_logprob": -0.22516358417013418, "compression_ratio": 1.5912698412698412, "no_speech_prob": 0.0021484214812517166}, {"id": 80, "seek": 39592, "start": 396.44, "end": 399.44, "text": " Correct. So this is the bit that we're gonna", "tokens": [50390, 12753, 13, 407, 341, 307, 264, 857, 300, 321, 434, 799, 50540], "temperature": 0.0, "avg_logprob": -0.2099133219037737, "compression_ratio": 1.5628140703517588, "no_speech_prob": 0.006486460100859404}, {"id": 81, "seek": 39592, "start": 400.28000000000003, "end": 402.28000000000003, "text": " Elucidate and expand on the most", "tokens": [50582, 2699, 1311, 327, 473, 293, 5268, 322, 264, 881, 50682], "temperature": 0.0, "avg_logprob": -0.2099133219037737, "compression_ratio": 1.5628140703517588, "no_speech_prob": 0.006486460100859404}, {"id": 82, "seek": 39592, "start": 402.76, "end": 407.92, "text": " the idea of why oh, sorry why it's not a good idea to", "tokens": [50706, 264, 1558, 295, 983, 1954, 11, 2597, 983, 309, 311, 406, 257, 665, 1558, 281, 50964], "temperature": 0.0, "avg_logprob": -0.2099133219037737, "compression_ratio": 1.5628140703517588, "no_speech_prob": 0.006486460100859404}, {"id": 83, "seek": 39592, "start": 409.44, "end": 413.08000000000004, "text": " instantiate and and hardware resources in a client class", "tokens": [51040, 9836, 13024, 293, 293, 8837, 3593, 294, 257, 6423, 1508, 51222], "temperature": 0.0, "avg_logprob": -0.2099133219037737, "compression_ratio": 1.5628140703517588, "no_speech_prob": 0.006486460100859404}, {"id": 84, "seek": 39592, "start": 413.76, "end": 416.52000000000004, "text": " If it's depending on some other utility class", "tokens": [51256, 759, 309, 311, 5413, 322, 512, 661, 14877, 1508, 51394], "temperature": 0.0, "avg_logprob": -0.2099133219037737, "compression_ratio": 1.5628140703517588, "no_speech_prob": 0.006486460100859404}, {"id": 85, "seek": 39592, "start": 417.24, "end": 422.12, "text": " so now let's take a look at what dependency injection is because that is the", "tokens": [51430, 370, 586, 718, 311, 747, 257, 574, 412, 437, 33621, 22873, 307, 570, 300, 307, 264, 51674], "temperature": 0.0, "avg_logprob": -0.2099133219037737, "compression_ratio": 1.5628140703517588, "no_speech_prob": 0.006486460100859404}, {"id": 86, "seek": 42212, "start": 422.52, "end": 426.28000000000003, "text": " The solution that we're prescribed to this problem we faced with tied coupling", "tokens": [50384, 440, 3827, 300, 321, 434, 29099, 281, 341, 1154, 321, 11446, 365, 9601, 37447, 50572], "temperature": 0.0, "avg_logprob": -0.430362259714227, "compression_ratio": 1.6544502617801047, "no_speech_prob": 0.017979979515075684}, {"id": 87, "seek": 42212, "start": 426.8, "end": 432.8, "text": " So I found this I found two definitions one is on geeks for geeks by", "tokens": [50598, 407, 286, 1352, 341, 286, 1352, 732, 21988, 472, 307, 322, 1519, 24785, 337, 1519, 24785, 538, 50898], "temperature": 0.0, "avg_logprob": -0.430362259714227, "compression_ratio": 1.6544502617801047, "no_speech_prob": 0.017979979515075684}, {"id": 88, "seek": 42212, "start": 433.52, "end": 439.84000000000003, "text": " Gherpreet Sashdeiva. Here's his I'm assuming Gherpreet. Yeah, Gherpreet is probably a bloke's name. I'm assuming", "tokens": [50934, 460, 511, 3712, 302, 318, 1299, 1479, 5931, 13, 1692, 311, 702, 286, 478, 11926, 460, 511, 3712, 302, 13, 865, 11, 460, 511, 3712, 302, 307, 1391, 257, 1749, 330, 311, 1315, 13, 286, 478, 11926, 51250], "temperature": 0.0, "avg_logprob": -0.430362259714227, "compression_ratio": 1.6544502617801047, "no_speech_prob": 0.017979979515075684}, {"id": 89, "seek": 42212, "start": 441.2, "end": 443.8, "text": " Not I'm not I'm assuming here's his", "tokens": [51318, 1726, 286, 478, 406, 286, 478, 11926, 510, 311, 702, 51448], "temperature": 0.0, "avg_logprob": -0.430362259714227, "compression_ratio": 1.6544502617801047, "no_speech_prob": 0.017979979515075684}, {"id": 90, "seek": 42212, "start": 444.56, "end": 445.88, "text": " Definition of what?", "tokens": [51486, 46245, 849, 295, 437, 30, 51552], "temperature": 0.0, "avg_logprob": -0.430362259714227, "compression_ratio": 1.6544502617801047, "no_speech_prob": 0.017979979515075684}, {"id": 91, "seek": 44588, "start": 445.88, "end": 453.24, "text": " Dependency dependency injection is just to make it easy. I'm gonna call it DI because sometimes dependency injection", "tokens": [50364, 4056, 521, 3020, 33621, 22873, 307, 445, 281, 652, 309, 1858, 13, 286, 478, 799, 818, 309, 11953, 570, 2171, 33621, 22873, 50732], "temperature": 0.0, "avg_logprob": -0.20967745313457414, "compression_ratio": 1.727626459143969, "no_speech_prob": 0.012622651644051075}, {"id": 92, "seek": 44588, "start": 453.24, "end": 457.32, "text": " It's kind of like a tongue twister. So I'll just call it DI", "tokens": [50732, 467, 311, 733, 295, 411, 257, 10601, 683, 1964, 13, 407, 286, 603, 445, 818, 309, 11953, 50936], "temperature": 0.0, "avg_logprob": -0.20967745313457414, "compression_ratio": 1.727626459143969, "no_speech_prob": 0.012622651644051075}, {"id": 93, "seek": 44588, "start": 458.48, "end": 464.52, "text": " DI is a design pattern in which one object supplies the dependencies of another object, correct?", "tokens": [50994, 11953, 307, 257, 1715, 5102, 294, 597, 472, 2657, 11768, 264, 36606, 295, 1071, 2657, 11, 3006, 30, 51296], "temperature": 0.0, "avg_logprob": -0.20967745313457414, "compression_ratio": 1.727626459143969, "no_speech_prob": 0.012622651644051075}, {"id": 94, "seek": 44588, "start": 464.52, "end": 469.0, "text": " It removes the tied coupling of dependencies. So the problem we had before with hardwiring", "tokens": [51296, 467, 30445, 264, 9601, 37447, 295, 36606, 13, 407, 264, 1154, 321, 632, 949, 365, 1152, 86, 5057, 51520], "temperature": 0.0, "avg_logprob": -0.20967745313457414, "compression_ratio": 1.727626459143969, "no_speech_prob": 0.012622651644051075}, {"id": 95, "seek": 44588, "start": 469.84, "end": 473.8, "text": " From the programming code so that it is easy to manage and test the application", "tokens": [51562, 3358, 264, 9410, 3089, 370, 300, 309, 307, 1858, 281, 3067, 293, 1500, 264, 3861, 51760], "temperature": 0.0, "avg_logprob": -0.20967745313457414, "compression_ratio": 1.727626459143969, "no_speech_prob": 0.012622651644051075}, {"id": 96, "seek": 47380, "start": 474.52000000000004, "end": 480.64, "text": " DI is also classified as a form of the broader technique of inversion of control, which is something I touched on", "tokens": [50400, 11953, 307, 611, 20627, 382, 257, 1254, 295, 264, 13227, 6532, 295, 43576, 295, 1969, 11, 597, 307, 746, 286, 9828, 322, 50706], "temperature": 0.0, "avg_logprob": -0.1924386166109897, "compression_ratio": 1.675, "no_speech_prob": 0.0038839562330394983}, {"id": 97, "seek": 47380, "start": 480.64, "end": 482.64, "text": " So the way I think of it is", "tokens": [50706, 407, 264, 636, 286, 519, 295, 309, 307, 50806], "temperature": 0.0, "avg_logprob": -0.1924386166109897, "compression_ratio": 1.675, "no_speech_prob": 0.0038839562330394983}, {"id": 98, "seek": 47380, "start": 483.52000000000004, "end": 485.52000000000004, "text": " Inversion of control is a broader", "tokens": [50850, 682, 29153, 295, 1969, 307, 257, 13227, 50950], "temperature": 0.0, "avg_logprob": -0.1924386166109897, "compression_ratio": 1.675, "no_speech_prob": 0.0038839562330394983}, {"id": 99, "seek": 47380, "start": 485.92, "end": 489.12, "text": " Principle more of a even like a paradigm in programming", "tokens": [50970, 38372, 781, 544, 295, 257, 754, 411, 257, 24709, 294, 9410, 51130], "temperature": 0.0, "avg_logprob": -0.1924386166109897, "compression_ratio": 1.675, "no_speech_prob": 0.0038839562330394983}, {"id": 100, "seek": 47380, "start": 489.12, "end": 494.24, "text": " I wouldn't probably put it at that level, but it's somewhere between a pattern and a paradigm", "tokens": [51130, 286, 2759, 380, 1391, 829, 309, 412, 300, 1496, 11, 457, 309, 311, 4079, 1296, 257, 5102, 293, 257, 24709, 51386], "temperature": 0.0, "avg_logprob": -0.1924386166109897, "compression_ratio": 1.675, "no_speech_prob": 0.0038839562330394983}, {"id": 101, "seek": 47380, "start": 494.24, "end": 498.54, "text": " Let's think of it that way which again as I said Martin Fowler and I believe", "tokens": [51386, 961, 311, 519, 295, 309, 300, 636, 597, 797, 382, 286, 848, 9184, 479, 305, 1918, 293, 286, 1697, 51601], "temperature": 0.0, "avg_logprob": -0.1924386166109897, "compression_ratio": 1.675, "no_speech_prob": 0.0038839562330394983}, {"id": 102, "seek": 49854, "start": 499.14000000000004, "end": 505.42, "text": " Uncle Bob, so I think those two people invented it or popularized it introduced and", "tokens": [50394, 12347, 6085, 11, 370, 286, 519, 729, 732, 561, 14479, 309, 420, 3743, 1602, 309, 7268, 293, 50708], "temperature": 0.0, "avg_logprob": -0.23124883463094523, "compression_ratio": 1.7073170731707317, "no_speech_prob": 0.004197598900645971}, {"id": 103, "seek": 49854, "start": 506.3, "end": 509.26000000000005, "text": " dependency injection or DI is more of a", "tokens": [50752, 33621, 22873, 420, 11953, 307, 544, 295, 257, 50900], "temperature": 0.0, "avg_logprob": -0.23124883463094523, "compression_ratio": 1.7073170731707317, "no_speech_prob": 0.004197598900645971}, {"id": 104, "seek": 49854, "start": 509.74, "end": 514.22, "text": " Implementation of what inversion of control is so inversion of control is more for a practice a", "tokens": [50924, 4331, 781, 19631, 295, 437, 43576, 295, 1969, 307, 370, 43576, 295, 1969, 307, 544, 337, 257, 3124, 257, 51148], "temperature": 0.0, "avg_logprob": -0.23124883463094523, "compression_ratio": 1.7073170731707317, "no_speech_prob": 0.004197598900645971}, {"id": 105, "seek": 49854, "start": 514.9, "end": 521.46, "text": " Principle that one can follow whereas DI is that most solid implementation in the form of a engineering pattern", "tokens": [51182, 38372, 781, 300, 472, 393, 1524, 9735, 11953, 307, 300, 881, 5100, 11420, 294, 264, 1254, 295, 257, 7043, 5102, 51510], "temperature": 0.0, "avg_logprob": -0.23124883463094523, "compression_ratio": 1.7073170731707317, "no_speech_prob": 0.004197598900645971}, {"id": 106, "seek": 49854, "start": 522.14, "end": 526.5, "text": " The responsibility of providing dependencies is delegated to the external code, correct?", "tokens": [51544, 440, 6357, 295, 6530, 36606, 307, 15824, 770, 281, 264, 8320, 3089, 11, 3006, 30, 51762], "temperature": 0.0, "avg_logprob": -0.23124883463094523, "compression_ratio": 1.7073170731707317, "no_speech_prob": 0.004197598900645971}, {"id": 107, "seek": 52650, "start": 527.46, "end": 532.04, "text": " The interjecting code constructs the services and invokes the client to inject them", "tokens": [50412, 440, 46787, 278, 3089, 7690, 82, 264, 3328, 293, 1048, 8606, 264, 6423, 281, 10711, 552, 50641], "temperature": 0.0, "avg_logprob": -0.24766754067462424, "compression_ratio": 2.216666666666667, "no_speech_prob": 0.004132966045290232}, {"id": 108, "seek": 52650, "start": 532.38, "end": 536.5, "text": " The client code clothe the client code need not worry about the", "tokens": [50658, 440, 6423, 3089, 596, 24863, 264, 6423, 3089, 643, 406, 3292, 466, 264, 50864], "temperature": 0.0, "avg_logprob": -0.24766754067462424, "compression_ratio": 2.216666666666667, "no_speech_prob": 0.004132966045290232}, {"id": 109, "seek": 52650, "start": 537.02, "end": 540.82, "text": " Interjecting code and how to build the services or in some cases", "tokens": [50890, 5751, 1020, 278, 3089, 293, 577, 281, 1322, 264, 3328, 420, 294, 512, 3331, 51080], "temperature": 0.0, "avg_logprob": -0.24766754067462424, "compression_ratio": 2.216666666666667, "no_speech_prob": 0.004132966045290232}, {"id": 110, "seek": 52650, "start": 541.5, "end": 545.06, "text": " Even what actuals even what the actual service is being used?", "tokens": [51114, 2754, 437, 3539, 82, 754, 437, 264, 3539, 2643, 307, 885, 1143, 30, 51292], "temperature": 0.0, "avg_logprob": -0.24766754067462424, "compression_ratio": 2.216666666666667, "no_speech_prob": 0.004132966045290232}, {"id": 111, "seek": 52650, "start": 546.42, "end": 553.06, "text": " Let me read that sorry the client code need not worry about the interjecting interjecting code and how to build the services", "tokens": [51360, 961, 385, 1401, 300, 2597, 264, 6423, 3089, 643, 406, 3292, 466, 264, 46787, 278, 46787, 278, 3089, 293, 577, 281, 1322, 264, 3328, 51692], "temperature": 0.0, "avg_logprob": -0.24766754067462424, "compression_ratio": 2.216666666666667, "no_speech_prob": 0.004132966045290232}, {"id": 112, "seek": 55306, "start": 553.06, "end": 560.14, "text": " Oh, in some cases even what actual service is being used. Oh gotcha. So because it's a reference that we are passing", "tokens": [50364, 876, 11, 294, 512, 3331, 754, 437, 3539, 2643, 307, 885, 1143, 13, 876, 658, 4413, 13, 407, 570, 309, 311, 257, 6408, 300, 321, 366, 8437, 50718], "temperature": 0.0, "avg_logprob": -0.2363599275287829, "compression_ratio": 1.718487394957983, "no_speech_prob": 0.0020828198175877333}, {"id": 113, "seek": 55306, "start": 560.78, "end": 564.5, "text": " Through a parameter in some kind of method in some cases", "tokens": [50750, 8927, 257, 13075, 294, 512, 733, 295, 3170, 294, 512, 3331, 50936], "temperature": 0.0, "avg_logprob": -0.2363599275287829, "compression_ratio": 1.718487394957983, "no_speech_prob": 0.0020828198175877333}, {"id": 114, "seek": 55306, "start": 564.5, "end": 569.26, "text": " We don't even have to worry about what the actual service that the client is using", "tokens": [50936, 492, 500, 380, 754, 362, 281, 3292, 466, 437, 264, 3539, 2643, 300, 264, 6423, 307, 1228, 51174], "temperature": 0.0, "avg_logprob": -0.2363599275287829, "compression_ratio": 1.718487394957983, "no_speech_prob": 0.0020828198175877333}, {"id": 115, "seek": 55306, "start": 570.3, "end": 575.0999999999999, "text": " So of course reading this definition one thing that should remind you of is", "tokens": [51226, 407, 295, 1164, 3760, 341, 7123, 472, 551, 300, 820, 4160, 291, 295, 307, 51466], "temperature": 0.0, "avg_logprob": -0.2363599275287829, "compression_ratio": 1.718487394957983, "no_speech_prob": 0.0020828198175877333}, {"id": 116, "seek": 55306, "start": 576.18, "end": 580.42, "text": " frameworks a very popular one or probably the most popular one is spring and", "tokens": [51520, 29834, 257, 588, 3743, 472, 420, 1391, 264, 881, 3743, 472, 307, 5587, 293, 51732], "temperature": 0.0, "avg_logprob": -0.2363599275287829, "compression_ratio": 1.718487394957983, "no_speech_prob": 0.0020828198175877333}, {"id": 117, "seek": 58042, "start": 580.86, "end": 585.66, "text": " You know the auto white annotation which helps us to inject dependencies into our", "tokens": [50386, 509, 458, 264, 8399, 2418, 48654, 597, 3665, 505, 281, 10711, 36606, 666, 527, 50626], "temperature": 0.0, "avg_logprob": -0.22025912321066554, "compression_ratio": 1.6575342465753424, "no_speech_prob": 0.0022513808216899633}, {"id": 118, "seek": 58042, "start": 586.62, "end": 588.42, "text": " components and", "tokens": [50674, 6677, 293, 50764], "temperature": 0.0, "avg_logprob": -0.22025912321066554, "compression_ratio": 1.6575342465753424, "no_speech_prob": 0.0022513808216899633}, {"id": 119, "seek": 58042, "start": 588.42, "end": 594.0999999999999, "text": " That's essentially the framework taking care of that. So there is this bit here where it says", "tokens": [50764, 663, 311, 4476, 264, 8388, 1940, 1127, 295, 300, 13, 407, 456, 307, 341, 857, 510, 689, 309, 1619, 51048], "temperature": 0.0, "avg_logprob": -0.22025912321066554, "compression_ratio": 1.6575342465753424, "no_speech_prob": 0.0022513808216899633}, {"id": 120, "seek": 58042, "start": 597.86, "end": 599.86, "text": " That line right there", "tokens": [51236, 663, 1622, 558, 456, 51336], "temperature": 0.0, "avg_logprob": -0.22025912321066554, "compression_ratio": 1.6575342465753424, "no_speech_prob": 0.0022513808216899633}, {"id": 121, "seek": 58042, "start": 600.6999999999999, "end": 605.26, "text": " The responsibility of providing dependencies is delegated to external code", "tokens": [51378, 440, 6357, 295, 6530, 36606, 307, 15824, 770, 281, 8320, 3089, 51606], "temperature": 0.0, "avg_logprob": -0.22025912321066554, "compression_ratio": 1.6575342465753424, "no_speech_prob": 0.0022513808216899633}, {"id": 122, "seek": 58042, "start": 605.26, "end": 609.14, "text": " So this is really what inversion of control is we are inverting the control", "tokens": [51606, 407, 341, 307, 534, 437, 43576, 295, 1969, 307, 321, 366, 28653, 783, 264, 1969, 51800], "temperature": 0.0, "avg_logprob": -0.22025912321066554, "compression_ratio": 1.6575342465753424, "no_speech_prob": 0.0022513808216899633}, {"id": 123, "seek": 60914, "start": 609.14, "end": 615.42, "text": " They're giving that control to an external party or an external framework in this case and that's what's going on here", "tokens": [50364, 814, 434, 2902, 300, 1969, 281, 364, 8320, 3595, 420, 364, 8320, 8388, 294, 341, 1389, 293, 300, 311, 437, 311, 516, 322, 510, 50678], "temperature": 0.0, "avg_logprob": -0.2738183094904973, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0013456732267513871}, {"id": 124, "seek": 60914, "start": 616.3, "end": 618.3, "text": " so the definition by", "tokens": [50722, 370, 264, 7123, 538, 50822], "temperature": 0.0, "avg_logprob": -0.2738183094904973, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0013456732267513871}, {"id": 125, "seek": 60914, "start": 619.1, "end": 621.22, "text": " Oracle docs and would be", "tokens": [50862, 25654, 45623, 293, 576, 312, 50968], "temperature": 0.0, "avg_logprob": -0.2738183094904973, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0013456732267513871}, {"id": 126, "seek": 60914, "start": 621.8199999999999, "end": 626.62, "text": " Di enables you to turn regular Java classes into managed objects", "tokens": [50998, 8789, 17077, 291, 281, 1261, 3890, 10745, 5359, 666, 6453, 6565, 51238], "temperature": 0.0, "avg_logprob": -0.2738183094904973, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0013456732267513871}, {"id": 127, "seek": 60914, "start": 627.18, "end": 635.34, "text": " Again in inversion of control this management is done by the framework and and to interject them into any into any other", "tokens": [51266, 3764, 294, 43576, 295, 1969, 341, 4592, 307, 1096, 538, 264, 8388, 293, 293, 281, 46787, 552, 666, 604, 666, 604, 661, 51674], "temperature": 0.0, "avg_logprob": -0.2738183094904973, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0013456732267513871}, {"id": 128, "seek": 63534, "start": 635.6600000000001, "end": 641.5, "text": " Managed object using Di your code can declare dependencies on any managed object", "tokens": [50380, 2458, 2980, 2657, 1228, 8789, 428, 3089, 393, 19710, 36606, 322, 604, 6453, 2657, 50672], "temperature": 0.0, "avg_logprob": -0.35038970646105316, "compression_ratio": 1.6146341463414635, "no_speech_prob": 0.0019567387644201517}, {"id": 129, "seek": 63534, "start": 643.7800000000001, "end": 649.46, "text": " So if you really think about it what DI allows is in many ways is to follow that", "tokens": [50786, 407, 498, 291, 534, 519, 466, 309, 437, 11953, 4045, 307, 294, 867, 2098, 307, 281, 1524, 300, 51070], "temperature": 0.0, "avg_logprob": -0.35038970646105316, "compression_ratio": 1.6146341463414635, "no_speech_prob": 0.0019567387644201517}, {"id": 130, "seek": 63534, "start": 649.5, "end": 651.7800000000001, "text": " good old OOP principle to prefer", "tokens": [51072, 665, 1331, 422, 12059, 8665, 281, 4382, 51186], "temperature": 0.0, "avg_logprob": -0.35038970646105316, "compression_ratio": 1.6146341463414635, "no_speech_prob": 0.0019567387644201517}, {"id": 131, "seek": 63534, "start": 652.34, "end": 656.4200000000001, "text": " composition over inheritance because you will see in the example soon", "tokens": [51214, 12686, 670, 32122, 570, 291, 486, 536, 294, 264, 1365, 2321, 51418], "temperature": 0.0, "avg_logprob": -0.35038970646105316, "compression_ratio": 1.6146341463414635, "no_speech_prob": 0.0019567387644201517}, {"id": 132, "seek": 63534, "start": 657.6600000000001, "end": 659.6600000000001, "text": " the dependent class is", "tokens": [51480, 264, 12334, 1508, 307, 51580], "temperature": 0.0, "avg_logprob": -0.35038970646105316, "compression_ratio": 1.6146341463414635, "no_speech_prob": 0.0019567387644201517}, {"id": 133, "seek": 63534, "start": 660.0600000000001, "end": 662.7800000000001, "text": " composed from the class that depends on and", "tokens": [51600, 18204, 490, 264, 1508, 300, 5946, 322, 293, 51736], "temperature": 0.0, "avg_logprob": -0.35038970646105316, "compression_ratio": 1.6146341463414635, "no_speech_prob": 0.0019567387644201517}, {"id": 134, "seek": 66278, "start": 663.4599999999999, "end": 665.74, "text": " Di allows this composition to take place", "tokens": [50398, 8789, 4045, 341, 12686, 281, 747, 1081, 50512], "temperature": 0.0, "avg_logprob": -0.25282110627164545, "compression_ratio": 1.5564853556485356, "no_speech_prob": 0.0015723216347396374}, {"id": 135, "seek": 66278, "start": 665.8199999999999, "end": 672.8199999999999, "text": " So I've made a mistake here. I should type effective Java example because these are the examples. We're gonna take a look at", "tokens": [50516, 407, 286, 600, 1027, 257, 6146, 510, 13, 286, 820, 2010, 4942, 10745, 1365, 570, 613, 366, 264, 5110, 13, 492, 434, 799, 747, 257, 574, 412, 50866], "temperature": 0.0, "avg_logprob": -0.25282110627164545, "compression_ratio": 1.5564853556485356, "no_speech_prob": 0.0015723216347396374}, {"id": 136, "seek": 66278, "start": 673.9399999999999, "end": 676.62, "text": " Alrighty firstly, let's take a look at how not to do this", "tokens": [50922, 43301, 27376, 11, 718, 311, 747, 257, 574, 412, 577, 406, 281, 360, 341, 51056], "temperature": 0.0, "avg_logprob": -0.25282110627164545, "compression_ratio": 1.5564853556485356, "no_speech_prob": 0.0015723216347396374}, {"id": 137, "seek": 66278, "start": 677.02, "end": 682.9399999999999, "text": " How it would be done if we didn't use the DI pattern by hard-wiring resources", "tokens": [51076, 1012, 309, 576, 312, 1096, 498, 321, 994, 380, 764, 264, 11953, 5102, 538, 1152, 12, 86, 5057, 3593, 51372], "temperature": 0.0, "avg_logprob": -0.25282110627164545, "compression_ratio": 1.5564853556485356, "no_speech_prob": 0.0015723216347396374}, {"id": 138, "seek": 66278, "start": 683.62, "end": 685.62, "text": " the first approach that", "tokens": [51406, 264, 700, 3109, 300, 51506], "temperature": 0.0, "avg_logprob": -0.25282110627164545, "compression_ratio": 1.5564853556485356, "no_speech_prob": 0.0015723216347396374}, {"id": 139, "seek": 66278, "start": 686.06, "end": 688.3399999999999, "text": " Joshua block has given in the book is", "tokens": [51528, 24005, 3461, 575, 2212, 294, 264, 1446, 307, 51642], "temperature": 0.0, "avg_logprob": -0.25282110627164545, "compression_ratio": 1.5564853556485356, "no_speech_prob": 0.0015723216347396374}, {"id": 140, "seek": 66278, "start": 690.18, "end": 692.18, "text": " By using", "tokens": [51734, 3146, 1228, 51834], "temperature": 0.0, "avg_logprob": -0.25282110627164545, "compression_ratio": 1.5564853556485356, "no_speech_prob": 0.0015723216347396374}, {"id": 141, "seek": 69218, "start": 692.3, "end": 696.54, "text": " Static utility classes or by using static utility methods", "tokens": [50370, 745, 2399, 14877, 5359, 420, 538, 1228, 13437, 14877, 7150, 50582], "temperature": 0.0, "avg_logprob": -0.15687101469265194, "compression_ratio": 1.7425742574257426, "no_speech_prob": 0.0028890841640532017}, {"id": 142, "seek": 69218, "start": 696.54, "end": 703.38, "text": " So firstly in the example, we're gonna use there's a class called spell checker which depends on a class called lexicon and", "tokens": [50582, 407, 27376, 294, 264, 1365, 11, 321, 434, 799, 764, 456, 311, 257, 1508, 1219, 9827, 1520, 260, 597, 5946, 322, 257, 1508, 1219, 476, 87, 11911, 293, 50924], "temperature": 0.0, "avg_logprob": -0.15687101469265194, "compression_ratio": 1.7425742574257426, "no_speech_prob": 0.0028890841640532017}, {"id": 143, "seek": 69218, "start": 703.8199999999999, "end": 709.18, "text": " That example is what we're gonna use across and eventually we're gonna use DI onto that just to show how it works", "tokens": [50946, 663, 1365, 307, 437, 321, 434, 799, 764, 2108, 293, 4728, 321, 434, 799, 764, 11953, 3911, 300, 445, 281, 855, 577, 309, 1985, 51214], "temperature": 0.0, "avg_logprob": -0.15687101469265194, "compression_ratio": 1.7425742574257426, "no_speech_prob": 0.0028890841640532017}, {"id": 144, "seek": 69218, "start": 709.18, "end": 714.4599999999999, "text": " And and why it's a better option. So it's quite straightforward despite not being the proper way to do this", "tokens": [51214, 400, 293, 983, 309, 311, 257, 1101, 3614, 13, 407, 309, 311, 1596, 15325, 7228, 406, 885, 264, 2296, 636, 281, 360, 341, 51478], "temperature": 0.0, "avg_logprob": -0.15687101469265194, "compression_ratio": 1.7425742574257426, "no_speech_prob": 0.0028890841640532017}, {"id": 145, "seek": 69218, "start": 714.4599999999999, "end": 721.0, "text": " It's sort of an anti pattern. We're doing a clear hard-wiring here on line number nine. We're creating this immutable object", "tokens": [51478, 467, 311, 1333, 295, 364, 6061, 5102, 13, 492, 434, 884, 257, 1850, 1152, 12, 86, 5057, 510, 322, 1622, 1230, 4949, 13, 492, 434, 4084, 341, 3397, 32148, 2657, 51805], "temperature": 0.0, "avg_logprob": -0.15687101469265194, "compression_ratio": 1.7425742574257426, "no_speech_prob": 0.0028890841640532017}, {"id": 146, "seek": 72100, "start": 721.6, "end": 727.56, "text": " The spell checker class is dependent on the lexicon class and we're storing it in a variable", "tokens": [50394, 440, 9827, 1520, 260, 1508, 307, 12334, 322, 264, 476, 87, 11911, 1508, 293, 321, 434, 26085, 309, 294, 257, 7006, 50692], "temperature": 0.0, "avg_logprob": -0.20413841457541929, "compression_ratio": 1.7536231884057971, "no_speech_prob": 0.0021825702860951424}, {"id": 147, "seek": 72100, "start": 728.2, "end": 735.36, "text": " Coordictionary and that's what we're using throughout this class and we're creating this immutable object using private static final despite it being immutable", "tokens": [50724, 3066, 765, 4105, 822, 293, 300, 311, 437, 321, 434, 1228, 3710, 341, 1508, 293, 321, 434, 4084, 341, 3397, 32148, 2657, 1228, 4551, 13437, 2572, 7228, 309, 885, 3397, 32148, 51082], "temperature": 0.0, "avg_logprob": -0.20413841457541929, "compression_ratio": 1.7536231884057971, "no_speech_prob": 0.0021825702860951424}, {"id": 148, "seek": 72100, "start": 735.36, "end": 742.4, "text": " It's still tightly coupled because it's hard-wired onto the class itself every time the spell checker class is instantiated", "tokens": [51082, 467, 311, 920, 21952, 29482, 570, 309, 311, 1152, 12, 86, 1824, 3911, 264, 1508, 2564, 633, 565, 264, 9827, 1520, 260, 1508, 307, 9836, 72, 770, 51434], "temperature": 0.0, "avg_logprob": -0.20413841457541929, "compression_ratio": 1.7536231884057971, "no_speech_prob": 0.0021825702860951424}, {"id": 149, "seek": 72100, "start": 742.4, "end": 748.32, "text": " Another example Joshua block highlights is using a singleton another way people do this. It's quite similar", "tokens": [51434, 3996, 1365, 24005, 3461, 14254, 307, 1228, 257, 1522, 14806, 1071, 636, 561, 360, 341, 13, 467, 311, 1596, 2531, 51730], "temperature": 0.0, "avg_logprob": -0.20413841457541929, "compression_ratio": 1.7536231884057971, "no_speech_prob": 0.0021825702860951424}, {"id": 150, "seek": 74832, "start": 749.0, "end": 755.12, "text": " Nevertheless, we're still hard-wiring a resource. I realize I've made a mistake here. I should get rid of the static keyword", "tokens": [50398, 26554, 11, 321, 434, 920, 1152, 12, 86, 5057, 257, 7684, 13, 286, 4325, 286, 600, 1027, 257, 6146, 510, 13, 286, 820, 483, 3973, 295, 264, 13437, 20428, 50704], "temperature": 0.0, "avg_logprob": -0.20568196119460386, "compression_ratio": 1.712686567164179, "no_speech_prob": 0.007120600901544094}, {"id": 151, "seek": 74832, "start": 755.2, "end": 758.6, "text": " That's where that instance of this class is given now", "tokens": [50708, 663, 311, 689, 300, 5197, 295, 341, 1508, 307, 2212, 586, 50878], "temperature": 0.0, "avg_logprob": -0.20568196119460386, "compression_ratio": 1.712686567164179, "no_speech_prob": 0.007120600901544094}, {"id": 152, "seek": 74832, "start": 758.6, "end": 765.2, "text": " Yes, there'll only be one object of the spell checker class, but the hard-wiring has still taken place, which is why he states", "tokens": [50878, 1079, 11, 456, 603, 787, 312, 472, 2657, 295, 264, 9827, 1520, 260, 1508, 11, 457, 264, 1152, 12, 86, 5057, 575, 920, 2726, 1081, 11, 597, 307, 983, 415, 4368, 51208], "temperature": 0.0, "avg_logprob": -0.20568196119460386, "compression_ratio": 1.712686567164179, "no_speech_prob": 0.007120600901544094}, {"id": 153, "seek": 74832, "start": 765.9200000000001, "end": 773.1600000000001, "text": " neither of these approaches is satisfactory because they assume that there is only one dictionary worth using", "tokens": [51244, 9662, 295, 613, 11587, 307, 48614, 570, 436, 6552, 300, 456, 307, 787, 472, 25890, 3163, 1228, 51606], "temperature": 0.0, "avg_logprob": -0.20568196119460386, "compression_ratio": 1.712686567164179, "no_speech_prob": 0.007120600901544094}, {"id": 154, "seek": 74832, "start": 773.36, "end": 775.36, "text": " which is the one that be hard-wire", "tokens": [51616, 597, 307, 264, 472, 300, 312, 1152, 12, 42689, 51716], "temperature": 0.0, "avg_logprob": -0.20568196119460386, "compression_ratio": 1.712686567164179, "no_speech_prob": 0.007120600901544094}, {"id": 155, "seek": 74832, "start": 775.8000000000001, "end": 777.84, "text": " here and", "tokens": [51738, 510, 293, 51840], "temperature": 0.0, "avg_logprob": -0.20568196119460386, "compression_ratio": 1.712686567164179, "no_speech_prob": 0.007120600901544094}, {"id": 156, "seek": 77784, "start": 777.84, "end": 785.96, "text": " Here in practice each language has its own dictionary and special dictionaries are used for special vocabularies", "tokens": [50364, 1692, 294, 3124, 1184, 2856, 575, 1080, 1065, 25890, 293, 2121, 22352, 4889, 366, 1143, 337, 2121, 2329, 455, 1040, 530, 50770], "temperature": 0.0, "avg_logprob": -0.2007447314518754, "compression_ratio": 1.6401673640167365, "no_speech_prob": 0.0010483424412086606}, {"id": 157, "seek": 77784, "start": 786.8000000000001, "end": 791.52, "text": " Also, it may be desirable to use a special dictionary for testing. Correct", "tokens": [50812, 2743, 11, 309, 815, 312, 30533, 281, 764, 257, 2121, 25890, 337, 4997, 13, 12753, 51048], "temperature": 0.0, "avg_logprob": -0.2007447314518754, "compression_ratio": 1.6401673640167365, "no_speech_prob": 0.0010483424412086606}, {"id": 158, "seek": 77784, "start": 791.52, "end": 796.52, "text": " I think I might get to the testing bit a bit later, but I found a really good article", "tokens": [51048, 286, 519, 286, 1062, 483, 281, 264, 4997, 857, 257, 857, 1780, 11, 457, 286, 1352, 257, 534, 665, 7222, 51298], "temperature": 0.0, "avg_logprob": -0.2007447314518754, "compression_ratio": 1.6401673640167365, "no_speech_prob": 0.0010483424412086606}, {"id": 159, "seek": 77784, "start": 797.12, "end": 801.2, "text": " Or like a blog post by spring as to why the DI pattern", "tokens": [51328, 1610, 411, 257, 6968, 2183, 538, 5587, 382, 281, 983, 264, 11953, 5102, 51532], "temperature": 0.0, "avg_logprob": -0.2007447314518754, "compression_ratio": 1.6401673640167365, "no_speech_prob": 0.0010483424412086606}, {"id": 160, "seek": 77784, "start": 801.72, "end": 805.1600000000001, "text": " Makes testing much more easier in any case getting back to this", "tokens": [51558, 25245, 4997, 709, 544, 3571, 294, 604, 1389, 1242, 646, 281, 341, 51730], "temperature": 0.0, "avg_logprob": -0.2007447314518754, "compression_ratio": 1.6401673640167365, "no_speech_prob": 0.0010483424412086606}, {"id": 161, "seek": 80516, "start": 806.04, "end": 811.88, "text": " It is visual thinking to assume that a single dictionary will surface for all time. So this", "tokens": [50408, 467, 307, 5056, 1953, 281, 6552, 300, 257, 2167, 25890, 486, 3753, 337, 439, 565, 13, 407, 341, 50700], "temperature": 0.0, "avg_logprob": -0.20197831471761069, "compression_ratio": 1.592920353982301, "no_speech_prob": 0.000732137355953455}, {"id": 162, "seek": 80516, "start": 812.4, "end": 818.4399999999999, "text": " Tide coupling again that we touched on makes all these assumptions which in the real world probably", "tokens": [50726, 314, 482, 37447, 797, 300, 321, 9828, 322, 1669, 439, 613, 17695, 597, 294, 264, 957, 1002, 1391, 51028], "temperature": 0.0, "avg_logprob": -0.20197831471761069, "compression_ratio": 1.592920353982301, "no_speech_prob": 0.000732137355953455}, {"id": 163, "seek": 80516, "start": 818.9599999999999, "end": 827.0799999999999, "text": " Won't stand static utility classes and singletons are inappropriate for classes whose behavior is parameterized by an underlying resource", "tokens": [51054, 14710, 380, 1463, 13437, 14877, 5359, 293, 1522, 2631, 892, 366, 26723, 337, 5359, 6104, 5223, 307, 13075, 1602, 538, 364, 14217, 7684, 51460], "temperature": 0.0, "avg_logprob": -0.20197831471761069, "compression_ratio": 1.592920353982301, "no_speech_prob": 0.000732137355953455}, {"id": 164, "seek": 80516, "start": 827.7199999999999, "end": 829.72, "text": " classes like the spell checker", "tokens": [51492, 5359, 411, 264, 9827, 1520, 260, 51592], "temperature": 0.0, "avg_logprob": -0.20197831471761069, "compression_ratio": 1.592920353982301, "no_speech_prob": 0.000732137355953455}, {"id": 165, "seek": 82972, "start": 830.2, "end": 836.0400000000001, "text": " What is required is the ability to support multiple instances of the class in our examples spell checker", "tokens": [50388, 708, 307, 4739, 307, 264, 3485, 281, 1406, 3866, 14519, 295, 264, 1508, 294, 527, 5110, 9827, 1520, 260, 50680], "temperature": 0.0, "avg_logprob": -0.24687611159457956, "compression_ratio": 1.888412017167382, "no_speech_prob": 0.0012253636959940195}, {"id": 166, "seek": 82972, "start": 836.36, "end": 843.6800000000001, "text": " Each of which uses the resource desired by the client in our example the the dictionary. So that's the resource a", "tokens": [50696, 6947, 295, 597, 4960, 264, 7684, 14721, 538, 264, 6423, 294, 527, 1365, 264, 264, 25890, 13, 407, 300, 311, 264, 7684, 257, 51062], "temperature": 0.0, "avg_logprob": -0.24687611159457956, "compression_ratio": 1.888412017167382, "no_speech_prob": 0.0012253636959940195}, {"id": 167, "seek": 82972, "start": 844.72, "end": 850.36, "text": " Simple pattern that satisfies this requirement is to pass the resource into the construct in", "tokens": [51114, 21532, 5102, 300, 44271, 341, 11695, 307, 281, 1320, 264, 7684, 666, 264, 7690, 294, 51396], "temperature": 0.0, "avg_logprob": -0.24687611159457956, "compression_ratio": 1.888412017167382, "no_speech_prob": 0.0012253636959940195}, {"id": 168, "seek": 82972, "start": 850.52, "end": 856.9200000000001, "text": " constructor when a new instance when creating a new instance and that is the solution that we shall", "tokens": [51404, 47479, 562, 257, 777, 5197, 562, 4084, 257, 777, 5197, 293, 300, 307, 264, 3827, 300, 321, 4393, 51724], "temperature": 0.0, "avg_logprob": -0.24687611159457956, "compression_ratio": 1.888412017167382, "no_speech_prob": 0.0012253636959940195}, {"id": 169, "seek": 82972, "start": 857.64, "end": 859.64, "text": " You know do a deep dive into", "tokens": [51760, 509, 458, 360, 257, 2452, 9192, 666, 51860], "temperature": 0.0, "avg_logprob": -0.24687611159457956, "compression_ratio": 1.888412017167382, "no_speech_prob": 0.0012253636959940195}, {"id": 170, "seek": 85972, "start": 860.44, "end": 865.72, "text": " That's happening right here in line number 16 and this here is in fact dependency injection", "tokens": [50400, 663, 311, 2737, 558, 510, 294, 1622, 1230, 3165, 293, 341, 510, 307, 294, 1186, 33621, 22873, 50664], "temperature": 0.0, "avg_logprob": -0.13452264034386838, "compression_ratio": 1.9515418502202644, "no_speech_prob": 0.000803886738140136}, {"id": 171, "seek": 85972, "start": 865.96, "end": 868.9200000000001, "text": " So we are passing that into the constructor of this class", "tokens": [50676, 407, 321, 366, 8437, 300, 666, 264, 47479, 295, 341, 1508, 50824], "temperature": 0.0, "avg_logprob": -0.13452264034386838, "compression_ratio": 1.9515418502202644, "no_speech_prob": 0.000803886738140136}, {"id": 172, "seek": 85972, "start": 871.12, "end": 874.28, "text": " This is one form of dependency injection", "tokens": [50934, 639, 307, 472, 1254, 295, 33621, 22873, 51092], "temperature": 0.0, "avg_logprob": -0.13452264034386838, "compression_ratio": 1.9515418502202644, "no_speech_prob": 0.000803886738140136}, {"id": 173, "seek": 85972, "start": 874.6800000000001, "end": 880.9200000000001, "text": " The dictionary is a dependency of the spell checker and is injected into the spell checker when it is created", "tokens": [51112, 440, 25890, 307, 257, 33621, 295, 264, 9827, 1520, 260, 293, 307, 36967, 666, 264, 9827, 1520, 260, 562, 309, 307, 2942, 51424], "temperature": 0.0, "avg_logprob": -0.13452264034386838, "compression_ratio": 1.9515418502202644, "no_speech_prob": 0.000803886738140136}, {"id": 174, "seek": 85972, "start": 880.9200000000001, "end": 886.4, "text": " So every single time a client's gonna create an instance of the spell checker class the dependency is injected", "tokens": [51424, 407, 633, 2167, 565, 257, 6423, 311, 799, 1884, 364, 5197, 295, 264, 9827, 1520, 260, 1508, 264, 33621, 307, 36967, 51698], "temperature": 0.0, "avg_logprob": -0.13452264034386838, "compression_ratio": 1.9515418502202644, "no_speech_prob": 0.000803886738140136}, {"id": 175, "seek": 85972, "start": 886.4, "end": 888.4, "text": " we expect the client in fact to", "tokens": [51698, 321, 2066, 264, 6423, 294, 1186, 281, 51798], "temperature": 0.0, "avg_logprob": -0.13452264034386838, "compression_ratio": 1.9515418502202644, "no_speech_prob": 0.000803886738140136}, {"id": 176, "seek": 88840, "start": 888.9599999999999, "end": 892.16, "text": " Inject that dependency or pass it when using this class", "tokens": [50392, 682, 1020, 300, 33621, 420, 1320, 309, 562, 1228, 341, 1508, 50552], "temperature": 0.0, "avg_logprob": -0.20162989967747738, "compression_ratio": 1.6434782608695653, "no_speech_prob": 0.0027140225283801556}, {"id": 177, "seek": 88840, "start": 892.72, "end": 896.64, "text": " So before we look deeply into the spell checker example in effective Java", "tokens": [50580, 407, 949, 321, 574, 8760, 666, 264, 9827, 1520, 260, 1365, 294, 4942, 10745, 50776], "temperature": 0.0, "avg_logprob": -0.20162989967747738, "compression_ratio": 1.6434782608695653, "no_speech_prob": 0.0027140225283801556}, {"id": 178, "seek": 88840, "start": 896.9599999999999, "end": 901.76, "text": " Let's take a quick look at this example. I found line a courtesy of by all done", "tokens": [50792, 961, 311, 747, 257, 1702, 574, 412, 341, 1365, 13, 286, 1352, 1622, 257, 41704, 295, 538, 439, 1096, 51032], "temperature": 0.0, "avg_logprob": -0.20162989967747738, "compression_ratio": 1.6434782608695653, "no_speech_prob": 0.0027140225283801556}, {"id": 179, "seek": 88840, "start": 902.3199999999999, "end": 906.9599999999999, "text": " I can never pronounce that name. I know every Java programmer uses this blog by all done", "tokens": [51060, 286, 393, 1128, 19567, 300, 1315, 13, 286, 458, 633, 10745, 32116, 4960, 341, 6968, 538, 439, 1096, 51292], "temperature": 0.0, "avg_logprob": -0.20162989967747738, "compression_ratio": 1.6434782608695653, "no_speech_prob": 0.0027140225283801556}, {"id": 180, "seek": 88840, "start": 907.76, "end": 910.88, "text": " For work, but I know that most of us can't pronounce it", "tokens": [51332, 1171, 589, 11, 457, 286, 458, 300, 881, 295, 505, 393, 380, 19567, 309, 51488], "temperature": 0.0, "avg_logprob": -0.20162989967747738, "compression_ratio": 1.6434782608695653, "no_speech_prob": 0.0027140225283801556}, {"id": 181, "seek": 88840, "start": 911.28, "end": 913.28, "text": " so this example here is", "tokens": [51508, 370, 341, 1365, 510, 307, 51608], "temperature": 0.0, "avg_logprob": -0.20162989967747738, "compression_ratio": 1.6434782608695653, "no_speech_prob": 0.0027140225283801556}, {"id": 182, "seek": 91328, "start": 913.52, "end": 916.16, "text": " How one would normally use di because a framework", "tokens": [50376, 1012, 472, 576, 5646, 764, 1026, 570, 257, 8388, 50508], "temperature": 0.0, "avg_logprob": -0.17249537989036323, "compression_ratio": 1.644736842105263, "no_speech_prob": 0.006002308800816536}, {"id": 183, "seek": 91328, "start": 916.64, "end": 917.8399999999999, "text": " Is it for us?", "tokens": [50532, 1119, 309, 337, 505, 30, 50592], "temperature": 0.0, "avg_logprob": -0.17249537989036323, "compression_ratio": 1.644736842105263, "no_speech_prob": 0.006002308800816536}, {"id": 184, "seek": 91328, "start": 917.8399999999999, "end": 919.8399999999999, "text": " So this is an example from spring, of course", "tokens": [50592, 407, 341, 307, 364, 1365, 490, 5587, 11, 295, 1164, 50692], "temperature": 0.0, "avg_logprob": -0.17249537989036323, "compression_ratio": 1.644736842105263, "no_speech_prob": 0.006002308800816536}, {"id": 185, "seek": 91328, "start": 920.16, "end": 925.6, "text": " And what we have here is we have a class called foo foo matter and you've annotated it", "tokens": [50708, 400, 437, 321, 362, 510, 307, 321, 362, 257, 1508, 1219, 726, 78, 726, 78, 1871, 293, 291, 600, 25339, 770, 309, 50980], "temperature": 0.0, "avg_logprob": -0.17249537989036323, "compression_ratio": 1.644736842105263, "no_speech_prob": 0.006002308800816536}, {"id": 186, "seek": 91328, "start": 926.16, "end": 928.9599999999999, "text": " with the component annotation and what this", "tokens": [51008, 365, 264, 6542, 48654, 293, 437, 341, 51148], "temperature": 0.0, "avg_logprob": -0.17249537989036323, "compression_ratio": 1.644736842105263, "no_speech_prob": 0.006002308800816536}, {"id": 187, "seek": 91328, "start": 929.92, "end": 938.3199999999999, "text": " Tells the compiler or the framework is to put this into the dependency pool or the object graph. I believe and and then the it's in the", "tokens": [51196, 5115, 82, 264, 31958, 420, 264, 8388, 307, 281, 829, 341, 666, 264, 33621, 7005, 420, 264, 2657, 4295, 13, 286, 1697, 293, 293, 550, 264, 309, 311, 294, 264, 51616], "temperature": 0.0, "avg_logprob": -0.17249537989036323, "compression_ratio": 1.644736842105263, "no_speech_prob": 0.006002308800816536}, {"id": 188, "seek": 93832, "start": 938.88, "end": 945.5200000000001, "text": " Context of the application in the application container and all these dependencies will be created and they will exist", "tokens": [50392, 4839, 3828, 295, 264, 3861, 294, 264, 3861, 10129, 293, 439, 613, 36606, 486, 312, 2942, 293, 436, 486, 2514, 50724], "temperature": 0.0, "avg_logprob": -0.17940890270730722, "compression_ratio": 1.8348214285714286, "no_speech_prob": 0.007458180654793978}, {"id": 189, "seek": 93832, "start": 946.08, "end": 952.1600000000001, "text": " Within a given scope, of course the scope can change. I believe there's the application context as the request context", "tokens": [50752, 15996, 257, 2212, 11923, 11, 295, 1164, 264, 11923, 393, 1319, 13, 286, 1697, 456, 311, 264, 3861, 4319, 382, 264, 5308, 4319, 51056], "temperature": 0.0, "avg_logprob": -0.17940890270730722, "compression_ratio": 1.8348214285714286, "no_speech_prob": 0.007458180654793978}, {"id": 190, "seek": 93832, "start": 952.4000000000001, "end": 954.88, "text": " So depending on what the scope that we want", "tokens": [51068, 407, 5413, 322, 437, 264, 11923, 300, 321, 528, 51192], "temperature": 0.0, "avg_logprob": -0.17940890270730722, "compression_ratio": 1.8348214285714286, "no_speech_prob": 0.007458180654793978}, {"id": 191, "seek": 93832, "start": 955.36, "end": 958.96, "text": " We can define how this component can live and exist", "tokens": [51216, 492, 393, 6964, 577, 341, 6542, 393, 1621, 293, 2514, 51396], "temperature": 0.0, "avg_logprob": -0.17940890270730722, "compression_ratio": 1.8348214285714286, "no_speech_prob": 0.007458180654793978}, {"id": 192, "seek": 93832, "start": 959.44, "end": 964.32, "text": " And then this foo service class is a dependent is dependent on foo foo matter", "tokens": [51420, 400, 550, 341, 726, 78, 2643, 1508, 307, 257, 12334, 307, 12334, 322, 726, 78, 726, 78, 1871, 51664], "temperature": 0.0, "avg_logprob": -0.17940890270730722, "compression_ratio": 1.8348214285714286, "no_speech_prob": 0.007458180654793978}, {"id": 193, "seek": 96432, "start": 964.6400000000001, "end": 968.24, "text": " And all we're doing here is we're injecting the dependency", "tokens": [50380, 400, 439, 321, 434, 884, 510, 307, 321, 434, 10711, 278, 264, 33621, 50560], "temperature": 0.0, "avg_logprob": -0.1690799517509265, "compression_ratio": 1.7276119402985075, "no_speech_prob": 0.005300696007907391}, {"id": 194, "seek": 96432, "start": 968.5600000000001, "end": 972.4000000000001, "text": " Using the auto watt annotation and this framework takes care of all of that", "tokens": [50576, 11142, 264, 8399, 31556, 48654, 293, 341, 8388, 2516, 1127, 295, 439, 295, 300, 50768], "temperature": 0.0, "avg_logprob": -0.1690799517509265, "compression_ratio": 1.7276119402985075, "no_speech_prob": 0.005300696007907391}, {"id": 195, "seek": 96432, "start": 972.72, "end": 976.0, "text": " So spring really injects foo formatter into the foo service class", "tokens": [50784, 407, 5587, 534, 10711, 82, 726, 78, 1254, 1161, 666, 264, 726, 78, 2643, 1508, 50948], "temperature": 0.0, "avg_logprob": -0.1690799517509265, "compression_ratio": 1.7276119402985075, "no_speech_prob": 0.005300696007907391}, {"id": 196, "seek": 96432, "start": 976.4000000000001, "end": 979.44, "text": " Now this is mostly how on our day-to-day view would use di", "tokens": [50968, 823, 341, 307, 5240, 577, 322, 527, 786, 12, 1353, 12, 810, 1910, 576, 764, 1026, 51120], "temperature": 0.0, "avg_logprob": -0.1690799517509265, "compression_ratio": 1.7276119402985075, "no_speech_prob": 0.005300696007907391}, {"id": 197, "seek": 96432, "start": 979.9200000000001, "end": 985.0400000000001, "text": " But of course, we're not here to learn about spring. We'll he'll learn about the dependence injection pattern", "tokens": [51144, 583, 295, 1164, 11, 321, 434, 406, 510, 281, 1466, 466, 5587, 13, 492, 603, 415, 603, 1466, 466, 264, 31704, 22873, 5102, 51400], "temperature": 0.0, "avg_logprob": -0.1690799517509265, "compression_ratio": 1.7276119402985075, "no_speech_prob": 0.005300696007907391}, {"id": 198, "seek": 96432, "start": 985.84, "end": 987.36, "text": " at least how it's", "tokens": [51440, 412, 1935, 577, 309, 311, 51516], "temperature": 0.0, "avg_logprob": -0.1690799517509265, "compression_ratio": 1.7276119402985075, "no_speech_prob": 0.005300696007907391}, {"id": 199, "seek": 96432, "start": 987.36, "end": 989.12, "text": " defined in this item", "tokens": [51516, 7642, 294, 341, 3174, 51604], "temperature": 0.0, "avg_logprob": -0.1690799517509265, "compression_ratio": 1.7276119402985075, "no_speech_prob": 0.005300696007907391}, {"id": 200, "seek": 96432, "start": 989.12, "end": 992.5600000000001, "text": " In comparison or in contrast to hardware and resources", "tokens": [51604, 682, 9660, 420, 294, 8712, 281, 8837, 293, 3593, 51776], "temperature": 0.0, "avg_logprob": -0.1690799517509265, "compression_ratio": 1.7276119402985075, "no_speech_prob": 0.005300696007907391}, {"id": 201, "seek": 99256, "start": 993.28, "end": 999.04, "text": " So here's the example we have. We have simply defined a private final variable of lexicon type collisionary", "tokens": [50400, 407, 510, 311, 264, 1365, 321, 362, 13, 492, 362, 2935, 7642, 257, 4551, 2572, 7006, 295, 476, 87, 11911, 2010, 24644, 822, 50688], "temperature": 0.0, "avg_logprob": -0.15273191471292516, "compression_ratio": 1.8669527896995708, "no_speech_prob": 0.001987403491511941}, {"id": 202, "seek": 99256, "start": 999.1199999999999, "end": 1003.8399999999999, "text": " There's no obviously instantiation taking place. So there's no object creation taking place", "tokens": [50692, 821, 311, 572, 2745, 9836, 6642, 1940, 1081, 13, 407, 456, 311, 572, 2657, 8016, 1940, 1081, 50928], "temperature": 0.0, "avg_logprob": -0.15273191471292516, "compression_ratio": 1.8669527896995708, "no_speech_prob": 0.001987403491511941}, {"id": 203, "seek": 99256, "start": 1004.4, "end": 1006.4, "text": " Therefore, there's no hard wiring", "tokens": [50956, 7504, 11, 456, 311, 572, 1152, 27520, 51056], "temperature": 0.0, "avg_logprob": -0.15273191471292516, "compression_ratio": 1.8669527896995708, "no_speech_prob": 0.001987403491511941}, {"id": 204, "seek": 99256, "start": 1007.1199999999999, "end": 1009.92, "text": " And then we have the constructor where we pass the dependency", "tokens": [51092, 400, 550, 321, 362, 264, 47479, 689, 321, 1320, 264, 33621, 51232], "temperature": 0.0, "avg_logprob": -0.15273191471292516, "compression_ratio": 1.8669527896995708, "no_speech_prob": 0.001987403491511941}, {"id": 205, "seek": 99256, "start": 1010.0, "end": 1013.4399999999999, "text": " So we pass the reference the the dependent object of the reference", "tokens": [51236, 407, 321, 1320, 264, 6408, 264, 264, 12334, 2657, 295, 264, 6408, 51408], "temperature": 0.0, "avg_logprob": -0.15273191471292516, "compression_ratio": 1.8669527896995708, "no_speech_prob": 0.001987403491511941}, {"id": 206, "seek": 99256, "start": 1014.16, "end": 1019.1999999999999, "text": " as the client's creating an object from the spell checker class and then", "tokens": [51444, 382, 264, 6423, 311, 4084, 364, 2657, 490, 264, 9827, 1520, 260, 1508, 293, 550, 51696], "temperature": 0.0, "avg_logprob": -0.15273191471292516, "compression_ratio": 1.8669527896995708, "no_speech_prob": 0.001987403491511941}, {"id": 207, "seek": 101920, "start": 1019.84, "end": 1024.88, "text": " Within the constructor, we set that into the private final variable within the class", "tokens": [50396, 15996, 264, 47479, 11, 321, 992, 300, 666, 264, 4551, 2572, 7006, 1951, 264, 1508, 50648], "temperature": 0.0, "avg_logprob": -0.1650099098135572, "compression_ratio": 1.776061776061776, "no_speech_prob": 0.0023963816929608583}, {"id": 208, "seek": 101920, "start": 1025.2, "end": 1028.64, "text": " So in that way, we expect the client to provide us with the implementation", "tokens": [50664, 407, 294, 300, 636, 11, 321, 2066, 264, 6423, 281, 2893, 505, 365, 264, 11420, 50836], "temperature": 0.0, "avg_logprob": -0.1650099098135572, "compression_ratio": 1.776061776061776, "no_speech_prob": 0.0023963816929608583}, {"id": 209, "seek": 101920, "start": 1028.72, "end": 1031.68, "text": " We don't do the implementation and over here just to be safe", "tokens": [50840, 492, 500, 380, 360, 264, 11420, 293, 670, 510, 445, 281, 312, 3273, 50988], "temperature": 0.0, "avg_logprob": -0.1650099098135572, "compression_ratio": 1.776061776061776, "no_speech_prob": 0.0023963816929608583}, {"id": 210, "seek": 101920, "start": 1032.16, "end": 1035.44, "text": " Just your block has used objects dot required on now", "tokens": [51012, 1449, 428, 3461, 575, 1143, 6565, 5893, 4739, 322, 586, 51176], "temperature": 0.0, "avg_logprob": -0.1650099098135572, "compression_ratio": 1.776061776061776, "no_speech_prob": 0.0023963816929608583}, {"id": 211, "seek": 101920, "start": 1035.52, "end": 1039.92, "text": " So what that tells us is that we can't pass a null value into this if if we do pass", "tokens": [51180, 407, 437, 300, 5112, 505, 307, 300, 321, 393, 380, 1320, 257, 18184, 2158, 666, 341, 498, 498, 321, 360, 1320, 51400], "temperature": 0.0, "avg_logprob": -0.1650099098135572, "compression_ratio": 1.776061776061776, "no_speech_prob": 0.0023963816929608583}, {"id": 212, "seek": 101920, "start": 1040.48, "end": 1045.52, "text": " Anything that's null it's going to throw another point of exception and that's a extract check that we", "tokens": [51428, 11998, 300, 311, 18184, 309, 311, 516, 281, 3507, 1071, 935, 295, 11183, 293, 300, 311, 257, 8947, 1520, 300, 321, 51680], "temperature": 0.0, "avg_logprob": -0.1650099098135572, "compression_ratio": 1.776061776061776, "no_speech_prob": 0.0023963816929608583}, {"id": 213, "seek": 104552, "start": 1046.4, "end": 1052.16, "text": " Pass that we have in this constructor. So then when the client wants to use this spell checker class", "tokens": [50408, 10319, 300, 321, 362, 294, 341, 47479, 13, 407, 550, 562, 264, 6423, 2738, 281, 764, 341, 9827, 1520, 260, 1508, 50696], "temperature": 0.0, "avg_logprob": -0.15846704553674767, "compression_ratio": 1.6680327868852458, "no_speech_prob": 0.004330669995397329}, {"id": 214, "seek": 104552, "start": 1052.24, "end": 1057.44, "text": " It'll look something like this. Let me quickly demonstrate that. So if I'm going to create an object of spell checker", "tokens": [50700, 467, 603, 574, 746, 411, 341, 13, 961, 385, 2661, 11698, 300, 13, 407, 498, 286, 478, 516, 281, 1884, 364, 2657, 295, 9827, 1520, 260, 50960], "temperature": 0.0, "avg_logprob": -0.15846704553674767, "compression_ratio": 1.6680327868852458, "no_speech_prob": 0.004330669995397329}, {"id": 215, "seek": 104552, "start": 1057.52, "end": 1058.8799999999999, "text": " I don't know why", "tokens": [50964, 286, 500, 380, 458, 983, 51032], "temperature": 0.0, "avg_logprob": -0.15846704553674767, "compression_ratio": 1.6680327868852458, "no_speech_prob": 0.004330669995397329}, {"id": 216, "seek": 104552, "start": 1058.8799999999999, "end": 1060.8799999999999, "text": " IntelliJ keeps doing that. It's kind of annoying", "tokens": [51032, 18762, 72, 41, 5965, 884, 300, 13, 467, 311, 733, 295, 11304, 51132], "temperature": 0.0, "avg_logprob": -0.15846704553674767, "compression_ratio": 1.6680327868852458, "no_speech_prob": 0.004330669995397329}, {"id": 217, "seek": 104552, "start": 1061.92, "end": 1063.92, "text": " All I got to do is this", "tokens": [51184, 1057, 286, 658, 281, 360, 307, 341, 51284], "temperature": 0.0, "avg_logprob": -0.15846704553674767, "compression_ratio": 1.6680327868852458, "no_speech_prob": 0.004330669995397329}, {"id": 218, "seek": 104552, "start": 1064.4, "end": 1066.4, "text": " new oops", "tokens": [51308, 777, 34166, 51408], "temperature": 0.0, "avg_logprob": -0.15846704553674767, "compression_ratio": 1.6680327868852458, "no_speech_prob": 0.004330669995397329}, {"id": 219, "seek": 104552, "start": 1070.48, "end": 1075.12, "text": " And then I and here I'm passing the implementation where I'm creating a new lexicon class", "tokens": [51612, 400, 550, 286, 293, 510, 286, 478, 8437, 264, 11420, 689, 286, 478, 4084, 257, 777, 476, 87, 11911, 1508, 51844], "temperature": 0.0, "avg_logprob": -0.15846704553674767, "compression_ratio": 1.6680327868852458, "no_speech_prob": 0.004330669995397329}, {"id": 220, "seek": 107552, "start": 1076.48, "end": 1080.8799999999999, "text": " So that's what we're passing here on into line number 16 in the constructor", "tokens": [50412, 407, 300, 311, 437, 321, 434, 8437, 510, 322, 666, 1622, 1230, 3165, 294, 264, 47479, 50632], "temperature": 0.0, "avg_logprob": -0.12125794821922932, "compression_ratio": 1.6741573033707866, "no_speech_prob": 0.0008294791914522648}, {"id": 221, "seek": 107552, "start": 1081.84, "end": 1085.52, "text": " And that's it. It's as simple as that. That is what dependence injection is", "tokens": [50680, 400, 300, 311, 309, 13, 467, 311, 382, 2199, 382, 300, 13, 663, 307, 437, 31704, 22873, 307, 50864], "temperature": 0.0, "avg_logprob": -0.12125794821922932, "compression_ratio": 1.6741573033707866, "no_speech_prob": 0.0008294791914522648}, {"id": 222, "seek": 107552, "start": 1086.08, "end": 1091.84, "text": " So we expect the client to do the implementation without doing any hard wiring and the great thing here is now", "tokens": [50892, 407, 321, 2066, 264, 6423, 281, 360, 264, 11420, 1553, 884, 604, 1152, 27520, 293, 264, 869, 551, 510, 307, 586, 51180], "temperature": 0.0, "avg_logprob": -0.12125794821922932, "compression_ratio": 1.6741573033707866, "no_speech_prob": 0.0008294791914522648}, {"id": 223, "seek": 107552, "start": 1092.16, "end": 1097.28, "text": " This gives the client the flexibility to pass any type of lexicon. You know, it could be", "tokens": [51196, 639, 2709, 264, 6423, 264, 12635, 281, 1320, 604, 2010, 295, 476, 87, 11911, 13, 509, 458, 11, 309, 727, 312, 51452], "temperature": 0.0, "avg_logprob": -0.12125794821922932, "compression_ratio": 1.6741573033707866, "no_speech_prob": 0.0008294791914522648}, {"id": 224, "seek": 107552, "start": 1098.08, "end": 1102.4, "text": " Dictionary two dictionary three doesn't really matter over here. I'm just creating it on the go", "tokens": [51492, 413, 4105, 822, 732, 25890, 1045, 1177, 380, 534, 1871, 670, 510, 13, 286, 478, 445, 4084, 309, 322, 264, 352, 51708], "temperature": 0.0, "avg_logprob": -0.12125794821922932, "compression_ratio": 1.6741573033707866, "no_speech_prob": 0.0008294791914522648}, {"id": 225, "seek": 110240, "start": 1102.8000000000002, "end": 1104.8000000000002, "text": " But or on the fly. Sorry", "tokens": [50384, 583, 420, 322, 264, 3603, 13, 4919, 50484], "temperature": 0.0, "avg_logprob": -0.12812760243049034, "compression_ratio": 1.7116788321167884, "no_speech_prob": 0.0008692750707268715}, {"id": 226, "seek": 110240, "start": 1105.1200000000001, "end": 1108.64, "text": " But it could be a different type. It could be a sub type of lexicon", "tokens": [50500, 583, 309, 727, 312, 257, 819, 2010, 13, 467, 727, 312, 257, 1422, 2010, 295, 476, 87, 11911, 50676], "temperature": 0.0, "avg_logprob": -0.12812760243049034, "compression_ratio": 1.7116788321167884, "no_speech_prob": 0.0008692750707268715}, {"id": 227, "seek": 110240, "start": 1108.64, "end": 1111.2, "text": " There are many things that we could pass into this constructor", "tokens": [50676, 821, 366, 867, 721, 300, 321, 727, 1320, 666, 341, 47479, 50804], "temperature": 0.0, "avg_logprob": -0.12812760243049034, "compression_ratio": 1.7116788321167884, "no_speech_prob": 0.0008692750707268715}, {"id": 228, "seek": 110240, "start": 1111.76, "end": 1119.1200000000001, "text": " And that creates loosely coupled code. So we continue while our spell checker example had only a single resource to dictionary", "tokens": [50832, 400, 300, 7829, 37966, 29482, 3089, 13, 407, 321, 2354, 1339, 527, 9827, 1520, 260, 1365, 632, 787, 257, 2167, 7684, 281, 25890, 51200], "temperature": 0.0, "avg_logprob": -0.12812760243049034, "compression_ratio": 1.7116788321167884, "no_speech_prob": 0.0008692750707268715}, {"id": 229, "seek": 110240, "start": 1119.68, "end": 1124.88, "text": " dependency injection works with an arbitrary number of resources and arbitrary dependency graphs", "tokens": [51228, 33621, 22873, 1985, 365, 364, 23211, 1230, 295, 3593, 293, 23211, 33621, 24877, 51488], "temperature": 0.0, "avg_logprob": -0.12812760243049034, "compression_ratio": 1.7116788321167884, "no_speech_prob": 0.0008692750707268715}, {"id": 230, "seek": 110240, "start": 1125.52, "end": 1130.3200000000002, "text": " It preserves immutability, which is because one one object exists in the dependency graph", "tokens": [51520, 467, 1183, 9054, 3397, 325, 2310, 11, 597, 307, 570, 472, 472, 2657, 8198, 294, 264, 33621, 4295, 51760], "temperature": 0.0, "avg_logprob": -0.12812760243049034, "compression_ratio": 1.7116788321167884, "no_speech_prob": 0.0008692750707268715}, {"id": 231, "seek": 113032, "start": 1130.72, "end": 1137.2, "text": " So multiple clients can share dependent objects exactly assuming the client's desire the same underlying resources", "tokens": [50384, 407, 3866, 6982, 393, 2073, 12334, 6565, 2293, 11926, 264, 6423, 311, 7516, 264, 912, 14217, 3593, 50708], "temperature": 0.0, "avg_logprob": -0.16038432575407482, "compression_ratio": 1.6300813008130082, "no_speech_prob": 0.0028005396015942097}, {"id": 232, "seek": 113032, "start": 1137.84, "end": 1143.12, "text": " Dependence injection is equally applicable to constructors static factories and builders", "tokens": [50740, 4056, 521, 655, 22873, 307, 12309, 21142, 281, 7690, 830, 13437, 24813, 293, 36281, 51004], "temperature": 0.0, "avg_logprob": -0.16038432575407482, "compression_ratio": 1.6300813008130082, "no_speech_prob": 0.0028005396015942097}, {"id": 233, "seek": 113032, "start": 1143.28, "end": 1146.08, "text": " Of course, because all those things are just methods which can pass", "tokens": [51012, 2720, 1164, 11, 570, 439, 729, 721, 366, 445, 7150, 597, 393, 1320, 51152], "temperature": 0.0, "avg_logprob": -0.16038432575407482, "compression_ratio": 1.6300813008130082, "no_speech_prob": 0.0028005396015942097}, {"id": 234, "seek": 113032, "start": 1146.8799999999999, "end": 1149.4399999999998, "text": " Values into so just saw that idea of", "tokens": [51192, 7188, 1247, 666, 370, 445, 1866, 300, 1558, 295, 51320], "temperature": 0.0, "avg_logprob": -0.16038432575407482, "compression_ratio": 1.6300813008130082, "no_speech_prob": 0.0028005396015942097}, {"id": 235, "seek": 113032, "start": 1150.24, "end": 1155.4399999999998, "text": " Or the what he mentions here that in this example, there's only a single resource being used", "tokens": [51360, 1610, 264, 437, 415, 23844, 510, 300, 294, 341, 1365, 11, 456, 311, 787, 257, 2167, 7684, 885, 1143, 51620], "temperature": 0.0, "avg_logprob": -0.16038432575407482, "compression_ratio": 1.6300813008130082, "no_speech_prob": 0.0028005396015942097}, {"id": 236, "seek": 115544, "start": 1156.24, "end": 1158.8, "text": " For an example like this in in real life", "tokens": [50404, 1171, 364, 1365, 411, 341, 294, 294, 957, 993, 50532], "temperature": 0.0, "avg_logprob": -0.14271064426587976, "compression_ratio": 1.728937728937729, "no_speech_prob": 0.010012134909629822}, {"id": 237, "seek": 115544, "start": 1158.8, "end": 1164.24, "text": " This is quite rare because one class or one object generally will be dependent on many other objects", "tokens": [50532, 639, 307, 1596, 5892, 570, 472, 1508, 420, 472, 2657, 5101, 486, 312, 12334, 322, 867, 661, 6565, 50804], "temperature": 0.0, "avg_logprob": -0.14271064426587976, "compression_ratio": 1.728937728937729, "no_speech_prob": 0.010012134909629822}, {"id": 238, "seek": 115544, "start": 1164.64, "end": 1165.6000000000001, "text": " In a case like that", "tokens": [50824, 682, 257, 1389, 411, 300, 50872], "temperature": 0.0, "avg_logprob": -0.14271064426587976, "compression_ratio": 1.728937728937729, "no_speech_prob": 0.010012134909629822}, {"id": 239, "seek": 115544, "start": 1165.6000000000001, "end": 1172.3200000000002, "text": " It's much easier using a framework because then all you got to do is use auto wired or inject or or any other annotation", "tokens": [50872, 467, 311, 709, 3571, 1228, 257, 8388, 570, 550, 439, 291, 658, 281, 360, 307, 764, 8399, 27415, 420, 10711, 420, 420, 604, 661, 48654, 51208], "temperature": 0.0, "avg_logprob": -0.14271064426587976, "compression_ratio": 1.728937728937729, "no_speech_prob": 0.010012134909629822}, {"id": 240, "seek": 115544, "start": 1172.3200000000002, "end": 1174.3200000000002, "text": " depending on the framework and", "tokens": [51208, 5413, 322, 264, 8388, 293, 51308], "temperature": 0.0, "avg_logprob": -0.14271064426587976, "compression_ratio": 1.728937728937729, "no_speech_prob": 0.010012134909629822}, {"id": 241, "seek": 115544, "start": 1174.3200000000002, "end": 1176.3200000000002, "text": " Let the framework take care of it by", "tokens": [51308, 961, 264, 8388, 747, 1127, 295, 309, 538, 51408], "temperature": 0.0, "avg_logprob": -0.14271064426587976, "compression_ratio": 1.728937728937729, "no_speech_prob": 0.010012134909629822}, {"id": 242, "seek": 115544, "start": 1176.48, "end": 1183.44, "text": " Inversion of control, let's say and then we give an example of how the di pattern has been used in the java utils library", "tokens": [51416, 682, 29153, 295, 1969, 11, 718, 311, 584, 293, 550, 321, 976, 364, 1365, 295, 577, 264, 1026, 5102, 575, 668, 1143, 294, 264, 361, 4061, 2839, 4174, 6405, 51764], "temperature": 0.0, "avg_logprob": -0.14271064426587976, "compression_ratio": 1.728937728937729, "no_speech_prob": 0.010012134909629822}, {"id": 243, "seek": 118344, "start": 1184.4, "end": 1189.28, "text": " Uh, in fact in it's it's used the example. He's given it's for functional programming", "tokens": [50412, 4019, 11, 294, 1186, 294, 309, 311, 309, 311, 1143, 264, 1365, 13, 634, 311, 2212, 309, 311, 337, 11745, 9410, 50656], "temperature": 0.0, "avg_logprob": -0.12170783678690593, "compression_ratio": 1.781021897810219, "no_speech_prob": 0.004006694070994854}, {"id": 244, "seek": 118344, "start": 1190.0, "end": 1194.88, "text": " He says a useful variant of the pattern is to pass a resource factory to the constructor", "tokens": [50692, 634, 1619, 257, 4420, 17501, 295, 264, 5102, 307, 281, 1320, 257, 7684, 9265, 281, 264, 47479, 50936], "temperature": 0.0, "avg_logprob": -0.12170783678690593, "compression_ratio": 1.781021897810219, "no_speech_prob": 0.004006694070994854}, {"id": 245, "seek": 118344, "start": 1195.68, "end": 1200.16, "text": " A factory is an object that can be called repeatedly to create instances of a type", "tokens": [50976, 316, 9265, 307, 364, 2657, 300, 393, 312, 1219, 18227, 281, 1884, 14519, 295, 257, 2010, 51200], "temperature": 0.0, "avg_logprob": -0.12170783678690593, "compression_ratio": 1.781021897810219, "no_speech_prob": 0.004006694070994854}, {"id": 246, "seek": 118344, "start": 1200.24, "end": 1206.48, "text": " We shall see soon a good example of it such factories embody the factory method pattern before we continue", "tokens": [51204, 492, 4393, 536, 2321, 257, 665, 1365, 295, 309, 1270, 24813, 42575, 264, 9265, 3170, 5102, 949, 321, 2354, 51516], "temperature": 0.0, "avg_logprob": -0.12170783678690593, "compression_ratio": 1.781021897810219, "no_speech_prob": 0.004006694070994854}, {"id": 247, "seek": 118344, "start": 1206.56, "end": 1212.96, "text": " Let's quickly get a quick definition of what the factory method pattern is probably one of the most popular patterns in oop", "tokens": [51520, 961, 311, 2661, 483, 257, 1702, 7123, 295, 437, 264, 9265, 3170, 5102, 307, 1391, 472, 295, 264, 881, 3743, 8294, 294, 277, 404, 51840], "temperature": 0.0, "avg_logprob": -0.12170783678690593, "compression_ratio": 1.781021897810219, "no_speech_prob": 0.004006694070994854}, {"id": 248, "seek": 121344, "start": 1213.76, "end": 1215.76, "text": " It is design patterns in oop", "tokens": [50380, 467, 307, 1715, 8294, 294, 277, 404, 50480], "temperature": 0.0, "avg_logprob": -0.12848850124138445, "compression_ratio": 1.9479553903345725, "no_speech_prob": 0.0022166247945278883}, {"id": 249, "seek": 121344, "start": 1215.76, "end": 1220.96, "text": " Factory method is a creational design pattern that provides an interface for creating objects in a super class", "tokens": [50480, 36868, 3170, 307, 257, 8016, 304, 1715, 5102, 300, 6417, 364, 9226, 337, 4084, 6565, 294, 257, 1687, 1508, 50740], "temperature": 0.0, "avg_logprob": -0.12848850124138445, "compression_ratio": 1.9479553903345725, "no_speech_prob": 0.0022166247945278883}, {"id": 250, "seek": 121344, "start": 1221.28, "end": 1226.96, "text": " But allows subclasses to all to the type of objects that will be created. This is from refactoring guru", "tokens": [50756, 583, 4045, 1422, 11665, 279, 281, 439, 281, 264, 2010, 295, 6565, 300, 486, 312, 2942, 13, 639, 307, 490, 1895, 578, 3662, 29949, 51040], "temperature": 0.0, "avg_logprob": -0.12848850124138445, "compression_ratio": 1.9479553903345725, "no_speech_prob": 0.0022166247945278883}, {"id": 251, "seek": 121344, "start": 1227.2, "end": 1230.0800000000002, "text": " So i'm not going to go go deeply into what the factory method pattern is", "tokens": [51052, 407, 741, 478, 406, 516, 281, 352, 352, 8760, 666, 437, 264, 9265, 3170, 5102, 307, 51196], "temperature": 0.0, "avg_logprob": -0.12848850124138445, "compression_ratio": 1.9479553903345725, "no_speech_prob": 0.0022166247945278883}, {"id": 252, "seek": 121344, "start": 1230.0800000000002, "end": 1235.44, "text": " But essentially it's a pattern that's used when creating objects and it sort of makes sense to use di or a", "tokens": [51196, 583, 4476, 309, 311, 257, 5102, 300, 311, 1143, 562, 4084, 6565, 293, 309, 1333, 295, 1669, 2020, 281, 764, 1026, 420, 257, 51464], "temperature": 0.0, "avg_logprob": -0.12848850124138445, "compression_ratio": 1.9479553903345725, "no_speech_prob": 0.0022166247945278883}, {"id": 253, "seek": 121344, "start": 1235.68, "end": 1240.48, "text": " variant of di in the factory method pattern because what we're really doing here is creating objects", "tokens": [51476, 17501, 295, 1026, 294, 264, 9265, 3170, 5102, 570, 437, 321, 434, 534, 884, 510, 307, 4084, 6565, 51716], "temperature": 0.0, "avg_logprob": -0.12848850124138445, "compression_ratio": 1.9479553903345725, "no_speech_prob": 0.0022166247945278883}, {"id": 254, "seek": 124048, "start": 1240.72, "end": 1245.2, "text": " So the example joshua bloke has used is the supply interface that was introduced in java 8", "tokens": [50376, 407, 264, 1365, 361, 3019, 4398, 1749, 330, 575, 1143, 307, 264, 5847, 9226, 300, 390, 7268, 294, 361, 4061, 1649, 50600], "temperature": 0.0, "avg_logprob": -0.14187165101369223, "compression_ratio": 1.6694915254237288, "no_speech_prob": 0.0018672773148864508}, {"id": 255, "seek": 124048, "start": 1245.68, "end": 1250.48, "text": " To implement functional programming. It's a part of the java utils function package", "tokens": [50624, 1407, 4445, 11745, 9410, 13, 467, 311, 257, 644, 295, 264, 361, 4061, 2839, 4174, 2445, 7372, 50864], "temperature": 0.0, "avg_logprob": -0.14187165101369223, "compression_ratio": 1.6694915254237288, "no_speech_prob": 0.0018672773148864508}, {"id": 256, "seek": 124048, "start": 1251.28, "end": 1253.84, "text": " And what this really allows us to create objects", "tokens": [50904, 400, 437, 341, 534, 4045, 505, 281, 1884, 6565, 51032], "temperature": 0.0, "avg_logprob": -0.14187165101369223, "compression_ratio": 1.6694915254237288, "no_speech_prob": 0.0018672773148864508}, {"id": 257, "seek": 124048, "start": 1254.64, "end": 1258.24, "text": " In a functional way or in a functional programming paradigm", "tokens": [51072, 682, 257, 11745, 636, 420, 294, 257, 11745, 9410, 24709, 51252], "temperature": 0.0, "avg_logprob": -0.14187165101369223, "compression_ratio": 1.6694915254237288, "no_speech_prob": 0.0018672773148864508}, {"id": 258, "seek": 124048, "start": 1258.88, "end": 1263.92, "text": " What we what a client can do is pass in a factory, which is this supplier", "tokens": [51284, 708, 321, 437, 257, 6423, 393, 360, 307, 1320, 294, 257, 9265, 11, 597, 307, 341, 31909, 51536], "temperature": 0.0, "avg_logprob": -0.14187165101369223, "compression_ratio": 1.6694915254237288, "no_speech_prob": 0.0018672773148864508}, {"id": 259, "seek": 124048, "start": 1265.68, "end": 1267.92, "text": " To create a subtype of the specified", "tokens": [51624, 1407, 1884, 257, 1422, 20467, 295, 264, 22206, 51736], "temperature": 0.0, "avg_logprob": -0.14187165101369223, "compression_ratio": 1.6694915254237288, "no_speech_prob": 0.0018672773148864508}, {"id": 260, "seek": 126792, "start": 1268.64, "end": 1270.64, "text": " type via the generic because", "tokens": [50400, 2010, 5766, 264, 19577, 570, 50500], "temperature": 0.0, "avg_logprob": -0.2010901871547904, "compression_ratio": 1.5159817351598173, "no_speech_prob": 0.0033762515522539616}, {"id": 261, "seek": 126792, "start": 1270.96, "end": 1275.68, "text": " We if you go to the example in fact, should I okay? So a really good example", "tokens": [50516, 492, 498, 291, 352, 281, 264, 1365, 294, 1186, 11, 820, 286, 1392, 30, 407, 257, 534, 665, 1365, 50752], "temperature": 0.0, "avg_logprob": -0.2010901871547904, "compression_ratio": 1.5159817351598173, "no_speech_prob": 0.0033762515522539616}, {"id": 262, "seek": 126792, "start": 1275.68, "end": 1277.3600000000001, "text": " I found is", "tokens": [50752, 286, 1352, 307, 50836], "temperature": 0.0, "avg_logprob": -0.2010901871547904, "compression_ratio": 1.5159817351598173, "no_speech_prob": 0.0033762515522539616}, {"id": 263, "seek": 126792, "start": 1277.3600000000001, "end": 1279.3600000000001, "text": " on in this article by", "tokens": [50836, 322, 294, 341, 7222, 538, 50936], "temperature": 0.0, "avg_logprob": -0.2010901871547904, "compression_ratio": 1.5159817351598173, "no_speech_prob": 0.0033762515522539616}, {"id": 264, "seek": 126792, "start": 1279.44, "end": 1281.44, "text": " Who's written this?", "tokens": [50940, 2102, 311, 3720, 341, 30, 51040], "temperature": 0.0, "avg_logprob": -0.2010901871547904, "compression_ratio": 1.5159817351598173, "no_speech_prob": 0.0033762515522539616}, {"id": 265, "seek": 126792, "start": 1285.92, "end": 1290.64, "text": " Someone called the cell 23. Okay. I haven't got a proper name. It's just a pseudonym", "tokens": [51264, 8734, 1219, 264, 2815, 6673, 13, 1033, 13, 286, 2378, 380, 658, 257, 2296, 1315, 13, 467, 311, 445, 257, 25505, 532, 12732, 51500], "temperature": 0.0, "avg_logprob": -0.2010901871547904, "compression_ratio": 1.5159817351598173, "no_speech_prob": 0.0033762515522539616}, {"id": 266, "seek": 126792, "start": 1291.28, "end": 1295.92, "text": " Anyway, this example here was is really good. It explains what the supply interface does", "tokens": [51532, 5684, 11, 341, 1365, 510, 390, 307, 534, 665, 13, 467, 13948, 437, 264, 5847, 9226, 775, 51764], "temperature": 0.0, "avg_logprob": -0.2010901871547904, "compression_ratio": 1.5159817351598173, "no_speech_prob": 0.0033762515522539616}, {"id": 267, "seek": 129592, "start": 1296.88, "end": 1298.4, "text": " so", "tokens": [50412, 370, 50488], "temperature": 0.0, "avg_logprob": -0.14095498048342192, "compression_ratio": 1.718487394957983, "no_speech_prob": 0.0023229944054037333}, {"id": 268, "seek": 129592, "start": 1298.4, "end": 1304.64, "text": " What it allows is it uses a wildcard. So it uses something called bounded wildcard type", "tokens": [50488, 708, 309, 4045, 307, 309, 4960, 257, 4868, 22259, 13, 407, 309, 4960, 746, 1219, 37498, 4868, 22259, 2010, 50800], "temperature": 0.0, "avg_logprob": -0.14095498048342192, "compression_ratio": 1.718487394957983, "no_speech_prob": 0.0023229944054037333}, {"id": 269, "seek": 129592, "start": 1304.88, "end": 1308.5600000000002, "text": " In fact, before I get to explaining it, I mean, let me quickly read this paragraph", "tokens": [50812, 682, 1186, 11, 949, 286, 483, 281, 13468, 309, 11, 286, 914, 11, 718, 385, 2661, 1401, 341, 18865, 50996], "temperature": 0.0, "avg_logprob": -0.14095498048342192, "compression_ratio": 1.718487394957983, "no_speech_prob": 0.0023229944054037333}, {"id": 270, "seek": 129592, "start": 1309.3600000000001, "end": 1311.3600000000001, "text": " by joshua bloke himself. So", "tokens": [51036, 538, 361, 3019, 4398, 1749, 330, 3647, 13, 407, 51136], "temperature": 0.0, "avg_logprob": -0.14095498048342192, "compression_ratio": 1.718487394957983, "no_speech_prob": 0.0023229944054037333}, {"id": 271, "seek": 129592, "start": 1311.3600000000001, "end": 1313.3600000000001, "text": " methods that take a supplier", "tokens": [51136, 7150, 300, 747, 257, 31909, 51236], "temperature": 0.0, "avg_logprob": -0.14095498048342192, "compression_ratio": 1.718487394957983, "no_speech_prob": 0.0023229944054037333}, {"id": 272, "seek": 129592, "start": 1313.76, "end": 1315.76, "text": " So that would be this method here", "tokens": [51256, 407, 300, 576, 312, 341, 3170, 510, 51356], "temperature": 0.0, "avg_logprob": -0.14095498048342192, "compression_ratio": 1.718487394957983, "no_speech_prob": 0.0023229944054037333}, {"id": 273, "seek": 129592, "start": 1316.0800000000002, "end": 1323.44, "text": " The the the create method. I'll read that again methods that take a supplier or an input should typically constrain the factory's type parameter", "tokens": [51372, 440, 264, 264, 1884, 3170, 13, 286, 603, 1401, 300, 797, 7150, 300, 747, 257, 31909, 420, 364, 4846, 820, 5850, 1817, 7146, 264, 9265, 311, 2010, 13075, 51740], "temperature": 0.0, "avg_logprob": -0.14095498048342192, "compression_ratio": 1.718487394957983, "no_speech_prob": 0.0023229944054037333}, {"id": 274, "seek": 132344, "start": 1323.92, "end": 1329.6000000000001, "text": " Using a bounded wildcard type and that's what we're doing here the bounded wildcard type", "tokens": [50388, 11142, 257, 37498, 4868, 22259, 2010, 293, 300, 311, 437, 321, 434, 884, 510, 264, 37498, 4868, 22259, 2010, 50672], "temperature": 0.0, "avg_logprob": -0.1638376218778593, "compression_ratio": 2.0316742081447963, "no_speech_prob": 0.009265280328691006}, {"id": 275, "seek": 132344, "start": 1330.0800000000002, "end": 1332.0800000000002, "text": " what this really means is this", "tokens": [50696, 437, 341, 534, 1355, 307, 341, 50796], "temperature": 0.0, "avg_logprob": -0.1638376218778593, "compression_ratio": 2.0316742081447963, "no_speech_prob": 0.009265280328691006}, {"id": 276, "seek": 132344, "start": 1332.3200000000002, "end": 1334.3200000000002, "text": " generic type we are passing into this", "tokens": [50808, 19577, 2010, 321, 366, 8437, 666, 341, 50908], "temperature": 0.0, "avg_logprob": -0.1638376218778593, "compression_ratio": 2.0316742081447963, "no_speech_prob": 0.009265280328691006}, {"id": 277, "seek": 132344, "start": 1334.96, "end": 1335.92, "text": " method", "tokens": [50940, 3170, 50988], "temperature": 0.0, "avg_logprob": -0.1638376218778593, "compression_ratio": 2.0316742081447963, "no_speech_prob": 0.009265280328691006}, {"id": 278, "seek": 132344, "start": 1335.92, "end": 1339.68, "text": " Into the supplier it should be a subtype of tile", "tokens": [50988, 23373, 264, 31909, 309, 820, 312, 257, 1422, 20467, 295, 20590, 51176], "temperature": 0.0, "avg_logprob": -0.1638376218778593, "compression_ratio": 2.0316742081447963, "no_speech_prob": 0.009265280328691006}, {"id": 279, "seek": 132344, "start": 1340.24, "end": 1346.3200000000002, "text": " And that's why it's called so the the upper bound of that is tile and it's that's why it's called bounded wildcard type", "tokens": [51204, 400, 300, 311, 983, 309, 311, 1219, 370, 264, 264, 6597, 5472, 295, 300, 307, 20590, 293, 309, 311, 300, 311, 983, 309, 311, 1219, 37498, 4868, 22259, 2010, 51508], "temperature": 0.0, "avg_logprob": -0.1638376218778593, "compression_ratio": 2.0316742081447963, "no_speech_prob": 0.009265280328691006}, {"id": 280, "seek": 132344, "start": 1346.4, "end": 1352.8, "text": " So generally the highest upper bound of something would be object because everything is a subtype of object in java", "tokens": [51512, 407, 5101, 264, 6343, 6597, 5472, 295, 746, 576, 312, 2657, 570, 1203, 307, 257, 1422, 20467, 295, 2657, 294, 361, 4061, 51832], "temperature": 0.0, "avg_logprob": -0.1638376218778593, "compression_ratio": 2.0316742081447963, "no_speech_prob": 0.009265280328691006}, {"id": 281, "seek": 135280, "start": 1353.2, "end": 1354.3999999999999, "text": " but in this case", "tokens": [50384, 457, 294, 341, 1389, 50444], "temperature": 0.0, "avg_logprob": -0.08557664354642232, "compression_ratio": 1.7117903930131004, "no_speech_prob": 0.002434101654216647}, {"id": 282, "seek": 135280, "start": 1354.3999999999999, "end": 1359.52, "text": " And if any type that we pass here should should extend or be a subtype of tile", "tokens": [50444, 400, 498, 604, 2010, 300, 321, 1320, 510, 820, 820, 10101, 420, 312, 257, 1422, 20467, 295, 20590, 50700], "temperature": 0.0, "avg_logprob": -0.08557664354642232, "compression_ratio": 1.7117903930131004, "no_speech_prob": 0.002434101654216647}, {"id": 283, "seek": 135280, "start": 1359.84, "end": 1363.68, "text": " So it's really constrained as joshua bloke has delineated on the book", "tokens": [50716, 407, 309, 311, 534, 38901, 382, 361, 3019, 4398, 1749, 330, 575, 1103, 533, 770, 322, 264, 1446, 50908], "temperature": 0.0, "avg_logprob": -0.08557664354642232, "compression_ratio": 1.7117903930131004, "no_speech_prob": 0.002434101654216647}, {"id": 284, "seek": 135280, "start": 1364.32, "end": 1371.44, "text": " Using this bounded wildcard type to allow the client to pass in a factory that creates any subtype of a specified type", "tokens": [50940, 11142, 341, 37498, 4868, 22259, 2010, 281, 2089, 264, 6423, 281, 1320, 294, 257, 9265, 300, 7829, 604, 1422, 20467, 295, 257, 22206, 2010, 51296], "temperature": 0.0, "avg_logprob": -0.08557664354642232, "compression_ratio": 1.7117903930131004, "no_speech_prob": 0.002434101654216647}, {"id": 285, "seek": 135280, "start": 1371.76, "end": 1378.3999999999999, "text": " Simply what the tile factory is is an object that can be called repeatedly to create instances of type tile", "tokens": [51312, 19596, 437, 264, 20590, 9265, 307, 307, 364, 2657, 300, 393, 312, 1219, 18227, 281, 1884, 14519, 295, 2010, 20590, 51644], "temperature": 0.0, "avg_logprob": -0.08557664354642232, "compression_ratio": 1.7117903930131004, "no_speech_prob": 0.002434101654216647}, {"id": 286, "seek": 137840, "start": 1378.8000000000002, "end": 1384.5600000000002, "text": " And then another example, which I was showing here this block post by this random person on geeks for geeks", "tokens": [50384, 400, 550, 1071, 1365, 11, 597, 286, 390, 4099, 510, 341, 3461, 2183, 538, 341, 4974, 954, 322, 1519, 24785, 337, 1519, 24785, 50672], "temperature": 0.0, "avg_logprob": -0.1280413269996643, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.0036494561936706305}, {"id": 287, "seek": 137840, "start": 1385.2, "end": 1389.2, "text": " Is much clearer than the one in fact joshua bloke has given in the book", "tokens": [50704, 1119, 709, 26131, 813, 264, 472, 294, 1186, 361, 3019, 4398, 1749, 330, 575, 2212, 294, 264, 1446, 50904], "temperature": 0.0, "avg_logprob": -0.1280413269996643, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.0036494561936706305}, {"id": 288, "seek": 137840, "start": 1389.8400000000001, "end": 1394.5600000000002, "text": " So at least to explain what the supplier interface does so over here", "tokens": [50936, 407, 412, 1935, 281, 2903, 437, 264, 31909, 9226, 775, 370, 670, 510, 51172], "temperature": 0.0, "avg_logprob": -0.1280413269996643, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.0036494561936706305}, {"id": 289, "seek": 137840, "start": 1394.64, "end": 1397.92, "text": " We have a supplier and we're saying its type is double", "tokens": [51176, 492, 362, 257, 31909, 293, 321, 434, 1566, 1080, 2010, 307, 3834, 51340], "temperature": 0.0, "avg_logprob": -0.1280413269996643, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.0036494561936706305}, {"id": 290, "seek": 137840, "start": 1398.48, "end": 1401.2, "text": " And we have this right random value variable that we're creating", "tokens": [51368, 400, 321, 362, 341, 558, 4974, 2158, 7006, 300, 321, 434, 4084, 51504], "temperature": 0.0, "avg_logprob": -0.1280413269996643, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.0036494561936706305}, {"id": 291, "seek": 137840, "start": 1401.8400000000001, "end": 1407.0400000000002, "text": " And then simply what this does is it it creates an object every every time it's called and then", "tokens": [51536, 400, 550, 2935, 437, 341, 775, 307, 309, 309, 7829, 364, 2657, 633, 633, 565, 309, 311, 1219, 293, 550, 51796], "temperature": 0.0, "avg_logprob": -0.1280413269996643, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.0036494561936706305}, {"id": 292, "seek": 140704, "start": 1407.92, "end": 1409.92, "text": " The only thing the supplier interface", "tokens": [50408, 440, 787, 551, 264, 31909, 9226, 50508], "temperature": 0.0, "avg_logprob": -0.16295776134584009, "compression_ratio": 1.710144927536232, "no_speech_prob": 0.0006771502085030079}, {"id": 293, "seek": 140704, "start": 1410.24, "end": 1415.6, "text": " Contains is one method called get which allows us to get the object that we create using", "tokens": [50524, 4839, 2315, 307, 472, 3170, 1219, 483, 597, 4045, 505, 281, 483, 264, 2657, 300, 321, 1884, 1228, 50792], "temperature": 0.0, "avg_logprob": -0.16295776134584009, "compression_ratio": 1.710144927536232, "no_speech_prob": 0.0006771502085030079}, {"id": 294, "seek": 140704, "start": 1416.3999999999999, "end": 1422.32, "text": " Yeah, of course using using the cat method. So yeah, the point that he's trying to make in the book is that this supplier interface", "tokens": [50832, 865, 11, 295, 1164, 1228, 1228, 264, 3857, 3170, 13, 407, 1338, 11, 264, 935, 300, 415, 311, 1382, 281, 652, 294, 264, 1446, 307, 300, 341, 31909, 9226, 51128], "temperature": 0.0, "avg_logprob": -0.16295776134584009, "compression_ratio": 1.710144927536232, "no_speech_prob": 0.0006771502085030079}, {"id": 295, "seek": 140704, "start": 1423.04, "end": 1426.24, "text": " Is a variant of the dependence injection", "tokens": [51164, 1119, 257, 17501, 295, 264, 31704, 22873, 51324], "temperature": 0.0, "avg_logprob": -0.16295776134584009, "compression_ratio": 1.710144927536232, "no_speech_prob": 0.0006771502085030079}, {"id": 296, "seek": 140704, "start": 1426.96, "end": 1431.04, "text": " pattern being used in fact in a factory method pattern", "tokens": [51360, 5102, 885, 1143, 294, 1186, 294, 257, 9265, 3170, 5102, 51564], "temperature": 0.0, "avg_logprob": -0.16295776134584009, "compression_ratio": 1.710144927536232, "no_speech_prob": 0.0006771502085030079}, {"id": 297, "seek": 143104, "start": 1431.12, "end": 1439.44, "text": " And then he continues although dependence injection greatly improves flexibility and testability", "tokens": [50368, 400, 550, 415, 6515, 4878, 31704, 22873, 14147, 24771, 12635, 293, 1500, 2310, 50784], "temperature": 0.0, "avg_logprob": -0.18683988397771661, "compression_ratio": 1.5991902834008098, "no_speech_prob": 0.0023590815253555775}, {"id": 298, "seek": 143104, "start": 1439.6, "end": 1446.0, "text": " So that now I want to get to this article on spring. I would leave a link to this down below in the description", "tokens": [50792, 407, 300, 586, 286, 528, 281, 483, 281, 341, 7222, 322, 5587, 13, 286, 576, 1856, 257, 2113, 281, 341, 760, 2507, 294, 264, 3855, 51112], "temperature": 0.0, "avg_logprob": -0.18683988397771661, "compression_ratio": 1.5991902834008098, "no_speech_prob": 0.0023590815253555775}, {"id": 299, "seek": 143104, "start": 1446.3999999999999, "end": 1449.36, "text": " It's a great article. I highly recommend you reading it. Um", "tokens": [51132, 467, 311, 257, 869, 7222, 13, 286, 5405, 2748, 291, 3760, 309, 13, 3301, 51280], "temperature": 0.0, "avg_logprob": -0.18683988397771661, "compression_ratio": 1.5991902834008098, "no_speech_prob": 0.0023590815253555775}, {"id": 300, "seek": 143104, "start": 1450.56, "end": 1457.76, "text": " You will see the value of using di especially when it comes to testing now. I've personally had the experience of", "tokens": [51340, 509, 486, 536, 264, 2158, 295, 1228, 1026, 2318, 562, 309, 1487, 281, 4997, 586, 13, 286, 600, 5665, 632, 264, 1752, 295, 51700], "temperature": 0.0, "avg_logprob": -0.18683988397771661, "compression_ratio": 1.5991902834008098, "no_speech_prob": 0.0023590815253555775}, {"id": 301, "seek": 143104, "start": 1458.6399999999999, "end": 1460.6399999999999, "text": " appreciating", "tokens": [51744, 3616, 990, 51844], "temperature": 0.0, "avg_logprob": -0.18683988397771661, "compression_ratio": 1.5991902834008098, "no_speech_prob": 0.0023590815253555775}, {"id": 302, "seek": 146104, "start": 1461.28, "end": 1465.36, "text": " Di especially in the context of things like hyphenate using ORM tools", "tokens": [50376, 8789, 2318, 294, 264, 4319, 295, 721, 411, 2477, 47059, 473, 1228, 19654, 44, 3873, 50580], "temperature": 0.0, "avg_logprob": -0.17243263569283993, "compression_ratio": 1.5611510791366907, "no_speech_prob": 0.0009694693726487458}, {"id": 303, "seek": 146104, "start": 1466.0, "end": 1469.44, "text": " That'll make testing much easier with j unit in java. So", "tokens": [50612, 663, 603, 652, 4997, 709, 3571, 365, 361, 4985, 294, 361, 4061, 13, 407, 50784], "temperature": 0.0, "avg_logprob": -0.17243263569283993, "compression_ratio": 1.5611510791366907, "no_speech_prob": 0.0009694693726487458}, {"id": 304, "seek": 146104, "start": 1470.32, "end": 1474.48, "text": " Therefore, I highly recommend you read this article. It's it's well worth it worth a read", "tokens": [50828, 7504, 11, 286, 5405, 2748, 291, 1401, 341, 7222, 13, 467, 311, 309, 311, 731, 3163, 309, 3163, 257, 1401, 51036], "temperature": 0.0, "avg_logprob": -0.17243263569283993, "compression_ratio": 1.5611510791366907, "no_speech_prob": 0.0009694693726487458}, {"id": 305, "seek": 146104, "start": 1477.92, "end": 1480.72, "text": " So I'll read that again because I keep interrupting myself", "tokens": [51208, 407, 286, 603, 1401, 300, 797, 570, 286, 1066, 49455, 2059, 51348], "temperature": 0.0, "avg_logprob": -0.17243263569283993, "compression_ratio": 1.5611510791366907, "no_speech_prob": 0.0009694693726487458}, {"id": 306, "seek": 146104, "start": 1482.08, "end": 1486.0, "text": " Although dependence injection greatly improves flexibility and testability", "tokens": [51416, 5780, 31704, 22873, 14147, 24771, 12635, 293, 1500, 2310, 51612], "temperature": 0.0, "avg_logprob": -0.17243263569283993, "compression_ratio": 1.5611510791366907, "no_speech_prob": 0.0009694693726487458}, {"id": 307, "seek": 146104, "start": 1486.3999999999999, "end": 1490.6399999999999, "text": " It can clutter up large projects which typically contains thousands of dependencies", "tokens": [51632, 467, 393, 40614, 493, 2416, 4455, 597, 5850, 8306, 5383, 295, 36606, 51844], "temperature": 0.0, "avg_logprob": -0.17243263569283993, "compression_ratio": 1.5611510791366907, "no_speech_prob": 0.0009694693726487458}, {"id": 308, "seek": 149104, "start": 1491.12, "end": 1497.04, "text": " This clutter can be all but eliminated by using a dependency injection framework such as dagger", "tokens": [50368, 639, 40614, 393, 312, 439, 457, 20308, 538, 1228, 257, 33621, 22873, 8388, 1270, 382, 36972, 50664], "temperature": 0.0, "avg_logprob": -0.17651548190992705, "compression_ratio": 1.6115384615384616, "no_speech_prob": 0.004068841226398945}, {"id": 309, "seek": 149104, "start": 1499.12, "end": 1504.24, "text": " Goose juice GUIC never heard of it and of course spring. So that's kind of what I mentioned before", "tokens": [50768, 1037, 541, 8544, 17917, 2532, 1128, 2198, 295, 309, 293, 295, 1164, 5587, 13, 407, 300, 311, 733, 295, 437, 286, 2835, 949, 51024], "temperature": 0.0, "avg_logprob": -0.17651548190992705, "compression_ratio": 1.6115384615384616, "no_speech_prob": 0.004068841226398945}, {"id": 310, "seek": 149104, "start": 1504.6399999999999, "end": 1510.24, "text": " Over here. There's only one dependency, but generally in large projects. That's not the case. There are many dependencies", "tokens": [51044, 4886, 510, 13, 821, 311, 787, 472, 33621, 11, 457, 5101, 294, 2416, 4455, 13, 663, 311, 406, 264, 1389, 13, 821, 366, 867, 36606, 51324], "temperature": 0.0, "avg_logprob": -0.17651548190992705, "compression_ratio": 1.6115384615384616, "no_speech_prob": 0.004068841226398945}, {"id": 311, "seek": 149104, "start": 1510.72, "end": 1512.8799999999999, "text": " In that case, it just makes sense to use a framework", "tokens": [51348, 682, 300, 1389, 11, 309, 445, 1669, 2020, 281, 764, 257, 8388, 51456], "temperature": 0.0, "avg_logprob": -0.17651548190992705, "compression_ratio": 1.6115384615384616, "no_speech_prob": 0.004068841226398945}, {"id": 312, "seek": 149104, "start": 1514.32, "end": 1516.8799999999999, "text": " And then we finished off by just your blog saying", "tokens": [51528, 400, 550, 321, 4335, 766, 538, 445, 428, 6968, 1566, 51656], "temperature": 0.0, "avg_logprob": -0.17651548190992705, "compression_ratio": 1.6115384615384616, "no_speech_prob": 0.004068841226398945}, {"id": 313, "seek": 151688, "start": 1516.88, "end": 1524.64, "text": " In summary, do not use a singleton or static utility class to implement a class that depends on one or more", "tokens": [50364, 682, 12691, 11, 360, 406, 764, 257, 1522, 14806, 420, 13437, 14877, 1508, 281, 4445, 257, 1508, 300, 5946, 322, 472, 420, 544, 50752], "temperature": 0.0, "avg_logprob": -0.1745147705078125, "compression_ratio": 1.690721649484536, "no_speech_prob": 0.002181652933359146}, {"id": 314, "seek": 151688, "start": 1525.0400000000002, "end": 1527.0400000000002, "text": " underlying resources that would be hardwiring", "tokens": [50772, 14217, 3593, 300, 576, 312, 1152, 86, 5057, 50872], "temperature": 0.0, "avg_logprob": -0.1745147705078125, "compression_ratio": 1.690721649484536, "no_speech_prob": 0.002181652933359146}, {"id": 315, "seek": 151688, "start": 1527.8400000000001, "end": 1530.48, "text": " Whose behavior affects that of the class", "tokens": [50912, 28463, 5223, 11807, 300, 295, 264, 1508, 51044], "temperature": 0.0, "avg_logprob": -0.1745147705078125, "compression_ratio": 1.690721649484536, "no_speech_prob": 0.002181652933359146}, {"id": 316, "seek": 151688, "start": 1531.2, "end": 1536.64, "text": " And do not have the class create these resources directly as we saw in the anti pattern examples", "tokens": [51080, 400, 360, 406, 362, 264, 1508, 1884, 613, 3593, 3838, 382, 321, 1866, 294, 264, 6061, 5102, 5110, 51352], "temperature": 0.0, "avg_logprob": -0.1745147705078125, "compression_ratio": 1.690721649484536, "no_speech_prob": 0.002181652933359146}, {"id": 317, "seek": 151688, "start": 1537.3600000000001, "end": 1539.3600000000001, "text": " instead pass the resources", "tokens": [51388, 2602, 1320, 264, 3593, 51488], "temperature": 0.0, "avg_logprob": -0.1745147705078125, "compression_ratio": 1.690721649484536, "no_speech_prob": 0.002181652933359146}, {"id": 318, "seek": 151688, "start": 1540.16, "end": 1542.16, "text": " like that", "tokens": [51528, 411, 300, 51628], "temperature": 0.0, "avg_logprob": -0.1745147705078125, "compression_ratio": 1.690721649484536, "no_speech_prob": 0.002181652933359146}, {"id": 319, "seek": 154216, "start": 1543.1200000000001, "end": 1547.76, "text": " Or factories to create them into the constructor or static factory or builder", "tokens": [50412, 1610, 24813, 281, 1884, 552, 666, 264, 47479, 420, 13437, 9265, 420, 27377, 50644], "temperature": 0.0, "avg_logprob": -0.21039385735234128, "compression_ratio": 1.6090909090909091, "no_speech_prob": 0.0035930925514549017}, {"id": 320, "seek": 154216, "start": 1548.48, "end": 1553.68, "text": " This practice known as dependence injection will greatly enhance the flexibility", "tokens": [50680, 639, 3124, 2570, 382, 31704, 22873, 486, 14147, 11985, 264, 12635, 50940], "temperature": 0.0, "avg_logprob": -0.21039385735234128, "compression_ratio": 1.6090909090909091, "no_speech_prob": 0.0035930925514549017}, {"id": 321, "seek": 154216, "start": 1554.4, "end": 1559.1200000000001, "text": " Reusability and testability of the class. That's it. It's quite a simple item", "tokens": [50976, 1300, 301, 2310, 293, 1500, 2310, 295, 264, 1508, 13, 663, 311, 309, 13, 467, 311, 1596, 257, 2199, 3174, 51212], "temperature": 0.0, "avg_logprob": -0.21039385735234128, "compression_ratio": 1.6090909090909091, "no_speech_prob": 0.0035930925514549017}, {"id": 322, "seek": 154216, "start": 1559.44, "end": 1564.88, "text": " but it's it's ubiquitous this pattern is ubiquitous in Java programming and", "tokens": [51228, 457, 309, 311, 309, 311, 43868, 39831, 341, 5102, 307, 43868, 39831, 294, 10745, 9410, 293, 51500], "temperature": 0.0, "avg_logprob": -0.21039385735234128, "compression_ratio": 1.6090909090909091, "no_speech_prob": 0.0035930925514549017}, {"id": 323, "seek": 154216, "start": 1565.6000000000001, "end": 1568.8000000000002, "text": " I think especially using it via framework", "tokens": [51536, 286, 519, 2318, 1228, 309, 5766, 8388, 51696], "temperature": 0.0, "avg_logprob": -0.21039385735234128, "compression_ratio": 1.6090909090909091, "no_speech_prob": 0.0035930925514549017}, {"id": 324, "seek": 156880, "start": 1569.36, "end": 1572.96, "text": " As a client we would be clients in that case. We will start seeing its value", "tokens": [50392, 1018, 257, 6423, 321, 576, 312, 6982, 294, 300, 1389, 13, 492, 486, 722, 2577, 1080, 2158, 50572], "temperature": 0.0, "avg_logprob": -0.1191766196434651, "compression_ratio": 1.687732342007435, "no_speech_prob": 0.03961655870079994}, {"id": 325, "seek": 156880, "start": 1573.52, "end": 1578.56, "text": " Therefore, it's something that's worth diving deep into and trying to understand", "tokens": [50600, 7504, 11, 309, 311, 746, 300, 311, 3163, 20241, 2452, 666, 293, 1382, 281, 1223, 50852], "temperature": 0.0, "avg_logprob": -0.1191766196434651, "compression_ratio": 1.687732342007435, "no_speech_prob": 0.03961655870079994}, {"id": 326, "seek": 156880, "start": 1579.76, "end": 1583.84, "text": " That's it. Thanks. That's watching. I hope you found value in the video and enjoyed that", "tokens": [50912, 663, 311, 309, 13, 2561, 13, 663, 311, 1976, 13, 286, 1454, 291, 1352, 2158, 294, 264, 960, 293, 4626, 300, 51116], "temperature": 0.0, "avg_logprob": -0.1191766196434651, "compression_ratio": 1.687732342007435, "no_speech_prob": 0.03961655870079994}, {"id": 327, "seek": 156880, "start": 1584.48, "end": 1589.44, "text": " And really I do hope that I'm getting a bit better at making these videos because sometimes as you can clearly see", "tokens": [51148, 400, 534, 286, 360, 1454, 300, 286, 478, 1242, 257, 857, 1101, 412, 1455, 613, 2145, 570, 2171, 382, 291, 393, 4448, 536, 51396], "temperature": 0.0, "avg_logprob": -0.1191766196434651, "compression_ratio": 1.687732342007435, "no_speech_prob": 0.03961655870079994}, {"id": 328, "seek": 156880, "start": 1589.76, "end": 1591.6, "text": " I struggle one to", "tokens": [51412, 286, 7799, 472, 281, 51504], "temperature": 0.0, "avg_logprob": -0.1191766196434651, "compression_ratio": 1.687732342007435, "no_speech_prob": 0.03961655870079994}, {"id": 329, "seek": 156880, "start": 1591.6, "end": 1596.48, "text": " Code live but also to to articulate some of these concepts in my own words", "tokens": [51504, 15549, 1621, 457, 611, 281, 281, 30305, 512, 295, 613, 10392, 294, 452, 1065, 2283, 51748], "temperature": 0.0, "avg_logprob": -0.1191766196434651, "compression_ratio": 1.687732342007435, "no_speech_prob": 0.03961655870079994}, {"id": 330, "seek": 159648, "start": 1596.96, "end": 1601.68, "text": " But hey, it's a process. It's it's it's it's a journey that counts to use a terrible cliche", "tokens": [50388, 583, 4177, 11, 309, 311, 257, 1399, 13, 467, 311, 309, 311, 309, 311, 309, 311, 257, 4671, 300, 14893, 281, 764, 257, 6237, 46705, 50624], "temperature": 0.0, "avg_logprob": -0.14881059101649693, "compression_ratio": 1.202020202020202, "no_speech_prob": 0.005175811238586903}, {"id": 331, "seek": 159648, "start": 1602.48, "end": 1604.48, "text": " Thanks for watching. Cheers", "tokens": [50664, 2561, 337, 1976, 13, 13006, 50764], "temperature": 0.0, "avg_logprob": -0.14881059101649693, "compression_ratio": 1.202020202020202, "no_speech_prob": 0.005175811238586903}], "language": "en"}