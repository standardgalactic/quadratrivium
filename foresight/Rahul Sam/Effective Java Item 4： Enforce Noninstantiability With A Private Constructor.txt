Hey everyone, welcome to yet another episode of my video series on Joshua Bloch's effective Java
where I take all the items that he has enumerated in this book and expand on them and try and make
sense of them and hopefully as I make sense of it by sharing and making this video you do can
follow along and try and understand what he's written in this fantastic superlative book.
Today we're going to cover item four and of course like I've done in the previous items before
I get to the item, the crux of the video, I need to go through the proviso and set a few
caveats or read out a few caveats let's say not really reading out but just following along on
some some bullet points that I'll list it down here. However if you've been following along you
could just skip the introduction and move to the item itself but I need to every single video
because maybe new viewers make this proviso or record this bit just feel like I have a ethical
duty to do so. The first point is this is not a tutorial that is very very important I understand
YouTube is just it is oh it's programming heaven it's tutorial heaven I mean you could learn anything
virtually anything of YouTube and most programming based videos are sort of how-tos tutorials things
that we miss out on let's say by not paying attention in a uni lecture but this is not a
tutorial this is really really it's a selfish project in many ways I'm trying to make sense of
this book and I find that it's easier to expound on the matter and sort of think out loud and that
helps me understand and my hope is that it's a sort of a collective understanding and a collective
learning in no way am I a teacher absolutely not and I have said this in the previous items the more
I'm understanding Java and OOP programming in general I'm coming to the realization that I
am far from being an expert so take whatever I say with the grain of salt and don't treat this
video like a tutorial which means if I make mistakes please point them out in the comment section
down below I like to think of this as more of a blind leading the blind project or video series
where I'm blind too and it's a factor that I'm making the video I am sort of leading whoever
that's watching this but I am as equally blind as you are that's not a pun because I'm wearing glasses
it's just a metaphor think of it as a exploratory disquisition so the best analogy that I've been
using in the previous items is what one would see in a typical university tutorial setting where
we've got an assignment or some problem statement and all the students get together and try to solve
it collectively that's really what I'm trying to do here and that means as I did pointed out before
I will inevitably make mistakes and given that this is I forgot to zoom into the proviso apologies
I hope you can read that and given that this is a programming video all the code that I've used
some of it is repurposed code from Joshua Bloch's repository itself the stuff that he's published
that's in fact based on the book all of that code and the stuff that I've written on my own
available on github so link to that in the description below saying that let's get to item number four
which is also from chapter two we're still in chapter two creating and destroying objects
and item number four is enforce non-instantiability with a private constructor this is the shortest
item in the book and it's very easy to understand and it's just a page so this video shouldn't be
that uh complicating uh complicating it shouldn't be that complicated and it should probably be quite
cook cook quite quick if I can stick to brevity which is quite difficult for me because I tend to
be long-winded so the first two paragraphs really is sort of an introduction into utility classes
classes that we see in the java library uh sorry in the java utils library and a good one that we
all probably use is the collections utility class this right here which if you scroll through it
of course it's got a private constructor but also it's got static member variables and static methods
because really these are the stuff that we're going to use as clients in our code
uh just a an ancillary point before I read uh paragraph from just your block it's quite
important to understand this in fact using utility classes or putting all these utility methods in
one single huge class uh putting static methods in one single huge class isn't a good idea if you
do a bit of googling and do a bit of research into it just to block himself he says it's not always
good idea to use utility classes but also I came across this really good blog blog post um
why can't I talk today well I can't talk in each and every one of these videos there's
something wrong with me but I came across this really good blog post by um okay I'm gonna butcher
this his name is Wojtek Ruzika and I'll leave a link to that down below in the description
he did he did leave uh he wrote wrote the post a blog post in 2017 and it's well what to read
especially because he he kind of expounds and elucidates as to how using utility classes or
let's say misusing them or abusing them could be sort of an anti-pattern because it doesn't
necessarily sit or follow OOP principles in fact I've got a little excerpt from his blog he says here
avoid you avoid using avoid utility classes that's the name of the blog post and in many states
by the by the OOP principles an object should contain both data and a behavior performed
over that data utility classes are just behavior all the data are passed as inputs it is in no
way object oriented it is more of a procedural way of thinking so it's you know because you keep
that in mind when using utility classes but that's sort of an ancillary point and the book
Joshua Block states such utility classes were not designed to be instantiated an instance would be
nonsensical of course because all really for instance this this class in the collections class
all it really does is hold a whole bunch of static methods that will be used that that will be used
by a client where we'll just pass data onto the function in the absence of explicit constructors
however the compiler provides a public parameterless default constructor to use this to a user this
constructor is indistinguishable indistinguishable from any other it is not uncommon to see unintentionally
instantially unintentionally instantiable classes in published apis especially in public apis because
so again this is a good example because firstly Joshua Block himself has written this but it's
also just something that we're all familiar with this class here if he didn't explicitly state
or whoever that wrote this code either Joshua Block or Neil Gaffta if the writer of this code
didn't explicitly state that this that explicitly put this private constructor when the collections
class is used by a client the jbm or the compiler would think of it would think of this as being a
public constructor and would instantiate this class and create an object in the heap memory
and that's not something we want especially from a utility class and then he continues
attempting to enforce non-instantiability by making a class abstract does not work either
the class can be subclassed so a sub class when the class is subclass let's say there's
abstract class a and we don't explicitly state well we don't really need even need to put a
constructor in an abstract class but let's say we have abstract class a and then b extends that
class that a concrete class the moment that happens this is what happens the class can be subclass
and the sub and the subclass instantiated so b can still instantiate itself and it's a type of the
parent class a so instead of talking about it and trying to conceptualize it let me show a proper
example uh there's a utility class here for a moment i will get rid of this private constructor
so now if this now this class can be instantiated and despite it not having any explicit code
apropos a constructor the moment this class is instantiated it has a public constructor with
no args so then i have a child class here and this child class can extend the utility class
as a result result of that we have a problem because this class is not going to be instantiated
because of the because of the child class however if we go back to the utility the utility class
and if we add this private constructor explicitly if we go back to the child class it'll throw this
error the IDE will say there is no default constructor available in this class that's good
which is what we want well it's not really what we want because this is after all a utility class
and it it isn't created to be inherited and that's exactly what Joshua Block states
furthermore it's it misleads the user into thinking the class was designed for inheritance
we don't have to inherit just to prevent it from being um let's say uh instantiated playing all
these games making an abstract class none of that it's it's useless it also misleads the client
that's what he's trying to say here because this utility class wasn't created uh to be subclassed
so of course the best solution is to explicitly define a private construct as i have done here
and not notabene as we saw before this does prevent this utility class from being subclassed
because it throws error there and that's important to keep in mind but generally no one really inherits
utility classes because they just hold static methods uh he continues there is however a simple
idiom to ensure non-instantiability a default constructor is generated only if a class contains
no explicit constructors so a class can be made non-instantiable by including a private constructor
that's exactly what we've done here now indeed you may wonder why line number 11 why do we need
this through a new assertion error why not just leave it like that as a as a private constructor
this is simply due to sometimes programmers making mistakes where i'll just read it off the book
he explains it much clearer than i do the assertion error so that's right here isn't strictly required
that's correct we can just leave the constructor private and leave the body empty but it provides
insurance in case the constructor is accidentally invoked from within the class so an example for
that would be here uh this public static void main method uh i'm trying to instantiate this class
what you'll see now is if i run this it'll throw an error it will throw a throw new
assertion error right there so even from within the class we can't instantiate that class however
if we didn't have this assertion error throw new assertion error that that would be possible someone
could whoops someone could do it from within the class and unfortunately now this class it lost its
non-instantiability property and then he continues this idiom is mildly counting intuitive because
the constructor is provided expressly so that it cannot be invoked it is therefore wise to include
a comment as shown earlier so that's what he's done here like number nine oh this is something
we touched on before as a side effect the idiom also prevents the class from being subclassed i
did already demonstrate that uh with this this example here all constructors must evoke a super
class constructor explicitly or implicitly and a subclass would have no accessible super class
constructed and invoked so when this is subclass this child utility class invokes the constructor
of the superclass and with its private that wouldn't happen that's it it's simple as that
fuel answer code as i said the shortest item the next item item number four is a very very exciting
i'm really keen to dive deep into this is prefer dependence injection to hardwiring resources
recently i've been taking a
