WEBVTT

00:00.000 --> 00:06.320
Hey everyone, welcome to yet another episode of my video series on just your blocks, Effective Java,

00:06.320 --> 00:12.640
now like every other content creator, YouTuber, whatever you may call it, we are no fans of

00:13.360 --> 00:19.920
lawnmowers, leaf blowers, any of that. And unfortunately, despite living in a very quiet

00:19.920 --> 00:26.160
neighborhood, there's someone moving alone. So I apologize if the background noise is gonna

00:26.160 --> 00:30.000
ruin the quality of this video, but in the editing process, I'll try to, you know,

00:30.560 --> 00:36.800
filter it out and kind of make it a bit more listenable. In any case, getting to this, today

00:36.800 --> 00:42.240
we're going to cover a pretty simple item to be honest, it's item 12, which is always override

00:42.240 --> 00:48.160
to string. So if you have been following along in item 11, we did always override hash code when

00:48.160 --> 00:53.360
you override equals. And essentially, I've been going through all the items in just your blocks

00:53.360 --> 01:00.160
book. But as per usual, before we get to the item itself, I want to get through the proviso.

01:00.720 --> 01:07.040
So without further ado, let's get started. This is not a tutorial. I am not a teacher or an expert.

01:07.040 --> 01:13.360
So whatever I say in this video, please do your own research, ask ChargeGPD for God's sake,

01:14.160 --> 01:17.280
because ChargeGPD is probably going to give a better explanation than I do.

01:18.240 --> 01:20.960
I feel like a lot of these tutorials are eventually going to be

01:21.600 --> 01:27.520
redundant or obsolete. Really, the AI does a much better job in explaining these concepts than

01:27.520 --> 01:34.320
myself at least can ever do. Nonetheless, I'm really doing these videos more for myself than

01:34.320 --> 01:39.440
the general public rather selfishly, because in some sense, explaining things, it loves one to

01:40.080 --> 01:45.040
learn things much better, and it kind of settles more in your mind. Sorry, I'm talking too much.

01:45.040 --> 01:49.600
So yeah, as I said, this is not a tutorial. I'm not a teacher nor an expert. Please do your own

01:49.680 --> 01:54.720
research. I've always used analogy. This is similar to the blind, leading the blind.

01:56.240 --> 02:01.520
I'm as equally or perhaps even more blind as you are when it comes to the concepts of

02:02.560 --> 02:07.760
concepts highlighted in this book, but also computer science in general. This is a

02:08.640 --> 02:13.040
exploratory disposition. That's simply what it is. I'm exploring something and while I'm exploring

02:13.120 --> 02:20.480
these concepts, I think a lot essentially. I will inevitably make mistakes, so please do be kind

02:20.480 --> 02:25.840
enough to point them out more for the sake of the other viewers than myself, but for myself too,

02:25.840 --> 02:34.320
because I don't want to spread any false information. And all the code, given that this is a programming

02:34.320 --> 02:40.000
tutorial series, not a tutorial, I just said it's not a tutorial, given that this is a programming

02:40.000 --> 02:45.760
video series, all the code will be available on GitHub. Okay, enough of that. Let's get started. So

02:46.960 --> 02:54.960
as I said, item number 12 is always overrided to string. It's not an overtly complicated item.

02:54.960 --> 03:03.040
The concepts are quite straightforward. Nonetheless, it's important to grok what Joshua Block has

03:03.040 --> 03:08.480
delineated in this item to write better code essentially, because the two string method is

03:08.480 --> 03:15.360
obviously common to the object class and every class that you'll write will have a

03:15.360 --> 03:19.440
two string method by default. So to get the basics out of the way, what the

03:19.440 --> 03:25.840
two string method does is that it simply gives a string representation of your object, whatever

03:25.840 --> 03:31.360
it may be. And which is why it is the object superclass, which is the superclass of every other

03:31.360 --> 03:36.000
class in Java has the two string method. And if you look at the two string method, what you'll see

03:36.000 --> 03:42.720
is that it gives a returns the class name, followed by the unsigned hexadecimal representation

03:42.720 --> 03:49.440
of the hash code. So this is what the two string method by default does. But unfortunately,

03:50.480 --> 03:56.800
for most use cases, or essentially all use cases, this doesn't suffice. The reason being,

03:57.360 --> 04:03.600
the general contracts on reading out the book, the general contract for two string says that the

04:03.600 --> 04:11.040
return string should be a concise, but informative representation that is easy for a person to read.

04:11.040 --> 04:17.760
Now, what this returns, so essentially, I'll show an example soon, but the important thing,

04:17.760 --> 04:22.080
this could be concise, but the important thing is that it should be easy to read and it should

04:22.080 --> 04:25.920
be something meaningful. So if we take a look at this phone number class, which is what Joshua Block

04:25.920 --> 04:32.320
has given in his demo, by default, if we don't override the two string method, and here in line

04:32.320 --> 04:37.360
number 59, if I've created an object of phone number, an object called Jenny and given it the

04:37.360 --> 04:46.240
area code, the prefix and the line number. And if I print this object, you'll see what you get is

04:47.040 --> 04:52.800
the name of the class with its package location and then an unsigned, the hexadecimal pretty much.

04:52.800 --> 05:00.720
This for a user for a human being is not meaningful enough, especially given that this class is supposed

05:00.720 --> 05:06.080
to represent a phone number in a given format. So what we can do is we can override the two string

05:06.080 --> 05:11.360
method. And if we do override it, you'll see here, we're setting it to a particular format,

05:12.160 --> 05:17.520
using the significant fields of this class, which are these three fields.

05:19.440 --> 05:23.840
And then once after overriding it, oops, that's the wrong one, after overriding it,

05:23.840 --> 05:29.280
if we rerun this code, you'll see what's returned now is something a bit more meaningful.

05:29.280 --> 05:34.640
That's in fact an actual phone number with the given values. So that's why it's advised

05:34.640 --> 05:40.160
always to override the two string method because majority of classes, we need to represent them

05:40.160 --> 05:45.920
in a meaningful way. So Joshua Bock states, the two string contract goes on to say,

05:46.640 --> 05:52.080
it is recommended that all subclasses override this method. Good advice indeed. Now, of course,

05:52.080 --> 05:56.240
if you're a programmer and not particularly attuned to using breakpoints and whatnot,

05:56.240 --> 06:01.680
even though recently, I didn't personally do this for a long time, but recently,

06:01.680 --> 06:07.760
one of the senior engineers in my company, he's really taught me the art and style of using

06:07.760 --> 06:15.600
breakpoints and code and how you can debug on runtime. But when I was a noob, a pleb,

06:16.720 --> 06:23.840
I used to just pretty much log everything and then debug while logging. That's probably not

06:23.840 --> 06:28.480
the best way to debug code. But I do know, I think a lot of programmers, especially

06:29.440 --> 06:36.320
plebs, I'm using that term rather physically, but even forgive me for being sadonic. But the point

06:36.320 --> 06:40.800
being, if you're an inexperienced or even if you're an experienced programmer, it doesn't really

06:40.800 --> 06:47.120
matter. If you do log your code, log objects, log different properties and put a lot of logs in

06:47.120 --> 06:53.520
your code for debugging, you need what you log to give you meaningful information. And that's

06:53.520 --> 06:59.600
really important. So the problem though is it could be a component with reference to a given

06:59.600 --> 07:05.120
object may include that includes a string representation in a load error message, which would

07:05.120 --> 07:09.040
ease, which would be easy to debug with the meaningful to string. So what I've written here

07:09.040 --> 07:14.640
is essentially, it could probably be a class that refers to the object of your class. And if the

07:14.640 --> 07:20.400
two string method is meaningless, then the client of that component is going to be disserviced,

07:20.400 --> 07:25.120
especially when it comes to debugging. So a good example here would be if you take a look at this

07:25.120 --> 07:30.160
simple class that I created called my component, which as you can see is referring to the phone

07:30.160 --> 07:36.000
number class, when the my component class is constructed in the constructor, it's

07:36.000 --> 07:41.920
instantiating a new phone number object. Let me actually do like that. So it's better. And then

07:41.920 --> 07:47.040
if I run this, and I'm intentionally throwing an exception here, so let's say that was some kind

07:47.120 --> 07:53.920
of error. And in the error log, once the exception is caught, it's logging a meaningful

07:54.640 --> 07:59.840
string representation of the my component dot phone number object. Now, of course, if

07:59.840 --> 08:06.320
once again, if he didn't override the two string method, and if he had it by default as the hexadecimal,

08:06.320 --> 08:12.640
which it is, it would in this case make debugging a lot harder because now you're not really sure

08:12.640 --> 08:16.800
what this class, I mean, you kind of do know what the class does, but it's better to always have a

08:16.800 --> 08:23.280
string representation, which is why just your block states providing a good two string implementation

08:23.280 --> 08:29.680
makes your class much more pleasant to use and makes systems using the class easy to debug.

08:30.400 --> 08:37.280
The two string method is automatically invoked when an object is passed to print ln, print f,

08:37.280 --> 08:44.560
the string concatenation operator or assert or is printed by a debugger. Even if you never call

08:44.560 --> 08:51.040
two string on an object, others may. So what he means by the others may is of course, in this

08:51.040 --> 08:56.640
case, the my component class use the two string method. So it's good to be charitable and think

08:56.640 --> 09:02.160
about others in that sense. And he continues, programmers will still generate diagnostic

09:02.160 --> 09:07.280
messages in this fashion, whether or not you override two string, but the messages won't be

09:08.240 --> 09:12.960
useful unless you do. Yes, it's kind of the same thing he's repeated there.

09:13.600 --> 09:18.720
Also, another sort of answer to the point, I guess, is that he said collections, in fact,

09:18.720 --> 09:23.280
make good use of the two string method. So if you look at this demo, once again, I have a

09:23.280 --> 09:28.320
hash map. I mean, once again, I mean, once again, I have a hash map that uses the phone number class.

09:28.320 --> 09:36.400
So the key is of type string, and the value is of type phone number. And we're adding this key

09:36.400 --> 09:42.480
called Jack, my favorite philosopher, and a new object of phone number. So if I do print this,

09:43.920 --> 09:47.840
what you'll see is, in this case, this is a mistake, actually. So it says here,

09:47.840 --> 09:52.560
Jack has printed the object, and this is kind of meaningless. But if we do

09:54.400 --> 10:00.560
override this two string method, and reprint that, and then print the elements in that collection,

10:02.240 --> 10:06.080
in this case, you can see, there's only one element, but it says Jack, and you get Jack's

10:06.080 --> 10:10.960
phone number. This is not his phone number. But if it is, I would have called him and immediately

10:10.960 --> 10:15.680
asked him for an interview to no doubt on philosophy, but this is not his phone number,

10:15.680 --> 10:22.000
unfortunately. Okay, let's keep going. So he states here, or he continues,

10:22.000 --> 10:27.280
when practical, the two string method should return all of the interesting information

10:27.280 --> 10:32.000
contained in the object, as shown in the phone number example. Then on this next point,

10:32.000 --> 10:38.000
where we discuss objects not conductive to string representation, he states, it is impractical if

10:38.000 --> 10:42.640
the object is large. So these are objects that is a bit harder to represent as a string.

10:43.280 --> 10:49.920
Why is this giving a typo to a? There we go. Sorry, he continues, it is impractical if the

10:49.920 --> 10:55.920
object is large, or if it contains state that is not conductive to string representation.

10:55.920 --> 11:01.840
And then it continues before we get to the demo. Under these circumstances, so if this is if the

11:01.840 --> 11:06.560
object is not conductive to a string representation, under these circumstances,

11:06.560 --> 11:14.240
two string should return a summary of the class. Ideally, the string should be self-explanatory.

11:14.240 --> 11:22.160
So let's take a look at this demo. Over here, we have a class called phone directory. This class is,

11:22.160 --> 11:26.160
if you look at the two string method of this class, which I'll show in a moment,

11:26.800 --> 11:32.720
it is a summary of this class. So what do I mean by that? This class has two fields,

11:32.800 --> 11:39.520
two private fields. It's got a string name and a list of phone entry type called phone entries.

11:40.080 --> 11:46.400
And in the constructor, it'll set the values for these two fields. And if you look at phone entry,

11:46.400 --> 11:52.800
that's a class of its own, in fact, which is a in a class called phone entry. So that simply

11:52.800 --> 11:57.360
takes a full name and the phone number. That class really doesn't do that much. And then in the

11:58.160 --> 12:03.440
phone directory class, we have a list of phone entry, as I already said. And if you look at the

12:03.440 --> 12:08.640
two string method, what this two string method does is it returns the phone directory with the

12:08.640 --> 12:16.560
name. That's the name of the whoever the person is. And then all it does is it returns phone entries

12:16.560 --> 12:23.120
dot size. So it doesn't really return every single element in the phone and entry list.

12:23.120 --> 12:27.760
Now, if you look at how a client might use the phone directory class,

12:29.840 --> 12:35.120
we have three objects here, we have phone entry one, two and three, then we also have a phone

12:35.120 --> 12:41.360
entry list. So into the phone entry list, we've added, by the way, phone entry, one, two and three,

12:41.360 --> 12:45.200
these, these three objects of the type phone entry and then the last test, of course, of type

12:45.200 --> 12:51.440
phone entry two, and then sorry, and into the list, we add these phone entries. And afterwards,

12:51.440 --> 12:57.200
into the directory, which is of type phone directory, obviously, we add a name in this case,

12:57.200 --> 13:03.040
that existentialists, and we add their names, character guide, need to start into the phone

13:03.040 --> 13:08.320
entry list, because sorry, the phone entry list where we added these objects to added into this,

13:08.320 --> 13:14.400
not added, but this phone directory classes instantiated with that list. Gosh, I'm butchering

13:14.400 --> 13:19.040
this simple thing. I'm sorry, it's been a long couple of days, my brain has gone a bit mush.

13:19.600 --> 13:25.600
So if you do run this, what you'll see is, yes, it's printing phone entry as it should,

13:27.120 --> 13:31.200
with the, with the full name and the phone number. But if you look at the phone directory class,

13:32.800 --> 13:36.560
what it's really doing is it's saying existentialists and saying, okay, this,

13:36.560 --> 13:41.920
there are three existentialists in this phone directory. And that's kind of the point here. So

13:43.440 --> 13:48.560
it's not always necessary to represent every single thing in a class, especially if there are lists

13:48.560 --> 13:53.600
involved and other components involved in the class. What's important is, as Joshua Block states,

13:53.600 --> 14:00.160
the string should be self-explanatory. This here, this two string method that that we've

14:00.160 --> 14:05.040
overridden in the phone directory class, this is still something meaningful and comparison to,

14:05.040 --> 14:10.560
let's say, a hexadecimal for a client of the phone directory class. So it's still of value. Again,

14:10.560 --> 14:14.560
the key term here is meaningful. The reason it's important for it to be meaningful is, again,

14:14.640 --> 14:18.880
if it comes to debugging here, if there's an associate failure or there's a test failure,

14:18.880 --> 14:27.280
it'll say expected this, but was this now for a user or a programmer, this looks the same. So

14:27.920 --> 14:33.520
he or she doesn't know where the hell the error is, is probably because in the string representation

14:33.520 --> 14:38.400
of this class, some significant field, something that would give meaning to this object has been

14:38.400 --> 14:43.760
missed out. Therefore, the user is kind of blindsided and have to figure it out on their own.

14:43.760 --> 14:48.960
So it's probably always good to overcommunicate and overrepresent what an object is in a string.

14:48.960 --> 14:53.120
So of course, something you may have noticed in the phone number class is when we were

14:53.120 --> 14:58.640
representing the phone number, you could see here, we did give it a certain format.

14:58.640 --> 15:04.720
We did represent it in a certain format. And that begs the question, how do we specify the format

15:04.720 --> 15:10.320
of the return value in documentation or put it in Joshua Block's words, one important decision

15:10.320 --> 15:15.520
you'll have to make when implementing a two string method is whether to specify the format

15:15.520 --> 15:20.160
of the return value in the documentation. So according to him, it's important to document

15:20.160 --> 15:25.360
the format for value classes such as phone number or matrix. Now what are value classes? So before

15:25.360 --> 15:30.880
we get to the demo, but a period of the way. So according to one definition I found by UC Berkeley,

15:31.520 --> 15:35.920
at a fundamental level, so I'm defining value classes here, at a fundamental level,

15:35.920 --> 15:44.640
value classes define objects which once created, never change their value. A variable of a value

15:44.640 --> 15:51.280
type may only be changed by reassigning to that variable. When we wish to only modify some portion

15:51.280 --> 15:57.600
of value class, one attribute, let's say, we're compelled to reassign the whole object. So something

15:57.600 --> 16:02.960
rather static, and I mean that conceptually not in the Java sense like that, probably it's okay to

16:02.960 --> 16:07.760
document that because it's not going to change. It's going to be in variable. And also another

16:07.760 --> 16:14.400
definition, I would say a clear one in fact by chat GPT with a value class, this helps create a

16:14.400 --> 16:19.600
standardized human readable representation of the object that can be used for input output and

16:19.600 --> 16:24.080
persistent human readable data objects. So if you look at this new variant of the phone number

16:24.080 --> 16:29.600
class, it is for all intents and purposes immutable. The reason is the class is final or the fields

16:29.600 --> 16:36.080
are final. Therefore, it is going to be static. It'll not change. It is not mutable. And if you

16:36.080 --> 16:41.920
look at the two string method, in this case, in the documentation, we have specified what the format

16:41.920 --> 16:46.720
of the string representation would be. And it's will even given an example. And then if we go look

16:46.720 --> 16:52.560
at a client that will use the phone number class and run this code. By the way, you can see here

16:52.560 --> 16:58.080
an object of phone numbers created, the two string method, what it returns the representation,

16:58.800 --> 17:04.000
it maps, or it corresponds to what's being specified in the documentation on the two string

17:04.000 --> 17:13.120
method itself. So for a class like this, which is a value class, it's okay to document the format

17:13.120 --> 17:19.120
as Joshua Block states. So just to keep reading what is stated here to put it a bit more formally,

17:19.120 --> 17:24.960
the advantage of specifying the format is that it serves as a standard ambiguous human readable

17:24.960 --> 17:32.080
representation of the object. This representation can be used for input and output, and in persistent

17:32.080 --> 17:38.080
human readable data objects, such as CSV files. If you specify the format, it's usually a good

17:38.080 --> 17:45.040
idea to provide a matching static factory or constructor. So programmers can easily translate

17:45.040 --> 17:50.320
back and forth between the object and its string representation. So I forgot to show that part.

17:50.880 --> 17:55.920
That's a two string method here where in this case, sorry, not the two string one that I kind

17:55.920 --> 18:00.560
of got confused there, the form string method where it's doing the opposite, it's instead of

18:01.280 --> 18:06.400
converting the object to a string, it's taking a string and converting that to an object. So you

18:06.400 --> 18:13.280
could give, for example, this phone number class a string of proper with the proper format, and

18:13.280 --> 18:17.920
then that'll convert it to a phone number object. Now we can take a look at how that works. So if

18:17.920 --> 18:24.160
you look at this bit of code here where the client's using the from string method, this phone

18:24.160 --> 18:31.600
number string, which is printed here in line number 82, which you'll see is this, is passed to the

18:31.600 --> 18:37.280
from string method that takes a string, and then that converts that or passes it to a type of phone

18:37.280 --> 18:43.520
number. Now, what's interesting here is if you do pass in something of a wrong format, like just

18:43.520 --> 18:50.640
some mess like that, this is going to throw an error. There you go. It'll throw an invalid format,

18:51.520 --> 18:57.120
invalid phone number error, or an illegal argument exception. That's good because we won't, if you

18:57.120 --> 19:01.840
want to convert this string to a phone number object, we want it to be of a certain type,

19:01.840 --> 19:08.160
of a certain format, and that's what this from string method does. So the two string and the

19:08.160 --> 19:14.320
from string kind of interpolates, not interpolate, sorry, interoperates. I was thinking of interpolates.

19:15.120 --> 19:19.520
In any case, it seems self-evident that the disadvantage of specifying the format is that

19:19.520 --> 19:24.320
it makes the code static. Again, conceptually speaking, because now when you have a format,

19:24.320 --> 19:29.440
you can't make the from string method or the two string method that dynamic once you document it,

19:29.440 --> 19:35.600
and you say that this is how this object has to be represented, but that's a tradeoff a programmer

19:35.600 --> 19:41.680
has to make. As Joshua Block states, programmers will write code to pass the representation,

19:41.680 --> 19:48.080
to generate it, and to embed it into persistent data. If you change the representation in a future

19:48.080 --> 19:55.040
release, you break their code and data, and they will yell. By choosing not to specify a format,

19:55.040 --> 20:00.960
you preserve the flexibility to add information or improve the format in a subsequent release.

20:00.960 --> 20:05.440
Yell is a funny word, and in fact, a lot of programmers tend to do that. But one way to

20:05.440 --> 20:12.400
hopefully not make programmers yell as much is whether or not you decide to specify the format,

20:12.400 --> 20:17.600
you should clearly document your intention. So it's always important to overcommunicate

20:17.600 --> 20:21.280
why you're doing what you're doing in your two string method, which you'll see again in

20:21.280 --> 20:26.880
the example Joshua Block has provided. He's clearly documented what this two string method does and

20:26.960 --> 20:32.400
why he's doing so. I propose the format. Of course, another important point to make this

20:32.400 --> 20:38.800
code reusable is provide programmatic access to the information contained in the value returned

20:38.800 --> 20:46.960
by two string. So what does that mean? It simply means having really good getters in your class

20:46.960 --> 20:52.160
so that the programmer won't have to pass through the string or the pass through the string return

20:52.160 --> 20:59.200
from the two string method to use those values as clients. Having such code where you don't provide

20:59.200 --> 21:02.960
good programmatic access to all the information or the fields in your class

21:03.680 --> 21:07.680
will create error prone code. If you've been coding for a while, you'd know that

21:07.680 --> 21:14.240
something that's absolutely painful is passing strings and trying to derive certain values from

21:14.240 --> 21:18.880
a string, especially given that it's highly dynamic and the code could change in the future

21:18.880 --> 21:25.520
or the format could change too. Therefore, using code or writing code that passes strings

21:26.160 --> 21:31.680
can create, as I said, highly volatile error prone code. So the simple way to solve that,

21:31.680 --> 21:37.280
of course, is as Joshua Block states provide programmatic access, all these values can be

21:37.280 --> 21:43.040
returned or are returned in the two string method. However, for the individual values, it's important

21:43.040 --> 21:49.120
to have getters. And if you look over here, the client can then easily just use get error code,

21:49.120 --> 21:55.440
get prefix, get line number, instead of passing through this string here returned by the two

21:55.440 --> 22:00.400
string method. And in fact, Joshua Block has put it the best way possible. By failing to provide

22:00.400 --> 22:07.040
accesses, you turn the string format into a de facto API, even if you specified that it's

22:07.040 --> 22:12.320
subject to change. Because if the programmer has no way of getting these values with a getter,

22:12.320 --> 22:18.080
then he or she will have to resort to using the two string method, despite it being subject to

22:18.080 --> 22:22.880
change. Also, when writing two string methods, there are of course, like old programming,

22:22.880 --> 22:28.640
and perhaps old life, certain exceptions, there's no requirement to write or override the two string

22:28.640 --> 22:34.640
method of the object class in Java for static utility classes, because you simply wouldn't

22:34.640 --> 22:39.440
be using the two string method because you don't create objects with a static class for enum types,

22:39.440 --> 22:44.720
because Java's one is perfect enough, it represents all the values in an enum,

22:45.520 --> 22:51.440
perfectly as to how it's implemented in Java. But however, you should still write them for

22:51.440 --> 22:56.080
abstract classes, because simply put concrete classes are going to use abstract classes,

22:56.080 --> 23:00.640
and they may use the two string method in the abstract class. So if you look at this abstract

23:00.640 --> 23:05.840
class called shape, I have overwritten the two string method. And then we have some other

23:05.840 --> 23:12.320
concrete classes called class, a square, that are over that are extending the abstract class.

23:12.320 --> 23:19.840
And then if you run it, whoops, you'll see that it's using the two string method inherited from

23:19.840 --> 23:27.440
the parent abstract class. And then it's printing out the area for the circle and square. So this

23:27.440 --> 23:31.760
is the reason that it's important still to write two string methods for abstract classes.

23:32.720 --> 23:38.320
As he said here, you should, however, write two string method in any abstract class,

23:38.320 --> 23:46.000
whose subclasses share a common string representation. For example, the two string methods on most

23:46.000 --> 23:50.960
collection implementations are inherited from the abstract collections class. That's correct.

23:50.960 --> 23:54.800
And then of course, like the previous methods, he does state that it's probably a good idea

23:54.800 --> 23:59.520
than writing this two string method on your own to use some kind of library of framework that's

23:59.520 --> 24:04.720
already available in the open source community. So for example, he says here, Google's open source

24:04.720 --> 24:11.680
auto value facility is cast in item 10 will generate a two string method for you as will most

24:11.680 --> 24:18.480
IDEs. These methods are great for telling you the contents of each field, but aren't specialized

24:18.480 --> 24:25.040
to the meaning of the class. Interestingly, when I read that, I realized, oh, actually,

24:25.040 --> 24:30.720
maybe now you could just copy a code and put it in ChudgeGPT and it'll obviously create a

24:30.720 --> 24:34.880
meaningful two string method. It can do things that are way more advanced than that, something as

24:34.880 --> 24:40.240
simple as this. It'll easily do. So yeah, you essentially don't have to ever really have a lot

24:40.240 --> 24:45.200
of, oh, spend a lot of time and mental energy writing two string methods anymore. You could

24:45.200 --> 24:50.640
just use the tools available out there. Anyway, to finish it off, Joshua Block states, to recap,

24:51.360 --> 24:56.320
overwrite objects to string implementation in every instantiable class you write,

24:56.880 --> 25:03.600
unless a superclass has already done so. It makes classes much more pleasant to use and aids in

25:03.600 --> 25:11.040
debugging. The two string method should return a concise, useful description of the object

25:11.040 --> 25:16.240
in an aesthetically pleasing format. That's it. Quite a simple straightforward item.

25:16.240 --> 25:21.760
Nonetheless, I wanted to go through it because it does help in writing good Java and well,

25:21.760 --> 25:26.000
obviously go into code. Thank you for watching. I hope you got some value from that video.

25:26.000 --> 25:28.320
I'll see you in the next one. Cheers.

