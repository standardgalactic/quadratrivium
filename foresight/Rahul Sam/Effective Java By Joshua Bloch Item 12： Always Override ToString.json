{"text": " Hey everyone, welcome to yet another episode of my video series on just your blocks, Effective Java, now like every other content creator, YouTuber, whatever you may call it, we are no fans of lawnmowers, leaf blowers, any of that. And unfortunately, despite living in a very quiet neighborhood, there's someone moving alone. So I apologize if the background noise is gonna ruin the quality of this video, but in the editing process, I'll try to, you know, filter it out and kind of make it a bit more listenable. In any case, getting to this, today we're going to cover a pretty simple item to be honest, it's item 12, which is always override to string. So if you have been following along in item 11, we did always override hash code when you override equals. And essentially, I've been going through all the items in just your blocks book. But as per usual, before we get to the item itself, I want to get through the proviso. So without further ado, let's get started. This is not a tutorial. I am not a teacher or an expert. So whatever I say in this video, please do your own research, ask ChargeGPD for God's sake, because ChargeGPD is probably going to give a better explanation than I do. I feel like a lot of these tutorials are eventually going to be redundant or obsolete. Really, the AI does a much better job in explaining these concepts than myself at least can ever do. Nonetheless, I'm really doing these videos more for myself than the general public rather selfishly, because in some sense, explaining things, it loves one to learn things much better, and it kind of settles more in your mind. Sorry, I'm talking too much. So yeah, as I said, this is not a tutorial. I'm not a teacher nor an expert. Please do your own research. I've always used analogy. This is similar to the blind, leading the blind. I'm as equally or perhaps even more blind as you are when it comes to the concepts of concepts highlighted in this book, but also computer science in general. This is a exploratory disposition. That's simply what it is. I'm exploring something and while I'm exploring these concepts, I think a lot essentially. I will inevitably make mistakes, so please do be kind enough to point them out more for the sake of the other viewers than myself, but for myself too, because I don't want to spread any false information. And all the code, given that this is a programming tutorial series, not a tutorial, I just said it's not a tutorial, given that this is a programming video series, all the code will be available on GitHub. Okay, enough of that. Let's get started. So as I said, item number 12 is always overrided to string. It's not an overtly complicated item. The concepts are quite straightforward. Nonetheless, it's important to grok what Joshua Block has delineated in this item to write better code essentially, because the two string method is obviously common to the object class and every class that you'll write will have a two string method by default. So to get the basics out of the way, what the two string method does is that it simply gives a string representation of your object, whatever it may be. And which is why it is the object superclass, which is the superclass of every other class in Java has the two string method. And if you look at the two string method, what you'll see is that it gives a returns the class name, followed by the unsigned hexadecimal representation of the hash code. So this is what the two string method by default does. But unfortunately, for most use cases, or essentially all use cases, this doesn't suffice. The reason being, the general contracts on reading out the book, the general contract for two string says that the return string should be a concise, but informative representation that is easy for a person to read. Now, what this returns, so essentially, I'll show an example soon, but the important thing, this could be concise, but the important thing is that it should be easy to read and it should be something meaningful. So if we take a look at this phone number class, which is what Joshua Block has given in his demo, by default, if we don't override the two string method, and here in line number 59, if I've created an object of phone number, an object called Jenny and given it the area code, the prefix and the line number. And if I print this object, you'll see what you get is the name of the class with its package location and then an unsigned, the hexadecimal pretty much. This for a user for a human being is not meaningful enough, especially given that this class is supposed to represent a phone number in a given format. So what we can do is we can override the two string method. And if we do override it, you'll see here, we're setting it to a particular format, using the significant fields of this class, which are these three fields. And then once after overriding it, oops, that's the wrong one, after overriding it, if we rerun this code, you'll see what's returned now is something a bit more meaningful. That's in fact an actual phone number with the given values. So that's why it's advised always to override the two string method because majority of classes, we need to represent them in a meaningful way. So Joshua Bock states, the two string contract goes on to say, it is recommended that all subclasses override this method. Good advice indeed. Now, of course, if you're a programmer and not particularly attuned to using breakpoints and whatnot, even though recently, I didn't personally do this for a long time, but recently, one of the senior engineers in my company, he's really taught me the art and style of using breakpoints and code and how you can debug on runtime. But when I was a noob, a pleb, I used to just pretty much log everything and then debug while logging. That's probably not the best way to debug code. But I do know, I think a lot of programmers, especially plebs, I'm using that term rather physically, but even forgive me for being sadonic. But the point being, if you're an inexperienced or even if you're an experienced programmer, it doesn't really matter. If you do log your code, log objects, log different properties and put a lot of logs in your code for debugging, you need what you log to give you meaningful information. And that's really important. So the problem though is it could be a component with reference to a given object may include that includes a string representation in a load error message, which would ease, which would be easy to debug with the meaningful to string. So what I've written here is essentially, it could probably be a class that refers to the object of your class. And if the two string method is meaningless, then the client of that component is going to be disserviced, especially when it comes to debugging. So a good example here would be if you take a look at this simple class that I created called my component, which as you can see is referring to the phone number class, when the my component class is constructed in the constructor, it's instantiating a new phone number object. Let me actually do like that. So it's better. And then if I run this, and I'm intentionally throwing an exception here, so let's say that was some kind of error. And in the error log, once the exception is caught, it's logging a meaningful string representation of the my component dot phone number object. Now, of course, if once again, if he didn't override the two string method, and if he had it by default as the hexadecimal, which it is, it would in this case make debugging a lot harder because now you're not really sure what this class, I mean, you kind of do know what the class does, but it's better to always have a string representation, which is why just your block states providing a good two string implementation makes your class much more pleasant to use and makes systems using the class easy to debug. The two string method is automatically invoked when an object is passed to print ln, print f, the string concatenation operator or assert or is printed by a debugger. Even if you never call two string on an object, others may. So what he means by the others may is of course, in this case, the my component class use the two string method. So it's good to be charitable and think about others in that sense. And he continues, programmers will still generate diagnostic messages in this fashion, whether or not you override two string, but the messages won't be useful unless you do. Yes, it's kind of the same thing he's repeated there. Also, another sort of answer to the point, I guess, is that he said collections, in fact, make good use of the two string method. So if you look at this demo, once again, I have a hash map. I mean, once again, I mean, once again, I have a hash map that uses the phone number class. So the key is of type string, and the value is of type phone number. And we're adding this key called Jack, my favorite philosopher, and a new object of phone number. So if I do print this, what you'll see is, in this case, this is a mistake, actually. So it says here, Jack has printed the object, and this is kind of meaningless. But if we do override this two string method, and reprint that, and then print the elements in that collection, in this case, you can see, there's only one element, but it says Jack, and you get Jack's phone number. This is not his phone number. But if it is, I would have called him and immediately asked him for an interview to no doubt on philosophy, but this is not his phone number, unfortunately. Okay, let's keep going. So he states here, or he continues, when practical, the two string method should return all of the interesting information contained in the object, as shown in the phone number example. Then on this next point, where we discuss objects not conductive to string representation, he states, it is impractical if the object is large. So these are objects that is a bit harder to represent as a string. Why is this giving a typo to a? There we go. Sorry, he continues, it is impractical if the object is large, or if it contains state that is not conductive to string representation. And then it continues before we get to the demo. Under these circumstances, so if this is if the object is not conductive to a string representation, under these circumstances, two string should return a summary of the class. Ideally, the string should be self-explanatory. So let's take a look at this demo. Over here, we have a class called phone directory. This class is, if you look at the two string method of this class, which I'll show in a moment, it is a summary of this class. So what do I mean by that? This class has two fields, two private fields. It's got a string name and a list of phone entry type called phone entries. And in the constructor, it'll set the values for these two fields. And if you look at phone entry, that's a class of its own, in fact, which is a in a class called phone entry. So that simply takes a full name and the phone number. That class really doesn't do that much. And then in the phone directory class, we have a list of phone entry, as I already said. And if you look at the two string method, what this two string method does is it returns the phone directory with the name. That's the name of the whoever the person is. And then all it does is it returns phone entries dot size. So it doesn't really return every single element in the phone and entry list. Now, if you look at how a client might use the phone directory class, we have three objects here, we have phone entry one, two and three, then we also have a phone entry list. So into the phone entry list, we've added, by the way, phone entry, one, two and three, these, these three objects of the type phone entry and then the last test, of course, of type phone entry two, and then sorry, and into the list, we add these phone entries. And afterwards, into the directory, which is of type phone directory, obviously, we add a name in this case, that existentialists, and we add their names, character guide, need to start into the phone entry list, because sorry, the phone entry list where we added these objects to added into this, not added, but this phone directory classes instantiated with that list. Gosh, I'm butchering this simple thing. I'm sorry, it's been a long couple of days, my brain has gone a bit mush. So if you do run this, what you'll see is, yes, it's printing phone entry as it should, with the, with the full name and the phone number. But if you look at the phone directory class, what it's really doing is it's saying existentialists and saying, okay, this, there are three existentialists in this phone directory. And that's kind of the point here. So it's not always necessary to represent every single thing in a class, especially if there are lists involved and other components involved in the class. What's important is, as Joshua Block states, the string should be self-explanatory. This here, this two string method that that we've overridden in the phone directory class, this is still something meaningful and comparison to, let's say, a hexadecimal for a client of the phone directory class. So it's still of value. Again, the key term here is meaningful. The reason it's important for it to be meaningful is, again, if it comes to debugging here, if there's an associate failure or there's a test failure, it'll say expected this, but was this now for a user or a programmer, this looks the same. So he or she doesn't know where the hell the error is, is probably because in the string representation of this class, some significant field, something that would give meaning to this object has been missed out. Therefore, the user is kind of blindsided and have to figure it out on their own. So it's probably always good to overcommunicate and overrepresent what an object is in a string. So of course, something you may have noticed in the phone number class is when we were representing the phone number, you could see here, we did give it a certain format. We did represent it in a certain format. And that begs the question, how do we specify the format of the return value in documentation or put it in Joshua Block's words, one important decision you'll have to make when implementing a two string method is whether to specify the format of the return value in the documentation. So according to him, it's important to document the format for value classes such as phone number or matrix. Now what are value classes? So before we get to the demo, but a period of the way. So according to one definition I found by UC Berkeley, at a fundamental level, so I'm defining value classes here, at a fundamental level, value classes define objects which once created, never change their value. A variable of a value type may only be changed by reassigning to that variable. When we wish to only modify some portion of value class, one attribute, let's say, we're compelled to reassign the whole object. So something rather static, and I mean that conceptually not in the Java sense like that, probably it's okay to document that because it's not going to change. It's going to be in variable. And also another definition, I would say a clear one in fact by chat GPT with a value class, this helps create a standardized human readable representation of the object that can be used for input output and persistent human readable data objects. So if you look at this new variant of the phone number class, it is for all intents and purposes immutable. The reason is the class is final or the fields are final. Therefore, it is going to be static. It'll not change. It is not mutable. And if you look at the two string method, in this case, in the documentation, we have specified what the format of the string representation would be. And it's will even given an example. And then if we go look at a client that will use the phone number class and run this code. By the way, you can see here an object of phone numbers created, the two string method, what it returns the representation, it maps, or it corresponds to what's being specified in the documentation on the two string method itself. So for a class like this, which is a value class, it's okay to document the format as Joshua Block states. So just to keep reading what is stated here to put it a bit more formally, the advantage of specifying the format is that it serves as a standard ambiguous human readable representation of the object. This representation can be used for input and output, and in persistent human readable data objects, such as CSV files. If you specify the format, it's usually a good idea to provide a matching static factory or constructor. So programmers can easily translate back and forth between the object and its string representation. So I forgot to show that part. That's a two string method here where in this case, sorry, not the two string one that I kind of got confused there, the form string method where it's doing the opposite, it's instead of converting the object to a string, it's taking a string and converting that to an object. So you could give, for example, this phone number class a string of proper with the proper format, and then that'll convert it to a phone number object. Now we can take a look at how that works. So if you look at this bit of code here where the client's using the from string method, this phone number string, which is printed here in line number 82, which you'll see is this, is passed to the from string method that takes a string, and then that converts that or passes it to a type of phone number. Now, what's interesting here is if you do pass in something of a wrong format, like just some mess like that, this is going to throw an error. There you go. It'll throw an invalid format, invalid phone number error, or an illegal argument exception. That's good because we won't, if you want to convert this string to a phone number object, we want it to be of a certain type, of a certain format, and that's what this from string method does. So the two string and the from string kind of interpolates, not interpolate, sorry, interoperates. I was thinking of interpolates. In any case, it seems self-evident that the disadvantage of specifying the format is that it makes the code static. Again, conceptually speaking, because now when you have a format, you can't make the from string method or the two string method that dynamic once you document it, and you say that this is how this object has to be represented, but that's a tradeoff a programmer has to make. As Joshua Block states, programmers will write code to pass the representation, to generate it, and to embed it into persistent data. If you change the representation in a future release, you break their code and data, and they will yell. By choosing not to specify a format, you preserve the flexibility to add information or improve the format in a subsequent release. Yell is a funny word, and in fact, a lot of programmers tend to do that. But one way to hopefully not make programmers yell as much is whether or not you decide to specify the format, you should clearly document your intention. So it's always important to overcommunicate why you're doing what you're doing in your two string method, which you'll see again in the example Joshua Block has provided. He's clearly documented what this two string method does and why he's doing so. I propose the format. Of course, another important point to make this code reusable is provide programmatic access to the information contained in the value returned by two string. So what does that mean? It simply means having really good getters in your class so that the programmer won't have to pass through the string or the pass through the string return from the two string method to use those values as clients. Having such code where you don't provide good programmatic access to all the information or the fields in your class will create error prone code. If you've been coding for a while, you'd know that something that's absolutely painful is passing strings and trying to derive certain values from a string, especially given that it's highly dynamic and the code could change in the future or the format could change too. Therefore, using code or writing code that passes strings can create, as I said, highly volatile error prone code. So the simple way to solve that, of course, is as Joshua Block states provide programmatic access, all these values can be returned or are returned in the two string method. However, for the individual values, it's important to have getters. And if you look over here, the client can then easily just use get error code, get prefix, get line number, instead of passing through this string here returned by the two string method. And in fact, Joshua Block has put it the best way possible. By failing to provide accesses, you turn the string format into a de facto API, even if you specified that it's subject to change. Because if the programmer has no way of getting these values with a getter, then he or she will have to resort to using the two string method, despite it being subject to change. Also, when writing two string methods, there are of course, like old programming, and perhaps old life, certain exceptions, there's no requirement to write or override the two string method of the object class in Java for static utility classes, because you simply wouldn't be using the two string method because you don't create objects with a static class for enum types, because Java's one is perfect enough, it represents all the values in an enum, perfectly as to how it's implemented in Java. But however, you should still write them for abstract classes, because simply put concrete classes are going to use abstract classes, and they may use the two string method in the abstract class. So if you look at this abstract class called shape, I have overwritten the two string method. And then we have some other concrete classes called class, a square, that are over that are extending the abstract class. And then if you run it, whoops, you'll see that it's using the two string method inherited from the parent abstract class. And then it's printing out the area for the circle and square. So this is the reason that it's important still to write two string methods for abstract classes. As he said here, you should, however, write two string method in any abstract class, whose subclasses share a common string representation. For example, the two string methods on most collection implementations are inherited from the abstract collections class. That's correct. And then of course, like the previous methods, he does state that it's probably a good idea than writing this two string method on your own to use some kind of library of framework that's already available in the open source community. So for example, he says here, Google's open source auto value facility is cast in item 10 will generate a two string method for you as will most IDEs. These methods are great for telling you the contents of each field, but aren't specialized to the meaning of the class. Interestingly, when I read that, I realized, oh, actually, maybe now you could just copy a code and put it in ChudgeGPT and it'll obviously create a meaningful two string method. It can do things that are way more advanced than that, something as simple as this. It'll easily do. So yeah, you essentially don't have to ever really have a lot of, oh, spend a lot of time and mental energy writing two string methods anymore. You could just use the tools available out there. Anyway, to finish it off, Joshua Block states, to recap, overwrite objects to string implementation in every instantiable class you write, unless a superclass has already done so. It makes classes much more pleasant to use and aids in debugging. The two string method should return a concise, useful description of the object in an aesthetically pleasing format. That's it. Quite a simple straightforward item. Nonetheless, I wanted to go through it because it does help in writing good Java and well, obviously go into code. Thank you for watching. I hope you got some value from that video. I'll see you in the next one. Cheers.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 6.32, "text": " Hey everyone, welcome to yet another episode of my video series on just your blocks, Effective Java,", "tokens": [50364, 1911, 1518, 11, 2928, 281, 1939, 1071, 3500, 295, 452, 960, 2638, 322, 445, 428, 8474, 11, 17764, 488, 10745, 11, 50680], "temperature": 0.0, "avg_logprob": -0.21844664584384876, "compression_ratio": 1.497991967871486, "no_speech_prob": 0.2910482585430145}, {"id": 1, "seek": 0, "start": 6.32, "end": 12.64, "text": " now like every other content creator, YouTuber, whatever you may call it, we are no fans of", "tokens": [50680, 586, 411, 633, 661, 2701, 14181, 11, 23349, 11, 2035, 291, 815, 818, 309, 11, 321, 366, 572, 4499, 295, 50996], "temperature": 0.0, "avg_logprob": -0.21844664584384876, "compression_ratio": 1.497991967871486, "no_speech_prob": 0.2910482585430145}, {"id": 2, "seek": 0, "start": 13.36, "end": 19.92, "text": " lawnmowers, leaf blowers, any of that. And unfortunately, despite living in a very quiet", "tokens": [51032, 19915, 76, 23054, 11, 10871, 6327, 433, 11, 604, 295, 300, 13, 400, 7015, 11, 7228, 2647, 294, 257, 588, 5677, 51360], "temperature": 0.0, "avg_logprob": -0.21844664584384876, "compression_ratio": 1.497991967871486, "no_speech_prob": 0.2910482585430145}, {"id": 3, "seek": 0, "start": 19.92, "end": 26.16, "text": " neighborhood, there's someone moving alone. So I apologize if the background noise is gonna", "tokens": [51360, 7630, 11, 456, 311, 1580, 2684, 3312, 13, 407, 286, 12328, 498, 264, 3678, 5658, 307, 799, 51672], "temperature": 0.0, "avg_logprob": -0.21844664584384876, "compression_ratio": 1.497991967871486, "no_speech_prob": 0.2910482585430145}, {"id": 4, "seek": 2616, "start": 26.16, "end": 30.0, "text": " ruin the quality of this video, but in the editing process, I'll try to, you know,", "tokens": [50364, 15514, 264, 3125, 295, 341, 960, 11, 457, 294, 264, 10000, 1399, 11, 286, 603, 853, 281, 11, 291, 458, 11, 50556], "temperature": 0.0, "avg_logprob": -0.13465625148708538, "compression_ratio": 1.6594982078853047, "no_speech_prob": 0.20149414241313934}, {"id": 5, "seek": 2616, "start": 30.560000000000002, "end": 36.8, "text": " filter it out and kind of make it a bit more listenable. In any case, getting to this, today", "tokens": [50584, 6608, 309, 484, 293, 733, 295, 652, 309, 257, 857, 544, 2140, 712, 13, 682, 604, 1389, 11, 1242, 281, 341, 11, 965, 50896], "temperature": 0.0, "avg_logprob": -0.13465625148708538, "compression_ratio": 1.6594982078853047, "no_speech_prob": 0.20149414241313934}, {"id": 6, "seek": 2616, "start": 36.8, "end": 42.24, "text": " we're going to cover a pretty simple item to be honest, it's item 12, which is always override", "tokens": [50896, 321, 434, 516, 281, 2060, 257, 1238, 2199, 3174, 281, 312, 3245, 11, 309, 311, 3174, 2272, 11, 597, 307, 1009, 42321, 51168], "temperature": 0.0, "avg_logprob": -0.13465625148708538, "compression_ratio": 1.6594982078853047, "no_speech_prob": 0.20149414241313934}, {"id": 7, "seek": 2616, "start": 42.24, "end": 48.16, "text": " to string. So if you have been following along in item 11, we did always override hash code when", "tokens": [51168, 281, 6798, 13, 407, 498, 291, 362, 668, 3480, 2051, 294, 3174, 2975, 11, 321, 630, 1009, 42321, 22019, 3089, 562, 51464], "temperature": 0.0, "avg_logprob": -0.13465625148708538, "compression_ratio": 1.6594982078853047, "no_speech_prob": 0.20149414241313934}, {"id": 8, "seek": 2616, "start": 48.16, "end": 53.36, "text": " you override equals. And essentially, I've been going through all the items in just your blocks", "tokens": [51464, 291, 42321, 6915, 13, 400, 4476, 11, 286, 600, 668, 516, 807, 439, 264, 4754, 294, 445, 428, 8474, 51724], "temperature": 0.0, "avg_logprob": -0.13465625148708538, "compression_ratio": 1.6594982078853047, "no_speech_prob": 0.20149414241313934}, {"id": 9, "seek": 5336, "start": 53.36, "end": 60.16, "text": " book. But as per usual, before we get to the item itself, I want to get through the proviso.", "tokens": [50364, 1446, 13, 583, 382, 680, 7713, 11, 949, 321, 483, 281, 264, 3174, 2564, 11, 286, 528, 281, 483, 807, 264, 1439, 19227, 13, 50704], "temperature": 0.0, "avg_logprob": -0.16119962033972277, "compression_ratio": 1.5820895522388059, "no_speech_prob": 0.02975037321448326}, {"id": 10, "seek": 5336, "start": 60.72, "end": 67.03999999999999, "text": " So without further ado, let's get started. This is not a tutorial. I am not a teacher or an expert.", "tokens": [50732, 407, 1553, 3052, 22450, 11, 718, 311, 483, 1409, 13, 639, 307, 406, 257, 7073, 13, 286, 669, 406, 257, 5027, 420, 364, 5844, 13, 51048], "temperature": 0.0, "avg_logprob": -0.16119962033972277, "compression_ratio": 1.5820895522388059, "no_speech_prob": 0.02975037321448326}, {"id": 11, "seek": 5336, "start": 67.03999999999999, "end": 73.36, "text": " So whatever I say in this video, please do your own research, ask ChargeGPD for God's sake,", "tokens": [51048, 407, 2035, 286, 584, 294, 341, 960, 11, 1767, 360, 428, 1065, 2132, 11, 1029, 40546, 38, 17349, 337, 1265, 311, 9717, 11, 51364], "temperature": 0.0, "avg_logprob": -0.16119962033972277, "compression_ratio": 1.5820895522388059, "no_speech_prob": 0.02975037321448326}, {"id": 12, "seek": 5336, "start": 74.16, "end": 77.28, "text": " because ChargeGPD is probably going to give a better explanation than I do.", "tokens": [51404, 570, 40546, 38, 17349, 307, 1391, 516, 281, 976, 257, 1101, 10835, 813, 286, 360, 13, 51560], "temperature": 0.0, "avg_logprob": -0.16119962033972277, "compression_ratio": 1.5820895522388059, "no_speech_prob": 0.02975037321448326}, {"id": 13, "seek": 5336, "start": 78.24, "end": 80.96000000000001, "text": " I feel like a lot of these tutorials are eventually going to be", "tokens": [51608, 286, 841, 411, 257, 688, 295, 613, 17616, 366, 4728, 516, 281, 312, 51744], "temperature": 0.0, "avg_logprob": -0.16119962033972277, "compression_ratio": 1.5820895522388059, "no_speech_prob": 0.02975037321448326}, {"id": 14, "seek": 8096, "start": 81.6, "end": 87.52, "text": " redundant or obsolete. Really, the AI does a much better job in explaining these concepts than", "tokens": [50396, 40997, 420, 46333, 13, 4083, 11, 264, 7318, 775, 257, 709, 1101, 1691, 294, 13468, 613, 10392, 813, 50692], "temperature": 0.0, "avg_logprob": -0.13512962147340937, "compression_ratio": 1.6843971631205674, "no_speech_prob": 0.024047333747148514}, {"id": 15, "seek": 8096, "start": 87.52, "end": 94.32, "text": " myself at least can ever do. Nonetheless, I'm really doing these videos more for myself than", "tokens": [50692, 2059, 412, 1935, 393, 1562, 360, 13, 45437, 11, 286, 478, 534, 884, 613, 2145, 544, 337, 2059, 813, 51032], "temperature": 0.0, "avg_logprob": -0.13512962147340937, "compression_ratio": 1.6843971631205674, "no_speech_prob": 0.024047333747148514}, {"id": 16, "seek": 8096, "start": 94.32, "end": 99.44, "text": " the general public rather selfishly, because in some sense, explaining things, it loves one to", "tokens": [51032, 264, 2674, 1908, 2831, 19074, 356, 11, 570, 294, 512, 2020, 11, 13468, 721, 11, 309, 6752, 472, 281, 51288], "temperature": 0.0, "avg_logprob": -0.13512962147340937, "compression_ratio": 1.6843971631205674, "no_speech_prob": 0.024047333747148514}, {"id": 17, "seek": 8096, "start": 100.08, "end": 105.03999999999999, "text": " learn things much better, and it kind of settles more in your mind. Sorry, I'm talking too much.", "tokens": [51320, 1466, 721, 709, 1101, 11, 293, 309, 733, 295, 5584, 904, 544, 294, 428, 1575, 13, 4919, 11, 286, 478, 1417, 886, 709, 13, 51568], "temperature": 0.0, "avg_logprob": -0.13512962147340937, "compression_ratio": 1.6843971631205674, "no_speech_prob": 0.024047333747148514}, {"id": 18, "seek": 8096, "start": 105.03999999999999, "end": 109.6, "text": " So yeah, as I said, this is not a tutorial. I'm not a teacher nor an expert. Please do your own", "tokens": [51568, 407, 1338, 11, 382, 286, 848, 11, 341, 307, 406, 257, 7073, 13, 286, 478, 406, 257, 5027, 6051, 364, 5844, 13, 2555, 360, 428, 1065, 51796], "temperature": 0.0, "avg_logprob": -0.13512962147340937, "compression_ratio": 1.6843971631205674, "no_speech_prob": 0.024047333747148514}, {"id": 19, "seek": 10960, "start": 109.67999999999999, "end": 114.72, "text": " research. I've always used analogy. This is similar to the blind, leading the blind.", "tokens": [50368, 2132, 13, 286, 600, 1009, 1143, 21663, 13, 639, 307, 2531, 281, 264, 6865, 11, 5775, 264, 6865, 13, 50620], "temperature": 0.0, "avg_logprob": -0.12169323648725237, "compression_ratio": 1.6525821596244132, "no_speech_prob": 0.05031280964612961}, {"id": 20, "seek": 10960, "start": 116.24, "end": 121.52, "text": " I'm as equally or perhaps even more blind as you are when it comes to the concepts of", "tokens": [50696, 286, 478, 382, 12309, 420, 4317, 754, 544, 6865, 382, 291, 366, 562, 309, 1487, 281, 264, 10392, 295, 50960], "temperature": 0.0, "avg_logprob": -0.12169323648725237, "compression_ratio": 1.6525821596244132, "no_speech_prob": 0.05031280964612961}, {"id": 21, "seek": 10960, "start": 122.56, "end": 127.75999999999999, "text": " concepts highlighted in this book, but also computer science in general. This is a", "tokens": [51012, 10392, 17173, 294, 341, 1446, 11, 457, 611, 3820, 3497, 294, 2674, 13, 639, 307, 257, 51272], "temperature": 0.0, "avg_logprob": -0.12169323648725237, "compression_ratio": 1.6525821596244132, "no_speech_prob": 0.05031280964612961}, {"id": 22, "seek": 10960, "start": 128.64, "end": 133.04, "text": " exploratory disposition. That's simply what it is. I'm exploring something and while I'm exploring", "tokens": [51316, 24765, 4745, 40293, 13, 663, 311, 2935, 437, 309, 307, 13, 286, 478, 12736, 746, 293, 1339, 286, 478, 12736, 51536], "temperature": 0.0, "avg_logprob": -0.12169323648725237, "compression_ratio": 1.6525821596244132, "no_speech_prob": 0.05031280964612961}, {"id": 23, "seek": 13304, "start": 133.12, "end": 140.48, "text": " these concepts, I think a lot essentially. I will inevitably make mistakes, so please do be kind", "tokens": [50368, 613, 10392, 11, 286, 519, 257, 688, 4476, 13, 286, 486, 28171, 652, 8038, 11, 370, 1767, 360, 312, 733, 50736], "temperature": 0.0, "avg_logprob": -0.129581702382941, "compression_ratio": 1.7112068965517242, "no_speech_prob": 0.09263793379068375}, {"id": 24, "seek": 13304, "start": 140.48, "end": 145.84, "text": " enough to point them out more for the sake of the other viewers than myself, but for myself too,", "tokens": [50736, 1547, 281, 935, 552, 484, 544, 337, 264, 9717, 295, 264, 661, 8499, 813, 2059, 11, 457, 337, 2059, 886, 11, 51004], "temperature": 0.0, "avg_logprob": -0.129581702382941, "compression_ratio": 1.7112068965517242, "no_speech_prob": 0.09263793379068375}, {"id": 25, "seek": 13304, "start": 145.84, "end": 154.32, "text": " because I don't want to spread any false information. And all the code, given that this is a programming", "tokens": [51004, 570, 286, 500, 380, 528, 281, 3974, 604, 7908, 1589, 13, 400, 439, 264, 3089, 11, 2212, 300, 341, 307, 257, 9410, 51428], "temperature": 0.0, "avg_logprob": -0.129581702382941, "compression_ratio": 1.7112068965517242, "no_speech_prob": 0.09263793379068375}, {"id": 26, "seek": 13304, "start": 154.32, "end": 160.0, "text": " tutorial series, not a tutorial, I just said it's not a tutorial, given that this is a programming", "tokens": [51428, 7073, 2638, 11, 406, 257, 7073, 11, 286, 445, 848, 309, 311, 406, 257, 7073, 11, 2212, 300, 341, 307, 257, 9410, 51712], "temperature": 0.0, "avg_logprob": -0.129581702382941, "compression_ratio": 1.7112068965517242, "no_speech_prob": 0.09263793379068375}, {"id": 27, "seek": 16000, "start": 160.0, "end": 165.76, "text": " video series, all the code will be available on GitHub. Okay, enough of that. Let's get started. So", "tokens": [50364, 960, 2638, 11, 439, 264, 3089, 486, 312, 2435, 322, 23331, 13, 1033, 11, 1547, 295, 300, 13, 961, 311, 483, 1409, 13, 407, 50652], "temperature": 0.0, "avg_logprob": -0.13639622546256858, "compression_ratio": 1.49609375, "no_speech_prob": 0.034092821180820465}, {"id": 28, "seek": 16000, "start": 166.96, "end": 174.96, "text": " as I said, item number 12 is always overrided to string. It's not an overtly complicated item.", "tokens": [50712, 382, 286, 848, 11, 3174, 1230, 2272, 307, 1009, 670, 81, 2112, 281, 6798, 13, 467, 311, 406, 364, 17038, 356, 6179, 3174, 13, 51112], "temperature": 0.0, "avg_logprob": -0.13639622546256858, "compression_ratio": 1.49609375, "no_speech_prob": 0.034092821180820465}, {"id": 29, "seek": 16000, "start": 174.96, "end": 183.04, "text": " The concepts are quite straightforward. Nonetheless, it's important to grok what Joshua Block has", "tokens": [51112, 440, 10392, 366, 1596, 15325, 13, 45437, 11, 309, 311, 1021, 281, 4634, 74, 437, 24005, 17500, 575, 51516], "temperature": 0.0, "avg_logprob": -0.13639622546256858, "compression_ratio": 1.49609375, "no_speech_prob": 0.034092821180820465}, {"id": 30, "seek": 16000, "start": 183.04, "end": 188.48, "text": " delineated in this item to write better code essentially, because the two string method is", "tokens": [51516, 1103, 533, 770, 294, 341, 3174, 281, 2464, 1101, 3089, 4476, 11, 570, 264, 732, 6798, 3170, 307, 51788], "temperature": 0.0, "avg_logprob": -0.13639622546256858, "compression_ratio": 1.49609375, "no_speech_prob": 0.034092821180820465}, {"id": 31, "seek": 18848, "start": 188.48, "end": 195.35999999999999, "text": " obviously common to the object class and every class that you'll write will have a", "tokens": [50364, 2745, 2689, 281, 264, 2657, 1508, 293, 633, 1508, 300, 291, 603, 2464, 486, 362, 257, 50708], "temperature": 0.0, "avg_logprob": -0.07931190455725434, "compression_ratio": 1.9521739130434783, "no_speech_prob": 0.008186133578419685}, {"id": 32, "seek": 18848, "start": 195.35999999999999, "end": 199.44, "text": " two string method by default. So to get the basics out of the way, what the", "tokens": [50708, 732, 6798, 3170, 538, 7576, 13, 407, 281, 483, 264, 14688, 484, 295, 264, 636, 11, 437, 264, 50912], "temperature": 0.0, "avg_logprob": -0.07931190455725434, "compression_ratio": 1.9521739130434783, "no_speech_prob": 0.008186133578419685}, {"id": 33, "seek": 18848, "start": 199.44, "end": 205.83999999999997, "text": " two string method does is that it simply gives a string representation of your object, whatever", "tokens": [50912, 732, 6798, 3170, 775, 307, 300, 309, 2935, 2709, 257, 6798, 10290, 295, 428, 2657, 11, 2035, 51232], "temperature": 0.0, "avg_logprob": -0.07931190455725434, "compression_ratio": 1.9521739130434783, "no_speech_prob": 0.008186133578419685}, {"id": 34, "seek": 18848, "start": 205.83999999999997, "end": 211.35999999999999, "text": " it may be. And which is why it is the object superclass, which is the superclass of every other", "tokens": [51232, 309, 815, 312, 13, 400, 597, 307, 983, 309, 307, 264, 2657, 1687, 11665, 11, 597, 307, 264, 1687, 11665, 295, 633, 661, 51508], "temperature": 0.0, "avg_logprob": -0.07931190455725434, "compression_ratio": 1.9521739130434783, "no_speech_prob": 0.008186133578419685}, {"id": 35, "seek": 18848, "start": 211.35999999999999, "end": 216.0, "text": " class in Java has the two string method. And if you look at the two string method, what you'll see", "tokens": [51508, 1508, 294, 10745, 575, 264, 732, 6798, 3170, 13, 400, 498, 291, 574, 412, 264, 732, 6798, 3170, 11, 437, 291, 603, 536, 51740], "temperature": 0.0, "avg_logprob": -0.07931190455725434, "compression_ratio": 1.9521739130434783, "no_speech_prob": 0.008186133578419685}, {"id": 36, "seek": 21600, "start": 216.0, "end": 222.72, "text": " is that it gives a returns the class name, followed by the unsigned hexadecimal representation", "tokens": [50364, 307, 300, 309, 2709, 257, 11247, 264, 1508, 1315, 11, 6263, 538, 264, 2693, 16690, 23291, 762, 66, 10650, 10290, 50700], "temperature": 0.0, "avg_logprob": -0.11605654941515976, "compression_ratio": 1.6877828054298643, "no_speech_prob": 0.012239333242177963}, {"id": 37, "seek": 21600, "start": 222.72, "end": 229.44, "text": " of the hash code. So this is what the two string method by default does. But unfortunately,", "tokens": [50700, 295, 264, 22019, 3089, 13, 407, 341, 307, 437, 264, 732, 6798, 3170, 538, 7576, 775, 13, 583, 7015, 11, 51036], "temperature": 0.0, "avg_logprob": -0.11605654941515976, "compression_ratio": 1.6877828054298643, "no_speech_prob": 0.012239333242177963}, {"id": 38, "seek": 21600, "start": 230.48, "end": 236.8, "text": " for most use cases, or essentially all use cases, this doesn't suffice. The reason being,", "tokens": [51088, 337, 881, 764, 3331, 11, 420, 4476, 439, 764, 3331, 11, 341, 1177, 380, 3889, 573, 13, 440, 1778, 885, 11, 51404], "temperature": 0.0, "avg_logprob": -0.11605654941515976, "compression_ratio": 1.6877828054298643, "no_speech_prob": 0.012239333242177963}, {"id": 39, "seek": 21600, "start": 237.36, "end": 243.6, "text": " the general contracts on reading out the book, the general contract for two string says that the", "tokens": [51432, 264, 2674, 13952, 322, 3760, 484, 264, 1446, 11, 264, 2674, 4364, 337, 732, 6798, 1619, 300, 264, 51744], "temperature": 0.0, "avg_logprob": -0.11605654941515976, "compression_ratio": 1.6877828054298643, "no_speech_prob": 0.012239333242177963}, {"id": 40, "seek": 24360, "start": 243.6, "end": 251.04, "text": " return string should be a concise, but informative representation that is easy for a person to read.", "tokens": [50364, 2736, 6798, 820, 312, 257, 44882, 11, 457, 27759, 10290, 300, 307, 1858, 337, 257, 954, 281, 1401, 13, 50736], "temperature": 0.0, "avg_logprob": -0.09074498045033422, "compression_ratio": 1.7728937728937728, "no_speech_prob": 0.0011159712448716164}, {"id": 41, "seek": 24360, "start": 251.04, "end": 257.76, "text": " Now, what this returns, so essentially, I'll show an example soon, but the important thing,", "tokens": [50736, 823, 11, 437, 341, 11247, 11, 370, 4476, 11, 286, 603, 855, 364, 1365, 2321, 11, 457, 264, 1021, 551, 11, 51072], "temperature": 0.0, "avg_logprob": -0.09074498045033422, "compression_ratio": 1.7728937728937728, "no_speech_prob": 0.0011159712448716164}, {"id": 42, "seek": 24360, "start": 257.76, "end": 262.08, "text": " this could be concise, but the important thing is that it should be easy to read and it should", "tokens": [51072, 341, 727, 312, 44882, 11, 457, 264, 1021, 551, 307, 300, 309, 820, 312, 1858, 281, 1401, 293, 309, 820, 51288], "temperature": 0.0, "avg_logprob": -0.09074498045033422, "compression_ratio": 1.7728937728937728, "no_speech_prob": 0.0011159712448716164}, {"id": 43, "seek": 24360, "start": 262.08, "end": 265.92, "text": " be something meaningful. So if we take a look at this phone number class, which is what Joshua Block", "tokens": [51288, 312, 746, 10995, 13, 407, 498, 321, 747, 257, 574, 412, 341, 2593, 1230, 1508, 11, 597, 307, 437, 24005, 17500, 51480], "temperature": 0.0, "avg_logprob": -0.09074498045033422, "compression_ratio": 1.7728937728937728, "no_speech_prob": 0.0011159712448716164}, {"id": 44, "seek": 24360, "start": 265.92, "end": 272.32, "text": " has given in his demo, by default, if we don't override the two string method, and here in line", "tokens": [51480, 575, 2212, 294, 702, 10723, 11, 538, 7576, 11, 498, 321, 500, 380, 42321, 264, 732, 6798, 3170, 11, 293, 510, 294, 1622, 51800], "temperature": 0.0, "avg_logprob": -0.09074498045033422, "compression_ratio": 1.7728937728937728, "no_speech_prob": 0.0011159712448716164}, {"id": 45, "seek": 27232, "start": 272.32, "end": 277.36, "text": " number 59, if I've created an object of phone number, an object called Jenny and given it the", "tokens": [50364, 1230, 24624, 11, 498, 286, 600, 2942, 364, 2657, 295, 2593, 1230, 11, 364, 2657, 1219, 20580, 293, 2212, 309, 264, 50616], "temperature": 0.0, "avg_logprob": -0.1241601729879574, "compression_ratio": 1.6322314049586777, "no_speech_prob": 0.027573268860578537}, {"id": 46, "seek": 27232, "start": 277.36, "end": 286.24, "text": " area code, the prefix and the line number. And if I print this object, you'll see what you get is", "tokens": [50616, 1859, 3089, 11, 264, 46969, 293, 264, 1622, 1230, 13, 400, 498, 286, 4482, 341, 2657, 11, 291, 603, 536, 437, 291, 483, 307, 51060], "temperature": 0.0, "avg_logprob": -0.1241601729879574, "compression_ratio": 1.6322314049586777, "no_speech_prob": 0.027573268860578537}, {"id": 47, "seek": 27232, "start": 287.04, "end": 292.8, "text": " the name of the class with its package location and then an unsigned, the hexadecimal pretty much.", "tokens": [51100, 264, 1315, 295, 264, 1508, 365, 1080, 7372, 4914, 293, 550, 364, 2693, 16690, 11, 264, 23291, 762, 66, 10650, 1238, 709, 13, 51388], "temperature": 0.0, "avg_logprob": -0.1241601729879574, "compression_ratio": 1.6322314049586777, "no_speech_prob": 0.027573268860578537}, {"id": 48, "seek": 27232, "start": 292.8, "end": 300.71999999999997, "text": " This for a user for a human being is not meaningful enough, especially given that this class is supposed", "tokens": [51388, 639, 337, 257, 4195, 337, 257, 1952, 885, 307, 406, 10995, 1547, 11, 2318, 2212, 300, 341, 1508, 307, 3442, 51784], "temperature": 0.0, "avg_logprob": -0.1241601729879574, "compression_ratio": 1.6322314049586777, "no_speech_prob": 0.027573268860578537}, {"id": 49, "seek": 30072, "start": 300.72, "end": 306.08000000000004, "text": " to represent a phone number in a given format. So what we can do is we can override the two string", "tokens": [50364, 281, 2906, 257, 2593, 1230, 294, 257, 2212, 7877, 13, 407, 437, 321, 393, 360, 307, 321, 393, 42321, 264, 732, 6798, 50632], "temperature": 0.0, "avg_logprob": -0.09373373777970023, "compression_ratio": 1.752, "no_speech_prob": 0.006796914618462324}, {"id": 50, "seek": 30072, "start": 306.08000000000004, "end": 311.36, "text": " method. And if we do override it, you'll see here, we're setting it to a particular format,", "tokens": [50632, 3170, 13, 400, 498, 321, 360, 42321, 309, 11, 291, 603, 536, 510, 11, 321, 434, 3287, 309, 281, 257, 1729, 7877, 11, 50896], "temperature": 0.0, "avg_logprob": -0.09373373777970023, "compression_ratio": 1.752, "no_speech_prob": 0.006796914618462324}, {"id": 51, "seek": 30072, "start": 312.16, "end": 317.52000000000004, "text": " using the significant fields of this class, which are these three fields.", "tokens": [50936, 1228, 264, 4776, 7909, 295, 341, 1508, 11, 597, 366, 613, 1045, 7909, 13, 51204], "temperature": 0.0, "avg_logprob": -0.09373373777970023, "compression_ratio": 1.752, "no_speech_prob": 0.006796914618462324}, {"id": 52, "seek": 30072, "start": 319.44000000000005, "end": 323.84000000000003, "text": " And then once after overriding it, oops, that's the wrong one, after overriding it,", "tokens": [51300, 400, 550, 1564, 934, 670, 81, 2819, 309, 11, 34166, 11, 300, 311, 264, 2085, 472, 11, 934, 670, 81, 2819, 309, 11, 51520], "temperature": 0.0, "avg_logprob": -0.09373373777970023, "compression_ratio": 1.752, "no_speech_prob": 0.006796914618462324}, {"id": 53, "seek": 30072, "start": 323.84000000000003, "end": 329.28000000000003, "text": " if we rerun this code, you'll see what's returned now is something a bit more meaningful.", "tokens": [51520, 498, 321, 43819, 409, 341, 3089, 11, 291, 603, 536, 437, 311, 8752, 586, 307, 746, 257, 857, 544, 10995, 13, 51792], "temperature": 0.0, "avg_logprob": -0.09373373777970023, "compression_ratio": 1.752, "no_speech_prob": 0.006796914618462324}, {"id": 54, "seek": 32928, "start": 329.28, "end": 334.64, "text": " That's in fact an actual phone number with the given values. So that's why it's advised", "tokens": [50364, 663, 311, 294, 1186, 364, 3539, 2593, 1230, 365, 264, 2212, 4190, 13, 407, 300, 311, 983, 309, 311, 26269, 50632], "temperature": 0.0, "avg_logprob": -0.130956694764911, "compression_ratio": 1.6151079136690647, "no_speech_prob": 0.010167863219976425}, {"id": 55, "seek": 32928, "start": 334.64, "end": 340.15999999999997, "text": " always to override the two string method because majority of classes, we need to represent them", "tokens": [50632, 1009, 281, 42321, 264, 732, 6798, 3170, 570, 6286, 295, 5359, 11, 321, 643, 281, 2906, 552, 50908], "temperature": 0.0, "avg_logprob": -0.130956694764911, "compression_ratio": 1.6151079136690647, "no_speech_prob": 0.010167863219976425}, {"id": 56, "seek": 32928, "start": 340.15999999999997, "end": 345.91999999999996, "text": " in a meaningful way. So Joshua Bock states, the two string contract goes on to say,", "tokens": [50908, 294, 257, 10995, 636, 13, 407, 24005, 47672, 4368, 11, 264, 732, 6798, 4364, 1709, 322, 281, 584, 11, 51196], "temperature": 0.0, "avg_logprob": -0.130956694764911, "compression_ratio": 1.6151079136690647, "no_speech_prob": 0.010167863219976425}, {"id": 57, "seek": 32928, "start": 346.64, "end": 352.08, "text": " it is recommended that all subclasses override this method. Good advice indeed. Now, of course,", "tokens": [51232, 309, 307, 9628, 300, 439, 1422, 11665, 279, 42321, 341, 3170, 13, 2205, 5192, 6451, 13, 823, 11, 295, 1164, 11, 51504], "temperature": 0.0, "avg_logprob": -0.130956694764911, "compression_ratio": 1.6151079136690647, "no_speech_prob": 0.010167863219976425}, {"id": 58, "seek": 32928, "start": 352.08, "end": 356.23999999999995, "text": " if you're a programmer and not particularly attuned to using breakpoints and whatnot,", "tokens": [51504, 498, 291, 434, 257, 32116, 293, 406, 4098, 951, 43703, 281, 1228, 1821, 20552, 293, 25882, 11, 51712], "temperature": 0.0, "avg_logprob": -0.130956694764911, "compression_ratio": 1.6151079136690647, "no_speech_prob": 0.010167863219976425}, {"id": 59, "seek": 35624, "start": 356.24, "end": 361.68, "text": " even though recently, I didn't personally do this for a long time, but recently,", "tokens": [50364, 754, 1673, 3938, 11, 286, 994, 380, 5665, 360, 341, 337, 257, 938, 565, 11, 457, 3938, 11, 50636], "temperature": 0.0, "avg_logprob": -0.07749318546719021, "compression_ratio": 1.5486725663716814, "no_speech_prob": 0.015185004100203514}, {"id": 60, "seek": 35624, "start": 361.68, "end": 367.76, "text": " one of the senior engineers in my company, he's really taught me the art and style of using", "tokens": [50636, 472, 295, 264, 7965, 11955, 294, 452, 2237, 11, 415, 311, 534, 5928, 385, 264, 1523, 293, 3758, 295, 1228, 50940], "temperature": 0.0, "avg_logprob": -0.07749318546719021, "compression_ratio": 1.5486725663716814, "no_speech_prob": 0.015185004100203514}, {"id": 61, "seek": 35624, "start": 367.76, "end": 375.6, "text": " breakpoints and code and how you can debug on runtime. But when I was a noob, a pleb,", "tokens": [50940, 1821, 20552, 293, 3089, 293, 577, 291, 393, 24083, 322, 34474, 13, 583, 562, 286, 390, 257, 572, 996, 11, 257, 3362, 65, 11, 51332], "temperature": 0.0, "avg_logprob": -0.07749318546719021, "compression_ratio": 1.5486725663716814, "no_speech_prob": 0.015185004100203514}, {"id": 62, "seek": 35624, "start": 376.72, "end": 383.84000000000003, "text": " I used to just pretty much log everything and then debug while logging. That's probably not", "tokens": [51388, 286, 1143, 281, 445, 1238, 709, 3565, 1203, 293, 550, 24083, 1339, 27991, 13, 663, 311, 1391, 406, 51744], "temperature": 0.0, "avg_logprob": -0.07749318546719021, "compression_ratio": 1.5486725663716814, "no_speech_prob": 0.015185004100203514}, {"id": 63, "seek": 38384, "start": 383.84, "end": 388.47999999999996, "text": " the best way to debug code. But I do know, I think a lot of programmers, especially", "tokens": [50364, 264, 1151, 636, 281, 24083, 3089, 13, 583, 286, 360, 458, 11, 286, 519, 257, 688, 295, 41504, 11, 2318, 50596], "temperature": 0.0, "avg_logprob": -0.16509678404209976, "compression_ratio": 1.7434944237918215, "no_speech_prob": 0.03358140587806702}, {"id": 64, "seek": 38384, "start": 389.44, "end": 396.32, "text": " plebs, I'm using that term rather physically, but even forgive me for being sadonic. But the point", "tokens": [50644, 3362, 929, 11, 286, 478, 1228, 300, 1433, 2831, 9762, 11, 457, 754, 10718, 385, 337, 885, 4227, 11630, 13, 583, 264, 935, 50988], "temperature": 0.0, "avg_logprob": -0.16509678404209976, "compression_ratio": 1.7434944237918215, "no_speech_prob": 0.03358140587806702}, {"id": 65, "seek": 38384, "start": 396.32, "end": 400.79999999999995, "text": " being, if you're an inexperienced or even if you're an experienced programmer, it doesn't really", "tokens": [50988, 885, 11, 498, 291, 434, 364, 29961, 610, 47592, 420, 754, 498, 291, 434, 364, 6751, 32116, 11, 309, 1177, 380, 534, 51212], "temperature": 0.0, "avg_logprob": -0.16509678404209976, "compression_ratio": 1.7434944237918215, "no_speech_prob": 0.03358140587806702}, {"id": 66, "seek": 38384, "start": 400.79999999999995, "end": 407.12, "text": " matter. If you do log your code, log objects, log different properties and put a lot of logs in", "tokens": [51212, 1871, 13, 759, 291, 360, 3565, 428, 3089, 11, 3565, 6565, 11, 3565, 819, 7221, 293, 829, 257, 688, 295, 20820, 294, 51528], "temperature": 0.0, "avg_logprob": -0.16509678404209976, "compression_ratio": 1.7434944237918215, "no_speech_prob": 0.03358140587806702}, {"id": 67, "seek": 38384, "start": 407.12, "end": 413.52, "text": " your code for debugging, you need what you log to give you meaningful information. And that's", "tokens": [51528, 428, 3089, 337, 45592, 11, 291, 643, 437, 291, 3565, 281, 976, 291, 10995, 1589, 13, 400, 300, 311, 51848], "temperature": 0.0, "avg_logprob": -0.16509678404209976, "compression_ratio": 1.7434944237918215, "no_speech_prob": 0.03358140587806702}, {"id": 68, "seek": 41352, "start": 413.52, "end": 419.59999999999997, "text": " really important. So the problem though is it could be a component with reference to a given", "tokens": [50364, 534, 1021, 13, 407, 264, 1154, 1673, 307, 309, 727, 312, 257, 6542, 365, 6408, 281, 257, 2212, 50668], "temperature": 0.0, "avg_logprob": -0.11967503021810656, "compression_ratio": 1.7509293680297398, "no_speech_prob": 0.0028891635593026876}, {"id": 69, "seek": 41352, "start": 419.59999999999997, "end": 425.12, "text": " object may include that includes a string representation in a load error message, which would", "tokens": [50668, 2657, 815, 4090, 300, 5974, 257, 6798, 10290, 294, 257, 3677, 6713, 3636, 11, 597, 576, 50944], "temperature": 0.0, "avg_logprob": -0.11967503021810656, "compression_ratio": 1.7509293680297398, "no_speech_prob": 0.0028891635593026876}, {"id": 70, "seek": 41352, "start": 425.12, "end": 429.03999999999996, "text": " ease, which would be easy to debug with the meaningful to string. So what I've written here", "tokens": [50944, 12708, 11, 597, 576, 312, 1858, 281, 24083, 365, 264, 10995, 281, 6798, 13, 407, 437, 286, 600, 3720, 510, 51140], "temperature": 0.0, "avg_logprob": -0.11967503021810656, "compression_ratio": 1.7509293680297398, "no_speech_prob": 0.0028891635593026876}, {"id": 71, "seek": 41352, "start": 429.03999999999996, "end": 434.64, "text": " is essentially, it could probably be a class that refers to the object of your class. And if the", "tokens": [51140, 307, 4476, 11, 309, 727, 1391, 312, 257, 1508, 300, 14942, 281, 264, 2657, 295, 428, 1508, 13, 400, 498, 264, 51420], "temperature": 0.0, "avg_logprob": -0.11967503021810656, "compression_ratio": 1.7509293680297398, "no_speech_prob": 0.0028891635593026876}, {"id": 72, "seek": 41352, "start": 434.64, "end": 440.4, "text": " two string method is meaningless, then the client of that component is going to be disserviced,", "tokens": [51420, 732, 6798, 3170, 307, 33232, 11, 550, 264, 6423, 295, 300, 6542, 307, 516, 281, 312, 7802, 1978, 4233, 11, 51708], "temperature": 0.0, "avg_logprob": -0.11967503021810656, "compression_ratio": 1.7509293680297398, "no_speech_prob": 0.0028891635593026876}, {"id": 73, "seek": 44040, "start": 440.4, "end": 445.12, "text": " especially when it comes to debugging. So a good example here would be if you take a look at this", "tokens": [50364, 2318, 562, 309, 1487, 281, 45592, 13, 407, 257, 665, 1365, 510, 576, 312, 498, 291, 747, 257, 574, 412, 341, 50600], "temperature": 0.0, "avg_logprob": -0.10693761099756291, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.015903178602457047}, {"id": 74, "seek": 44040, "start": 445.12, "end": 450.15999999999997, "text": " simple class that I created called my component, which as you can see is referring to the phone", "tokens": [50600, 2199, 1508, 300, 286, 2942, 1219, 452, 6542, 11, 597, 382, 291, 393, 536, 307, 13761, 281, 264, 2593, 50852], "temperature": 0.0, "avg_logprob": -0.10693761099756291, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.015903178602457047}, {"id": 75, "seek": 44040, "start": 450.15999999999997, "end": 456.0, "text": " number class, when the my component class is constructed in the constructor, it's", "tokens": [50852, 1230, 1508, 11, 562, 264, 452, 6542, 1508, 307, 17083, 294, 264, 47479, 11, 309, 311, 51144], "temperature": 0.0, "avg_logprob": -0.10693761099756291, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.015903178602457047}, {"id": 76, "seek": 44040, "start": 456.0, "end": 461.91999999999996, "text": " instantiating a new phone number object. Let me actually do like that. So it's better. And then", "tokens": [51144, 9836, 72, 990, 257, 777, 2593, 1230, 2657, 13, 961, 385, 767, 360, 411, 300, 13, 407, 309, 311, 1101, 13, 400, 550, 51440], "temperature": 0.0, "avg_logprob": -0.10693761099756291, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.015903178602457047}, {"id": 77, "seek": 44040, "start": 461.91999999999996, "end": 467.03999999999996, "text": " if I run this, and I'm intentionally throwing an exception here, so let's say that was some kind", "tokens": [51440, 498, 286, 1190, 341, 11, 293, 286, 478, 22062, 10238, 364, 11183, 510, 11, 370, 718, 311, 584, 300, 390, 512, 733, 51696], "temperature": 0.0, "avg_logprob": -0.10693761099756291, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.015903178602457047}, {"id": 78, "seek": 46704, "start": 467.12, "end": 473.92, "text": " of error. And in the error log, once the exception is caught, it's logging a meaningful", "tokens": [50368, 295, 6713, 13, 400, 294, 264, 6713, 3565, 11, 1564, 264, 11183, 307, 5415, 11, 309, 311, 27991, 257, 10995, 50708], "temperature": 0.0, "avg_logprob": -0.11768403600473873, "compression_ratio": 1.690391459074733, "no_speech_prob": 0.03460754454135895}, {"id": 79, "seek": 46704, "start": 474.64000000000004, "end": 479.84000000000003, "text": " string representation of the my component dot phone number object. Now, of course, if", "tokens": [50744, 6798, 10290, 295, 264, 452, 6542, 5893, 2593, 1230, 2657, 13, 823, 11, 295, 1164, 11, 498, 51004], "temperature": 0.0, "avg_logprob": -0.11768403600473873, "compression_ratio": 1.690391459074733, "no_speech_prob": 0.03460754454135895}, {"id": 80, "seek": 46704, "start": 479.84000000000003, "end": 486.32000000000005, "text": " once again, if he didn't override the two string method, and if he had it by default as the hexadecimal,", "tokens": [51004, 1564, 797, 11, 498, 415, 994, 380, 42321, 264, 732, 6798, 3170, 11, 293, 498, 415, 632, 309, 538, 7576, 382, 264, 23291, 762, 66, 10650, 11, 51328], "temperature": 0.0, "avg_logprob": -0.11768403600473873, "compression_ratio": 1.690391459074733, "no_speech_prob": 0.03460754454135895}, {"id": 81, "seek": 46704, "start": 486.32000000000005, "end": 492.64000000000004, "text": " which it is, it would in this case make debugging a lot harder because now you're not really sure", "tokens": [51328, 597, 309, 307, 11, 309, 576, 294, 341, 1389, 652, 45592, 257, 688, 6081, 570, 586, 291, 434, 406, 534, 988, 51644], "temperature": 0.0, "avg_logprob": -0.11768403600473873, "compression_ratio": 1.690391459074733, "no_speech_prob": 0.03460754454135895}, {"id": 82, "seek": 46704, "start": 492.64000000000004, "end": 496.8, "text": " what this class, I mean, you kind of do know what the class does, but it's better to always have a", "tokens": [51644, 437, 341, 1508, 11, 286, 914, 11, 291, 733, 295, 360, 458, 437, 264, 1508, 775, 11, 457, 309, 311, 1101, 281, 1009, 362, 257, 51852], "temperature": 0.0, "avg_logprob": -0.11768403600473873, "compression_ratio": 1.690391459074733, "no_speech_prob": 0.03460754454135895}, {"id": 83, "seek": 49680, "start": 496.8, "end": 503.28000000000003, "text": " string representation, which is why just your block states providing a good two string implementation", "tokens": [50364, 6798, 10290, 11, 597, 307, 983, 445, 428, 3461, 4368, 6530, 257, 665, 732, 6798, 11420, 50688], "temperature": 0.0, "avg_logprob": -0.15309784024260764, "compression_ratio": 1.6437768240343347, "no_speech_prob": 0.005468087270855904}, {"id": 84, "seek": 49680, "start": 503.28000000000003, "end": 509.68, "text": " makes your class much more pleasant to use and makes systems using the class easy to debug.", "tokens": [50688, 1669, 428, 1508, 709, 544, 16232, 281, 764, 293, 1669, 3652, 1228, 264, 1508, 1858, 281, 24083, 13, 51008], "temperature": 0.0, "avg_logprob": -0.15309784024260764, "compression_ratio": 1.6437768240343347, "no_speech_prob": 0.005468087270855904}, {"id": 85, "seek": 49680, "start": 510.40000000000003, "end": 517.28, "text": " The two string method is automatically invoked when an object is passed to print ln, print f,", "tokens": [51044, 440, 732, 6798, 3170, 307, 6772, 1048, 9511, 562, 364, 2657, 307, 4678, 281, 4482, 287, 77, 11, 4482, 283, 11, 51388], "temperature": 0.0, "avg_logprob": -0.15309784024260764, "compression_ratio": 1.6437768240343347, "no_speech_prob": 0.005468087270855904}, {"id": 86, "seek": 49680, "start": 517.28, "end": 524.5600000000001, "text": " the string concatenation operator or assert or is printed by a debugger. Even if you never call", "tokens": [51388, 264, 6798, 1588, 7186, 399, 12973, 420, 19810, 420, 307, 13567, 538, 257, 24083, 1321, 13, 2754, 498, 291, 1128, 818, 51752], "temperature": 0.0, "avg_logprob": -0.15309784024260764, "compression_ratio": 1.6437768240343347, "no_speech_prob": 0.005468087270855904}, {"id": 87, "seek": 52456, "start": 524.56, "end": 531.04, "text": " two string on an object, others may. So what he means by the others may is of course, in this", "tokens": [50364, 732, 6798, 322, 364, 2657, 11, 2357, 815, 13, 407, 437, 415, 1355, 538, 264, 2357, 815, 307, 295, 1164, 11, 294, 341, 50688], "temperature": 0.0, "avg_logprob": -0.09783075490129103, "compression_ratio": 1.702290076335878, "no_speech_prob": 0.010484064929187298}, {"id": 88, "seek": 52456, "start": 531.04, "end": 536.64, "text": " case, the my component class use the two string method. So it's good to be charitable and think", "tokens": [50688, 1389, 11, 264, 452, 6542, 1508, 764, 264, 732, 6798, 3170, 13, 407, 309, 311, 665, 281, 312, 44609, 293, 519, 50968], "temperature": 0.0, "avg_logprob": -0.09783075490129103, "compression_ratio": 1.702290076335878, "no_speech_prob": 0.010484064929187298}, {"id": 89, "seek": 52456, "start": 536.64, "end": 542.16, "text": " about others in that sense. And he continues, programmers will still generate diagnostic", "tokens": [50968, 466, 2357, 294, 300, 2020, 13, 400, 415, 6515, 11, 41504, 486, 920, 8460, 27897, 51244], "temperature": 0.0, "avg_logprob": -0.09783075490129103, "compression_ratio": 1.702290076335878, "no_speech_prob": 0.010484064929187298}, {"id": 90, "seek": 52456, "start": 542.16, "end": 547.28, "text": " messages in this fashion, whether or not you override two string, but the messages won't be", "tokens": [51244, 7897, 294, 341, 6700, 11, 1968, 420, 406, 291, 42321, 732, 6798, 11, 457, 264, 7897, 1582, 380, 312, 51500], "temperature": 0.0, "avg_logprob": -0.09783075490129103, "compression_ratio": 1.702290076335878, "no_speech_prob": 0.010484064929187298}, {"id": 91, "seek": 52456, "start": 548.2399999999999, "end": 552.9599999999999, "text": " useful unless you do. Yes, it's kind of the same thing he's repeated there.", "tokens": [51548, 4420, 5969, 291, 360, 13, 1079, 11, 309, 311, 733, 295, 264, 912, 551, 415, 311, 10477, 456, 13, 51784], "temperature": 0.0, "avg_logprob": -0.09783075490129103, "compression_ratio": 1.702290076335878, "no_speech_prob": 0.010484064929187298}, {"id": 92, "seek": 55296, "start": 553.6, "end": 558.72, "text": " Also, another sort of answer to the point, I guess, is that he said collections, in fact,", "tokens": [50396, 2743, 11, 1071, 1333, 295, 1867, 281, 264, 935, 11, 286, 2041, 11, 307, 300, 415, 848, 16641, 11, 294, 1186, 11, 50652], "temperature": 0.0, "avg_logprob": -0.1464107483625412, "compression_ratio": 1.83984375, "no_speech_prob": 0.002472326159477234}, {"id": 93, "seek": 55296, "start": 558.72, "end": 563.2800000000001, "text": " make good use of the two string method. So if you look at this demo, once again, I have a", "tokens": [50652, 652, 665, 764, 295, 264, 732, 6798, 3170, 13, 407, 498, 291, 574, 412, 341, 10723, 11, 1564, 797, 11, 286, 362, 257, 50880], "temperature": 0.0, "avg_logprob": -0.1464107483625412, "compression_ratio": 1.83984375, "no_speech_prob": 0.002472326159477234}, {"id": 94, "seek": 55296, "start": 563.2800000000001, "end": 568.32, "text": " hash map. I mean, once again, I mean, once again, I have a hash map that uses the phone number class.", "tokens": [50880, 22019, 4471, 13, 286, 914, 11, 1564, 797, 11, 286, 914, 11, 1564, 797, 11, 286, 362, 257, 22019, 4471, 300, 4960, 264, 2593, 1230, 1508, 13, 51132], "temperature": 0.0, "avg_logprob": -0.1464107483625412, "compression_ratio": 1.83984375, "no_speech_prob": 0.002472326159477234}, {"id": 95, "seek": 55296, "start": 568.32, "end": 576.4000000000001, "text": " So the key is of type string, and the value is of type phone number. And we're adding this key", "tokens": [51132, 407, 264, 2141, 307, 295, 2010, 6798, 11, 293, 264, 2158, 307, 295, 2010, 2593, 1230, 13, 400, 321, 434, 5127, 341, 2141, 51536], "temperature": 0.0, "avg_logprob": -0.1464107483625412, "compression_ratio": 1.83984375, "no_speech_prob": 0.002472326159477234}, {"id": 96, "seek": 55296, "start": 576.4000000000001, "end": 582.48, "text": " called Jack, my favorite philosopher, and a new object of phone number. So if I do print this,", "tokens": [51536, 1219, 4718, 11, 452, 2954, 29805, 11, 293, 257, 777, 2657, 295, 2593, 1230, 13, 407, 498, 286, 360, 4482, 341, 11, 51840], "temperature": 0.0, "avg_logprob": -0.1464107483625412, "compression_ratio": 1.83984375, "no_speech_prob": 0.002472326159477234}, {"id": 97, "seek": 58296, "start": 583.9200000000001, "end": 587.84, "text": " what you'll see is, in this case, this is a mistake, actually. So it says here,", "tokens": [50412, 437, 291, 603, 536, 307, 11, 294, 341, 1389, 11, 341, 307, 257, 6146, 11, 767, 13, 407, 309, 1619, 510, 11, 50608], "temperature": 0.0, "avg_logprob": -0.1771068083934295, "compression_ratio": 1.7569721115537849, "no_speech_prob": 0.003272648435086012}, {"id": 98, "seek": 58296, "start": 587.84, "end": 592.5600000000001, "text": " Jack has printed the object, and this is kind of meaningless. But if we do", "tokens": [50608, 4718, 575, 13567, 264, 2657, 11, 293, 341, 307, 733, 295, 33232, 13, 583, 498, 321, 360, 50844], "temperature": 0.0, "avg_logprob": -0.1771068083934295, "compression_ratio": 1.7569721115537849, "no_speech_prob": 0.003272648435086012}, {"id": 99, "seek": 58296, "start": 594.4000000000001, "end": 600.5600000000001, "text": " override this two string method, and reprint that, and then print the elements in that collection,", "tokens": [50936, 42321, 341, 732, 6798, 3170, 11, 293, 1085, 19014, 300, 11, 293, 550, 4482, 264, 4959, 294, 300, 5765, 11, 51244], "temperature": 0.0, "avg_logprob": -0.1771068083934295, "compression_ratio": 1.7569721115537849, "no_speech_prob": 0.003272648435086012}, {"id": 100, "seek": 58296, "start": 602.24, "end": 606.08, "text": " in this case, you can see, there's only one element, but it says Jack, and you get Jack's", "tokens": [51328, 294, 341, 1389, 11, 291, 393, 536, 11, 456, 311, 787, 472, 4478, 11, 457, 309, 1619, 4718, 11, 293, 291, 483, 4718, 311, 51520], "temperature": 0.0, "avg_logprob": -0.1771068083934295, "compression_ratio": 1.7569721115537849, "no_speech_prob": 0.003272648435086012}, {"id": 101, "seek": 58296, "start": 606.08, "end": 610.96, "text": " phone number. This is not his phone number. But if it is, I would have called him and immediately", "tokens": [51520, 2593, 1230, 13, 639, 307, 406, 702, 2593, 1230, 13, 583, 498, 309, 307, 11, 286, 576, 362, 1219, 796, 293, 4258, 51764], "temperature": 0.0, "avg_logprob": -0.1771068083934295, "compression_ratio": 1.7569721115537849, "no_speech_prob": 0.003272648435086012}, {"id": 102, "seek": 61096, "start": 610.96, "end": 615.6800000000001, "text": " asked him for an interview to no doubt on philosophy, but this is not his phone number,", "tokens": [50364, 2351, 796, 337, 364, 4049, 281, 572, 6385, 322, 10675, 11, 457, 341, 307, 406, 702, 2593, 1230, 11, 50600], "temperature": 0.0, "avg_logprob": -0.09267368503645354, "compression_ratio": 1.6603053435114503, "no_speech_prob": 0.003027434926480055}, {"id": 103, "seek": 61096, "start": 615.6800000000001, "end": 622.0, "text": " unfortunately. Okay, let's keep going. So he states here, or he continues,", "tokens": [50600, 7015, 13, 1033, 11, 718, 311, 1066, 516, 13, 407, 415, 4368, 510, 11, 420, 415, 6515, 11, 50916], "temperature": 0.0, "avg_logprob": -0.09267368503645354, "compression_ratio": 1.6603053435114503, "no_speech_prob": 0.003027434926480055}, {"id": 104, "seek": 61096, "start": 622.0, "end": 627.2800000000001, "text": " when practical, the two string method should return all of the interesting information", "tokens": [50916, 562, 8496, 11, 264, 732, 6798, 3170, 820, 2736, 439, 295, 264, 1880, 1589, 51180], "temperature": 0.0, "avg_logprob": -0.09267368503645354, "compression_ratio": 1.6603053435114503, "no_speech_prob": 0.003027434926480055}, {"id": 105, "seek": 61096, "start": 627.2800000000001, "end": 632.0, "text": " contained in the object, as shown in the phone number example. Then on this next point,", "tokens": [51180, 16212, 294, 264, 2657, 11, 382, 4898, 294, 264, 2593, 1230, 1365, 13, 1396, 322, 341, 958, 935, 11, 51416], "temperature": 0.0, "avg_logprob": -0.09267368503645354, "compression_ratio": 1.6603053435114503, "no_speech_prob": 0.003027434926480055}, {"id": 106, "seek": 61096, "start": 632.0, "end": 638.0, "text": " where we discuss objects not conductive to string representation, he states, it is impractical if", "tokens": [51416, 689, 321, 2248, 6565, 406, 6018, 488, 281, 6798, 10290, 11, 415, 4368, 11, 309, 307, 704, 1897, 804, 498, 51716], "temperature": 0.0, "avg_logprob": -0.09267368503645354, "compression_ratio": 1.6603053435114503, "no_speech_prob": 0.003027434926480055}, {"id": 107, "seek": 63800, "start": 638.0, "end": 642.64, "text": " the object is large. So these are objects that is a bit harder to represent as a string.", "tokens": [50364, 264, 2657, 307, 2416, 13, 407, 613, 366, 6565, 300, 307, 257, 857, 6081, 281, 2906, 382, 257, 6798, 13, 50596], "temperature": 0.0, "avg_logprob": -0.10212216076550183, "compression_ratio": 2.0, "no_speech_prob": 0.0031234498601406813}, {"id": 108, "seek": 63800, "start": 643.28, "end": 649.92, "text": " Why is this giving a typo to a? There we go. Sorry, he continues, it is impractical if the", "tokens": [50628, 1545, 307, 341, 2902, 257, 2125, 78, 281, 257, 30, 821, 321, 352, 13, 4919, 11, 415, 6515, 11, 309, 307, 704, 1897, 804, 498, 264, 50960], "temperature": 0.0, "avg_logprob": -0.10212216076550183, "compression_ratio": 2.0, "no_speech_prob": 0.0031234498601406813}, {"id": 109, "seek": 63800, "start": 649.92, "end": 655.92, "text": " object is large, or if it contains state that is not conductive to string representation.", "tokens": [50960, 2657, 307, 2416, 11, 420, 498, 309, 8306, 1785, 300, 307, 406, 6018, 488, 281, 6798, 10290, 13, 51260], "temperature": 0.0, "avg_logprob": -0.10212216076550183, "compression_ratio": 2.0, "no_speech_prob": 0.0031234498601406813}, {"id": 110, "seek": 63800, "start": 655.92, "end": 661.84, "text": " And then it continues before we get to the demo. Under these circumstances, so if this is if the", "tokens": [51260, 400, 550, 309, 6515, 949, 321, 483, 281, 264, 10723, 13, 6974, 613, 9121, 11, 370, 498, 341, 307, 498, 264, 51556], "temperature": 0.0, "avg_logprob": -0.10212216076550183, "compression_ratio": 2.0, "no_speech_prob": 0.0031234498601406813}, {"id": 111, "seek": 63800, "start": 661.84, "end": 666.56, "text": " object is not conductive to a string representation, under these circumstances,", "tokens": [51556, 2657, 307, 406, 6018, 488, 281, 257, 6798, 10290, 11, 833, 613, 9121, 11, 51792], "temperature": 0.0, "avg_logprob": -0.10212216076550183, "compression_ratio": 2.0, "no_speech_prob": 0.0031234498601406813}, {"id": 112, "seek": 66656, "start": 666.56, "end": 674.2399999999999, "text": " two string should return a summary of the class. Ideally, the string should be self-explanatory.", "tokens": [50364, 732, 6798, 820, 2736, 257, 12691, 295, 264, 1508, 13, 40817, 11, 264, 6798, 820, 312, 2698, 12, 3121, 16554, 4745, 13, 50748], "temperature": 0.0, "avg_logprob": -0.08708383579446811, "compression_ratio": 1.6962616822429906, "no_speech_prob": 0.006289301905781031}, {"id": 113, "seek": 66656, "start": 674.2399999999999, "end": 682.16, "text": " So let's take a look at this demo. Over here, we have a class called phone directory. This class is,", "tokens": [50748, 407, 718, 311, 747, 257, 574, 412, 341, 10723, 13, 4886, 510, 11, 321, 362, 257, 1508, 1219, 2593, 21120, 13, 639, 1508, 307, 11, 51144], "temperature": 0.0, "avg_logprob": -0.08708383579446811, "compression_ratio": 1.6962616822429906, "no_speech_prob": 0.006289301905781031}, {"id": 114, "seek": 66656, "start": 682.16, "end": 686.16, "text": " if you look at the two string method of this class, which I'll show in a moment,", "tokens": [51144, 498, 291, 574, 412, 264, 732, 6798, 3170, 295, 341, 1508, 11, 597, 286, 603, 855, 294, 257, 1623, 11, 51344], "temperature": 0.0, "avg_logprob": -0.08708383579446811, "compression_ratio": 1.6962616822429906, "no_speech_prob": 0.006289301905781031}, {"id": 115, "seek": 66656, "start": 686.8, "end": 692.7199999999999, "text": " it is a summary of this class. So what do I mean by that? This class has two fields,", "tokens": [51376, 309, 307, 257, 12691, 295, 341, 1508, 13, 407, 437, 360, 286, 914, 538, 300, 30, 639, 1508, 575, 732, 7909, 11, 51672], "temperature": 0.0, "avg_logprob": -0.08708383579446811, "compression_ratio": 1.6962616822429906, "no_speech_prob": 0.006289301905781031}, {"id": 116, "seek": 69272, "start": 692.8000000000001, "end": 699.52, "text": " two private fields. It's got a string name and a list of phone entry type called phone entries.", "tokens": [50368, 732, 4551, 7909, 13, 467, 311, 658, 257, 6798, 1315, 293, 257, 1329, 295, 2593, 8729, 2010, 1219, 2593, 23041, 13, 50704], "temperature": 0.0, "avg_logprob": -0.10711846351623536, "compression_ratio": 1.7174887892376682, "no_speech_prob": 0.023325353860855103}, {"id": 117, "seek": 69272, "start": 700.08, "end": 706.4, "text": " And in the constructor, it'll set the values for these two fields. And if you look at phone entry,", "tokens": [50732, 400, 294, 264, 47479, 11, 309, 603, 992, 264, 4190, 337, 613, 732, 7909, 13, 400, 498, 291, 574, 412, 2593, 8729, 11, 51048], "temperature": 0.0, "avg_logprob": -0.10711846351623536, "compression_ratio": 1.7174887892376682, "no_speech_prob": 0.023325353860855103}, {"id": 118, "seek": 69272, "start": 706.4, "end": 712.8000000000001, "text": " that's a class of its own, in fact, which is a in a class called phone entry. So that simply", "tokens": [51048, 300, 311, 257, 1508, 295, 1080, 1065, 11, 294, 1186, 11, 597, 307, 257, 294, 257, 1508, 1219, 2593, 8729, 13, 407, 300, 2935, 51368], "temperature": 0.0, "avg_logprob": -0.10711846351623536, "compression_ratio": 1.7174887892376682, "no_speech_prob": 0.023325353860855103}, {"id": 119, "seek": 69272, "start": 712.8000000000001, "end": 717.36, "text": " takes a full name and the phone number. That class really doesn't do that much. And then in the", "tokens": [51368, 2516, 257, 1577, 1315, 293, 264, 2593, 1230, 13, 663, 1508, 534, 1177, 380, 360, 300, 709, 13, 400, 550, 294, 264, 51596], "temperature": 0.0, "avg_logprob": -0.10711846351623536, "compression_ratio": 1.7174887892376682, "no_speech_prob": 0.023325353860855103}, {"id": 120, "seek": 71736, "start": 718.16, "end": 723.44, "text": " phone directory class, we have a list of phone entry, as I already said. And if you look at the", "tokens": [50404, 2593, 21120, 1508, 11, 321, 362, 257, 1329, 295, 2593, 8729, 11, 382, 286, 1217, 848, 13, 400, 498, 291, 574, 412, 264, 50668], "temperature": 0.0, "avg_logprob": -0.11569892719227781, "compression_ratio": 1.8309178743961352, "no_speech_prob": 0.0029808434192091227}, {"id": 121, "seek": 71736, "start": 723.44, "end": 728.64, "text": " two string method, what this two string method does is it returns the phone directory with the", "tokens": [50668, 732, 6798, 3170, 11, 437, 341, 732, 6798, 3170, 775, 307, 309, 11247, 264, 2593, 21120, 365, 264, 50928], "temperature": 0.0, "avg_logprob": -0.11569892719227781, "compression_ratio": 1.8309178743961352, "no_speech_prob": 0.0029808434192091227}, {"id": 122, "seek": 71736, "start": 728.64, "end": 736.5600000000001, "text": " name. That's the name of the whoever the person is. And then all it does is it returns phone entries", "tokens": [50928, 1315, 13, 663, 311, 264, 1315, 295, 264, 11387, 264, 954, 307, 13, 400, 550, 439, 309, 775, 307, 309, 11247, 2593, 23041, 51324], "temperature": 0.0, "avg_logprob": -0.11569892719227781, "compression_ratio": 1.8309178743961352, "no_speech_prob": 0.0029808434192091227}, {"id": 123, "seek": 71736, "start": 736.5600000000001, "end": 743.12, "text": " dot size. So it doesn't really return every single element in the phone and entry list.", "tokens": [51324, 5893, 2744, 13, 407, 309, 1177, 380, 534, 2736, 633, 2167, 4478, 294, 264, 2593, 293, 8729, 1329, 13, 51652], "temperature": 0.0, "avg_logprob": -0.11569892719227781, "compression_ratio": 1.8309178743961352, "no_speech_prob": 0.0029808434192091227}, {"id": 124, "seek": 74312, "start": 743.12, "end": 747.76, "text": " Now, if you look at how a client might use the phone directory class,", "tokens": [50364, 823, 11, 498, 291, 574, 412, 577, 257, 6423, 1062, 764, 264, 2593, 21120, 1508, 11, 50596], "temperature": 0.0, "avg_logprob": -0.16597582499186198, "compression_ratio": 2.0972222222222223, "no_speech_prob": 0.002757324604317546}, {"id": 125, "seek": 74312, "start": 749.84, "end": 755.12, "text": " we have three objects here, we have phone entry one, two and three, then we also have a phone", "tokens": [50700, 321, 362, 1045, 6565, 510, 11, 321, 362, 2593, 8729, 472, 11, 732, 293, 1045, 11, 550, 321, 611, 362, 257, 2593, 50964], "temperature": 0.0, "avg_logprob": -0.16597582499186198, "compression_ratio": 2.0972222222222223, "no_speech_prob": 0.002757324604317546}, {"id": 126, "seek": 74312, "start": 755.12, "end": 761.36, "text": " entry list. So into the phone entry list, we've added, by the way, phone entry, one, two and three,", "tokens": [50964, 8729, 1329, 13, 407, 666, 264, 2593, 8729, 1329, 11, 321, 600, 3869, 11, 538, 264, 636, 11, 2593, 8729, 11, 472, 11, 732, 293, 1045, 11, 51276], "temperature": 0.0, "avg_logprob": -0.16597582499186198, "compression_ratio": 2.0972222222222223, "no_speech_prob": 0.002757324604317546}, {"id": 127, "seek": 74312, "start": 761.36, "end": 765.2, "text": " these, these three objects of the type phone entry and then the last test, of course, of type", "tokens": [51276, 613, 11, 613, 1045, 6565, 295, 264, 2010, 2593, 8729, 293, 550, 264, 1036, 1500, 11, 295, 1164, 11, 295, 2010, 51468], "temperature": 0.0, "avg_logprob": -0.16597582499186198, "compression_ratio": 2.0972222222222223, "no_speech_prob": 0.002757324604317546}, {"id": 128, "seek": 74312, "start": 765.2, "end": 771.44, "text": " phone entry two, and then sorry, and into the list, we add these phone entries. And afterwards,", "tokens": [51468, 2593, 8729, 732, 11, 293, 550, 2597, 11, 293, 666, 264, 1329, 11, 321, 909, 613, 2593, 23041, 13, 400, 10543, 11, 51780], "temperature": 0.0, "avg_logprob": -0.16597582499186198, "compression_ratio": 2.0972222222222223, "no_speech_prob": 0.002757324604317546}, {"id": 129, "seek": 77144, "start": 771.44, "end": 777.2, "text": " into the directory, which is of type phone directory, obviously, we add a name in this case,", "tokens": [50364, 666, 264, 21120, 11, 597, 307, 295, 2010, 2593, 21120, 11, 2745, 11, 321, 909, 257, 1315, 294, 341, 1389, 11, 50652], "temperature": 0.0, "avg_logprob": -0.18214520686814764, "compression_ratio": 1.8352941176470587, "no_speech_prob": 0.0060968659818172455}, {"id": 130, "seek": 77144, "start": 777.2, "end": 783.0400000000001, "text": " that existentialists, and we add their names, character guide, need to start into the phone", "tokens": [50652, 300, 37133, 1751, 11, 293, 321, 909, 641, 5288, 11, 2517, 5934, 11, 643, 281, 722, 666, 264, 2593, 50944], "temperature": 0.0, "avg_logprob": -0.18214520686814764, "compression_ratio": 1.8352941176470587, "no_speech_prob": 0.0060968659818172455}, {"id": 131, "seek": 77144, "start": 783.0400000000001, "end": 788.32, "text": " entry list, because sorry, the phone entry list where we added these objects to added into this,", "tokens": [50944, 8729, 1329, 11, 570, 2597, 11, 264, 2593, 8729, 1329, 689, 321, 3869, 613, 6565, 281, 3869, 666, 341, 11, 51208], "temperature": 0.0, "avg_logprob": -0.18214520686814764, "compression_ratio": 1.8352941176470587, "no_speech_prob": 0.0060968659818172455}, {"id": 132, "seek": 77144, "start": 788.32, "end": 794.4000000000001, "text": " not added, but this phone directory classes instantiated with that list. Gosh, I'm butchering", "tokens": [51208, 406, 3869, 11, 457, 341, 2593, 21120, 5359, 9836, 72, 770, 365, 300, 1329, 13, 19185, 11, 286, 478, 457, 339, 1794, 51512], "temperature": 0.0, "avg_logprob": -0.18214520686814764, "compression_ratio": 1.8352941176470587, "no_speech_prob": 0.0060968659818172455}, {"id": 133, "seek": 77144, "start": 794.4000000000001, "end": 799.0400000000001, "text": " this simple thing. I'm sorry, it's been a long couple of days, my brain has gone a bit mush.", "tokens": [51512, 341, 2199, 551, 13, 286, 478, 2597, 11, 309, 311, 668, 257, 938, 1916, 295, 1708, 11, 452, 3567, 575, 2780, 257, 857, 11559, 13, 51744], "temperature": 0.0, "avg_logprob": -0.18214520686814764, "compression_ratio": 1.8352941176470587, "no_speech_prob": 0.0060968659818172455}, {"id": 134, "seek": 79904, "start": 799.5999999999999, "end": 805.5999999999999, "text": " So if you do run this, what you'll see is, yes, it's printing phone entry as it should,", "tokens": [50392, 407, 498, 291, 360, 1190, 341, 11, 437, 291, 603, 536, 307, 11, 2086, 11, 309, 311, 14699, 2593, 8729, 382, 309, 820, 11, 50692], "temperature": 0.0, "avg_logprob": -0.09937624724014946, "compression_ratio": 1.8577235772357723, "no_speech_prob": 0.009124341420829296}, {"id": 135, "seek": 79904, "start": 807.12, "end": 811.1999999999999, "text": " with the, with the full name and the phone number. But if you look at the phone directory class,", "tokens": [50768, 365, 264, 11, 365, 264, 1577, 1315, 293, 264, 2593, 1230, 13, 583, 498, 291, 574, 412, 264, 2593, 21120, 1508, 11, 50972], "temperature": 0.0, "avg_logprob": -0.09937624724014946, "compression_ratio": 1.8577235772357723, "no_speech_prob": 0.009124341420829296}, {"id": 136, "seek": 79904, "start": 812.8, "end": 816.56, "text": " what it's really doing is it's saying existentialists and saying, okay, this,", "tokens": [51052, 437, 309, 311, 534, 884, 307, 309, 311, 1566, 37133, 1751, 293, 1566, 11, 1392, 11, 341, 11, 51240], "temperature": 0.0, "avg_logprob": -0.09937624724014946, "compression_ratio": 1.8577235772357723, "no_speech_prob": 0.009124341420829296}, {"id": 137, "seek": 79904, "start": 816.56, "end": 821.92, "text": " there are three existentialists in this phone directory. And that's kind of the point here. So", "tokens": [51240, 456, 366, 1045, 37133, 1751, 294, 341, 2593, 21120, 13, 400, 300, 311, 733, 295, 264, 935, 510, 13, 407, 51508], "temperature": 0.0, "avg_logprob": -0.09937624724014946, "compression_ratio": 1.8577235772357723, "no_speech_prob": 0.009124341420829296}, {"id": 138, "seek": 79904, "start": 823.4399999999999, "end": 828.56, "text": " it's not always necessary to represent every single thing in a class, especially if there are lists", "tokens": [51584, 309, 311, 406, 1009, 4818, 281, 2906, 633, 2167, 551, 294, 257, 1508, 11, 2318, 498, 456, 366, 14511, 51840], "temperature": 0.0, "avg_logprob": -0.09937624724014946, "compression_ratio": 1.8577235772357723, "no_speech_prob": 0.009124341420829296}, {"id": 139, "seek": 82856, "start": 828.56, "end": 833.5999999999999, "text": " involved and other components involved in the class. What's important is, as Joshua Block states,", "tokens": [50364, 3288, 293, 661, 6677, 3288, 294, 264, 1508, 13, 708, 311, 1021, 307, 11, 382, 24005, 17500, 4368, 11, 50616], "temperature": 0.0, "avg_logprob": -0.10255764298519846, "compression_ratio": 1.781954887218045, "no_speech_prob": 0.011329793371260166}, {"id": 140, "seek": 82856, "start": 833.5999999999999, "end": 840.16, "text": " the string should be self-explanatory. This here, this two string method that that we've", "tokens": [50616, 264, 6798, 820, 312, 2698, 12, 3121, 16554, 4745, 13, 639, 510, 11, 341, 732, 6798, 3170, 300, 300, 321, 600, 50944], "temperature": 0.0, "avg_logprob": -0.10255764298519846, "compression_ratio": 1.781954887218045, "no_speech_prob": 0.011329793371260166}, {"id": 141, "seek": 82856, "start": 840.16, "end": 845.04, "text": " overridden in the phone directory class, this is still something meaningful and comparison to,", "tokens": [50944, 670, 81, 6171, 294, 264, 2593, 21120, 1508, 11, 341, 307, 920, 746, 10995, 293, 9660, 281, 11, 51188], "temperature": 0.0, "avg_logprob": -0.10255764298519846, "compression_ratio": 1.781954887218045, "no_speech_prob": 0.011329793371260166}, {"id": 142, "seek": 82856, "start": 845.04, "end": 850.56, "text": " let's say, a hexadecimal for a client of the phone directory class. So it's still of value. Again,", "tokens": [51188, 718, 311, 584, 11, 257, 23291, 762, 66, 10650, 337, 257, 6423, 295, 264, 2593, 21120, 1508, 13, 407, 309, 311, 920, 295, 2158, 13, 3764, 11, 51464], "temperature": 0.0, "avg_logprob": -0.10255764298519846, "compression_ratio": 1.781954887218045, "no_speech_prob": 0.011329793371260166}, {"id": 143, "seek": 82856, "start": 850.56, "end": 854.56, "text": " the key term here is meaningful. The reason it's important for it to be meaningful is, again,", "tokens": [51464, 264, 2141, 1433, 510, 307, 10995, 13, 440, 1778, 309, 311, 1021, 337, 309, 281, 312, 10995, 307, 11, 797, 11, 51664], "temperature": 0.0, "avg_logprob": -0.10255764298519846, "compression_ratio": 1.781954887218045, "no_speech_prob": 0.011329793371260166}, {"id": 144, "seek": 85456, "start": 854.64, "end": 858.88, "text": " if it comes to debugging here, if there's an associate failure or there's a test failure,", "tokens": [50368, 498, 309, 1487, 281, 45592, 510, 11, 498, 456, 311, 364, 14644, 7763, 420, 456, 311, 257, 1500, 7763, 11, 50580], "temperature": 0.0, "avg_logprob": -0.10709346273671026, "compression_ratio": 1.690391459074733, "no_speech_prob": 0.08149342238903046}, {"id": 145, "seek": 85456, "start": 858.88, "end": 867.28, "text": " it'll say expected this, but was this now for a user or a programmer, this looks the same. So", "tokens": [50580, 309, 603, 584, 5176, 341, 11, 457, 390, 341, 586, 337, 257, 4195, 420, 257, 32116, 11, 341, 1542, 264, 912, 13, 407, 51000], "temperature": 0.0, "avg_logprob": -0.10709346273671026, "compression_ratio": 1.690391459074733, "no_speech_prob": 0.08149342238903046}, {"id": 146, "seek": 85456, "start": 867.92, "end": 873.52, "text": " he or she doesn't know where the hell the error is, is probably because in the string representation", "tokens": [51032, 415, 420, 750, 1177, 380, 458, 689, 264, 4921, 264, 6713, 307, 11, 307, 1391, 570, 294, 264, 6798, 10290, 51312], "temperature": 0.0, "avg_logprob": -0.10709346273671026, "compression_ratio": 1.690391459074733, "no_speech_prob": 0.08149342238903046}, {"id": 147, "seek": 85456, "start": 873.52, "end": 878.4, "text": " of this class, some significant field, something that would give meaning to this object has been", "tokens": [51312, 295, 341, 1508, 11, 512, 4776, 2519, 11, 746, 300, 576, 976, 3620, 281, 341, 2657, 575, 668, 51556], "temperature": 0.0, "avg_logprob": -0.10709346273671026, "compression_ratio": 1.690391459074733, "no_speech_prob": 0.08149342238903046}, {"id": 148, "seek": 85456, "start": 878.4, "end": 883.76, "text": " missed out. Therefore, the user is kind of blindsided and have to figure it out on their own.", "tokens": [51556, 6721, 484, 13, 7504, 11, 264, 4195, 307, 733, 295, 6865, 30941, 293, 362, 281, 2573, 309, 484, 322, 641, 1065, 13, 51824], "temperature": 0.0, "avg_logprob": -0.10709346273671026, "compression_ratio": 1.690391459074733, "no_speech_prob": 0.08149342238903046}, {"id": 149, "seek": 88376, "start": 883.76, "end": 888.96, "text": " So it's probably always good to overcommunicate and overrepresent what an object is in a string.", "tokens": [50364, 407, 309, 311, 1391, 1009, 665, 281, 670, 25451, 8700, 293, 670, 19919, 11662, 437, 364, 2657, 307, 294, 257, 6798, 13, 50624], "temperature": 0.0, "avg_logprob": -0.09070721539584073, "compression_ratio": 1.6911764705882353, "no_speech_prob": 0.004467513412237167}, {"id": 150, "seek": 88376, "start": 888.96, "end": 893.12, "text": " So of course, something you may have noticed in the phone number class is when we were", "tokens": [50624, 407, 295, 1164, 11, 746, 291, 815, 362, 5694, 294, 264, 2593, 1230, 1508, 307, 562, 321, 645, 50832], "temperature": 0.0, "avg_logprob": -0.09070721539584073, "compression_ratio": 1.6911764705882353, "no_speech_prob": 0.004467513412237167}, {"id": 151, "seek": 88376, "start": 893.12, "end": 898.64, "text": " representing the phone number, you could see here, we did give it a certain format.", "tokens": [50832, 13460, 264, 2593, 1230, 11, 291, 727, 536, 510, 11, 321, 630, 976, 309, 257, 1629, 7877, 13, 51108], "temperature": 0.0, "avg_logprob": -0.09070721539584073, "compression_ratio": 1.6911764705882353, "no_speech_prob": 0.004467513412237167}, {"id": 152, "seek": 88376, "start": 898.64, "end": 904.72, "text": " We did represent it in a certain format. And that begs the question, how do we specify the format", "tokens": [51108, 492, 630, 2906, 309, 294, 257, 1629, 7877, 13, 400, 300, 4612, 82, 264, 1168, 11, 577, 360, 321, 16500, 264, 7877, 51412], "temperature": 0.0, "avg_logprob": -0.09070721539584073, "compression_ratio": 1.6911764705882353, "no_speech_prob": 0.004467513412237167}, {"id": 153, "seek": 88376, "start": 904.72, "end": 910.3199999999999, "text": " of the return value in documentation or put it in Joshua Block's words, one important decision", "tokens": [51412, 295, 264, 2736, 2158, 294, 14333, 420, 829, 309, 294, 24005, 17500, 311, 2283, 11, 472, 1021, 3537, 51692], "temperature": 0.0, "avg_logprob": -0.09070721539584073, "compression_ratio": 1.6911764705882353, "no_speech_prob": 0.004467513412237167}, {"id": 154, "seek": 91032, "start": 910.32, "end": 915.5200000000001, "text": " you'll have to make when implementing a two string method is whether to specify the format", "tokens": [50364, 291, 603, 362, 281, 652, 562, 18114, 257, 732, 6798, 3170, 307, 1968, 281, 16500, 264, 7877, 50624], "temperature": 0.0, "avg_logprob": -0.08964562197344018, "compression_ratio": 1.7807692307692307, "no_speech_prob": 0.010650782845914364}, {"id": 155, "seek": 91032, "start": 915.5200000000001, "end": 920.1600000000001, "text": " of the return value in the documentation. So according to him, it's important to document", "tokens": [50624, 295, 264, 2736, 2158, 294, 264, 14333, 13, 407, 4650, 281, 796, 11, 309, 311, 1021, 281, 4166, 50856], "temperature": 0.0, "avg_logprob": -0.08964562197344018, "compression_ratio": 1.7807692307692307, "no_speech_prob": 0.010650782845914364}, {"id": 156, "seek": 91032, "start": 920.1600000000001, "end": 925.36, "text": " the format for value classes such as phone number or matrix. Now what are value classes? So before", "tokens": [50856, 264, 7877, 337, 2158, 5359, 1270, 382, 2593, 1230, 420, 8141, 13, 823, 437, 366, 2158, 5359, 30, 407, 949, 51116], "temperature": 0.0, "avg_logprob": -0.08964562197344018, "compression_ratio": 1.7807692307692307, "no_speech_prob": 0.010650782845914364}, {"id": 157, "seek": 91032, "start": 925.36, "end": 930.88, "text": " we get to the demo, but a period of the way. So according to one definition I found by UC Berkeley,", "tokens": [51116, 321, 483, 281, 264, 10723, 11, 457, 257, 2896, 295, 264, 636, 13, 407, 4650, 281, 472, 7123, 286, 1352, 538, 14079, 23684, 11, 51392], "temperature": 0.0, "avg_logprob": -0.08964562197344018, "compression_ratio": 1.7807692307692307, "no_speech_prob": 0.010650782845914364}, {"id": 158, "seek": 91032, "start": 931.5200000000001, "end": 935.9200000000001, "text": " at a fundamental level, so I'm defining value classes here, at a fundamental level,", "tokens": [51424, 412, 257, 8088, 1496, 11, 370, 286, 478, 17827, 2158, 5359, 510, 11, 412, 257, 8088, 1496, 11, 51644], "temperature": 0.0, "avg_logprob": -0.08964562197344018, "compression_ratio": 1.7807692307692307, "no_speech_prob": 0.010650782845914364}, {"id": 159, "seek": 93592, "start": 935.92, "end": 944.64, "text": " value classes define objects which once created, never change their value. A variable of a value", "tokens": [50364, 2158, 5359, 6964, 6565, 597, 1564, 2942, 11, 1128, 1319, 641, 2158, 13, 316, 7006, 295, 257, 2158, 50800], "temperature": 0.0, "avg_logprob": -0.13390040654008106, "compression_ratio": 1.6122448979591837, "no_speech_prob": 0.008845694363117218}, {"id": 160, "seek": 93592, "start": 944.64, "end": 951.28, "text": " type may only be changed by reassigning to that variable. When we wish to only modify some portion", "tokens": [50800, 2010, 815, 787, 312, 3105, 538, 19486, 9676, 281, 300, 7006, 13, 1133, 321, 3172, 281, 787, 16927, 512, 8044, 51132], "temperature": 0.0, "avg_logprob": -0.13390040654008106, "compression_ratio": 1.6122448979591837, "no_speech_prob": 0.008845694363117218}, {"id": 161, "seek": 93592, "start": 951.28, "end": 957.5999999999999, "text": " of value class, one attribute, let's say, we're compelled to reassign the whole object. So something", "tokens": [51132, 295, 2158, 1508, 11, 472, 19667, 11, 718, 311, 584, 11, 321, 434, 40021, 281, 19486, 788, 264, 1379, 2657, 13, 407, 746, 51448], "temperature": 0.0, "avg_logprob": -0.13390040654008106, "compression_ratio": 1.6122448979591837, "no_speech_prob": 0.008845694363117218}, {"id": 162, "seek": 93592, "start": 957.5999999999999, "end": 962.9599999999999, "text": " rather static, and I mean that conceptually not in the Java sense like that, probably it's okay to", "tokens": [51448, 2831, 13437, 11, 293, 286, 914, 300, 3410, 671, 406, 294, 264, 10745, 2020, 411, 300, 11, 1391, 309, 311, 1392, 281, 51716], "temperature": 0.0, "avg_logprob": -0.13390040654008106, "compression_ratio": 1.6122448979591837, "no_speech_prob": 0.008845694363117218}, {"id": 163, "seek": 96296, "start": 962.96, "end": 967.76, "text": " document that because it's not going to change. It's going to be in variable. And also another", "tokens": [50364, 4166, 300, 570, 309, 311, 406, 516, 281, 1319, 13, 467, 311, 516, 281, 312, 294, 7006, 13, 400, 611, 1071, 50604], "temperature": 0.0, "avg_logprob": -0.1338071312223162, "compression_ratio": 1.6724738675958188, "no_speech_prob": 0.01615067757666111}, {"id": 164, "seek": 96296, "start": 967.76, "end": 974.4000000000001, "text": " definition, I would say a clear one in fact by chat GPT with a value class, this helps create a", "tokens": [50604, 7123, 11, 286, 576, 584, 257, 1850, 472, 294, 1186, 538, 5081, 26039, 51, 365, 257, 2158, 1508, 11, 341, 3665, 1884, 257, 50936], "temperature": 0.0, "avg_logprob": -0.1338071312223162, "compression_ratio": 1.6724738675958188, "no_speech_prob": 0.01615067757666111}, {"id": 165, "seek": 96296, "start": 974.4000000000001, "end": 979.6, "text": " standardized human readable representation of the object that can be used for input output and", "tokens": [50936, 31677, 1952, 49857, 10290, 295, 264, 2657, 300, 393, 312, 1143, 337, 4846, 5598, 293, 51196], "temperature": 0.0, "avg_logprob": -0.1338071312223162, "compression_ratio": 1.6724738675958188, "no_speech_prob": 0.01615067757666111}, {"id": 166, "seek": 96296, "start": 979.6, "end": 984.08, "text": " persistent human readable data objects. So if you look at this new variant of the phone number", "tokens": [51196, 24315, 1952, 49857, 1412, 6565, 13, 407, 498, 291, 574, 412, 341, 777, 17501, 295, 264, 2593, 1230, 51420], "temperature": 0.0, "avg_logprob": -0.1338071312223162, "compression_ratio": 1.6724738675958188, "no_speech_prob": 0.01615067757666111}, {"id": 167, "seek": 96296, "start": 984.08, "end": 989.6, "text": " class, it is for all intents and purposes immutable. The reason is the class is final or the fields", "tokens": [51420, 1508, 11, 309, 307, 337, 439, 560, 791, 293, 9932, 3397, 32148, 13, 440, 1778, 307, 264, 1508, 307, 2572, 420, 264, 7909, 51696], "temperature": 0.0, "avg_logprob": -0.1338071312223162, "compression_ratio": 1.6724738675958188, "no_speech_prob": 0.01615067757666111}, {"id": 168, "seek": 98960, "start": 989.6, "end": 996.08, "text": " are final. Therefore, it is going to be static. It'll not change. It is not mutable. And if you", "tokens": [50364, 366, 2572, 13, 7504, 11, 309, 307, 516, 281, 312, 13437, 13, 467, 603, 406, 1319, 13, 467, 307, 406, 5839, 712, 13, 400, 498, 291, 50688], "temperature": 0.0, "avg_logprob": -0.1368000780949827, "compression_ratio": 1.8037037037037038, "no_speech_prob": 0.006487591192126274}, {"id": 169, "seek": 98960, "start": 996.08, "end": 1001.9200000000001, "text": " look at the two string method, in this case, in the documentation, we have specified what the format", "tokens": [50688, 574, 412, 264, 732, 6798, 3170, 11, 294, 341, 1389, 11, 294, 264, 14333, 11, 321, 362, 22206, 437, 264, 7877, 50980], "temperature": 0.0, "avg_logprob": -0.1368000780949827, "compression_ratio": 1.8037037037037038, "no_speech_prob": 0.006487591192126274}, {"id": 170, "seek": 98960, "start": 1001.9200000000001, "end": 1006.72, "text": " of the string representation would be. And it's will even given an example. And then if we go look", "tokens": [50980, 295, 264, 6798, 10290, 576, 312, 13, 400, 309, 311, 486, 754, 2212, 364, 1365, 13, 400, 550, 498, 321, 352, 574, 51220], "temperature": 0.0, "avg_logprob": -0.1368000780949827, "compression_ratio": 1.8037037037037038, "no_speech_prob": 0.006487591192126274}, {"id": 171, "seek": 98960, "start": 1006.72, "end": 1012.5600000000001, "text": " at a client that will use the phone number class and run this code. By the way, you can see here", "tokens": [51220, 412, 257, 6423, 300, 486, 764, 264, 2593, 1230, 1508, 293, 1190, 341, 3089, 13, 3146, 264, 636, 11, 291, 393, 536, 510, 51512], "temperature": 0.0, "avg_logprob": -0.1368000780949827, "compression_ratio": 1.8037037037037038, "no_speech_prob": 0.006487591192126274}, {"id": 172, "seek": 98960, "start": 1012.5600000000001, "end": 1018.08, "text": " an object of phone numbers created, the two string method, what it returns the representation,", "tokens": [51512, 364, 2657, 295, 2593, 3547, 2942, 11, 264, 732, 6798, 3170, 11, 437, 309, 11247, 264, 10290, 11, 51788], "temperature": 0.0, "avg_logprob": -0.1368000780949827, "compression_ratio": 1.8037037037037038, "no_speech_prob": 0.006487591192126274}, {"id": 173, "seek": 101808, "start": 1018.8000000000001, "end": 1024.0, "text": " it maps, or it corresponds to what's being specified in the documentation on the two string", "tokens": [50400, 309, 11317, 11, 420, 309, 23249, 281, 437, 311, 885, 22206, 294, 264, 14333, 322, 264, 732, 6798, 50660], "temperature": 0.0, "avg_logprob": -0.11189273198445639, "compression_ratio": 1.6340425531914893, "no_speech_prob": 0.0061922743916511536}, {"id": 174, "seek": 101808, "start": 1024.0, "end": 1033.1200000000001, "text": " method itself. So for a class like this, which is a value class, it's okay to document the format", "tokens": [50660, 3170, 2564, 13, 407, 337, 257, 1508, 411, 341, 11, 597, 307, 257, 2158, 1508, 11, 309, 311, 1392, 281, 4166, 264, 7877, 51116], "temperature": 0.0, "avg_logprob": -0.11189273198445639, "compression_ratio": 1.6340425531914893, "no_speech_prob": 0.0061922743916511536}, {"id": 175, "seek": 101808, "start": 1033.1200000000001, "end": 1039.1200000000001, "text": " as Joshua Block states. So just to keep reading what is stated here to put it a bit more formally,", "tokens": [51116, 382, 24005, 17500, 4368, 13, 407, 445, 281, 1066, 3760, 437, 307, 11323, 510, 281, 829, 309, 257, 857, 544, 25983, 11, 51416], "temperature": 0.0, "avg_logprob": -0.11189273198445639, "compression_ratio": 1.6340425531914893, "no_speech_prob": 0.0061922743916511536}, {"id": 176, "seek": 101808, "start": 1039.1200000000001, "end": 1044.96, "text": " the advantage of specifying the format is that it serves as a standard ambiguous human readable", "tokens": [51416, 264, 5002, 295, 1608, 5489, 264, 7877, 307, 300, 309, 13451, 382, 257, 3832, 39465, 1952, 49857, 51708], "temperature": 0.0, "avg_logprob": -0.11189273198445639, "compression_ratio": 1.6340425531914893, "no_speech_prob": 0.0061922743916511536}, {"id": 177, "seek": 104496, "start": 1044.96, "end": 1052.08, "text": " representation of the object. This representation can be used for input and output, and in persistent", "tokens": [50364, 10290, 295, 264, 2657, 13, 639, 10290, 393, 312, 1143, 337, 4846, 293, 5598, 11, 293, 294, 24315, 50720], "temperature": 0.0, "avg_logprob": -0.058962115322250916, "compression_ratio": 1.6425531914893616, "no_speech_prob": 0.03621281683444977}, {"id": 178, "seek": 104496, "start": 1052.08, "end": 1058.08, "text": " human readable data objects, such as CSV files. If you specify the format, it's usually a good", "tokens": [50720, 1952, 49857, 1412, 6565, 11, 1270, 382, 48814, 7098, 13, 759, 291, 16500, 264, 7877, 11, 309, 311, 2673, 257, 665, 51020], "temperature": 0.0, "avg_logprob": -0.058962115322250916, "compression_ratio": 1.6425531914893616, "no_speech_prob": 0.03621281683444977}, {"id": 179, "seek": 104496, "start": 1058.08, "end": 1065.04, "text": " idea to provide a matching static factory or constructor. So programmers can easily translate", "tokens": [51020, 1558, 281, 2893, 257, 14324, 13437, 9265, 420, 47479, 13, 407, 41504, 393, 3612, 13799, 51368], "temperature": 0.0, "avg_logprob": -0.058962115322250916, "compression_ratio": 1.6425531914893616, "no_speech_prob": 0.03621281683444977}, {"id": 180, "seek": 104496, "start": 1065.04, "end": 1070.32, "text": " back and forth between the object and its string representation. So I forgot to show that part.", "tokens": [51368, 646, 293, 5220, 1296, 264, 2657, 293, 1080, 6798, 10290, 13, 407, 286, 5298, 281, 855, 300, 644, 13, 51632], "temperature": 0.0, "avg_logprob": -0.058962115322250916, "compression_ratio": 1.6425531914893616, "no_speech_prob": 0.03621281683444977}, {"id": 181, "seek": 107032, "start": 1070.8799999999999, "end": 1075.9199999999998, "text": " That's a two string method here where in this case, sorry, not the two string one that I kind", "tokens": [50392, 663, 311, 257, 732, 6798, 3170, 510, 689, 294, 341, 1389, 11, 2597, 11, 406, 264, 732, 6798, 472, 300, 286, 733, 50644], "temperature": 0.0, "avg_logprob": -0.13723458362226726, "compression_ratio": 1.8779527559055118, "no_speech_prob": 0.03731636330485344}, {"id": 182, "seek": 107032, "start": 1075.9199999999998, "end": 1080.56, "text": " of got confused there, the form string method where it's doing the opposite, it's instead of", "tokens": [50644, 295, 658, 9019, 456, 11, 264, 1254, 6798, 3170, 689, 309, 311, 884, 264, 6182, 11, 309, 311, 2602, 295, 50876], "temperature": 0.0, "avg_logprob": -0.13723458362226726, "compression_ratio": 1.8779527559055118, "no_speech_prob": 0.03731636330485344}, {"id": 183, "seek": 107032, "start": 1081.28, "end": 1086.3999999999999, "text": " converting the object to a string, it's taking a string and converting that to an object. So you", "tokens": [50912, 29942, 264, 2657, 281, 257, 6798, 11, 309, 311, 1940, 257, 6798, 293, 29942, 300, 281, 364, 2657, 13, 407, 291, 51168], "temperature": 0.0, "avg_logprob": -0.13723458362226726, "compression_ratio": 1.8779527559055118, "no_speech_prob": 0.03731636330485344}, {"id": 184, "seek": 107032, "start": 1086.3999999999999, "end": 1093.28, "text": " could give, for example, this phone number class a string of proper with the proper format, and", "tokens": [51168, 727, 976, 11, 337, 1365, 11, 341, 2593, 1230, 1508, 257, 6798, 295, 2296, 365, 264, 2296, 7877, 11, 293, 51512], "temperature": 0.0, "avg_logprob": -0.13723458362226726, "compression_ratio": 1.8779527559055118, "no_speech_prob": 0.03731636330485344}, {"id": 185, "seek": 107032, "start": 1093.28, "end": 1097.9199999999998, "text": " then that'll convert it to a phone number object. Now we can take a look at how that works. So if", "tokens": [51512, 550, 300, 603, 7620, 309, 281, 257, 2593, 1230, 2657, 13, 823, 321, 393, 747, 257, 574, 412, 577, 300, 1985, 13, 407, 498, 51744], "temperature": 0.0, "avg_logprob": -0.13723458362226726, "compression_ratio": 1.8779527559055118, "no_speech_prob": 0.03731636330485344}, {"id": 186, "seek": 109792, "start": 1097.92, "end": 1104.16, "text": " you look at this bit of code here where the client's using the from string method, this phone", "tokens": [50364, 291, 574, 412, 341, 857, 295, 3089, 510, 689, 264, 6423, 311, 1228, 264, 490, 6798, 3170, 11, 341, 2593, 50676], "temperature": 0.0, "avg_logprob": -0.11618157227834065, "compression_ratio": 1.8177570093457944, "no_speech_prob": 0.0014102313434705138}, {"id": 187, "seek": 109792, "start": 1104.16, "end": 1111.6000000000001, "text": " number string, which is printed here in line number 82, which you'll see is this, is passed to the", "tokens": [50676, 1230, 6798, 11, 597, 307, 13567, 510, 294, 1622, 1230, 29097, 11, 597, 291, 603, 536, 307, 341, 11, 307, 4678, 281, 264, 51048], "temperature": 0.0, "avg_logprob": -0.11618157227834065, "compression_ratio": 1.8177570093457944, "no_speech_prob": 0.0014102313434705138}, {"id": 188, "seek": 109792, "start": 1111.6000000000001, "end": 1117.28, "text": " from string method that takes a string, and then that converts that or passes it to a type of phone", "tokens": [51048, 490, 6798, 3170, 300, 2516, 257, 6798, 11, 293, 550, 300, 38874, 300, 420, 11335, 309, 281, 257, 2010, 295, 2593, 51332], "temperature": 0.0, "avg_logprob": -0.11618157227834065, "compression_ratio": 1.8177570093457944, "no_speech_prob": 0.0014102313434705138}, {"id": 189, "seek": 109792, "start": 1117.28, "end": 1123.52, "text": " number. Now, what's interesting here is if you do pass in something of a wrong format, like just", "tokens": [51332, 1230, 13, 823, 11, 437, 311, 1880, 510, 307, 498, 291, 360, 1320, 294, 746, 295, 257, 2085, 7877, 11, 411, 445, 51644], "temperature": 0.0, "avg_logprob": -0.11618157227834065, "compression_ratio": 1.8177570093457944, "no_speech_prob": 0.0014102313434705138}, {"id": 190, "seek": 112352, "start": 1123.52, "end": 1130.6399999999999, "text": " some mess like that, this is going to throw an error. There you go. It'll throw an invalid format,", "tokens": [50364, 512, 2082, 411, 300, 11, 341, 307, 516, 281, 3507, 364, 6713, 13, 821, 291, 352, 13, 467, 603, 3507, 364, 34702, 7877, 11, 50720], "temperature": 0.0, "avg_logprob": -0.11350230580752659, "compression_ratio": 1.7431192660550459, "no_speech_prob": 0.010985806584358215}, {"id": 191, "seek": 112352, "start": 1131.52, "end": 1137.12, "text": " invalid phone number error, or an illegal argument exception. That's good because we won't, if you", "tokens": [50764, 34702, 2593, 1230, 6713, 11, 420, 364, 11905, 6770, 11183, 13, 663, 311, 665, 570, 321, 1582, 380, 11, 498, 291, 51044], "temperature": 0.0, "avg_logprob": -0.11350230580752659, "compression_ratio": 1.7431192660550459, "no_speech_prob": 0.010985806584358215}, {"id": 192, "seek": 112352, "start": 1137.12, "end": 1141.84, "text": " want to convert this string to a phone number object, we want it to be of a certain type,", "tokens": [51044, 528, 281, 7620, 341, 6798, 281, 257, 2593, 1230, 2657, 11, 321, 528, 309, 281, 312, 295, 257, 1629, 2010, 11, 51280], "temperature": 0.0, "avg_logprob": -0.11350230580752659, "compression_ratio": 1.7431192660550459, "no_speech_prob": 0.010985806584358215}, {"id": 193, "seek": 112352, "start": 1141.84, "end": 1148.16, "text": " of a certain format, and that's what this from string method does. So the two string and the", "tokens": [51280, 295, 257, 1629, 7877, 11, 293, 300, 311, 437, 341, 490, 6798, 3170, 775, 13, 407, 264, 732, 6798, 293, 264, 51596], "temperature": 0.0, "avg_logprob": -0.11350230580752659, "compression_ratio": 1.7431192660550459, "no_speech_prob": 0.010985806584358215}, {"id": 194, "seek": 114816, "start": 1148.16, "end": 1154.3200000000002, "text": " from string kind of interpolates, not interpolate, sorry, interoperates. I was thinking of interpolates.", "tokens": [50364, 490, 6798, 733, 295, 44902, 1024, 11, 406, 44902, 473, 11, 2597, 11, 728, 7192, 1024, 13, 286, 390, 1953, 295, 44902, 1024, 13, 50672], "temperature": 0.0, "avg_logprob": -0.1228359836643025, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.04083835333585739}, {"id": 195, "seek": 114816, "start": 1155.1200000000001, "end": 1159.52, "text": " In any case, it seems self-evident that the disadvantage of specifying the format is that", "tokens": [50712, 682, 604, 1389, 11, 309, 2544, 2698, 12, 13379, 1078, 300, 264, 24292, 295, 1608, 5489, 264, 7877, 307, 300, 50932], "temperature": 0.0, "avg_logprob": -0.1228359836643025, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.04083835333585739}, {"id": 196, "seek": 114816, "start": 1159.52, "end": 1164.3200000000002, "text": " it makes the code static. Again, conceptually speaking, because now when you have a format,", "tokens": [50932, 309, 1669, 264, 3089, 13437, 13, 3764, 11, 3410, 671, 4124, 11, 570, 586, 562, 291, 362, 257, 7877, 11, 51172], "temperature": 0.0, "avg_logprob": -0.1228359836643025, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.04083835333585739}, {"id": 197, "seek": 114816, "start": 1164.3200000000002, "end": 1169.44, "text": " you can't make the from string method or the two string method that dynamic once you document it,", "tokens": [51172, 291, 393, 380, 652, 264, 490, 6798, 3170, 420, 264, 732, 6798, 3170, 300, 8546, 1564, 291, 4166, 309, 11, 51428], "temperature": 0.0, "avg_logprob": -0.1228359836643025, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.04083835333585739}, {"id": 198, "seek": 114816, "start": 1169.44, "end": 1175.6000000000001, "text": " and you say that this is how this object has to be represented, but that's a tradeoff a programmer", "tokens": [51428, 293, 291, 584, 300, 341, 307, 577, 341, 2657, 575, 281, 312, 10379, 11, 457, 300, 311, 257, 4923, 4506, 257, 32116, 51736], "temperature": 0.0, "avg_logprob": -0.1228359836643025, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.04083835333585739}, {"id": 199, "seek": 117560, "start": 1175.6, "end": 1181.6799999999998, "text": " has to make. As Joshua Block states, programmers will write code to pass the representation,", "tokens": [50364, 575, 281, 652, 13, 1018, 24005, 17500, 4368, 11, 41504, 486, 2464, 3089, 281, 1320, 264, 10290, 11, 50668], "temperature": 0.0, "avg_logprob": -0.09114139024601427, "compression_ratio": 1.7022222222222223, "no_speech_prob": 0.012623620219528675}, {"id": 200, "seek": 117560, "start": 1181.6799999999998, "end": 1188.08, "text": " to generate it, and to embed it into persistent data. If you change the representation in a future", "tokens": [50668, 281, 8460, 309, 11, 293, 281, 12240, 309, 666, 24315, 1412, 13, 759, 291, 1319, 264, 10290, 294, 257, 2027, 50988], "temperature": 0.0, "avg_logprob": -0.09114139024601427, "compression_ratio": 1.7022222222222223, "no_speech_prob": 0.012623620219528675}, {"id": 201, "seek": 117560, "start": 1188.08, "end": 1195.04, "text": " release, you break their code and data, and they will yell. By choosing not to specify a format,", "tokens": [50988, 4374, 11, 291, 1821, 641, 3089, 293, 1412, 11, 293, 436, 486, 20525, 13, 3146, 10875, 406, 281, 16500, 257, 7877, 11, 51336], "temperature": 0.0, "avg_logprob": -0.09114139024601427, "compression_ratio": 1.7022222222222223, "no_speech_prob": 0.012623620219528675}, {"id": 202, "seek": 117560, "start": 1195.04, "end": 1200.9599999999998, "text": " you preserve the flexibility to add information or improve the format in a subsequent release.", "tokens": [51336, 291, 15665, 264, 12635, 281, 909, 1589, 420, 3470, 264, 7877, 294, 257, 19962, 4374, 13, 51632], "temperature": 0.0, "avg_logprob": -0.09114139024601427, "compression_ratio": 1.7022222222222223, "no_speech_prob": 0.012623620219528675}, {"id": 203, "seek": 120096, "start": 1200.96, "end": 1205.44, "text": " Yell is a funny word, and in fact, a lot of programmers tend to do that. But one way to", "tokens": [50364, 835, 285, 307, 257, 4074, 1349, 11, 293, 294, 1186, 11, 257, 688, 295, 41504, 3928, 281, 360, 300, 13, 583, 472, 636, 281, 50588], "temperature": 0.0, "avg_logprob": -0.0984574070683232, "compression_ratio": 1.6937269372693726, "no_speech_prob": 0.06368645280599594}, {"id": 204, "seek": 120096, "start": 1205.44, "end": 1212.4, "text": " hopefully not make programmers yell as much is whether or not you decide to specify the format,", "tokens": [50588, 4696, 406, 652, 41504, 20525, 382, 709, 307, 1968, 420, 406, 291, 4536, 281, 16500, 264, 7877, 11, 50936], "temperature": 0.0, "avg_logprob": -0.0984574070683232, "compression_ratio": 1.6937269372693726, "no_speech_prob": 0.06368645280599594}, {"id": 205, "seek": 120096, "start": 1212.4, "end": 1217.6000000000001, "text": " you should clearly document your intention. So it's always important to overcommunicate", "tokens": [50936, 291, 820, 4448, 4166, 428, 7789, 13, 407, 309, 311, 1009, 1021, 281, 670, 25451, 8700, 51196], "temperature": 0.0, "avg_logprob": -0.0984574070683232, "compression_ratio": 1.6937269372693726, "no_speech_prob": 0.06368645280599594}, {"id": 206, "seek": 120096, "start": 1217.6000000000001, "end": 1221.28, "text": " why you're doing what you're doing in your two string method, which you'll see again in", "tokens": [51196, 983, 291, 434, 884, 437, 291, 434, 884, 294, 428, 732, 6798, 3170, 11, 597, 291, 603, 536, 797, 294, 51380], "temperature": 0.0, "avg_logprob": -0.0984574070683232, "compression_ratio": 1.6937269372693726, "no_speech_prob": 0.06368645280599594}, {"id": 207, "seek": 120096, "start": 1221.28, "end": 1226.88, "text": " the example Joshua Block has provided. He's clearly documented what this two string method does and", "tokens": [51380, 264, 1365, 24005, 17500, 575, 5649, 13, 634, 311, 4448, 23007, 437, 341, 732, 6798, 3170, 775, 293, 51660], "temperature": 0.0, "avg_logprob": -0.0984574070683232, "compression_ratio": 1.6937269372693726, "no_speech_prob": 0.06368645280599594}, {"id": 208, "seek": 122688, "start": 1226.96, "end": 1232.4, "text": " why he's doing so. I propose the format. Of course, another important point to make this", "tokens": [50368, 983, 415, 311, 884, 370, 13, 286, 17421, 264, 7877, 13, 2720, 1164, 11, 1071, 1021, 935, 281, 652, 341, 50640], "temperature": 0.0, "avg_logprob": -0.09733527688419118, "compression_ratio": 1.6919642857142858, "no_speech_prob": 0.006796608678996563}, {"id": 209, "seek": 122688, "start": 1232.4, "end": 1238.8000000000002, "text": " code reusable is provide programmatic access to the information contained in the value returned", "tokens": [50640, 3089, 41807, 307, 2893, 1461, 25915, 2105, 281, 264, 1589, 16212, 294, 264, 2158, 8752, 50960], "temperature": 0.0, "avg_logprob": -0.09733527688419118, "compression_ratio": 1.6919642857142858, "no_speech_prob": 0.006796608678996563}, {"id": 210, "seek": 122688, "start": 1238.8000000000002, "end": 1246.96, "text": " by two string. So what does that mean? It simply means having really good getters in your class", "tokens": [50960, 538, 732, 6798, 13, 407, 437, 775, 300, 914, 30, 467, 2935, 1355, 1419, 534, 665, 483, 1559, 294, 428, 1508, 51368], "temperature": 0.0, "avg_logprob": -0.09733527688419118, "compression_ratio": 1.6919642857142858, "no_speech_prob": 0.006796608678996563}, {"id": 211, "seek": 122688, "start": 1246.96, "end": 1252.16, "text": " so that the programmer won't have to pass through the string or the pass through the string return", "tokens": [51368, 370, 300, 264, 32116, 1582, 380, 362, 281, 1320, 807, 264, 6798, 420, 264, 1320, 807, 264, 6798, 2736, 51628], "temperature": 0.0, "avg_logprob": -0.09733527688419118, "compression_ratio": 1.6919642857142858, "no_speech_prob": 0.006796608678996563}, {"id": 212, "seek": 125216, "start": 1252.16, "end": 1259.2, "text": " from the two string method to use those values as clients. Having such code where you don't provide", "tokens": [50364, 490, 264, 732, 6798, 3170, 281, 764, 729, 4190, 382, 6982, 13, 10222, 1270, 3089, 689, 291, 500, 380, 2893, 50716], "temperature": 0.0, "avg_logprob": -0.07137542841385822, "compression_ratio": 1.6754716981132076, "no_speech_prob": 0.024416577070951462}, {"id": 213, "seek": 125216, "start": 1259.2, "end": 1262.96, "text": " good programmatic access to all the information or the fields in your class", "tokens": [50716, 665, 1461, 25915, 2105, 281, 439, 264, 1589, 420, 264, 7909, 294, 428, 1508, 50904], "temperature": 0.0, "avg_logprob": -0.07137542841385822, "compression_ratio": 1.6754716981132076, "no_speech_prob": 0.024416577070951462}, {"id": 214, "seek": 125216, "start": 1263.68, "end": 1267.68, "text": " will create error prone code. If you've been coding for a while, you'd know that", "tokens": [50940, 486, 1884, 6713, 25806, 3089, 13, 759, 291, 600, 668, 17720, 337, 257, 1339, 11, 291, 1116, 458, 300, 51140], "temperature": 0.0, "avg_logprob": -0.07137542841385822, "compression_ratio": 1.6754716981132076, "no_speech_prob": 0.024416577070951462}, {"id": 215, "seek": 125216, "start": 1267.68, "end": 1274.24, "text": " something that's absolutely painful is passing strings and trying to derive certain values from", "tokens": [51140, 746, 300, 311, 3122, 11697, 307, 8437, 13985, 293, 1382, 281, 28446, 1629, 4190, 490, 51468], "temperature": 0.0, "avg_logprob": -0.07137542841385822, "compression_ratio": 1.6754716981132076, "no_speech_prob": 0.024416577070951462}, {"id": 216, "seek": 125216, "start": 1274.24, "end": 1278.88, "text": " a string, especially given that it's highly dynamic and the code could change in the future", "tokens": [51468, 257, 6798, 11, 2318, 2212, 300, 309, 311, 5405, 8546, 293, 264, 3089, 727, 1319, 294, 264, 2027, 51700], "temperature": 0.0, "avg_logprob": -0.07137542841385822, "compression_ratio": 1.6754716981132076, "no_speech_prob": 0.024416577070951462}, {"id": 217, "seek": 127888, "start": 1278.88, "end": 1285.5200000000002, "text": " or the format could change too. Therefore, using code or writing code that passes strings", "tokens": [50364, 420, 264, 7877, 727, 1319, 886, 13, 7504, 11, 1228, 3089, 420, 3579, 3089, 300, 11335, 13985, 50696], "temperature": 0.0, "avg_logprob": -0.08306138460026231, "compression_ratio": 1.5854700854700854, "no_speech_prob": 0.008186244405806065}, {"id": 218, "seek": 127888, "start": 1286.16, "end": 1291.68, "text": " can create, as I said, highly volatile error prone code. So the simple way to solve that,", "tokens": [50728, 393, 1884, 11, 382, 286, 848, 11, 5405, 34377, 6713, 25806, 3089, 13, 407, 264, 2199, 636, 281, 5039, 300, 11, 51004], "temperature": 0.0, "avg_logprob": -0.08306138460026231, "compression_ratio": 1.5854700854700854, "no_speech_prob": 0.008186244405806065}, {"id": 219, "seek": 127888, "start": 1291.68, "end": 1297.2800000000002, "text": " of course, is as Joshua Block states provide programmatic access, all these values can be", "tokens": [51004, 295, 1164, 11, 307, 382, 24005, 17500, 4368, 2893, 1461, 25915, 2105, 11, 439, 613, 4190, 393, 312, 51284], "temperature": 0.0, "avg_logprob": -0.08306138460026231, "compression_ratio": 1.5854700854700854, "no_speech_prob": 0.008186244405806065}, {"id": 220, "seek": 127888, "start": 1297.2800000000002, "end": 1303.0400000000002, "text": " returned or are returned in the two string method. However, for the individual values, it's important", "tokens": [51284, 8752, 420, 366, 8752, 294, 264, 732, 6798, 3170, 13, 2908, 11, 337, 264, 2609, 4190, 11, 309, 311, 1021, 51572], "temperature": 0.0, "avg_logprob": -0.08306138460026231, "compression_ratio": 1.5854700854700854, "no_speech_prob": 0.008186244405806065}, {"id": 221, "seek": 130304, "start": 1303.04, "end": 1309.12, "text": " to have getters. And if you look over here, the client can then easily just use get error code,", "tokens": [50364, 281, 362, 483, 1559, 13, 400, 498, 291, 574, 670, 510, 11, 264, 6423, 393, 550, 3612, 445, 764, 483, 6713, 3089, 11, 50668], "temperature": 0.0, "avg_logprob": -0.10908902209738026, "compression_ratio": 1.637630662020906, "no_speech_prob": 0.012621328234672546}, {"id": 222, "seek": 130304, "start": 1309.12, "end": 1315.44, "text": " get prefix, get line number, instead of passing through this string here returned by the two", "tokens": [50668, 483, 46969, 11, 483, 1622, 1230, 11, 2602, 295, 8437, 807, 341, 6798, 510, 8752, 538, 264, 732, 50984], "temperature": 0.0, "avg_logprob": -0.10908902209738026, "compression_ratio": 1.637630662020906, "no_speech_prob": 0.012621328234672546}, {"id": 223, "seek": 130304, "start": 1315.44, "end": 1320.3999999999999, "text": " string method. And in fact, Joshua Block has put it the best way possible. By failing to provide", "tokens": [50984, 6798, 3170, 13, 400, 294, 1186, 11, 24005, 17500, 575, 829, 309, 264, 1151, 636, 1944, 13, 3146, 18223, 281, 2893, 51232], "temperature": 0.0, "avg_logprob": -0.10908902209738026, "compression_ratio": 1.637630662020906, "no_speech_prob": 0.012621328234672546}, {"id": 224, "seek": 130304, "start": 1320.3999999999999, "end": 1327.04, "text": " accesses, you turn the string format into a de facto API, even if you specified that it's", "tokens": [51232, 2105, 279, 11, 291, 1261, 264, 6798, 7877, 666, 257, 368, 42225, 9362, 11, 754, 498, 291, 22206, 300, 309, 311, 51564], "temperature": 0.0, "avg_logprob": -0.10908902209738026, "compression_ratio": 1.637630662020906, "no_speech_prob": 0.012621328234672546}, {"id": 225, "seek": 130304, "start": 1327.04, "end": 1332.32, "text": " subject to change. Because if the programmer has no way of getting these values with a getter,", "tokens": [51564, 3983, 281, 1319, 13, 1436, 498, 264, 32116, 575, 572, 636, 295, 1242, 613, 4190, 365, 257, 483, 391, 11, 51828], "temperature": 0.0, "avg_logprob": -0.10908902209738026, "compression_ratio": 1.637630662020906, "no_speech_prob": 0.012621328234672546}, {"id": 226, "seek": 133232, "start": 1332.32, "end": 1338.08, "text": " then he or she will have to resort to using the two string method, despite it being subject to", "tokens": [50364, 550, 415, 420, 750, 486, 362, 281, 19606, 281, 1228, 264, 732, 6798, 3170, 11, 7228, 309, 885, 3983, 281, 50652], "temperature": 0.0, "avg_logprob": -0.11045895682440864, "compression_ratio": 1.8521400778210118, "no_speech_prob": 0.0008034421480260789}, {"id": 227, "seek": 133232, "start": 1338.08, "end": 1342.8799999999999, "text": " change. Also, when writing two string methods, there are of course, like old programming,", "tokens": [50652, 1319, 13, 2743, 11, 562, 3579, 732, 6798, 7150, 11, 456, 366, 295, 1164, 11, 411, 1331, 9410, 11, 50892], "temperature": 0.0, "avg_logprob": -0.11045895682440864, "compression_ratio": 1.8521400778210118, "no_speech_prob": 0.0008034421480260789}, {"id": 228, "seek": 133232, "start": 1342.8799999999999, "end": 1348.6399999999999, "text": " and perhaps old life, certain exceptions, there's no requirement to write or override the two string", "tokens": [50892, 293, 4317, 1331, 993, 11, 1629, 22847, 11, 456, 311, 572, 11695, 281, 2464, 420, 42321, 264, 732, 6798, 51180], "temperature": 0.0, "avg_logprob": -0.11045895682440864, "compression_ratio": 1.8521400778210118, "no_speech_prob": 0.0008034421480260789}, {"id": 229, "seek": 133232, "start": 1348.6399999999999, "end": 1354.6399999999999, "text": " method of the object class in Java for static utility classes, because you simply wouldn't", "tokens": [51180, 3170, 295, 264, 2657, 1508, 294, 10745, 337, 13437, 14877, 5359, 11, 570, 291, 2935, 2759, 380, 51480], "temperature": 0.0, "avg_logprob": -0.11045895682440864, "compression_ratio": 1.8521400778210118, "no_speech_prob": 0.0008034421480260789}, {"id": 230, "seek": 133232, "start": 1354.6399999999999, "end": 1359.4399999999998, "text": " be using the two string method because you don't create objects with a static class for enum types,", "tokens": [51480, 312, 1228, 264, 732, 6798, 3170, 570, 291, 500, 380, 1884, 6565, 365, 257, 13437, 1508, 337, 465, 449, 3467, 11, 51720], "temperature": 0.0, "avg_logprob": -0.11045895682440864, "compression_ratio": 1.8521400778210118, "no_speech_prob": 0.0008034421480260789}, {"id": 231, "seek": 135944, "start": 1359.44, "end": 1364.72, "text": " because Java's one is perfect enough, it represents all the values in an enum,", "tokens": [50364, 570, 10745, 311, 472, 307, 2176, 1547, 11, 309, 8855, 439, 264, 4190, 294, 364, 465, 449, 11, 50628], "temperature": 0.0, "avg_logprob": -0.08515525558619823, "compression_ratio": 1.8040816326530613, "no_speech_prob": 0.0030269615817815065}, {"id": 232, "seek": 135944, "start": 1365.52, "end": 1371.44, "text": " perfectly as to how it's implemented in Java. But however, you should still write them for", "tokens": [50668, 6239, 382, 281, 577, 309, 311, 12270, 294, 10745, 13, 583, 4461, 11, 291, 820, 920, 2464, 552, 337, 50964], "temperature": 0.0, "avg_logprob": -0.08515525558619823, "compression_ratio": 1.8040816326530613, "no_speech_prob": 0.0030269615817815065}, {"id": 233, "seek": 135944, "start": 1371.44, "end": 1376.0800000000002, "text": " abstract classes, because simply put concrete classes are going to use abstract classes,", "tokens": [50964, 12649, 5359, 11, 570, 2935, 829, 9859, 5359, 366, 516, 281, 764, 12649, 5359, 11, 51196], "temperature": 0.0, "avg_logprob": -0.08515525558619823, "compression_ratio": 1.8040816326530613, "no_speech_prob": 0.0030269615817815065}, {"id": 234, "seek": 135944, "start": 1376.0800000000002, "end": 1380.64, "text": " and they may use the two string method in the abstract class. So if you look at this abstract", "tokens": [51196, 293, 436, 815, 764, 264, 732, 6798, 3170, 294, 264, 12649, 1508, 13, 407, 498, 291, 574, 412, 341, 12649, 51424], "temperature": 0.0, "avg_logprob": -0.08515525558619823, "compression_ratio": 1.8040816326530613, "no_speech_prob": 0.0030269615817815065}, {"id": 235, "seek": 135944, "start": 1380.64, "end": 1385.8400000000001, "text": " class called shape, I have overwritten the two string method. And then we have some other", "tokens": [51424, 1508, 1219, 3909, 11, 286, 362, 670, 26859, 264, 732, 6798, 3170, 13, 400, 550, 321, 362, 512, 661, 51684], "temperature": 0.0, "avg_logprob": -0.08515525558619823, "compression_ratio": 1.8040816326530613, "no_speech_prob": 0.0030269615817815065}, {"id": 236, "seek": 138584, "start": 1385.84, "end": 1392.32, "text": " concrete classes called class, a square, that are over that are extending the abstract class.", "tokens": [50364, 9859, 5359, 1219, 1508, 11, 257, 3732, 11, 300, 366, 670, 300, 366, 24360, 264, 12649, 1508, 13, 50688], "temperature": 0.0, "avg_logprob": -0.08934115291981215, "compression_ratio": 1.8480392156862746, "no_speech_prob": 0.0028443557675927877}, {"id": 237, "seek": 138584, "start": 1392.32, "end": 1399.84, "text": " And then if you run it, whoops, you'll see that it's using the two string method inherited from", "tokens": [50688, 400, 550, 498, 291, 1190, 309, 11, 567, 3370, 11, 291, 603, 536, 300, 309, 311, 1228, 264, 732, 6798, 3170, 27091, 490, 51064], "temperature": 0.0, "avg_logprob": -0.08934115291981215, "compression_ratio": 1.8480392156862746, "no_speech_prob": 0.0028443557675927877}, {"id": 238, "seek": 138584, "start": 1399.84, "end": 1407.4399999999998, "text": " the parent abstract class. And then it's printing out the area for the circle and square. So this", "tokens": [51064, 264, 2596, 12649, 1508, 13, 400, 550, 309, 311, 14699, 484, 264, 1859, 337, 264, 6329, 293, 3732, 13, 407, 341, 51444], "temperature": 0.0, "avg_logprob": -0.08934115291981215, "compression_ratio": 1.8480392156862746, "no_speech_prob": 0.0028443557675927877}, {"id": 239, "seek": 138584, "start": 1407.4399999999998, "end": 1411.76, "text": " is the reason that it's important still to write two string methods for abstract classes.", "tokens": [51444, 307, 264, 1778, 300, 309, 311, 1021, 920, 281, 2464, 732, 6798, 7150, 337, 12649, 5359, 13, 51660], "temperature": 0.0, "avg_logprob": -0.08934115291981215, "compression_ratio": 1.8480392156862746, "no_speech_prob": 0.0028443557675927877}, {"id": 240, "seek": 141176, "start": 1412.72, "end": 1418.32, "text": " As he said here, you should, however, write two string method in any abstract class,", "tokens": [50412, 1018, 415, 848, 510, 11, 291, 820, 11, 4461, 11, 2464, 732, 6798, 3170, 294, 604, 12649, 1508, 11, 50692], "temperature": 0.0, "avg_logprob": -0.1176434663625864, "compression_ratio": 1.7547169811320755, "no_speech_prob": 0.005640766117721796}, {"id": 241, "seek": 141176, "start": 1418.32, "end": 1426.0, "text": " whose subclasses share a common string representation. For example, the two string methods on most", "tokens": [50692, 6104, 1422, 11665, 279, 2073, 257, 2689, 6798, 10290, 13, 1171, 1365, 11, 264, 732, 6798, 7150, 322, 881, 51076], "temperature": 0.0, "avg_logprob": -0.1176434663625864, "compression_ratio": 1.7547169811320755, "no_speech_prob": 0.005640766117721796}, {"id": 242, "seek": 141176, "start": 1426.0, "end": 1430.96, "text": " collection implementations are inherited from the abstract collections class. That's correct.", "tokens": [51076, 5765, 4445, 763, 366, 27091, 490, 264, 12649, 16641, 1508, 13, 663, 311, 3006, 13, 51324], "temperature": 0.0, "avg_logprob": -0.1176434663625864, "compression_ratio": 1.7547169811320755, "no_speech_prob": 0.005640766117721796}, {"id": 243, "seek": 141176, "start": 1430.96, "end": 1434.8, "text": " And then of course, like the previous methods, he does state that it's probably a good idea", "tokens": [51324, 400, 550, 295, 1164, 11, 411, 264, 3894, 7150, 11, 415, 775, 1785, 300, 309, 311, 1391, 257, 665, 1558, 51516], "temperature": 0.0, "avg_logprob": -0.1176434663625864, "compression_ratio": 1.7547169811320755, "no_speech_prob": 0.005640766117721796}, {"id": 244, "seek": 141176, "start": 1434.8, "end": 1439.52, "text": " than writing this two string method on your own to use some kind of library of framework that's", "tokens": [51516, 813, 3579, 341, 732, 6798, 3170, 322, 428, 1065, 281, 764, 512, 733, 295, 6405, 295, 8388, 300, 311, 51752], "temperature": 0.0, "avg_logprob": -0.1176434663625864, "compression_ratio": 1.7547169811320755, "no_speech_prob": 0.005640766117721796}, {"id": 245, "seek": 143952, "start": 1439.52, "end": 1444.72, "text": " already available in the open source community. So for example, he says here, Google's open source", "tokens": [50364, 1217, 2435, 294, 264, 1269, 4009, 1768, 13, 407, 337, 1365, 11, 415, 1619, 510, 11, 3329, 311, 1269, 4009, 50624], "temperature": 0.0, "avg_logprob": -0.1335436397128635, "compression_ratio": 1.5643153526970954, "no_speech_prob": 0.020640386268496513}, {"id": 246, "seek": 143952, "start": 1444.72, "end": 1451.68, "text": " auto value facility is cast in item 10 will generate a two string method for you as will most", "tokens": [50624, 8399, 2158, 8973, 307, 4193, 294, 3174, 1266, 486, 8460, 257, 732, 6798, 3170, 337, 291, 382, 486, 881, 50972], "temperature": 0.0, "avg_logprob": -0.1335436397128635, "compression_ratio": 1.5643153526970954, "no_speech_prob": 0.020640386268496513}, {"id": 247, "seek": 143952, "start": 1451.68, "end": 1458.48, "text": " IDEs. These methods are great for telling you the contents of each field, but aren't specialized", "tokens": [50972, 7348, 20442, 13, 1981, 7150, 366, 869, 337, 3585, 291, 264, 15768, 295, 1184, 2519, 11, 457, 3212, 380, 19813, 51312], "temperature": 0.0, "avg_logprob": -0.1335436397128635, "compression_ratio": 1.5643153526970954, "no_speech_prob": 0.020640386268496513}, {"id": 248, "seek": 143952, "start": 1458.48, "end": 1465.04, "text": " to the meaning of the class. Interestingly, when I read that, I realized, oh, actually,", "tokens": [51312, 281, 264, 3620, 295, 264, 1508, 13, 30564, 11, 562, 286, 1401, 300, 11, 286, 5334, 11, 1954, 11, 767, 11, 51640], "temperature": 0.0, "avg_logprob": -0.1335436397128635, "compression_ratio": 1.5643153526970954, "no_speech_prob": 0.020640386268496513}, {"id": 249, "seek": 146504, "start": 1465.04, "end": 1470.72, "text": " maybe now you could just copy a code and put it in ChudgeGPT and it'll obviously create a", "tokens": [50364, 1310, 586, 291, 727, 445, 5055, 257, 3089, 293, 829, 309, 294, 761, 16032, 38, 47, 51, 293, 309, 603, 2745, 1884, 257, 50648], "temperature": 0.0, "avg_logprob": -0.18160331149061187, "compression_ratio": 1.6411149825783973, "no_speech_prob": 0.003883907338604331}, {"id": 250, "seek": 146504, "start": 1470.72, "end": 1474.8799999999999, "text": " meaningful two string method. It can do things that are way more advanced than that, something as", "tokens": [50648, 10995, 732, 6798, 3170, 13, 467, 393, 360, 721, 300, 366, 636, 544, 7339, 813, 300, 11, 746, 382, 50856], "temperature": 0.0, "avg_logprob": -0.18160331149061187, "compression_ratio": 1.6411149825783973, "no_speech_prob": 0.003883907338604331}, {"id": 251, "seek": 146504, "start": 1474.8799999999999, "end": 1480.24, "text": " simple as this. It'll easily do. So yeah, you essentially don't have to ever really have a lot", "tokens": [50856, 2199, 382, 341, 13, 467, 603, 3612, 360, 13, 407, 1338, 11, 291, 4476, 500, 380, 362, 281, 1562, 534, 362, 257, 688, 51124], "temperature": 0.0, "avg_logprob": -0.18160331149061187, "compression_ratio": 1.6411149825783973, "no_speech_prob": 0.003883907338604331}, {"id": 252, "seek": 146504, "start": 1480.24, "end": 1485.2, "text": " of, oh, spend a lot of time and mental energy writing two string methods anymore. You could", "tokens": [51124, 295, 11, 1954, 11, 3496, 257, 688, 295, 565, 293, 4973, 2281, 3579, 732, 6798, 7150, 3602, 13, 509, 727, 51372], "temperature": 0.0, "avg_logprob": -0.18160331149061187, "compression_ratio": 1.6411149825783973, "no_speech_prob": 0.003883907338604331}, {"id": 253, "seek": 146504, "start": 1485.2, "end": 1490.6399999999999, "text": " just use the tools available out there. Anyway, to finish it off, Joshua Block states, to recap,", "tokens": [51372, 445, 764, 264, 3873, 2435, 484, 456, 13, 5684, 11, 281, 2413, 309, 766, 11, 24005, 17500, 4368, 11, 281, 20928, 11, 51644], "temperature": 0.0, "avg_logprob": -0.18160331149061187, "compression_ratio": 1.6411149825783973, "no_speech_prob": 0.003883907338604331}, {"id": 254, "seek": 149064, "start": 1491.3600000000001, "end": 1496.3200000000002, "text": " overwrite objects to string implementation in every instantiable class you write,", "tokens": [50400, 670, 21561, 6565, 281, 6798, 11420, 294, 633, 9836, 9364, 1508, 291, 2464, 11, 50648], "temperature": 0.0, "avg_logprob": -0.12947665870963754, "compression_ratio": 1.568888888888889, "no_speech_prob": 0.020330090075731277}, {"id": 255, "seek": 149064, "start": 1496.88, "end": 1503.6000000000001, "text": " unless a superclass has already done so. It makes classes much more pleasant to use and aids in", "tokens": [50676, 5969, 257, 1687, 11665, 575, 1217, 1096, 370, 13, 467, 1669, 5359, 709, 544, 16232, 281, 764, 293, 28447, 294, 51012], "temperature": 0.0, "avg_logprob": -0.12947665870963754, "compression_ratio": 1.568888888888889, "no_speech_prob": 0.020330090075731277}, {"id": 256, "seek": 149064, "start": 1503.6000000000001, "end": 1511.0400000000002, "text": " debugging. The two string method should return a concise, useful description of the object", "tokens": [51012, 45592, 13, 440, 732, 6798, 3170, 820, 2736, 257, 44882, 11, 4420, 3855, 295, 264, 2657, 51384], "temperature": 0.0, "avg_logprob": -0.12947665870963754, "compression_ratio": 1.568888888888889, "no_speech_prob": 0.020330090075731277}, {"id": 257, "seek": 149064, "start": 1511.0400000000002, "end": 1516.24, "text": " in an aesthetically pleasing format. That's it. Quite a simple straightforward item.", "tokens": [51384, 294, 364, 27837, 984, 32798, 7877, 13, 663, 311, 309, 13, 20464, 257, 2199, 15325, 3174, 13, 51644], "temperature": 0.0, "avg_logprob": -0.12947665870963754, "compression_ratio": 1.568888888888889, "no_speech_prob": 0.020330090075731277}, {"id": 258, "seek": 151624, "start": 1516.24, "end": 1521.76, "text": " Nonetheless, I wanted to go through it because it does help in writing good Java and well,", "tokens": [50364, 45437, 11, 286, 1415, 281, 352, 807, 309, 570, 309, 775, 854, 294, 3579, 665, 10745, 293, 731, 11, 50640], "temperature": 0.0, "avg_logprob": -0.1895923279879386, "compression_ratio": 1.343558282208589, "no_speech_prob": 0.017168238759040833}, {"id": 259, "seek": 151624, "start": 1521.76, "end": 1526.0, "text": " obviously go into code. Thank you for watching. I hope you got some value from that video.", "tokens": [50640, 2745, 352, 666, 3089, 13, 1044, 291, 337, 1976, 13, 286, 1454, 291, 658, 512, 2158, 490, 300, 960, 13, 50852], "temperature": 0.0, "avg_logprob": -0.1895923279879386, "compression_ratio": 1.343558282208589, "no_speech_prob": 0.017168238759040833}, {"id": 260, "seek": 151624, "start": 1526.0, "end": 1528.32, "text": " I'll see you in the next one. Cheers.", "tokens": [50852, 286, 603, 536, 291, 294, 264, 958, 472, 13, 13006, 13, 50968], "temperature": 0.0, "avg_logprob": -0.1895923279879386, "compression_ratio": 1.343558282208589, "no_speech_prob": 0.017168238759040833}], "language": "en"}