{"text": " Hey everyone, welcome to yet another episode of this video series on Joshua Bloch's effective Java where I try and expound and make sense of the items that he has Animirated in this book and without further ado Let's get started with the introduction because I sort of anticipate that this item in particular It's gonna be a lone one because there are a lot of I'd say ancillary points that we need to discuss to make sense of the crux of this item and the argument that Joshua Bloch is putting forward So as per usual, I'm gonna go through the same introduction that I go through in every single Video in the series So if you've been following along, please do skip this bit to save your time the proviso goes like this Which I'm kind of sick of repeating but I feel like I kind of have to repeat it For let's say due diligence. So just to be ethical about this whole thing This is not a tutorial. I certainly am not a teacher. No, I'm an expert So, you know, take what I say with the grain of salt Don't think of this as any other tutorial on YouTube where what I say is in some sense Gospel's truth. I don't think every single tutorial on YouTube is like that But there are some tutorials where certainly, you know, they could quality they come from an expert in the field And you can trust what they're saying. Don't trust what I say. I'm pretty sure I'm gonna push a lot of things in this item and in some sense, hopefully try my best to do it as accurately as possible not spilling the bullshit, but Getting to the points in the item. There certainly are gonna be Unintentional mistakes that I make. I'd like to think of this as the blind leading the blind I am as blind as you are perhaps even more This is merely or not merely. This is a Exploratory disposition. I'm trying to make sense of this collectively You know using different forums like Stack Overflow whenever I come across something that I don't understand I'd post a question on Stack Overflow and I'd really appreciate it if You know, if I do make any mistakes, which I think I inevitably will Please point them out in the comment section down below Not just for my sake, but even for other people that are watching these videos. I really don't want to mislead people in any way and given that this is a Programming video series. It only makes sense to have all the code that I use on get up publicly available I'll leave a link down below not just to my get up account, but also just your blocks sort of official Public repository that is published and put put out all the code used in the book And saying all that let's get started on item number seven Which states eliminate obsolete object references? And this again is from chapter two creating and destroying objects So something I've been trying to do in these videos is before we even get to the content of the item to try and expand on and try to understand Basically what the words used in the title itself is itself are so object references what in the world are object references this diagram or this image pretty much puts it quite simply and Object reference is merely a pointer or not merely. It's probably good to conceptualize it as a pointer So we have objects in the heap memory. So the memory is subdivided into Different segments by the JVM. There's a heap. There's a stack and Generally leaving aside the stack of the heap what a object references is a a Memory address the pointer points to a memory address of a particular object in the heap and adding on to that in this image If we take something like an object array, let's say An array itself is a reference to a another object what I mean by that is an array can exist in the heap and There's a pointer or a memory address that points to that array, but the items in the array itself are Pointing to other objects within the heap. So in some sense, you can I guess think of it this way the way they've shown in this diagram where The array contains references itself and it could also contain it out. So if you're not out an array Which we're gonna see some nulling out in this item, then it's not gonna point to anything So in Java what happens when we use the new keyword is we reserve a location in memory When we instantiate a class the constructor of that class and all classes have a constructor Creates a reference to an object and the reference I said it's like a pointer But another way of thinking about it is that it's information regarding the location of the object in memory So what we see here is an example of that where they're creating this object array a primitive array and where instantiating it In this case with a primitive type. So just repeating the point items seven states again eliminate obsolete object references so Unlike a language like let's say C++ Java this automatic garbage collection. What is garbage collection? It's simply put memory management when we do allocate resources to a certain object We make sure that once that object is no longer in use we clear it out We we let that memory go to free out resources so that that resource can be something else and there are different Algorithms used in garbage collection. In fact, I'll leave some links down below on some videos by Gaurav Sen, I believe I think it's his son name, but I you know He does the system design videos on YouTube really good superlative content and he does do a bit of Explaining of how these algorithms work specifically Apple Pro JVM so Of course because Java this automatic garbage collection as I said unlike a language like C++ We could make the wrong assumption when I mean we I mean a programmer could make the wrong assumption That we don't have to think about memory management at all. And that's why in the beginning of this item Joshua Block states When it comes to garbage collection, it seems almost like magic when you first experience it and Therefore it can easily lead to the impression that you don't have to think about memory management But this isn't quite true. I had to take off my cardigan because it was getting really hot in this room Summer's coming in Melbourne. Yay So he keeps going consider the following simple stack implementation I've got the stack implementation right here However, before we get to the code and do a deep dive I cut out again. We want to backtrack a bit and discuss some of the terms. So We discussed what Object references are and then I want to discuss What's a obsolete reference an obsolete reference is a reference that will not be De-referenced again. It's unintentionally retaining an object now this term here De-referencing or dereferenced again, this can be quite confusing because dereference does not mean that you Get rid of the reference not at all. What? dereferencing in fact means is when we do refer to an object In our code somewhere down the line once we do create the reference we may refer to it again We may get the value that the reference is pointing to that process is called De-referencing and if we don't de-reference an object, there's no use of keeping an object in memory So we are unintentionally just leaving an object there allocating resources making Application inefficient that that shouldn't be done. So the solution is quite simple. In fact, it's simply to now references once they become obsolete and we sometimes have to do this explicitly on our code despite Java doing memory management or garbage collection So to have a bit of a more formal and clear definition by my favorite Java programming website by all done De-referencing means the action of accessing an object's features through a reference And one way to prevent obsolete object references is by narrow scoping and what's narrow scoping? That's something what you would see in a for loop in a for loop. We have the int you declared int i for instance That variable is within the scope of that for loop. So narrow scoping. That's an example another example would be trying not to declare global variables in a class rather declare variables within a function within a method and keep it localized to that specific method and That helps with eliminating obsolete object references because we sort of know what the scope of a variable is in our code base and then in the item He keeps going and this is the code base for the stack class And then he asks can you spot the memory leak saying that before we get to the item and try and visualize What the memory leak is? Let's take a look at the code base and the code base of this Stack implementation a really simple stack implementation that just your block has used here as an example to Illustrate his point. So I'm pretty much going to go through this code line by line despite it being a bit long Because I think that's the best way to understand this. We have a Simple class called stack. We have a object array of elements and another Private of the object array is also private but also another private Variable called size of primitive type integer of int. Sorry and then this constant here is what initially defines the Initial stack capacity So when the stack class is instantiated, of course the constructors called And in the client over here I am instantiating the class line number 57 so When the constructor is called a new Object array is initialized. So this array we defined here elements that this this new object is passed to that variable and when the New object array is initialized. It's default capacity. Yes. I've made a mistake here. It's not 26 at 16 And that's assigned to the variable elements. So this variable in line number 10 will hold a I'm pointing to the code as if you can see where I'm pointing at. That's so funny Anyway, this object array will hold a reference or elements will hold a reference to this new object That was created and that's in the heap and then we have a method called push and what that does is as you'd expect from a stack you can push new elements on new objects onto the Stack or in this case the elements array, but but in that method we have another method that we call call ensure capacity ensure capacity just ensures that There's space for at least one more element roughly and if not, it'll just double the capacity each time the Areas to grow because we want the stack to be dynamic you can see here it's creating a copy of elements and passing it to elements and The more we keep adding on to the stack the more the area grows so doubles in size Let's say now we get to the point this pop method is what's pertinent to our item and where we see Memory leak take place. So we have this Object method. Sorry, we have this pop method And we don't here in this method garbage collection doesn't take place and that's why we need to be aware of that So firstly if the size is equal to zero, which is going to throw an empty stack exception And we can't add something to an empty stack and here we see that when we pop the object of the Array or when we return the object that's in the array Where we reduce the size with this counter. So this was the variable we declared here in line number 11 and when we reduce that. Oh, sorry. I didn't I didn't say that in fact in the push Method whenever we push a new item onto the array. We also increase the count on that variable And when we pop it we reduce it kind of makes sense. Well, what happens here though is Whenever we pop an object from the stack or when we take an object out from this array An object is still unintentionally retained here despite the client of this class having no use of those objects and That's where the memory leak takes place and the proper way to do this and again this bit of code here line number 20 to 33 I will illustrate that in this diagram more visually. It'll make a lot more sense. Whoops. That was a mistake Getting back to this But this is not the right way to do it because what's happening here is a memory leak The proper way to do it would be like this I'm gonna comment out the wrong way It would still be where we are checking if the Stack is empty the stack can't be empty and then we are in fact Assigning this value onto a new Variable we're gonna create called result. So whatever the elements array returns after we reduce the size We're gonna assign that value to result and then simply we null out that location on the array and that's where the elimination of The obsolete reference takes place and we return the result afterwards So we assign it to result and return the result will be ensure that that Element on the in the array that index That we return that it's not out because when it's not out what happens is something like what we see here It's clear that it's not obsolete that it's not pointing at something and taking up memory resources And really if you run this code there really isn't a use in running the code But this is kind of what you'd see. I can just print out the Array or the stack in this case This you can ignore this empty stack exception. The reason for that is because we are pretty much pushing Everything into the stack and then popping everything off the stack and then you would at one point as we go through it expect this Exception to be thrown here, which is wait, I just missed it Right here because what happens is we keep popping the stack at one point the stack gets empty So this is kind of expected this error here So now before I read out what Joshua book has explained here, let's take a look at this diagram and visualize it So here we have that elements array that I spoke about before so that's the array Right here, but the object array that we define. That's what I've illustrated or represented here And we let's say the objects Of our integers and we're adding One two three four five six, I don't know why I put a zero in front Let's just think of it as one two three four five six And then this is being added by the push method here But then for some reason we also pop some of it and we pop three items from the Array now what happens here is if you don't null out the references the way we've done here These things are still gonna exist in the array. However for the purpose of the stack class The client will never use these elements these these objects. They'll just exist in memory making them obsolete and more importantly Making it a memory leak because it's taking up Resources that could be used for something else and that's the problem here If you don't know that out So the right way to do it is to treat this array in this way where the way we've done it in the proper pop method every time we return Whatever is in the index of this array We also ensure that it's not out in that way that reference is eliminated. Sorry the obviously reference is eliminated I hope that makes sense. I'm repeating the same point, but you know repetition is important to Make sense of this and on the note of repeating. I'm going to read out what Joshua Bloch has said about this particular class in the book He goes like this There's nothing obviously wrong with this program You could test it exhaustively and it would pass every test with flying colors But there's a problem lurking. Ooh Indeed indeed loosely speaking the program has a memory leak Which can silently manifest as reduced performance due to the increased garbage collectivity or increased memory footprint Footprint what kind of process would um, yeah, so That's that the increased memory footprint is what I explained here That these three, uh, let's say for this example these three indexes create taking up space in the heap He keeps going if a stack grows and then shrinks The objects that were popped off the stack will not be garbage collected Even if the program using the stack has no more references to them So that is what we saw in the other method the When it's wrong The way it shouldn't be done. There's nothing out here This is because the stack maintains obsolete references to these objects An obsolete reference is simply a reference that will never be dereferenced again So never be used by the program again In this case any references outside of the active potion of the element array are obsolete It's important to understand what he means by the active potion the active potion really is the The potion of the array that the client would care about or use the client of this class So in this example, the active portion really is index zero one and two Not this but here, which is why they should be not out the active portion consists of the elements whose index is less than size Yes, so this size here Is what holds the size of the stack and then he sort of concludes that point by stating memory leaks in garbage collected languages like java more properly known as unintentional object retentions iron citys If an object reference is unintentionally retained Not only is that object excluded from garbage collection But so too are any objects Reference by that object and so on it's an interesting point there because I've had a conversation with a c++ engineer or developer In my company and he kind of made the point, you know, that's kind of the trade-off we make in programming the more we sort of Give control to the virtual machine in this case the jvm the less we know what's going on kind of Um behind the scenes under the hood Uh, the the more abstractions on abstractions we build the less of an understanding we have as to what's going on in our program Uh, which is why for instance when it comes to using packages Uh, sometimes it can be dangerous and to use Joshua block's term insidious Because we don't have a really good power or deep understanding of what's happening. Let's say at a memory management level so as a good programmer, it's I guess it's it's It's important to be kind of prudent and careful about that and and be judicious as to how we write our code Anyway, before I get carried away, uh, philosophizing about programming Let's get back to the point here, uh, and the item he states then the fix for this sort of problem is simple Null out references once they become obsolete. That's what I've shown here. I already showed the solution In the code itself an added benefit of nulling out obsolete references is that if they are Subsequently dereference by mistake the program will immediately fail with the null point exception Rather than quietly doing the wrong thing It is always beneficial to detect programming errors as quickly as possible Now, I don't know how in this class someone could dereference parts of this array that Theoretically should not be accessed in the stack class, but it's possible if that area was public. Let's say by mistake and theoretic it would be a theoretical mistake if after the size of the Stack changes, let's say the size of the stack was three and we only had zero One two and three And we still get access to the client to uh four and five that would be a mistake But when we now that out The error is explicit and clear because the program will throw a null point exception But interestingly then he also makes the provision that nulling out object references should be the exception Rather than the norm so Technically this thing what you've done here Shouldn't always be done. There are better ways to handle this or eliminate obsolete references than just nulling out elements in this area. Let's say in this example The best way to eliminate an obsolete reference is to let the variable That contain the reference fall out of scope This occurs naturally if you define each variable in the narrowest possible scope and this is kind of what I meant by uh Narrow scoping is one way that allows Eliminating obsolete of references and I did explain what narrow scoping is it's ensuring that when we define a variable and we declare a variable It's in the Narrowest possible scope in our source code But if he says nulling out shouldn't be the norm why in this example is given in the stack class Why are we nulling out uh these references? Why not use narrow scoping as he suggested which he says should be the norm To put it simply he says it's because the stack class manages its own memory. We see that here We see that as to what's what's what's going on here Where we're managing the memory I propose this array here The storage pool consists of the elements of of the elements array That's a bit a bit confusing. I know but the elements inside this array. So each uh Individual element which he's added here are the object references not the objects themselves. So these are references themselves And then the elements in the active portion of the array as defined earlier are allocated And those in the remainder of the array are free So that's the active portion. That's allocated and these are made free The garbage collector has no way of knowing this to the garbage collector All of the object references in the element elements array are equally valid correct because the garbage collector doesn't know What the purpose of this stack class is the garbage collector isn't that intelligent Hopefully in the future it would be only the programmer or get up co-pilot perhaps Knows that the inactive portion of the array is unimportant The programmer effectively communicates this fact to the garbage collector by manually Nulling out array elements as soon as they become part of the inactive portion. That's correct. That's what we've done here And then just to conclude that point joshua block states Generally speaking Whenever a class manages its own memory the programmer should be alert for memory leaks So what are the examples can we think of when it comes to memory leaks? apropos java and jvm Another example that he's given here is memory leaks that we would see and sorry. I shouldn't say apropos java and jvm This is just commonly in programming in let's say op programming in general These examples he's laid out or laid down could lead to potential memory leaks And the first one is given is in caches. It's quite common to see memory leaks in caches because of course what happens a lot in a cache is we Cache data and when we do cache data we cache objects There's a high possibility if we don't do it in a smart port art way that it can it can lead to Obsolete object references because once an object reference is put in a cache It can be left there long after it stops being relevant Toss being obsolete and the solution for this problem of memory leaks and caches that Joshua blocker suggests it is using weak hash maps And when I said in the beginning of the item that there are some ancillary points some concepts We need to understand to really get to the crux of this item This is what I meant. I've never used a weak hash map in my life Therefore I had to do a bit of reading and styling as to what weak hash maps are So just a block states before I get to what a weak hash map is and before I go through the code Which I've got here. I've got a weak hash map demo Joshua block states if you're lucky enough to implement a cache for which an entry is relevant Exactly so long as there are references to its key key outside of the cache Represent the cache as a weak hash map Entries will be removed automatically after they become obsolete So conceptually that sort of makes sense, doesn't it because the reason we have a cache is to for quick access of data of objects and The key in a cache we we got to make sure that whatever data that's in the cache that the keys are relevant outside of The data structure in the cache in this case. It could be a hash map So that ensures that we don't have obsolete object references and he keeps going that remember that Weak hash map is useful Only if the desired lifetime of cache entries is determined by external references to the key not the valley Okay, now let's understand what a weak hash map is Firstly before we get to the code, let's get through some definitions. It's important to get a firstly a theoretical understanding a conceptual understanding of what this is Uh, and one of the best definitions as for you sure that I found is by about dunks blog It's this blog now that's on profile is it's this blog post here a guide to weak hash map in java And he states Simply put the weak hash map is a hash table based implementation of the map interface with keys that are of a Weak reference type and now we have another term here. What are weak references for that will open up The best explanation that I found is this stackover flow answer Uh, and in fact, this user says that it's by ether necklace But the name of this user is michael myers And a weak reference simply put is a reference that isn't strong enough to force an object to remain in memory weak references allow you to leverage the garbage collectors ability to determine the reach ability for you So you don't have to do it yourself But also in this article by bio dung. He's given some pretty good definitions where he Decerns between strong soft and weak references. So a strong reference is what would normally be when we Declare a variable like this. Let's say that's a strong reference And this is the most common type and it's not eligible for garbage collection A soft reference is eligible for garbage collection, but only when Uh, the jvm needs more memory. It absolutely needs more memory. And in fact, he's made that point here It's it's kind of like a last resort kind of thing But a weak reference is not that a weak reference doesn't the garbage collector is given volition Where it can so eagerly garbage collect it won't wait until it needs more memory. It'll just Use it up if required and that's where Using a weak reference in the context of a cache helps us to eliminate obsolete object references So in any case, that's another definition of a weak reference. There's also this article That I read which is quite good. I think it gave a pretty good practical and sort of applicative explanation of what Well, the title of the article is practical uses of weak references by this user philosophical geek or I guess Ben Watson I'll leave a link to this down below too where he goes through Well, he starts off the article by saying that You rarely use weak references, but if you do use them It'll mostly be for framework building or when it comes to something at more of the memory management level and Java programmers at least day-to-day Java programmers like myself Don't don't really do a lot of memory management But this is a good article to read just for learning. So back to the weak hash map definition, which uses weak reference type, by the way file then continues An entry in a weak hash map will automatically be removed When its key is no longer in ordinary use meaning that there is no single reference that point to that key When the garbage so what this bit means here is In the the key value pairs and in the hash map If the key isn't being used anywhere outside of the data structure outside of the cache That means that there's no single reference. Therefore, it just could be removed automatically and and having a weak reference helps When the garbage collection process discards a key its entry is effectively removed from the map So this class behaves somewhat differently from other map implementations because normal map implementations would have a strong reference and you can't just Let the garbage collector just do garbage collection as it wishes eagerly It's a bit more tighter and a bit more stricter I just realized that I didn't go through this Canonicalized a mapping bit that is in fact from the oracle docs that defines what weak references are So the doc state weak reference objects which do not prevent Their reference from being made finalized finalizable finalized and they're reclaimed weak references are most awfully used to implement Canonicalizing mappings. What does that mean? So this is another really good blog post. I read On weak references, sorry I had to find the blog post here And the title of the blog post is itself canonicalized mappings. I'll leave all into that down below I'm not going to go through the whole thing. But the definition is But oh the it's by uh, uh, Tom Tom Roy's own Rosanne and Ian Lowe A canonicalized mapping is where you keep one instance of the object in question in memory And all other lookup that particular instance via pointers Or some such mechanism The short answer is that weak reference objects can be used to create Pointers to objects in your system while still allowing those objects to be reclaimed by the garbage collector once they pass out of scope That kind of makes sense. I mean, I Hmm It makes sense in the sense of I can see why theoretically a weak reference type Can be used in a weak hash map to prevent Memory leaks in a cache. I can I can see the reason I'm going to be honest. I don't think I can sell fully Understand how to implement that in code But at least conceptually I can see the connection there. So now let's take a look at what a weak hash map is So I created this class called the weak hash map demo. I kind of repurposed this example That was used on vile dunks blog And firstly, uh, this part really isn't a part of the weak hash. I just want to show how to create a weak reference That's how you do it. It's a generic type. You pass it of integer And then you create the weak reference easy as that and then when we Made this prime reference null Initially, we declared let me make it null This object will be garbage collected in the next gc cycle Um, as there is no other strong reference pointing to it So when we create the weak reference as you can see here, we are passing that object Into the constructor of the weak reference class and now this new object is a of type weak reference But that's just how I create weak references. Now, let's get to the the cracks of this class. I this is terrible coding I should have put this somewhere else because this in no way is related to this class But in any case, it's just for demonstration purposes Here's how we create a weak hash map. Um, so It's just like creating a normal hash map really. Um, you have to define the key and the value the types of the key and the value and ideally we want a map implementation that allows garbage collection to automatically delete unused objects correct and Because we ideally want that is is the reason that we use a weak hash map When a key of a big image object is not in use and application in any place. So that's Uh, the key for this object here the unique image name in this case would be the key This entry will automatically be deleted from memory. It's pretty cool. In fact, how this happened and I'll show you This and show this to you in code. So we have the weak reference map. Just ignore the other line of code I've used here. It's just a normal hash map. I've used I was just playing around with this But what matters really is the the map I've created here in line number 25 So for all intents and purposes this hash map could be our cache And we are putting a new big image object into that cache into our hash map We're also creating key and putting that key too and we're creating the key value pair here And the image name of course is the object reference, which is the key Uh, so if I run this code now what you'll see is Um So what's this log here map this contain does not contain an image name. Um, so That is terribly misleading I just realized that that log can be extremely confusing because The map is supposed to contain image name because they're putting it in line number 31 And we aren't nulling out any key here So I I'm gonna run that again because that can be really confusing and kind of ruin the purpose of this demo The map should contain Image name It should contain the key because we haven't nulled it out and I think nothing has happened and of course The map will also contain a big big image the big image object Also, that's confusing I should have prepared for this demo much better I gotta get rid of that line because I'm adding it twice into the hash map. I don't know why I'm doing that Anyway, in any case, I hope I'm trying I'm making sense Yeah, I profusely apologize because this is not a good demo Hey, but uh, as the software engineers, we all know that whenever there's a demo things break. So perhaps it is Ironically a good demo because this is what a demo would actually look like. Uh, so Initially, yes, it does contain the key and it also does contain the value And then what happens is We null out the key. That's all we're doing. We're not clearing anything out And then we just run a garbage collection cycle. We force a jvm to write a gc cycle and then almost magically The bloody hash map is empty And how is that this wouldn't happen if it was a normal hash map with a strong reference The way the hash map is empty in so this is the log here that you see Uh is in fact because this hash map is a weak hash map using weak reference type so when the external Reference to this key was nulled out The object itself or the key value pair Was garbage collected because it's it's it's it's not not used. So that's the perfect implementation of a cache that'll prevent memory leaks and then for this problem of memory leaks and caches and another solution that he's proposed is sort of using a least recently used cache eviction policy, uh But the implementation of it is a bit more different to kind of the conceptual understanding of what that policy is And that can be done using a scheduled thread pool executor And it could be what what this does is in the background on a separate thread You can run tasks scheduled tasks repeatedly such as cache cleansing Uh, and to understand what this is what a scheduled thread pool executor does I came across this article on geeks for geeks by a user called Samu foe and that's the user's uh pseudonym and Here's the implementation of that class. I think it's important to understand what this is doing Even though this isn't fully related to clearing caches the way it'll work is like this So I anyway, but by the way all this code is On the github repository. So please go take a look And this kind of demonstrates how the schedule thread pool executor works Initially we create a object called thread pool We create an instance of the schedule thread pool executor and we pass The the size so how many threads it's two threads in this case And then we create two runable tasks. So these tasks could be anything it could even be something like the main Let's say the main thread that's running the program and then in the background clearing the cache in a given time um, and afterwards The first one will execute in two seconds and the second one in five seconds That's it's simple as that so if if I run this method you'll see The The first one executed in two seconds and the other one executed a bit later and then That a bit later. Sorry That's the current time. I apologize. So that was in the execution. So that was the first task And that was the second task So I shouldn't have said every cache every cache of both tasks because this could be in fact, uh, something else. It could be um, I don't know some some some main task and then the second one Which we scheduled to run in five seconds could be the cache eviction So that's the implementation of of that idea of Cache eviction policy using a scheduled critical executor and to be you know, pretty more formally and clearly Joshua block states most commonly the useful lifetime of cache entry is less well defined With entries becoming less valuable over time Under these circumstances the cache should occasionally be cleansed of entries that have fallen into disuse. So that's where scheduling a task like this using uh, these scheduled Terrapulexecuda could come in handy because We could time it because schedule a cache eviction in a given period of time And then he even states that the linked hash map does this so if you take a look at the docs for the linked hash map there's a protected Boolean method called remove eldest entry and that method what that does is in fact It's an implementation of what Joshua block is described here. It is is clearing the uh, linkless Sorry the link hash map By clearing out the old entries So it says it provides the implement of this class with the opportunity to remove the eldest entry each time a new one is added And then we get to the third way memory leaks could happen So we've discussed, uh, how it could happen if classes Manages their own memory if we discussed how it could happen in caches and the third way is uh, the third common way is it could happen when it comes to, uh listeners and other callbacks when we When a client uses an api With a callback function. So firstly, what's a callback? Um, so Rich, uh Rich of jindal from geeks4geeks states that a callback function is a function that is passed Into another function as an argument and is expected to execute after some kind of event I would also add it's also an example of so the how callbacks are implemented is an example of the observer pattern Where an object should subscribe to another object and listens To changes in events on runtime And that's what a callback is. It's a it's a function. It can pass to be executed you know Contingent on on on an event during runtime Uh, even though I've used callbacks obviously javascript uses well we use promises But then a lot of javascript uses before promises use callbacks And even in java we use callbacks, uh, but I didn't initially get the understanding Oh, I didn't initially understand How it can Work apropos weak references and how the garbage collection works when it comes to callbacks So I did post a cycle of low question and I got a really good answer By this user called, uh Ingo kegel I'll leave a link to this question down below in the description. Go take a look But you think that uses the answer. Let's try and make sense of what Uh Well, in fact before I say that I just want to say, uh, just a block states apropos this point If you implement when I mean apropos this point, that's uh When it comes to memory leaks with listeners and other callbacks, he says he states If you implement an api where clients register callbacks, but don't do register them explicitly They will accumulate unless you take some action So what does that mean? What what's the action we got to take the action? We got to take would be using a weak reference. Um, and what before we get to the code. I I realized I should I should read out Ingo kegel's answer here He says a client of the api has to keep a strong reference to the listener That's how it says without correct. So the we can define the listener here as an interface That's how we would normally do when implementing callbacks in java The api only holds a weak reference to the listener to do that So that it does not prevent that's a Type of that I believe so that it does not prevent the client from being garbage collected So it allows Garbage collection to take place if required when the kind is garbage collected the listener is also garbage collected That's that's a good thing because we want we don't want the Obsolute object the listener object to exist in memory and take up resources and that's why a weak reference would help Now the implementation of that would be seen here. So this is the example's courtesy of ingo kegel as I said This is his code that I've repurposed uh to don't want to write this um So firstly, uh since java doesn't support function pointers, this represents a callback effectively It's a reference to the function which will be called So because we don't use function pointers, we can use callbacks in java Function pointers can be used in c++. I believe I don't quote me on that because I'm not a c++ programmer C++ programmer. Why am I talking so fast and fumbling my words too much of coffee? So this callback demo represents the mock api that a user would use Initially, we have defined the listener here. So this listener is of the type the interface listener Um, and then we've got to initially register this listener. That's what the client would do. So the client of this api Uh would do that a bit later because the observer of this api has to use that method And register itself. This is a bit confusing I should have maybe called it used to separate class and called the client But this callbacks demo class is the client of this api Just keep in keep in mind. Um, so that client would have a strong reference however once the registering is done the api itself Will maintain a weak reference because then what happens is when this client at one point is garbage collected So would the listener That it registers and then we have this file listener method Which checks for the listener which which checks if it's registered and then fires an event which we've defined Yeah, which runs some tasks. So that's kind of how it's used in the context of callbacks and listeners And and that's why using a weak reference would help With ensuring that there aren't any memory leaks when a client uses our api And then to conclude in the final paragraph Joshua Block states Biggest memory leaks typically do not manifest themselves As obvious failures. They may remain present in a system for years They typically discovered only as a result of careful code inspection Or with the aid of a debugging tool known as a heat profiler heat profiler can also be called like a java profiler And that's a tool pretty much that monitors the bytecode Constructs and operations at the jvm level at a very low level using a heat profiler. You could Monitor your code and examine memory usage How garbage collection takes place if resources are being used waste used wastefully If there are memory leaks all these things we discussed could be found through a tool like a Java profiler or heat profiler And again all done is definition here these these code constructs and opera operations include object creation iterative executions Including recursive calls method executions threat executions and garbage collections So it's kind of like a way of instrumenting your application and instrumenting your code. Let's say and really Digging deep into it and examining it at a bytecode level And that's obviously something that you know, I've never done it before in my life Just on your id you can't do that. You need a specific tool for that Therefore to end it he states it is very desirable to learn to anticipate problems like this before They occur and prevent them from happening. So that's why this point is great because Initially just your block points out what the issue is he he kind of Illustrates it, but then he also gives us three areas where this could potentially occur We could kind of anticipate where memory leaks could occur when writing code and the three places it could occur When it comes to having obsolete object references that we should eliminate is in classes that just to reiterate the point in classes that manage its own memory In caches and when it comes to callbacks and listeners When you implement that in your api That's it. That is The item number seven element obsolete object references As I did anticipate it did go for over an hour because I did feel even though the item isn't all that long or all that complicated have a few points like implementation of the listeners and the callbacks and then the Weak references that I felt like we need to dive in a bit more and understand at least I needed to to make sense of it As I said all the code that I used are in On the github repository and the link to that is in the description down below Please go to click at the code. It'll make a lot more sense if you study the code assiduously instead of me kind of explaining it Again, I'm trying my best to to you know articulate myself while I'm also learning as I go It's kind of how it works. You probably can see I'm struggling a lot with some of these concepts But in any case, I sincerely do hope this video brought some value. You learn something from it I shall see you in the next item. It is item number eight. We're still in chapter two And item number eight is avoid finalizers and cleaners And I'll get to that as soon as possible. In fact, I've already started writing the code for it. I'll see you in the next one. Cheers You", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 6.16, "text": " Hey everyone, welcome to yet another episode of this video series on Joshua Bloch's effective Java", "tokens": [50364, 1911, 1518, 11, 2928, 281, 1939, 1071, 3500, 295, 341, 960, 2638, 322, 24005, 9865, 339, 311, 4942, 10745, 50672], "temperature": 0.0, "avg_logprob": -0.22564914770293654, "compression_ratio": 1.7216117216117217, "no_speech_prob": 0.0922413170337677}, {"id": 1, "seek": 0, "start": 6.32, "end": 10.44, "text": " where I try and expound and make sense of the items that he has", "tokens": [50680, 689, 286, 853, 293, 1278, 554, 293, 652, 2020, 295, 264, 4754, 300, 415, 575, 50886], "temperature": 0.0, "avg_logprob": -0.22564914770293654, "compression_ratio": 1.7216117216117217, "no_speech_prob": 0.0922413170337677}, {"id": 2, "seek": 0, "start": 11.16, "end": 13.4, "text": " Animirated in this book and without further ado", "tokens": [50922, 21691, 347, 770, 294, 341, 1446, 293, 1553, 3052, 22450, 51034], "temperature": 0.0, "avg_logprob": -0.22564914770293654, "compression_ratio": 1.7216117216117217, "no_speech_prob": 0.0922413170337677}, {"id": 3, "seek": 0, "start": 13.4, "end": 18.52, "text": " Let's get started with the introduction because I sort of anticipate that this item in particular", "tokens": [51034, 961, 311, 483, 1409, 365, 264, 9339, 570, 286, 1333, 295, 21685, 300, 341, 3174, 294, 1729, 51290], "temperature": 0.0, "avg_logprob": -0.22564914770293654, "compression_ratio": 1.7216117216117217, "no_speech_prob": 0.0922413170337677}, {"id": 4, "seek": 0, "start": 18.52, "end": 24.96, "text": " It's gonna be a lone one because there are a lot of I'd say ancillary points that we need to discuss to", "tokens": [51290, 467, 311, 799, 312, 257, 35314, 472, 570, 456, 366, 257, 688, 295, 286, 1116, 584, 364, 7383, 822, 2793, 300, 321, 643, 281, 2248, 281, 51612], "temperature": 0.0, "avg_logprob": -0.22564914770293654, "compression_ratio": 1.7216117216117217, "no_speech_prob": 0.0922413170337677}, {"id": 5, "seek": 0, "start": 25.240000000000002, "end": 29.12, "text": " make sense of the crux of this item and the argument that", "tokens": [51626, 652, 2020, 295, 264, 5140, 87, 295, 341, 3174, 293, 264, 6770, 300, 51820], "temperature": 0.0, "avg_logprob": -0.22564914770293654, "compression_ratio": 1.7216117216117217, "no_speech_prob": 0.0922413170337677}, {"id": 6, "seek": 2912, "start": 29.8, "end": 31.8, "text": " Joshua Bloch is putting forward", "tokens": [50398, 24005, 9865, 339, 307, 3372, 2128, 50498], "temperature": 0.0, "avg_logprob": -0.20166413924273321, "compression_ratio": 1.5866141732283465, "no_speech_prob": 0.004608535673469305}, {"id": 7, "seek": 2912, "start": 32.2, "end": 38.14, "text": " So as per usual, I'm gonna go through the same introduction that I go through in every single", "tokens": [50518, 407, 382, 680, 7713, 11, 286, 478, 799, 352, 807, 264, 912, 9339, 300, 286, 352, 807, 294, 633, 2167, 50815], "temperature": 0.0, "avg_logprob": -0.20166413924273321, "compression_ratio": 1.5866141732283465, "no_speech_prob": 0.004608535673469305}, {"id": 8, "seek": 2912, "start": 38.760000000000005, "end": 40.480000000000004, "text": " Video in the series", "tokens": [50846, 9777, 294, 264, 2638, 50932], "temperature": 0.0, "avg_logprob": -0.20166413924273321, "compression_ratio": 1.5866141732283465, "no_speech_prob": 0.004608535673469305}, {"id": 9, "seek": 2912, "start": 40.480000000000004, "end": 46.16, "text": " So if you've been following along, please do skip this bit to save your time the proviso goes like this", "tokens": [50932, 407, 498, 291, 600, 668, 3480, 2051, 11, 1767, 360, 10023, 341, 857, 281, 3155, 428, 565, 264, 1439, 19227, 1709, 411, 341, 51216], "temperature": 0.0, "avg_logprob": -0.20166413924273321, "compression_ratio": 1.5866141732283465, "no_speech_prob": 0.004608535673469305}, {"id": 10, "seek": 2912, "start": 46.760000000000005, "end": 50.72, "text": " Which I'm kind of sick of repeating but I feel like I kind of have to repeat it", "tokens": [51246, 3013, 286, 478, 733, 295, 4998, 295, 18617, 457, 286, 841, 411, 286, 733, 295, 362, 281, 7149, 309, 51444], "temperature": 0.0, "avg_logprob": -0.20166413924273321, "compression_ratio": 1.5866141732283465, "no_speech_prob": 0.004608535673469305}, {"id": 11, "seek": 2912, "start": 51.16, "end": 55.28, "text": " For let's say due diligence. So just to be ethical about this whole thing", "tokens": [51466, 1171, 718, 311, 584, 3462, 40046, 13, 407, 445, 281, 312, 18890, 466, 341, 1379, 551, 51672], "temperature": 0.0, "avg_logprob": -0.20166413924273321, "compression_ratio": 1.5866141732283465, "no_speech_prob": 0.004608535673469305}, {"id": 12, "seek": 5528, "start": 56.04, "end": 60.800000000000004, "text": " This is not a tutorial. I certainly am not a teacher. No, I'm an expert", "tokens": [50402, 639, 307, 406, 257, 7073, 13, 286, 3297, 669, 406, 257, 5027, 13, 883, 11, 286, 478, 364, 5844, 50640], "temperature": 0.0, "avg_logprob": -0.22963688420314415, "compression_ratio": 1.7699115044247788, "no_speech_prob": 0.036207593977451324}, {"id": 13, "seek": 5528, "start": 61.2, "end": 65.56, "text": " So, you know, take what I say with the grain of salt", "tokens": [50660, 407, 11, 291, 458, 11, 747, 437, 286, 584, 365, 264, 12837, 295, 5139, 50878], "temperature": 0.0, "avg_logprob": -0.22963688420314415, "compression_ratio": 1.7699115044247788, "no_speech_prob": 0.036207593977451324}, {"id": 14, "seek": 5528, "start": 65.88, "end": 71.64, "text": " Don't think of this as any other tutorial on YouTube where what I say is in some sense", "tokens": [50894, 1468, 380, 519, 295, 341, 382, 604, 661, 7073, 322, 3088, 689, 437, 286, 584, 307, 294, 512, 2020, 51182], "temperature": 0.0, "avg_logprob": -0.22963688420314415, "compression_ratio": 1.7699115044247788, "no_speech_prob": 0.036207593977451324}, {"id": 15, "seek": 5528, "start": 72.0, "end": 75.6, "text": " Gospel's truth. I don't think every single tutorial on YouTube is like that", "tokens": [51200, 23163, 311, 3494, 13, 286, 500, 380, 519, 633, 2167, 7073, 322, 3088, 307, 411, 300, 51380], "temperature": 0.0, "avg_logprob": -0.22963688420314415, "compression_ratio": 1.7699115044247788, "no_speech_prob": 0.036207593977451324}, {"id": 16, "seek": 5528, "start": 75.6, "end": 80.96000000000001, "text": " But there are some tutorials where certainly, you know, they could quality they come from an expert in the field", "tokens": [51380, 583, 456, 366, 512, 17616, 689, 3297, 11, 291, 458, 11, 436, 727, 3125, 436, 808, 490, 364, 5844, 294, 264, 2519, 51648], "temperature": 0.0, "avg_logprob": -0.22963688420314415, "compression_ratio": 1.7699115044247788, "no_speech_prob": 0.036207593977451324}, {"id": 17, "seek": 8096, "start": 80.96, "end": 88.72, "text": " And you can trust what they're saying. Don't trust what I say. I'm pretty sure I'm gonna push a lot of things in this item and", "tokens": [50364, 400, 291, 393, 3361, 437, 436, 434, 1566, 13, 1468, 380, 3361, 437, 286, 584, 13, 286, 478, 1238, 988, 286, 478, 799, 2944, 257, 688, 295, 721, 294, 341, 3174, 293, 50752], "temperature": 0.0, "avg_logprob": -0.24034252682247678, "compression_ratio": 1.6563706563706564, "no_speech_prob": 0.12586742639541626}, {"id": 18, "seek": 8096, "start": 89.36, "end": 96.69999999999999, "text": " in some sense, hopefully try my best to do it as accurately as possible not spilling the bullshit, but", "tokens": [50784, 294, 512, 2020, 11, 4696, 853, 452, 1151, 281, 360, 309, 382, 20095, 382, 1944, 406, 637, 7345, 264, 22676, 11, 457, 51151], "temperature": 0.0, "avg_logprob": -0.24034252682247678, "compression_ratio": 1.6563706563706564, "no_speech_prob": 0.12586742639541626}, {"id": 19, "seek": 8096, "start": 98.24, "end": 100.44, "text": " Getting to the points in the item. There certainly are gonna be", "tokens": [51228, 13674, 281, 264, 2793, 294, 264, 3174, 13, 821, 3297, 366, 799, 312, 51338], "temperature": 0.0, "avg_logprob": -0.24034252682247678, "compression_ratio": 1.6563706563706564, "no_speech_prob": 0.12586742639541626}, {"id": 20, "seek": 8096, "start": 101.0, "end": 105.39999999999999, "text": " Unintentional mistakes that I make. I'd like to think of this as the blind leading the blind", "tokens": [51366, 1156, 686, 1251, 304, 8038, 300, 286, 652, 13, 286, 1116, 411, 281, 519, 295, 341, 382, 264, 6865, 5775, 264, 6865, 51586], "temperature": 0.0, "avg_logprob": -0.24034252682247678, "compression_ratio": 1.6563706563706564, "no_speech_prob": 0.12586742639541626}, {"id": 21, "seek": 8096, "start": 105.39999999999999, "end": 108.19999999999999, "text": " I am as blind as you are perhaps even more", "tokens": [51586, 286, 669, 382, 6865, 382, 291, 366, 4317, 754, 544, 51726], "temperature": 0.0, "avg_logprob": -0.24034252682247678, "compression_ratio": 1.6563706563706564, "no_speech_prob": 0.12586742639541626}, {"id": 22, "seek": 10820, "start": 108.68, "end": 111.60000000000001, "text": " This is merely or not merely. This is a", "tokens": [50388, 639, 307, 17003, 420, 406, 17003, 13, 639, 307, 257, 50534], "temperature": 0.0, "avg_logprob": -0.2504656435263277, "compression_ratio": 1.5984555984555984, "no_speech_prob": 0.06006317213177681}, {"id": 23, "seek": 10820, "start": 112.4, "end": 115.96000000000001, "text": " Exploratory disposition. I'm trying to make sense of this collectively", "tokens": [50574, 12514, 284, 4745, 40293, 13, 286, 478, 1382, 281, 652, 2020, 295, 341, 24341, 50752], "temperature": 0.0, "avg_logprob": -0.2504656435263277, "compression_ratio": 1.5984555984555984, "no_speech_prob": 0.06006317213177681}, {"id": 24, "seek": 10820, "start": 116.8, "end": 122.52000000000001, "text": " You know using different forums like Stack Overflow whenever I come across something that I don't understand", "tokens": [50794, 509, 458, 1228, 819, 26998, 411, 37649, 4886, 10565, 5699, 286, 808, 2108, 746, 300, 286, 500, 380, 1223, 51080], "temperature": 0.0, "avg_logprob": -0.2504656435263277, "compression_ratio": 1.5984555984555984, "no_speech_prob": 0.06006317213177681}, {"id": 25, "seek": 10820, "start": 122.52000000000001, "end": 126.24000000000001, "text": " I'd post a question on Stack Overflow and I'd really appreciate it if", "tokens": [51080, 286, 1116, 2183, 257, 1168, 322, 37649, 4886, 10565, 293, 286, 1116, 534, 4449, 309, 498, 51266], "temperature": 0.0, "avg_logprob": -0.2504656435263277, "compression_ratio": 1.5984555984555984, "no_speech_prob": 0.06006317213177681}, {"id": 26, "seek": 10820, "start": 126.96000000000001, "end": 131.28, "text": " You know, if I do make any mistakes, which I think I inevitably will", "tokens": [51302, 509, 458, 11, 498, 286, 360, 652, 604, 8038, 11, 597, 286, 519, 286, 28171, 486, 51518], "temperature": 0.0, "avg_logprob": -0.2504656435263277, "compression_ratio": 1.5984555984555984, "no_speech_prob": 0.06006317213177681}, {"id": 27, "seek": 10820, "start": 131.68, "end": 133.8, "text": " Please point them out in the comment section down below", "tokens": [51538, 2555, 935, 552, 484, 294, 264, 2871, 3541, 760, 2507, 51644], "temperature": 0.0, "avg_logprob": -0.2504656435263277, "compression_ratio": 1.5984555984555984, "no_speech_prob": 0.06006317213177681}, {"id": 28, "seek": 13380, "start": 134.20000000000002, "end": 140.68, "text": " Not just for my sake, but even for other people that are watching these videos. I really don't want to mislead people in any way", "tokens": [50384, 1726, 445, 337, 452, 9717, 11, 457, 754, 337, 661, 561, 300, 366, 1976, 613, 2145, 13, 286, 534, 500, 380, 528, 281, 3346, 306, 345, 561, 294, 604, 636, 50708], "temperature": 0.0, "avg_logprob": -0.19952343582013332, "compression_ratio": 1.6729323308270676, "no_speech_prob": 0.20422624051570892}, {"id": 29, "seek": 13380, "start": 141.32000000000002, "end": 143.32000000000002, "text": " and given that this is a", "tokens": [50740, 293, 2212, 300, 341, 307, 257, 50840], "temperature": 0.0, "avg_logprob": -0.19952343582013332, "compression_ratio": 1.6729323308270676, "no_speech_prob": 0.20422624051570892}, {"id": 30, "seek": 13380, "start": 144.56, "end": 150.32000000000002, "text": " Programming video series. It only makes sense to have all the code that I use on get up publicly available", "tokens": [50902, 8338, 2810, 960, 2638, 13, 467, 787, 1669, 2020, 281, 362, 439, 264, 3089, 300, 286, 764, 322, 483, 493, 14843, 2435, 51190], "temperature": 0.0, "avg_logprob": -0.19952343582013332, "compression_ratio": 1.6729323308270676, "no_speech_prob": 0.20422624051570892}, {"id": 31, "seek": 13380, "start": 150.32000000000002, "end": 155.76000000000002, "text": " I'll leave a link down below not just to my get up account, but also just your blocks sort of official", "tokens": [51190, 286, 603, 1856, 257, 2113, 760, 2507, 406, 445, 281, 452, 483, 493, 2696, 11, 457, 611, 445, 428, 8474, 1333, 295, 4783, 51462], "temperature": 0.0, "avg_logprob": -0.19952343582013332, "compression_ratio": 1.6729323308270676, "no_speech_prob": 0.20422624051570892}, {"id": 32, "seek": 13380, "start": 157.08, "end": 161.12, "text": " Public repository that is published and put put out all the code used in the book", "tokens": [51528, 9489, 25841, 300, 307, 6572, 293, 829, 829, 484, 439, 264, 3089, 1143, 294, 264, 1446, 51730], "temperature": 0.0, "avg_logprob": -0.19952343582013332, "compression_ratio": 1.6729323308270676, "no_speech_prob": 0.20422624051570892}, {"id": 33, "seek": 16112, "start": 161.6, "end": 166.64000000000001, "text": " And saying all that let's get started on item number seven", "tokens": [50388, 400, 1566, 439, 300, 718, 311, 483, 1409, 322, 3174, 1230, 3407, 50640], "temperature": 0.0, "avg_logprob": -0.2741551234804351, "compression_ratio": 1.6271186440677967, "no_speech_prob": 0.006001644767820835}, {"id": 34, "seek": 16112, "start": 167.24, "end": 171.56, "text": " Which states eliminate obsolete object references?", "tokens": [50670, 3013, 4368, 13819, 46333, 2657, 15400, 30, 50886], "temperature": 0.0, "avg_logprob": -0.2741551234804351, "compression_ratio": 1.6271186440677967, "no_speech_prob": 0.006001644767820835}, {"id": 35, "seek": 16112, "start": 171.56, "end": 176.04, "text": " And this again is from chapter two creating and destroying objects", "tokens": [50886, 400, 341, 797, 307, 490, 7187, 732, 4084, 293, 19926, 6565, 51110], "temperature": 0.0, "avg_logprob": -0.2741551234804351, "compression_ratio": 1.6271186440677967, "no_speech_prob": 0.006001644767820835}, {"id": 36, "seek": 16112, "start": 176.20000000000002, "end": 182.68, "text": " So something I've been trying to do in these videos is before we even get to the content of the item to try and", "tokens": [51118, 407, 746, 286, 600, 668, 1382, 281, 360, 294, 613, 2145, 307, 949, 321, 754, 483, 281, 264, 2701, 295, 264, 3174, 281, 853, 293, 51442], "temperature": 0.0, "avg_logprob": -0.2741551234804351, "compression_ratio": 1.6271186440677967, "no_speech_prob": 0.006001644767820835}, {"id": 37, "seek": 16112, "start": 183.08, "end": 185.08, "text": " expand on and try to understand", "tokens": [51462, 5268, 322, 293, 853, 281, 1223, 51562], "temperature": 0.0, "avg_logprob": -0.2741551234804351, "compression_ratio": 1.6271186440677967, "no_speech_prob": 0.006001644767820835}, {"id": 38, "seek": 16112, "start": 185.8, "end": 190.4, "text": " Basically what the words used in the title itself is itself are", "tokens": [51598, 8537, 437, 264, 2283, 1143, 294, 264, 4876, 2564, 307, 2564, 366, 51828], "temperature": 0.0, "avg_logprob": -0.2741551234804351, "compression_ratio": 1.6271186440677967, "no_speech_prob": 0.006001644767820835}, {"id": 39, "seek": 19040, "start": 191.08, "end": 192.4, "text": " so", "tokens": [50398, 370, 50464], "temperature": 0.0, "avg_logprob": -0.2726844946543376, "compression_ratio": 1.6574585635359116, "no_speech_prob": 0.0015718337381258607}, {"id": 40, "seek": 19040, "start": 192.4, "end": 198.44, "text": " object references what in the world are object references this diagram or this", "tokens": [50464, 2657, 15400, 437, 294, 264, 1002, 366, 2657, 15400, 341, 10686, 420, 341, 50766], "temperature": 0.0, "avg_logprob": -0.2726844946543376, "compression_ratio": 1.6574585635359116, "no_speech_prob": 0.0015718337381258607}, {"id": 41, "seek": 19040, "start": 198.84, "end": 202.6, "text": " image pretty much puts it quite simply and", "tokens": [50786, 3256, 1238, 709, 8137, 309, 1596, 2935, 293, 50974], "temperature": 0.0, "avg_logprob": -0.2726844946543376, "compression_ratio": 1.6574585635359116, "no_speech_prob": 0.0015718337381258607}, {"id": 42, "seek": 19040, "start": 203.4, "end": 210.8, "text": " Object reference is merely a pointer or not merely. It's probably good to conceptualize it as a pointer", "tokens": [51014, 24753, 6408, 307, 17003, 257, 23918, 420, 406, 17003, 13, 467, 311, 1391, 665, 281, 24106, 1125, 309, 382, 257, 23918, 51384], "temperature": 0.0, "avg_logprob": -0.2726844946543376, "compression_ratio": 1.6574585635359116, "no_speech_prob": 0.0015718337381258607}, {"id": 43, "seek": 19040, "start": 210.8, "end": 216.88, "text": " So we have objects in the heap memory. So the memory is subdivided into", "tokens": [51384, 407, 321, 362, 6565, 294, 264, 33591, 4675, 13, 407, 264, 4675, 307, 31662, 1843, 292, 666, 51688], "temperature": 0.0, "avg_logprob": -0.2726844946543376, "compression_ratio": 1.6574585635359116, "no_speech_prob": 0.0015718337381258607}, {"id": 44, "seek": 21688, "start": 217.79999999999998, "end": 222.32, "text": " Different segments by the JVM. There's a heap. There's a stack", "tokens": [50410, 20825, 19904, 538, 264, 508, 53, 44, 13, 821, 311, 257, 33591, 13, 821, 311, 257, 8630, 50636], "temperature": 0.0, "avg_logprob": -0.2186380611952915, "compression_ratio": 1.7031963470319635, "no_speech_prob": 0.004069103859364986}, {"id": 45, "seek": 21688, "start": 223.48, "end": 224.68, "text": " and", "tokens": [50694, 293, 50754], "temperature": 0.0, "avg_logprob": -0.2186380611952915, "compression_ratio": 1.7031963470319635, "no_speech_prob": 0.004069103859364986}, {"id": 46, "seek": 21688, "start": 224.68, "end": 230.24, "text": " Generally leaving aside the stack of the heap what a object references is a a", "tokens": [50754, 21082, 5012, 7359, 264, 8630, 295, 264, 33591, 437, 257, 2657, 15400, 307, 257, 257, 51032], "temperature": 0.0, "avg_logprob": -0.2186380611952915, "compression_ratio": 1.7031963470319635, "no_speech_prob": 0.004069103859364986}, {"id": 47, "seek": 21688, "start": 230.84, "end": 237.68, "text": " Memory address the pointer points to a memory address of a particular object in the heap and adding on to that in this image", "tokens": [51062, 38203, 2985, 264, 23918, 2793, 281, 257, 4675, 2985, 295, 257, 1729, 2657, 294, 264, 33591, 293, 5127, 322, 281, 300, 294, 341, 3256, 51404], "temperature": 0.0, "avg_logprob": -0.2186380611952915, "compression_ratio": 1.7031963470319635, "no_speech_prob": 0.004069103859364986}, {"id": 48, "seek": 21688, "start": 237.68, "end": 239.68, "text": " If we take something like an object array, let's say", "tokens": [51404, 759, 321, 747, 746, 411, 364, 2657, 10225, 11, 718, 311, 584, 51504], "temperature": 0.0, "avg_logprob": -0.2186380611952915, "compression_ratio": 1.7031963470319635, "no_speech_prob": 0.004069103859364986}, {"id": 49, "seek": 21688, "start": 240.2, "end": 245.07999999999998, "text": " An array itself is a reference to a another object", "tokens": [51530, 1107, 10225, 2564, 307, 257, 6408, 281, 257, 1071, 2657, 51774], "temperature": 0.0, "avg_logprob": -0.2186380611952915, "compression_ratio": 1.7031963470319635, "no_speech_prob": 0.004069103859364986}, {"id": 50, "seek": 24508, "start": 245.20000000000002, "end": 247.20000000000002, "text": " what I mean by that is an", "tokens": [50370, 437, 286, 914, 538, 300, 307, 364, 50470], "temperature": 0.0, "avg_logprob": -0.24761872244353342, "compression_ratio": 1.7521739130434784, "no_speech_prob": 0.002082295948639512}, {"id": 51, "seek": 24508, "start": 247.44000000000003, "end": 249.64000000000001, "text": " array can exist in the heap and", "tokens": [50482, 10225, 393, 2514, 294, 264, 33591, 293, 50592], "temperature": 0.0, "avg_logprob": -0.24761872244353342, "compression_ratio": 1.7521739130434784, "no_speech_prob": 0.002082295948639512}, {"id": 52, "seek": 24508, "start": 250.44000000000003, "end": 256.48, "text": " There's a pointer or a memory address that points to that array, but the items in the array itself are", "tokens": [50632, 821, 311, 257, 23918, 420, 257, 4675, 2985, 300, 2793, 281, 300, 10225, 11, 457, 264, 4754, 294, 264, 10225, 2564, 366, 50934], "temperature": 0.0, "avg_logprob": -0.24761872244353342, "compression_ratio": 1.7521739130434784, "no_speech_prob": 0.002082295948639512}, {"id": 53, "seek": 24508, "start": 257.24, "end": 265.32, "text": " Pointing to other objects within the heap. So in some sense, you can I guess think of it this way the way they've shown in this diagram where", "tokens": [50972, 12387, 278, 281, 661, 6565, 1951, 264, 33591, 13, 407, 294, 512, 2020, 11, 291, 393, 286, 2041, 519, 295, 309, 341, 636, 264, 636, 436, 600, 4898, 294, 341, 10686, 689, 51376], "temperature": 0.0, "avg_logprob": -0.24761872244353342, "compression_ratio": 1.7521739130434784, "no_speech_prob": 0.002082295948639512}, {"id": 54, "seek": 24508, "start": 266.12, "end": 271.68, "text": " The array contains references itself and it could also contain it out. So if you're not out an array", "tokens": [51416, 440, 10225, 8306, 15400, 2564, 293, 309, 727, 611, 5304, 309, 484, 13, 407, 498, 291, 434, 406, 484, 364, 10225, 51694], "temperature": 0.0, "avg_logprob": -0.24761872244353342, "compression_ratio": 1.7521739130434784, "no_speech_prob": 0.002082295948639512}, {"id": 55, "seek": 27168, "start": 272.28000000000003, "end": 277.40000000000003, "text": " Which we're gonna see some nulling out in this item, then it's not gonna point to anything", "tokens": [50394, 3013, 321, 434, 799, 536, 512, 18184, 278, 484, 294, 341, 3174, 11, 550, 309, 311, 406, 799, 935, 281, 1340, 50650], "temperature": 0.0, "avg_logprob": -0.20260188091232115, "compression_ratio": 1.6415094339622642, "no_speech_prob": 0.0037063653580844402}, {"id": 56, "seek": 27168, "start": 277.68, "end": 282.72, "text": " So in Java what happens when we use the new keyword is we reserve a location in memory", "tokens": [50664, 407, 294, 10745, 437, 2314, 562, 321, 764, 264, 777, 20428, 307, 321, 17824, 257, 4914, 294, 4675, 50916], "temperature": 0.0, "avg_logprob": -0.20260188091232115, "compression_ratio": 1.6415094339622642, "no_speech_prob": 0.0037063653580844402}, {"id": 57, "seek": 27168, "start": 284.12, "end": 289.84000000000003, "text": " When we instantiate a class the constructor of that class and all classes have a constructor", "tokens": [50986, 1133, 321, 9836, 13024, 257, 1508, 264, 47479, 295, 300, 1508, 293, 439, 5359, 362, 257, 47479, 51272], "temperature": 0.0, "avg_logprob": -0.20260188091232115, "compression_ratio": 1.6415094339622642, "no_speech_prob": 0.0037063653580844402}, {"id": 58, "seek": 27168, "start": 291.52, "end": 296.16, "text": " Creates a reference to an object and the reference I said it's like a pointer", "tokens": [51356, 11972, 279, 257, 6408, 281, 364, 2657, 293, 264, 6408, 286, 848, 309, 311, 411, 257, 23918, 51588], "temperature": 0.0, "avg_logprob": -0.20260188091232115, "compression_ratio": 1.6415094339622642, "no_speech_prob": 0.0037063653580844402}, {"id": 59, "seek": 29616, "start": 296.16, "end": 301.84000000000003, "text": " But another way of thinking about it is that it's information regarding the location of the object in memory", "tokens": [50364, 583, 1071, 636, 295, 1953, 466, 309, 307, 300, 309, 311, 1589, 8595, 264, 4914, 295, 264, 2657, 294, 4675, 50648], "temperature": 0.0, "avg_logprob": -0.28727821971094886, "compression_ratio": 1.6898148148148149, "no_speech_prob": 0.0016742099542170763}, {"id": 60, "seek": 29616, "start": 301.88000000000005, "end": 306.76000000000005, "text": " So what we see here is an example of that where they're creating this", "tokens": [50650, 407, 437, 321, 536, 510, 307, 364, 1365, 295, 300, 689, 436, 434, 4084, 341, 50894], "temperature": 0.0, "avg_logprob": -0.28727821971094886, "compression_ratio": 1.6898148148148149, "no_speech_prob": 0.0016742099542170763}, {"id": 61, "seek": 29616, "start": 307.44, "end": 309.6, "text": " object array a primitive array and", "tokens": [50928, 2657, 10225, 257, 28540, 10225, 293, 51036], "temperature": 0.0, "avg_logprob": -0.28727821971094886, "compression_ratio": 1.6898148148148149, "no_speech_prob": 0.0016742099542170763}, {"id": 62, "seek": 29616, "start": 310.16, "end": 311.76000000000005, "text": " where", "tokens": [51064, 689, 51144], "temperature": 0.0, "avg_logprob": -0.28727821971094886, "compression_ratio": 1.6898148148148149, "no_speech_prob": 0.0016742099542170763}, {"id": 63, "seek": 29616, "start": 311.76000000000005, "end": 312.96000000000004, "text": " instantiating it", "tokens": [51144, 9836, 72, 990, 309, 51204], "temperature": 0.0, "avg_logprob": -0.28727821971094886, "compression_ratio": 1.6898148148148149, "no_speech_prob": 0.0016742099542170763}, {"id": 64, "seek": 29616, "start": 312.96000000000004, "end": 317.76000000000005, "text": " In this case with a primitive type. So just repeating the point items seven states again", "tokens": [51204, 682, 341, 1389, 365, 257, 28540, 2010, 13, 407, 445, 18617, 264, 935, 4754, 3407, 4368, 797, 51444], "temperature": 0.0, "avg_logprob": -0.28727821971094886, "compression_ratio": 1.6898148148148149, "no_speech_prob": 0.0016742099542170763}, {"id": 65, "seek": 29616, "start": 318.16, "end": 320.72, "text": " eliminate obsolete object references", "tokens": [51464, 13819, 46333, 2657, 15400, 51592], "temperature": 0.0, "avg_logprob": -0.28727821971094886, "compression_ratio": 1.6898148148148149, "no_speech_prob": 0.0016742099542170763}, {"id": 66, "seek": 29616, "start": 321.36, "end": 322.8, "text": " so", "tokens": [51624, 370, 51696], "temperature": 0.0, "avg_logprob": -0.28727821971094886, "compression_ratio": 1.6898148148148149, "no_speech_prob": 0.0016742099542170763}, {"id": 67, "seek": 32280, "start": 322.8, "end": 326.04, "text": " Unlike a language like let's say C++", "tokens": [50364, 17657, 257, 2856, 411, 718, 311, 584, 383, 25472, 50526], "temperature": 0.0, "avg_logprob": -0.2524716250867729, "compression_ratio": 1.6622222222222223, "no_speech_prob": 0.001284089288674295}, {"id": 68, "seek": 32280, "start": 326.96000000000004, "end": 336.2, "text": " Java this automatic garbage collection. What is garbage collection? It's simply put memory management when we do allocate resources to a certain object", "tokens": [50572, 10745, 341, 12509, 14150, 5765, 13, 708, 307, 14150, 5765, 30, 467, 311, 2935, 829, 4675, 4592, 562, 321, 360, 35713, 3593, 281, 257, 1629, 2657, 51034], "temperature": 0.0, "avg_logprob": -0.2524716250867729, "compression_ratio": 1.6622222222222223, "no_speech_prob": 0.001284089288674295}, {"id": 69, "seek": 32280, "start": 336.56, "end": 341.52, "text": " We make sure that once that object is no longer in use we clear it out", "tokens": [51052, 492, 652, 988, 300, 1564, 300, 2657, 307, 572, 2854, 294, 764, 321, 1850, 309, 484, 51300], "temperature": 0.0, "avg_logprob": -0.2524716250867729, "compression_ratio": 1.6622222222222223, "no_speech_prob": 0.001284089288674295}, {"id": 70, "seek": 32280, "start": 341.52, "end": 348.72, "text": " We we let that memory go to free out resources so that that resource can be something else and there are different", "tokens": [51300, 492, 321, 718, 300, 4675, 352, 281, 1737, 484, 3593, 370, 300, 300, 7684, 393, 312, 746, 1646, 293, 456, 366, 819, 51660], "temperature": 0.0, "avg_logprob": -0.2524716250867729, "compression_ratio": 1.6622222222222223, "no_speech_prob": 0.001284089288674295}, {"id": 71, "seek": 34872, "start": 349.28000000000003, "end": 355.76000000000005, "text": " Algorithms used in garbage collection. In fact, I'll leave some links down below on some videos by", "tokens": [50392, 35014, 6819, 2592, 1143, 294, 14150, 5765, 13, 682, 1186, 11, 286, 603, 1856, 512, 6123, 760, 2507, 322, 512, 2145, 538, 50716], "temperature": 0.0, "avg_logprob": -0.33522489335801864, "compression_ratio": 1.4497816593886463, "no_speech_prob": 0.05028793588280678}, {"id": 72, "seek": 34872, "start": 356.64000000000004, "end": 359.52000000000004, "text": " Gaurav Sen, I believe I think it's his son name, but I you know", "tokens": [50760, 460, 3463, 706, 3862, 11, 286, 1697, 286, 519, 309, 311, 702, 1872, 1315, 11, 457, 286, 291, 458, 50904], "temperature": 0.0, "avg_logprob": -0.33522489335801864, "compression_ratio": 1.4497816593886463, "no_speech_prob": 0.05028793588280678}, {"id": 73, "seek": 34872, "start": 359.52000000000004, "end": 365.48, "text": " He does the system design videos on YouTube really good superlative content and he does do a bit of", "tokens": [50904, 634, 775, 264, 1185, 1715, 2145, 322, 3088, 534, 665, 1687, 75, 1166, 2701, 293, 415, 775, 360, 257, 857, 295, 51202], "temperature": 0.0, "avg_logprob": -0.33522489335801864, "compression_ratio": 1.4497816593886463, "no_speech_prob": 0.05028793588280678}, {"id": 74, "seek": 34872, "start": 366.72, "end": 368.72, "text": " Explaining of how these algorithms work", "tokens": [51264, 12514, 3686, 295, 577, 613, 14642, 589, 51364], "temperature": 0.0, "avg_logprob": -0.33522489335801864, "compression_ratio": 1.4497816593886463, "no_speech_prob": 0.05028793588280678}, {"id": 75, "seek": 34872, "start": 369.76000000000005, "end": 371.96000000000004, "text": " specifically Apple Pro JVM", "tokens": [51416, 4682, 6373, 1705, 508, 53, 44, 51526], "temperature": 0.0, "avg_logprob": -0.33522489335801864, "compression_ratio": 1.4497816593886463, "no_speech_prob": 0.05028793588280678}, {"id": 76, "seek": 34872, "start": 372.8, "end": 373.96000000000004, "text": " so", "tokens": [51568, 370, 51626], "temperature": 0.0, "avg_logprob": -0.33522489335801864, "compression_ratio": 1.4497816593886463, "no_speech_prob": 0.05028793588280678}, {"id": 77, "seek": 37396, "start": 373.96, "end": 380.35999999999996, "text": " Of course because Java this automatic garbage collection as I said unlike a language like C++", "tokens": [50364, 2720, 1164, 570, 10745, 341, 12509, 14150, 5765, 382, 286, 848, 8343, 257, 2856, 411, 383, 25472, 50684], "temperature": 0.0, "avg_logprob": -0.21275072512419327, "compression_ratio": 1.668, "no_speech_prob": 0.0014101332053542137}, {"id": 78, "seek": 37396, "start": 380.68, "end": 384.76, "text": " We could make the wrong assumption when I mean we I mean a programmer could make the wrong assumption", "tokens": [50700, 492, 727, 652, 264, 2085, 15302, 562, 286, 914, 321, 286, 914, 257, 32116, 727, 652, 264, 2085, 15302, 50904], "temperature": 0.0, "avg_logprob": -0.21275072512419327, "compression_ratio": 1.668, "no_speech_prob": 0.0014101332053542137}, {"id": 79, "seek": 37396, "start": 385.32, "end": 392.32, "text": " That we don't have to think about memory management at all. And that's why in the beginning of this item", "tokens": [50932, 663, 321, 500, 380, 362, 281, 519, 466, 4675, 4592, 412, 439, 13, 400, 300, 311, 983, 294, 264, 2863, 295, 341, 3174, 51282], "temperature": 0.0, "avg_logprob": -0.21275072512419327, "compression_ratio": 1.668, "no_speech_prob": 0.0014101332053542137}, {"id": 80, "seek": 37396, "start": 392.88, "end": 394.71999999999997, "text": " Joshua Block states", "tokens": [51310, 24005, 17500, 4368, 51402], "temperature": 0.0, "avg_logprob": -0.21275072512419327, "compression_ratio": 1.668, "no_speech_prob": 0.0014101332053542137}, {"id": 81, "seek": 37396, "start": 394.71999999999997, "end": 400.71999999999997, "text": " When it comes to garbage collection, it seems almost like magic when you first experience it and", "tokens": [51402, 1133, 309, 1487, 281, 14150, 5765, 11, 309, 2544, 1920, 411, 5585, 562, 291, 700, 1752, 309, 293, 51702], "temperature": 0.0, "avg_logprob": -0.21275072512419327, "compression_ratio": 1.668, "no_speech_prob": 0.0014101332053542137}, {"id": 82, "seek": 40072, "start": 401.32000000000005, "end": 406.68, "text": " Therefore it can easily lead to the impression that you don't have to think about memory management", "tokens": [50394, 7504, 309, 393, 3612, 1477, 281, 264, 9995, 300, 291, 500, 380, 362, 281, 519, 466, 4675, 4592, 50662], "temperature": 0.0, "avg_logprob": -0.19952092272170047, "compression_ratio": 1.6007905138339922, "no_speech_prob": 0.005641492083668709}, {"id": 83, "seek": 40072, "start": 406.68, "end": 411.88000000000005, "text": " But this isn't quite true. I had to take off my cardigan because it was getting really hot in this room", "tokens": [50662, 583, 341, 1943, 380, 1596, 2074, 13, 286, 632, 281, 747, 766, 452, 2920, 9552, 570, 309, 390, 1242, 534, 2368, 294, 341, 1808, 50922], "temperature": 0.0, "avg_logprob": -0.19952092272170047, "compression_ratio": 1.6007905138339922, "no_speech_prob": 0.005641492083668709}, {"id": 84, "seek": 40072, "start": 412.28000000000003, "end": 414.28000000000003, "text": " Summer's coming in Melbourne. Yay", "tokens": [50942, 16161, 311, 1348, 294, 27496, 13, 13268, 51042], "temperature": 0.0, "avg_logprob": -0.19952092272170047, "compression_ratio": 1.6007905138339922, "no_speech_prob": 0.005641492083668709}, {"id": 85, "seek": 40072, "start": 414.52000000000004, "end": 419.0, "text": " So he keeps going consider the following simple stack implementation", "tokens": [51054, 407, 415, 5965, 516, 1949, 264, 3480, 2199, 8630, 11420, 51278], "temperature": 0.0, "avg_logprob": -0.19952092272170047, "compression_ratio": 1.6007905138339922, "no_speech_prob": 0.005641492083668709}, {"id": 86, "seek": 40072, "start": 419.56, "end": 422.28000000000003, "text": " I've got the stack implementation right here", "tokens": [51306, 286, 600, 658, 264, 8630, 11420, 558, 510, 51442], "temperature": 0.0, "avg_logprob": -0.19952092272170047, "compression_ratio": 1.6007905138339922, "no_speech_prob": 0.005641492083668709}, {"id": 87, "seek": 40072, "start": 423.32000000000005, "end": 426.68, "text": " However, before we get to the code and do a deep dive", "tokens": [51494, 2908, 11, 949, 321, 483, 281, 264, 3089, 293, 360, 257, 2452, 9192, 51662], "temperature": 0.0, "avg_logprob": -0.19952092272170047, "compression_ratio": 1.6007905138339922, "no_speech_prob": 0.005641492083668709}, {"id": 88, "seek": 42668, "start": 426.68, "end": 431.64, "text": " I cut out again. We want to backtrack a bit and discuss some of the terms. So", "tokens": [50364, 286, 1723, 484, 797, 13, 492, 528, 281, 646, 19466, 257, 857, 293, 2248, 512, 295, 264, 2115, 13, 407, 50612], "temperature": 0.0, "avg_logprob": -0.29392218287987043, "compression_ratio": 1.7055555555555555, "no_speech_prob": 0.021610582247376442}, {"id": 89, "seek": 42668, "start": 432.36, "end": 434.36, "text": " We discussed what", "tokens": [50648, 492, 7152, 437, 50748], "temperature": 0.0, "avg_logprob": -0.29392218287987043, "compression_ratio": 1.7055555555555555, "no_speech_prob": 0.021610582247376442}, {"id": 90, "seek": 42668, "start": 435.0, "end": 438.24, "text": " Object references are and then I want to discuss", "tokens": [50780, 24753, 15400, 366, 293, 550, 286, 528, 281, 2248, 50942], "temperature": 0.0, "avg_logprob": -0.29392218287987043, "compression_ratio": 1.7055555555555555, "no_speech_prob": 0.021610582247376442}, {"id": 91, "seek": 42668, "start": 438.72, "end": 444.94, "text": " What's a obsolete reference an obsolete reference is a reference that will not be", "tokens": [50966, 708, 311, 257, 46333, 6408, 364, 46333, 6408, 307, 257, 6408, 300, 486, 406, 312, 51277], "temperature": 0.0, "avg_logprob": -0.29392218287987043, "compression_ratio": 1.7055555555555555, "no_speech_prob": 0.021610582247376442}, {"id": 92, "seek": 42668, "start": 445.68, "end": 447.68, "text": " De-referenced again. It's", "tokens": [51314, 1346, 12, 265, 612, 14672, 797, 13, 467, 311, 51414], "temperature": 0.0, "avg_logprob": -0.29392218287987043, "compression_ratio": 1.7055555555555555, "no_speech_prob": 0.021610582247376442}, {"id": 93, "seek": 42668, "start": 447.68, "end": 450.52, "text": " unintentionally retaining an object now this term here", "tokens": [51414, 45514, 379, 34936, 364, 2657, 586, 341, 1433, 510, 51556], "temperature": 0.0, "avg_logprob": -0.29392218287987043, "compression_ratio": 1.7055555555555555, "no_speech_prob": 0.021610582247376442}, {"id": 94, "seek": 45052, "start": 451.52, "end": 458.0, "text": " De-referencing or dereferenced again, this can be quite confusing because dereference does not mean that you", "tokens": [50414, 1346, 12, 265, 612, 13644, 420, 15969, 612, 14672, 797, 11, 341, 393, 312, 1596, 13181, 570, 15969, 5158, 775, 406, 914, 300, 291, 50738], "temperature": 0.0, "avg_logprob": -0.20020427900491303, "compression_ratio": 1.8066037735849056, "no_speech_prob": 0.017435621470212936}, {"id": 95, "seek": 45052, "start": 458.4, "end": 461.08, "text": " Get rid of the reference not at all. What?", "tokens": [50758, 3240, 3973, 295, 264, 6408, 406, 412, 439, 13, 708, 30, 50892], "temperature": 0.0, "avg_logprob": -0.20020427900491303, "compression_ratio": 1.8066037735849056, "no_speech_prob": 0.017435621470212936}, {"id": 96, "seek": 45052, "start": 462.15999999999997, "end": 464.15999999999997, "text": " dereferencing in fact means is", "tokens": [50946, 15969, 612, 13644, 294, 1186, 1355, 307, 51046], "temperature": 0.0, "avg_logprob": -0.20020427900491303, "compression_ratio": 1.8066037735849056, "no_speech_prob": 0.017435621470212936}, {"id": 97, "seek": 45052, "start": 464.35999999999996, "end": 466.35999999999996, "text": " when we do refer to an object", "tokens": [51056, 562, 321, 360, 2864, 281, 364, 2657, 51156], "temperature": 0.0, "avg_logprob": -0.20020427900491303, "compression_ratio": 1.8066037735849056, "no_speech_prob": 0.017435621470212936}, {"id": 98, "seek": 45052, "start": 467.35999999999996, "end": 472.47999999999996, "text": " In our code somewhere down the line once we do create the reference we may refer to it again", "tokens": [51206, 682, 527, 3089, 4079, 760, 264, 1622, 1564, 321, 360, 1884, 264, 6408, 321, 815, 2864, 281, 309, 797, 51462], "temperature": 0.0, "avg_logprob": -0.20020427900491303, "compression_ratio": 1.8066037735849056, "no_speech_prob": 0.017435621470212936}, {"id": 99, "seek": 45052, "start": 472.47999999999996, "end": 477.71999999999997, "text": " We may get the value that the reference is pointing to that process is called", "tokens": [51462, 492, 815, 483, 264, 2158, 300, 264, 6408, 307, 12166, 281, 300, 1399, 307, 1219, 51724], "temperature": 0.0, "avg_logprob": -0.20020427900491303, "compression_ratio": 1.8066037735849056, "no_speech_prob": 0.017435621470212936}, {"id": 100, "seek": 47772, "start": 478.44000000000005, "end": 483.8, "text": " De-referencing and if we don't de-reference an object, there's no use of keeping an object in memory", "tokens": [50400, 1346, 12, 265, 612, 13644, 293, 498, 321, 500, 380, 368, 12, 265, 5158, 364, 2657, 11, 456, 311, 572, 764, 295, 5145, 364, 2657, 294, 4675, 50668], "temperature": 0.0, "avg_logprob": -0.2515032950867998, "compression_ratio": 1.6514522821576763, "no_speech_prob": 0.006192049942910671}, {"id": 101, "seek": 47772, "start": 483.8, "end": 486.92, "text": " So we are unintentionally just leaving an object there", "tokens": [50668, 407, 321, 366, 45514, 379, 445, 5012, 364, 2657, 456, 50824], "temperature": 0.0, "avg_logprob": -0.2515032950867998, "compression_ratio": 1.6514522821576763, "no_speech_prob": 0.006192049942910671}, {"id": 102, "seek": 47772, "start": 487.56, "end": 489.56, "text": " allocating resources making", "tokens": [50856, 12660, 990, 3593, 1455, 50956], "temperature": 0.0, "avg_logprob": -0.2515032950867998, "compression_ratio": 1.6514522821576763, "no_speech_prob": 0.006192049942910671}, {"id": 103, "seek": 47772, "start": 490.44000000000005, "end": 496.76000000000005, "text": " Application inefficient that that shouldn't be done. So the solution is quite simple. In fact, it's simply to now", "tokens": [51000, 39512, 43495, 300, 300, 4659, 380, 312, 1096, 13, 407, 264, 3827, 307, 1596, 2199, 13, 682, 1186, 11, 309, 311, 2935, 281, 586, 51316], "temperature": 0.0, "avg_logprob": -0.2515032950867998, "compression_ratio": 1.6514522821576763, "no_speech_prob": 0.006192049942910671}, {"id": 104, "seek": 47772, "start": 497.12, "end": 504.48, "text": " references once they become obsolete and we sometimes have to do this explicitly on our code despite", "tokens": [51334, 15400, 1564, 436, 1813, 46333, 293, 321, 2171, 362, 281, 360, 341, 20803, 322, 527, 3089, 7228, 51702], "temperature": 0.0, "avg_logprob": -0.2515032950867998, "compression_ratio": 1.6514522821576763, "no_speech_prob": 0.006192049942910671}, {"id": 105, "seek": 50448, "start": 505.48, "end": 508.52000000000004, "text": " Java doing memory management or garbage collection", "tokens": [50414, 10745, 884, 4675, 4592, 420, 14150, 5765, 50566], "temperature": 0.0, "avg_logprob": -0.2535940806070964, "compression_ratio": 1.6161137440758293, "no_speech_prob": 0.008059101179242134}, {"id": 106, "seek": 50448, "start": 508.72, "end": 516.8000000000001, "text": " So to have a bit of a more formal and clear definition by my favorite Java programming website by all done", "tokens": [50576, 407, 281, 362, 257, 857, 295, 257, 544, 9860, 293, 1850, 7123, 538, 452, 2954, 10745, 9410, 3144, 538, 439, 1096, 50980], "temperature": 0.0, "avg_logprob": -0.2535940806070964, "compression_ratio": 1.6161137440758293, "no_speech_prob": 0.008059101179242134}, {"id": 107, "seek": 50448, "start": 517.24, "end": 522.48, "text": " De-referencing means the action of accessing an object's features through a reference", "tokens": [51002, 1346, 12, 265, 612, 13644, 1355, 264, 3069, 295, 26440, 364, 2657, 311, 4122, 807, 257, 6408, 51264], "temperature": 0.0, "avg_logprob": -0.2535940806070964, "compression_ratio": 1.6161137440758293, "no_speech_prob": 0.008059101179242134}, {"id": 108, "seek": 50448, "start": 522.48, "end": 528.84, "text": " And one way to prevent obsolete object references is by narrow scoping and what's narrow scoping?", "tokens": [51264, 400, 472, 636, 281, 4871, 46333, 2657, 15400, 307, 538, 9432, 795, 26125, 293, 437, 311, 9432, 795, 26125, 30, 51582], "temperature": 0.0, "avg_logprob": -0.2535940806070964, "compression_ratio": 1.6161137440758293, "no_speech_prob": 0.008059101179242134}, {"id": 109, "seek": 52884, "start": 528.9200000000001, "end": 537.2, "text": " That's something what you would see in a for loop in a for loop. We have the int you declared int i for instance", "tokens": [50368, 663, 311, 746, 437, 291, 576, 536, 294, 257, 337, 6367, 294, 257, 337, 6367, 13, 492, 362, 264, 560, 291, 15489, 560, 741, 337, 5197, 50782], "temperature": 0.0, "avg_logprob": -0.2542517431851091, "compression_ratio": 1.8333333333333333, "no_speech_prob": 0.046701040118932724}, {"id": 110, "seek": 52884, "start": 538.72, "end": 546.1600000000001, "text": " That variable is within the scope of that for loop. So narrow scoping. That's an example another example would be", "tokens": [50858, 663, 7006, 307, 1951, 264, 11923, 295, 300, 337, 6367, 13, 407, 9432, 795, 26125, 13, 663, 311, 364, 1365, 1071, 1365, 576, 312, 51230], "temperature": 0.0, "avg_logprob": -0.2542517431851091, "compression_ratio": 1.8333333333333333, "no_speech_prob": 0.046701040118932724}, {"id": 111, "seek": 52884, "start": 546.64, "end": 550.6, "text": " trying not to declare global variables in a class rather", "tokens": [51254, 1382, 406, 281, 19710, 4338, 9102, 294, 257, 1508, 2831, 51452], "temperature": 0.0, "avg_logprob": -0.2542517431851091, "compression_ratio": 1.8333333333333333, "no_speech_prob": 0.046701040118932724}, {"id": 112, "seek": 52884, "start": 551.52, "end": 557.48, "text": " declare variables within a function within a method and keep it localized to that specific method and", "tokens": [51498, 19710, 9102, 1951, 257, 2445, 1951, 257, 3170, 293, 1066, 309, 44574, 281, 300, 2685, 3170, 293, 51796], "temperature": 0.0, "avg_logprob": -0.2542517431851091, "compression_ratio": 1.8333333333333333, "no_speech_prob": 0.046701040118932724}, {"id": 113, "seek": 55748, "start": 557.72, "end": 559.72, "text": " That helps with eliminating", "tokens": [50376, 663, 3665, 365, 31203, 50476], "temperature": 0.0, "avg_logprob": -0.23472750628436054, "compression_ratio": 1.6748768472906403, "no_speech_prob": 0.0011878111399710178}, {"id": 114, "seek": 55748, "start": 560.5600000000001, "end": 568.6, "text": " obsolete object references because we sort of know what the scope of a variable is in our code base and then in the item", "tokens": [50518, 46333, 2657, 15400, 570, 321, 1333, 295, 458, 437, 264, 11923, 295, 257, 7006, 307, 294, 527, 3089, 3096, 293, 550, 294, 264, 3174, 50920], "temperature": 0.0, "avg_logprob": -0.23472750628436054, "compression_ratio": 1.6748768472906403, "no_speech_prob": 0.0011878111399710178}, {"id": 115, "seek": 55748, "start": 568.6, "end": 573.04, "text": " He keeps going and this is the code base for the stack class", "tokens": [50920, 634, 5965, 516, 293, 341, 307, 264, 3089, 3096, 337, 264, 8630, 1508, 51142], "temperature": 0.0, "avg_logprob": -0.23472750628436054, "compression_ratio": 1.6748768472906403, "no_speech_prob": 0.0011878111399710178}, {"id": 116, "seek": 55748, "start": 573.04, "end": 579.5600000000001, "text": " And then he asks can you spot the memory leak saying that before we get to the item and try and visualize", "tokens": [51142, 400, 550, 415, 8962, 393, 291, 4008, 264, 4675, 17143, 1566, 300, 949, 321, 483, 281, 264, 3174, 293, 853, 293, 23273, 51468], "temperature": 0.0, "avg_logprob": -0.23472750628436054, "compression_ratio": 1.6748768472906403, "no_speech_prob": 0.0011878111399710178}, {"id": 117, "seek": 55748, "start": 579.88, "end": 581.28, "text": " What the memory leak is?", "tokens": [51484, 708, 264, 4675, 17143, 307, 30, 51554], "temperature": 0.0, "avg_logprob": -0.23472750628436054, "compression_ratio": 1.6748768472906403, "no_speech_prob": 0.0011878111399710178}, {"id": 118, "seek": 58128, "start": 581.36, "end": 584.88, "text": " Let's take a look at the code base and the code base of this", "tokens": [50368, 961, 311, 747, 257, 574, 412, 264, 3089, 3096, 293, 264, 3089, 3096, 295, 341, 50544], "temperature": 0.0, "avg_logprob": -0.22453791685778685, "compression_ratio": 1.7016129032258065, "no_speech_prob": 0.06655382364988327}, {"id": 119, "seek": 58128, "start": 585.3199999999999, "end": 592.16, "text": " Stack implementation a really simple stack implementation that just your block has used here as an example to", "tokens": [50566, 37649, 11420, 257, 534, 2199, 8630, 11420, 300, 445, 428, 3461, 575, 1143, 510, 382, 364, 1365, 281, 50908], "temperature": 0.0, "avg_logprob": -0.22453791685778685, "compression_ratio": 1.7016129032258065, "no_speech_prob": 0.06655382364988327}, {"id": 120, "seek": 58128, "start": 592.52, "end": 596.88, "text": " Illustrate his point. So I'm pretty much going to go through this code line by line despite it being a bit long", "tokens": [50926, 37788, 4404, 702, 935, 13, 407, 286, 478, 1238, 709, 516, 281, 352, 807, 341, 3089, 1622, 538, 1622, 7228, 309, 885, 257, 857, 938, 51144], "temperature": 0.0, "avg_logprob": -0.22453791685778685, "compression_ratio": 1.7016129032258065, "no_speech_prob": 0.06655382364988327}, {"id": 121, "seek": 58128, "start": 597.52, "end": 600.68, "text": " Because I think that's the best way to understand this. We have a", "tokens": [51176, 1436, 286, 519, 300, 311, 264, 1151, 636, 281, 1223, 341, 13, 492, 362, 257, 51334], "temperature": 0.0, "avg_logprob": -0.22453791685778685, "compression_ratio": 1.7016129032258065, "no_speech_prob": 0.06655382364988327}, {"id": 122, "seek": 58128, "start": 601.36, "end": 606.92, "text": " Simple class called stack. We have a object array of elements and another", "tokens": [51368, 21532, 1508, 1219, 8630, 13, 492, 362, 257, 2657, 10225, 295, 4959, 293, 1071, 51646], "temperature": 0.0, "avg_logprob": -0.22453791685778685, "compression_ratio": 1.7016129032258065, "no_speech_prob": 0.06655382364988327}, {"id": 123, "seek": 60692, "start": 607.8399999999999, "end": 611.36, "text": " Private of the object array is also private but also another private", "tokens": [50410, 30386, 295, 264, 2657, 10225, 307, 611, 4551, 457, 611, 1071, 4551, 50586], "temperature": 0.0, "avg_logprob": -0.30730267842610676, "compression_ratio": 1.6051282051282052, "no_speech_prob": 0.004263862501829863}, {"id": 124, "seek": 60692, "start": 613.1999999999999, "end": 619.24, "text": " Variable called size of primitive type integer of int. Sorry and then this", "tokens": [50678, 32511, 712, 1219, 2744, 295, 28540, 2010, 24922, 295, 560, 13, 4919, 293, 550, 341, 50980], "temperature": 0.0, "avg_logprob": -0.30730267842610676, "compression_ratio": 1.6051282051282052, "no_speech_prob": 0.004263862501829863}, {"id": 125, "seek": 60692, "start": 620.16, "end": 622.36, "text": " constant here is what", "tokens": [51026, 5754, 510, 307, 437, 51136], "temperature": 0.0, "avg_logprob": -0.30730267842610676, "compression_ratio": 1.6051282051282052, "no_speech_prob": 0.004263862501829863}, {"id": 126, "seek": 60692, "start": 623.4399999999999, "end": 625.4399999999999, "text": " initially defines the", "tokens": [51190, 9105, 23122, 264, 51290], "temperature": 0.0, "avg_logprob": -0.30730267842610676, "compression_ratio": 1.6051282051282052, "no_speech_prob": 0.004263862501829863}, {"id": 127, "seek": 60692, "start": 625.7199999999999, "end": 627.7199999999999, "text": " Initial stack capacity", "tokens": [51304, 22937, 831, 8630, 6042, 51404], "temperature": 0.0, "avg_logprob": -0.30730267842610676, "compression_ratio": 1.6051282051282052, "no_speech_prob": 0.004263862501829863}, {"id": 128, "seek": 60692, "start": 628.4, "end": 633.68, "text": " So when the stack class is instantiated, of course the constructors called", "tokens": [51438, 407, 562, 264, 8630, 1508, 307, 9836, 72, 770, 11, 295, 1164, 264, 7690, 830, 1219, 51702], "temperature": 0.0, "avg_logprob": -0.30730267842610676, "compression_ratio": 1.6051282051282052, "no_speech_prob": 0.004263862501829863}, {"id": 129, "seek": 60692, "start": 634.1999999999999, "end": 636.1999999999999, "text": " And in the client over here", "tokens": [51728, 400, 294, 264, 6423, 670, 510, 51828], "temperature": 0.0, "avg_logprob": -0.30730267842610676, "compression_ratio": 1.6051282051282052, "no_speech_prob": 0.004263862501829863}, {"id": 130, "seek": 63692, "start": 636.92, "end": 638.92, "text": " I am instantiating the class", "tokens": [50364, 286, 669, 9836, 72, 990, 264, 1508, 50464], "temperature": 0.0, "avg_logprob": -0.3348390579223633, "compression_ratio": 1.5940594059405941, "no_speech_prob": 0.00038587188464589417}, {"id": 131, "seek": 63692, "start": 639.28, "end": 641.28, "text": " line number 57", "tokens": [50482, 1622, 1230, 21423, 50582], "temperature": 0.0, "avg_logprob": -0.3348390579223633, "compression_ratio": 1.5940594059405941, "no_speech_prob": 0.00038587188464589417}, {"id": 132, "seek": 63692, "start": 641.4799999999999, "end": 642.68, "text": " so", "tokens": [50592, 370, 50652], "temperature": 0.0, "avg_logprob": -0.3348390579223633, "compression_ratio": 1.5940594059405941, "no_speech_prob": 0.00038587188464589417}, {"id": 133, "seek": 63692, "start": 642.68, "end": 646.1999999999999, "text": " When the constructor is called a new", "tokens": [50652, 1133, 264, 47479, 307, 1219, 257, 777, 50828], "temperature": 0.0, "avg_logprob": -0.3348390579223633, "compression_ratio": 1.5940594059405941, "no_speech_prob": 0.00038587188464589417}, {"id": 134, "seek": 63692, "start": 647.56, "end": 649.8399999999999, "text": " Object array is initialized. So this", "tokens": [50896, 24753, 10225, 307, 5883, 1602, 13, 407, 341, 51010], "temperature": 0.0, "avg_logprob": -0.3348390579223633, "compression_ratio": 1.5940594059405941, "no_speech_prob": 0.00038587188464589417}, {"id": 135, "seek": 63692, "start": 650.8399999999999, "end": 652.8399999999999, "text": " array we defined here", "tokens": [51060, 10225, 321, 7642, 510, 51160], "temperature": 0.0, "avg_logprob": -0.3348390579223633, "compression_ratio": 1.5940594059405941, "no_speech_prob": 0.00038587188464589417}, {"id": 136, "seek": 63692, "start": 653.0799999999999, "end": 654.68, "text": " elements", "tokens": [51172, 4959, 51252], "temperature": 0.0, "avg_logprob": -0.3348390579223633, "compression_ratio": 1.5940594059405941, "no_speech_prob": 0.00038587188464589417}, {"id": 137, "seek": 63692, "start": 654.68, "end": 659.64, "text": " that this this new object is passed to that variable and when the", "tokens": [51252, 300, 341, 341, 777, 2657, 307, 4678, 281, 300, 7006, 293, 562, 264, 51500], "temperature": 0.0, "avg_logprob": -0.3348390579223633, "compression_ratio": 1.5940594059405941, "no_speech_prob": 0.00038587188464589417}, {"id": 138, "seek": 63692, "start": 660.0, "end": 666.8, "text": " New object array is initialized. It's default capacity. Yes. I've made a mistake here. It's not 26 at 16", "tokens": [51518, 1873, 2657, 10225, 307, 5883, 1602, 13, 467, 311, 7576, 6042, 13, 1079, 13, 286, 600, 1027, 257, 6146, 510, 13, 467, 311, 406, 7551, 412, 3165, 51858], "temperature": 0.0, "avg_logprob": -0.3348390579223633, "compression_ratio": 1.5940594059405941, "no_speech_prob": 0.00038587188464589417}, {"id": 139, "seek": 66692, "start": 667.36, "end": 672.64, "text": " And that's assigned to the variable elements. So this variable in line number 10 will hold a", "tokens": [50386, 400, 300, 311, 13279, 281, 264, 7006, 4959, 13, 407, 341, 7006, 294, 1622, 1230, 1266, 486, 1797, 257, 50650], "temperature": 0.0, "avg_logprob": -0.1944741509177468, "compression_ratio": 1.883817427385892, "no_speech_prob": 0.0023229855578392744}, {"id": 140, "seek": 66692, "start": 672.64, "end": 676.0, "text": " I'm pointing to the code as if you can see where I'm pointing at. That's so funny", "tokens": [50650, 286, 478, 12166, 281, 264, 3089, 382, 498, 291, 393, 536, 689, 286, 478, 12166, 412, 13, 663, 311, 370, 4074, 50818], "temperature": 0.0, "avg_logprob": -0.1944741509177468, "compression_ratio": 1.883817427385892, "no_speech_prob": 0.0023229855578392744}, {"id": 141, "seek": 66692, "start": 676.0799999999999, "end": 682.16, "text": " Anyway, this object array will hold a reference or elements will hold a reference to this new object", "tokens": [50822, 5684, 11, 341, 2657, 10225, 486, 1797, 257, 6408, 420, 4959, 486, 1797, 257, 6408, 281, 341, 777, 2657, 51126], "temperature": 0.0, "avg_logprob": -0.1944741509177468, "compression_ratio": 1.883817427385892, "no_speech_prob": 0.0023229855578392744}, {"id": 142, "seek": 66692, "start": 682.4, "end": 686.24, "text": " That was created and that's in the heap and then we have a method called push", "tokens": [51138, 663, 390, 2942, 293, 300, 311, 294, 264, 33591, 293, 550, 321, 362, 257, 3170, 1219, 2944, 51330], "temperature": 0.0, "avg_logprob": -0.1944741509177468, "compression_ratio": 1.883817427385892, "no_speech_prob": 0.0023229855578392744}, {"id": 143, "seek": 66692, "start": 686.64, "end": 692.1999999999999, "text": " and what that does is as you'd expect from a stack you can push new elements on new objects onto the", "tokens": [51350, 293, 437, 300, 775, 307, 382, 291, 1116, 2066, 490, 257, 8630, 291, 393, 2944, 777, 4959, 322, 777, 6565, 3911, 264, 51628], "temperature": 0.0, "avg_logprob": -0.1944741509177468, "compression_ratio": 1.883817427385892, "no_speech_prob": 0.0023229855578392744}, {"id": 144, "seek": 69220, "start": 692.5600000000001, "end": 697.84, "text": " Stack or in this case the elements array, but but in that method we have another", "tokens": [50382, 37649, 420, 294, 341, 1389, 264, 4959, 10225, 11, 457, 457, 294, 300, 3170, 321, 362, 1071, 50646], "temperature": 0.0, "avg_logprob": -0.2884059705232319, "compression_ratio": 1.7654867256637168, "no_speech_prob": 0.022281378507614136}, {"id": 145, "seek": 69220, "start": 698.6400000000001, "end": 701.6800000000001, "text": " method that we call call ensure capacity", "tokens": [50686, 3170, 300, 321, 818, 818, 5586, 6042, 50838], "temperature": 0.0, "avg_logprob": -0.2884059705232319, "compression_ratio": 1.7654867256637168, "no_speech_prob": 0.022281378507614136}, {"id": 146, "seek": 69220, "start": 702.5200000000001, "end": 704.5200000000001, "text": " ensure capacity just ensures that", "tokens": [50880, 5586, 6042, 445, 28111, 300, 50980], "temperature": 0.0, "avg_logprob": -0.2884059705232319, "compression_ratio": 1.7654867256637168, "no_speech_prob": 0.022281378507614136}, {"id": 147, "seek": 69220, "start": 705.1600000000001, "end": 712.44, "text": " There's space for at least one more element roughly and if not, it'll just double the capacity each time the", "tokens": [51012, 821, 311, 1901, 337, 412, 1935, 472, 544, 4478, 9810, 293, 498, 406, 11, 309, 603, 445, 3834, 264, 6042, 1184, 565, 264, 51376], "temperature": 0.0, "avg_logprob": -0.2884059705232319, "compression_ratio": 1.7654867256637168, "no_speech_prob": 0.022281378507614136}, {"id": 148, "seek": 69220, "start": 712.5200000000001, "end": 715.24, "text": " Areas to grow because we want the stack to be dynamic", "tokens": [51380, 2014, 296, 281, 1852, 570, 321, 528, 264, 8630, 281, 312, 8546, 51516], "temperature": 0.0, "avg_logprob": -0.2884059705232319, "compression_ratio": 1.7654867256637168, "no_speech_prob": 0.022281378507614136}, {"id": 149, "seek": 69220, "start": 715.24, "end": 719.0, "text": " you can see here it's creating a copy of elements and passing it to elements and", "tokens": [51516, 291, 393, 536, 510, 309, 311, 4084, 257, 5055, 295, 4959, 293, 8437, 309, 281, 4959, 293, 51704], "temperature": 0.0, "avg_logprob": -0.2884059705232319, "compression_ratio": 1.7654867256637168, "no_speech_prob": 0.022281378507614136}, {"id": 150, "seek": 71900, "start": 719.32, "end": 723.52, "text": " The more we keep adding on to the stack the more the area grows so doubles in size", "tokens": [50380, 440, 544, 321, 1066, 5127, 322, 281, 264, 8630, 264, 544, 264, 1859, 13156, 370, 31634, 294, 2744, 50590], "temperature": 0.0, "avg_logprob": -0.21238000052315847, "compression_ratio": 1.7162162162162162, "no_speech_prob": 0.003649630583822727}, {"id": 151, "seek": 71900, "start": 723.52, "end": 730.52, "text": " Let's say now we get to the point this pop method is what's pertinent to our item and where we see", "tokens": [50590, 961, 311, 584, 586, 321, 483, 281, 264, 935, 341, 1665, 3170, 307, 437, 311, 13269, 11058, 281, 527, 3174, 293, 689, 321, 536, 50940], "temperature": 0.0, "avg_logprob": -0.21238000052315847, "compression_ratio": 1.7162162162162162, "no_speech_prob": 0.003649630583822727}, {"id": 152, "seek": 71900, "start": 731.48, "end": 734.0, "text": " Memory leak take place. So we have this", "tokens": [50988, 38203, 17143, 747, 1081, 13, 407, 321, 362, 341, 51114], "temperature": 0.0, "avg_logprob": -0.21238000052315847, "compression_ratio": 1.7162162162162162, "no_speech_prob": 0.003649630583822727}, {"id": 153, "seek": 71900, "start": 735.44, "end": 738.12, "text": " Object method. Sorry, we have this pop method", "tokens": [51186, 24753, 3170, 13, 4919, 11, 321, 362, 341, 1665, 3170, 51320], "temperature": 0.0, "avg_logprob": -0.21238000052315847, "compression_ratio": 1.7162162162162162, "no_speech_prob": 0.003649630583822727}, {"id": 154, "seek": 71900, "start": 738.76, "end": 745.8, "text": " And we don't here in this method garbage collection doesn't take place and that's why we need to be aware of that", "tokens": [51352, 400, 321, 500, 380, 510, 294, 341, 3170, 14150, 5765, 1177, 380, 747, 1081, 293, 300, 311, 983, 321, 643, 281, 312, 3650, 295, 300, 51704], "temperature": 0.0, "avg_logprob": -0.21238000052315847, "compression_ratio": 1.7162162162162162, "no_speech_prob": 0.003649630583822727}, {"id": 155, "seek": 74580, "start": 746.3199999999999, "end": 752.4799999999999, "text": " So firstly if the size is equal to zero, which is going to throw an empty stack exception", "tokens": [50390, 407, 27376, 498, 264, 2744, 307, 2681, 281, 4018, 11, 597, 307, 516, 281, 3507, 364, 6707, 8630, 11183, 50698], "temperature": 0.0, "avg_logprob": -0.26144658435474744, "compression_ratio": 1.688118811881188, "no_speech_prob": 0.0025900588370859623}, {"id": 156, "seek": 74580, "start": 752.4799999999999, "end": 756.12, "text": " And we can't add something to an empty stack and here we see", "tokens": [50698, 400, 321, 393, 380, 909, 746, 281, 364, 6707, 8630, 293, 510, 321, 536, 50880], "temperature": 0.0, "avg_logprob": -0.26144658435474744, "compression_ratio": 1.688118811881188, "no_speech_prob": 0.0025900588370859623}, {"id": 157, "seek": 74580, "start": 757.24, "end": 759.68, "text": " that when we pop the", "tokens": [50936, 300, 562, 321, 1665, 264, 51058], "temperature": 0.0, "avg_logprob": -0.26144658435474744, "compression_ratio": 1.688118811881188, "no_speech_prob": 0.0025900588370859623}, {"id": 158, "seek": 74580, "start": 760.5999999999999, "end": 762.1999999999999, "text": " object of the", "tokens": [51104, 2657, 295, 264, 51184], "temperature": 0.0, "avg_logprob": -0.26144658435474744, "compression_ratio": 1.688118811881188, "no_speech_prob": 0.0025900588370859623}, {"id": 159, "seek": 74580, "start": 762.1999999999999, "end": 765.8, "text": " Array or when we return the object that's in the array", "tokens": [51184, 1587, 3458, 420, 562, 321, 2736, 264, 2657, 300, 311, 294, 264, 10225, 51364], "temperature": 0.0, "avg_logprob": -0.26144658435474744, "compression_ratio": 1.688118811881188, "no_speech_prob": 0.0025900588370859623}, {"id": 160, "seek": 74580, "start": 766.4, "end": 773.56, "text": " Where we reduce the size with this counter. So this was the variable we declared here in line number", "tokens": [51394, 2305, 321, 5407, 264, 2744, 365, 341, 5682, 13, 407, 341, 390, 264, 7006, 321, 15489, 510, 294, 1622, 1230, 51752], "temperature": 0.0, "avg_logprob": -0.26144658435474744, "compression_ratio": 1.688118811881188, "no_speech_prob": 0.0025900588370859623}, {"id": 161, "seek": 77356, "start": 774.3199999999999, "end": 780.3599999999999, "text": " 11 and when we reduce that. Oh, sorry. I didn't I didn't say that in fact in the push", "tokens": [50402, 2975, 293, 562, 321, 5407, 300, 13, 876, 11, 2597, 13, 286, 994, 380, 286, 994, 380, 584, 300, 294, 1186, 294, 264, 2944, 50704], "temperature": 0.0, "avg_logprob": -0.2487095214508392, "compression_ratio": 1.7019230769230769, "no_speech_prob": 0.005909746512770653}, {"id": 162, "seek": 77356, "start": 781.5999999999999, "end": 787.64, "text": " Method whenever we push a new item onto the array. We also increase the count on that variable", "tokens": [50766, 25285, 5699, 321, 2944, 257, 777, 3174, 3911, 264, 10225, 13, 492, 611, 3488, 264, 1207, 322, 300, 7006, 51068], "temperature": 0.0, "avg_logprob": -0.2487095214508392, "compression_ratio": 1.7019230769230769, "no_speech_prob": 0.005909746512770653}, {"id": 163, "seek": 77356, "start": 787.64, "end": 791.7199999999999, "text": " And when we pop it we reduce it kind of makes sense. Well, what happens here though is", "tokens": [51068, 400, 562, 321, 1665, 309, 321, 5407, 309, 733, 295, 1669, 2020, 13, 1042, 11, 437, 2314, 510, 1673, 307, 51272], "temperature": 0.0, "avg_logprob": -0.2487095214508392, "compression_ratio": 1.7019230769230769, "no_speech_prob": 0.005909746512770653}, {"id": 164, "seek": 77356, "start": 792.88, "end": 798.4799999999999, "text": " Whenever we pop an object from the stack or when we take an object out from this array", "tokens": [51330, 14159, 321, 1665, 364, 2657, 490, 264, 8630, 420, 562, 321, 747, 364, 2657, 484, 490, 341, 10225, 51610], "temperature": 0.0, "avg_logprob": -0.2487095214508392, "compression_ratio": 1.7019230769230769, "no_speech_prob": 0.005909746512770653}, {"id": 165, "seek": 79848, "start": 799.48, "end": 801.48, "text": " An object is still", "tokens": [50414, 1107, 2657, 307, 920, 50514], "temperature": 0.0, "avg_logprob": -0.250772931359031, "compression_ratio": 1.578723404255319, "no_speech_prob": 0.006487436592578888}, {"id": 166, "seek": 79848, "start": 801.96, "end": 807.36, "text": " unintentionally retained here despite the client of this class having no use of those objects and", "tokens": [50538, 45514, 379, 33438, 510, 7228, 264, 6423, 295, 341, 1508, 1419, 572, 764, 295, 729, 6565, 293, 50808], "temperature": 0.0, "avg_logprob": -0.250772931359031, "compression_ratio": 1.578723404255319, "no_speech_prob": 0.006487436592578888}, {"id": 167, "seek": 79848, "start": 808.28, "end": 816.24, "text": " That's where the memory leak takes place and the proper way to do this and again this bit of code here line number 20 to 33", "tokens": [50854, 663, 311, 689, 264, 4675, 17143, 2516, 1081, 293, 264, 2296, 636, 281, 360, 341, 293, 797, 341, 857, 295, 3089, 510, 1622, 1230, 945, 281, 11816, 51252], "temperature": 0.0, "avg_logprob": -0.250772931359031, "compression_ratio": 1.578723404255319, "no_speech_prob": 0.006487436592578888}, {"id": 168, "seek": 79848, "start": 816.24, "end": 822.64, "text": " I will illustrate that in this diagram more visually. It'll make a lot more sense. Whoops. That was a mistake", "tokens": [51252, 286, 486, 23221, 300, 294, 341, 10686, 544, 19622, 13, 467, 603, 652, 257, 688, 544, 2020, 13, 45263, 13, 663, 390, 257, 6146, 51572], "temperature": 0.0, "avg_logprob": -0.250772931359031, "compression_ratio": 1.578723404255319, "no_speech_prob": 0.006487436592578888}, {"id": 169, "seek": 79848, "start": 823.36, "end": 825.0, "text": " Getting back to this", "tokens": [51608, 13674, 646, 281, 341, 51690], "temperature": 0.0, "avg_logprob": -0.250772931359031, "compression_ratio": 1.578723404255319, "no_speech_prob": 0.006487436592578888}, {"id": 170, "seek": 82500, "start": 825.0, "end": 829.64, "text": " But this is not the right way to do it because what's happening here is a memory leak", "tokens": [50364, 583, 341, 307, 406, 264, 558, 636, 281, 360, 309, 570, 437, 311, 2737, 510, 307, 257, 4675, 17143, 50596], "temperature": 0.0, "avg_logprob": -0.19984966875558877, "compression_ratio": 1.6157894736842104, "no_speech_prob": 0.0009398728143423796}, {"id": 171, "seek": 82500, "start": 830.64, "end": 832.88, "text": " The proper way to do it would be like this", "tokens": [50646, 440, 2296, 636, 281, 360, 309, 576, 312, 411, 341, 50758], "temperature": 0.0, "avg_logprob": -0.19984966875558877, "compression_ratio": 1.6157894736842104, "no_speech_prob": 0.0009398728143423796}, {"id": 172, "seek": 82500, "start": 835.52, "end": 837.84, "text": " I'm gonna comment out the wrong way", "tokens": [50890, 286, 478, 799, 2871, 484, 264, 2085, 636, 51006], "temperature": 0.0, "avg_logprob": -0.19984966875558877, "compression_ratio": 1.6157894736842104, "no_speech_prob": 0.0009398728143423796}, {"id": 173, "seek": 82500, "start": 840.2, "end": 842.64, "text": " It would still be where we are checking if the", "tokens": [51124, 467, 576, 920, 312, 689, 321, 366, 8568, 498, 264, 51246], "temperature": 0.0, "avg_logprob": -0.19984966875558877, "compression_ratio": 1.6157894736842104, "no_speech_prob": 0.0009398728143423796}, {"id": 174, "seek": 82500, "start": 843.36, "end": 848.04, "text": " Stack is empty the stack can't be empty and then we are in fact", "tokens": [51282, 37649, 307, 6707, 264, 8630, 393, 380, 312, 6707, 293, 550, 321, 366, 294, 1186, 51516], "temperature": 0.0, "avg_logprob": -0.19984966875558877, "compression_ratio": 1.6157894736842104, "no_speech_prob": 0.0009398728143423796}, {"id": 175, "seek": 82500, "start": 849.0, "end": 851.4, "text": " Assigning this value onto a new", "tokens": [51564, 6281, 9676, 341, 2158, 3911, 257, 777, 51684], "temperature": 0.0, "avg_logprob": -0.19984966875558877, "compression_ratio": 1.6157894736842104, "no_speech_prob": 0.0009398728143423796}, {"id": 176, "seek": 85140, "start": 852.1999999999999, "end": 858.0799999999999, "text": " Variable we're gonna create called result. So whatever the elements array returns after we reduce the size", "tokens": [50404, 32511, 712, 321, 434, 799, 1884, 1219, 1874, 13, 407, 2035, 264, 4959, 10225, 11247, 934, 321, 5407, 264, 2744, 50698], "temperature": 0.0, "avg_logprob": -0.2674954051063174, "compression_ratio": 1.7971698113207548, "no_speech_prob": 0.006191988475620747}, {"id": 177, "seek": 85140, "start": 858.3199999999999, "end": 861.48, "text": " We're gonna assign that value to result and then", "tokens": [50710, 492, 434, 799, 6269, 300, 2158, 281, 1874, 293, 550, 50868], "temperature": 0.0, "avg_logprob": -0.2674954051063174, "compression_ratio": 1.7971698113207548, "no_speech_prob": 0.006191988475620747}, {"id": 178, "seek": 85140, "start": 862.4399999999999, "end": 868.28, "text": " simply we null out that location on the array and that's where the elimination of", "tokens": [50916, 2935, 321, 18184, 484, 300, 4914, 322, 264, 10225, 293, 300, 311, 689, 264, 29224, 295, 51208], "temperature": 0.0, "avg_logprob": -0.2674954051063174, "compression_ratio": 1.7971698113207548, "no_speech_prob": 0.006191988475620747}, {"id": 179, "seek": 85140, "start": 868.56, "end": 872.24, "text": " The obsolete reference takes place and we return the result afterwards", "tokens": [51222, 440, 46333, 6408, 2516, 1081, 293, 321, 2736, 264, 1874, 10543, 51406], "temperature": 0.0, "avg_logprob": -0.2674954051063174, "compression_ratio": 1.7971698113207548, "no_speech_prob": 0.006191988475620747}, {"id": 180, "seek": 85140, "start": 872.24, "end": 877.4399999999999, "text": " So we assign it to result and return the result will be ensure that that", "tokens": [51406, 407, 321, 6269, 309, 281, 1874, 293, 2736, 264, 1874, 486, 312, 5586, 300, 300, 51666], "temperature": 0.0, "avg_logprob": -0.2674954051063174, "compression_ratio": 1.7971698113207548, "no_speech_prob": 0.006191988475620747}, {"id": 181, "seek": 87744, "start": 878.2800000000001, "end": 881.0, "text": " Element on the in the array that index", "tokens": [50406, 20900, 322, 264, 294, 264, 10225, 300, 8186, 50542], "temperature": 0.0, "avg_logprob": -0.19920086410810361, "compression_ratio": 1.7702127659574467, "no_speech_prob": 0.007344687823206186}, {"id": 182, "seek": 87744, "start": 881.6400000000001, "end": 888.5600000000001, "text": " That we return that it's not out because when it's not out what happens is something like what we see here", "tokens": [50574, 663, 321, 2736, 300, 309, 311, 406, 484, 570, 562, 309, 311, 406, 484, 437, 2314, 307, 746, 411, 437, 321, 536, 510, 50920], "temperature": 0.0, "avg_logprob": -0.19920086410810361, "compression_ratio": 1.7702127659574467, "no_speech_prob": 0.007344687823206186}, {"id": 183, "seek": 87744, "start": 888.8800000000001, "end": 894.96, "text": " It's clear that it's not obsolete that it's not pointing at something and taking up memory resources", "tokens": [50936, 467, 311, 1850, 300, 309, 311, 406, 46333, 300, 309, 311, 406, 12166, 412, 746, 293, 1940, 493, 4675, 3593, 51240], "temperature": 0.0, "avg_logprob": -0.19920086410810361, "compression_ratio": 1.7702127659574467, "no_speech_prob": 0.007344687823206186}, {"id": 184, "seek": 87744, "start": 894.96, "end": 898.1600000000001, "text": " And really if you run this code there really isn't a use in running the code", "tokens": [51240, 400, 534, 498, 291, 1190, 341, 3089, 456, 534, 1943, 380, 257, 764, 294, 2614, 264, 3089, 51400], "temperature": 0.0, "avg_logprob": -0.19920086410810361, "compression_ratio": 1.7702127659574467, "no_speech_prob": 0.007344687823206186}, {"id": 185, "seek": 87744, "start": 898.1600000000001, "end": 901.5200000000001, "text": " But this is kind of what you'd see. I can just print out the", "tokens": [51400, 583, 341, 307, 733, 295, 437, 291, 1116, 536, 13, 286, 393, 445, 4482, 484, 264, 51568], "temperature": 0.0, "avg_logprob": -0.19920086410810361, "compression_ratio": 1.7702127659574467, "no_speech_prob": 0.007344687823206186}, {"id": 186, "seek": 87744, "start": 902.1600000000001, "end": 904.1600000000001, "text": " Array or the stack in this case", "tokens": [51600, 1587, 3458, 420, 264, 8630, 294, 341, 1389, 51700], "temperature": 0.0, "avg_logprob": -0.19920086410810361, "compression_ratio": 1.7702127659574467, "no_speech_prob": 0.007344687823206186}, {"id": 187, "seek": 90416, "start": 905.0, "end": 910.16, "text": " This you can ignore this empty stack exception. The reason for that is because we are pretty much", "tokens": [50406, 639, 291, 393, 11200, 341, 6707, 8630, 11183, 13, 440, 1778, 337, 300, 307, 570, 321, 366, 1238, 709, 50664], "temperature": 0.0, "avg_logprob": -0.1967913171519404, "compression_ratio": 1.7945205479452055, "no_speech_prob": 0.006387429311871529}, {"id": 188, "seek": 90416, "start": 910.9599999999999, "end": 912.48, "text": " pushing", "tokens": [50704, 7380, 50780], "temperature": 0.0, "avg_logprob": -0.1967913171519404, "compression_ratio": 1.7945205479452055, "no_speech_prob": 0.006387429311871529}, {"id": 189, "seek": 90416, "start": 912.48, "end": 917.92, "text": " Everything into the stack and then popping everything off the stack and then you would at one point as we go through it", "tokens": [50780, 5471, 666, 264, 8630, 293, 550, 18374, 1203, 766, 264, 8630, 293, 550, 291, 576, 412, 472, 935, 382, 321, 352, 807, 309, 51052], "temperature": 0.0, "avg_logprob": -0.1967913171519404, "compression_ratio": 1.7945205479452055, "no_speech_prob": 0.006387429311871529}, {"id": 190, "seek": 90416, "start": 918.4399999999999, "end": 920.4399999999999, "text": " expect this", "tokens": [51078, 2066, 341, 51178], "temperature": 0.0, "avg_logprob": -0.1967913171519404, "compression_ratio": 1.7945205479452055, "no_speech_prob": 0.006387429311871529}, {"id": 191, "seek": 90416, "start": 921.36, "end": 925.4399999999999, "text": " Exception to be thrown here, which is wait, I just missed it", "tokens": [51224, 2111, 7311, 281, 312, 11732, 510, 11, 597, 307, 1699, 11, 286, 445, 6721, 309, 51428], "temperature": 0.0, "avg_logprob": -0.1967913171519404, "compression_ratio": 1.7945205479452055, "no_speech_prob": 0.006387429311871529}, {"id": 192, "seek": 90416, "start": 928.04, "end": 933.64, "text": " Right here because what happens is we keep popping the stack at one point the stack gets empty", "tokens": [51558, 1779, 510, 570, 437, 2314, 307, 321, 1066, 18374, 264, 8630, 412, 472, 935, 264, 8630, 2170, 6707, 51838], "temperature": 0.0, "avg_logprob": -0.1967913171519404, "compression_ratio": 1.7945205479452055, "no_speech_prob": 0.006387429311871529}, {"id": 193, "seek": 93364, "start": 933.64, "end": 936.72, "text": " So this is kind of expected this error here", "tokens": [50364, 407, 341, 307, 733, 295, 5176, 341, 6713, 510, 50518], "temperature": 0.0, "avg_logprob": -0.2122993040620611, "compression_ratio": 1.6515837104072397, "no_speech_prob": 0.0012446024920791388}, {"id": 194, "seek": 93364, "start": 939.72, "end": 945.6, "text": " So now before I read out what Joshua book has explained here, let's take a look at this diagram and visualize it", "tokens": [50668, 407, 586, 949, 286, 1401, 484, 437, 24005, 1446, 575, 8825, 510, 11, 718, 311, 747, 257, 574, 412, 341, 10686, 293, 23273, 309, 50962], "temperature": 0.0, "avg_logprob": -0.2122993040620611, "compression_ratio": 1.6515837104072397, "no_speech_prob": 0.0012446024920791388}, {"id": 195, "seek": 93364, "start": 945.8, "end": 950.84, "text": " So here we have that elements array that I spoke about before so that's the array", "tokens": [50972, 407, 510, 321, 362, 300, 4959, 10225, 300, 286, 7179, 466, 949, 370, 300, 311, 264, 10225, 51224], "temperature": 0.0, "avg_logprob": -0.2122993040620611, "compression_ratio": 1.6515837104072397, "no_speech_prob": 0.0012446024920791388}, {"id": 196, "seek": 93364, "start": 951.4, "end": 958.4399999999999, "text": " Right here, but the object array that we define. That's what I've illustrated or represented here", "tokens": [51252, 1779, 510, 11, 457, 264, 2657, 10225, 300, 321, 6964, 13, 663, 311, 437, 286, 600, 33875, 420, 10379, 510, 51604], "temperature": 0.0, "avg_logprob": -0.2122993040620611, "compression_ratio": 1.6515837104072397, "no_speech_prob": 0.0012446024920791388}, {"id": 197, "seek": 93364, "start": 958.4399999999999, "end": 960.4399999999999, "text": " And we let's say the objects", "tokens": [51604, 400, 321, 718, 311, 584, 264, 6565, 51704], "temperature": 0.0, "avg_logprob": -0.2122993040620611, "compression_ratio": 1.6515837104072397, "no_speech_prob": 0.0012446024920791388}, {"id": 198, "seek": 96044, "start": 960.6800000000001, "end": 963.4000000000001, "text": " Of our integers and we're adding", "tokens": [50376, 2720, 527, 41674, 293, 321, 434, 5127, 50512], "temperature": 0.0, "avg_logprob": -0.18654909013192864, "compression_ratio": 1.5856353591160222, "no_speech_prob": 0.00590994069352746}, {"id": 199, "seek": 96044, "start": 965.24, "end": 969.4000000000001, "text": " One two three four five six, I don't know why I put a zero in front", "tokens": [50604, 1485, 732, 1045, 1451, 1732, 2309, 11, 286, 500, 380, 458, 983, 286, 829, 257, 4018, 294, 1868, 50812], "temperature": 0.0, "avg_logprob": -0.18654909013192864, "compression_ratio": 1.5856353591160222, "no_speech_prob": 0.00590994069352746}, {"id": 200, "seek": 96044, "start": 969.4000000000001, "end": 971.72, "text": " Let's just think of it as one two three four five six", "tokens": [50812, 961, 311, 445, 519, 295, 309, 382, 472, 732, 1045, 1451, 1732, 2309, 50928], "temperature": 0.0, "avg_logprob": -0.18654909013192864, "compression_ratio": 1.5856353591160222, "no_speech_prob": 0.00590994069352746}, {"id": 201, "seek": 96044, "start": 972.36, "end": 976.2800000000001, "text": " And then this is being added by the push method here", "tokens": [50960, 400, 550, 341, 307, 885, 3869, 538, 264, 2944, 3170, 510, 51156], "temperature": 0.0, "avg_logprob": -0.18654909013192864, "compression_ratio": 1.5856353591160222, "no_speech_prob": 0.00590994069352746}, {"id": 202, "seek": 96044, "start": 979.08, "end": 984.84, "text": " But then for some reason we also pop some of it and we pop three items from the", "tokens": [51296, 583, 550, 337, 512, 1778, 321, 611, 1665, 512, 295, 309, 293, 321, 1665, 1045, 4754, 490, 264, 51584], "temperature": 0.0, "avg_logprob": -0.18654909013192864, "compression_ratio": 1.5856353591160222, "no_speech_prob": 0.00590994069352746}, {"id": 203, "seek": 98484, "start": 985.5600000000001, "end": 991.72, "text": " Array now what happens here is if you don't null out the references the way we've done here", "tokens": [50400, 1587, 3458, 586, 437, 2314, 510, 307, 498, 291, 500, 380, 18184, 484, 264, 15400, 264, 636, 321, 600, 1096, 510, 50708], "temperature": 0.0, "avg_logprob": -0.15377015537685818, "compression_ratio": 1.5643564356435644, "no_speech_prob": 0.00831411313265562}, {"id": 204, "seek": 98484, "start": 992.6, "end": 998.2, "text": " These things are still gonna exist in the array. However for the purpose of the stack class", "tokens": [50752, 1981, 721, 366, 920, 799, 2514, 294, 264, 10225, 13, 2908, 337, 264, 4334, 295, 264, 8630, 1508, 51032], "temperature": 0.0, "avg_logprob": -0.15377015537685818, "compression_ratio": 1.5643564356435644, "no_speech_prob": 0.00831411313265562}, {"id": 205, "seek": 98484, "start": 999.0, "end": 1007.0, "text": " The client will never use these elements these these objects. They'll just exist in memory making them obsolete and", "tokens": [51072, 440, 6423, 486, 1128, 764, 613, 4959, 613, 613, 6565, 13, 814, 603, 445, 2514, 294, 4675, 1455, 552, 46333, 293, 51472], "temperature": 0.0, "avg_logprob": -0.15377015537685818, "compression_ratio": 1.5643564356435644, "no_speech_prob": 0.00831411313265562}, {"id": 206, "seek": 98484, "start": 1007.5600000000001, "end": 1009.5600000000001, "text": " more importantly", "tokens": [51500, 544, 8906, 51600], "temperature": 0.0, "avg_logprob": -0.15377015537685818, "compression_ratio": 1.5643564356435644, "no_speech_prob": 0.00831411313265562}, {"id": 207, "seek": 100956, "start": 1009.56, "end": 1011.56, "text": " Making it a memory leak because it's taking up", "tokens": [50364, 14595, 309, 257, 4675, 17143, 570, 309, 311, 1940, 493, 50464], "temperature": 0.0, "avg_logprob": -0.1512292049549244, "compression_ratio": 1.7751004016064258, "no_speech_prob": 0.005554112605750561}, {"id": 208, "seek": 100956, "start": 1012.3599999999999, "end": 1016.3599999999999, "text": " Resources that could be used for something else and that's the problem here", "tokens": [50504, 29706, 300, 727, 312, 1143, 337, 746, 1646, 293, 300, 311, 264, 1154, 510, 50704], "temperature": 0.0, "avg_logprob": -0.1512292049549244, "compression_ratio": 1.7751004016064258, "no_speech_prob": 0.005554112605750561}, {"id": 209, "seek": 100956, "start": 1016.52, "end": 1017.56, "text": " If you don't know that out", "tokens": [50712, 759, 291, 500, 380, 458, 300, 484, 50764], "temperature": 0.0, "avg_logprob": -0.1512292049549244, "compression_ratio": 1.7751004016064258, "no_speech_prob": 0.005554112605750561}, {"id": 210, "seek": 100956, "start": 1017.56, "end": 1024.36, "text": " So the right way to do it is to treat this array in this way where the way we've done it in the proper pop method", "tokens": [50764, 407, 264, 558, 636, 281, 360, 309, 307, 281, 2387, 341, 10225, 294, 341, 636, 689, 264, 636, 321, 600, 1096, 309, 294, 264, 2296, 1665, 3170, 51104], "temperature": 0.0, "avg_logprob": -0.1512292049549244, "compression_ratio": 1.7751004016064258, "no_speech_prob": 0.005554112605750561}, {"id": 211, "seek": 100956, "start": 1025.1599999999999, "end": 1027.1599999999999, "text": " every time we return", "tokens": [51144, 633, 565, 321, 2736, 51244], "temperature": 0.0, "avg_logprob": -0.1512292049549244, "compression_ratio": 1.7751004016064258, "no_speech_prob": 0.005554112605750561}, {"id": 212, "seek": 100956, "start": 1027.72, "end": 1029.72, "text": " Whatever is in the index of this array", "tokens": [51272, 8541, 307, 294, 264, 8186, 295, 341, 10225, 51372], "temperature": 0.0, "avg_logprob": -0.1512292049549244, "compression_ratio": 1.7751004016064258, "no_speech_prob": 0.005554112605750561}, {"id": 213, "seek": 100956, "start": 1029.96, "end": 1037.3999999999999, "text": " We also ensure that it's not out in that way that reference is eliminated. Sorry the obviously reference is eliminated", "tokens": [51384, 492, 611, 5586, 300, 309, 311, 406, 484, 294, 300, 636, 300, 6408, 307, 20308, 13, 4919, 264, 2745, 6408, 307, 20308, 51756], "temperature": 0.0, "avg_logprob": -0.1512292049549244, "compression_ratio": 1.7751004016064258, "no_speech_prob": 0.005554112605750561}, {"id": 214, "seek": 103740, "start": 1037.8000000000002, "end": 1041.88, "text": " I hope that makes sense. I'm repeating the same point, but you know repetition is important to", "tokens": [50384, 286, 1454, 300, 1669, 2020, 13, 286, 478, 18617, 264, 912, 935, 11, 457, 291, 458, 30432, 307, 1021, 281, 50588], "temperature": 0.0, "avg_logprob": -0.13160842895507813, "compression_ratio": 1.6235294117647059, "no_speech_prob": 0.0041334661655128}, {"id": 215, "seek": 103740, "start": 1042.2800000000002, "end": 1048.76, "text": " Make sense of this and on the note of repeating. I'm going to read out what Joshua Bloch has said about this particular class in the book", "tokens": [50608, 4387, 2020, 295, 341, 293, 322, 264, 3637, 295, 18617, 13, 286, 478, 516, 281, 1401, 484, 437, 24005, 9865, 339, 575, 848, 466, 341, 1729, 1508, 294, 264, 1446, 50932], "temperature": 0.0, "avg_logprob": -0.13160842895507813, "compression_ratio": 1.6235294117647059, "no_speech_prob": 0.0041334661655128}, {"id": 216, "seek": 103740, "start": 1050.2, "end": 1052.2, "text": " He goes like this", "tokens": [51004, 634, 1709, 411, 341, 51104], "temperature": 0.0, "avg_logprob": -0.13160842895507813, "compression_ratio": 1.6235294117647059, "no_speech_prob": 0.0041334661655128}, {"id": 217, "seek": 103740, "start": 1052.76, "end": 1055.24, "text": " There's nothing obviously wrong with this program", "tokens": [51132, 821, 311, 1825, 2745, 2085, 365, 341, 1461, 51256], "temperature": 0.0, "avg_logprob": -0.13160842895507813, "compression_ratio": 1.6235294117647059, "no_speech_prob": 0.0041334661655128}, {"id": 218, "seek": 103740, "start": 1056.52, "end": 1061.0, "text": " You could test it exhaustively and it would pass every test with flying colors", "tokens": [51320, 509, 727, 1500, 309, 14687, 3413, 293, 309, 576, 1320, 633, 1500, 365, 7137, 4577, 51544], "temperature": 0.0, "avg_logprob": -0.13160842895507813, "compression_ratio": 1.6235294117647059, "no_speech_prob": 0.0041334661655128}, {"id": 219, "seek": 103740, "start": 1061.64, "end": 1063.64, "text": " But there's a problem lurking. Ooh", "tokens": [51576, 583, 456, 311, 257, 1154, 35583, 5092, 13, 7951, 51676], "temperature": 0.0, "avg_logprob": -0.13160842895507813, "compression_ratio": 1.6235294117647059, "no_speech_prob": 0.0041334661655128}, {"id": 220, "seek": 106364, "start": 1063.8000000000002, "end": 1067.96, "text": " Indeed indeed loosely speaking the program has a memory leak", "tokens": [50372, 15061, 6451, 37966, 4124, 264, 1461, 575, 257, 4675, 17143, 50580], "temperature": 0.0, "avg_logprob": -0.19544451424245085, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.012238949537277222}, {"id": 221, "seek": 106364, "start": 1068.44, "end": 1072.2, "text": " Which can silently manifest as reduced performance due to the", "tokens": [50604, 3013, 393, 40087, 10067, 382, 9212, 3389, 3462, 281, 264, 50792], "temperature": 0.0, "avg_logprob": -0.19544451424245085, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.012238949537277222}, {"id": 222, "seek": 106364, "start": 1073.0, "end": 1076.92, "text": " increased garbage collectivity or increased memory footprint", "tokens": [50832, 6505, 14150, 2500, 4253, 420, 6505, 4675, 24222, 51028], "temperature": 0.0, "avg_logprob": -0.19544451424245085, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.012238949537277222}, {"id": 223, "seek": 106364, "start": 1077.8000000000002, "end": 1080.68, "text": " Footprint what kind of process would um, yeah, so", "tokens": [51072, 20989, 14030, 437, 733, 295, 1399, 576, 1105, 11, 1338, 11, 370, 51216], "temperature": 0.0, "avg_logprob": -0.19544451424245085, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.012238949537277222}, {"id": 224, "seek": 106364, "start": 1081.3200000000002, "end": 1084.5200000000002, "text": " That's that the increased memory footprint is what I explained here", "tokens": [51248, 663, 311, 300, 264, 6505, 4675, 24222, 307, 437, 286, 8825, 510, 51408], "temperature": 0.0, "avg_logprob": -0.19544451424245085, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.012238949537277222}, {"id": 225, "seek": 106364, "start": 1085.16, "end": 1091.4, "text": " That these three, uh, let's say for this example these three indexes create taking up space in the heap", "tokens": [51440, 663, 613, 1045, 11, 2232, 11, 718, 311, 584, 337, 341, 1365, 613, 1045, 8186, 279, 1884, 1940, 493, 1901, 294, 264, 33591, 51752], "temperature": 0.0, "avg_logprob": -0.19544451424245085, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.012238949537277222}, {"id": 226, "seek": 109140, "start": 1091.64, "end": 1094.92, "text": " He keeps going if a stack grows and then shrinks", "tokens": [50376, 634, 5965, 516, 498, 257, 8630, 13156, 293, 550, 9884, 16431, 50540], "temperature": 0.0, "avg_logprob": -0.13631337621937628, "compression_ratio": 1.6919642857142858, "no_speech_prob": 0.00460854871198535}, {"id": 227, "seek": 109140, "start": 1095.48, "end": 1099.0800000000002, "text": " The objects that were popped off the stack will not be garbage collected", "tokens": [50568, 440, 6565, 300, 645, 21545, 766, 264, 8630, 486, 406, 312, 14150, 11087, 50748], "temperature": 0.0, "avg_logprob": -0.13631337621937628, "compression_ratio": 1.6919642857142858, "no_speech_prob": 0.00460854871198535}, {"id": 228, "seek": 109140, "start": 1099.24, "end": 1103.8000000000002, "text": " Even if the program using the stack has no more references to them", "tokens": [50756, 2754, 498, 264, 1461, 1228, 264, 8630, 575, 572, 544, 15400, 281, 552, 50984], "temperature": 0.0, "avg_logprob": -0.13631337621937628, "compression_ratio": 1.6919642857142858, "no_speech_prob": 0.00460854871198535}, {"id": 229, "seek": 109140, "start": 1104.2800000000002, "end": 1107.8000000000002, "text": " So that is what we saw in the other method the", "tokens": [51008, 407, 300, 307, 437, 321, 1866, 294, 264, 661, 3170, 264, 51184], "temperature": 0.0, "avg_logprob": -0.13631337621937628, "compression_ratio": 1.6919642857142858, "no_speech_prob": 0.00460854871198535}, {"id": 230, "seek": 109140, "start": 1109.0, "end": 1111.0, "text": " When it's wrong", "tokens": [51244, 1133, 309, 311, 2085, 51344], "temperature": 0.0, "avg_logprob": -0.13631337621937628, "compression_ratio": 1.6919642857142858, "no_speech_prob": 0.00460854871198535}, {"id": 231, "seek": 109140, "start": 1111.4, "end": 1113.64, "text": " The way it shouldn't be done. There's nothing out here", "tokens": [51364, 440, 636, 309, 4659, 380, 312, 1096, 13, 821, 311, 1825, 484, 510, 51476], "temperature": 0.0, "avg_logprob": -0.13631337621937628, "compression_ratio": 1.6919642857142858, "no_speech_prob": 0.00460854871198535}, {"id": 232, "seek": 109140, "start": 1114.3600000000001, "end": 1118.3600000000001, "text": " This is because the stack maintains obsolete references to these objects", "tokens": [51512, 639, 307, 570, 264, 8630, 33385, 46333, 15400, 281, 613, 6565, 51712], "temperature": 0.0, "avg_logprob": -0.13631337621937628, "compression_ratio": 1.6919642857142858, "no_speech_prob": 0.00460854871198535}, {"id": 233, "seek": 111836, "start": 1118.84, "end": 1124.04, "text": " An obsolete reference is simply a reference that will never be dereferenced again", "tokens": [50388, 1107, 46333, 6408, 307, 2935, 257, 6408, 300, 486, 1128, 312, 15969, 612, 14672, 797, 50648], "temperature": 0.0, "avg_logprob": -0.10556633170993848, "compression_ratio": 1.9268292682926829, "no_speech_prob": 0.002590593881905079}, {"id": 234, "seek": 111836, "start": 1124.12, "end": 1126.6, "text": " So never be used by the program again", "tokens": [50652, 407, 1128, 312, 1143, 538, 264, 1461, 797, 50776], "temperature": 0.0, "avg_logprob": -0.10556633170993848, "compression_ratio": 1.9268292682926829, "no_speech_prob": 0.002590593881905079}, {"id": 235, "seek": 111836, "start": 1127.8, "end": 1134.28, "text": " In this case any references outside of the active potion of the element array are obsolete", "tokens": [50836, 682, 341, 1389, 604, 15400, 2380, 295, 264, 4967, 39113, 295, 264, 4478, 10225, 366, 46333, 51160], "temperature": 0.0, "avg_logprob": -0.10556633170993848, "compression_ratio": 1.9268292682926829, "no_speech_prob": 0.002590593881905079}, {"id": 236, "seek": 111836, "start": 1134.6, "end": 1139.6399999999999, "text": " It's important to understand what he means by the active potion the active potion really is the", "tokens": [51176, 467, 311, 1021, 281, 1223, 437, 415, 1355, 538, 264, 4967, 39113, 264, 4967, 39113, 534, 307, 264, 51428], "temperature": 0.0, "avg_logprob": -0.10556633170993848, "compression_ratio": 1.9268292682926829, "no_speech_prob": 0.002590593881905079}, {"id": 237, "seek": 111836, "start": 1140.52, "end": 1145.8, "text": " The potion of the array that the client would care about or use the client of this class", "tokens": [51472, 440, 39113, 295, 264, 10225, 300, 264, 6423, 576, 1127, 466, 420, 764, 264, 6423, 295, 341, 1508, 51736], "temperature": 0.0, "avg_logprob": -0.10556633170993848, "compression_ratio": 1.9268292682926829, "no_speech_prob": 0.002590593881905079}, {"id": 238, "seek": 114580, "start": 1146.2, "end": 1150.52, "text": " So in this example, the active portion really is index zero one and two", "tokens": [50384, 407, 294, 341, 1365, 11, 264, 4967, 8044, 534, 307, 8186, 4018, 472, 293, 732, 50600], "temperature": 0.0, "avg_logprob": -0.20324480415570853, "compression_ratio": 1.6901960784313725, "no_speech_prob": 0.006192180328071117}, {"id": 239, "seek": 114580, "start": 1150.9199999999998, "end": 1157.3999999999999, "text": " Not this but here, which is why they should be not out the active portion consists of the elements whose index is less than size", "tokens": [50620, 1726, 341, 457, 510, 11, 597, 307, 983, 436, 820, 312, 406, 484, 264, 4967, 8044, 14689, 295, 264, 4959, 6104, 8186, 307, 1570, 813, 2744, 50944], "temperature": 0.0, "avg_logprob": -0.20324480415570853, "compression_ratio": 1.6901960784313725, "no_speech_prob": 0.006192180328071117}, {"id": 240, "seek": 114580, "start": 1157.48, "end": 1159.8, "text": " Yes, so this size here", "tokens": [50948, 1079, 11, 370, 341, 2744, 510, 51064], "temperature": 0.0, "avg_logprob": -0.20324480415570853, "compression_ratio": 1.6901960784313725, "no_speech_prob": 0.006192180328071117}, {"id": 241, "seek": 114580, "start": 1160.6, "end": 1165.08, "text": " Is what holds the size of the stack and then he sort of concludes that point by stating", "tokens": [51104, 1119, 437, 9190, 264, 2744, 295, 264, 8630, 293, 550, 415, 1333, 295, 24643, 300, 935, 538, 26688, 51328], "temperature": 0.0, "avg_logprob": -0.20324480415570853, "compression_ratio": 1.6901960784313725, "no_speech_prob": 0.006192180328071117}, {"id": 242, "seek": 114580, "start": 1165.56, "end": 1170.9199999999998, "text": " memory leaks in garbage collected languages like java more properly known as", "tokens": [51352, 4675, 28885, 294, 14150, 11087, 8650, 411, 361, 4061, 544, 6108, 2570, 382, 51620], "temperature": 0.0, "avg_logprob": -0.20324480415570853, "compression_ratio": 1.6901960784313725, "no_speech_prob": 0.006192180328071117}, {"id": 243, "seek": 114580, "start": 1171.72, "end": 1174.52, "text": " unintentional object retentions iron citys", "tokens": [51660, 45514, 304, 2657, 1533, 317, 626, 6497, 2307, 82, 51800], "temperature": 0.0, "avg_logprob": -0.20324480415570853, "compression_ratio": 1.6901960784313725, "no_speech_prob": 0.006192180328071117}, {"id": 244, "seek": 117452, "start": 1175.24, "end": 1178.44, "text": " If an object reference is unintentionally retained", "tokens": [50400, 759, 364, 2657, 6408, 307, 45514, 379, 33438, 50560], "temperature": 0.0, "avg_logprob": -0.13318811986864226, "compression_ratio": 1.610655737704918, "no_speech_prob": 0.0033760573714971542}, {"id": 245, "seek": 117452, "start": 1178.68, "end": 1182.2, "text": " Not only is that object excluded from garbage collection", "tokens": [50572, 1726, 787, 307, 300, 2657, 29486, 490, 14150, 5765, 50748], "temperature": 0.0, "avg_logprob": -0.13318811986864226, "compression_ratio": 1.610655737704918, "no_speech_prob": 0.0033760573714971542}, {"id": 246, "seek": 117452, "start": 1182.68, "end": 1184.68, "text": " But so too are any objects", "tokens": [50772, 583, 370, 886, 366, 604, 6565, 50872], "temperature": 0.0, "avg_logprob": -0.13318811986864226, "compression_ratio": 1.610655737704918, "no_speech_prob": 0.0033760573714971542}, {"id": 247, "seek": 117452, "start": 1185.16, "end": 1191.8799999999999, "text": " Reference by that object and so on it's an interesting point there because I've had a conversation with a c++", "tokens": [50896, 1300, 5158, 538, 300, 2657, 293, 370, 322, 309, 311, 364, 1880, 935, 456, 570, 286, 600, 632, 257, 3761, 365, 257, 269, 25472, 51232], "temperature": 0.0, "avg_logprob": -0.13318811986864226, "compression_ratio": 1.610655737704918, "no_speech_prob": 0.0033760573714971542}, {"id": 248, "seek": 117452, "start": 1192.12, "end": 1194.12, "text": " engineer or developer", "tokens": [51244, 11403, 420, 10754, 51344], "temperature": 0.0, "avg_logprob": -0.13318811986864226, "compression_ratio": 1.610655737704918, "no_speech_prob": 0.0033760573714971542}, {"id": 249, "seek": 117452, "start": 1194.68, "end": 1199.6399999999999, "text": " In my company and he kind of made the point, you know, that's kind of the trade-off we make in programming", "tokens": [51372, 682, 452, 2237, 293, 415, 733, 295, 1027, 264, 935, 11, 291, 458, 11, 300, 311, 733, 295, 264, 4923, 12, 4506, 321, 652, 294, 9410, 51620], "temperature": 0.0, "avg_logprob": -0.13318811986864226, "compression_ratio": 1.610655737704918, "no_speech_prob": 0.0033760573714971542}, {"id": 250, "seek": 117452, "start": 1200.12, "end": 1202.12, "text": " the more we sort of", "tokens": [51644, 264, 544, 321, 1333, 295, 51744], "temperature": 0.0, "avg_logprob": -0.13318811986864226, "compression_ratio": 1.610655737704918, "no_speech_prob": 0.0033760573714971542}, {"id": 251, "seek": 120212, "start": 1202.1999999999998, "end": 1208.84, "text": " Give control to the virtual machine in this case the jvm the less we know what's going on", "tokens": [50368, 5303, 1969, 281, 264, 6374, 3479, 294, 341, 1389, 264, 361, 85, 76, 264, 1570, 321, 458, 437, 311, 516, 322, 50700], "temperature": 0.0, "avg_logprob": -0.2015803467993643, "compression_ratio": 1.6906779661016949, "no_speech_prob": 0.009264638647437096}, {"id": 252, "seek": 120212, "start": 1209.8799999999999, "end": 1210.9199999999998, "text": " kind of", "tokens": [50752, 733, 295, 50804], "temperature": 0.0, "avg_logprob": -0.2015803467993643, "compression_ratio": 1.6906779661016949, "no_speech_prob": 0.009264638647437096}, {"id": 253, "seek": 120212, "start": 1210.9199999999998, "end": 1212.9199999999998, "text": " Um behind the scenes under the hood", "tokens": [50804, 3301, 2261, 264, 8026, 833, 264, 13376, 50904], "temperature": 0.0, "avg_logprob": -0.2015803467993643, "compression_ratio": 1.6906779661016949, "no_speech_prob": 0.009264638647437096}, {"id": 254, "seek": 120212, "start": 1213.32, "end": 1221.0, "text": " Uh, the the more abstractions on abstractions we build the less of an understanding we have as to what's going on in our program", "tokens": [50924, 4019, 11, 264, 264, 544, 12649, 626, 322, 12649, 626, 321, 1322, 264, 1570, 295, 364, 3701, 321, 362, 382, 281, 437, 311, 516, 322, 294, 527, 1461, 51308], "temperature": 0.0, "avg_logprob": -0.2015803467993643, "compression_ratio": 1.6906779661016949, "no_speech_prob": 0.009264638647437096}, {"id": 255, "seek": 120212, "start": 1221.6399999999999, "end": 1225.32, "text": " Uh, which is why for instance when it comes to using packages", "tokens": [51340, 4019, 11, 597, 307, 983, 337, 5197, 562, 309, 1487, 281, 1228, 17401, 51524], "temperature": 0.0, "avg_logprob": -0.2015803467993643, "compression_ratio": 1.6906779661016949, "no_speech_prob": 0.009264638647437096}, {"id": 256, "seek": 120212, "start": 1226.04, "end": 1230.52, "text": " Uh, sometimes it can be dangerous and to use Joshua block's term insidious", "tokens": [51560, 4019, 11, 2171, 309, 393, 312, 5795, 293, 281, 764, 24005, 3461, 311, 1433, 1028, 327, 851, 51784], "temperature": 0.0, "avg_logprob": -0.2015803467993643, "compression_ratio": 1.6906779661016949, "no_speech_prob": 0.009264638647437096}, {"id": 257, "seek": 123052, "start": 1231.0, "end": 1237.8, "text": " Because we don't have a really good power or deep understanding of what's happening. Let's say at a memory management level", "tokens": [50388, 1436, 321, 500, 380, 362, 257, 534, 665, 1347, 420, 2452, 3701, 295, 437, 311, 2737, 13, 961, 311, 584, 412, 257, 4675, 4592, 1496, 50728], "temperature": 0.0, "avg_logprob": -0.12347278756610418, "compression_ratio": 1.6763636363636363, "no_speech_prob": 0.010012508369982243}, {"id": 258, "seek": 123052, "start": 1238.28, "end": 1240.28, "text": " so as a good programmer, it's", "tokens": [50752, 370, 382, 257, 665, 32116, 11, 309, 311, 50852], "temperature": 0.0, "avg_logprob": -0.12347278756610418, "compression_ratio": 1.6763636363636363, "no_speech_prob": 0.010012508369982243}, {"id": 259, "seek": 123052, "start": 1241.08, "end": 1242.52, "text": " I guess it's it's", "tokens": [50892, 286, 2041, 309, 311, 309, 311, 50964], "temperature": 0.0, "avg_logprob": -0.12347278756610418, "compression_ratio": 1.6763636363636363, "no_speech_prob": 0.010012508369982243}, {"id": 260, "seek": 123052, "start": 1242.52, "end": 1248.76, "text": " It's important to be kind of prudent and careful about that and and be judicious as to how we write our code", "tokens": [50964, 467, 311, 1021, 281, 312, 733, 295, 582, 24064, 293, 5026, 466, 300, 293, 293, 312, 3747, 3784, 382, 281, 577, 321, 2464, 527, 3089, 51276], "temperature": 0.0, "avg_logprob": -0.12347278756610418, "compression_ratio": 1.6763636363636363, "no_speech_prob": 0.010012508369982243}, {"id": 261, "seek": 123052, "start": 1249.0, "end": 1251.72, "text": " Anyway, before I get carried away, uh, philosophizing about programming", "tokens": [51288, 5684, 11, 949, 286, 483, 9094, 1314, 11, 2232, 11, 14529, 3319, 466, 9410, 51424], "temperature": 0.0, "avg_logprob": -0.12347278756610418, "compression_ratio": 1.6763636363636363, "no_speech_prob": 0.010012508369982243}, {"id": 262, "seek": 123052, "start": 1252.04, "end": 1257.32, "text": " Let's get back to the point here, uh, and the item he states then the fix for this sort of problem is simple", "tokens": [51440, 961, 311, 483, 646, 281, 264, 935, 510, 11, 2232, 11, 293, 264, 3174, 415, 4368, 550, 264, 3191, 337, 341, 1333, 295, 1154, 307, 2199, 51704], "temperature": 0.0, "avg_logprob": -0.12347278756610418, "compression_ratio": 1.6763636363636363, "no_speech_prob": 0.010012508369982243}, {"id": 263, "seek": 125732, "start": 1257.72, "end": 1262.52, "text": " Null out references once they become obsolete. That's what I've shown here. I already showed the solution", "tokens": [50384, 426, 858, 484, 15400, 1564, 436, 1813, 46333, 13, 663, 311, 437, 286, 600, 4898, 510, 13, 286, 1217, 4712, 264, 3827, 50624], "temperature": 0.0, "avg_logprob": -0.15247128310712796, "compression_ratio": 1.6879432624113475, "no_speech_prob": 0.01911964640021324}, {"id": 264, "seek": 125732, "start": 1263.08, "end": 1267.8799999999999, "text": " In the code itself an added benefit of nulling out obsolete references is that if they are", "tokens": [50652, 682, 264, 3089, 2564, 364, 3869, 5121, 295, 18184, 278, 484, 46333, 15400, 307, 300, 498, 436, 366, 50892], "temperature": 0.0, "avg_logprob": -0.15247128310712796, "compression_ratio": 1.6879432624113475, "no_speech_prob": 0.01911964640021324}, {"id": 265, "seek": 125732, "start": 1268.4399999999998, "end": 1274.52, "text": " Subsequently dereference by mistake the program will immediately fail with the null point exception", "tokens": [50920, 8511, 46027, 15969, 5158, 538, 6146, 264, 1461, 486, 4258, 3061, 365, 264, 18184, 935, 11183, 51224], "temperature": 0.0, "avg_logprob": -0.15247128310712796, "compression_ratio": 1.6879432624113475, "no_speech_prob": 0.01911964640021324}, {"id": 266, "seek": 125732, "start": 1275.1599999999999, "end": 1277.1599999999999, "text": " Rather than quietly doing the wrong thing", "tokens": [51256, 16571, 813, 19141, 884, 264, 2085, 551, 51356], "temperature": 0.0, "avg_logprob": -0.15247128310712796, "compression_ratio": 1.6879432624113475, "no_speech_prob": 0.01911964640021324}, {"id": 267, "seek": 125732, "start": 1277.32, "end": 1281.08, "text": " It is always beneficial to detect programming errors as quickly as possible", "tokens": [51364, 467, 307, 1009, 14072, 281, 5531, 9410, 13603, 382, 2661, 382, 1944, 51552], "temperature": 0.0, "avg_logprob": -0.15247128310712796, "compression_ratio": 1.6879432624113475, "no_speech_prob": 0.01911964640021324}, {"id": 268, "seek": 125732, "start": 1281.32, "end": 1284.6799999999998, "text": " Now, I don't know how in this class someone could dereference", "tokens": [51564, 823, 11, 286, 500, 380, 458, 577, 294, 341, 1508, 1580, 727, 15969, 5158, 51732], "temperature": 0.0, "avg_logprob": -0.15247128310712796, "compression_ratio": 1.6879432624113475, "no_speech_prob": 0.01911964640021324}, {"id": 269, "seek": 128468, "start": 1285.24, "end": 1287.24, "text": " parts of this array that", "tokens": [50392, 3166, 295, 341, 10225, 300, 50492], "temperature": 0.0, "avg_logprob": -0.20414552127613741, "compression_ratio": 1.6881720430107527, "no_speech_prob": 0.01262118574231863}, {"id": 270, "seek": 128468, "start": 1288.04, "end": 1294.76, "text": " Theoretically should not be accessed in the stack class, but it's possible if that area was public. Let's say by mistake", "tokens": [50532, 440, 26262, 984, 820, 406, 312, 34211, 294, 264, 8630, 1508, 11, 457, 309, 311, 1944, 498, 300, 1859, 390, 1908, 13, 961, 311, 584, 538, 6146, 50868], "temperature": 0.0, "avg_logprob": -0.20414552127613741, "compression_ratio": 1.6881720430107527, "no_speech_prob": 0.01262118574231863}, {"id": 271, "seek": 128468, "start": 1295.64, "end": 1296.8400000000001, "text": " and", "tokens": [50912, 293, 50972], "temperature": 0.0, "avg_logprob": -0.20414552127613741, "compression_ratio": 1.6881720430107527, "no_speech_prob": 0.01262118574231863}, {"id": 272, "seek": 128468, "start": 1296.8400000000001, "end": 1299.16, "text": " theoretic it would be a theoretical mistake if", "tokens": [50972, 14308, 299, 309, 576, 312, 257, 20864, 6146, 498, 51088], "temperature": 0.0, "avg_logprob": -0.20414552127613741, "compression_ratio": 1.6881720430107527, "no_speech_prob": 0.01262118574231863}, {"id": 273, "seek": 128468, "start": 1299.96, "end": 1301.96, "text": " after the size of the", "tokens": [51128, 934, 264, 2744, 295, 264, 51228], "temperature": 0.0, "avg_logprob": -0.20414552127613741, "compression_ratio": 1.6881720430107527, "no_speech_prob": 0.01262118574231863}, {"id": 274, "seek": 128468, "start": 1302.04, "end": 1307.16, "text": " Stack changes, let's say the size of the stack was three and we only had zero", "tokens": [51232, 37649, 2962, 11, 718, 311, 584, 264, 2744, 295, 264, 8630, 390, 1045, 293, 321, 787, 632, 4018, 51488], "temperature": 0.0, "avg_logprob": -0.20414552127613741, "compression_ratio": 1.6881720430107527, "no_speech_prob": 0.01262118574231863}, {"id": 275, "seek": 128468, "start": 1307.88, "end": 1309.4, "text": " One two and three", "tokens": [51524, 1485, 732, 293, 1045, 51600], "temperature": 0.0, "avg_logprob": -0.20414552127613741, "compression_ratio": 1.6881720430107527, "no_speech_prob": 0.01262118574231863}, {"id": 276, "seek": 130940, "start": 1309.4, "end": 1314.2, "text": " And we still get access to the client to uh four and five that would be a mistake", "tokens": [50364, 400, 321, 920, 483, 2105, 281, 264, 6423, 281, 2232, 1451, 293, 1732, 300, 576, 312, 257, 6146, 50604], "temperature": 0.0, "avg_logprob": -0.18347280928232138, "compression_ratio": 1.6867924528301887, "no_speech_prob": 0.0014323428040370345}, {"id": 277, "seek": 130940, "start": 1314.3600000000001, "end": 1316.1200000000001, "text": " But when we now that out", "tokens": [50612, 583, 562, 321, 586, 300, 484, 50700], "temperature": 0.0, "avg_logprob": -0.18347280928232138, "compression_ratio": 1.6867924528301887, "no_speech_prob": 0.0014323428040370345}, {"id": 278, "seek": 130940, "start": 1316.1200000000001, "end": 1320.52, "text": " The error is explicit and clear because the program will throw a null point exception", "tokens": [50700, 440, 6713, 307, 13691, 293, 1850, 570, 264, 1461, 486, 3507, 257, 18184, 935, 11183, 50920], "temperature": 0.0, "avg_logprob": -0.18347280928232138, "compression_ratio": 1.6867924528301887, "no_speech_prob": 0.0014323428040370345}, {"id": 279, "seek": 130940, "start": 1320.6000000000001, "end": 1326.8400000000001, "text": " But interestingly then he also makes the provision that nulling out object references should be the exception", "tokens": [50924, 583, 25873, 550, 415, 611, 1669, 264, 17225, 300, 18184, 278, 484, 2657, 15400, 820, 312, 264, 11183, 51236], "temperature": 0.0, "avg_logprob": -0.18347280928232138, "compression_ratio": 1.6867924528301887, "no_speech_prob": 0.0014323428040370345}, {"id": 280, "seek": 130940, "start": 1327.3200000000002, "end": 1329.16, "text": " Rather than the norm", "tokens": [51260, 16571, 813, 264, 2026, 51352], "temperature": 0.0, "avg_logprob": -0.18347280928232138, "compression_ratio": 1.6867924528301887, "no_speech_prob": 0.0014323428040370345}, {"id": 281, "seek": 130940, "start": 1329.16, "end": 1330.2800000000002, "text": " so", "tokens": [51352, 370, 51408], "temperature": 0.0, "avg_logprob": -0.18347280928232138, "compression_ratio": 1.6867924528301887, "no_speech_prob": 0.0014323428040370345}, {"id": 282, "seek": 130940, "start": 1330.2800000000002, "end": 1332.52, "text": " Technically this thing what you've done here", "tokens": [51408, 42494, 341, 551, 437, 291, 600, 1096, 510, 51520], "temperature": 0.0, "avg_logprob": -0.18347280928232138, "compression_ratio": 1.6867924528301887, "no_speech_prob": 0.0014323428040370345}, {"id": 283, "seek": 130940, "start": 1333.64, "end": 1337.5600000000002, "text": " Shouldn't always be done. There are better ways to handle this or eliminate", "tokens": [51576, 34170, 380, 1009, 312, 1096, 13, 821, 366, 1101, 2098, 281, 4813, 341, 420, 13819, 51772], "temperature": 0.0, "avg_logprob": -0.18347280928232138, "compression_ratio": 1.6867924528301887, "no_speech_prob": 0.0014323428040370345}, {"id": 284, "seek": 133756, "start": 1338.04, "end": 1343.08, "text": " obsolete references than just nulling out elements in this area. Let's say in this example", "tokens": [50388, 46333, 15400, 813, 445, 18184, 278, 484, 4959, 294, 341, 1859, 13, 961, 311, 584, 294, 341, 1365, 50640], "temperature": 0.0, "avg_logprob": -0.19349668192309002, "compression_ratio": 1.697674418604651, "no_speech_prob": 0.003074861830100417}, {"id": 285, "seek": 133756, "start": 1343.6399999999999, "end": 1347.72, "text": " The best way to eliminate an obsolete reference is to let the variable", "tokens": [50668, 440, 1151, 636, 281, 13819, 364, 46333, 6408, 307, 281, 718, 264, 7006, 50872], "temperature": 0.0, "avg_logprob": -0.19349668192309002, "compression_ratio": 1.697674418604651, "no_speech_prob": 0.003074861830100417}, {"id": 286, "seek": 133756, "start": 1348.2, "end": 1351.0, "text": " That contain the reference fall out of scope", "tokens": [50896, 663, 5304, 264, 6408, 2100, 484, 295, 11923, 51036], "temperature": 0.0, "avg_logprob": -0.19349668192309002, "compression_ratio": 1.697674418604651, "no_speech_prob": 0.003074861830100417}, {"id": 287, "seek": 133756, "start": 1351.6399999999999, "end": 1355.24, "text": " This occurs naturally if you define each variable in the", "tokens": [51068, 639, 11843, 8195, 498, 291, 6964, 1184, 7006, 294, 264, 51248], "temperature": 0.0, "avg_logprob": -0.19349668192309002, "compression_ratio": 1.697674418604651, "no_speech_prob": 0.003074861830100417}, {"id": 288, "seek": 133756, "start": 1355.8799999999999, "end": 1359.24, "text": " narrowest possible scope and this is kind of what I meant by uh", "tokens": [51280, 9432, 377, 1944, 11923, 293, 341, 307, 733, 295, 437, 286, 4140, 538, 2232, 51448], "temperature": 0.0, "avg_logprob": -0.19349668192309002, "compression_ratio": 1.697674418604651, "no_speech_prob": 0.003074861830100417}, {"id": 289, "seek": 133756, "start": 1359.96, "end": 1362.36, "text": " Narrow scoping is one way that allows", "tokens": [51484, 13512, 1892, 795, 26125, 307, 472, 636, 300, 4045, 51604], "temperature": 0.0, "avg_logprob": -0.19349668192309002, "compression_ratio": 1.697674418604651, "no_speech_prob": 0.003074861830100417}, {"id": 290, "seek": 136236, "start": 1363.0, "end": 1370.36, "text": " Eliminating obsolete of references and I did explain what narrow scoping is it's ensuring that when we define a variable and we declare a variable", "tokens": [50396, 2699, 4395, 990, 46333, 295, 15400, 293, 286, 630, 2903, 437, 9432, 795, 26125, 307, 309, 311, 16882, 300, 562, 321, 6964, 257, 7006, 293, 321, 19710, 257, 7006, 50764], "temperature": 0.0, "avg_logprob": -0.17220076392678654, "compression_ratio": 1.7605042016806722, "no_speech_prob": 0.0034294191282242537}, {"id": 291, "seek": 136236, "start": 1370.6, "end": 1371.9599999999998, "text": " It's in the", "tokens": [50776, 467, 311, 294, 264, 50844], "temperature": 0.0, "avg_logprob": -0.17220076392678654, "compression_ratio": 1.7605042016806722, "no_speech_prob": 0.0034294191282242537}, {"id": 292, "seek": 136236, "start": 1371.9599999999998, "end": 1374.6799999999998, "text": " Narrowest possible scope in our source code", "tokens": [50844, 13512, 1892, 377, 1944, 11923, 294, 527, 4009, 3089, 50980], "temperature": 0.0, "avg_logprob": -0.17220076392678654, "compression_ratio": 1.7605042016806722, "no_speech_prob": 0.0034294191282242537}, {"id": 293, "seek": 136236, "start": 1375.0, "end": 1379.4799999999998, "text": " But if he says nulling out shouldn't be the norm why in this example is given in the stack class", "tokens": [50996, 583, 498, 415, 1619, 18184, 278, 484, 4659, 380, 312, 264, 2026, 983, 294, 341, 1365, 307, 2212, 294, 264, 8630, 1508, 51220], "temperature": 0.0, "avg_logprob": -0.17220076392678654, "compression_ratio": 1.7605042016806722, "no_speech_prob": 0.0034294191282242537}, {"id": 294, "seek": 136236, "start": 1379.6399999999999, "end": 1387.0, "text": " Why are we nulling out uh these references? Why not use narrow scoping as he suggested which he says should be the norm", "tokens": [51228, 1545, 366, 321, 18184, 278, 484, 2232, 613, 15400, 30, 1545, 406, 764, 9432, 795, 26125, 382, 415, 10945, 597, 415, 1619, 820, 312, 264, 2026, 51596], "temperature": 0.0, "avg_logprob": -0.17220076392678654, "compression_ratio": 1.7605042016806722, "no_speech_prob": 0.0034294191282242537}, {"id": 295, "seek": 138700, "start": 1387.8, "end": 1393.24, "text": " To put it simply he says it's because the stack class manages its own memory. We see that here", "tokens": [50404, 1407, 829, 309, 2935, 415, 1619, 309, 311, 570, 264, 8630, 1508, 22489, 1080, 1065, 4675, 13, 492, 536, 300, 510, 50676], "temperature": 0.0, "avg_logprob": -0.153257466434093, "compression_ratio": 1.8481675392670156, "no_speech_prob": 0.014955933205783367}, {"id": 296, "seek": 138700, "start": 1393.8, "end": 1395.8, "text": " We see that as to what's what's what's going on here", "tokens": [50704, 492, 536, 300, 382, 281, 437, 311, 437, 311, 437, 311, 516, 322, 510, 50804], "temperature": 0.0, "avg_logprob": -0.153257466434093, "compression_ratio": 1.8481675392670156, "no_speech_prob": 0.014955933205783367}, {"id": 297, "seek": 138700, "start": 1396.92, "end": 1401.56, "text": " Where we're managing the memory I propose this array here", "tokens": [50860, 2305, 321, 434, 11642, 264, 4675, 286, 17421, 341, 10225, 510, 51092], "temperature": 0.0, "avg_logprob": -0.153257466434093, "compression_ratio": 1.8481675392670156, "no_speech_prob": 0.014955933205783367}, {"id": 298, "seek": 138700, "start": 1404.12, "end": 1408.12, "text": " The storage pool consists of the elements of of the elements array", "tokens": [51220, 440, 6725, 7005, 14689, 295, 264, 4959, 295, 295, 264, 4959, 10225, 51420], "temperature": 0.0, "avg_logprob": -0.153257466434093, "compression_ratio": 1.8481675392670156, "no_speech_prob": 0.014955933205783367}, {"id": 299, "seek": 138700, "start": 1408.6, "end": 1412.92, "text": " That's a bit a bit confusing. I know but the elements inside this array. So each", "tokens": [51444, 663, 311, 257, 857, 257, 857, 13181, 13, 286, 458, 457, 264, 4959, 1854, 341, 10225, 13, 407, 1184, 51660], "temperature": 0.0, "avg_logprob": -0.153257466434093, "compression_ratio": 1.8481675392670156, "no_speech_prob": 0.014955933205783367}, {"id": 300, "seek": 141292, "start": 1413.64, "end": 1414.76, "text": " uh", "tokens": [50400, 2232, 50456], "temperature": 0.0, "avg_logprob": -0.12806065877278647, "compression_ratio": 1.9170506912442395, "no_speech_prob": 0.005729784723371267}, {"id": 301, "seek": 141292, "start": 1414.76, "end": 1422.3600000000001, "text": " Individual element which he's added here are the object references not the objects themselves. So these are references themselves", "tokens": [50456, 37292, 4478, 597, 415, 311, 3869, 510, 366, 264, 2657, 15400, 406, 264, 6565, 2969, 13, 407, 613, 366, 15400, 2969, 50836], "temperature": 0.0, "avg_logprob": -0.12806065877278647, "compression_ratio": 1.9170506912442395, "no_speech_prob": 0.005729784723371267}, {"id": 302, "seek": 141292, "start": 1423.0800000000002, "end": 1427.72, "text": " And then the elements in the active portion of the array as defined earlier are allocated", "tokens": [50872, 400, 550, 264, 4959, 294, 264, 4967, 8044, 295, 264, 10225, 382, 7642, 3071, 366, 29772, 51104], "temperature": 0.0, "avg_logprob": -0.12806065877278647, "compression_ratio": 1.9170506912442395, "no_speech_prob": 0.005729784723371267}, {"id": 303, "seek": 141292, "start": 1428.04, "end": 1430.6000000000001, "text": " And those in the remainder of the array are free", "tokens": [51120, 400, 729, 294, 264, 29837, 295, 264, 10225, 366, 1737, 51248], "temperature": 0.0, "avg_logprob": -0.12806065877278647, "compression_ratio": 1.9170506912442395, "no_speech_prob": 0.005729784723371267}, {"id": 304, "seek": 141292, "start": 1431.3200000000002, "end": 1435.24, "text": " So that's the active portion. That's allocated and these are made free", "tokens": [51284, 407, 300, 311, 264, 4967, 8044, 13, 663, 311, 29772, 293, 613, 366, 1027, 1737, 51480], "temperature": 0.0, "avg_logprob": -0.12806065877278647, "compression_ratio": 1.9170506912442395, "no_speech_prob": 0.005729784723371267}, {"id": 305, "seek": 141292, "start": 1437.88, "end": 1441.0800000000002, "text": " The garbage collector has no way of knowing this to the garbage collector", "tokens": [51612, 440, 14150, 23960, 575, 572, 636, 295, 5276, 341, 281, 264, 14150, 23960, 51772], "temperature": 0.0, "avg_logprob": -0.12806065877278647, "compression_ratio": 1.9170506912442395, "no_speech_prob": 0.005729784723371267}, {"id": 306, "seek": 144108, "start": 1441.24, "end": 1447.6399999999999, "text": " All of the object references in the element elements array are equally valid correct because the garbage collector doesn't know", "tokens": [50372, 1057, 295, 264, 2657, 15400, 294, 264, 4478, 4959, 10225, 366, 12309, 7363, 3006, 570, 264, 14150, 23960, 1177, 380, 458, 50692], "temperature": 0.0, "avg_logprob": -0.13159090539683466, "compression_ratio": 1.7967479674796747, "no_speech_prob": 0.003172326134517789}, {"id": 307, "seek": 144108, "start": 1448.04, "end": 1452.6799999999998, "text": " What the purpose of this stack class is the garbage collector isn't that intelligent", "tokens": [50712, 708, 264, 4334, 295, 341, 8630, 1508, 307, 264, 14150, 23960, 1943, 380, 300, 13232, 50944], "temperature": 0.0, "avg_logprob": -0.13159090539683466, "compression_ratio": 1.7967479674796747, "no_speech_prob": 0.003172326134517789}, {"id": 308, "seek": 144108, "start": 1452.84, "end": 1458.36, "text": " Hopefully in the future it would be only the programmer or get up co-pilot perhaps", "tokens": [50952, 10429, 294, 264, 2027, 309, 576, 312, 787, 264, 32116, 420, 483, 493, 598, 12, 79, 31516, 4317, 51228], "temperature": 0.0, "avg_logprob": -0.13159090539683466, "compression_ratio": 1.7967479674796747, "no_speech_prob": 0.003172326134517789}, {"id": 309, "seek": 144108, "start": 1458.84, "end": 1462.1999999999998, "text": " Knows that the inactive portion of the array is unimportant", "tokens": [51252, 10519, 1509, 300, 264, 294, 12596, 8044, 295, 264, 10225, 307, 517, 41654, 51420], "temperature": 0.0, "avg_logprob": -0.13159090539683466, "compression_ratio": 1.7967479674796747, "no_speech_prob": 0.003172326134517789}, {"id": 310, "seek": 144108, "start": 1462.76, "end": 1466.84, "text": " The programmer effectively communicates this fact to the garbage collector by manually", "tokens": [51448, 440, 32116, 8659, 3363, 1024, 341, 1186, 281, 264, 14150, 23960, 538, 16945, 51652], "temperature": 0.0, "avg_logprob": -0.13159090539683466, "compression_ratio": 1.7967479674796747, "no_speech_prob": 0.003172326134517789}, {"id": 311, "seek": 146684, "start": 1467.24, "end": 1473.6399999999999, "text": " Nulling out array elements as soon as they become part of the inactive portion. That's correct. That's what we've done here", "tokens": [50384, 426, 858, 278, 484, 10225, 4959, 382, 2321, 382, 436, 1813, 644, 295, 264, 294, 12596, 8044, 13, 663, 311, 3006, 13, 663, 311, 437, 321, 600, 1096, 510, 50704], "temperature": 0.0, "avg_logprob": -0.1675982917706991, "compression_ratio": 1.5637860082304527, "no_speech_prob": 0.009558443911373615}, {"id": 312, "seek": 146684, "start": 1475.24, "end": 1478.1999999999998, "text": " And then just to conclude that point joshua block states", "tokens": [50784, 400, 550, 445, 281, 16886, 300, 935, 361, 3019, 4398, 3461, 4368, 50932], "temperature": 0.0, "avg_logprob": -0.1675982917706991, "compression_ratio": 1.5637860082304527, "no_speech_prob": 0.009558443911373615}, {"id": 313, "seek": 146684, "start": 1478.6799999999998, "end": 1480.1999999999998, "text": " Generally speaking", "tokens": [50956, 21082, 4124, 51032], "temperature": 0.0, "avg_logprob": -0.1675982917706991, "compression_ratio": 1.5637860082304527, "no_speech_prob": 0.009558443911373615}, {"id": 314, "seek": 146684, "start": 1480.1999999999998, "end": 1485.56, "text": " Whenever a class manages its own memory the programmer should be alert for memory leaks", "tokens": [51032, 14159, 257, 1508, 22489, 1080, 1065, 4675, 264, 32116, 820, 312, 9615, 337, 4675, 28885, 51300], "temperature": 0.0, "avg_logprob": -0.1675982917706991, "compression_ratio": 1.5637860082304527, "no_speech_prob": 0.009558443911373615}, {"id": 315, "seek": 146684, "start": 1485.9599999999998, "end": 1488.6799999999998, "text": " So what are the examples can we think of when it comes to memory leaks?", "tokens": [51320, 407, 437, 366, 264, 5110, 393, 321, 519, 295, 562, 309, 1487, 281, 4675, 28885, 30, 51456], "temperature": 0.0, "avg_logprob": -0.1675982917706991, "compression_ratio": 1.5637860082304527, "no_speech_prob": 0.009558443911373615}, {"id": 316, "seek": 146684, "start": 1489.24, "end": 1491.24, "text": " apropos java and jvm", "tokens": [51484, 1882, 1513, 329, 361, 4061, 293, 361, 85, 76, 51584], "temperature": 0.0, "avg_logprob": -0.1675982917706991, "compression_ratio": 1.5637860082304527, "no_speech_prob": 0.009558443911373615}, {"id": 317, "seek": 149124, "start": 1491.88, "end": 1497.8, "text": " Another example that he's given here is memory leaks that we would see and sorry. I shouldn't say apropos java and jvm", "tokens": [50396, 3996, 1365, 300, 415, 311, 2212, 510, 307, 4675, 28885, 300, 321, 576, 536, 293, 2597, 13, 286, 4659, 380, 584, 1882, 1513, 329, 361, 4061, 293, 361, 85, 76, 50692], "temperature": 0.0, "avg_logprob": -0.12786730811709449, "compression_ratio": 1.7405857740585775, "no_speech_prob": 0.09134247899055481}, {"id": 318, "seek": 149124, "start": 1497.88, "end": 1503.0, "text": " This is just commonly in programming in let's say op programming in general", "tokens": [50696, 639, 307, 445, 12719, 294, 9410, 294, 718, 311, 584, 999, 9410, 294, 2674, 50952], "temperature": 0.0, "avg_logprob": -0.12786730811709449, "compression_ratio": 1.7405857740585775, "no_speech_prob": 0.09134247899055481}, {"id": 319, "seek": 149124, "start": 1503.56, "end": 1506.28, "text": " These examples he's laid out or laid down", "tokens": [50980, 1981, 5110, 415, 311, 9897, 484, 420, 9897, 760, 51116], "temperature": 0.0, "avg_logprob": -0.12786730811709449, "compression_ratio": 1.7405857740585775, "no_speech_prob": 0.09134247899055481}, {"id": 320, "seek": 149124, "start": 1506.92, "end": 1508.92, "text": " could lead to potential memory leaks", "tokens": [51148, 727, 1477, 281, 3995, 4675, 28885, 51248], "temperature": 0.0, "avg_logprob": -0.12786730811709449, "compression_ratio": 1.7405857740585775, "no_speech_prob": 0.09134247899055481}, {"id": 321, "seek": 149124, "start": 1509.96, "end": 1517.32, "text": " And the first one is given is in caches. It's quite common to see memory leaks in caches because of course what happens a lot in a cache is we", "tokens": [51300, 400, 264, 700, 472, 307, 2212, 307, 294, 269, 13272, 13, 467, 311, 1596, 2689, 281, 536, 4675, 28885, 294, 269, 13272, 570, 295, 1164, 437, 2314, 257, 688, 294, 257, 19459, 307, 321, 51668], "temperature": 0.0, "avg_logprob": -0.12786730811709449, "compression_ratio": 1.7405857740585775, "no_speech_prob": 0.09134247899055481}, {"id": 322, "seek": 151732, "start": 1518.28, "end": 1521.56, "text": " Cache data and when we do cache data we cache objects", "tokens": [50412, 383, 6000, 1412, 293, 562, 321, 360, 19459, 1412, 321, 19459, 6565, 50576], "temperature": 0.0, "avg_logprob": -0.18467796241844092, "compression_ratio": 1.740566037735849, "no_speech_prob": 0.012238739058375359}, {"id": 323, "seek": 151732, "start": 1522.12, "end": 1528.52, "text": " There's a high possibility if we don't do it in a smart port art way that it can it can lead to", "tokens": [50604, 821, 311, 257, 1090, 7959, 498, 321, 500, 380, 360, 309, 294, 257, 4069, 2436, 1523, 636, 300, 309, 393, 309, 393, 1477, 281, 50924], "temperature": 0.0, "avg_logprob": -0.18467796241844092, "compression_ratio": 1.740566037735849, "no_speech_prob": 0.012238739058375359}, {"id": 324, "seek": 151732, "start": 1529.96, "end": 1533.48, "text": " Obsolete object references because once an object reference is put in a cache", "tokens": [50996, 20707, 401, 3498, 2657, 15400, 570, 1564, 364, 2657, 6408, 307, 829, 294, 257, 19459, 51172], "temperature": 0.0, "avg_logprob": -0.18467796241844092, "compression_ratio": 1.740566037735849, "no_speech_prob": 0.012238739058375359}, {"id": 325, "seek": 151732, "start": 1533.8799999999999, "end": 1536.6799999999998, "text": " It can be left there long after it stops being relevant", "tokens": [51192, 467, 393, 312, 1411, 456, 938, 934, 309, 10094, 885, 7340, 51332], "temperature": 0.0, "avg_logprob": -0.18467796241844092, "compression_ratio": 1.740566037735849, "no_speech_prob": 0.012238739058375359}, {"id": 326, "seek": 151732, "start": 1536.84, "end": 1541.3999999999999, "text": " Toss being obsolete and the solution for this problem of memory leaks and caches that", "tokens": [51340, 314, 772, 885, 46333, 293, 264, 3827, 337, 341, 1154, 295, 4675, 28885, 293, 269, 13272, 300, 51568], "temperature": 0.0, "avg_logprob": -0.18467796241844092, "compression_ratio": 1.740566037735849, "no_speech_prob": 0.012238739058375359}, {"id": 327, "seek": 154140, "start": 1541.8000000000002, "end": 1545.0, "text": " Joshua blocker suggests it is using weak hash maps", "tokens": [50384, 24005, 3461, 260, 13409, 309, 307, 1228, 5336, 22019, 11317, 50544], "temperature": 0.0, "avg_logprob": -0.12213862875233526, "compression_ratio": 1.7817460317460319, "no_speech_prob": 0.11914896965026855}, {"id": 328, "seek": 154140, "start": 1545.5600000000002, "end": 1550.52, "text": " And when I said in the beginning of the item that there are some ancillary points some concepts", "tokens": [50572, 400, 562, 286, 848, 294, 264, 2863, 295, 264, 3174, 300, 456, 366, 512, 364, 7383, 822, 2793, 512, 10392, 50820], "temperature": 0.0, "avg_logprob": -0.12213862875233526, "compression_ratio": 1.7817460317460319, "no_speech_prob": 0.11914896965026855}, {"id": 329, "seek": 154140, "start": 1550.52, "end": 1555.0800000000002, "text": " We need to understand to really get to the crux of this item", "tokens": [50820, 492, 643, 281, 1223, 281, 534, 483, 281, 264, 5140, 87, 295, 341, 3174, 51048], "temperature": 0.0, "avg_logprob": -0.12213862875233526, "compression_ratio": 1.7817460317460319, "no_speech_prob": 0.11914896965026855}, {"id": 330, "seek": 154140, "start": 1555.96, "end": 1559.3200000000002, "text": " This is what I meant. I've never used a weak hash map in my life", "tokens": [51092, 639, 307, 437, 286, 4140, 13, 286, 600, 1128, 1143, 257, 5336, 22019, 4471, 294, 452, 993, 51260], "temperature": 0.0, "avg_logprob": -0.12213862875233526, "compression_ratio": 1.7817460317460319, "no_speech_prob": 0.11914896965026855}, {"id": 331, "seek": 154140, "start": 1560.0400000000002, "end": 1564.2, "text": " Therefore I had to do a bit of reading and styling as to what weak hash maps are", "tokens": [51296, 7504, 286, 632, 281, 360, 257, 857, 295, 3760, 293, 27944, 382, 281, 437, 5336, 22019, 11317, 366, 51504], "temperature": 0.0, "avg_logprob": -0.12213862875233526, "compression_ratio": 1.7817460317460319, "no_speech_prob": 0.11914896965026855}, {"id": 332, "seek": 154140, "start": 1565.0800000000002, "end": 1569.64, "text": " So just a block states before I get to what a weak hash map is and before I go through the code", "tokens": [51548, 407, 445, 257, 3461, 4368, 949, 286, 483, 281, 437, 257, 5336, 22019, 4471, 307, 293, 949, 286, 352, 807, 264, 3089, 51776], "temperature": 0.0, "avg_logprob": -0.12213862875233526, "compression_ratio": 1.7817460317460319, "no_speech_prob": 0.11914896965026855}, {"id": 333, "seek": 156964, "start": 1570.1200000000001, "end": 1572.44, "text": " Which I've got here. I've got a weak hash map demo", "tokens": [50388, 3013, 286, 600, 658, 510, 13, 286, 600, 658, 257, 5336, 22019, 4471, 10723, 50504], "temperature": 0.0, "avg_logprob": -0.1478767776489258, "compression_ratio": 1.6431372549019607, "no_speech_prob": 0.0027574608102440834}, {"id": 334, "seek": 156964, "start": 1574.3600000000001, "end": 1579.5600000000002, "text": " Joshua block states if you're lucky enough to implement a cache for which an entry is relevant", "tokens": [50600, 24005, 3461, 4368, 498, 291, 434, 6356, 1547, 281, 4445, 257, 19459, 337, 597, 364, 8729, 307, 7340, 50860], "temperature": 0.0, "avg_logprob": -0.1478767776489258, "compression_ratio": 1.6431372549019607, "no_speech_prob": 0.0027574608102440834}, {"id": 335, "seek": 156964, "start": 1579.72, "end": 1585.0800000000002, "text": " Exactly so long as there are references to its key key outside of the cache", "tokens": [50868, 7587, 370, 938, 382, 456, 366, 15400, 281, 1080, 2141, 2141, 2380, 295, 264, 19459, 51136], "temperature": 0.0, "avg_logprob": -0.1478767776489258, "compression_ratio": 1.6431372549019607, "no_speech_prob": 0.0027574608102440834}, {"id": 336, "seek": 156964, "start": 1585.8000000000002, "end": 1588.0400000000002, "text": " Represent the cache as a weak hash map", "tokens": [51172, 19945, 264, 19459, 382, 257, 5336, 22019, 4471, 51284], "temperature": 0.0, "avg_logprob": -0.1478767776489258, "compression_ratio": 1.6431372549019607, "no_speech_prob": 0.0027574608102440834}, {"id": 337, "seek": 156964, "start": 1588.8400000000001, "end": 1592.6000000000001, "text": " Entries will be removed automatically after they become obsolete", "tokens": [51324, 3951, 2244, 486, 312, 7261, 6772, 934, 436, 1813, 46333, 51512], "temperature": 0.0, "avg_logprob": -0.1478767776489258, "compression_ratio": 1.6431372549019607, "no_speech_prob": 0.0027574608102440834}, {"id": 338, "seek": 156964, "start": 1592.68, "end": 1597.0800000000002, "text": " So conceptually that sort of makes sense, doesn't it because the reason we have a cache is to", "tokens": [51516, 407, 3410, 671, 300, 1333, 295, 1669, 2020, 11, 1177, 380, 309, 570, 264, 1778, 321, 362, 257, 19459, 307, 281, 51736], "temperature": 0.0, "avg_logprob": -0.1478767776489258, "compression_ratio": 1.6431372549019607, "no_speech_prob": 0.0027574608102440834}, {"id": 339, "seek": 159708, "start": 1597.3999999999999, "end": 1600.52, "text": " for quick access of data of objects and", "tokens": [50380, 337, 1702, 2105, 295, 1412, 295, 6565, 293, 50536], "temperature": 0.0, "avg_logprob": -0.17557634115219117, "compression_ratio": 1.6683673469387754, "no_speech_prob": 0.0069024814292788506}, {"id": 340, "seek": 159708, "start": 1601.24, "end": 1607.72, "text": " The key in a cache we we got to make sure that whatever data that's in the cache that the keys are", "tokens": [50572, 440, 2141, 294, 257, 19459, 321, 321, 658, 281, 652, 988, 300, 2035, 1412, 300, 311, 294, 264, 19459, 300, 264, 9317, 366, 50896], "temperature": 0.0, "avg_logprob": -0.17557634115219117, "compression_ratio": 1.6683673469387754, "no_speech_prob": 0.0069024814292788506}, {"id": 341, "seek": 159708, "start": 1608.28, "end": 1610.28, "text": " relevant outside of", "tokens": [50924, 7340, 2380, 295, 51024], "temperature": 0.0, "avg_logprob": -0.17557634115219117, "compression_ratio": 1.6683673469387754, "no_speech_prob": 0.0069024814292788506}, {"id": 342, "seek": 159708, "start": 1610.52, "end": 1613.56, "text": " The data structure in the cache in this case. It could be a hash map", "tokens": [51036, 440, 1412, 3877, 294, 264, 19459, 294, 341, 1389, 13, 467, 727, 312, 257, 22019, 4471, 51188], "temperature": 0.0, "avg_logprob": -0.17557634115219117, "compression_ratio": 1.6683673469387754, "no_speech_prob": 0.0069024814292788506}, {"id": 343, "seek": 159708, "start": 1614.1999999999998, "end": 1620.84, "text": " So that ensures that we don't have obsolete object references and he keeps going that remember that", "tokens": [51220, 407, 300, 28111, 300, 321, 500, 380, 362, 46333, 2657, 15400, 293, 415, 5965, 516, 300, 1604, 300, 51552], "temperature": 0.0, "avg_logprob": -0.17557634115219117, "compression_ratio": 1.6683673469387754, "no_speech_prob": 0.0069024814292788506}, {"id": 344, "seek": 162084, "start": 1621.24, "end": 1623.24, "text": " Weak hash map is useful", "tokens": [50384, 492, 514, 22019, 4471, 307, 4420, 50484], "temperature": 0.0, "avg_logprob": -0.1555777799735949, "compression_ratio": 1.7248062015503876, "no_speech_prob": 0.010012177750468254}, {"id": 345, "seek": 162084, "start": 1623.24, "end": 1630.04, "text": " Only if the desired lifetime of cache entries is determined by external references to the key not the valley", "tokens": [50484, 5686, 498, 264, 14721, 11364, 295, 19459, 23041, 307, 9540, 538, 8320, 15400, 281, 264, 2141, 406, 264, 17636, 50824], "temperature": 0.0, "avg_logprob": -0.1555777799735949, "compression_ratio": 1.7248062015503876, "no_speech_prob": 0.010012177750468254}, {"id": 346, "seek": 162084, "start": 1631.1599999999999, "end": 1635.08, "text": " Okay, now let's understand what a weak hash map is", "tokens": [50880, 1033, 11, 586, 718, 311, 1223, 437, 257, 5336, 22019, 4471, 307, 51076], "temperature": 0.0, "avg_logprob": -0.1555777799735949, "compression_ratio": 1.7248062015503876, "no_speech_prob": 0.010012177750468254}, {"id": 347, "seek": 162084, "start": 1635.72, "end": 1642.04, "text": " Firstly before we get to the code, let's get through some definitions. It's important to get a firstly a theoretical understanding", "tokens": [51108, 20042, 949, 321, 483, 281, 264, 3089, 11, 718, 311, 483, 807, 512, 21988, 13, 467, 311, 1021, 281, 483, 257, 27376, 257, 20864, 3701, 51424], "temperature": 0.0, "avg_logprob": -0.1555777799735949, "compression_ratio": 1.7248062015503876, "no_speech_prob": 0.010012177750468254}, {"id": 348, "seek": 162084, "start": 1642.04, "end": 1644.04, "text": " a conceptual understanding of what this is", "tokens": [51424, 257, 24106, 3701, 295, 437, 341, 307, 51524], "temperature": 0.0, "avg_logprob": -0.1555777799735949, "compression_ratio": 1.7248062015503876, "no_speech_prob": 0.010012177750468254}, {"id": 349, "seek": 162084, "start": 1644.4399999999998, "end": 1650.28, "text": " Uh, and one of the best definitions as for you sure that I found is by about dunks blog", "tokens": [51544, 4019, 11, 293, 472, 295, 264, 1151, 21988, 382, 337, 291, 988, 300, 286, 1352, 307, 538, 466, 10234, 1694, 6968, 51836], "temperature": 0.0, "avg_logprob": -0.1555777799735949, "compression_ratio": 1.7248062015503876, "no_speech_prob": 0.010012177750468254}, {"id": 350, "seek": 165084, "start": 1651.0, "end": 1659.0, "text": " It's this blog now that's on profile is it's this blog post here a guide to weak hash map in java", "tokens": [50372, 467, 311, 341, 6968, 586, 300, 311, 322, 7964, 307, 309, 311, 341, 6968, 2183, 510, 257, 5934, 281, 5336, 22019, 4471, 294, 361, 4061, 50772], "temperature": 0.0, "avg_logprob": -0.14860135537606697, "compression_ratio": 1.6787564766839378, "no_speech_prob": 0.007119572255760431}, {"id": 351, "seek": 165084, "start": 1660.6, "end": 1662.6, "text": " And he states", "tokens": [50852, 400, 415, 4368, 50952], "temperature": 0.0, "avg_logprob": -0.14860135537606697, "compression_ratio": 1.6787564766839378, "no_speech_prob": 0.007119572255760431}, {"id": 352, "seek": 165084, "start": 1662.6799999999998, "end": 1670.04, "text": " Simply put the weak hash map is a hash table based implementation of the map interface with keys that are of a", "tokens": [50956, 19596, 829, 264, 5336, 22019, 4471, 307, 257, 22019, 3199, 2361, 11420, 295, 264, 4471, 9226, 365, 9317, 300, 366, 295, 257, 51324], "temperature": 0.0, "avg_logprob": -0.14860135537606697, "compression_ratio": 1.6787564766839378, "no_speech_prob": 0.007119572255760431}, {"id": 353, "seek": 165084, "start": 1670.6799999999998, "end": 1676.6, "text": " Weak reference type and now we have another term here. What are weak references for that will open up", "tokens": [51356, 492, 514, 6408, 2010, 293, 586, 321, 362, 1071, 1433, 510, 13, 708, 366, 5336, 15400, 337, 300, 486, 1269, 493, 51652], "temperature": 0.0, "avg_logprob": -0.14860135537606697, "compression_ratio": 1.6787564766839378, "no_speech_prob": 0.007119572255760431}, {"id": 354, "seek": 167660, "start": 1677.24, "end": 1680.76, "text": " The best explanation that I found is this stackover flow answer", "tokens": [50396, 440, 1151, 10835, 300, 286, 1352, 307, 341, 8630, 3570, 3095, 1867, 50572], "temperature": 0.0, "avg_logprob": -0.16130365371704103, "compression_ratio": 1.6706349206349207, "no_speech_prob": 0.002757274080067873}, {"id": 355, "seek": 167660, "start": 1681.32, "end": 1685.24, "text": " Uh, and in fact, this user says that it's by ether necklace", "tokens": [50600, 4019, 11, 293, 294, 1186, 11, 341, 4195, 1619, 300, 309, 311, 538, 37096, 24563, 50796], "temperature": 0.0, "avg_logprob": -0.16130365371704103, "compression_ratio": 1.6706349206349207, "no_speech_prob": 0.002757274080067873}, {"id": 356, "seek": 167660, "start": 1685.6399999999999, "end": 1688.12, "text": " But the name of this user is michael myers", "tokens": [50816, 583, 264, 1315, 295, 341, 4195, 307, 6031, 4300, 452, 433, 50940], "temperature": 0.0, "avg_logprob": -0.16130365371704103, "compression_ratio": 1.6706349206349207, "no_speech_prob": 0.002757274080067873}, {"id": 357, "seek": 167660, "start": 1689.0, "end": 1695.0, "text": " And a weak reference simply put is a reference that isn't strong enough to force an object to remain in memory", "tokens": [50984, 400, 257, 5336, 6408, 2935, 829, 307, 257, 6408, 300, 1943, 380, 2068, 1547, 281, 3464, 364, 2657, 281, 6222, 294, 4675, 51284], "temperature": 0.0, "avg_logprob": -0.16130365371704103, "compression_ratio": 1.6706349206349207, "no_speech_prob": 0.002757274080067873}, {"id": 358, "seek": 167660, "start": 1695.56, "end": 1701.7199999999998, "text": " weak references allow you to leverage the garbage collectors ability to determine the reach ability for you", "tokens": [51312, 5336, 15400, 2089, 291, 281, 13982, 264, 14150, 35384, 3485, 281, 6997, 264, 2524, 3485, 337, 291, 51620], "temperature": 0.0, "avg_logprob": -0.16130365371704103, "compression_ratio": 1.6706349206349207, "no_speech_prob": 0.002757274080067873}, {"id": 359, "seek": 167660, "start": 1702.12, "end": 1704.12, "text": " So you don't have to do it yourself", "tokens": [51640, 407, 291, 500, 380, 362, 281, 360, 309, 1803, 51740], "temperature": 0.0, "avg_logprob": -0.16130365371704103, "compression_ratio": 1.6706349206349207, "no_speech_prob": 0.002757274080067873}, {"id": 360, "seek": 170412, "start": 1704.36, "end": 1709.3999999999999, "text": " But also in this article by bio dung. He's given some pretty good definitions where he", "tokens": [50376, 583, 611, 294, 341, 7222, 538, 12198, 274, 1063, 13, 634, 311, 2212, 512, 1238, 665, 21988, 689, 415, 50628], "temperature": 0.0, "avg_logprob": -0.20763756601434005, "compression_ratio": 1.7106382978723405, "no_speech_prob": 0.0008425461710430682}, {"id": 361, "seek": 170412, "start": 1710.36, "end": 1716.1999999999998, "text": " Decerns between strong soft and weak references. So a strong reference is what would normally be when we", "tokens": [50676, 12427, 1248, 82, 1296, 2068, 2787, 293, 5336, 15400, 13, 407, 257, 2068, 6408, 307, 437, 576, 5646, 312, 562, 321, 50968], "temperature": 0.0, "avg_logprob": -0.20763756601434005, "compression_ratio": 1.7106382978723405, "no_speech_prob": 0.0008425461710430682}, {"id": 362, "seek": 170412, "start": 1716.76, "end": 1720.76, "text": " Declare a variable like this. Let's say that's a strong reference", "tokens": [50996, 1346, 3474, 543, 257, 7006, 411, 341, 13, 961, 311, 584, 300, 311, 257, 2068, 6408, 51196], "temperature": 0.0, "avg_logprob": -0.20763756601434005, "compression_ratio": 1.7106382978723405, "no_speech_prob": 0.0008425461710430682}, {"id": 363, "seek": 170412, "start": 1721.32, "end": 1726.4399999999998, "text": " And this is the most common type and it's not eligible for garbage collection", "tokens": [51224, 400, 341, 307, 264, 881, 2689, 2010, 293, 309, 311, 406, 14728, 337, 14150, 5765, 51480], "temperature": 0.0, "avg_logprob": -0.20763756601434005, "compression_ratio": 1.7106382978723405, "no_speech_prob": 0.0008425461710430682}, {"id": 364, "seek": 170412, "start": 1726.9199999999998, "end": 1731.3999999999999, "text": " A soft reference is eligible for garbage collection, but only when", "tokens": [51504, 316, 2787, 6408, 307, 14728, 337, 14150, 5765, 11, 457, 787, 562, 51728], "temperature": 0.0, "avg_logprob": -0.20763756601434005, "compression_ratio": 1.7106382978723405, "no_speech_prob": 0.0008425461710430682}, {"id": 365, "seek": 173140, "start": 1732.1200000000001, "end": 1737.64, "text": " Uh, the jvm needs more memory. It absolutely needs more memory. And in fact, he's made that point here", "tokens": [50400, 4019, 11, 264, 361, 85, 76, 2203, 544, 4675, 13, 467, 3122, 2203, 544, 4675, 13, 400, 294, 1186, 11, 415, 311, 1027, 300, 935, 510, 50676], "temperature": 0.0, "avg_logprob": -0.1441737461090088, "compression_ratio": 1.740909090909091, "no_speech_prob": 0.0035371705889701843}, {"id": 366, "seek": 173140, "start": 1738.2800000000002, "end": 1741.16, "text": " It's it's kind of like a last resort kind of thing", "tokens": [50708, 467, 311, 309, 311, 733, 295, 411, 257, 1036, 19606, 733, 295, 551, 50852], "temperature": 0.0, "avg_logprob": -0.1441737461090088, "compression_ratio": 1.740909090909091, "no_speech_prob": 0.0035371705889701843}, {"id": 367, "seek": 173140, "start": 1741.64, "end": 1747.16, "text": " But a weak reference is not that a weak reference doesn't the garbage collector is given volition", "tokens": [50876, 583, 257, 5336, 6408, 307, 406, 300, 257, 5336, 6408, 1177, 380, 264, 14150, 23960, 307, 2212, 1996, 849, 51152], "temperature": 0.0, "avg_logprob": -0.1441737461090088, "compression_ratio": 1.740909090909091, "no_speech_prob": 0.0035371705889701843}, {"id": 368, "seek": 173140, "start": 1747.8000000000002, "end": 1753.24, "text": " Where it can so eagerly garbage collect it won't wait until it needs more memory. It'll just", "tokens": [51184, 2305, 309, 393, 370, 18259, 356, 14150, 2500, 309, 1582, 380, 1699, 1826, 309, 2203, 544, 4675, 13, 467, 603, 445, 51456], "temperature": 0.0, "avg_logprob": -0.1441737461090088, "compression_ratio": 1.740909090909091, "no_speech_prob": 0.0035371705889701843}, {"id": 369, "seek": 173140, "start": 1754.6000000000001, "end": 1757.64, "text": " Use it up if required and that's where", "tokens": [51524, 8278, 309, 493, 498, 4739, 293, 300, 311, 689, 51676], "temperature": 0.0, "avg_logprob": -0.1441737461090088, "compression_ratio": 1.740909090909091, "no_speech_prob": 0.0035371705889701843}, {"id": 370, "seek": 175764, "start": 1758.3600000000001, "end": 1762.3600000000001, "text": " Using a weak reference in the context of a cache helps us to eliminate", "tokens": [50400, 11142, 257, 5336, 6408, 294, 264, 4319, 295, 257, 19459, 3665, 505, 281, 13819, 50600], "temperature": 0.0, "avg_logprob": -0.16366961869326505, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.008980604819953442}, {"id": 371, "seek": 175764, "start": 1762.8400000000001, "end": 1764.8400000000001, "text": " obsolete object references", "tokens": [50624, 46333, 2657, 15400, 50724], "temperature": 0.0, "avg_logprob": -0.16366961869326505, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.008980604819953442}, {"id": 372, "seek": 175764, "start": 1765.0800000000002, "end": 1769.5600000000002, "text": " So in any case, that's another definition of a weak reference. There's also this article", "tokens": [50736, 407, 294, 604, 1389, 11, 300, 311, 1071, 7123, 295, 257, 5336, 6408, 13, 821, 311, 611, 341, 7222, 50960], "temperature": 0.0, "avg_logprob": -0.16366961869326505, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.008980604819953442}, {"id": 373, "seek": 175764, "start": 1770.1200000000001, "end": 1776.68, "text": " That I read which is quite good. I think it gave a pretty good practical and sort of applicative explanation of what", "tokens": [50988, 663, 286, 1401, 597, 307, 1596, 665, 13, 286, 519, 309, 2729, 257, 1238, 665, 8496, 293, 1333, 295, 2580, 1166, 10835, 295, 437, 51316], "temperature": 0.0, "avg_logprob": -0.16366961869326505, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.008980604819953442}, {"id": 374, "seek": 175764, "start": 1777.4, "end": 1783.16, "text": " Well, the title of the article is practical uses of weak references by this user", "tokens": [51352, 1042, 11, 264, 4876, 295, 264, 7222, 307, 8496, 4960, 295, 5336, 15400, 538, 341, 4195, 51640], "temperature": 0.0, "avg_logprob": -0.16366961869326505, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.008980604819953442}, {"id": 375, "seek": 178316, "start": 1783.8000000000002, "end": 1785.8000000000002, "text": " philosophical geek or I guess Ben Watson", "tokens": [50396, 25066, 36162, 420, 286, 2041, 3964, 25640, 50496], "temperature": 0.0, "avg_logprob": -0.13627640100625846, "compression_ratio": 1.6240601503759398, "no_speech_prob": 0.02842765860259533}, {"id": 376, "seek": 178316, "start": 1786.2, "end": 1789.0, "text": " I'll leave a link to this down below too where he goes through", "tokens": [50516, 286, 603, 1856, 257, 2113, 281, 341, 760, 2507, 886, 689, 415, 1709, 807, 50656], "temperature": 0.0, "avg_logprob": -0.13627640100625846, "compression_ratio": 1.6240601503759398, "no_speech_prob": 0.02842765860259533}, {"id": 377, "seek": 178316, "start": 1789.5600000000002, "end": 1791.5600000000002, "text": " Well, he starts off the article by saying that", "tokens": [50684, 1042, 11, 415, 3719, 766, 264, 7222, 538, 1566, 300, 50784], "temperature": 0.0, "avg_logprob": -0.13627640100625846, "compression_ratio": 1.6240601503759398, "no_speech_prob": 0.02842765860259533}, {"id": 378, "seek": 178316, "start": 1792.2, "end": 1795.4, "text": " You rarely use weak references, but if you do use them", "tokens": [50816, 509, 13752, 764, 5336, 15400, 11, 457, 498, 291, 360, 764, 552, 50976], "temperature": 0.0, "avg_logprob": -0.13627640100625846, "compression_ratio": 1.6240601503759398, "no_speech_prob": 0.02842765860259533}, {"id": 379, "seek": 178316, "start": 1796.28, "end": 1803.24, "text": " It'll mostly be for framework building or when it comes to something at more of the memory management level and", "tokens": [51020, 467, 603, 5240, 312, 337, 8388, 2390, 420, 562, 309, 1487, 281, 746, 412, 544, 295, 264, 4675, 4592, 1496, 293, 51368], "temperature": 0.0, "avg_logprob": -0.13627640100625846, "compression_ratio": 1.6240601503759398, "no_speech_prob": 0.02842765860259533}, {"id": 380, "seek": 178316, "start": 1803.48, "end": 1806.6000000000001, "text": " Java programmers at least day-to-day Java programmers like myself", "tokens": [51380, 10745, 41504, 412, 1935, 786, 12, 1353, 12, 810, 10745, 41504, 411, 2059, 51536], "temperature": 0.0, "avg_logprob": -0.13627640100625846, "compression_ratio": 1.6240601503759398, "no_speech_prob": 0.02842765860259533}, {"id": 381, "seek": 178316, "start": 1808.0400000000002, "end": 1810.76, "text": " Don't don't really do a lot of memory management", "tokens": [51608, 1468, 380, 500, 380, 534, 360, 257, 688, 295, 4675, 4592, 51744], "temperature": 0.0, "avg_logprob": -0.13627640100625846, "compression_ratio": 1.6240601503759398, "no_speech_prob": 0.02842765860259533}, {"id": 382, "seek": 181076, "start": 1811.56, "end": 1818.04, "text": " But this is a good article to read just for learning. So back to the weak hash map definition, which uses weak reference type, by the way", "tokens": [50404, 583, 341, 307, 257, 665, 7222, 281, 1401, 445, 337, 2539, 13, 407, 646, 281, 264, 5336, 22019, 4471, 7123, 11, 597, 4960, 5336, 6408, 2010, 11, 538, 264, 636, 50728], "temperature": 0.0, "avg_logprob": -0.18011071708764922, "compression_ratio": 1.6444444444444444, "no_speech_prob": 0.002359442412853241}, {"id": 383, "seek": 181076, "start": 1818.84, "end": 1820.36, "text": " file then continues", "tokens": [50768, 3991, 550, 6515, 50844], "temperature": 0.0, "avg_logprob": -0.18011071708764922, "compression_ratio": 1.6444444444444444, "no_speech_prob": 0.002359442412853241}, {"id": 384, "seek": 181076, "start": 1820.36, "end": 1824.04, "text": " An entry in a weak hash map will automatically be removed", "tokens": [50844, 1107, 8729, 294, 257, 5336, 22019, 4471, 486, 6772, 312, 7261, 51028], "temperature": 0.0, "avg_logprob": -0.18011071708764922, "compression_ratio": 1.6444444444444444, "no_speech_prob": 0.002359442412853241}, {"id": 385, "seek": 181076, "start": 1824.76, "end": 1831.72, "text": " When its key is no longer in ordinary use meaning that there is no single reference that point to that key", "tokens": [51064, 1133, 1080, 2141, 307, 572, 2854, 294, 10547, 764, 3620, 300, 456, 307, 572, 2167, 6408, 300, 935, 281, 300, 2141, 51412], "temperature": 0.0, "avg_logprob": -0.18011071708764922, "compression_ratio": 1.6444444444444444, "no_speech_prob": 0.002359442412853241}, {"id": 386, "seek": 181076, "start": 1833.16, "end": 1835.96, "text": " When the garbage so what this bit means here", "tokens": [51484, 1133, 264, 14150, 370, 437, 341, 857, 1355, 510, 51624], "temperature": 0.0, "avg_logprob": -0.18011071708764922, "compression_ratio": 1.6444444444444444, "no_speech_prob": 0.002359442412853241}, {"id": 387, "seek": 181076, "start": 1837.48, "end": 1838.6, "text": " is", "tokens": [51700, 307, 51756], "temperature": 0.0, "avg_logprob": -0.18011071708764922, "compression_ratio": 1.6444444444444444, "no_speech_prob": 0.002359442412853241}, {"id": 388, "seek": 183860, "start": 1838.6799999999998, "end": 1841.56, "text": " In the the key value pairs and in the hash map", "tokens": [50368, 682, 264, 264, 2141, 2158, 15494, 293, 294, 264, 22019, 4471, 50512], "temperature": 0.0, "avg_logprob": -0.1573674472761743, "compression_ratio": 1.6470588235294117, "no_speech_prob": 0.0010815815767273307}, {"id": 389, "seek": 183860, "start": 1842.04, "end": 1846.1999999999998, "text": " If the key isn't being used anywhere outside of the data structure outside of the cache", "tokens": [50536, 759, 264, 2141, 1943, 380, 885, 1143, 4992, 2380, 295, 264, 1412, 3877, 2380, 295, 264, 19459, 50744], "temperature": 0.0, "avg_logprob": -0.1573674472761743, "compression_ratio": 1.6470588235294117, "no_speech_prob": 0.0010815815767273307}, {"id": 390, "seek": 183860, "start": 1846.84, "end": 1850.6799999999998, "text": " That means that there's no single reference. Therefore, it just could be removed", "tokens": [50776, 663, 1355, 300, 456, 311, 572, 2167, 6408, 13, 7504, 11, 309, 445, 727, 312, 7261, 50968], "temperature": 0.0, "avg_logprob": -0.1573674472761743, "compression_ratio": 1.6470588235294117, "no_speech_prob": 0.0010815815767273307}, {"id": 391, "seek": 183860, "start": 1851.32, "end": 1853.56, "text": " automatically and and having a weak reference helps", "tokens": [51000, 6772, 293, 293, 1419, 257, 5336, 6408, 3665, 51112], "temperature": 0.0, "avg_logprob": -0.1573674472761743, "compression_ratio": 1.6470588235294117, "no_speech_prob": 0.0010815815767273307}, {"id": 392, "seek": 183860, "start": 1855.08, "end": 1861.6399999999999, "text": " When the garbage collection process discards a key its entry is effectively removed from the map", "tokens": [51188, 1133, 264, 14150, 5765, 1399, 2983, 2287, 257, 2141, 1080, 8729, 307, 8659, 7261, 490, 264, 4471, 51516], "temperature": 0.0, "avg_logprob": -0.1573674472761743, "compression_ratio": 1.6470588235294117, "no_speech_prob": 0.0010815815767273307}, {"id": 393, "seek": 186164, "start": 1862.0400000000002, "end": 1867.4, "text": " So this class behaves somewhat differently from other map implementations because", "tokens": [50384, 407, 341, 1508, 36896, 8344, 7614, 490, 661, 4471, 4445, 763, 570, 50652], "temperature": 0.0, "avg_logprob": -0.12684577220195048, "compression_ratio": 1.6581632653061225, "no_speech_prob": 0.04270971566438675}, {"id": 394, "seek": 186164, "start": 1867.96, "end": 1872.6000000000001, "text": " normal map implementations would have a strong reference and you can't just", "tokens": [50680, 2710, 4471, 4445, 763, 576, 362, 257, 2068, 6408, 293, 291, 393, 380, 445, 50912], "temperature": 0.0, "avg_logprob": -0.12684577220195048, "compression_ratio": 1.6581632653061225, "no_speech_prob": 0.04270971566438675}, {"id": 395, "seek": 186164, "start": 1874.2, "end": 1878.0400000000002, "text": " Let the garbage collector just do garbage collection as it wishes eagerly", "tokens": [50992, 961, 264, 14150, 23960, 445, 360, 14150, 5765, 382, 309, 15065, 18259, 356, 51184], "temperature": 0.0, "avg_logprob": -0.12684577220195048, "compression_ratio": 1.6581632653061225, "no_speech_prob": 0.04270971566438675}, {"id": 396, "seek": 186164, "start": 1879.16, "end": 1881.88, "text": " It's a bit more tighter and a bit more stricter", "tokens": [51240, 467, 311, 257, 857, 544, 30443, 293, 257, 857, 544, 1056, 299, 391, 51376], "temperature": 0.0, "avg_logprob": -0.12684577220195048, "compression_ratio": 1.6581632653061225, "no_speech_prob": 0.04270971566438675}, {"id": 397, "seek": 186164, "start": 1882.68, "end": 1885.0, "text": " I just realized that I didn't go through this", "tokens": [51416, 286, 445, 5334, 300, 286, 994, 380, 352, 807, 341, 51532], "temperature": 0.0, "avg_logprob": -0.12684577220195048, "compression_ratio": 1.6581632653061225, "no_speech_prob": 0.04270971566438675}, {"id": 398, "seek": 188500, "start": 1885.64, "end": 1893.24, "text": " Canonicalized a mapping bit that is in fact from the oracle docs that defines what weak references are", "tokens": [50396, 27666, 804, 1602, 257, 18350, 857, 300, 307, 294, 1186, 490, 264, 420, 7041, 45623, 300, 23122, 437, 5336, 15400, 366, 50776], "temperature": 0.0, "avg_logprob": -0.2026316485827482, "compression_ratio": 1.7386934673366834, "no_speech_prob": 0.028429152444005013}, {"id": 399, "seek": 188500, "start": 1893.24, "end": 1897.4, "text": " So the doc state weak reference objects which do not prevent", "tokens": [50776, 407, 264, 3211, 1785, 5336, 6408, 6565, 597, 360, 406, 4871, 50984], "temperature": 0.0, "avg_logprob": -0.2026316485827482, "compression_ratio": 1.7386934673366834, "no_speech_prob": 0.028429152444005013}, {"id": 400, "seek": 188500, "start": 1898.12, "end": 1903.16, "text": " Their reference from being made finalized finalizable finalized and they're reclaimed", "tokens": [51020, 6710, 6408, 490, 885, 1027, 2572, 1602, 2572, 22395, 2572, 1602, 293, 436, 434, 850, 22642, 51272], "temperature": 0.0, "avg_logprob": -0.2026316485827482, "compression_ratio": 1.7386934673366834, "no_speech_prob": 0.028429152444005013}, {"id": 401, "seek": 188500, "start": 1904.6, "end": 1907.4, "text": " weak references are most awfully used to implement", "tokens": [51344, 5336, 15400, 366, 881, 47976, 1143, 281, 4445, 51484], "temperature": 0.0, "avg_logprob": -0.2026316485827482, "compression_ratio": 1.7386934673366834, "no_speech_prob": 0.028429152444005013}, {"id": 402, "seek": 188500, "start": 1908.68, "end": 1911.64, "text": " Canonicalizing mappings. What does that mean?", "tokens": [51548, 27666, 804, 3319, 463, 28968, 13, 708, 775, 300, 914, 30, 51696], "temperature": 0.0, "avg_logprob": -0.2026316485827482, "compression_ratio": 1.7386934673366834, "no_speech_prob": 0.028429152444005013}, {"id": 403, "seek": 191164, "start": 1912.5200000000002, "end": 1914.8400000000001, "text": " So this is another really good blog post. I read", "tokens": [50408, 407, 341, 307, 1071, 534, 665, 6968, 2183, 13, 286, 1401, 50524], "temperature": 0.0, "avg_logprob": -0.3134153154161241, "compression_ratio": 1.5458937198067633, "no_speech_prob": 0.01691046729683876}, {"id": 404, "seek": 191164, "start": 1918.2800000000002, "end": 1921.0, "text": " On weak references, sorry I had to find the blog post here", "tokens": [50696, 1282, 5336, 15400, 11, 2597, 286, 632, 281, 915, 264, 6968, 2183, 510, 50832], "temperature": 0.0, "avg_logprob": -0.3134153154161241, "compression_ratio": 1.5458937198067633, "no_speech_prob": 0.01691046729683876}, {"id": 405, "seek": 191164, "start": 1922.8400000000001, "end": 1927.64, "text": " And the title of the blog post is itself canonicalized mappings. I'll leave all into that down below", "tokens": [50924, 400, 264, 4876, 295, 264, 6968, 2183, 307, 2564, 46491, 1602, 463, 28968, 13, 286, 603, 1856, 439, 666, 300, 760, 2507, 51164], "temperature": 0.0, "avg_logprob": -0.3134153154161241, "compression_ratio": 1.5458937198067633, "no_speech_prob": 0.01691046729683876}, {"id": 406, "seek": 191164, "start": 1927.8000000000002, "end": 1930.68, "text": " I'm not going to go through the whole thing. But the definition is", "tokens": [51172, 286, 478, 406, 516, 281, 352, 807, 264, 1379, 551, 13, 583, 264, 7123, 307, 51316], "temperature": 0.0, "avg_logprob": -0.3134153154161241, "compression_ratio": 1.5458937198067633, "no_speech_prob": 0.01691046729683876}, {"id": 407, "seek": 191164, "start": 1932.6000000000001, "end": 1935.0800000000002, "text": " But oh the it's by uh, uh, Tom", "tokens": [51412, 583, 1954, 264, 309, 311, 538, 2232, 11, 2232, 11, 5041, 51536], "temperature": 0.0, "avg_logprob": -0.3134153154161241, "compression_ratio": 1.5458937198067633, "no_speech_prob": 0.01691046729683876}, {"id": 408, "seek": 191164, "start": 1935.8000000000002, "end": 1937.3200000000002, "text": " Tom Roy's own", "tokens": [51572, 5041, 8751, 311, 1065, 51648], "temperature": 0.0, "avg_logprob": -0.3134153154161241, "compression_ratio": 1.5458937198067633, "no_speech_prob": 0.01691046729683876}, {"id": 409, "seek": 193732, "start": 1937.48, "end": 1939.48, "text": " Rosanne and Ian Lowe", "tokens": [50372, 11144, 12674, 293, 19595, 441, 6880, 50472], "temperature": 0.0, "avg_logprob": -0.18530680338541666, "compression_ratio": 1.6015936254980079, "no_speech_prob": 0.017981749027967453}, {"id": 410, "seek": 193732, "start": 1939.72, "end": 1944.36, "text": " A canonicalized mapping is where you keep one instance of the object in question in memory", "tokens": [50484, 316, 46491, 1602, 18350, 307, 689, 291, 1066, 472, 5197, 295, 264, 2657, 294, 1168, 294, 4675, 50716], "temperature": 0.0, "avg_logprob": -0.18530680338541666, "compression_ratio": 1.6015936254980079, "no_speech_prob": 0.017981749027967453}, {"id": 411, "seek": 193732, "start": 1944.84, "end": 1948.6799999999998, "text": " And all other lookup that particular instance via pointers", "tokens": [50740, 400, 439, 661, 574, 1010, 300, 1729, 5197, 5766, 44548, 50932], "temperature": 0.0, "avg_logprob": -0.18530680338541666, "compression_ratio": 1.6015936254980079, "no_speech_prob": 0.017981749027967453}, {"id": 412, "seek": 193732, "start": 1949.3999999999999, "end": 1951.3999999999999, "text": " Or some such mechanism", "tokens": [50968, 1610, 512, 1270, 7513, 51068], "temperature": 0.0, "avg_logprob": -0.18530680338541666, "compression_ratio": 1.6015936254980079, "no_speech_prob": 0.017981749027967453}, {"id": 413, "seek": 193732, "start": 1952.04, "end": 1955.8799999999999, "text": " The short answer is that weak reference objects can be used to create", "tokens": [51100, 440, 2099, 1867, 307, 300, 5336, 6408, 6565, 393, 312, 1143, 281, 1884, 51292], "temperature": 0.0, "avg_logprob": -0.18530680338541666, "compression_ratio": 1.6015936254980079, "no_speech_prob": 0.017981749027967453}, {"id": 414, "seek": 193732, "start": 1956.52, "end": 1964.12, "text": " Pointers to objects in your system while still allowing those objects to be reclaimed by the garbage collector once they pass out of scope", "tokens": [51324, 6165, 35388, 281, 6565, 294, 428, 1185, 1339, 920, 8293, 729, 6565, 281, 312, 850, 22642, 538, 264, 14150, 23960, 1564, 436, 1320, 484, 295, 11923, 51704], "temperature": 0.0, "avg_logprob": -0.18530680338541666, "compression_ratio": 1.6015936254980079, "no_speech_prob": 0.017981749027967453}, {"id": 415, "seek": 196412, "start": 1965.08, "end": 1967.56, "text": " That kind of makes sense. I mean, I", "tokens": [50412, 663, 733, 295, 1669, 2020, 13, 286, 914, 11, 286, 50536], "temperature": 0.0, "avg_logprob": -0.2589559210352151, "compression_ratio": 1.5549132947976878, "no_speech_prob": 0.003945164382457733}, {"id": 416, "seek": 196412, "start": 1969.1599999999999, "end": 1970.36, "text": " Hmm", "tokens": [50616, 8239, 50676], "temperature": 0.0, "avg_logprob": -0.2589559210352151, "compression_ratio": 1.5549132947976878, "no_speech_prob": 0.003945164382457733}, {"id": 417, "seek": 196412, "start": 1970.36, "end": 1972.36, "text": " It makes sense in the sense of", "tokens": [50676, 467, 1669, 2020, 294, 264, 2020, 295, 50776], "temperature": 0.0, "avg_logprob": -0.2589559210352151, "compression_ratio": 1.5549132947976878, "no_speech_prob": 0.003945164382457733}, {"id": 418, "seek": 196412, "start": 1972.9199999999998, "end": 1974.9199999999998, "text": " I can see why", "tokens": [50804, 286, 393, 536, 983, 50904], "temperature": 0.0, "avg_logprob": -0.2589559210352151, "compression_ratio": 1.5549132947976878, "no_speech_prob": 0.003945164382457733}, {"id": 419, "seek": 196412, "start": 1975.0, "end": 1977.0, "text": " theoretically a weak reference type", "tokens": [50908, 29400, 257, 5336, 6408, 2010, 51008], "temperature": 0.0, "avg_logprob": -0.2589559210352151, "compression_ratio": 1.5549132947976878, "no_speech_prob": 0.003945164382457733}, {"id": 420, "seek": 196412, "start": 1978.4399999999998, "end": 1982.1999999999998, "text": " Can be used in a weak hash map to prevent", "tokens": [51080, 1664, 312, 1143, 294, 257, 5336, 22019, 4471, 281, 4871, 51268], "temperature": 0.0, "avg_logprob": -0.2589559210352151, "compression_ratio": 1.5549132947976878, "no_speech_prob": 0.003945164382457733}, {"id": 421, "seek": 196412, "start": 1983.7199999999998, "end": 1989.0, "text": " Memory leaks in a cache. I can I can see the reason I'm going to be honest. I don't think I can", "tokens": [51344, 38203, 28885, 294, 257, 19459, 13, 286, 393, 286, 393, 536, 264, 1778, 286, 478, 516, 281, 312, 3245, 13, 286, 500, 380, 519, 286, 393, 51608], "temperature": 0.0, "avg_logprob": -0.2589559210352151, "compression_ratio": 1.5549132947976878, "no_speech_prob": 0.003945164382457733}, {"id": 422, "seek": 196412, "start": 1989.56, "end": 1991.08, "text": " sell fully", "tokens": [51636, 3607, 4498, 51712], "temperature": 0.0, "avg_logprob": -0.2589559210352151, "compression_ratio": 1.5549132947976878, "no_speech_prob": 0.003945164382457733}, {"id": 423, "seek": 199108, "start": 1991.1599999999999, "end": 1993.1599999999999, "text": " Understand how to implement that in code", "tokens": [50368, 26093, 577, 281, 4445, 300, 294, 3089, 50468], "temperature": 0.0, "avg_logprob": -0.1376819610595703, "compression_ratio": 1.6940298507462686, "no_speech_prob": 0.004069656599313021}, {"id": 424, "seek": 199108, "start": 1993.24, "end": 1999.32, "text": " But at least conceptually I can see the connection there. So now let's take a look at what a weak hash map is", "tokens": [50472, 583, 412, 1935, 3410, 671, 286, 393, 536, 264, 4984, 456, 13, 407, 586, 718, 311, 747, 257, 574, 412, 437, 257, 5336, 22019, 4471, 307, 50776], "temperature": 0.0, "avg_logprob": -0.1376819610595703, "compression_ratio": 1.6940298507462686, "no_speech_prob": 0.004069656599313021}, {"id": 425, "seek": 199108, "start": 1999.32, "end": 2004.6799999999998, "text": " So I created this class called the weak hash map demo. I kind of repurposed this example", "tokens": [50776, 407, 286, 2942, 341, 1508, 1219, 264, 5336, 22019, 4471, 10723, 13, 286, 733, 295, 1085, 20130, 1744, 341, 1365, 51044], "temperature": 0.0, "avg_logprob": -0.1376819610595703, "compression_ratio": 1.6940298507462686, "no_speech_prob": 0.004069656599313021}, {"id": 426, "seek": 199108, "start": 2005.24, "end": 2007.72, "text": " That was used on vile dunks blog", "tokens": [51072, 663, 390, 1143, 322, 371, 794, 10234, 1694, 6968, 51196], "temperature": 0.0, "avg_logprob": -0.1376819610595703, "compression_ratio": 1.6940298507462686, "no_speech_prob": 0.004069656599313021}, {"id": 427, "seek": 199108, "start": 2008.6799999999998, "end": 2014.6, "text": " And firstly, uh, this part really isn't a part of the weak hash. I just want to show how to create a weak reference", "tokens": [51244, 400, 27376, 11, 2232, 11, 341, 644, 534, 1943, 380, 257, 644, 295, 264, 5336, 22019, 13, 286, 445, 528, 281, 855, 577, 281, 1884, 257, 5336, 6408, 51540], "temperature": 0.0, "avg_logprob": -0.1376819610595703, "compression_ratio": 1.6940298507462686, "no_speech_prob": 0.004069656599313021}, {"id": 428, "seek": 199108, "start": 2015.08, "end": 2018.04, "text": " That's how you do it. It's a generic type. You pass it", "tokens": [51564, 663, 311, 577, 291, 360, 309, 13, 467, 311, 257, 19577, 2010, 13, 509, 1320, 309, 51712], "temperature": 0.0, "avg_logprob": -0.1376819610595703, "compression_ratio": 1.6940298507462686, "no_speech_prob": 0.004069656599313021}, {"id": 429, "seek": 199108, "start": 2018.76, "end": 2020.1999999999998, "text": " of integer", "tokens": [51748, 295, 24922, 51820], "temperature": 0.0, "avg_logprob": -0.1376819610595703, "compression_ratio": 1.6940298507462686, "no_speech_prob": 0.004069656599313021}, {"id": 430, "seek": 202020, "start": 2020.28, "end": 2023.48, "text": " And then you create the weak reference easy as that and then when we", "tokens": [50368, 400, 550, 291, 1884, 264, 5336, 6408, 1858, 382, 300, 293, 550, 562, 321, 50528], "temperature": 0.0, "avg_logprob": -0.1979945500691732, "compression_ratio": 1.7411167512690355, "no_speech_prob": 0.0005527199828065932}, {"id": 431, "seek": 202020, "start": 2025.0, "end": 2027.4, "text": " Made this prime reference null", "tokens": [50604, 18330, 341, 5835, 6408, 18184, 50724], "temperature": 0.0, "avg_logprob": -0.1979945500691732, "compression_ratio": 1.7411167512690355, "no_speech_prob": 0.0005527199828065932}, {"id": 432, "seek": 202020, "start": 2028.28, "end": 2030.28, "text": " Initially, we declared let me make it null", "tokens": [50768, 29446, 11, 321, 15489, 718, 385, 652, 309, 18184, 50868], "temperature": 0.0, "avg_logprob": -0.1979945500691732, "compression_ratio": 1.7411167512690355, "no_speech_prob": 0.0005527199828065932}, {"id": 433, "seek": 202020, "start": 2030.6000000000001, "end": 2034.44, "text": " This object will be garbage collected in the next gc cycle", "tokens": [50884, 639, 2657, 486, 312, 14150, 11087, 294, 264, 958, 290, 66, 6586, 51076], "temperature": 0.0, "avg_logprob": -0.1979945500691732, "compression_ratio": 1.7411167512690355, "no_speech_prob": 0.0005527199828065932}, {"id": 434, "seek": 202020, "start": 2035.0, "end": 2038.76, "text": " Um, as there is no other strong reference pointing to it", "tokens": [51104, 3301, 11, 382, 456, 307, 572, 661, 2068, 6408, 12166, 281, 309, 51292], "temperature": 0.0, "avg_logprob": -0.1979945500691732, "compression_ratio": 1.7411167512690355, "no_speech_prob": 0.0005527199828065932}, {"id": 435, "seek": 202020, "start": 2038.92, "end": 2042.76, "text": " So when we create the weak reference as you can see here, we are passing that object", "tokens": [51300, 407, 562, 321, 1884, 264, 5336, 6408, 382, 291, 393, 536, 510, 11, 321, 366, 8437, 300, 2657, 51492], "temperature": 0.0, "avg_logprob": -0.1979945500691732, "compression_ratio": 1.7411167512690355, "no_speech_prob": 0.0005527199828065932}, {"id": 436, "seek": 204276, "start": 2043.72, "end": 2050.28, "text": " Into the constructor of the weak reference class and now this new object is a of type weak reference", "tokens": [50412, 23373, 264, 47479, 295, 264, 5336, 6408, 1508, 293, 586, 341, 777, 2657, 307, 257, 295, 2010, 5336, 6408, 50740], "temperature": 0.0, "avg_logprob": -0.15272058486938478, "compression_ratio": 1.7161016949152543, "no_speech_prob": 0.06369597464799881}, {"id": 437, "seek": 204276, "start": 2050.68, "end": 2057.08, "text": " But that's just how I create weak references. Now, let's get to the the cracks of this class. I this is terrible coding", "tokens": [50760, 583, 300, 311, 445, 577, 286, 1884, 5336, 15400, 13, 823, 11, 718, 311, 483, 281, 264, 264, 21770, 295, 341, 1508, 13, 286, 341, 307, 6237, 17720, 51080], "temperature": 0.0, "avg_logprob": -0.15272058486938478, "compression_ratio": 1.7161016949152543, "no_speech_prob": 0.06369597464799881}, {"id": 438, "seek": 204276, "start": 2057.08, "end": 2061.08, "text": " I should have put this somewhere else because this in no way is related to this class", "tokens": [51080, 286, 820, 362, 829, 341, 4079, 1646, 570, 341, 294, 572, 636, 307, 4077, 281, 341, 1508, 51280], "temperature": 0.0, "avg_logprob": -0.15272058486938478, "compression_ratio": 1.7161016949152543, "no_speech_prob": 0.06369597464799881}, {"id": 439, "seek": 204276, "start": 2062.12, "end": 2065.32, "text": " But in any case, it's just for demonstration purposes", "tokens": [51332, 583, 294, 604, 1389, 11, 309, 311, 445, 337, 16520, 9932, 51492], "temperature": 0.0, "avg_logprob": -0.15272058486938478, "compression_ratio": 1.7161016949152543, "no_speech_prob": 0.06369597464799881}, {"id": 440, "seek": 204276, "start": 2066.2, "end": 2070.28, "text": " Here's how we create a weak hash map. Um, so", "tokens": [51536, 1692, 311, 577, 321, 1884, 257, 5336, 22019, 4471, 13, 3301, 11, 370, 51740], "temperature": 0.0, "avg_logprob": -0.15272058486938478, "compression_ratio": 1.7161016949152543, "no_speech_prob": 0.06369597464799881}, {"id": 441, "seek": 207028, "start": 2071.2400000000002, "end": 2076.52, "text": " It's just like creating a normal hash map really. Um, you have to define the key and the value the types of the key and the value", "tokens": [50412, 467, 311, 445, 411, 4084, 257, 2710, 22019, 4471, 534, 13, 3301, 11, 291, 362, 281, 6964, 264, 2141, 293, 264, 2158, 264, 3467, 295, 264, 2141, 293, 264, 2158, 50676], "temperature": 0.0, "avg_logprob": -0.18954012653615215, "compression_ratio": 1.7208333333333334, "no_speech_prob": 0.00013134370965417475}, {"id": 442, "seek": 207028, "start": 2077.48, "end": 2079.48, "text": " and ideally we want a", "tokens": [50724, 293, 22915, 321, 528, 257, 50824], "temperature": 0.0, "avg_logprob": -0.18954012653615215, "compression_ratio": 1.7208333333333334, "no_speech_prob": 0.00013134370965417475}, {"id": 443, "seek": 207028, "start": 2079.48, "end": 2081.6400000000003, "text": " map implementation that allows", "tokens": [50824, 4471, 11420, 300, 4045, 50932], "temperature": 0.0, "avg_logprob": -0.18954012653615215, "compression_ratio": 1.7208333333333334, "no_speech_prob": 0.00013134370965417475}, {"id": 444, "seek": 207028, "start": 2082.28, "end": 2085.1600000000003, "text": " garbage collection to automatically delete unused objects", "tokens": [50964, 14150, 5765, 281, 6772, 12097, 44383, 6565, 51108], "temperature": 0.0, "avg_logprob": -0.18954012653615215, "compression_ratio": 1.7208333333333334, "no_speech_prob": 0.00013134370965417475}, {"id": 445, "seek": 207028, "start": 2085.96, "end": 2087.5600000000004, "text": " correct and", "tokens": [51148, 3006, 293, 51228], "temperature": 0.0, "avg_logprob": -0.18954012653615215, "compression_ratio": 1.7208333333333334, "no_speech_prob": 0.00013134370965417475}, {"id": 446, "seek": 207028, "start": 2087.5600000000004, "end": 2091.32, "text": " Because we ideally want that is is the reason that we use a weak hash map", "tokens": [51228, 1436, 321, 22915, 528, 300, 307, 307, 264, 1778, 300, 321, 764, 257, 5336, 22019, 4471, 51416], "temperature": 0.0, "avg_logprob": -0.18954012653615215, "compression_ratio": 1.7208333333333334, "no_speech_prob": 0.00013134370965417475}, {"id": 447, "seek": 207028, "start": 2091.8, "end": 2097.7200000000003, "text": " When a key of a big image object is not in use and application in any place. So that's", "tokens": [51440, 1133, 257, 2141, 295, 257, 955, 3256, 2657, 307, 406, 294, 764, 293, 3861, 294, 604, 1081, 13, 407, 300, 311, 51736], "temperature": 0.0, "avg_logprob": -0.18954012653615215, "compression_ratio": 1.7208333333333334, "no_speech_prob": 0.00013134370965417475}, {"id": 448, "seek": 209772, "start": 2098.52, "end": 2103.3199999999997, "text": " Uh, the key for this object here the unique image name in this case would be the key", "tokens": [50404, 4019, 11, 264, 2141, 337, 341, 2657, 510, 264, 3845, 3256, 1315, 294, 341, 1389, 576, 312, 264, 2141, 50644], "temperature": 0.0, "avg_logprob": -0.1434057059408236, "compression_ratio": 1.6917562724014337, "no_speech_prob": 0.007815085351467133}, {"id": 449, "seek": 209772, "start": 2104.12, "end": 2109.3199999999997, "text": " This entry will automatically be deleted from memory. It's pretty cool. In fact, how this happened and I'll show you", "tokens": [50684, 639, 8729, 486, 6772, 312, 22981, 490, 4675, 13, 467, 311, 1238, 1627, 13, 682, 1186, 11, 577, 341, 2011, 293, 286, 603, 855, 291, 50944], "temperature": 0.0, "avg_logprob": -0.1434057059408236, "compression_ratio": 1.6917562724014337, "no_speech_prob": 0.007815085351467133}, {"id": 450, "seek": 209772, "start": 2109.72, "end": 2114.7599999999998, "text": " This and show this to you in code. So we have the weak reference map. Just ignore the other line of code", "tokens": [50964, 639, 293, 855, 341, 281, 291, 294, 3089, 13, 407, 321, 362, 264, 5336, 6408, 4471, 13, 1449, 11200, 264, 661, 1622, 295, 3089, 51216], "temperature": 0.0, "avg_logprob": -0.1434057059408236, "compression_ratio": 1.6917562724014337, "no_speech_prob": 0.007815085351467133}, {"id": 451, "seek": 209772, "start": 2114.7599999999998, "end": 2118.2, "text": " I've used here. It's just a normal hash map. I've used I was just playing around with this", "tokens": [51216, 286, 600, 1143, 510, 13, 467, 311, 445, 257, 2710, 22019, 4471, 13, 286, 600, 1143, 286, 390, 445, 2433, 926, 365, 341, 51388], "temperature": 0.0, "avg_logprob": -0.1434057059408236, "compression_ratio": 1.6917562724014337, "no_speech_prob": 0.007815085351467133}, {"id": 452, "seek": 209772, "start": 2118.2799999999997, "end": 2122.2, "text": " But what matters really is the the map I've created here in line number 25", "tokens": [51392, 583, 437, 7001, 534, 307, 264, 264, 4471, 286, 600, 2942, 510, 294, 1622, 1230, 3552, 51588], "temperature": 0.0, "avg_logprob": -0.1434057059408236, "compression_ratio": 1.6917562724014337, "no_speech_prob": 0.007815085351467133}, {"id": 453, "seek": 212220, "start": 2122.52, "end": 2126.04, "text": " So for all intents and purposes this hash map could be our cache", "tokens": [50380, 407, 337, 439, 560, 791, 293, 9932, 341, 22019, 4471, 727, 312, 527, 19459, 50556], "temperature": 0.0, "avg_logprob": -0.12175455198183165, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.0015244412934407592}, {"id": 454, "seek": 212220, "start": 2126.7599999999998, "end": 2128.7599999999998, "text": " And we are putting a new", "tokens": [50592, 400, 321, 366, 3372, 257, 777, 50692], "temperature": 0.0, "avg_logprob": -0.12175455198183165, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.0015244412934407592}, {"id": 455, "seek": 212220, "start": 2128.7599999999998, "end": 2132.4399999999996, "text": " big image object into that cache into our hash map", "tokens": [50692, 955, 3256, 2657, 666, 300, 19459, 666, 527, 22019, 4471, 50876], "temperature": 0.0, "avg_logprob": -0.12175455198183165, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.0015244412934407592}, {"id": 456, "seek": 212220, "start": 2134.68, "end": 2139.48, "text": " We're also creating key and putting that key too and we're creating the key value pair here", "tokens": [50988, 492, 434, 611, 4084, 2141, 293, 3372, 300, 2141, 886, 293, 321, 434, 4084, 264, 2141, 2158, 6119, 510, 51228], "temperature": 0.0, "avg_logprob": -0.12175455198183165, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.0015244412934407592}, {"id": 457, "seek": 212220, "start": 2141.24, "end": 2144.4399999999996, "text": " And the image name of course is the object reference, which is the key", "tokens": [51316, 400, 264, 3256, 1315, 295, 1164, 307, 264, 2657, 6408, 11, 597, 307, 264, 2141, 51476], "temperature": 0.0, "avg_logprob": -0.12175455198183165, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.0015244412934407592}, {"id": 458, "seek": 212220, "start": 2145.16, "end": 2148.2799999999997, "text": " Uh, so if I run this code now what you'll see is", "tokens": [51512, 4019, 11, 370, 498, 286, 1190, 341, 3089, 586, 437, 291, 603, 536, 307, 51668], "temperature": 0.0, "avg_logprob": -0.12175455198183165, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.0015244412934407592}, {"id": 459, "seek": 215220, "start": 2152.9199999999996, "end": 2154.9199999999996, "text": " Um", "tokens": [50400, 3301, 50500], "temperature": 0.0, "avg_logprob": -0.1719412552682977, "compression_ratio": 1.52020202020202, "no_speech_prob": 0.0015729033621028066}, {"id": 460, "seek": 215220, "start": 2155.24, "end": 2162.2799999999997, "text": " So what's this log here map this contain does not contain an image name. Um, so", "tokens": [50516, 407, 437, 311, 341, 3565, 510, 4471, 341, 5304, 775, 406, 5304, 364, 3256, 1315, 13, 3301, 11, 370, 50868], "temperature": 0.0, "avg_logprob": -0.1719412552682977, "compression_ratio": 1.52020202020202, "no_speech_prob": 0.0015729033621028066}, {"id": 461, "seek": 215220, "start": 2164.4399999999996, "end": 2166.2, "text": " That is terribly misleading", "tokens": [50976, 663, 307, 22903, 36429, 51064], "temperature": 0.0, "avg_logprob": -0.1719412552682977, "compression_ratio": 1.52020202020202, "no_speech_prob": 0.0015729033621028066}, {"id": 462, "seek": 215220, "start": 2166.2, "end": 2169.72, "text": " I just realized that that log can be extremely confusing because", "tokens": [51064, 286, 445, 5334, 300, 300, 3565, 393, 312, 4664, 13181, 570, 51240], "temperature": 0.0, "avg_logprob": -0.1719412552682977, "compression_ratio": 1.52020202020202, "no_speech_prob": 0.0015729033621028066}, {"id": 463, "seek": 215220, "start": 2170.4399999999996, "end": 2174.8399999999997, "text": " The map is supposed to contain image name because they're putting it in line number 31", "tokens": [51276, 440, 4471, 307, 3442, 281, 5304, 3256, 1315, 570, 436, 434, 3372, 309, 294, 1622, 1230, 10353, 51496], "temperature": 0.0, "avg_logprob": -0.1719412552682977, "compression_ratio": 1.52020202020202, "no_speech_prob": 0.0015729033621028066}, {"id": 464, "seek": 215220, "start": 2175.24, "end": 2177.08, "text": " And we aren't nulling out any key here", "tokens": [51516, 400, 321, 3212, 380, 18184, 278, 484, 604, 2141, 510, 51608], "temperature": 0.0, "avg_logprob": -0.1719412552682977, "compression_ratio": 1.52020202020202, "no_speech_prob": 0.0015729033621028066}, {"id": 465, "seek": 217708, "start": 2177.16, "end": 2183.08, "text": " So I I'm gonna run that again because that can be really confusing and kind of ruin the purpose of this demo", "tokens": [50368, 407, 286, 286, 478, 799, 1190, 300, 797, 570, 300, 393, 312, 534, 13181, 293, 733, 295, 15514, 264, 4334, 295, 341, 10723, 50664], "temperature": 0.0, "avg_logprob": -0.12804024115852689, "compression_ratio": 1.7330316742081449, "no_speech_prob": 0.000984935206361115}, {"id": 466, "seek": 217708, "start": 2184.7599999999998, "end": 2186.7599999999998, "text": " The map should contain", "tokens": [50748, 440, 4471, 820, 5304, 50848], "temperature": 0.0, "avg_logprob": -0.12804024115852689, "compression_ratio": 1.7330316742081449, "no_speech_prob": 0.000984935206361115}, {"id": 467, "seek": 217708, "start": 2188.12, "end": 2189.24, "text": " Image name", "tokens": [50916, 29903, 1315, 50972], "temperature": 0.0, "avg_logprob": -0.12804024115852689, "compression_ratio": 1.7330316742081449, "no_speech_prob": 0.000984935206361115}, {"id": 468, "seek": 217708, "start": 2189.24, "end": 2194.2799999999997, "text": " It should contain the key because we haven't nulled it out and I think nothing has happened and of course", "tokens": [50972, 467, 820, 5304, 264, 2141, 570, 321, 2378, 380, 18184, 292, 309, 484, 293, 286, 519, 1825, 575, 2011, 293, 295, 1164, 51224], "temperature": 0.0, "avg_logprob": -0.12804024115852689, "compression_ratio": 1.7330316742081449, "no_speech_prob": 0.000984935206361115}, {"id": 469, "seek": 217708, "start": 2194.84, "end": 2199.24, "text": " The map will also contain a big big image the big image object", "tokens": [51252, 440, 4471, 486, 611, 5304, 257, 955, 955, 3256, 264, 955, 3256, 2657, 51472], "temperature": 0.0, "avg_logprob": -0.12804024115852689, "compression_ratio": 1.7330316742081449, "no_speech_prob": 0.000984935206361115}, {"id": 470, "seek": 217708, "start": 2201.3199999999997, "end": 2204.84, "text": " Also, that's confusing I should have prepared for this demo much better", "tokens": [51576, 2743, 11, 300, 311, 13181, 286, 820, 362, 4927, 337, 341, 10723, 709, 1101, 51752], "temperature": 0.0, "avg_logprob": -0.12804024115852689, "compression_ratio": 1.7330316742081449, "no_speech_prob": 0.000984935206361115}, {"id": 471, "seek": 220484, "start": 2205.2400000000002, "end": 2209.48, "text": " I gotta get rid of that line because I'm adding it twice into the hash map. I don't know why I'm doing that", "tokens": [50384, 286, 3428, 483, 3973, 295, 300, 1622, 570, 286, 478, 5127, 309, 6091, 666, 264, 22019, 4471, 13, 286, 500, 380, 458, 983, 286, 478, 884, 300, 50596], "temperature": 0.0, "avg_logprob": -0.17081931893152136, "compression_ratio": 1.703448275862069, "no_speech_prob": 0.013846125453710556}, {"id": 472, "seek": 220484, "start": 2209.8, "end": 2212.1200000000003, "text": " Anyway, in any case, I hope I'm trying I'm making sense", "tokens": [50612, 5684, 11, 294, 604, 1389, 11, 286, 1454, 286, 478, 1382, 286, 478, 1455, 2020, 50728], "temperature": 0.0, "avg_logprob": -0.17081931893152136, "compression_ratio": 1.703448275862069, "no_speech_prob": 0.013846125453710556}, {"id": 473, "seek": 220484, "start": 2212.1200000000003, "end": 2215.1600000000003, "text": " Yeah, I profusely apologize because this is not a good demo", "tokens": [50728, 865, 11, 286, 1740, 301, 736, 12328, 570, 341, 307, 406, 257, 665, 10723, 50880], "temperature": 0.0, "avg_logprob": -0.17081931893152136, "compression_ratio": 1.703448275862069, "no_speech_prob": 0.013846125453710556}, {"id": 474, "seek": 220484, "start": 2215.96, "end": 2222.36, "text": " Hey, but uh, as the software engineers, we all know that whenever there's a demo things break. So perhaps it is", "tokens": [50920, 1911, 11, 457, 2232, 11, 382, 264, 4722, 11955, 11, 321, 439, 458, 300, 5699, 456, 311, 257, 10723, 721, 1821, 13, 407, 4317, 309, 307, 51240], "temperature": 0.0, "avg_logprob": -0.17081931893152136, "compression_ratio": 1.703448275862069, "no_speech_prob": 0.013846125453710556}, {"id": 475, "seek": 220484, "start": 2223.48, "end": 2227.96, "text": " Ironically a good demo because this is what a demo would actually look like. Uh, so", "tokens": [51296, 13720, 984, 257, 665, 10723, 570, 341, 307, 437, 257, 10723, 576, 767, 574, 411, 13, 4019, 11, 370, 51520], "temperature": 0.0, "avg_logprob": -0.17081931893152136, "compression_ratio": 1.703448275862069, "no_speech_prob": 0.013846125453710556}, {"id": 476, "seek": 220484, "start": 2228.92, "end": 2233.56, "text": " Initially, yes, it does contain the key and it also does contain the value", "tokens": [51568, 29446, 11, 2086, 11, 309, 775, 5304, 264, 2141, 293, 309, 611, 775, 5304, 264, 2158, 51800], "temperature": 0.0, "avg_logprob": -0.17081931893152136, "compression_ratio": 1.703448275862069, "no_speech_prob": 0.013846125453710556}, {"id": 477, "seek": 223356, "start": 2234.04, "end": 2235.72, "text": " And then what happens is", "tokens": [50388, 400, 550, 437, 2314, 307, 50472], "temperature": 0.0, "avg_logprob": -0.12663118044535318, "compression_ratio": 1.6978723404255318, "no_speech_prob": 0.0060030436143279076}, {"id": 478, "seek": 223356, "start": 2235.72, "end": 2238.92, "text": " We null out the key. That's all we're doing. We're not clearing anything out", "tokens": [50472, 492, 18184, 484, 264, 2141, 13, 663, 311, 439, 321, 434, 884, 13, 492, 434, 406, 23937, 1340, 484, 50632], "temperature": 0.0, "avg_logprob": -0.12663118044535318, "compression_ratio": 1.6978723404255318, "no_speech_prob": 0.0060030436143279076}, {"id": 479, "seek": 223356, "start": 2239.24, "end": 2245.64, "text": " And then we just run a garbage collection cycle. We force a jvm to write a gc cycle and then", "tokens": [50648, 400, 550, 321, 445, 1190, 257, 14150, 5765, 6586, 13, 492, 3464, 257, 361, 85, 76, 281, 2464, 257, 290, 66, 6586, 293, 550, 50968], "temperature": 0.0, "avg_logprob": -0.12663118044535318, "compression_ratio": 1.6978723404255318, "no_speech_prob": 0.0060030436143279076}, {"id": 480, "seek": 223356, "start": 2246.44, "end": 2248.12, "text": " almost magically", "tokens": [51008, 1920, 39763, 51092], "temperature": 0.0, "avg_logprob": -0.12663118044535318, "compression_ratio": 1.6978723404255318, "no_speech_prob": 0.0060030436143279076}, {"id": 481, "seek": 223356, "start": 2248.12, "end": 2250.12, "text": " The bloody hash map is empty", "tokens": [51092, 440, 18938, 22019, 4471, 307, 6707, 51192], "temperature": 0.0, "avg_logprob": -0.12663118044535318, "compression_ratio": 1.6978723404255318, "no_speech_prob": 0.0060030436143279076}, {"id": 482, "seek": 223356, "start": 2250.44, "end": 2255.48, "text": " And how is that this wouldn't happen if it was a normal hash map with a strong reference", "tokens": [51208, 400, 577, 307, 300, 341, 2759, 380, 1051, 498, 309, 390, 257, 2710, 22019, 4471, 365, 257, 2068, 6408, 51460], "temperature": 0.0, "avg_logprob": -0.12663118044535318, "compression_ratio": 1.6978723404255318, "no_speech_prob": 0.0060030436143279076}, {"id": 483, "seek": 223356, "start": 2256.44, "end": 2259.7999999999997, "text": " The way the hash map is empty in so this is the log here that you see", "tokens": [51508, 440, 636, 264, 22019, 4471, 307, 6707, 294, 370, 341, 307, 264, 3565, 510, 300, 291, 536, 51676], "temperature": 0.0, "avg_logprob": -0.12663118044535318, "compression_ratio": 1.6978723404255318, "no_speech_prob": 0.0060030436143279076}, {"id": 484, "seek": 225980, "start": 2260.76, "end": 2266.92, "text": " Uh is in fact because this hash map is a weak hash map using weak reference type", "tokens": [50412, 4019, 307, 294, 1186, 570, 341, 22019, 4471, 307, 257, 5336, 22019, 4471, 1228, 5336, 6408, 2010, 50720], "temperature": 0.0, "avg_logprob": -0.1974327325820923, "compression_ratio": 1.627659574468085, "no_speech_prob": 0.010985556058585644}, {"id": 485, "seek": 225980, "start": 2267.6400000000003, "end": 2269.6400000000003, "text": " so when the external", "tokens": [50756, 370, 562, 264, 8320, 50856], "temperature": 0.0, "avg_logprob": -0.1974327325820923, "compression_ratio": 1.627659574468085, "no_speech_prob": 0.010985556058585644}, {"id": 486, "seek": 225980, "start": 2270.6000000000004, "end": 2272.92, "text": " Reference to this key was nulled out", "tokens": [50904, 1300, 5158, 281, 341, 2141, 390, 18184, 292, 484, 51020], "temperature": 0.0, "avg_logprob": -0.1974327325820923, "compression_ratio": 1.627659574468085, "no_speech_prob": 0.010985556058585644}, {"id": 487, "seek": 225980, "start": 2273.7200000000003, "end": 2276.28, "text": " The object itself or the key value pair", "tokens": [51060, 440, 2657, 2564, 420, 264, 2141, 2158, 6119, 51188], "temperature": 0.0, "avg_logprob": -0.1974327325820923, "compression_ratio": 1.627659574468085, "no_speech_prob": 0.010985556058585644}, {"id": 488, "seek": 225980, "start": 2276.92, "end": 2282.44, "text": " Was garbage collected because it's it's it's it's not not used. So that's the perfect", "tokens": [51220, 3027, 14150, 11087, 570, 309, 311, 309, 311, 309, 311, 309, 311, 406, 406, 1143, 13, 407, 300, 311, 264, 2176, 51496], "temperature": 0.0, "avg_logprob": -0.1974327325820923, "compression_ratio": 1.627659574468085, "no_speech_prob": 0.010985556058585644}, {"id": 489, "seek": 225980, "start": 2283.48, "end": 2285.96, "text": " implementation of a cache that'll prevent", "tokens": [51548, 11420, 295, 257, 19459, 300, 603, 4871, 51672], "temperature": 0.0, "avg_logprob": -0.1974327325820923, "compression_ratio": 1.627659574468085, "no_speech_prob": 0.010985556058585644}, {"id": 490, "seek": 228596, "start": 2286.68, "end": 2291.96, "text": " memory leaks and then for this problem of memory leaks and caches and another solution that he's proposed", "tokens": [50400, 4675, 28885, 293, 550, 337, 341, 1154, 295, 4675, 28885, 293, 269, 13272, 293, 1071, 3827, 300, 415, 311, 10348, 50664], "temperature": 0.0, "avg_logprob": -0.11828902333053117, "compression_ratio": 1.7593360995850622, "no_speech_prob": 0.010168280452489853}, {"id": 491, "seek": 228596, "start": 2292.44, "end": 2294.44, "text": " is sort of using a", "tokens": [50688, 307, 1333, 295, 1228, 257, 50788], "temperature": 0.0, "avg_logprob": -0.11828902333053117, "compression_ratio": 1.7593360995850622, "no_speech_prob": 0.010168280452489853}, {"id": 492, "seek": 228596, "start": 2294.52, "end": 2297.88, "text": " least recently used cache eviction policy, uh", "tokens": [50792, 1935, 3938, 1143, 19459, 1073, 4105, 3897, 11, 2232, 50960], "temperature": 0.0, "avg_logprob": -0.11828902333053117, "compression_ratio": 1.7593360995850622, "no_speech_prob": 0.010168280452489853}, {"id": 493, "seek": 228596, "start": 2298.68, "end": 2304.68, "text": " But the implementation of it is a bit more different to kind of the conceptual understanding of what that policy is", "tokens": [51000, 583, 264, 11420, 295, 309, 307, 257, 857, 544, 819, 281, 733, 295, 264, 24106, 3701, 295, 437, 300, 3897, 307, 51300], "temperature": 0.0, "avg_logprob": -0.11828902333053117, "compression_ratio": 1.7593360995850622, "no_speech_prob": 0.010168280452489853}, {"id": 494, "seek": 228596, "start": 2305.16, "end": 2309.08, "text": " And that can be done using a scheduled thread pool executor", "tokens": [51324, 400, 300, 393, 312, 1096, 1228, 257, 15678, 7207, 7005, 7568, 284, 51520], "temperature": 0.0, "avg_logprob": -0.11828902333053117, "compression_ratio": 1.7593360995850622, "no_speech_prob": 0.010168280452489853}, {"id": 495, "seek": 228596, "start": 2309.56, "end": 2313.16, "text": " And it could be what what this does is in the background on a separate thread", "tokens": [51544, 400, 309, 727, 312, 437, 437, 341, 775, 307, 294, 264, 3678, 322, 257, 4994, 7207, 51724], "temperature": 0.0, "avg_logprob": -0.11828902333053117, "compression_ratio": 1.7593360995850622, "no_speech_prob": 0.010168280452489853}, {"id": 496, "seek": 231316, "start": 2313.24, "end": 2319.08, "text": " You can run tasks scheduled tasks repeatedly such as cache cleansing", "tokens": [50368, 509, 393, 1190, 9608, 15678, 9608, 18227, 1270, 382, 19459, 29345, 50660], "temperature": 0.0, "avg_logprob": -0.18481214311387803, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.009121950715780258}, {"id": 497, "seek": 231316, "start": 2319.7999999999997, "end": 2325.08, "text": " Uh, and to understand what this is what a scheduled thread pool executor does", "tokens": [50696, 4019, 11, 293, 281, 1223, 437, 341, 307, 437, 257, 15678, 7207, 7005, 7568, 284, 775, 50960], "temperature": 0.0, "avg_logprob": -0.18481214311387803, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.009121950715780258}, {"id": 498, "seek": 231316, "start": 2325.56, "end": 2331.16, "text": " I came across this article on geeks for geeks by a user called", "tokens": [50984, 286, 1361, 2108, 341, 7222, 322, 1519, 24785, 337, 1519, 24785, 538, 257, 4195, 1219, 51264], "temperature": 0.0, "avg_logprob": -0.18481214311387803, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.009121950715780258}, {"id": 499, "seek": 231316, "start": 2333.3999999999996, "end": 2336.6, "text": " Samu foe and that's the user's uh pseudonym", "tokens": [51376, 4832, 84, 726, 68, 293, 300, 311, 264, 4195, 311, 2232, 25505, 532, 12732, 51536], "temperature": 0.0, "avg_logprob": -0.18481214311387803, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.009121950715780258}, {"id": 500, "seek": 231316, "start": 2337.64, "end": 2338.68, "text": " and", "tokens": [51588, 293, 51640], "temperature": 0.0, "avg_logprob": -0.18481214311387803, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.009121950715780258}, {"id": 501, "seek": 231316, "start": 2338.68, "end": 2341.96, "text": " Here's the implementation of that class. I think it's important to understand what this is doing", "tokens": [51640, 1692, 311, 264, 11420, 295, 300, 1508, 13, 286, 519, 309, 311, 1021, 281, 1223, 437, 341, 307, 884, 51804], "temperature": 0.0, "avg_logprob": -0.18481214311387803, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.009121950715780258}, {"id": 502, "seek": 234196, "start": 2342.36, "end": 2347.08, "text": " Even though this isn't fully related to clearing caches the way it'll work is like this", "tokens": [50384, 2754, 1673, 341, 1943, 380, 4498, 4077, 281, 23937, 269, 13272, 264, 636, 309, 603, 589, 307, 411, 341, 50620], "temperature": 0.0, "avg_logprob": -0.16802947018124642, "compression_ratio": 1.756, "no_speech_prob": 0.005554063245654106}, {"id": 503, "seek": 234196, "start": 2347.7200000000003, "end": 2350.44, "text": " So I anyway, but by the way all this code is", "tokens": [50652, 407, 286, 4033, 11, 457, 538, 264, 636, 439, 341, 3089, 307, 50788], "temperature": 0.0, "avg_logprob": -0.16802947018124642, "compression_ratio": 1.756, "no_speech_prob": 0.005554063245654106}, {"id": 504, "seek": 234196, "start": 2351.08, "end": 2353.4, "text": " On the github repository. So please go take a look", "tokens": [50820, 1282, 264, 290, 355, 836, 25841, 13, 407, 1767, 352, 747, 257, 574, 50936], "temperature": 0.0, "avg_logprob": -0.16802947018124642, "compression_ratio": 1.756, "no_speech_prob": 0.005554063245654106}, {"id": 505, "seek": 234196, "start": 2354.2, "end": 2358.68, "text": " And this kind of demonstrates how the schedule thread pool executor works", "tokens": [50976, 400, 341, 733, 295, 31034, 577, 264, 7567, 7207, 7005, 7568, 284, 1985, 51200], "temperature": 0.0, "avg_logprob": -0.16802947018124642, "compression_ratio": 1.756, "no_speech_prob": 0.005554063245654106}, {"id": 506, "seek": 234196, "start": 2360.6, "end": 2363.2400000000002, "text": " Initially we create a object called thread pool", "tokens": [51296, 29446, 321, 1884, 257, 2657, 1219, 7207, 7005, 51428], "temperature": 0.0, "avg_logprob": -0.16802947018124642, "compression_ratio": 1.756, "no_speech_prob": 0.005554063245654106}, {"id": 507, "seek": 234196, "start": 2363.48, "end": 2366.92, "text": " We create an instance of the schedule thread pool executor and we pass", "tokens": [51440, 492, 1884, 364, 5197, 295, 264, 7567, 7207, 7005, 7568, 284, 293, 321, 1320, 51612], "temperature": 0.0, "avg_logprob": -0.16802947018124642, "compression_ratio": 1.756, "no_speech_prob": 0.005554063245654106}, {"id": 508, "seek": 234196, "start": 2367.56, "end": 2370.6, "text": " The the size so how many threads it's two threads in this case", "tokens": [51644, 440, 264, 2744, 370, 577, 867, 19314, 309, 311, 732, 19314, 294, 341, 1389, 51796], "temperature": 0.0, "avg_logprob": -0.16802947018124642, "compression_ratio": 1.756, "no_speech_prob": 0.005554063245654106}, {"id": 509, "seek": 237060, "start": 2371.24, "end": 2376.44, "text": " And then we create two runable tasks. So these tasks could be anything it could even be something like", "tokens": [50396, 400, 550, 321, 1884, 732, 1190, 712, 9608, 13, 407, 613, 9608, 727, 312, 1340, 309, 727, 754, 312, 746, 411, 50656], "temperature": 0.0, "avg_logprob": -0.14868433621464944, "compression_ratio": 1.682608695652174, "no_speech_prob": 0.0041336300782859325}, {"id": 510, "seek": 237060, "start": 2377.48, "end": 2378.44, "text": " the main", "tokens": [50708, 264, 2135, 50756], "temperature": 0.0, "avg_logprob": -0.14868433621464944, "compression_ratio": 1.682608695652174, "no_speech_prob": 0.0041336300782859325}, {"id": 511, "seek": 237060, "start": 2378.44, "end": 2381.16, "text": " Let's say the main thread that's running the program and then in the background", "tokens": [50756, 961, 311, 584, 264, 2135, 7207, 300, 311, 2614, 264, 1461, 293, 550, 294, 264, 3678, 50892], "temperature": 0.0, "avg_logprob": -0.14868433621464944, "compression_ratio": 1.682608695652174, "no_speech_prob": 0.0041336300782859325}, {"id": 512, "seek": 237060, "start": 2382.2, "end": 2384.52, "text": " clearing the cache in a given time", "tokens": [50944, 23937, 264, 19459, 294, 257, 2212, 565, 51060], "temperature": 0.0, "avg_logprob": -0.14868433621464944, "compression_ratio": 1.682608695652174, "no_speech_prob": 0.0041336300782859325}, {"id": 513, "seek": 237060, "start": 2385.24, "end": 2387.24, "text": " um, and afterwards", "tokens": [51096, 1105, 11, 293, 10543, 51196], "temperature": 0.0, "avg_logprob": -0.14868433621464944, "compression_ratio": 1.682608695652174, "no_speech_prob": 0.0041336300782859325}, {"id": 514, "seek": 237060, "start": 2388.44, "end": 2392.7599999999998, "text": " The first one will execute in two seconds and the second one in five seconds", "tokens": [51256, 440, 700, 472, 486, 14483, 294, 732, 3949, 293, 264, 1150, 472, 294, 1732, 3949, 51472], "temperature": 0.0, "avg_logprob": -0.14868433621464944, "compression_ratio": 1.682608695652174, "no_speech_prob": 0.0041336300782859325}, {"id": 515, "seek": 237060, "start": 2393.24, "end": 2396.68, "text": " That's it's simple as that so if if I run this method you'll see", "tokens": [51496, 663, 311, 309, 311, 2199, 382, 300, 370, 498, 498, 286, 1190, 341, 3170, 291, 603, 536, 51668], "temperature": 0.0, "avg_logprob": -0.14868433621464944, "compression_ratio": 1.682608695652174, "no_speech_prob": 0.0041336300782859325}, {"id": 516, "seek": 239668, "start": 2396.7599999999998, "end": 2398.7599999999998, "text": " The", "tokens": [50368, 440, 50468], "temperature": 0.0, "avg_logprob": -0.19501615004106002, "compression_ratio": 1.8744394618834082, "no_speech_prob": 0.0025109376292675734}, {"id": 517, "seek": 239668, "start": 2400.2799999999997, "end": 2404.44, "text": " The first one executed in two seconds and the other one executed a bit later and then", "tokens": [50544, 440, 700, 472, 17577, 294, 732, 3949, 293, 264, 661, 472, 17577, 257, 857, 1780, 293, 550, 50752], "temperature": 0.0, "avg_logprob": -0.19501615004106002, "compression_ratio": 1.8744394618834082, "no_speech_prob": 0.0025109376292675734}, {"id": 518, "seek": 239668, "start": 2405.08, "end": 2407.08, "text": " That a bit later. Sorry", "tokens": [50784, 663, 257, 857, 1780, 13, 4919, 50884], "temperature": 0.0, "avg_logprob": -0.19501615004106002, "compression_ratio": 1.8744394618834082, "no_speech_prob": 0.0025109376292675734}, {"id": 519, "seek": 239668, "start": 2407.64, "end": 2412.2799999999997, "text": " That's the current time. I apologize. So that was in the execution. So that was the first task", "tokens": [50912, 663, 311, 264, 2190, 565, 13, 286, 12328, 13, 407, 300, 390, 294, 264, 15058, 13, 407, 300, 390, 264, 700, 5633, 51144], "temperature": 0.0, "avg_logprob": -0.19501615004106002, "compression_ratio": 1.8744394618834082, "no_speech_prob": 0.0025109376292675734}, {"id": 520, "seek": 239668, "start": 2413.0, "end": 2415.0, "text": " And that was the second task", "tokens": [51180, 400, 300, 390, 264, 1150, 5633, 51280], "temperature": 0.0, "avg_logprob": -0.19501615004106002, "compression_ratio": 1.8744394618834082, "no_speech_prob": 0.0025109376292675734}, {"id": 521, "seek": 239668, "start": 2415.16, "end": 2421.24, "text": " So I shouldn't have said every cache every cache of both tasks because this could be in fact, uh, something else. It could be", "tokens": [51288, 407, 286, 4659, 380, 362, 848, 633, 19459, 633, 19459, 295, 1293, 9608, 570, 341, 727, 312, 294, 1186, 11, 2232, 11, 746, 1646, 13, 467, 727, 312, 51592], "temperature": 0.0, "avg_logprob": -0.19501615004106002, "compression_ratio": 1.8744394618834082, "no_speech_prob": 0.0025109376292675734}, {"id": 522, "seek": 239668, "start": 2422.04, "end": 2425.56, "text": " um, I don't know some some some main task and then the", "tokens": [51632, 1105, 11, 286, 500, 380, 458, 512, 512, 512, 2135, 5633, 293, 550, 264, 51808], "temperature": 0.0, "avg_logprob": -0.19501615004106002, "compression_ratio": 1.8744394618834082, "no_speech_prob": 0.0025109376292675734}, {"id": 523, "seek": 242556, "start": 2426.12, "end": 2427.88, "text": " second one", "tokens": [50392, 1150, 472, 50480], "temperature": 0.0, "avg_logprob": -0.20767214184715635, "compression_ratio": 1.6163793103448276, "no_speech_prob": 0.0017543368740007281}, {"id": 524, "seek": 242556, "start": 2427.88, "end": 2431.0, "text": " Which we scheduled to run in five seconds could be the cache eviction", "tokens": [50480, 3013, 321, 15678, 281, 1190, 294, 1732, 3949, 727, 312, 264, 19459, 1073, 4105, 50636], "temperature": 0.0, "avg_logprob": -0.20767214184715635, "compression_ratio": 1.6163793103448276, "no_speech_prob": 0.0017543368740007281}, {"id": 525, "seek": 242556, "start": 2432.44, "end": 2435.32, "text": " So that's the implementation of of that idea of", "tokens": [50708, 407, 300, 311, 264, 11420, 295, 295, 300, 1558, 295, 50852], "temperature": 0.0, "avg_logprob": -0.20767214184715635, "compression_ratio": 1.6163793103448276, "no_speech_prob": 0.0017543368740007281}, {"id": 526, "seek": 242556, "start": 2436.12, "end": 2442.12, "text": " Cache eviction policy using a scheduled critical executor and to be you know, pretty more formally and clearly", "tokens": [50892, 383, 6000, 1073, 4105, 3897, 1228, 257, 15678, 4924, 7568, 284, 293, 281, 312, 291, 458, 11, 1238, 544, 25983, 293, 4448, 51192], "temperature": 0.0, "avg_logprob": -0.20767214184715635, "compression_ratio": 1.6163793103448276, "no_speech_prob": 0.0017543368740007281}, {"id": 527, "seek": 242556, "start": 2442.7599999999998, "end": 2449.08, "text": " Joshua block states most commonly the useful lifetime of cache entry is less well defined", "tokens": [51224, 24005, 3461, 4368, 881, 12719, 264, 4420, 11364, 295, 19459, 8729, 307, 1570, 731, 7642, 51540], "temperature": 0.0, "avg_logprob": -0.20767214184715635, "compression_ratio": 1.6163793103448276, "no_speech_prob": 0.0017543368740007281}, {"id": 528, "seek": 242556, "start": 2449.48, "end": 2452.2799999999997, "text": " With entries becoming less valuable over time", "tokens": [51560, 2022, 23041, 5617, 1570, 8263, 670, 565, 51700], "temperature": 0.0, "avg_logprob": -0.20767214184715635, "compression_ratio": 1.6163793103448276, "no_speech_prob": 0.0017543368740007281}, {"id": 529, "seek": 245228, "start": 2452.84, "end": 2459.8, "text": " Under these circumstances the cache should occasionally be cleansed of entries that have fallen into disuse. So that's where", "tokens": [50392, 6974, 613, 9121, 264, 19459, 820, 16895, 312, 16912, 292, 295, 23041, 300, 362, 11547, 666, 717, 438, 13, 407, 300, 311, 689, 50740], "temperature": 0.0, "avg_logprob": -0.2424297332763672, "compression_ratio": 1.744, "no_speech_prob": 0.0040697562508285046}, {"id": 530, "seek": 245228, "start": 2460.52, "end": 2463.7200000000003, "text": " scheduling a task like this using uh, these scheduled", "tokens": [50776, 29055, 257, 5633, 411, 341, 1228, 2232, 11, 613, 15678, 50936], "temperature": 0.0, "avg_logprob": -0.2424297332763672, "compression_ratio": 1.744, "no_speech_prob": 0.0040697562508285046}, {"id": 531, "seek": 245228, "start": 2463.8, "end": 2466.1200000000003, "text": " Terrapulexecuda could come in handy because", "tokens": [50940, 6564, 4007, 425, 3121, 3045, 11152, 727, 808, 294, 13239, 570, 51056], "temperature": 0.0, "avg_logprob": -0.2424297332763672, "compression_ratio": 1.744, "no_speech_prob": 0.0040697562508285046}, {"id": 532, "seek": 245228, "start": 2466.76, "end": 2471.32, "text": " We could time it because schedule a cache eviction in a given period of time", "tokens": [51088, 492, 727, 565, 309, 570, 7567, 257, 19459, 1073, 4105, 294, 257, 2212, 2896, 295, 565, 51316], "temperature": 0.0, "avg_logprob": -0.2424297332763672, "compression_ratio": 1.744, "no_speech_prob": 0.0040697562508285046}, {"id": 533, "seek": 245228, "start": 2471.6400000000003, "end": 2477.8, "text": " And then he even states that the linked hash map does this so if you take a look at the docs for the linked hash map", "tokens": [51332, 400, 550, 415, 754, 4368, 300, 264, 9408, 22019, 4471, 775, 341, 370, 498, 291, 747, 257, 574, 412, 264, 45623, 337, 264, 9408, 22019, 4471, 51640], "temperature": 0.0, "avg_logprob": -0.2424297332763672, "compression_ratio": 1.744, "no_speech_prob": 0.0040697562508285046}, {"id": 534, "seek": 245228, "start": 2478.1200000000003, "end": 2480.1200000000003, "text": " there's a protected", "tokens": [51656, 456, 311, 257, 10594, 51756], "temperature": 0.0, "avg_logprob": -0.2424297332763672, "compression_ratio": 1.744, "no_speech_prob": 0.0040697562508285046}, {"id": 535, "seek": 248012, "start": 2480.52, "end": 2481.72, "text": " Boolean", "tokens": [50384, 23351, 28499, 50444], "temperature": 0.0, "avg_logprob": -0.17594864724696369, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.002800603397190571}, {"id": 536, "seek": 248012, "start": 2481.72, "end": 2488.3599999999997, "text": " method called remove eldest entry and that method what that does is in fact", "tokens": [50444, 3170, 1219, 4159, 38096, 8729, 293, 300, 3170, 437, 300, 775, 307, 294, 1186, 50776], "temperature": 0.0, "avg_logprob": -0.17594864724696369, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.002800603397190571}, {"id": 537, "seek": 248012, "start": 2492.2, "end": 2498.3599999999997, "text": " It's an implementation of what Joshua block is described here. It is is clearing the uh, linkless", "tokens": [50968, 467, 311, 364, 11420, 295, 437, 24005, 3461, 307, 7619, 510, 13, 467, 307, 307, 23937, 264, 2232, 11, 2113, 1832, 51276], "temperature": 0.0, "avg_logprob": -0.17594864724696369, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.002800603397190571}, {"id": 538, "seek": 248012, "start": 2499.64, "end": 2501.64, "text": " Sorry the link hash map", "tokens": [51340, 4919, 264, 2113, 22019, 4471, 51440], "temperature": 0.0, "avg_logprob": -0.17594864724696369, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.002800603397190571}, {"id": 539, "seek": 248012, "start": 2501.64, "end": 2503.48, "text": " By clearing out the old entries", "tokens": [51440, 3146, 23937, 484, 264, 1331, 23041, 51532], "temperature": 0.0, "avg_logprob": -0.17594864724696369, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.002800603397190571}, {"id": 540, "seek": 248012, "start": 2503.48, "end": 2509.7999999999997, "text": " So it says it provides the implement of this class with the opportunity to remove the eldest entry each time a new one is added", "tokens": [51532, 407, 309, 1619, 309, 6417, 264, 4445, 295, 341, 1508, 365, 264, 2650, 281, 4159, 264, 38096, 8729, 1184, 565, 257, 777, 472, 307, 3869, 51848], "temperature": 0.0, "avg_logprob": -0.17594864724696369, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.002800603397190571}, {"id": 541, "seek": 250980, "start": 2509.96, "end": 2512.52, "text": " And then we get to the third way memory leaks could happen", "tokens": [50372, 400, 550, 321, 483, 281, 264, 2636, 636, 4675, 28885, 727, 1051, 50500], "temperature": 0.0, "avg_logprob": -0.14563165892154797, "compression_ratio": 1.8341013824884793, "no_speech_prob": 0.0016483230283483863}, {"id": 542, "seek": 250980, "start": 2512.84, "end": 2516.1200000000003, "text": " So we've discussed, uh, how it could happen if classes", "tokens": [50516, 407, 321, 600, 7152, 11, 2232, 11, 577, 309, 727, 1051, 498, 5359, 50680], "temperature": 0.0, "avg_logprob": -0.14563165892154797, "compression_ratio": 1.8341013824884793, "no_speech_prob": 0.0016483230283483863}, {"id": 543, "seek": 250980, "start": 2516.52, "end": 2522.04, "text": " Manages their own memory if we discussed how it could happen in caches and the third way is", "tokens": [50700, 2458, 1660, 641, 1065, 4675, 498, 321, 7152, 577, 309, 727, 1051, 294, 269, 13272, 293, 264, 2636, 636, 307, 50976], "temperature": 0.0, "avg_logprob": -0.14563165892154797, "compression_ratio": 1.8341013824884793, "no_speech_prob": 0.0016483230283483863}, {"id": 544, "seek": 250980, "start": 2522.6000000000004, "end": 2526.52, "text": " uh, the third common way is it could happen when it comes to, uh", "tokens": [51004, 2232, 11, 264, 2636, 2689, 636, 307, 309, 727, 1051, 562, 309, 1487, 281, 11, 2232, 51200], "temperature": 0.0, "avg_logprob": -0.14563165892154797, "compression_ratio": 1.8341013824884793, "no_speech_prob": 0.0016483230283483863}, {"id": 545, "seek": 250980, "start": 2527.48, "end": 2529.48, "text": " listeners and other callbacks when we", "tokens": [51248, 23274, 293, 661, 818, 17758, 562, 321, 51348], "temperature": 0.0, "avg_logprob": -0.14563165892154797, "compression_ratio": 1.8341013824884793, "no_speech_prob": 0.0016483230283483863}, {"id": 546, "seek": 250980, "start": 2530.36, "end": 2532.36, "text": " When a client uses an api", "tokens": [51392, 1133, 257, 6423, 4960, 364, 1882, 72, 51492], "temperature": 0.0, "avg_logprob": -0.14563165892154797, "compression_ratio": 1.8341013824884793, "no_speech_prob": 0.0016483230283483863}, {"id": 547, "seek": 250980, "start": 2532.92, "end": 2536.92, "text": " With a callback function. So firstly, what's a callback? Um, so", "tokens": [51520, 2022, 257, 818, 3207, 2445, 13, 407, 27376, 11, 437, 311, 257, 818, 3207, 30, 3301, 11, 370, 51720], "temperature": 0.0, "avg_logprob": -0.14563165892154797, "compression_ratio": 1.8341013824884793, "no_speech_prob": 0.0016483230283483863}, {"id": 548, "seek": 253692, "start": 2537.64, "end": 2539.2400000000002, "text": " Rich, uh", "tokens": [50400, 6781, 11, 2232, 50480], "temperature": 0.0, "avg_logprob": -0.18306974931196732, "compression_ratio": 1.7083333333333333, "no_speech_prob": 0.0015007222536951303}, {"id": 549, "seek": 253692, "start": 2539.2400000000002, "end": 2545.4, "text": " Rich of jindal from geeks4geeks states that a callback function is a function that is passed", "tokens": [50480, 6781, 295, 361, 471, 304, 490, 1519, 24785, 19, 432, 24785, 4368, 300, 257, 818, 3207, 2445, 307, 257, 2445, 300, 307, 4678, 50788], "temperature": 0.0, "avg_logprob": -0.18306974931196732, "compression_ratio": 1.7083333333333333, "no_speech_prob": 0.0015007222536951303}, {"id": 550, "seek": 253692, "start": 2545.8, "end": 2550.2000000000003, "text": " Into another function as an argument and is expected to execute after some kind of event", "tokens": [50808, 23373, 1071, 2445, 382, 364, 6770, 293, 307, 5176, 281, 14483, 934, 512, 733, 295, 2280, 51028], "temperature": 0.0, "avg_logprob": -0.18306974931196732, "compression_ratio": 1.7083333333333333, "no_speech_prob": 0.0015007222536951303}, {"id": 551, "seek": 253692, "start": 2551.0, "end": 2557.48, "text": " I would also add it's also an example of so the how callbacks are implemented is an example of the observer pattern", "tokens": [51068, 286, 576, 611, 909, 309, 311, 611, 364, 1365, 295, 370, 264, 577, 818, 17758, 366, 12270, 307, 364, 1365, 295, 264, 27878, 5102, 51392], "temperature": 0.0, "avg_logprob": -0.18306974931196732, "compression_ratio": 1.7083333333333333, "no_speech_prob": 0.0015007222536951303}, {"id": 552, "seek": 253692, "start": 2557.88, "end": 2561.2400000000002, "text": " Where an object should subscribe to another object and listens", "tokens": [51412, 2305, 364, 2657, 820, 3022, 281, 1071, 2657, 293, 35959, 51580], "temperature": 0.0, "avg_logprob": -0.18306974931196732, "compression_ratio": 1.7083333333333333, "no_speech_prob": 0.0015007222536951303}, {"id": 553, "seek": 256124, "start": 2561.8799999999997, "end": 2563.8799999999997, "text": " To changes in events on runtime", "tokens": [50396, 1407, 2962, 294, 3931, 322, 34474, 50496], "temperature": 0.0, "avg_logprob": -0.16297146158480863, "compression_ratio": 1.6965811965811965, "no_speech_prob": 0.024788761511445045}, {"id": 554, "seek": 256124, "start": 2564.4399999999996, "end": 2568.8399999999997, "text": " And that's what a callback is. It's a it's a function. It can pass to be executed", "tokens": [50524, 400, 300, 311, 437, 257, 818, 3207, 307, 13, 467, 311, 257, 309, 311, 257, 2445, 13, 467, 393, 1320, 281, 312, 17577, 50744], "temperature": 0.0, "avg_logprob": -0.16297146158480863, "compression_ratio": 1.6965811965811965, "no_speech_prob": 0.024788761511445045}, {"id": 555, "seek": 256124, "start": 2569.7999999999997, "end": 2571.0, "text": " you know", "tokens": [50792, 291, 458, 50852], "temperature": 0.0, "avg_logprob": -0.16297146158480863, "compression_ratio": 1.6965811965811965, "no_speech_prob": 0.024788761511445045}, {"id": 556, "seek": 256124, "start": 2571.0, "end": 2573.56, "text": " Contingent on on on an event during runtime", "tokens": [50852, 2656, 783, 317, 322, 322, 322, 364, 2280, 1830, 34474, 50980], "temperature": 0.0, "avg_logprob": -0.16297146158480863, "compression_ratio": 1.6965811965811965, "no_speech_prob": 0.024788761511445045}, {"id": 557, "seek": 256124, "start": 2574.9199999999996, "end": 2579.3999999999996, "text": " Uh, even though I've used callbacks obviously javascript uses well we use promises", "tokens": [51048, 4019, 11, 754, 1673, 286, 600, 1143, 818, 17758, 2745, 361, 37331, 5944, 4960, 731, 321, 764, 16403, 51272], "temperature": 0.0, "avg_logprob": -0.16297146158480863, "compression_ratio": 1.6965811965811965, "no_speech_prob": 0.024788761511445045}, {"id": 558, "seek": 256124, "start": 2579.3999999999996, "end": 2583.24, "text": " But then a lot of javascript uses before promises use callbacks", "tokens": [51272, 583, 550, 257, 688, 295, 361, 37331, 5944, 4960, 949, 16403, 764, 818, 17758, 51464], "temperature": 0.0, "avg_logprob": -0.16297146158480863, "compression_ratio": 1.6965811965811965, "no_speech_prob": 0.024788761511445045}, {"id": 559, "seek": 256124, "start": 2583.9599999999996, "end": 2589.64, "text": " And even in java we use callbacks, uh, but I didn't initially get the understanding", "tokens": [51500, 400, 754, 294, 361, 4061, 321, 764, 818, 17758, 11, 2232, 11, 457, 286, 994, 380, 9105, 483, 264, 3701, 51784], "temperature": 0.0, "avg_logprob": -0.16297146158480863, "compression_ratio": 1.6965811965811965, "no_speech_prob": 0.024788761511445045}, {"id": 560, "seek": 258964, "start": 2589.96, "end": 2591.96, "text": " Oh, I didn't initially understand", "tokens": [50380, 876, 11, 286, 994, 380, 9105, 1223, 50480], "temperature": 0.0, "avg_logprob": -0.20250581345468197, "compression_ratio": 1.582995951417004, "no_speech_prob": 0.007935751229524612}, {"id": 561, "seek": 258964, "start": 2592.6, "end": 2593.96, "text": " How it can", "tokens": [50512, 1012, 309, 393, 50580], "temperature": 0.0, "avg_logprob": -0.20250581345468197, "compression_ratio": 1.582995951417004, "no_speech_prob": 0.007935751229524612}, {"id": 562, "seek": 258964, "start": 2593.96, "end": 2598.68, "text": " Work apropos weak references and how the garbage collection works when it comes to callbacks", "tokens": [50580, 6603, 1882, 1513, 329, 5336, 15400, 293, 577, 264, 14150, 5765, 1985, 562, 309, 1487, 281, 818, 17758, 50816], "temperature": 0.0, "avg_logprob": -0.20250581345468197, "compression_ratio": 1.582995951417004, "no_speech_prob": 0.007935751229524612}, {"id": 563, "seek": 258964, "start": 2598.68, "end": 2602.6, "text": " So I did post a cycle of low question and I got a really good answer", "tokens": [50816, 407, 286, 630, 2183, 257, 6586, 295, 2295, 1168, 293, 286, 658, 257, 534, 665, 1867, 51012], "temperature": 0.0, "avg_logprob": -0.20250581345468197, "compression_ratio": 1.582995951417004, "no_speech_prob": 0.007935751229524612}, {"id": 564, "seek": 258964, "start": 2603.16, "end": 2605.16, "text": " By this user called, uh", "tokens": [51040, 3146, 341, 4195, 1219, 11, 2232, 51140], "temperature": 0.0, "avg_logprob": -0.20250581345468197, "compression_ratio": 1.582995951417004, "no_speech_prob": 0.007935751229524612}, {"id": 565, "seek": 258964, "start": 2605.4, "end": 2607.4, "text": " Ingo kegel", "tokens": [51152, 682, 1571, 803, 10345, 51252], "temperature": 0.0, "avg_logprob": -0.20250581345468197, "compression_ratio": 1.582995951417004, "no_speech_prob": 0.007935751229524612}, {"id": 566, "seek": 258964, "start": 2607.4, "end": 2610.92, "text": " I'll leave a link to this question down below in the description. Go take a look", "tokens": [51252, 286, 603, 1856, 257, 2113, 281, 341, 1168, 760, 2507, 294, 264, 3855, 13, 1037, 747, 257, 574, 51428], "temperature": 0.0, "avg_logprob": -0.20250581345468197, "compression_ratio": 1.582995951417004, "no_speech_prob": 0.007935751229524612}, {"id": 567, "seek": 258964, "start": 2611.7999999999997, "end": 2616.12, "text": " But you think that uses the answer. Let's try and make sense of what", "tokens": [51472, 583, 291, 519, 300, 4960, 264, 1867, 13, 961, 311, 853, 293, 652, 2020, 295, 437, 51688], "temperature": 0.0, "avg_logprob": -0.20250581345468197, "compression_ratio": 1.582995951417004, "no_speech_prob": 0.007935751229524612}, {"id": 568, "seek": 261612, "start": 2616.12, "end": 2618.12, "text": " Uh", "tokens": [50364, 4019, 50464], "temperature": 0.0, "avg_logprob": -0.2185837716767282, "compression_ratio": 1.7035398230088497, "no_speech_prob": 0.02555527724325657}, {"id": 569, "seek": 261612, "start": 2618.44, "end": 2624.2799999999997, "text": " Well, in fact before I say that I just want to say, uh, just a block states apropos this point", "tokens": [50480, 1042, 11, 294, 1186, 949, 286, 584, 300, 286, 445, 528, 281, 584, 11, 2232, 11, 445, 257, 3461, 4368, 1882, 1513, 329, 341, 935, 50772], "temperature": 0.0, "avg_logprob": -0.2185837716767282, "compression_ratio": 1.7035398230088497, "no_speech_prob": 0.02555527724325657}, {"id": 570, "seek": 261612, "start": 2624.6, "end": 2627.48, "text": " If you implement when I mean apropos this point, that's uh", "tokens": [50788, 759, 291, 4445, 562, 286, 914, 1882, 1513, 329, 341, 935, 11, 300, 311, 2232, 50932], "temperature": 0.0, "avg_logprob": -0.2185837716767282, "compression_ratio": 1.7035398230088497, "no_speech_prob": 0.02555527724325657}, {"id": 571, "seek": 261612, "start": 2628.12, "end": 2633.08, "text": " When it comes to memory leaks with listeners and other callbacks, he says he states", "tokens": [50964, 1133, 309, 1487, 281, 4675, 28885, 365, 23274, 293, 661, 818, 17758, 11, 415, 1619, 415, 4368, 51212], "temperature": 0.0, "avg_logprob": -0.2185837716767282, "compression_ratio": 1.7035398230088497, "no_speech_prob": 0.02555527724325657}, {"id": 572, "seek": 261612, "start": 2633.48, "end": 2639.24, "text": " If you implement an api where clients register callbacks, but don't do register them explicitly", "tokens": [51232, 759, 291, 4445, 364, 1882, 72, 689, 6982, 7280, 818, 17758, 11, 457, 500, 380, 360, 7280, 552, 20803, 51520], "temperature": 0.0, "avg_logprob": -0.2185837716767282, "compression_ratio": 1.7035398230088497, "no_speech_prob": 0.02555527724325657}, {"id": 573, "seek": 261612, "start": 2639.64, "end": 2643.24, "text": " They will accumulate unless you take some action", "tokens": [51540, 814, 486, 33384, 5969, 291, 747, 512, 3069, 51720], "temperature": 0.0, "avg_logprob": -0.2185837716767282, "compression_ratio": 1.7035398230088497, "no_speech_prob": 0.02555527724325657}, {"id": 574, "seek": 264324, "start": 2644.2, "end": 2647.7999999999997, "text": " So what does that mean? What what's the action we got to take the action?", "tokens": [50412, 407, 437, 775, 300, 914, 30, 708, 437, 311, 264, 3069, 321, 658, 281, 747, 264, 3069, 30, 50592], "temperature": 0.0, "avg_logprob": -0.14919487768862427, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.005468099843710661}, {"id": 575, "seek": 264324, "start": 2647.7999999999997, "end": 2655.3999999999996, "text": " We got to take would be using a weak reference. Um, and what before we get to the code. I I realized I should I should read out", "tokens": [50592, 492, 658, 281, 747, 576, 312, 1228, 257, 5336, 6408, 13, 3301, 11, 293, 437, 949, 321, 483, 281, 264, 3089, 13, 286, 286, 5334, 286, 820, 286, 820, 1401, 484, 50972], "temperature": 0.0, "avg_logprob": -0.14919487768862427, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.005468099843710661}, {"id": 576, "seek": 264324, "start": 2658.04, "end": 2659.8799999999997, "text": " Ingo kegel's answer here", "tokens": [51104, 682, 1571, 803, 10345, 311, 1867, 510, 51196], "temperature": 0.0, "avg_logprob": -0.14919487768862427, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.005468099843710661}, {"id": 577, "seek": 264324, "start": 2659.8799999999997, "end": 2664.2, "text": " He says a client of the api has to keep a strong reference to the listener", "tokens": [51196, 634, 1619, 257, 6423, 295, 264, 1882, 72, 575, 281, 1066, 257, 2068, 6408, 281, 264, 31569, 51412], "temperature": 0.0, "avg_logprob": -0.14919487768862427, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.005468099843710661}, {"id": 578, "seek": 264324, "start": 2664.7599999999998, "end": 2669.72, "text": " That's how it says without correct. So the we can define the listener here as an interface", "tokens": [51440, 663, 311, 577, 309, 1619, 1553, 3006, 13, 407, 264, 321, 393, 6964, 264, 31569, 510, 382, 364, 9226, 51688], "temperature": 0.0, "avg_logprob": -0.14919487768862427, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.005468099843710661}, {"id": 579, "seek": 264324, "start": 2669.72, "end": 2672.4399999999996, "text": " That's how we would normally do when implementing callbacks in java", "tokens": [51688, 663, 311, 577, 321, 576, 5646, 360, 562, 18114, 818, 17758, 294, 361, 4061, 51824], "temperature": 0.0, "avg_logprob": -0.14919487768862427, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.005468099843710661}, {"id": 580, "seek": 267324, "start": 2674.2, "end": 2678.12, "text": " The api only holds a weak reference to the listener to do that", "tokens": [50412, 440, 1882, 72, 787, 9190, 257, 5336, 6408, 281, 264, 31569, 281, 360, 300, 50608], "temperature": 0.0, "avg_logprob": -0.11951271347377611, "compression_ratio": 1.915, "no_speech_prob": 0.0002823651593644172}, {"id": 581, "seek": 267324, "start": 2679.7999999999997, "end": 2681.7999999999997, "text": " So that it does not prevent that's a", "tokens": [50692, 407, 300, 309, 775, 406, 4871, 300, 311, 257, 50792], "temperature": 0.0, "avg_logprob": -0.11951271347377611, "compression_ratio": 1.915, "no_speech_prob": 0.0002823651593644172}, {"id": 582, "seek": 267324, "start": 2682.8399999999997, "end": 2687.3999999999996, "text": " Type of that I believe so that it does not prevent the client from being garbage collected", "tokens": [50844, 15576, 295, 300, 286, 1697, 370, 300, 309, 775, 406, 4871, 264, 6423, 490, 885, 14150, 11087, 51072], "temperature": 0.0, "avg_logprob": -0.11951271347377611, "compression_ratio": 1.915, "no_speech_prob": 0.0002823651593644172}, {"id": 583, "seek": 267324, "start": 2687.9599999999996, "end": 2689.24, "text": " So it allows", "tokens": [51100, 407, 309, 4045, 51164], "temperature": 0.0, "avg_logprob": -0.11951271347377611, "compression_ratio": 1.915, "no_speech_prob": 0.0002823651593644172}, {"id": 584, "seek": 267324, "start": 2689.24, "end": 2695.7999999999997, "text": " Garbage collection to take place if required when the kind is garbage collected the listener is also garbage collected", "tokens": [51164, 7995, 9742, 5765, 281, 747, 1081, 498, 4739, 562, 264, 733, 307, 14150, 11087, 264, 31569, 307, 611, 14150, 11087, 51492], "temperature": 0.0, "avg_logprob": -0.11951271347377611, "compression_ratio": 1.915, "no_speech_prob": 0.0002823651593644172}, {"id": 585, "seek": 267324, "start": 2696.2799999999997, "end": 2699.08, "text": " That's that's a good thing because we want we don't want the", "tokens": [51516, 663, 311, 300, 311, 257, 665, 551, 570, 321, 528, 321, 500, 380, 528, 264, 51656], "temperature": 0.0, "avg_logprob": -0.11951271347377611, "compression_ratio": 1.915, "no_speech_prob": 0.0002823651593644172}, {"id": 586, "seek": 269908, "start": 2699.3199999999997, "end": 2705.24, "text": " Obsolute object the listener object to exist in memory and take up resources and that's why a weak reference would help", "tokens": [50376, 20707, 401, 1169, 2657, 264, 31569, 2657, 281, 2514, 294, 4675, 293, 747, 493, 3593, 293, 300, 311, 983, 257, 5336, 6408, 576, 854, 50672], "temperature": 0.0, "avg_logprob": -0.17262966292245047, "compression_ratio": 1.6569343065693432, "no_speech_prob": 0.013423717580735683}, {"id": 587, "seek": 269908, "start": 2706.04, "end": 2712.7599999999998, "text": " Now the implementation of that would be seen here. So this is the example's courtesy of ingo kegel as I said", "tokens": [50712, 823, 264, 11420, 295, 300, 576, 312, 1612, 510, 13, 407, 341, 307, 264, 1365, 311, 41704, 295, 3957, 78, 803, 10345, 382, 286, 848, 51048], "temperature": 0.0, "avg_logprob": -0.17262966292245047, "compression_ratio": 1.6569343065693432, "no_speech_prob": 0.013423717580735683}, {"id": 588, "seek": 269908, "start": 2713.16, "end": 2716.44, "text": " This is his code that I've repurposed uh to don't want to write this", "tokens": [51068, 639, 307, 702, 3089, 300, 286, 600, 1085, 20130, 1744, 2232, 281, 500, 380, 528, 281, 2464, 341, 51232], "temperature": 0.0, "avg_logprob": -0.17262966292245047, "compression_ratio": 1.6569343065693432, "no_speech_prob": 0.013423717580735683}, {"id": 589, "seek": 269908, "start": 2716.92, "end": 2718.04, "text": " um", "tokens": [51256, 1105, 51312], "temperature": 0.0, "avg_logprob": -0.17262966292245047, "compression_ratio": 1.6569343065693432, "no_speech_prob": 0.013423717580735683}, {"id": 590, "seek": 269908, "start": 2718.04, "end": 2724.12, "text": " So firstly, uh since java doesn't support function pointers, this represents a callback effectively", "tokens": [51312, 407, 27376, 11, 2232, 1670, 361, 4061, 1177, 380, 1406, 2445, 44548, 11, 341, 8855, 257, 818, 3207, 8659, 51616], "temperature": 0.0, "avg_logprob": -0.17262966292245047, "compression_ratio": 1.6569343065693432, "no_speech_prob": 0.013423717580735683}, {"id": 591, "seek": 269908, "start": 2724.2, "end": 2726.7599999999998, "text": " It's a reference to the function which will be called", "tokens": [51620, 467, 311, 257, 6408, 281, 264, 2445, 597, 486, 312, 1219, 51748], "temperature": 0.0, "avg_logprob": -0.17262966292245047, "compression_ratio": 1.6569343065693432, "no_speech_prob": 0.013423717580735683}, {"id": 592, "seek": 272676, "start": 2727.7200000000003, "end": 2731.5600000000004, "text": " So because we don't use function pointers, we can use callbacks in java", "tokens": [50412, 407, 570, 321, 500, 380, 764, 2445, 44548, 11, 321, 393, 764, 818, 17758, 294, 361, 4061, 50604], "temperature": 0.0, "avg_logprob": -0.14236975583163175, "compression_ratio": 1.7023809523809523, "no_speech_prob": 0.004068737383931875}, {"id": 593, "seek": 272676, "start": 2732.0400000000004, "end": 2737.48, "text": " Function pointers can be used in c++. I believe I don't quote me on that because I'm not a c++ programmer", "tokens": [50628, 11166, 882, 44548, 393, 312, 1143, 294, 269, 25472, 13, 286, 1697, 286, 500, 380, 6513, 385, 322, 300, 570, 286, 478, 406, 257, 269, 25472, 32116, 50900], "temperature": 0.0, "avg_logprob": -0.14236975583163175, "compression_ratio": 1.7023809523809523, "no_speech_prob": 0.004068737383931875}, {"id": 594, "seek": 272676, "start": 2737.8, "end": 2742.6000000000004, "text": " C++ programmer. Why am I talking so fast and fumbling my words too much of coffee?", "tokens": [50916, 383, 25472, 32116, 13, 1545, 669, 286, 1417, 370, 2370, 293, 283, 14188, 452, 2283, 886, 709, 295, 4982, 30, 51156], "temperature": 0.0, "avg_logprob": -0.14236975583163175, "compression_ratio": 1.7023809523809523, "no_speech_prob": 0.004068737383931875}, {"id": 595, "seek": 272676, "start": 2743.5600000000004, "end": 2747.7200000000003, "text": " So this callback demo represents the mock api that a user would use", "tokens": [51204, 407, 341, 818, 3207, 10723, 8855, 264, 17362, 1882, 72, 300, 257, 4195, 576, 764, 51412], "temperature": 0.0, "avg_logprob": -0.14236975583163175, "compression_ratio": 1.7023809523809523, "no_speech_prob": 0.004068737383931875}, {"id": 596, "seek": 272676, "start": 2748.36, "end": 2753.1600000000003, "text": " Initially, we have defined the listener here. So this listener is of the type the interface listener", "tokens": [51444, 29446, 11, 321, 362, 7642, 264, 31569, 510, 13, 407, 341, 31569, 307, 295, 264, 2010, 264, 9226, 31569, 51684], "temperature": 0.0, "avg_logprob": -0.14236975583163175, "compression_ratio": 1.7023809523809523, "no_speech_prob": 0.004068737383931875}, {"id": 597, "seek": 275316, "start": 2753.3199999999997, "end": 2760.2, "text": " Um, and then we've got to initially register this listener. That's what the client would do. So the client of this api", "tokens": [50372, 3301, 11, 293, 550, 321, 600, 658, 281, 9105, 7280, 341, 31569, 13, 663, 311, 437, 264, 6423, 576, 360, 13, 407, 264, 6423, 295, 341, 1882, 72, 50716], "temperature": 0.0, "avg_logprob": -0.1443605255662349, "compression_ratio": 1.8273092369477912, "no_speech_prob": 0.012622885406017303}, {"id": 598, "seek": 275316, "start": 2760.92, "end": 2767.3199999999997, "text": " Uh would do that a bit later because the observer of this api has to use that method", "tokens": [50752, 4019, 576, 360, 300, 257, 857, 1780, 570, 264, 27878, 295, 341, 1882, 72, 575, 281, 764, 300, 3170, 51072], "temperature": 0.0, "avg_logprob": -0.1443605255662349, "compression_ratio": 1.8273092369477912, "no_speech_prob": 0.012622885406017303}, {"id": 599, "seek": 275316, "start": 2767.8799999999997, "end": 2769.96, "text": " And register itself. This is a bit confusing", "tokens": [51100, 400, 7280, 2564, 13, 639, 307, 257, 857, 13181, 51204], "temperature": 0.0, "avg_logprob": -0.1443605255662349, "compression_ratio": 1.8273092369477912, "no_speech_prob": 0.012622885406017303}, {"id": 600, "seek": 275316, "start": 2769.96, "end": 2773.08, "text": " I should have maybe called it used to separate class and called the client", "tokens": [51204, 286, 820, 362, 1310, 1219, 309, 1143, 281, 4994, 1508, 293, 1219, 264, 6423, 51360], "temperature": 0.0, "avg_logprob": -0.1443605255662349, "compression_ratio": 1.8273092369477912, "no_speech_prob": 0.012622885406017303}, {"id": 601, "seek": 275316, "start": 2773.08, "end": 2776.6, "text": " But this callbacks demo class is the client of this api", "tokens": [51360, 583, 341, 818, 17758, 10723, 1508, 307, 264, 6423, 295, 341, 1882, 72, 51536], "temperature": 0.0, "avg_logprob": -0.1443605255662349, "compression_ratio": 1.8273092369477912, "no_speech_prob": 0.012622885406017303}, {"id": 602, "seek": 275316, "start": 2777.3199999999997, "end": 2782.7599999999998, "text": " Just keep in keep in mind. Um, so that client would have a strong reference", "tokens": [51572, 1449, 1066, 294, 1066, 294, 1575, 13, 3301, 11, 370, 300, 6423, 576, 362, 257, 2068, 6408, 51844], "temperature": 0.0, "avg_logprob": -0.1443605255662349, "compression_ratio": 1.8273092369477912, "no_speech_prob": 0.012622885406017303}, {"id": 603, "seek": 278276, "start": 2782.84, "end": 2784.1200000000003, "text": " however", "tokens": [50368, 4461, 50432], "temperature": 0.0, "avg_logprob": -0.15899804126785463, "compression_ratio": 1.7761194029850746, "no_speech_prob": 0.004069741349667311}, {"id": 604, "seek": 278276, "start": 2784.1200000000003, "end": 2785.8, "text": " once the", "tokens": [50432, 1564, 264, 50516], "temperature": 0.0, "avg_logprob": -0.15899804126785463, "compression_ratio": 1.7761194029850746, "no_speech_prob": 0.004069741349667311}, {"id": 605, "seek": 278276, "start": 2785.8, "end": 2787.8, "text": " registering is done the", "tokens": [50516, 47329, 307, 1096, 264, 50616], "temperature": 0.0, "avg_logprob": -0.15899804126785463, "compression_ratio": 1.7761194029850746, "no_speech_prob": 0.004069741349667311}, {"id": 606, "seek": 278276, "start": 2787.8, "end": 2789.8, "text": " api itself", "tokens": [50616, 1882, 72, 2564, 50716], "temperature": 0.0, "avg_logprob": -0.15899804126785463, "compression_ratio": 1.7761194029850746, "no_speech_prob": 0.004069741349667311}, {"id": 607, "seek": 278276, "start": 2789.96, "end": 2796.6800000000003, "text": " Will maintain a weak reference because then what happens is when this client at one point is garbage collected", "tokens": [50724, 3099, 6909, 257, 5336, 6408, 570, 550, 437, 2314, 307, 562, 341, 6423, 412, 472, 935, 307, 14150, 11087, 51060], "temperature": 0.0, "avg_logprob": -0.15899804126785463, "compression_ratio": 1.7761194029850746, "no_speech_prob": 0.004069741349667311}, {"id": 608, "seek": 278276, "start": 2798.0400000000004, "end": 2800.0400000000004, "text": " So would the listener", "tokens": [51128, 407, 576, 264, 31569, 51228], "temperature": 0.0, "avg_logprob": -0.15899804126785463, "compression_ratio": 1.7761194029850746, "no_speech_prob": 0.004069741349667311}, {"id": 609, "seek": 278276, "start": 2800.76, "end": 2803.88, "text": " That it registers and then we have this file listener method", "tokens": [51264, 663, 309, 38351, 293, 550, 321, 362, 341, 3991, 31569, 3170, 51420], "temperature": 0.0, "avg_logprob": -0.15899804126785463, "compression_ratio": 1.7761194029850746, "no_speech_prob": 0.004069741349667311}, {"id": 610, "seek": 278276, "start": 2804.28, "end": 2809.6400000000003, "text": " Which checks for the listener which which checks if it's registered and then fires an event which we've defined", "tokens": [51440, 3013, 13834, 337, 264, 31569, 597, 597, 13834, 498, 309, 311, 13968, 293, 550, 15044, 364, 2280, 597, 321, 600, 7642, 51708], "temperature": 0.0, "avg_logprob": -0.15899804126785463, "compression_ratio": 1.7761194029850746, "no_speech_prob": 0.004069741349667311}, {"id": 611, "seek": 280964, "start": 2810.6, "end": 2816.8399999999997, "text": " Yeah, which runs some tasks. So that's kind of how it's used in the context of callbacks and listeners", "tokens": [50412, 865, 11, 597, 6676, 512, 9608, 13, 407, 300, 311, 733, 295, 577, 309, 311, 1143, 294, 264, 4319, 295, 818, 17758, 293, 23274, 50724], "temperature": 0.0, "avg_logprob": -0.1446269088321262, "compression_ratio": 1.49746192893401, "no_speech_prob": 0.004680878948420286}, {"id": 612, "seek": 280964, "start": 2818.92, "end": 2821.8799999999997, "text": " And and that's why using a weak reference would help", "tokens": [50828, 400, 293, 300, 311, 983, 1228, 257, 5336, 6408, 576, 854, 50976], "temperature": 0.0, "avg_logprob": -0.1446269088321262, "compression_ratio": 1.49746192893401, "no_speech_prob": 0.004680878948420286}, {"id": 613, "seek": 280964, "start": 2822.44, "end": 2828.04, "text": " With ensuring that there aren't any memory leaks when a client uses our api", "tokens": [51004, 2022, 16882, 300, 456, 3212, 380, 604, 4675, 28885, 562, 257, 6423, 4960, 527, 1882, 72, 51284], "temperature": 0.0, "avg_logprob": -0.1446269088321262, "compression_ratio": 1.49746192893401, "no_speech_prob": 0.004680878948420286}, {"id": 614, "seek": 280964, "start": 2829.16, "end": 2832.04, "text": " And then to conclude in the final paragraph Joshua Block states", "tokens": [51340, 400, 550, 281, 16886, 294, 264, 2572, 18865, 24005, 17500, 4368, 51484], "temperature": 0.0, "avg_logprob": -0.1446269088321262, "compression_ratio": 1.49746192893401, "no_speech_prob": 0.004680878948420286}, {"id": 615, "seek": 283204, "start": 2832.84, "end": 2835.96, "text": " Biggest memory leaks typically do not manifest themselves", "tokens": [50404, 5429, 2629, 4675, 28885, 5850, 360, 406, 10067, 2969, 50560], "temperature": 0.0, "avg_logprob": -0.163074220929827, "compression_ratio": 1.6123348017621146, "no_speech_prob": 0.02756251022219658}, {"id": 616, "seek": 283204, "start": 2836.44, "end": 2841.08, "text": " As obvious failures. They may remain present in a system for years", "tokens": [50584, 1018, 6322, 20774, 13, 814, 815, 6222, 1974, 294, 257, 1185, 337, 924, 50816], "temperature": 0.0, "avg_logprob": -0.163074220929827, "compression_ratio": 1.6123348017621146, "no_speech_prob": 0.02756251022219658}, {"id": 617, "seek": 283204, "start": 2841.56, "end": 2846.04, "text": " They typically discovered only as a result of careful code inspection", "tokens": [50840, 814, 5850, 6941, 787, 382, 257, 1874, 295, 5026, 3089, 22085, 51064], "temperature": 0.0, "avg_logprob": -0.163074220929827, "compression_ratio": 1.6123348017621146, "no_speech_prob": 0.02756251022219658}, {"id": 618, "seek": 283204, "start": 2846.52, "end": 2852.68, "text": " Or with the aid of a debugging tool known as a heat profiler heat profiler can also be called like a java profiler", "tokens": [51088, 1610, 365, 264, 9418, 295, 257, 45592, 2290, 2570, 382, 257, 3738, 1740, 5441, 3738, 1740, 5441, 393, 611, 312, 1219, 411, 257, 361, 4061, 1740, 5441, 51396], "temperature": 0.0, "avg_logprob": -0.163074220929827, "compression_ratio": 1.6123348017621146, "no_speech_prob": 0.02756251022219658}, {"id": 619, "seek": 283204, "start": 2853.08, "end": 2855.64, "text": " And that's a tool pretty much that monitors the bytecode", "tokens": [51416, 400, 300, 311, 257, 2290, 1238, 709, 300, 26518, 264, 40846, 22332, 51544], "temperature": 0.0, "avg_logprob": -0.163074220929827, "compression_ratio": 1.6123348017621146, "no_speech_prob": 0.02756251022219658}, {"id": 620, "seek": 285564, "start": 2856.12, "end": 2862.12, "text": " Constructs and operations at the jvm level at a very low level using a heat profiler. You could", "tokens": [50388, 8574, 1757, 82, 293, 7705, 412, 264, 361, 85, 76, 1496, 412, 257, 588, 2295, 1496, 1228, 257, 3738, 1740, 5441, 13, 509, 727, 50688], "temperature": 0.0, "avg_logprob": -0.18430314412931117, "compression_ratio": 1.599078341013825, "no_speech_prob": 0.0466906763613224}, {"id": 621, "seek": 285564, "start": 2863.16, "end": 2865.7999999999997, "text": " Monitor your code and examine memory usage", "tokens": [50740, 33799, 428, 3089, 293, 17496, 4675, 14924, 50872], "temperature": 0.0, "avg_logprob": -0.18430314412931117, "compression_ratio": 1.599078341013825, "no_speech_prob": 0.0466906763613224}, {"id": 622, "seek": 285564, "start": 2866.2, "end": 2871.3199999999997, "text": " How garbage collection takes place if resources are being used waste used wastefully", "tokens": [50892, 1012, 14150, 5765, 2516, 1081, 498, 3593, 366, 885, 1143, 5964, 1143, 5964, 2277, 51148], "temperature": 0.0, "avg_logprob": -0.18430314412931117, "compression_ratio": 1.599078341013825, "no_speech_prob": 0.0466906763613224}, {"id": 623, "seek": 285564, "start": 2871.96, "end": 2876.52, "text": " If there are memory leaks all these things we discussed could be found through a tool like a", "tokens": [51180, 759, 456, 366, 4675, 28885, 439, 613, 721, 321, 7152, 727, 312, 1352, 807, 257, 2290, 411, 257, 51408], "temperature": 0.0, "avg_logprob": -0.18430314412931117, "compression_ratio": 1.599078341013825, "no_speech_prob": 0.0466906763613224}, {"id": 624, "seek": 285564, "start": 2877.7999999999997, "end": 2879.7999999999997, "text": " Java profiler or heat profiler", "tokens": [51472, 10745, 1740, 5441, 420, 3738, 1740, 5441, 51572], "temperature": 0.0, "avg_logprob": -0.18430314412931117, "compression_ratio": 1.599078341013825, "no_speech_prob": 0.0466906763613224}, {"id": 625, "seek": 287980, "start": 2880.44, "end": 2888.6000000000004, "text": " And again all done is definition here these these code constructs and opera operations include object creation iterative executions", "tokens": [50396, 400, 797, 439, 1096, 307, 7123, 510, 613, 613, 3089, 7690, 82, 293, 22202, 7705, 4090, 2657, 8016, 17138, 1166, 4454, 3666, 50804], "temperature": 0.0, "avg_logprob": -0.19052021176207298, "compression_ratio": 1.7434944237918215, "no_speech_prob": 0.010011355392634869}, {"id": 626, "seek": 287980, "start": 2889.1600000000003, "end": 2894.92, "text": " Including recursive calls method executions threat executions and garbage collections", "tokens": [50832, 27137, 20560, 488, 5498, 3170, 4454, 3666, 4734, 4454, 3666, 293, 14150, 16641, 51120], "temperature": 0.0, "avg_logprob": -0.19052021176207298, "compression_ratio": 1.7434944237918215, "no_speech_prob": 0.010011355392634869}, {"id": 627, "seek": 287980, "start": 2895.1600000000003, "end": 2899.5600000000004, "text": " So it's kind of like a way of instrumenting your application and instrumenting your code. Let's say and really", "tokens": [51132, 407, 309, 311, 733, 295, 411, 257, 636, 295, 7198, 278, 428, 3861, 293, 7198, 278, 428, 3089, 13, 961, 311, 584, 293, 534, 51352], "temperature": 0.0, "avg_logprob": -0.19052021176207298, "compression_ratio": 1.7434944237918215, "no_speech_prob": 0.010011355392634869}, {"id": 628, "seek": 287980, "start": 2900.52, "end": 2903.7200000000003, "text": " Digging deep into it and examining it at a bytecode level", "tokens": [51400, 10976, 3249, 2452, 666, 309, 293, 34662, 309, 412, 257, 40846, 22332, 1496, 51560], "temperature": 0.0, "avg_logprob": -0.19052021176207298, "compression_ratio": 1.7434944237918215, "no_speech_prob": 0.010011355392634869}, {"id": 629, "seek": 287980, "start": 2904.1200000000003, "end": 2907.4, "text": " And that's obviously something that you know, I've never done it before in my life", "tokens": [51580, 400, 300, 311, 2745, 746, 300, 291, 458, 11, 286, 600, 1128, 1096, 309, 949, 294, 452, 993, 51744], "temperature": 0.0, "avg_logprob": -0.19052021176207298, "compression_ratio": 1.7434944237918215, "no_speech_prob": 0.010011355392634869}, {"id": 630, "seek": 290740, "start": 2907.7200000000003, "end": 2911.1600000000003, "text": " Just on your id you can't do that. You need a specific tool for that", "tokens": [50380, 1449, 322, 428, 4496, 291, 393, 380, 360, 300, 13, 509, 643, 257, 2685, 2290, 337, 300, 50552], "temperature": 0.0, "avg_logprob": -0.16430255488345497, "compression_ratio": 1.6349206349206349, "no_speech_prob": 0.01000986248254776}, {"id": 631, "seek": 290740, "start": 2912.92, "end": 2920.12, "text": " Therefore to end it he states it is very desirable to learn to anticipate problems like this before", "tokens": [50640, 7504, 281, 917, 309, 415, 4368, 309, 307, 588, 30533, 281, 1466, 281, 21685, 2740, 411, 341, 949, 51000], "temperature": 0.0, "avg_logprob": -0.16430255488345497, "compression_ratio": 1.6349206349206349, "no_speech_prob": 0.01000986248254776}, {"id": 632, "seek": 290740, "start": 2920.44, "end": 2924.36, "text": " They occur and prevent them from happening. So that's why this point is great because", "tokens": [51016, 814, 5160, 293, 4871, 552, 490, 2737, 13, 407, 300, 311, 983, 341, 935, 307, 869, 570, 51212], "temperature": 0.0, "avg_logprob": -0.16430255488345497, "compression_ratio": 1.6349206349206349, "no_speech_prob": 0.01000986248254776}, {"id": 633, "seek": 290740, "start": 2925.4, "end": 2929.1600000000003, "text": " Initially just your block points out what the issue is he he kind of", "tokens": [51264, 29446, 445, 428, 3461, 2793, 484, 437, 264, 2734, 307, 415, 415, 733, 295, 51452], "temperature": 0.0, "avg_logprob": -0.16430255488345497, "compression_ratio": 1.6349206349206349, "no_speech_prob": 0.01000986248254776}, {"id": 634, "seek": 290740, "start": 2930.28, "end": 2935.7200000000003, "text": " Illustrates it, but then he also gives us three areas where this could potentially occur", "tokens": [51508, 37788, 12507, 309, 11, 457, 550, 415, 611, 2709, 505, 1045, 3179, 689, 341, 727, 7263, 5160, 51780], "temperature": 0.0, "avg_logprob": -0.16430255488345497, "compression_ratio": 1.6349206349206349, "no_speech_prob": 0.01000986248254776}, {"id": 635, "seek": 293572, "start": 2935.72, "end": 2943.56, "text": " We could kind of anticipate where memory leaks could occur when writing code and the three places it could occur", "tokens": [50364, 492, 727, 733, 295, 21685, 689, 4675, 28885, 727, 5160, 562, 3579, 3089, 293, 264, 1045, 3190, 309, 727, 5160, 50756], "temperature": 0.0, "avg_logprob": -0.14473198555611275, "compression_ratio": 1.7540106951871657, "no_speech_prob": 0.001115879393182695}, {"id": 636, "seek": 293572, "start": 2945.0, "end": 2947.0, "text": " When it comes to having", "tokens": [50828, 1133, 309, 1487, 281, 1419, 50928], "temperature": 0.0, "avg_logprob": -0.14473198555611275, "compression_ratio": 1.7540106951871657, "no_speech_prob": 0.001115879393182695}, {"id": 637, "seek": 293572, "start": 2948.2799999999997, "end": 2950.7599999999998, "text": " obsolete object references that we should eliminate", "tokens": [50992, 46333, 2657, 15400, 300, 321, 820, 13819, 51116], "temperature": 0.0, "avg_logprob": -0.14473198555611275, "compression_ratio": 1.7540106951871657, "no_speech_prob": 0.001115879393182695}, {"id": 638, "seek": 293572, "start": 2951.56, "end": 2953.3199999999997, "text": " is in", "tokens": [51156, 307, 294, 51244], "temperature": 0.0, "avg_logprob": -0.14473198555611275, "compression_ratio": 1.7540106951871657, "no_speech_prob": 0.001115879393182695}, {"id": 639, "seek": 293572, "start": 2953.3199999999997, "end": 2958.12, "text": " classes that just to reiterate the point in classes that manage its own memory", "tokens": [51244, 5359, 300, 445, 281, 33528, 264, 935, 294, 5359, 300, 3067, 1080, 1065, 4675, 51484], "temperature": 0.0, "avg_logprob": -0.14473198555611275, "compression_ratio": 1.7540106951871657, "no_speech_prob": 0.001115879393182695}, {"id": 640, "seek": 293572, "start": 2959.08, "end": 2963.0, "text": " In caches and when it comes to callbacks and listeners", "tokens": [51532, 682, 269, 13272, 293, 562, 309, 1487, 281, 818, 17758, 293, 23274, 51728], "temperature": 0.0, "avg_logprob": -0.14473198555611275, "compression_ratio": 1.7540106951871657, "no_speech_prob": 0.001115879393182695}, {"id": 641, "seek": 296300, "start": 2963.72, "end": 2965.72, "text": " When you implement that in your api", "tokens": [50400, 1133, 291, 4445, 300, 294, 428, 1882, 72, 50500], "temperature": 0.0, "avg_logprob": -0.19848439693450928, "compression_ratio": 1.64, "no_speech_prob": 0.006287018768489361}, {"id": 642, "seek": 296300, "start": 2965.88, "end": 2967.88, "text": " That's it. That is", "tokens": [50508, 663, 311, 309, 13, 663, 307, 50608], "temperature": 0.0, "avg_logprob": -0.19848439693450928, "compression_ratio": 1.64, "no_speech_prob": 0.006287018768489361}, {"id": 643, "seek": 296300, "start": 2967.96, "end": 2972.28, "text": " The item number seven element obsolete object references", "tokens": [50612, 440, 3174, 1230, 3407, 4478, 46333, 2657, 15400, 50828], "temperature": 0.0, "avg_logprob": -0.19848439693450928, "compression_ratio": 1.64, "no_speech_prob": 0.006287018768489361}, {"id": 644, "seek": 296300, "start": 2973.4, "end": 2980.52, "text": " As I did anticipate it did go for over an hour because I did feel even though the item isn't all that long or all that complicated", "tokens": [50884, 1018, 286, 630, 21685, 309, 630, 352, 337, 670, 364, 1773, 570, 286, 630, 841, 754, 1673, 264, 3174, 1943, 380, 439, 300, 938, 420, 439, 300, 6179, 51240], "temperature": 0.0, "avg_logprob": -0.19848439693450928, "compression_ratio": 1.64, "no_speech_prob": 0.006287018768489361}, {"id": 645, "seek": 296300, "start": 2980.84, "end": 2982.84, "text": " have a few points like", "tokens": [51256, 362, 257, 1326, 2793, 411, 51356], "temperature": 0.0, "avg_logprob": -0.19848439693450928, "compression_ratio": 1.64, "no_speech_prob": 0.006287018768489361}, {"id": 646, "seek": 296300, "start": 2983.56, "end": 2985.72, "text": " implementation of the listeners and the callbacks and then the", "tokens": [51392, 11420, 295, 264, 23274, 293, 264, 818, 17758, 293, 550, 264, 51500], "temperature": 0.0, "avg_logprob": -0.19848439693450928, "compression_ratio": 1.64, "no_speech_prob": 0.006287018768489361}, {"id": 647, "seek": 298572, "start": 2986.3599999999997, "end": 2991.8799999999997, "text": " Weak references that I felt like we need to dive in a bit more and understand at least I needed to to make sense of it", "tokens": [50396, 492, 514, 15400, 300, 286, 2762, 411, 321, 643, 281, 9192, 294, 257, 857, 544, 293, 1223, 412, 1935, 286, 2978, 281, 281, 652, 2020, 295, 309, 50672], "temperature": 0.0, "avg_logprob": -0.19163469046600595, "compression_ratio": 1.6911764705882353, "no_speech_prob": 0.15807972848415375}, {"id": 648, "seek": 298572, "start": 2992.3599999999997, "end": 2995.0, "text": " As I said all the code that I used are in", "tokens": [50696, 1018, 286, 848, 439, 264, 3089, 300, 286, 1143, 366, 294, 50828], "temperature": 0.0, "avg_logprob": -0.19163469046600595, "compression_ratio": 1.6911764705882353, "no_speech_prob": 0.15807972848415375}, {"id": 649, "seek": 298572, "start": 2995.56, "end": 2998.8399999999997, "text": " On the github repository and the link to that is in the description down below", "tokens": [50856, 1282, 264, 290, 355, 836, 25841, 293, 264, 2113, 281, 300, 307, 294, 264, 3855, 760, 2507, 51020], "temperature": 0.0, "avg_logprob": -0.19163469046600595, "compression_ratio": 1.6911764705882353, "no_speech_prob": 0.15807972848415375}, {"id": 650, "seek": 298572, "start": 2999.3999999999996, "end": 3002.52, "text": " Please go to click at the code. It'll make a lot more sense if you study the code", "tokens": [51048, 2555, 352, 281, 2052, 412, 264, 3089, 13, 467, 603, 652, 257, 688, 544, 2020, 498, 291, 2979, 264, 3089, 51204], "temperature": 0.0, "avg_logprob": -0.19163469046600595, "compression_ratio": 1.6911764705882353, "no_speech_prob": 0.15807972848415375}, {"id": 651, "seek": 298572, "start": 3003.24, "end": 3005.9599999999996, "text": " assiduously instead of me kind of explaining it", "tokens": [51240, 1256, 327, 84, 5098, 2602, 295, 385, 733, 295, 13468, 309, 51376], "temperature": 0.0, "avg_logprob": -0.19163469046600595, "compression_ratio": 1.6911764705882353, "no_speech_prob": 0.15807972848415375}, {"id": 652, "seek": 298572, "start": 3006.8399999999997, "end": 3013.0, "text": " Again, I'm trying my best to to you know articulate myself while I'm also learning as I go", "tokens": [51420, 3764, 11, 286, 478, 1382, 452, 1151, 281, 281, 291, 458, 30305, 2059, 1339, 286, 478, 611, 2539, 382, 286, 352, 51728], "temperature": 0.0, "avg_logprob": -0.19163469046600595, "compression_ratio": 1.6911764705882353, "no_speech_prob": 0.15807972848415375}, {"id": 653, "seek": 301300, "start": 3013.16, "end": 3017.72, "text": " It's kind of how it works. You probably can see I'm struggling a lot with some of these concepts", "tokens": [50372, 467, 311, 733, 295, 577, 309, 1985, 13, 509, 1391, 393, 536, 286, 478, 9314, 257, 688, 365, 512, 295, 613, 10392, 50600], "temperature": 0.0, "avg_logprob": -0.11724524938759684, "compression_ratio": 1.6560283687943262, "no_speech_prob": 0.019713738933205605}, {"id": 654, "seek": 301300, "start": 3018.52, "end": 3024.52, "text": " But in any case, I sincerely do hope this video brought some value. You learn something from it", "tokens": [50640, 583, 294, 604, 1389, 11, 286, 30694, 360, 1454, 341, 960, 3038, 512, 2158, 13, 509, 1466, 746, 490, 309, 50940], "temperature": 0.0, "avg_logprob": -0.11724524938759684, "compression_ratio": 1.6560283687943262, "no_speech_prob": 0.019713738933205605}, {"id": 655, "seek": 301300, "start": 3024.92, "end": 3029.96, "text": " I shall see you in the next item. It is item number eight. We're still in chapter two", "tokens": [50960, 286, 4393, 536, 291, 294, 264, 958, 3174, 13, 467, 307, 3174, 1230, 3180, 13, 492, 434, 920, 294, 7187, 732, 51212], "temperature": 0.0, "avg_logprob": -0.11724524938759684, "compression_ratio": 1.6560283687943262, "no_speech_prob": 0.019713738933205605}, {"id": 656, "seek": 301300, "start": 3030.84, "end": 3034.92, "text": " And item number eight is avoid finalizers and cleaners", "tokens": [51256, 400, 3174, 1230, 3180, 307, 5042, 2572, 22525, 293, 2541, 433, 51460], "temperature": 0.0, "avg_logprob": -0.11724524938759684, "compression_ratio": 1.6560283687943262, "no_speech_prob": 0.019713738933205605}, {"id": 657, "seek": 301300, "start": 3035.8, "end": 3041.48, "text": " And I'll get to that as soon as possible. In fact, I've already started writing the code for it. I'll see you in the next one. Cheers", "tokens": [51504, 400, 286, 603, 483, 281, 300, 382, 2321, 382, 1944, 13, 682, 1186, 11, 286, 600, 1217, 1409, 3579, 264, 3089, 337, 309, 13, 286, 603, 536, 291, 294, 264, 958, 472, 13, 13006, 51788], "temperature": 0.0, "avg_logprob": -0.11724524938759684, "compression_ratio": 1.6560283687943262, "no_speech_prob": 0.019713738933205605}, {"id": 658, "seek": 304300, "start": 3043.0, "end": 3045.96, "text": " You", "tokens": [50412, 509, 50512], "temperature": 0.0, "avg_logprob": -0.6650323867797852, "compression_ratio": 0.2727272727272727, "no_speech_prob": 0.6988736391067505}], "language": "en"}