WEBVTT

00:00.000 --> 00:05.960
Hey everyone, welcome to yet another episode of my video series on Joshua Bloch's Effective

00:05.960 --> 00:12.200
Java where I take the items enumerated in this book and expand on them and try and make

00:12.200 --> 00:18.160
sense of them and hopefully as I do that you learn something and gain some value from

00:18.160 --> 00:19.160
it too.

00:19.160 --> 00:26.040
Today I gotta say we're in item 9 as the title suggests but I gotta kind of, I'm sorry to

00:26.040 --> 00:31.320
be a bit self-aggrandizing and self-indulgent here, I gotta give myself a pat on the back

00:31.320 --> 00:34.480
because I'm actually quite proud of myself that I got through the first chapter because

00:34.480 --> 00:39.360
the first chapter which was, wait, what was the first chapter?

00:39.360 --> 00:43.480
Yeah, sorry, well chapter 2, the first chapter was introduction, I really skipped that bit

00:43.480 --> 00:49.080
but creating and destroying objects, got through the first chapter, this is the final item

00:49.080 --> 00:55.560
and then we move on to chapter number 3, methods common to all objects and I feel good.

00:55.560 --> 00:59.320
I'm learning so much and really enjoying this, a lot more than I thought that it's

00:59.320 --> 01:05.480
way way better than just reading the book, trying to explain it and expound on what's

01:05.480 --> 01:11.840
highlighted in the book, it's really beneficial and it's great, I'm really happy about this.

01:11.840 --> 01:16.640
Anyway, enough of that, without further ado let's get to the introduction, as usual if

01:16.640 --> 01:21.280
you have been following along in these episodes please do skip this bit, I wanna save your

01:21.280 --> 01:25.600
time because I'm just gonna repeat, whatever I've been saying in all the other videos

01:25.600 --> 01:32.720
and the first point in this proviso slash introduction is that this is not a tutorial,

01:32.720 --> 01:37.320
I'm not a teacher or an expert, so if you're new here, if this is the first video you're

01:37.320 --> 01:42.280
watching please do keep that in mind, if you've been following along you probably can already

01:42.280 --> 01:47.160
tell that I'm not an expert because you can see me making mistakes live and trying to make

01:47.200 --> 01:51.880
sense of things, therefore this is not a typical tutorial where you should just take whatever

01:51.880 --> 01:58.720
I say as gospel truth despite me following this book, it's still, I could make mistakes

01:58.720 --> 02:05.840
in interpreting what Joshua Blok has stated here, I like to think of this as a expensory

02:05.840 --> 02:13.200
disquisition or the blind, living the blind as I say it, I'm trying to make sense of a

02:13.240 --> 02:20.240
topic, of a concept, sometimes pertaining to Java but sometimes pertaining to programming

02:20.240 --> 02:27.800
in general and I am as blind or perhaps even more blind but the point is I'm as blind as

02:27.800 --> 02:33.960
you are or perhaps even more, therefore I will inevitably make mistakes so please point

02:33.960 --> 02:39.720
them out as some people have in the previous videos, I'll try my best to use forums as

02:39.720 --> 02:44.920
if you've been following along things like Stack Overflow or Reddit to ask questions

02:44.920 --> 02:49.880
and then not to make the mistake in the video itself and rather make the mistake when I'm

02:49.880 --> 02:56.760
preparing for the video and then rectify those mistakes but I'm sure I'll make them in the

02:56.760 --> 03:01.640
videos too so please do point them out and of course since this is a programming video series

03:01.640 --> 03:06.960
it only makes sense to have all the code used up on GitHub so I'll leave the links down below

03:07.680 --> 03:14.240
to my GitHub repository but not only that, even Joshua Bloch's public official repository for

03:14.240 --> 03:20.400
this book and definitely a lot of the stuff in my repository, I've taken this code and repurposed

03:20.400 --> 03:27.600
them to make them a bit more demonstrable let's say, like that let's get to item number nine,

03:27.600 --> 03:36.400
the last item in this chapter and that is prefer try with resources to try finally and this is

03:36.960 --> 03:42.480
since Java 7 I believe the try finally was introduced and now the proviso on this item

03:43.200 --> 03:50.800
specifically it's in fact better to go through item 8 before going through item 9 so if this is

03:50.800 --> 03:56.720
the first video you're coming across in this in this video series of this book or if you haven't

03:56.720 --> 04:03.360
read the book at all just you know kind of curious about it I would say you know specifically for

04:03.360 --> 04:11.520
this item it's better to better get an understanding of what he's talking about in item 8 saying that

04:11.520 --> 04:19.200
though before I get to kind of the the the crux of the matter let's let's just read I I'm going to

04:19.200 --> 04:28.000
read a bit from his introductory paragraph in this item, Joshua Bloch states the Java libraries

04:28.000 --> 04:34.000
include many resources that must be closed manually by invoking a closed method and that that exact

04:34.000 --> 04:39.680
sentence the first sentence of this item is exactly why I said it's probably a good idea to go through

04:39.680 --> 04:45.600
item 8 so do watch that video before watching this if you haven't watched it already or if you don't

04:45.600 --> 04:53.600
know the idea of closing resources in Java I continue closing resources is often overlooked by

04:53.600 --> 05:00.320
clients with predictably dire performance consequences while many of these resources use

05:00.320 --> 05:06.560
finalizes as a safety net finalizes sorry I read that too fast I'll read that again while many of

05:06.560 --> 05:14.560
these resources use finalizes as a safety net finalizes don't work very well as he highlights

05:14.560 --> 05:19.520
an item 8 sorry to keep beating on a dead horse here but I really want to make that point clear

05:19.920 --> 05:28.240
so it's quite straightforward we have here on line number 14 right here is simply a

05:28.240 --> 05:35.600
buffered read instance being created and that object being stored in this br variable and then

05:35.600 --> 05:42.880
we're trying to read off that object using the read line method that's in buffered reader and then

05:42.880 --> 05:52.800
if it fails what happens is simply the finally block would just take care of their cast error

05:52.800 --> 05:59.280
and then close that resource because we don't want to leave that resource without being closed

06:00.000 --> 06:04.640
by any chance and exception is thrown we want to reclaim that memory so yeah there's really

06:04.640 --> 06:09.840
nothing much to talk about this code if I do run that you'll see it's reading from this nature text

06:09.840 --> 06:15.920
I've got and it quotes without life sorry without music life would be a mistake that's the first

06:15.920 --> 06:24.400
line in this text file and it's right nature is right without life indeed sorry without music

06:24.400 --> 06:31.200
indeed life would be a mistake but that's the try finally block that would typically be used before

06:32.480 --> 06:37.440
the try with resources block was introduced so I was thinking about this a bit and I think I miss

06:37.520 --> 06:44.320
poke by using the word catch in fact there is no catch that's the problem in this try finally block

06:44.320 --> 06:50.240
in this part of the block in for instance where you're reading off the buffered reader if an

06:50.240 --> 06:56.960
exception is thrown we want the client of this API to know that an exception is thrown however

06:57.680 --> 07:04.880
what happens is because in the finally block it just simply closes the resource we we don't have

07:04.880 --> 07:12.000
a stack trace there's no record that there was an exception thrown when trying to read the line

07:12.560 --> 07:20.080
of these of this buffered reader instance it'll just close the object and that's it so it leaves no

07:20.080 --> 07:26.400
record that something went wrong and that generally is bad practice in programming and to make matters

07:26.400 --> 07:35.440
worse if we take a look at the other example torture block has given it's using two try blocks

07:35.440 --> 07:40.560
it's it's a first of all it's a very verbose code and it's really confusing to read but essentially

07:40.560 --> 07:46.720
what he's trying to do here is read off a input stream and then write to another file via an output

07:46.720 --> 07:53.600
stream and you can see there's a nested try statement inside it and what happens here is

07:54.560 --> 08:00.080
again as I said apart from the code being a bit let's say not very aesthetic in a case like this

08:00.080 --> 08:10.160
where there are nested try blocks let's assume in this section here line number 18 to 22 in the

08:10.160 --> 08:18.560
writing an error is thrown and that's an after so the writing is done in this out object that was

08:18.560 --> 08:26.160
created via the output stream and then that resource is closed fine but an error is thrown

08:26.160 --> 08:32.800
something goes wrong and the resource is closed and then this resource is closed too what happens

08:32.800 --> 08:39.360
is this block will suppress the stack trace of this block we will have no record that something

08:39.360 --> 08:44.400
went wrong here and that will make debugging a nightmare we all know infamously that most time

08:44.400 --> 08:49.920
is spent by programmers debugging code on runtime generally and if we don't have a proper stack

08:49.920 --> 08:55.520
trace we don't have proper information where something fails or an exception is thrown

08:56.240 --> 09:00.640
that can make things very complicated and that's the one of the other problems apart from it being

09:00.640 --> 09:07.200
verbose and ugly that we shouldn't use this kind of nested try finally statement which is why just

09:07.200 --> 09:13.840
to I guess pretty more formally in a bit more eloquent way Joshua block states and he makes

09:13.840 --> 09:21.680
the statement pertaining to this line this code here but also I propose the previous top line

09:21.680 --> 09:28.960
code that I showed he states it may be hard to believe but even good programmers got this wrong

09:28.960 --> 09:33.520
most of the time and then he goes on how he made the same mistake in a book he wrote called java

09:33.520 --> 09:42.400
puzzlers then he states the code in both the try block try block and the finally block is capable

09:42.400 --> 09:49.280
of throwing exceptions for example in the first line of file method so that would be the method here

09:52.800 --> 09:59.600
the call to read line could throw an exception due to a failure in the underlying physical device

09:59.600 --> 10:02.960
and the call to close could then fail for the same reason so

10:05.280 --> 10:09.440
it could there could be an error here sorry apologies there could be an error here in the

10:09.440 --> 10:15.120
read line in line number 16 and then even the closing would also cause another exception

10:15.120 --> 10:21.440
because errors can be thrown in try blocks and finally blocks both as I read before and the

10:21.440 --> 10:27.760
call to close could then fail for the same reason under these circumstances the second exception

10:27.760 --> 10:34.160
completely obliterates the first one there's no record of the first exception in the exception

10:34.160 --> 10:42.880
stack trace which can greatly complicate debugging in real systems usually it's the first exception

10:42.880 --> 10:49.520
that you want to see in order to diagnose the problem while it is possible to write code to

10:49.520 --> 10:56.320
suppress the second exception in favor of the first virtually no one did because it's just

10:56.320 --> 11:02.400
too verbose hmm I may have said something that was completely wrong before as I reread that

11:02.400 --> 11:09.360
paragraph I I was looking at the previous on a code and I said that an exception thrown

11:10.800 --> 11:14.960
here could be suppressed by these exceptions

11:17.200 --> 11:20.800
I don't know I think I think that's inaccurate the the point still stands

11:20.800 --> 11:29.200
because exceptions can be thrown in the finally blocks too whatever that's thrown here will be

11:29.200 --> 11:35.760
obliterated by these other exceptions thrown in these finally blocks too in this case when

11:35.760 --> 11:40.080
closing these objects so the point still stands point the point still stands I wasn't

11:40.960 --> 11:46.320
missing any money if I was pleased to point it out um I really hope I didn't push it there

11:47.520 --> 11:53.760
and due to these inherent problems with try finally java 7 introduced try with resources

11:53.760 --> 11:59.280
however before we get to that before we discuss what try with resources are I realized

12:00.640 --> 12:05.680
I didn't discuss a bit of theory I got lost in the code got a bit excited by the code as per

12:05.680 --> 12:12.880
usual I am a program after all I think it's worth discussing what closing resources resource is

12:13.440 --> 12:19.520
sorry that was like a bit of a tongue twister it's worth discussing what is closing a resource

12:19.600 --> 12:25.840
before we get to the try with resources part because they're quite tightly related

12:26.880 --> 12:33.280
so what is closing a resource it's pretty simple when we create a new object when we have the new

12:33.280 --> 12:40.800
keyword and we create a new object that object takes up memory and either when an application

12:41.600 --> 12:47.040
no longer requires that object again this is why I said to refer to item number eight because we

12:47.040 --> 12:52.080
go a bit deeply into item in fact item seven and eight both we discussed this idea so there's a

12:52.080 --> 12:57.520
bit of flow to the items in the book even though just your blog stating in the introduction that all

12:57.520 --> 13:02.880
these items can be understood distinctly and individually of course they're interrelated

13:02.880 --> 13:10.480
because after all we are talking about a broader programming language and a programming paradigm

13:11.440 --> 13:18.720
so getting back to the point I keep going off on tangents when an object is created that object

13:18.720 --> 13:25.920
takes up memory that's simply taking up resources and either when that object is no longer required

13:25.920 --> 13:31.840
by application or when an exception is thrown by that object like for example when reading a line

13:31.840 --> 13:38.080
that could be an exception that resource must be closed and that memory must be released to be

13:38.080 --> 13:47.520
used for the things by jvm and it's simply cleaning up after you're done it's just good etiquette good

13:47.520 --> 13:52.480
hygiene even in real life and that's simply what it is and of course a lot of this can be done with

13:52.480 --> 13:59.120
the garbage collection in with the jvm but of course at times it has to be done explicitly and

13:59.120 --> 14:04.480
manually by a programmer so I ended up asking of course I've been doing this like every other person

14:04.480 --> 14:13.680
these days I've been asking ask chat gpd what is closing the resource in java and here's what my

14:13.680 --> 14:22.880
programming buddy told me what this is sorry I was kind of having a moment I was like this is

14:22.880 --> 14:28.640
amazing where I've really been using chat gpd quite a lot at work and just asking questions and

14:28.640 --> 14:33.520
getting help with code it's it's like an advanced evolved version of stack overflow

14:35.360 --> 14:41.520
so according to chat gpd in java closing a resource means that you are releasing any

14:41.520 --> 14:48.560
resource that the object was using I agree mr chat gpd mr I shouldn't generate whatever man

14:48.560 --> 14:56.960
woman I want to be uh uh inclusive here this is typically done by calling the close method on the

14:56.960 --> 15:02.320
object that represents the resource for example if you have an input stream like we do in that method

15:02.320 --> 15:09.280
object that is used to read data from a file you would call the close method on that object to

15:09.280 --> 15:15.200
close the file and free up any resources that were being used by the industry and then a bit

15:15.200 --> 15:22.240
more formal definition on closing resources by the oracle docs this is a pretty old article it's

15:22.240 --> 15:28.400
in fact called better resource management with java seven and that was released a while back

15:29.920 --> 15:35.600
julian ponch states um the typical java application manipulates several types of

15:35.600 --> 15:43.920
resources such as files stream sockets and database connections such resources must be handled

15:43.920 --> 15:50.080
with great care because they acquire system resources for their operations thus you need

15:50.080 --> 15:55.840
to ensure that they get freed even in case of errors indeed incorrect resource management

15:55.840 --> 16:02.000
is a common source of failure is common source of failures in production applications with the

16:02.000 --> 16:09.040
usual pitfalls being database connections and file descriptors remaining open after an exception

16:09.040 --> 16:14.560
has occurred somewhere else in the code so similar similar to the example that you were looking at you

16:14.560 --> 16:21.440
know reading reading off a file this leads to application servers being frequently restarted

16:21.440 --> 16:28.160
when resource exhaustion occurs because operating systems and server applications generally have

16:28.160 --> 16:32.880
an upper bound limit for resources of course because at the end of the day the software still

16:32.880 --> 16:40.720
runs on hardware and it's still a limited domain or we have limited resources as to how the what

16:40.720 --> 16:45.280
we can do with the software even though perhaps that's changing now with cloud computing and all

16:45.280 --> 16:52.320
that uh anyway another tangent man i can't help myself my mind goes everywhere um so and as i

16:52.320 --> 16:57.920
say that historically resources were closed with the tri finally and then java seven introduced

16:57.920 --> 17:03.360
tri with resources i should have read this bit a bit uh somewhat earlier in this item on in the

17:03.360 --> 17:10.000
video but it's okay we got across a point so this is where this is a solution so this is

17:10.000 --> 17:15.760
tri with resources is the solution to the pitfalls of tri finally and again another formal definition

17:17.680 --> 17:25.120
by yorka docs the tri with resources statement is a statement that declares one or more resources

17:25.840 --> 17:30.800
a resource is an object that must be closed after the program is finalized with it i feel like

17:30.880 --> 17:37.120
we've we're repeating that point a lot now i apologize for being just repetitive but that

17:37.120 --> 17:44.160
really helps for that idea to get settled in your your mind let's say if that's how cognition works

17:45.040 --> 17:50.480
the tri with resources statement ensures that each resources each resource is closed at the

17:50.480 --> 17:56.000
end of the statement yes we shall see in code the example let's just get the theory out of the way

17:56.000 --> 18:02.480
any object that implements java lang autoclosable again this bit was covered in item eight

18:03.600 --> 18:09.760
so please do watch the previous previous video which includes all objects which implement java

18:09.760 --> 18:16.560
ioclosable can be used as a resource so similarly also in the book joshua book states to be usable

18:16.560 --> 18:20.720
with this construct what he means by this construct is using tri with resources

18:21.680 --> 18:28.000
a resource must implement autoclo the autoclosable interface which consists of a single void

18:28.000 --> 18:36.000
returning close method so here are the examples the first one is not the top line that was a

18:36.000 --> 18:43.360
mistake uh first one i'm using tri with resources i believe is this one here

18:43.680 --> 18:52.400
yeah that's it uh for now just ignore this catch bit we'll get to that a bit later but

18:52.400 --> 18:59.440
essentially as you can see in the resource in the tri statement itself these objects are being

18:59.440 --> 19:04.400
correct is that the correct one yeah that's the correct one in the tri statement itself uh the

19:04.400 --> 19:10.480
reason i'm looking at the book is because i took this code off the book and repurposed it um yeah

19:10.480 --> 19:17.680
so in the tri statement itself the object is being created uh and then within it we we run the

19:17.680 --> 19:26.400
read line method and if there's an exception it can be it can be suppressed and in this case you

19:26.400 --> 19:30.960
can probably see two objects are being created that was a mistake i just probably move it here so

19:30.960 --> 19:36.480
that it's easy to see but we're creating two objects the file reader and the buffered reader

19:36.560 --> 19:41.440
and the point just should look states and i shall read it out a bit later is that if

19:41.440 --> 19:47.920
an exception is thrown over here in the new buffered reader and then another one is thrown

19:47.920 --> 19:56.640
over here this won't obliterate the stack of the error or the in the stack trace the what

19:56.640 --> 20:02.160
indicates that an exception was thrown this won't obliterate that we could suppress the exceptions

20:02.160 --> 20:11.520
and in the stack traces it even states that an exception was thrown uh before above the tree i'm

20:11.520 --> 20:16.400
in front of think of the word here but an exception was thrown before the stack trace will indicate

20:16.400 --> 20:25.520
that um and then there's another example where he's using the try with resources or he's using

20:25.520 --> 20:31.040
multiple resources you know these examples are a bit confusing i wish he put a bit more comments

20:31.040 --> 20:36.480
in them um so this is the other example he hopes sorry that's a wrong one

20:39.840 --> 20:43.840
this is the other example where we're creating multiple objects so similar to the previous

20:43.840 --> 20:49.200
example we saw we're creating uh two objects here we're having the n object and the outer

20:49.200 --> 20:55.920
object one is an input stream the other is an output stream and here's what he states firstly

20:56.480 --> 21:03.920
uh again this point relates to the two examples i showed you not only are the try with resources

21:03.920 --> 21:10.800
versions shorter and more readable than the originals but they provide far better diagnostics

21:10.800 --> 21:16.000
and this is the point i was trying to make and i made quite badly in fact here's what he said so

21:16.000 --> 21:23.280
hopefully this will make a bit more sense consider the first line of five that would be this let's

21:23.280 --> 21:36.000
consider that method the first line of five method if exceptions are thrown by both the

21:36.000 --> 21:42.640
read line call which is oh it's going to be invisible in this case uh sorry uh the read

21:42.640 --> 21:47.760
line call is here but there's also a closing of resource that takes place oh so that's really

21:47.760 --> 21:53.360
important right so i'll read the sentence and then then try and explain what what he's he means here

21:54.000 --> 22:01.040
if exceptions are thrown by both the read line call so the read line here and the invisible close

22:01.680 --> 22:11.200
the latter exception is suppressed in favor of the former so in the try with resources uh block

22:12.000 --> 22:16.560
an automatic closing of the object does take place we don't have to do it explicitly

22:17.520 --> 22:22.000
so we don't see the close happening but these objects that were created are in fact closed

22:25.360 --> 22:30.560
and then he goes in fact multiple exceptions may be suppressed in order to preserve the

22:30.560 --> 22:36.880
exception that you actually want to see these suppressed exceptions are not merely discarded

22:37.520 --> 22:42.880
they are printed in the stack trace with the notation saying that they were suppressed so

22:42.880 --> 22:49.360
that's important um this is what i meant by the fact that depending on where the exception is

22:49.360 --> 22:56.880
thrown in the tree uh you you can decide which one you want to see and in fact i asked chat gpt

22:56.880 --> 23:05.760
again how do we do this and here is what chat gpt said uh apropos try with resources to print

23:05.760 --> 23:11.040
the suppressed exceptions on the stack trace you can call the print stack trace method and that

23:11.040 --> 23:16.640
does work i looked up a few examples i'll leave links down below on the first exception that was

23:16.640 --> 23:22.320
thrown and passed through as the argument this will print the stack trace of the first exception

23:22.320 --> 23:27.600
along with the stack traces of any suppressed exceptions so we don't want our logs being too

23:27.600 --> 23:36.000
verbose and to pollute it we can have it suppressed but if you want some extra diagnostics or

23:36.080 --> 23:40.960
additional information we can use the print stack trace method pass through to it and get

23:40.960 --> 23:45.200
that information that's the point and then he says of course we could have a catch statement here

23:45.200 --> 23:50.160
where we could do whatever with this exception either throw it throw it and let the client know

23:50.160 --> 23:56.240
or return some kind of default value um i've even done that in the other example too

23:57.200 --> 24:02.400
wait no not that one i think the top line example so in this case see i'm printing the stack trace

24:02.400 --> 24:08.720
so here if i want all the suppressed exceptions all i gotta do is pass through

24:10.080 --> 24:19.680
and that's an error remove redundant argument interesting oh perhaps it probably is a case

24:19.680 --> 24:26.080
that this was pertaining to Java 7 you don't even have to pass through i guess oh perhaps chat gpt was

24:26.080 --> 24:30.640
wrong there i don't think so because i did see a few examples where you are people are passing

24:30.640 --> 24:36.240
through onto the print stack trace i'll i'll look into that and leave some links down below

24:37.120 --> 24:41.040
so this will print the whole stack trace and tell exactly where the exceptions were thrown

24:42.160 --> 24:46.320
and that's the great thing about using try with resources because you could you could catch the

24:46.320 --> 24:51.840
exception you could print the stack trace and as Joshua Block has shown in his example you could

24:51.840 --> 24:59.040
even once the exception is caught maybe return some kind of default value and not end up breaking

24:59.040 --> 25:05.920
the whole application and okay putting putting more formally he states you can put catch closes on

25:05.920 --> 25:13.040
try with resources statements just as you can on regular try finally statements oh i probably made

25:13.040 --> 25:16.960
a mistake and said that you can't do that in try finally of course you can because we can have try

25:16.960 --> 25:23.520
catch and then a finally uh this allows you to handle exceptions without selling your code with

25:23.520 --> 25:31.280
another layer of nesting and then to conclude he states the lesson is clear always use try with

25:31.280 --> 25:36.560
resources in preference to try finally when working with resources that must be closed

25:37.920 --> 25:43.680
the resulting code is shorter and clearer and the exceptions that it generates are more useful

25:44.320 --> 25:50.720
that's it that is the end of chapter one and the end of that item uh and then in the next chapter

25:50.720 --> 25:56.000
as i did state before we're going to move to chapter three with it which is methods common to all

25:56.000 --> 26:01.920
objects i apologize if i did a bit of a i'm not i always feel like i don't do a good job at explaining

26:01.920 --> 26:07.840
these concepts a lot of that is because i'm learning a lot too but this seemed like quite an easy item

26:07.840 --> 26:17.600
that i struggled quite pathetically to explain um hopefully the comments i've left in the code

26:18.080 --> 26:23.920
and even the resources i leave will help you supplement what i'm doing in this video in some

26:23.920 --> 26:31.200
way um and of course the best thing you can do is read the book but i don't know a lot of people

26:31.200 --> 26:36.560
prefer watching videos than reading so hopefully this video can be useful because of that in any

26:36.560 --> 26:43.840
case enough self-flagellation i hope you enjoy this video thank you for watching i shall see you in

26:43.840 --> 26:48.480
the next one cheers

