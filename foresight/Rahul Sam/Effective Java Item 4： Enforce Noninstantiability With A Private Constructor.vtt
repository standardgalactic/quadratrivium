WEBVTT

00:00.000 --> 00:06.000
Hey everyone, welcome to yet another episode of my video series on Joshua Bloch's effective Java

00:06.560 --> 00:12.080
where I take all the items that he has enumerated in this book and expand on them and try and make

00:12.080 --> 00:19.040
sense of them and hopefully as I make sense of it by sharing and making this video you do can

00:19.040 --> 00:24.560
follow along and try and understand what he's written in this fantastic superlative book.

00:25.200 --> 00:31.120
Today we're going to cover item four and of course like I've done in the previous items before

00:31.120 --> 00:38.080
I get to the item, the crux of the video, I need to go through the proviso and set a few

00:38.080 --> 00:43.440
caveats or read out a few caveats let's say not really reading out but just following along on

00:43.440 --> 00:48.720
some some bullet points that I'll list it down here. However if you've been following along you

00:48.720 --> 00:55.680
could just skip the introduction and move to the item itself but I need to every single video

00:55.680 --> 01:02.880
because maybe new viewers make this proviso or record this bit just feel like I have a ethical

01:02.880 --> 01:09.520
duty to do so. The first point is this is not a tutorial that is very very important I understand

01:09.520 --> 01:15.120
YouTube is just it is oh it's programming heaven it's tutorial heaven I mean you could learn anything

01:15.120 --> 01:22.560
virtually anything of YouTube and most programming based videos are sort of how-tos tutorials things

01:22.560 --> 01:28.400
that we miss out on let's say by not paying attention in a uni lecture but this is not a

01:28.400 --> 01:33.600
tutorial this is really really it's a selfish project in many ways I'm trying to make sense of

01:33.600 --> 01:39.520
this book and I find that it's easier to expound on the matter and sort of think out loud and that

01:39.520 --> 01:44.400
helps me understand and my hope is that it's a sort of a collective understanding and a collective

01:44.480 --> 01:51.680
learning in no way am I a teacher absolutely not and I have said this in the previous items the more

01:51.680 --> 01:58.320
I'm understanding Java and OOP programming in general I'm coming to the realization that I

01:58.320 --> 02:04.640
am far from being an expert so take whatever I say with the grain of salt and don't treat this

02:04.640 --> 02:10.160
video like a tutorial which means if I make mistakes please point them out in the comment section

02:10.160 --> 02:22.000
down below I like to think of this as more of a blind leading the blind project or video series

02:23.360 --> 02:30.240
where I'm blind too and it's a factor that I'm making the video I am sort of leading whoever

02:30.240 --> 02:36.400
that's watching this but I am as equally blind as you are that's not a pun because I'm wearing glasses

02:36.400 --> 02:44.240
it's just a metaphor think of it as a exploratory disquisition so the best analogy that I've been

02:44.240 --> 02:54.400
using in the previous items is what one would see in a typical university tutorial setting where

02:54.400 --> 02:59.520
we've got an assignment or some problem statement and all the students get together and try to solve

02:59.520 --> 03:07.760
it collectively that's really what I'm trying to do here and that means as I did pointed out before

03:07.760 --> 03:14.480
I will inevitably make mistakes and given that this is I forgot to zoom into the proviso apologies

03:14.480 --> 03:20.640
I hope you can read that and given that this is a programming video all the code that I've used

03:20.640 --> 03:26.480
some of it is repurposed code from Joshua Bloch's repository itself the stuff that he's published

03:26.480 --> 03:32.000
that's in fact based on the book all of that code and the stuff that I've written on my own

03:32.000 --> 03:39.840
available on github so link to that in the description below saying that let's get to item number four

03:39.840 --> 03:46.960
which is also from chapter two we're still in chapter two creating and destroying objects

03:47.920 --> 03:55.120
and item number four is enforce non-instantiability with a private constructor this is the shortest

03:55.120 --> 04:00.960
item in the book and it's very easy to understand and it's just a page so this video shouldn't be

04:00.960 --> 04:08.240
that uh complicating uh complicating it shouldn't be that complicated and it should probably be quite

04:08.240 --> 04:15.200
cook cook quite quick if I can stick to brevity which is quite difficult for me because I tend to

04:15.200 --> 04:20.880
be long-winded so the first two paragraphs really is sort of an introduction into utility classes

04:20.880 --> 04:28.640
classes that we see in the java library uh sorry in the java utils library and a good one that we

04:28.640 --> 04:36.160
all probably use is the collections utility class this right here which if you scroll through it

04:36.160 --> 04:43.360
of course it's got a private constructor but also it's got static member variables and static methods

04:43.360 --> 04:47.200
because really these are the stuff that we're going to use as clients in our code

04:47.200 --> 04:53.680
uh just a an ancillary point before I read uh paragraph from just your block it's quite

04:53.680 --> 05:01.200
important to understand this in fact using utility classes or putting all these utility methods in

05:01.200 --> 05:07.920
one single huge class uh putting static methods in one single huge class isn't a good idea if you

05:07.920 --> 05:13.120
do a bit of googling and do a bit of research into it just to block himself he says it's not always

05:13.120 --> 05:20.640
good idea to use utility classes but also I came across this really good blog blog post um

05:21.280 --> 05:24.880
why can't I talk today well I can't talk in each and every one of these videos there's

05:24.880 --> 05:30.480
something wrong with me but I came across this really good blog post by um okay I'm gonna butcher

05:30.480 --> 05:37.360
this his name is Wojtek Ruzika and I'll leave a link to that down below in the description

05:37.360 --> 05:45.920
he did he did leave uh he wrote wrote the post a blog post in 2017 and it's well what to read

05:45.920 --> 05:52.560
especially because he he kind of expounds and elucidates as to how using utility classes or

05:52.560 --> 05:58.480
let's say misusing them or abusing them could be sort of an anti-pattern because it doesn't

05:58.480 --> 06:05.920
necessarily sit or follow OOP principles in fact I've got a little excerpt from his blog he says here

06:07.920 --> 06:14.480
avoid you avoid using avoid utility classes that's the name of the blog post and in many states

06:14.480 --> 06:22.720
by the by the OOP principles an object should contain both data and a behavior performed

06:22.720 --> 06:29.280
over that data utility classes are just behavior all the data are passed as inputs it is in no

06:29.280 --> 06:35.360
way object oriented it is more of a procedural way of thinking so it's you know because you keep

06:35.360 --> 06:41.440
that in mind when using utility classes but that's sort of an ancillary point and the book

06:41.440 --> 06:48.480
Joshua Block states such utility classes were not designed to be instantiated an instance would be

06:48.480 --> 06:54.400
nonsensical of course because all really for instance this this class in the collections class

06:54.400 --> 06:59.840
all it really does is hold a whole bunch of static methods that will be used that that will be used

06:59.840 --> 07:07.600
by a client where we'll just pass data onto the function in the absence of explicit constructors

07:07.600 --> 07:15.120
however the compiler provides a public parameterless default constructor to use this to a user this

07:15.120 --> 07:23.600
constructor is indistinguishable indistinguishable from any other it is not uncommon to see unintentionally

07:23.680 --> 07:31.440
instantially unintentionally instantiable classes in published apis especially in public apis because

07:32.080 --> 07:36.080
so again this is a good example because firstly Joshua Block himself has written this but it's

07:36.080 --> 07:41.920
also just something that we're all familiar with this class here if he didn't explicitly state

07:41.920 --> 07:50.080
or whoever that wrote this code either Joshua Block or Neil Gaffta if the writer of this code

07:50.080 --> 07:56.960
didn't explicitly state that this that explicitly put this private constructor when the collections

07:56.960 --> 08:05.360
class is used by a client the jbm or the compiler would think of it would think of this as being a

08:05.360 --> 08:09.920
public constructor and would instantiate this class and create an object in the heap memory

08:09.920 --> 08:14.400
and that's not something we want especially from a utility class and then he continues

08:14.480 --> 08:20.000
attempting to enforce non-instantiability by making a class abstract does not work either

08:20.720 --> 08:27.600
the class can be subclassed so a sub class when the class is subclass let's say there's

08:28.160 --> 08:34.000
abstract class a and we don't explicitly state well we don't really need even need to put a

08:34.000 --> 08:38.480
constructor in an abstract class but let's say we have abstract class a and then b extends that

08:38.480 --> 08:44.320
class that a concrete class the moment that happens this is what happens the class can be subclass

08:44.320 --> 08:52.880
and the sub and the subclass instantiated so b can still instantiate itself and it's a type of the

08:54.160 --> 08:59.200
parent class a so instead of talking about it and trying to conceptualize it let me show a proper

08:59.200 --> 09:06.720
example uh there's a utility class here for a moment i will get rid of this private constructor

09:06.720 --> 09:12.000
so now if this now this class can be instantiated and despite it not having any explicit code

09:12.800 --> 09:19.280
apropos a constructor the moment this class is instantiated it has a public constructor with

09:19.280 --> 09:25.840
no args so then i have a child class here and this child class can extend the utility class

09:26.560 --> 09:31.840
as a result result of that we have a problem because this class is not going to be instantiated

09:31.840 --> 09:36.800
because of the because of the child class however if we go back to the utility the utility class

09:36.800 --> 09:44.800
and if we add this private constructor explicitly if we go back to the child class it'll throw this

09:44.800 --> 09:50.960
error the IDE will say there is no default constructor available in this class that's good

09:51.600 --> 09:56.320
which is what we want well it's not really what we want because this is after all a utility class

09:56.320 --> 10:02.240
and it it isn't created to be inherited and that's exactly what Joshua Block states

10:03.920 --> 10:08.720
furthermore it's it misleads the user into thinking the class was designed for inheritance

10:09.360 --> 10:17.360
we don't have to inherit just to prevent it from being um let's say uh instantiated playing all

10:17.360 --> 10:23.120
these games making an abstract class none of that it's it's useless it also misleads the client

10:23.120 --> 10:28.720
that's what he's trying to say here because this utility class wasn't created uh to be subclassed

10:28.720 --> 10:34.640
so of course the best solution is to explicitly define a private construct as i have done here

10:34.640 --> 10:42.880
and not notabene as we saw before this does prevent this utility class from being subclassed

10:42.880 --> 10:49.040
because it throws error there and that's important to keep in mind but generally no one really inherits

10:49.040 --> 10:56.880
utility classes because they just hold static methods uh he continues there is however a simple

10:56.880 --> 11:03.680
idiom to ensure non-instantiability a default constructor is generated only if a class contains

11:03.680 --> 11:10.880
no explicit constructors so a class can be made non-instantiable by including a private constructor

11:10.880 --> 11:15.840
that's exactly what we've done here now indeed you may wonder why line number 11 why do we need

11:15.840 --> 11:20.880
this through a new assertion error why not just leave it like that as a as a private constructor

11:20.880 --> 11:29.040
this is simply due to sometimes programmers making mistakes where i'll just read it off the book

11:29.040 --> 11:36.400
he explains it much clearer than i do the assertion error so that's right here isn't strictly required

11:36.400 --> 11:41.840
that's correct we can just leave the constructor private and leave the body empty but it provides

11:41.840 --> 11:49.200
insurance in case the constructor is accidentally invoked from within the class so an example for

11:49.200 --> 11:56.480
that would be here uh this public static void main method uh i'm trying to instantiate this class

11:56.480 --> 12:04.320
what you'll see now is if i run this it'll throw an error it will throw a throw new

12:04.320 --> 12:11.600
assertion error right there so even from within the class we can't instantiate that class however

12:11.600 --> 12:18.000
if we didn't have this assertion error throw new assertion error that that would be possible someone

12:18.000 --> 12:25.840
could whoops someone could do it from within the class and unfortunately now this class it lost its

12:25.840 --> 12:32.800
non-instantiability property and then he continues this idiom is mildly counting intuitive because

12:32.800 --> 12:39.600
the constructor is provided expressly so that it cannot be invoked it is therefore wise to include

12:39.680 --> 12:45.920
a comment as shown earlier so that's what he's done here like number nine oh this is something

12:45.920 --> 12:50.720
we touched on before as a side effect the idiom also prevents the class from being subclassed i

12:50.720 --> 12:59.200
did already demonstrate that uh with this this example here all constructors must evoke a super

12:59.200 --> 13:05.040
class constructor explicitly or implicitly and a subclass would have no accessible super class

13:05.120 --> 13:12.800
constructed and invoked so when this is subclass this child utility class invokes the constructor

13:12.800 --> 13:18.080
of the superclass and with its private that wouldn't happen that's it it's simple as that

13:18.080 --> 13:25.040
fuel answer code as i said the shortest item the next item item number four is a very very exciting

13:25.040 --> 13:32.320
i'm really keen to dive deep into this is prefer dependence injection to hardwiring resources

13:32.320 --> 13:34.320
recently i've been taking a

