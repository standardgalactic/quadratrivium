{"text": " Hey everyone, welcome to yet another episode of my video series on Joshua Bloch's Effective Java where I take the items enumerated in this book and expand on them and try and make sense of them and hopefully as I do that you learn something and gain some value from it too. Today I gotta say we're in item 9 as the title suggests but I gotta kind of, I'm sorry to be a bit self-aggrandizing and self-indulgent here, I gotta give myself a pat on the back because I'm actually quite proud of myself that I got through the first chapter because the first chapter which was, wait, what was the first chapter? Yeah, sorry, well chapter 2, the first chapter was introduction, I really skipped that bit but creating and destroying objects, got through the first chapter, this is the final item and then we move on to chapter number 3, methods common to all objects and I feel good. I'm learning so much and really enjoying this, a lot more than I thought that it's way way better than just reading the book, trying to explain it and expound on what's highlighted in the book, it's really beneficial and it's great, I'm really happy about this. Anyway, enough of that, without further ado let's get to the introduction, as usual if you have been following along in these episodes please do skip this bit, I wanna save your time because I'm just gonna repeat, whatever I've been saying in all the other videos and the first point in this proviso slash introduction is that this is not a tutorial, I'm not a teacher or an expert, so if you're new here, if this is the first video you're watching please do keep that in mind, if you've been following along you probably can already tell that I'm not an expert because you can see me making mistakes live and trying to make sense of things, therefore this is not a typical tutorial where you should just take whatever I say as gospel truth despite me following this book, it's still, I could make mistakes in interpreting what Joshua Blok has stated here, I like to think of this as a expensory disquisition or the blind, living the blind as I say it, I'm trying to make sense of a topic, of a concept, sometimes pertaining to Java but sometimes pertaining to programming in general and I am as blind or perhaps even more blind but the point is I'm as blind as you are or perhaps even more, therefore I will inevitably make mistakes so please point them out as some people have in the previous videos, I'll try my best to use forums as if you've been following along things like Stack Overflow or Reddit to ask questions and then not to make the mistake in the video itself and rather make the mistake when I'm preparing for the video and then rectify those mistakes but I'm sure I'll make them in the videos too so please do point them out and of course since this is a programming video series it only makes sense to have all the code used up on GitHub so I'll leave the links down below to my GitHub repository but not only that, even Joshua Bloch's public official repository for this book and definitely a lot of the stuff in my repository, I've taken this code and repurposed them to make them a bit more demonstrable let's say, like that let's get to item number nine, the last item in this chapter and that is prefer try with resources to try finally and this is since Java 7 I believe the try finally was introduced and now the proviso on this item specifically it's in fact better to go through item 8 before going through item 9 so if this is the first video you're coming across in this in this video series of this book or if you haven't read the book at all just you know kind of curious about it I would say you know specifically for this item it's better to better get an understanding of what he's talking about in item 8 saying that though before I get to kind of the the the crux of the matter let's let's just read I I'm going to read a bit from his introductory paragraph in this item, Joshua Bloch states the Java libraries include many resources that must be closed manually by invoking a closed method and that that exact sentence the first sentence of this item is exactly why I said it's probably a good idea to go through item 8 so do watch that video before watching this if you haven't watched it already or if you don't know the idea of closing resources in Java I continue closing resources is often overlooked by clients with predictably dire performance consequences while many of these resources use finalizes as a safety net finalizes sorry I read that too fast I'll read that again while many of these resources use finalizes as a safety net finalizes don't work very well as he highlights an item 8 sorry to keep beating on a dead horse here but I really want to make that point clear so it's quite straightforward we have here on line number 14 right here is simply a buffered read instance being created and that object being stored in this br variable and then we're trying to read off that object using the read line method that's in buffered reader and then if it fails what happens is simply the finally block would just take care of their cast error and then close that resource because we don't want to leave that resource without being closed by any chance and exception is thrown we want to reclaim that memory so yeah there's really nothing much to talk about this code if I do run that you'll see it's reading from this nature text I've got and it quotes without life sorry without music life would be a mistake that's the first line in this text file and it's right nature is right without life indeed sorry without music indeed life would be a mistake but that's the try finally block that would typically be used before the try with resources block was introduced so I was thinking about this a bit and I think I miss poke by using the word catch in fact there is no catch that's the problem in this try finally block in this part of the block in for instance where you're reading off the buffered reader if an exception is thrown we want the client of this API to know that an exception is thrown however what happens is because in the finally block it just simply closes the resource we we don't have a stack trace there's no record that there was an exception thrown when trying to read the line of these of this buffered reader instance it'll just close the object and that's it so it leaves no record that something went wrong and that generally is bad practice in programming and to make matters worse if we take a look at the other example torture block has given it's using two try blocks it's it's a first of all it's a very verbose code and it's really confusing to read but essentially what he's trying to do here is read off a input stream and then write to another file via an output stream and you can see there's a nested try statement inside it and what happens here is again as I said apart from the code being a bit let's say not very aesthetic in a case like this where there are nested try blocks let's assume in this section here line number 18 to 22 in the writing an error is thrown and that's an after so the writing is done in this out object that was created via the output stream and then that resource is closed fine but an error is thrown something goes wrong and the resource is closed and then this resource is closed too what happens is this block will suppress the stack trace of this block we will have no record that something went wrong here and that will make debugging a nightmare we all know infamously that most time is spent by programmers debugging code on runtime generally and if we don't have a proper stack trace we don't have proper information where something fails or an exception is thrown that can make things very complicated and that's the one of the other problems apart from it being verbose and ugly that we shouldn't use this kind of nested try finally statement which is why just to I guess pretty more formally in a bit more eloquent way Joshua block states and he makes the statement pertaining to this line this code here but also I propose the previous top line code that I showed he states it may be hard to believe but even good programmers got this wrong most of the time and then he goes on how he made the same mistake in a book he wrote called java puzzlers then he states the code in both the try block try block and the finally block is capable of throwing exceptions for example in the first line of file method so that would be the method here the call to read line could throw an exception due to a failure in the underlying physical device and the call to close could then fail for the same reason so it could there could be an error here sorry apologies there could be an error here in the read line in line number 16 and then even the closing would also cause another exception because errors can be thrown in try blocks and finally blocks both as I read before and the call to close could then fail for the same reason under these circumstances the second exception completely obliterates the first one there's no record of the first exception in the exception stack trace which can greatly complicate debugging in real systems usually it's the first exception that you want to see in order to diagnose the problem while it is possible to write code to suppress the second exception in favor of the first virtually no one did because it's just too verbose hmm I may have said something that was completely wrong before as I reread that paragraph I I was looking at the previous on a code and I said that an exception thrown here could be suppressed by these exceptions I don't know I think I think that's inaccurate the the point still stands because exceptions can be thrown in the finally blocks too whatever that's thrown here will be obliterated by these other exceptions thrown in these finally blocks too in this case when closing these objects so the point still stands point the point still stands I wasn't missing any money if I was pleased to point it out um I really hope I didn't push it there and due to these inherent problems with try finally java 7 introduced try with resources however before we get to that before we discuss what try with resources are I realized I didn't discuss a bit of theory I got lost in the code got a bit excited by the code as per usual I am a program after all I think it's worth discussing what closing resources resource is sorry that was like a bit of a tongue twister it's worth discussing what is closing a resource before we get to the try with resources part because they're quite tightly related so what is closing a resource it's pretty simple when we create a new object when we have the new keyword and we create a new object that object takes up memory and either when an application no longer requires that object again this is why I said to refer to item number eight because we go a bit deeply into item in fact item seven and eight both we discussed this idea so there's a bit of flow to the items in the book even though just your blog stating in the introduction that all these items can be understood distinctly and individually of course they're interrelated because after all we are talking about a broader programming language and a programming paradigm so getting back to the point I keep going off on tangents when an object is created that object takes up memory that's simply taking up resources and either when that object is no longer required by application or when an exception is thrown by that object like for example when reading a line that could be an exception that resource must be closed and that memory must be released to be used for the things by jvm and it's simply cleaning up after you're done it's just good etiquette good hygiene even in real life and that's simply what it is and of course a lot of this can be done with the garbage collection in with the jvm but of course at times it has to be done explicitly and manually by a programmer so I ended up asking of course I've been doing this like every other person these days I've been asking ask chat gpd what is closing the resource in java and here's what my programming buddy told me what this is sorry I was kind of having a moment I was like this is amazing where I've really been using chat gpd quite a lot at work and just asking questions and getting help with code it's it's like an advanced evolved version of stack overflow so according to chat gpd in java closing a resource means that you are releasing any resource that the object was using I agree mr chat gpd mr I shouldn't generate whatever man woman I want to be uh uh inclusive here this is typically done by calling the close method on the object that represents the resource for example if you have an input stream like we do in that method object that is used to read data from a file you would call the close method on that object to close the file and free up any resources that were being used by the industry and then a bit more formal definition on closing resources by the oracle docs this is a pretty old article it's in fact called better resource management with java seven and that was released a while back julian ponch states um the typical java application manipulates several types of resources such as files stream sockets and database connections such resources must be handled with great care because they acquire system resources for their operations thus you need to ensure that they get freed even in case of errors indeed incorrect resource management is a common source of failure is common source of failures in production applications with the usual pitfalls being database connections and file descriptors remaining open after an exception has occurred somewhere else in the code so similar similar to the example that you were looking at you know reading reading off a file this leads to application servers being frequently restarted when resource exhaustion occurs because operating systems and server applications generally have an upper bound limit for resources of course because at the end of the day the software still runs on hardware and it's still a limited domain or we have limited resources as to how the what we can do with the software even though perhaps that's changing now with cloud computing and all that uh anyway another tangent man i can't help myself my mind goes everywhere um so and as i say that historically resources were closed with the tri finally and then java seven introduced tri with resources i should have read this bit a bit uh somewhat earlier in this item on in the video but it's okay we got across a point so this is where this is a solution so this is tri with resources is the solution to the pitfalls of tri finally and again another formal definition by yorka docs the tri with resources statement is a statement that declares one or more resources a resource is an object that must be closed after the program is finalized with it i feel like we've we're repeating that point a lot now i apologize for being just repetitive but that really helps for that idea to get settled in your your mind let's say if that's how cognition works the tri with resources statement ensures that each resources each resource is closed at the end of the statement yes we shall see in code the example let's just get the theory out of the way any object that implements java lang autoclosable again this bit was covered in item eight so please do watch the previous previous video which includes all objects which implement java ioclosable can be used as a resource so similarly also in the book joshua book states to be usable with this construct what he means by this construct is using tri with resources a resource must implement autoclo the autoclosable interface which consists of a single void returning close method so here are the examples the first one is not the top line that was a mistake uh first one i'm using tri with resources i believe is this one here yeah that's it uh for now just ignore this catch bit we'll get to that a bit later but essentially as you can see in the resource in the tri statement itself these objects are being correct is that the correct one yeah that's the correct one in the tri statement itself uh the reason i'm looking at the book is because i took this code off the book and repurposed it um yeah so in the tri statement itself the object is being created uh and then within it we we run the read line method and if there's an exception it can be it can be suppressed and in this case you can probably see two objects are being created that was a mistake i just probably move it here so that it's easy to see but we're creating two objects the file reader and the buffered reader and the point just should look states and i shall read it out a bit later is that if an exception is thrown over here in the new buffered reader and then another one is thrown over here this won't obliterate the stack of the error or the in the stack trace the what indicates that an exception was thrown this won't obliterate that we could suppress the exceptions and in the stack traces it even states that an exception was thrown uh before above the tree i'm in front of think of the word here but an exception was thrown before the stack trace will indicate that um and then there's another example where he's using the try with resources or he's using multiple resources you know these examples are a bit confusing i wish he put a bit more comments in them um so this is the other example he hopes sorry that's a wrong one this is the other example where we're creating multiple objects so similar to the previous example we saw we're creating uh two objects here we're having the n object and the outer object one is an input stream the other is an output stream and here's what he states firstly uh again this point relates to the two examples i showed you not only are the try with resources versions shorter and more readable than the originals but they provide far better diagnostics and this is the point i was trying to make and i made quite badly in fact here's what he said so hopefully this will make a bit more sense consider the first line of five that would be this let's consider that method the first line of five method if exceptions are thrown by both the read line call which is oh it's going to be invisible in this case uh sorry uh the read line call is here but there's also a closing of resource that takes place oh so that's really important right so i'll read the sentence and then then try and explain what what he's he means here if exceptions are thrown by both the read line call so the read line here and the invisible close the latter exception is suppressed in favor of the former so in the try with resources uh block an automatic closing of the object does take place we don't have to do it explicitly so we don't see the close happening but these objects that were created are in fact closed and then he goes in fact multiple exceptions may be suppressed in order to preserve the exception that you actually want to see these suppressed exceptions are not merely discarded they are printed in the stack trace with the notation saying that they were suppressed so that's important um this is what i meant by the fact that depending on where the exception is thrown in the tree uh you you can decide which one you want to see and in fact i asked chat gpt again how do we do this and here is what chat gpt said uh apropos try with resources to print the suppressed exceptions on the stack trace you can call the print stack trace method and that does work i looked up a few examples i'll leave links down below on the first exception that was thrown and passed through as the argument this will print the stack trace of the first exception along with the stack traces of any suppressed exceptions so we don't want our logs being too verbose and to pollute it we can have it suppressed but if you want some extra diagnostics or additional information we can use the print stack trace method pass through to it and get that information that's the point and then he says of course we could have a catch statement here where we could do whatever with this exception either throw it throw it and let the client know or return some kind of default value um i've even done that in the other example too wait no not that one i think the top line example so in this case see i'm printing the stack trace so here if i want all the suppressed exceptions all i gotta do is pass through and that's an error remove redundant argument interesting oh perhaps it probably is a case that this was pertaining to Java 7 you don't even have to pass through i guess oh perhaps chat gpt was wrong there i don't think so because i did see a few examples where you are people are passing through onto the print stack trace i'll i'll look into that and leave some links down below so this will print the whole stack trace and tell exactly where the exceptions were thrown and that's the great thing about using try with resources because you could you could catch the exception you could print the stack trace and as Joshua Block has shown in his example you could even once the exception is caught maybe return some kind of default value and not end up breaking the whole application and okay putting putting more formally he states you can put catch closes on try with resources statements just as you can on regular try finally statements oh i probably made a mistake and said that you can't do that in try finally of course you can because we can have try catch and then a finally uh this allows you to handle exceptions without selling your code with another layer of nesting and then to conclude he states the lesson is clear always use try with resources in preference to try finally when working with resources that must be closed the resulting code is shorter and clearer and the exceptions that it generates are more useful that's it that is the end of chapter one and the end of that item uh and then in the next chapter as i did state before we're going to move to chapter three with it which is methods common to all objects i apologize if i did a bit of a i'm not i always feel like i don't do a good job at explaining these concepts a lot of that is because i'm learning a lot too but this seemed like quite an easy item that i struggled quite pathetically to explain um hopefully the comments i've left in the code and even the resources i leave will help you supplement what i'm doing in this video in some way um and of course the best thing you can do is read the book but i don't know a lot of people prefer watching videos than reading so hopefully this video can be useful because of that in any case enough self-flagellation i hope you enjoy this video thank you for watching i shall see you in the next one cheers", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 5.96, "text": " Hey everyone, welcome to yet another episode of my video series on Joshua Bloch's Effective", "tokens": [50364, 1911, 1518, 11, 2928, 281, 1939, 1071, 3500, 295, 452, 960, 2638, 322, 24005, 9865, 339, 311, 17764, 488, 50662], "temperature": 0.0, "avg_logprob": -0.20062761103853266, "compression_ratio": 1.5446808510638297, "no_speech_prob": 0.12865914404392242}, {"id": 1, "seek": 0, "start": 5.96, "end": 12.200000000000001, "text": " Java where I take the items enumerated in this book and expand on them and try and make", "tokens": [50662, 10745, 689, 286, 747, 264, 4754, 465, 15583, 770, 294, 341, 1446, 293, 5268, 322, 552, 293, 853, 293, 652, 50974], "temperature": 0.0, "avg_logprob": -0.20062761103853266, "compression_ratio": 1.5446808510638297, "no_speech_prob": 0.12865914404392242}, {"id": 2, "seek": 0, "start": 12.200000000000001, "end": 18.16, "text": " sense of them and hopefully as I do that you learn something and gain some value from", "tokens": [50974, 2020, 295, 552, 293, 4696, 382, 286, 360, 300, 291, 1466, 746, 293, 6052, 512, 2158, 490, 51272], "temperature": 0.0, "avg_logprob": -0.20062761103853266, "compression_ratio": 1.5446808510638297, "no_speech_prob": 0.12865914404392242}, {"id": 3, "seek": 0, "start": 18.16, "end": 19.16, "text": " it too.", "tokens": [51272, 309, 886, 13, 51322], "temperature": 0.0, "avg_logprob": -0.20062761103853266, "compression_ratio": 1.5446808510638297, "no_speech_prob": 0.12865914404392242}, {"id": 4, "seek": 0, "start": 19.16, "end": 26.04, "text": " Today I gotta say we're in item 9 as the title suggests but I gotta kind of, I'm sorry to", "tokens": [51322, 2692, 286, 3428, 584, 321, 434, 294, 3174, 1722, 382, 264, 4876, 13409, 457, 286, 3428, 733, 295, 11, 286, 478, 2597, 281, 51666], "temperature": 0.0, "avg_logprob": -0.20062761103853266, "compression_ratio": 1.5446808510638297, "no_speech_prob": 0.12865914404392242}, {"id": 5, "seek": 2604, "start": 26.04, "end": 31.32, "text": " be a bit self-aggrandizing and self-indulgent here, I gotta give myself a pat on the back", "tokens": [50364, 312, 257, 857, 2698, 12, 559, 32902, 3319, 293, 2698, 12, 471, 425, 6930, 510, 11, 286, 3428, 976, 2059, 257, 1947, 322, 264, 646, 50628], "temperature": 0.0, "avg_logprob": -0.1935965576171875, "compression_ratio": 1.9029850746268657, "no_speech_prob": 0.4450553059577942}, {"id": 6, "seek": 2604, "start": 31.32, "end": 34.48, "text": " because I'm actually quite proud of myself that I got through the first chapter because", "tokens": [50628, 570, 286, 478, 767, 1596, 4570, 295, 2059, 300, 286, 658, 807, 264, 700, 7187, 570, 50786], "temperature": 0.0, "avg_logprob": -0.1935965576171875, "compression_ratio": 1.9029850746268657, "no_speech_prob": 0.4450553059577942}, {"id": 7, "seek": 2604, "start": 34.48, "end": 39.36, "text": " the first chapter which was, wait, what was the first chapter?", "tokens": [50786, 264, 700, 7187, 597, 390, 11, 1699, 11, 437, 390, 264, 700, 7187, 30, 51030], "temperature": 0.0, "avg_logprob": -0.1935965576171875, "compression_ratio": 1.9029850746268657, "no_speech_prob": 0.4450553059577942}, {"id": 8, "seek": 2604, "start": 39.36, "end": 43.480000000000004, "text": " Yeah, sorry, well chapter 2, the first chapter was introduction, I really skipped that bit", "tokens": [51030, 865, 11, 2597, 11, 731, 7187, 568, 11, 264, 700, 7187, 390, 9339, 11, 286, 534, 30193, 300, 857, 51236], "temperature": 0.0, "avg_logprob": -0.1935965576171875, "compression_ratio": 1.9029850746268657, "no_speech_prob": 0.4450553059577942}, {"id": 9, "seek": 2604, "start": 43.480000000000004, "end": 49.08, "text": " but creating and destroying objects, got through the first chapter, this is the final item", "tokens": [51236, 457, 4084, 293, 19926, 6565, 11, 658, 807, 264, 700, 7187, 11, 341, 307, 264, 2572, 3174, 51516], "temperature": 0.0, "avg_logprob": -0.1935965576171875, "compression_ratio": 1.9029850746268657, "no_speech_prob": 0.4450553059577942}, {"id": 10, "seek": 2604, "start": 49.08, "end": 55.56, "text": " and then we move on to chapter number 3, methods common to all objects and I feel good.", "tokens": [51516, 293, 550, 321, 1286, 322, 281, 7187, 1230, 805, 11, 7150, 2689, 281, 439, 6565, 293, 286, 841, 665, 13, 51840], "temperature": 0.0, "avg_logprob": -0.1935965576171875, "compression_ratio": 1.9029850746268657, "no_speech_prob": 0.4450553059577942}, {"id": 11, "seek": 5556, "start": 55.56, "end": 59.32, "text": " I'm learning so much and really enjoying this, a lot more than I thought that it's", "tokens": [50364, 286, 478, 2539, 370, 709, 293, 534, 9929, 341, 11, 257, 688, 544, 813, 286, 1194, 300, 309, 311, 50552], "temperature": 0.0, "avg_logprob": -0.20849431002581562, "compression_ratio": 1.6755725190839694, "no_speech_prob": 0.005729597993195057}, {"id": 12, "seek": 5556, "start": 59.32, "end": 65.48, "text": " way way better than just reading the book, trying to explain it and expound on what's", "tokens": [50552, 636, 636, 1101, 813, 445, 3760, 264, 1446, 11, 1382, 281, 2903, 309, 293, 1278, 554, 322, 437, 311, 50860], "temperature": 0.0, "avg_logprob": -0.20849431002581562, "compression_ratio": 1.6755725190839694, "no_speech_prob": 0.005729597993195057}, {"id": 13, "seek": 5556, "start": 65.48, "end": 71.84, "text": " highlighted in the book, it's really beneficial and it's great, I'm really happy about this.", "tokens": [50860, 17173, 294, 264, 1446, 11, 309, 311, 534, 14072, 293, 309, 311, 869, 11, 286, 478, 534, 2055, 466, 341, 13, 51178], "temperature": 0.0, "avg_logprob": -0.20849431002581562, "compression_ratio": 1.6755725190839694, "no_speech_prob": 0.005729597993195057}, {"id": 14, "seek": 5556, "start": 71.84, "end": 76.64, "text": " Anyway, enough of that, without further ado let's get to the introduction, as usual if", "tokens": [51178, 5684, 11, 1547, 295, 300, 11, 1553, 3052, 22450, 718, 311, 483, 281, 264, 9339, 11, 382, 7713, 498, 51418], "temperature": 0.0, "avg_logprob": -0.20849431002581562, "compression_ratio": 1.6755725190839694, "no_speech_prob": 0.005729597993195057}, {"id": 15, "seek": 5556, "start": 76.64, "end": 81.28, "text": " you have been following along in these episodes please do skip this bit, I wanna save your", "tokens": [51418, 291, 362, 668, 3480, 2051, 294, 613, 9313, 1767, 360, 10023, 341, 857, 11, 286, 1948, 3155, 428, 51650], "temperature": 0.0, "avg_logprob": -0.20849431002581562, "compression_ratio": 1.6755725190839694, "no_speech_prob": 0.005729597993195057}, {"id": 16, "seek": 8128, "start": 81.28, "end": 85.6, "text": " time because I'm just gonna repeat, whatever I've been saying in all the other videos", "tokens": [50364, 565, 570, 286, 478, 445, 799, 7149, 11, 2035, 286, 600, 668, 1566, 294, 439, 264, 661, 2145, 50580], "temperature": 0.0, "avg_logprob": -0.1488316212225398, "compression_ratio": 1.7768924302788844, "no_speech_prob": 0.7947465181350708}, {"id": 17, "seek": 8128, "start": 85.6, "end": 92.72, "text": " and the first point in this proviso slash introduction is that this is not a tutorial,", "tokens": [50580, 293, 264, 700, 935, 294, 341, 1439, 19227, 17330, 9339, 307, 300, 341, 307, 406, 257, 7073, 11, 50936], "temperature": 0.0, "avg_logprob": -0.1488316212225398, "compression_ratio": 1.7768924302788844, "no_speech_prob": 0.7947465181350708}, {"id": 18, "seek": 8128, "start": 92.72, "end": 97.32, "text": " I'm not a teacher or an expert, so if you're new here, if this is the first video you're", "tokens": [50936, 286, 478, 406, 257, 5027, 420, 364, 5844, 11, 370, 498, 291, 434, 777, 510, 11, 498, 341, 307, 264, 700, 960, 291, 434, 51166], "temperature": 0.0, "avg_logprob": -0.1488316212225398, "compression_ratio": 1.7768924302788844, "no_speech_prob": 0.7947465181350708}, {"id": 19, "seek": 8128, "start": 97.32, "end": 102.28, "text": " watching please do keep that in mind, if you've been following along you probably can already", "tokens": [51166, 1976, 1767, 360, 1066, 300, 294, 1575, 11, 498, 291, 600, 668, 3480, 2051, 291, 1391, 393, 1217, 51414], "temperature": 0.0, "avg_logprob": -0.1488316212225398, "compression_ratio": 1.7768924302788844, "no_speech_prob": 0.7947465181350708}, {"id": 20, "seek": 8128, "start": 102.28, "end": 107.16, "text": " tell that I'm not an expert because you can see me making mistakes live and trying to make", "tokens": [51414, 980, 300, 286, 478, 406, 364, 5844, 570, 291, 393, 536, 385, 1455, 8038, 1621, 293, 1382, 281, 652, 51658], "temperature": 0.0, "avg_logprob": -0.1488316212225398, "compression_ratio": 1.7768924302788844, "no_speech_prob": 0.7947465181350708}, {"id": 21, "seek": 10716, "start": 107.2, "end": 111.88, "text": " sense of things, therefore this is not a typical tutorial where you should just take whatever", "tokens": [50366, 2020, 295, 721, 11, 4412, 341, 307, 406, 257, 7476, 7073, 689, 291, 820, 445, 747, 2035, 50600], "temperature": 0.0, "avg_logprob": -0.23185808393690321, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.24202710390090942}, {"id": 22, "seek": 10716, "start": 111.88, "end": 118.72, "text": " I say as gospel truth despite me following this book, it's still, I could make mistakes", "tokens": [50600, 286, 584, 382, 14943, 3494, 7228, 385, 3480, 341, 1446, 11, 309, 311, 920, 11, 286, 727, 652, 8038, 50942], "temperature": 0.0, "avg_logprob": -0.23185808393690321, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.24202710390090942}, {"id": 23, "seek": 10716, "start": 118.72, "end": 125.84, "text": " in interpreting what Joshua Blok has stated here, I like to think of this as a expensory", "tokens": [50942, 294, 37395, 437, 24005, 2177, 453, 575, 11323, 510, 11, 286, 411, 281, 519, 295, 341, 382, 257, 1278, 694, 827, 51298], "temperature": 0.0, "avg_logprob": -0.23185808393690321, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.24202710390090942}, {"id": 24, "seek": 10716, "start": 125.84, "end": 133.2, "text": " disquisition or the blind, living the blind as I say it, I'm trying to make sense of a", "tokens": [51298, 717, 15398, 849, 420, 264, 6865, 11, 2647, 264, 6865, 382, 286, 584, 309, 11, 286, 478, 1382, 281, 652, 2020, 295, 257, 51666], "temperature": 0.0, "avg_logprob": -0.23185808393690321, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.24202710390090942}, {"id": 25, "seek": 13320, "start": 133.23999999999998, "end": 140.23999999999998, "text": " topic, of a concept, sometimes pertaining to Java but sometimes pertaining to programming", "tokens": [50366, 4829, 11, 295, 257, 3410, 11, 2171, 49582, 281, 10745, 457, 2171, 49582, 281, 9410, 50716], "temperature": 0.0, "avg_logprob": -0.17059666935990497, "compression_ratio": 1.7389162561576355, "no_speech_prob": 0.08506953716278076}, {"id": 26, "seek": 13320, "start": 140.23999999999998, "end": 147.79999999999998, "text": " in general and I am as blind or perhaps even more blind but the point is I'm as blind as", "tokens": [50716, 294, 2674, 293, 286, 669, 382, 6865, 420, 4317, 754, 544, 6865, 457, 264, 935, 307, 286, 478, 382, 6865, 382, 51094], "temperature": 0.0, "avg_logprob": -0.17059666935990497, "compression_ratio": 1.7389162561576355, "no_speech_prob": 0.08506953716278076}, {"id": 27, "seek": 13320, "start": 147.79999999999998, "end": 153.95999999999998, "text": " you are or perhaps even more, therefore I will inevitably make mistakes so please point", "tokens": [51094, 291, 366, 420, 4317, 754, 544, 11, 4412, 286, 486, 28171, 652, 8038, 370, 1767, 935, 51402], "temperature": 0.0, "avg_logprob": -0.17059666935990497, "compression_ratio": 1.7389162561576355, "no_speech_prob": 0.08506953716278076}, {"id": 28, "seek": 13320, "start": 153.95999999999998, "end": 159.72, "text": " them out as some people have in the previous videos, I'll try my best to use forums as", "tokens": [51402, 552, 484, 382, 512, 561, 362, 294, 264, 3894, 2145, 11, 286, 603, 853, 452, 1151, 281, 764, 26998, 382, 51690], "temperature": 0.0, "avg_logprob": -0.17059666935990497, "compression_ratio": 1.7389162561576355, "no_speech_prob": 0.08506953716278076}, {"id": 29, "seek": 15972, "start": 159.72, "end": 164.92, "text": " if you've been following along things like Stack Overflow or Reddit to ask questions", "tokens": [50364, 498, 291, 600, 668, 3480, 2051, 721, 411, 37649, 4886, 10565, 420, 32210, 281, 1029, 1651, 50624], "temperature": 0.0, "avg_logprob": -0.16377148538265587, "compression_ratio": 1.755813953488372, "no_speech_prob": 0.2504921853542328}, {"id": 30, "seek": 15972, "start": 164.92, "end": 169.88, "text": " and then not to make the mistake in the video itself and rather make the mistake when I'm", "tokens": [50624, 293, 550, 406, 281, 652, 264, 6146, 294, 264, 960, 2564, 293, 2831, 652, 264, 6146, 562, 286, 478, 50872], "temperature": 0.0, "avg_logprob": -0.16377148538265587, "compression_ratio": 1.755813953488372, "no_speech_prob": 0.2504921853542328}, {"id": 31, "seek": 15972, "start": 169.88, "end": 176.76, "text": " preparing for the video and then rectify those mistakes but I'm sure I'll make them in the", "tokens": [50872, 10075, 337, 264, 960, 293, 550, 11048, 2505, 729, 8038, 457, 286, 478, 988, 286, 603, 652, 552, 294, 264, 51216], "temperature": 0.0, "avg_logprob": -0.16377148538265587, "compression_ratio": 1.755813953488372, "no_speech_prob": 0.2504921853542328}, {"id": 32, "seek": 15972, "start": 176.76, "end": 181.64, "text": " videos too so please do point them out and of course since this is a programming video series", "tokens": [51216, 2145, 886, 370, 1767, 360, 935, 552, 484, 293, 295, 1164, 1670, 341, 307, 257, 9410, 960, 2638, 51460], "temperature": 0.0, "avg_logprob": -0.16377148538265587, "compression_ratio": 1.755813953488372, "no_speech_prob": 0.2504921853542328}, {"id": 33, "seek": 15972, "start": 181.64, "end": 186.96, "text": " it only makes sense to have all the code used up on GitHub so I'll leave the links down below", "tokens": [51460, 309, 787, 1669, 2020, 281, 362, 439, 264, 3089, 1143, 493, 322, 23331, 370, 286, 603, 1856, 264, 6123, 760, 2507, 51726], "temperature": 0.0, "avg_logprob": -0.16377148538265587, "compression_ratio": 1.755813953488372, "no_speech_prob": 0.2504921853542328}, {"id": 34, "seek": 18696, "start": 187.68, "end": 194.24, "text": " to my GitHub repository but not only that, even Joshua Bloch's public official repository for", "tokens": [50400, 281, 452, 23331, 25841, 457, 406, 787, 300, 11, 754, 24005, 9865, 339, 311, 1908, 4783, 25841, 337, 50728], "temperature": 0.0, "avg_logprob": -0.1818232950956925, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0533747598528862}, {"id": 35, "seek": 18696, "start": 194.24, "end": 200.4, "text": " this book and definitely a lot of the stuff in my repository, I've taken this code and repurposed", "tokens": [50728, 341, 1446, 293, 2138, 257, 688, 295, 264, 1507, 294, 452, 25841, 11, 286, 600, 2726, 341, 3089, 293, 1085, 20130, 1744, 51036], "temperature": 0.0, "avg_logprob": -0.1818232950956925, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0533747598528862}, {"id": 36, "seek": 18696, "start": 200.4, "end": 207.60000000000002, "text": " them to make them a bit more demonstrable let's say, like that let's get to item number nine,", "tokens": [51036, 552, 281, 652, 552, 257, 857, 544, 5516, 424, 638, 718, 311, 584, 11, 411, 300, 718, 311, 483, 281, 3174, 1230, 4949, 11, 51396], "temperature": 0.0, "avg_logprob": -0.1818232950956925, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0533747598528862}, {"id": 37, "seek": 18696, "start": 207.60000000000002, "end": 216.4, "text": " the last item in this chapter and that is prefer try with resources to try finally and this is", "tokens": [51396, 264, 1036, 3174, 294, 341, 7187, 293, 300, 307, 4382, 853, 365, 3593, 281, 853, 2721, 293, 341, 307, 51836], "temperature": 0.0, "avg_logprob": -0.1818232950956925, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0533747598528862}, {"id": 38, "seek": 21696, "start": 216.96, "end": 222.48000000000002, "text": " since Java 7 I believe the try finally was introduced and now the proviso on this item", "tokens": [50364, 1670, 10745, 1614, 286, 1697, 264, 853, 2721, 390, 7268, 293, 586, 264, 1439, 19227, 322, 341, 3174, 50640], "temperature": 0.0, "avg_logprob": -0.13103263297777498, "compression_ratio": 1.7136363636363636, "no_speech_prob": 0.013844963163137436}, {"id": 39, "seek": 21696, "start": 223.20000000000002, "end": 230.8, "text": " specifically it's in fact better to go through item 8 before going through item 9 so if this is", "tokens": [50676, 4682, 309, 311, 294, 1186, 1101, 281, 352, 807, 3174, 1649, 949, 516, 807, 3174, 1722, 370, 498, 341, 307, 51056], "temperature": 0.0, "avg_logprob": -0.13103263297777498, "compression_ratio": 1.7136363636363636, "no_speech_prob": 0.013844963163137436}, {"id": 40, "seek": 21696, "start": 230.8, "end": 236.72, "text": " the first video you're coming across in this in this video series of this book or if you haven't", "tokens": [51056, 264, 700, 960, 291, 434, 1348, 2108, 294, 341, 294, 341, 960, 2638, 295, 341, 1446, 420, 498, 291, 2378, 380, 51352], "temperature": 0.0, "avg_logprob": -0.13103263297777498, "compression_ratio": 1.7136363636363636, "no_speech_prob": 0.013844963163137436}, {"id": 41, "seek": 21696, "start": 236.72, "end": 243.36, "text": " read the book at all just you know kind of curious about it I would say you know specifically for", "tokens": [51352, 1401, 264, 1446, 412, 439, 445, 291, 458, 733, 295, 6369, 466, 309, 286, 576, 584, 291, 458, 4682, 337, 51684], "temperature": 0.0, "avg_logprob": -0.13103263297777498, "compression_ratio": 1.7136363636363636, "no_speech_prob": 0.013844963163137436}, {"id": 42, "seek": 24336, "start": 243.36, "end": 251.52, "text": " this item it's better to better get an understanding of what he's talking about in item 8 saying that", "tokens": [50364, 341, 3174, 309, 311, 1101, 281, 1101, 483, 364, 3701, 295, 437, 415, 311, 1417, 466, 294, 3174, 1649, 1566, 300, 50772], "temperature": 0.0, "avg_logprob": -0.13802737405855361, "compression_ratio": 1.5913978494623655, "no_speech_prob": 0.006692275404930115}, {"id": 43, "seek": 24336, "start": 251.52, "end": 259.2, "text": " though before I get to kind of the the the crux of the matter let's let's just read I I'm going to", "tokens": [50772, 1673, 949, 286, 483, 281, 733, 295, 264, 264, 264, 5140, 87, 295, 264, 1871, 718, 311, 718, 311, 445, 1401, 286, 286, 478, 516, 281, 51156], "temperature": 0.0, "avg_logprob": -0.13802737405855361, "compression_ratio": 1.5913978494623655, "no_speech_prob": 0.006692275404930115}, {"id": 44, "seek": 24336, "start": 259.2, "end": 268.0, "text": " read a bit from his introductory paragraph in this item, Joshua Bloch states the Java libraries", "tokens": [51156, 1401, 257, 857, 490, 702, 39048, 18865, 294, 341, 3174, 11, 24005, 9865, 339, 4368, 264, 10745, 15148, 51596], "temperature": 0.0, "avg_logprob": -0.13802737405855361, "compression_ratio": 1.5913978494623655, "no_speech_prob": 0.006692275404930115}, {"id": 45, "seek": 26800, "start": 268.0, "end": 274.0, "text": " include many resources that must be closed manually by invoking a closed method and that that exact", "tokens": [50364, 4090, 867, 3593, 300, 1633, 312, 5395, 16945, 538, 1048, 5953, 257, 5395, 3170, 293, 300, 300, 1900, 50664], "temperature": 0.0, "avg_logprob": -0.08195394209061546, "compression_ratio": 1.761061946902655, "no_speech_prob": 0.03730686008930206}, {"id": 46, "seek": 26800, "start": 274.0, "end": 279.68, "text": " sentence the first sentence of this item is exactly why I said it's probably a good idea to go through", "tokens": [50664, 8174, 264, 700, 8174, 295, 341, 3174, 307, 2293, 983, 286, 848, 309, 311, 1391, 257, 665, 1558, 281, 352, 807, 50948], "temperature": 0.0, "avg_logprob": -0.08195394209061546, "compression_ratio": 1.761061946902655, "no_speech_prob": 0.03730686008930206}, {"id": 47, "seek": 26800, "start": 279.68, "end": 285.6, "text": " item 8 so do watch that video before watching this if you haven't watched it already or if you don't", "tokens": [50948, 3174, 1649, 370, 360, 1159, 300, 960, 949, 1976, 341, 498, 291, 2378, 380, 6337, 309, 1217, 420, 498, 291, 500, 380, 51244], "temperature": 0.0, "avg_logprob": -0.08195394209061546, "compression_ratio": 1.761061946902655, "no_speech_prob": 0.03730686008930206}, {"id": 48, "seek": 26800, "start": 285.6, "end": 293.6, "text": " know the idea of closing resources in Java I continue closing resources is often overlooked by", "tokens": [51244, 458, 264, 1558, 295, 10377, 3593, 294, 10745, 286, 2354, 10377, 3593, 307, 2049, 32269, 538, 51644], "temperature": 0.0, "avg_logprob": -0.08195394209061546, "compression_ratio": 1.761061946902655, "no_speech_prob": 0.03730686008930206}, {"id": 49, "seek": 29360, "start": 293.6, "end": 300.32000000000005, "text": " clients with predictably dire performance consequences while many of these resources use", "tokens": [50364, 6982, 365, 6069, 1188, 1264, 3389, 10098, 1339, 867, 295, 613, 3593, 764, 50700], "temperature": 0.0, "avg_logprob": -0.08440542221069336, "compression_ratio": 1.8706467661691542, "no_speech_prob": 0.04809676483273506}, {"id": 50, "seek": 29360, "start": 300.32000000000005, "end": 306.56, "text": " finalizes as a safety net finalizes sorry I read that too fast I'll read that again while many of", "tokens": [50700, 2572, 5660, 382, 257, 4514, 2533, 2572, 5660, 2597, 286, 1401, 300, 886, 2370, 286, 603, 1401, 300, 797, 1339, 867, 295, 51012], "temperature": 0.0, "avg_logprob": -0.08440542221069336, "compression_ratio": 1.8706467661691542, "no_speech_prob": 0.04809676483273506}, {"id": 51, "seek": 29360, "start": 306.56, "end": 314.56, "text": " these resources use finalizes as a safety net finalizes don't work very well as he highlights", "tokens": [51012, 613, 3593, 764, 2572, 5660, 382, 257, 4514, 2533, 2572, 5660, 500, 380, 589, 588, 731, 382, 415, 14254, 51412], "temperature": 0.0, "avg_logprob": -0.08440542221069336, "compression_ratio": 1.8706467661691542, "no_speech_prob": 0.04809676483273506}, {"id": 52, "seek": 29360, "start": 314.56, "end": 319.52000000000004, "text": " an item 8 sorry to keep beating on a dead horse here but I really want to make that point clear", "tokens": [51412, 364, 3174, 1649, 2597, 281, 1066, 13497, 322, 257, 3116, 6832, 510, 457, 286, 534, 528, 281, 652, 300, 935, 1850, 51660], "temperature": 0.0, "avg_logprob": -0.08440542221069336, "compression_ratio": 1.8706467661691542, "no_speech_prob": 0.04809676483273506}, {"id": 53, "seek": 31952, "start": 319.91999999999996, "end": 328.24, "text": " so it's quite straightforward we have here on line number 14 right here is simply a", "tokens": [50384, 370, 309, 311, 1596, 15325, 321, 362, 510, 322, 1622, 1230, 3499, 558, 510, 307, 2935, 257, 50800], "temperature": 0.0, "avg_logprob": -0.17741870880126953, "compression_ratio": 1.6787878787878787, "no_speech_prob": 0.01016425620764494}, {"id": 54, "seek": 31952, "start": 328.24, "end": 335.59999999999997, "text": " buffered read instance being created and that object being stored in this br variable and then", "tokens": [50800, 9204, 4073, 1401, 5197, 885, 2942, 293, 300, 2657, 885, 12187, 294, 341, 738, 7006, 293, 550, 51168], "temperature": 0.0, "avg_logprob": -0.17741870880126953, "compression_ratio": 1.6787878787878787, "no_speech_prob": 0.01016425620764494}, {"id": 55, "seek": 31952, "start": 335.59999999999997, "end": 342.88, "text": " we're trying to read off that object using the read line method that's in buffered reader and then", "tokens": [51168, 321, 434, 1382, 281, 1401, 766, 300, 2657, 1228, 264, 1401, 1622, 3170, 300, 311, 294, 9204, 4073, 15149, 293, 550, 51532], "temperature": 0.0, "avg_logprob": -0.17741870880126953, "compression_ratio": 1.6787878787878787, "no_speech_prob": 0.01016425620764494}, {"id": 56, "seek": 34288, "start": 342.88, "end": 352.8, "text": " if it fails what happens is simply the finally block would just take care of their cast error", "tokens": [50364, 498, 309, 18199, 437, 2314, 307, 2935, 264, 2721, 3461, 576, 445, 747, 1127, 295, 641, 4193, 6713, 50860], "temperature": 0.0, "avg_logprob": -0.10138529609231388, "compression_ratio": 1.6740088105726871, "no_speech_prob": 0.016911251470446587}, {"id": 57, "seek": 34288, "start": 352.8, "end": 359.28, "text": " and then close that resource because we don't want to leave that resource without being closed", "tokens": [50860, 293, 550, 1998, 300, 7684, 570, 321, 500, 380, 528, 281, 1856, 300, 7684, 1553, 885, 5395, 51184], "temperature": 0.0, "avg_logprob": -0.10138529609231388, "compression_ratio": 1.6740088105726871, "no_speech_prob": 0.016911251470446587}, {"id": 58, "seek": 34288, "start": 360.0, "end": 364.64, "text": " by any chance and exception is thrown we want to reclaim that memory so yeah there's really", "tokens": [51220, 538, 604, 2931, 293, 11183, 307, 11732, 321, 528, 281, 40074, 300, 4675, 370, 1338, 456, 311, 534, 51452], "temperature": 0.0, "avg_logprob": -0.10138529609231388, "compression_ratio": 1.6740088105726871, "no_speech_prob": 0.016911251470446587}, {"id": 59, "seek": 34288, "start": 364.64, "end": 369.84, "text": " nothing much to talk about this code if I do run that you'll see it's reading from this nature text", "tokens": [51452, 1825, 709, 281, 751, 466, 341, 3089, 498, 286, 360, 1190, 300, 291, 603, 536, 309, 311, 3760, 490, 341, 3687, 2487, 51712], "temperature": 0.0, "avg_logprob": -0.10138529609231388, "compression_ratio": 1.6740088105726871, "no_speech_prob": 0.016911251470446587}, {"id": 60, "seek": 36984, "start": 369.84, "end": 375.91999999999996, "text": " I've got and it quotes without life sorry without music life would be a mistake that's the first", "tokens": [50364, 286, 600, 658, 293, 309, 19963, 1553, 993, 2597, 1553, 1318, 993, 576, 312, 257, 6146, 300, 311, 264, 700, 50668], "temperature": 0.0, "avg_logprob": -0.08446789335930484, "compression_ratio": 1.94, "no_speech_prob": 0.04400007426738739}, {"id": 61, "seek": 36984, "start": 375.91999999999996, "end": 384.4, "text": " line in this text file and it's right nature is right without life indeed sorry without music", "tokens": [50668, 1622, 294, 341, 2487, 3991, 293, 309, 311, 558, 3687, 307, 558, 1553, 993, 6451, 2597, 1553, 1318, 51092], "temperature": 0.0, "avg_logprob": -0.08446789335930484, "compression_ratio": 1.94, "no_speech_prob": 0.04400007426738739}, {"id": 62, "seek": 36984, "start": 384.4, "end": 391.2, "text": " indeed life would be a mistake but that's the try finally block that would typically be used before", "tokens": [51092, 6451, 993, 576, 312, 257, 6146, 457, 300, 311, 264, 853, 2721, 3461, 300, 576, 5850, 312, 1143, 949, 51432], "temperature": 0.0, "avg_logprob": -0.08446789335930484, "compression_ratio": 1.94, "no_speech_prob": 0.04400007426738739}, {"id": 63, "seek": 36984, "start": 392.47999999999996, "end": 397.44, "text": " the try with resources block was introduced so I was thinking about this a bit and I think I miss", "tokens": [51496, 264, 853, 365, 3593, 3461, 390, 7268, 370, 286, 390, 1953, 466, 341, 257, 857, 293, 286, 519, 286, 1713, 51744], "temperature": 0.0, "avg_logprob": -0.08446789335930484, "compression_ratio": 1.94, "no_speech_prob": 0.04400007426738739}, {"id": 64, "seek": 39744, "start": 397.52, "end": 404.32, "text": " poke by using the word catch in fact there is no catch that's the problem in this try finally block", "tokens": [50368, 19712, 538, 1228, 264, 1349, 3745, 294, 1186, 456, 307, 572, 3745, 300, 311, 264, 1154, 294, 341, 853, 2721, 3461, 50708], "temperature": 0.0, "avg_logprob": -0.09290416674180464, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.048124201595783234}, {"id": 65, "seek": 39744, "start": 404.32, "end": 410.24, "text": " in this part of the block in for instance where you're reading off the buffered reader if an", "tokens": [50708, 294, 341, 644, 295, 264, 3461, 294, 337, 5197, 689, 291, 434, 3760, 766, 264, 9204, 4073, 15149, 498, 364, 51004], "temperature": 0.0, "avg_logprob": -0.09290416674180464, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.048124201595783234}, {"id": 66, "seek": 39744, "start": 410.24, "end": 416.96, "text": " exception is thrown we want the client of this API to know that an exception is thrown however", "tokens": [51004, 11183, 307, 11732, 321, 528, 264, 6423, 295, 341, 9362, 281, 458, 300, 364, 11183, 307, 11732, 4461, 51340], "temperature": 0.0, "avg_logprob": -0.09290416674180464, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.048124201595783234}, {"id": 67, "seek": 39744, "start": 417.68, "end": 424.88, "text": " what happens is because in the finally block it just simply closes the resource we we don't have", "tokens": [51376, 437, 2314, 307, 570, 294, 264, 2721, 3461, 309, 445, 2935, 24157, 264, 7684, 321, 321, 500, 380, 362, 51736], "temperature": 0.0, "avg_logprob": -0.09290416674180464, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.048124201595783234}, {"id": 68, "seek": 42488, "start": 424.88, "end": 432.0, "text": " a stack trace there's no record that there was an exception thrown when trying to read the line", "tokens": [50364, 257, 8630, 13508, 456, 311, 572, 2136, 300, 456, 390, 364, 11183, 11732, 562, 1382, 281, 1401, 264, 1622, 50720], "temperature": 0.0, "avg_logprob": -0.1429463733326305, "compression_ratio": 1.6931818181818181, "no_speech_prob": 0.030668390914797783}, {"id": 69, "seek": 42488, "start": 432.56, "end": 440.08, "text": " of these of this buffered reader instance it'll just close the object and that's it so it leaves no", "tokens": [50748, 295, 613, 295, 341, 9204, 4073, 15149, 5197, 309, 603, 445, 1998, 264, 2657, 293, 300, 311, 309, 370, 309, 5510, 572, 51124], "temperature": 0.0, "avg_logprob": -0.1429463733326305, "compression_ratio": 1.6931818181818181, "no_speech_prob": 0.030668390914797783}, {"id": 70, "seek": 42488, "start": 440.08, "end": 446.4, "text": " record that something went wrong and that generally is bad practice in programming and to make matters", "tokens": [51124, 2136, 300, 746, 1437, 2085, 293, 300, 5101, 307, 1578, 3124, 294, 9410, 293, 281, 652, 7001, 51440], "temperature": 0.0, "avg_logprob": -0.1429463733326305, "compression_ratio": 1.6931818181818181, "no_speech_prob": 0.030668390914797783}, {"id": 71, "seek": 44640, "start": 446.4, "end": 455.44, "text": " worse if we take a look at the other example torture block has given it's using two try blocks", "tokens": [50364, 5324, 498, 321, 747, 257, 574, 412, 264, 661, 1365, 20711, 3461, 575, 2212, 309, 311, 1228, 732, 853, 8474, 50816], "temperature": 0.0, "avg_logprob": -0.1357798225001285, "compression_ratio": 1.8238095238095238, "no_speech_prob": 0.027579406276345253}, {"id": 72, "seek": 44640, "start": 455.44, "end": 460.56, "text": " it's it's a first of all it's a very verbose code and it's really confusing to read but essentially", "tokens": [50816, 309, 311, 309, 311, 257, 700, 295, 439, 309, 311, 257, 588, 9595, 541, 3089, 293, 309, 311, 534, 13181, 281, 1401, 457, 4476, 51072], "temperature": 0.0, "avg_logprob": -0.1357798225001285, "compression_ratio": 1.8238095238095238, "no_speech_prob": 0.027579406276345253}, {"id": 73, "seek": 44640, "start": 460.56, "end": 466.71999999999997, "text": " what he's trying to do here is read off a input stream and then write to another file via an output", "tokens": [51072, 437, 415, 311, 1382, 281, 360, 510, 307, 1401, 766, 257, 4846, 4309, 293, 550, 2464, 281, 1071, 3991, 5766, 364, 5598, 51380], "temperature": 0.0, "avg_logprob": -0.1357798225001285, "compression_ratio": 1.8238095238095238, "no_speech_prob": 0.027579406276345253}, {"id": 74, "seek": 44640, "start": 466.71999999999997, "end": 473.59999999999997, "text": " stream and you can see there's a nested try statement inside it and what happens here is", "tokens": [51380, 4309, 293, 291, 393, 536, 456, 311, 257, 15646, 292, 853, 5629, 1854, 309, 293, 437, 2314, 510, 307, 51724], "temperature": 0.0, "avg_logprob": -0.1357798225001285, "compression_ratio": 1.8238095238095238, "no_speech_prob": 0.027579406276345253}, {"id": 75, "seek": 47360, "start": 474.56, "end": 480.08000000000004, "text": " again as I said apart from the code being a bit let's say not very aesthetic in a case like this", "tokens": [50412, 797, 382, 286, 848, 4936, 490, 264, 3089, 885, 257, 857, 718, 311, 584, 406, 588, 20092, 294, 257, 1389, 411, 341, 50688], "temperature": 0.0, "avg_logprob": -0.10878133111529881, "compression_ratio": 1.6022099447513811, "no_speech_prob": 0.003765035653486848}, {"id": 76, "seek": 47360, "start": 480.08000000000004, "end": 490.16, "text": " where there are nested try blocks let's assume in this section here line number 18 to 22 in the", "tokens": [50688, 689, 456, 366, 15646, 292, 853, 8474, 718, 311, 6552, 294, 341, 3541, 510, 1622, 1230, 2443, 281, 5853, 294, 264, 51192], "temperature": 0.0, "avg_logprob": -0.10878133111529881, "compression_ratio": 1.6022099447513811, "no_speech_prob": 0.003765035653486848}, {"id": 77, "seek": 47360, "start": 490.16, "end": 498.56, "text": " writing an error is thrown and that's an after so the writing is done in this out object that was", "tokens": [51192, 3579, 364, 6713, 307, 11732, 293, 300, 311, 364, 934, 370, 264, 3579, 307, 1096, 294, 341, 484, 2657, 300, 390, 51612], "temperature": 0.0, "avg_logprob": -0.10878133111529881, "compression_ratio": 1.6022099447513811, "no_speech_prob": 0.003765035653486848}, {"id": 78, "seek": 49856, "start": 498.56, "end": 506.16, "text": " created via the output stream and then that resource is closed fine but an error is thrown", "tokens": [50364, 2942, 5766, 264, 5598, 4309, 293, 550, 300, 7684, 307, 5395, 2489, 457, 364, 6713, 307, 11732, 50744], "temperature": 0.0, "avg_logprob": -0.07512059035124602, "compression_ratio": 1.9045226130653266, "no_speech_prob": 0.02479556016623974}, {"id": 79, "seek": 49856, "start": 506.16, "end": 512.8, "text": " something goes wrong and the resource is closed and then this resource is closed too what happens", "tokens": [50744, 746, 1709, 2085, 293, 264, 7684, 307, 5395, 293, 550, 341, 7684, 307, 5395, 886, 437, 2314, 51076], "temperature": 0.0, "avg_logprob": -0.07512059035124602, "compression_ratio": 1.9045226130653266, "no_speech_prob": 0.02479556016623974}, {"id": 80, "seek": 49856, "start": 512.8, "end": 519.36, "text": " is this block will suppress the stack trace of this block we will have no record that something", "tokens": [51076, 307, 341, 3461, 486, 26835, 264, 8630, 13508, 295, 341, 3461, 321, 486, 362, 572, 2136, 300, 746, 51404], "temperature": 0.0, "avg_logprob": -0.07512059035124602, "compression_ratio": 1.9045226130653266, "no_speech_prob": 0.02479556016623974}, {"id": 81, "seek": 49856, "start": 519.36, "end": 524.4, "text": " went wrong here and that will make debugging a nightmare we all know infamously that most time", "tokens": [51404, 1437, 2085, 510, 293, 300, 486, 652, 45592, 257, 18724, 321, 439, 458, 1536, 335, 5098, 300, 881, 565, 51656], "temperature": 0.0, "avg_logprob": -0.07512059035124602, "compression_ratio": 1.9045226130653266, "no_speech_prob": 0.02479556016623974}, {"id": 82, "seek": 52440, "start": 524.4, "end": 529.92, "text": " is spent by programmers debugging code on runtime generally and if we don't have a proper stack", "tokens": [50364, 307, 4418, 538, 41504, 45592, 3089, 322, 34474, 5101, 293, 498, 321, 500, 380, 362, 257, 2296, 8630, 50640], "temperature": 0.0, "avg_logprob": -0.09400885838728684, "compression_ratio": 1.710144927536232, "no_speech_prob": 0.013847327791154385}, {"id": 83, "seek": 52440, "start": 529.92, "end": 535.52, "text": " trace we don't have proper information where something fails or an exception is thrown", "tokens": [50640, 13508, 321, 500, 380, 362, 2296, 1589, 689, 746, 18199, 420, 364, 11183, 307, 11732, 50920], "temperature": 0.0, "avg_logprob": -0.09400885838728684, "compression_ratio": 1.710144927536232, "no_speech_prob": 0.013847327791154385}, {"id": 84, "seek": 52440, "start": 536.24, "end": 540.64, "text": " that can make things very complicated and that's the one of the other problems apart from it being", "tokens": [50956, 300, 393, 652, 721, 588, 6179, 293, 300, 311, 264, 472, 295, 264, 661, 2740, 4936, 490, 309, 885, 51176], "temperature": 0.0, "avg_logprob": -0.09400885838728684, "compression_ratio": 1.710144927536232, "no_speech_prob": 0.013847327791154385}, {"id": 85, "seek": 52440, "start": 540.64, "end": 547.1999999999999, "text": " verbose and ugly that we shouldn't use this kind of nested try finally statement which is why just", "tokens": [51176, 9595, 541, 293, 12246, 300, 321, 4659, 380, 764, 341, 733, 295, 15646, 292, 853, 2721, 5629, 597, 307, 983, 445, 51504], "temperature": 0.0, "avg_logprob": -0.09400885838728684, "compression_ratio": 1.710144927536232, "no_speech_prob": 0.013847327791154385}, {"id": 86, "seek": 52440, "start": 547.1999999999999, "end": 553.84, "text": " to I guess pretty more formally in a bit more eloquent way Joshua block states and he makes", "tokens": [51504, 281, 286, 2041, 1238, 544, 25983, 294, 257, 857, 544, 38682, 28842, 636, 24005, 3461, 4368, 293, 415, 1669, 51836], "temperature": 0.0, "avg_logprob": -0.09400885838728684, "compression_ratio": 1.710144927536232, "no_speech_prob": 0.013847327791154385}, {"id": 87, "seek": 55384, "start": 553.84, "end": 561.6800000000001, "text": " the statement pertaining to this line this code here but also I propose the previous top line", "tokens": [50364, 264, 5629, 49582, 281, 341, 1622, 341, 3089, 510, 457, 611, 286, 17421, 264, 3894, 1192, 1622, 50756], "temperature": 0.0, "avg_logprob": -0.08733328272787373, "compression_ratio": 1.7695852534562213, "no_speech_prob": 0.0022165842819958925}, {"id": 88, "seek": 55384, "start": 561.6800000000001, "end": 568.96, "text": " code that I showed he states it may be hard to believe but even good programmers got this wrong", "tokens": [50756, 3089, 300, 286, 4712, 415, 4368, 309, 815, 312, 1152, 281, 1697, 457, 754, 665, 41504, 658, 341, 2085, 51120], "temperature": 0.0, "avg_logprob": -0.08733328272787373, "compression_ratio": 1.7695852534562213, "no_speech_prob": 0.0022165842819958925}, {"id": 89, "seek": 55384, "start": 568.96, "end": 573.52, "text": " most of the time and then he goes on how he made the same mistake in a book he wrote called java", "tokens": [51120, 881, 295, 264, 565, 293, 550, 415, 1709, 322, 577, 415, 1027, 264, 912, 6146, 294, 257, 1446, 415, 4114, 1219, 361, 4061, 51348], "temperature": 0.0, "avg_logprob": -0.08733328272787373, "compression_ratio": 1.7695852534562213, "no_speech_prob": 0.0022165842819958925}, {"id": 90, "seek": 55384, "start": 573.52, "end": 582.4000000000001, "text": " puzzlers then he states the code in both the try block try block and the finally block is capable", "tokens": [51348, 18741, 11977, 550, 415, 4368, 264, 3089, 294, 1293, 264, 853, 3461, 853, 3461, 293, 264, 2721, 3461, 307, 8189, 51792], "temperature": 0.0, "avg_logprob": -0.08733328272787373, "compression_ratio": 1.7695852534562213, "no_speech_prob": 0.0022165842819958925}, {"id": 91, "seek": 58240, "start": 582.4, "end": 589.28, "text": " of throwing exceptions for example in the first line of file method so that would be the method here", "tokens": [50364, 295, 10238, 22847, 337, 1365, 294, 264, 700, 1622, 295, 3991, 3170, 370, 300, 576, 312, 264, 3170, 510, 50708], "temperature": 0.0, "avg_logprob": -0.07590597103803585, "compression_ratio": 1.9717514124293785, "no_speech_prob": 0.003375902073457837}, {"id": 92, "seek": 58240, "start": 592.8, "end": 599.6, "text": " the call to read line could throw an exception due to a failure in the underlying physical device", "tokens": [50884, 264, 818, 281, 1401, 1622, 727, 3507, 364, 11183, 3462, 281, 257, 7763, 294, 264, 14217, 4001, 4302, 51224], "temperature": 0.0, "avg_logprob": -0.07590597103803585, "compression_ratio": 1.9717514124293785, "no_speech_prob": 0.003375902073457837}, {"id": 93, "seek": 58240, "start": 599.6, "end": 602.9599999999999, "text": " and the call to close could then fail for the same reason so", "tokens": [51224, 293, 264, 818, 281, 1998, 727, 550, 3061, 337, 264, 912, 1778, 370, 51392], "temperature": 0.0, "avg_logprob": -0.07590597103803585, "compression_ratio": 1.9717514124293785, "no_speech_prob": 0.003375902073457837}, {"id": 94, "seek": 58240, "start": 605.28, "end": 609.4399999999999, "text": " it could there could be an error here sorry apologies there could be an error here in the", "tokens": [51508, 309, 727, 456, 727, 312, 364, 6713, 510, 2597, 34929, 456, 727, 312, 364, 6713, 510, 294, 264, 51716], "temperature": 0.0, "avg_logprob": -0.07590597103803585, "compression_ratio": 1.9717514124293785, "no_speech_prob": 0.003375902073457837}, {"id": 95, "seek": 60944, "start": 609.44, "end": 615.12, "text": " read line in line number 16 and then even the closing would also cause another exception", "tokens": [50364, 1401, 1622, 294, 1622, 1230, 3165, 293, 550, 754, 264, 10377, 576, 611, 3082, 1071, 11183, 50648], "temperature": 0.0, "avg_logprob": -0.06894879463391426, "compression_ratio": 1.7799043062200957, "no_speech_prob": 0.0029807952232658863}, {"id": 96, "seek": 60944, "start": 615.12, "end": 621.44, "text": " because errors can be thrown in try blocks and finally blocks both as I read before and the", "tokens": [50648, 570, 13603, 393, 312, 11732, 294, 853, 8474, 293, 2721, 8474, 1293, 382, 286, 1401, 949, 293, 264, 50964], "temperature": 0.0, "avg_logprob": -0.06894879463391426, "compression_ratio": 1.7799043062200957, "no_speech_prob": 0.0029807952232658863}, {"id": 97, "seek": 60944, "start": 621.44, "end": 627.7600000000001, "text": " call to close could then fail for the same reason under these circumstances the second exception", "tokens": [50964, 818, 281, 1998, 727, 550, 3061, 337, 264, 912, 1778, 833, 613, 9121, 264, 1150, 11183, 51280], "temperature": 0.0, "avg_logprob": -0.06894879463391426, "compression_ratio": 1.7799043062200957, "no_speech_prob": 0.0029807952232658863}, {"id": 98, "seek": 60944, "start": 627.7600000000001, "end": 634.1600000000001, "text": " completely obliterates the first one there's no record of the first exception in the exception", "tokens": [51280, 2584, 23740, 1681, 1024, 264, 700, 472, 456, 311, 572, 2136, 295, 264, 700, 11183, 294, 264, 11183, 51600], "temperature": 0.0, "avg_logprob": -0.06894879463391426, "compression_ratio": 1.7799043062200957, "no_speech_prob": 0.0029807952232658863}, {"id": 99, "seek": 63416, "start": 634.16, "end": 642.88, "text": " stack trace which can greatly complicate debugging in real systems usually it's the first exception", "tokens": [50364, 8630, 13508, 597, 393, 14147, 1209, 8700, 45592, 294, 957, 3652, 2673, 309, 311, 264, 700, 11183, 50800], "temperature": 0.0, "avg_logprob": -0.06308254381505454, "compression_ratio": 1.6696428571428572, "no_speech_prob": 0.008984104730188847}, {"id": 100, "seek": 63416, "start": 642.88, "end": 649.52, "text": " that you want to see in order to diagnose the problem while it is possible to write code to", "tokens": [50800, 300, 291, 528, 281, 536, 294, 1668, 281, 36238, 264, 1154, 1339, 309, 307, 1944, 281, 2464, 3089, 281, 51132], "temperature": 0.0, "avg_logprob": -0.06308254381505454, "compression_ratio": 1.6696428571428572, "no_speech_prob": 0.008984104730188847}, {"id": 101, "seek": 63416, "start": 649.52, "end": 656.3199999999999, "text": " suppress the second exception in favor of the first virtually no one did because it's just", "tokens": [51132, 26835, 264, 1150, 11183, 294, 2294, 295, 264, 700, 14103, 572, 472, 630, 570, 309, 311, 445, 51472], "temperature": 0.0, "avg_logprob": -0.06308254381505454, "compression_ratio": 1.6696428571428572, "no_speech_prob": 0.008984104730188847}, {"id": 102, "seek": 63416, "start": 656.3199999999999, "end": 662.4, "text": " too verbose hmm I may have said something that was completely wrong before as I reread that", "tokens": [51472, 886, 9595, 541, 16478, 286, 815, 362, 848, 746, 300, 390, 2584, 2085, 949, 382, 286, 46453, 345, 300, 51776], "temperature": 0.0, "avg_logprob": -0.06308254381505454, "compression_ratio": 1.6696428571428572, "no_speech_prob": 0.008984104730188847}, {"id": 103, "seek": 66240, "start": 662.4, "end": 669.36, "text": " paragraph I I was looking at the previous on a code and I said that an exception thrown", "tokens": [50364, 18865, 286, 286, 390, 1237, 412, 264, 3894, 322, 257, 3089, 293, 286, 848, 300, 364, 11183, 11732, 50712], "temperature": 0.0, "avg_logprob": -0.15205217810238109, "compression_ratio": 1.681564245810056, "no_speech_prob": 0.006002871319651604}, {"id": 104, "seek": 66240, "start": 670.8, "end": 674.9599999999999, "text": " here could be suppressed by these exceptions", "tokens": [50784, 510, 727, 312, 42645, 538, 613, 22847, 50992], "temperature": 0.0, "avg_logprob": -0.15205217810238109, "compression_ratio": 1.681564245810056, "no_speech_prob": 0.006002871319651604}, {"id": 105, "seek": 66240, "start": 677.1999999999999, "end": 680.8, "text": " I don't know I think I think that's inaccurate the the point still stands", "tokens": [51104, 286, 500, 380, 458, 286, 519, 286, 519, 300, 311, 46443, 264, 264, 935, 920, 7382, 51284], "temperature": 0.0, "avg_logprob": -0.15205217810238109, "compression_ratio": 1.681564245810056, "no_speech_prob": 0.006002871319651604}, {"id": 106, "seek": 66240, "start": 680.8, "end": 689.1999999999999, "text": " because exceptions can be thrown in the finally blocks too whatever that's thrown here will be", "tokens": [51284, 570, 22847, 393, 312, 11732, 294, 264, 2721, 8474, 886, 2035, 300, 311, 11732, 510, 486, 312, 51704], "temperature": 0.0, "avg_logprob": -0.15205217810238109, "compression_ratio": 1.681564245810056, "no_speech_prob": 0.006002871319651604}, {"id": 107, "seek": 68920, "start": 689.2, "end": 695.76, "text": " obliterated by these other exceptions thrown in these finally blocks too in this case when", "tokens": [50364, 23740, 1681, 770, 538, 613, 661, 22847, 11732, 294, 613, 2721, 8474, 886, 294, 341, 1389, 562, 50692], "temperature": 0.0, "avg_logprob": -0.14887200593948363, "compression_ratio": 1.7281553398058251, "no_speech_prob": 0.007936635054647923}, {"id": 108, "seek": 68920, "start": 695.76, "end": 700.08, "text": " closing these objects so the point still stands point the point still stands I wasn't", "tokens": [50692, 10377, 613, 6565, 370, 264, 935, 920, 7382, 935, 264, 935, 920, 7382, 286, 2067, 380, 50908], "temperature": 0.0, "avg_logprob": -0.14887200593948363, "compression_ratio": 1.7281553398058251, "no_speech_prob": 0.007936635054647923}, {"id": 109, "seek": 68920, "start": 700.96, "end": 706.32, "text": " missing any money if I was pleased to point it out um I really hope I didn't push it there", "tokens": [50952, 5361, 604, 1460, 498, 286, 390, 10587, 281, 935, 309, 484, 1105, 286, 534, 1454, 286, 994, 380, 2944, 309, 456, 51220], "temperature": 0.0, "avg_logprob": -0.14887200593948363, "compression_ratio": 1.7281553398058251, "no_speech_prob": 0.007936635054647923}, {"id": 110, "seek": 68920, "start": 707.5200000000001, "end": 713.76, "text": " and due to these inherent problems with try finally java 7 introduced try with resources", "tokens": [51280, 293, 3462, 281, 613, 26387, 2740, 365, 853, 2721, 361, 4061, 1614, 7268, 853, 365, 3593, 51592], "temperature": 0.0, "avg_logprob": -0.14887200593948363, "compression_ratio": 1.7281553398058251, "no_speech_prob": 0.007936635054647923}, {"id": 111, "seek": 71376, "start": 713.76, "end": 719.28, "text": " however before we get to that before we discuss what try with resources are I realized", "tokens": [50364, 4461, 949, 321, 483, 281, 300, 949, 321, 2248, 437, 853, 365, 3593, 366, 286, 5334, 50640], "temperature": 0.0, "avg_logprob": -0.10405944955760035, "compression_ratio": 1.8974358974358974, "no_speech_prob": 0.021941358223557472}, {"id": 112, "seek": 71376, "start": 720.64, "end": 725.68, "text": " I didn't discuss a bit of theory I got lost in the code got a bit excited by the code as per", "tokens": [50708, 286, 994, 380, 2248, 257, 857, 295, 5261, 286, 658, 2731, 294, 264, 3089, 658, 257, 857, 2919, 538, 264, 3089, 382, 680, 50960], "temperature": 0.0, "avg_logprob": -0.10405944955760035, "compression_ratio": 1.8974358974358974, "no_speech_prob": 0.021941358223557472}, {"id": 113, "seek": 71376, "start": 725.68, "end": 732.88, "text": " usual I am a program after all I think it's worth discussing what closing resources resource is", "tokens": [50960, 7713, 286, 669, 257, 1461, 934, 439, 286, 519, 309, 311, 3163, 10850, 437, 10377, 3593, 7684, 307, 51320], "temperature": 0.0, "avg_logprob": -0.10405944955760035, "compression_ratio": 1.8974358974358974, "no_speech_prob": 0.021941358223557472}, {"id": 114, "seek": 71376, "start": 733.4399999999999, "end": 739.52, "text": " sorry that was like a bit of a tongue twister it's worth discussing what is closing a resource", "tokens": [51348, 2597, 300, 390, 411, 257, 857, 295, 257, 10601, 683, 1964, 309, 311, 3163, 10850, 437, 307, 10377, 257, 7684, 51652], "temperature": 0.0, "avg_logprob": -0.10405944955760035, "compression_ratio": 1.8974358974358974, "no_speech_prob": 0.021941358223557472}, {"id": 115, "seek": 73952, "start": 739.6, "end": 745.84, "text": " before we get to the try with resources part because they're quite tightly related", "tokens": [50368, 949, 321, 483, 281, 264, 853, 365, 3593, 644, 570, 436, 434, 1596, 21952, 4077, 50680], "temperature": 0.0, "avg_logprob": -0.07823718466409822, "compression_ratio": 1.7417840375586855, "no_speech_prob": 0.007343267556279898}, {"id": 116, "seek": 73952, "start": 746.88, "end": 753.28, "text": " so what is closing a resource it's pretty simple when we create a new object when we have the new", "tokens": [50732, 370, 437, 307, 10377, 257, 7684, 309, 311, 1238, 2199, 562, 321, 1884, 257, 777, 2657, 562, 321, 362, 264, 777, 51052], "temperature": 0.0, "avg_logprob": -0.07823718466409822, "compression_ratio": 1.7417840375586855, "no_speech_prob": 0.007343267556279898}, {"id": 117, "seek": 73952, "start": 753.28, "end": 760.8, "text": " keyword and we create a new object that object takes up memory and either when an application", "tokens": [51052, 20428, 293, 321, 1884, 257, 777, 2657, 300, 2657, 2516, 493, 4675, 293, 2139, 562, 364, 3861, 51428], "temperature": 0.0, "avg_logprob": -0.07823718466409822, "compression_ratio": 1.7417840375586855, "no_speech_prob": 0.007343267556279898}, {"id": 118, "seek": 73952, "start": 761.6, "end": 767.04, "text": " no longer requires that object again this is why I said to refer to item number eight because we", "tokens": [51468, 572, 2854, 7029, 300, 2657, 797, 341, 307, 983, 286, 848, 281, 2864, 281, 3174, 1230, 3180, 570, 321, 51740], "temperature": 0.0, "avg_logprob": -0.07823718466409822, "compression_ratio": 1.7417840375586855, "no_speech_prob": 0.007343267556279898}, {"id": 119, "seek": 76704, "start": 767.04, "end": 772.0799999999999, "text": " go a bit deeply into item in fact item seven and eight both we discussed this idea so there's a", "tokens": [50364, 352, 257, 857, 8760, 666, 3174, 294, 1186, 3174, 3407, 293, 3180, 1293, 321, 7152, 341, 1558, 370, 456, 311, 257, 50616], "temperature": 0.0, "avg_logprob": -0.0958476890752345, "compression_ratio": 1.7130044843049328, "no_speech_prob": 0.017436224967241287}, {"id": 120, "seek": 76704, "start": 772.0799999999999, "end": 777.52, "text": " bit of flow to the items in the book even though just your blog stating in the introduction that all", "tokens": [50616, 857, 295, 3095, 281, 264, 4754, 294, 264, 1446, 754, 1673, 445, 428, 6968, 26688, 294, 264, 9339, 300, 439, 50888], "temperature": 0.0, "avg_logprob": -0.0958476890752345, "compression_ratio": 1.7130044843049328, "no_speech_prob": 0.017436224967241287}, {"id": 121, "seek": 76704, "start": 777.52, "end": 782.88, "text": " these items can be understood distinctly and individually of course they're interrelated", "tokens": [50888, 613, 4754, 393, 312, 7320, 10644, 356, 293, 16652, 295, 1164, 436, 434, 728, 12004, 51156], "temperature": 0.0, "avg_logprob": -0.0958476890752345, "compression_ratio": 1.7130044843049328, "no_speech_prob": 0.017436224967241287}, {"id": 122, "seek": 76704, "start": 782.88, "end": 790.48, "text": " because after all we are talking about a broader programming language and a programming paradigm", "tokens": [51156, 570, 934, 439, 321, 366, 1417, 466, 257, 13227, 9410, 2856, 293, 257, 9410, 24709, 51536], "temperature": 0.0, "avg_logprob": -0.0958476890752345, "compression_ratio": 1.7130044843049328, "no_speech_prob": 0.017436224967241287}, {"id": 123, "seek": 79048, "start": 791.44, "end": 798.72, "text": " so getting back to the point I keep going off on tangents when an object is created that object", "tokens": [50412, 370, 1242, 646, 281, 264, 935, 286, 1066, 516, 766, 322, 10266, 791, 562, 364, 2657, 307, 2942, 300, 2657, 50776], "temperature": 0.0, "avg_logprob": -0.03904373021352859, "compression_ratio": 1.830188679245283, "no_speech_prob": 0.005383895710110664}, {"id": 124, "seek": 79048, "start": 798.72, "end": 805.9200000000001, "text": " takes up memory that's simply taking up resources and either when that object is no longer required", "tokens": [50776, 2516, 493, 4675, 300, 311, 2935, 1940, 493, 3593, 293, 2139, 562, 300, 2657, 307, 572, 2854, 4739, 51136], "temperature": 0.0, "avg_logprob": -0.03904373021352859, "compression_ratio": 1.830188679245283, "no_speech_prob": 0.005383895710110664}, {"id": 125, "seek": 79048, "start": 805.9200000000001, "end": 811.84, "text": " by application or when an exception is thrown by that object like for example when reading a line", "tokens": [51136, 538, 3861, 420, 562, 364, 11183, 307, 11732, 538, 300, 2657, 411, 337, 1365, 562, 3760, 257, 1622, 51432], "temperature": 0.0, "avg_logprob": -0.03904373021352859, "compression_ratio": 1.830188679245283, "no_speech_prob": 0.005383895710110664}, {"id": 126, "seek": 79048, "start": 811.84, "end": 818.08, "text": " that could be an exception that resource must be closed and that memory must be released to be", "tokens": [51432, 300, 727, 312, 364, 11183, 300, 7684, 1633, 312, 5395, 293, 300, 4675, 1633, 312, 4736, 281, 312, 51744], "temperature": 0.0, "avg_logprob": -0.03904373021352859, "compression_ratio": 1.830188679245283, "no_speech_prob": 0.005383895710110664}, {"id": 127, "seek": 81808, "start": 818.08, "end": 827.5200000000001, "text": " used for the things by jvm and it's simply cleaning up after you're done it's just good etiquette good", "tokens": [50364, 1143, 337, 264, 721, 538, 361, 85, 76, 293, 309, 311, 2935, 8924, 493, 934, 291, 434, 1096, 309, 311, 445, 665, 42177, 3007, 665, 50836], "temperature": 0.0, "avg_logprob": -0.06411400708285245, "compression_ratio": 1.7304347826086957, "no_speech_prob": 0.033076126128435135}, {"id": 128, "seek": 81808, "start": 827.5200000000001, "end": 832.48, "text": " hygiene even in real life and that's simply what it is and of course a lot of this can be done with", "tokens": [50836, 29541, 754, 294, 957, 993, 293, 300, 311, 2935, 437, 309, 307, 293, 295, 1164, 257, 688, 295, 341, 393, 312, 1096, 365, 51084], "temperature": 0.0, "avg_logprob": -0.06411400708285245, "compression_ratio": 1.7304347826086957, "no_speech_prob": 0.033076126128435135}, {"id": 129, "seek": 81808, "start": 832.48, "end": 839.12, "text": " the garbage collection in with the jvm but of course at times it has to be done explicitly and", "tokens": [51084, 264, 14150, 5765, 294, 365, 264, 361, 85, 76, 457, 295, 1164, 412, 1413, 309, 575, 281, 312, 1096, 20803, 293, 51416], "temperature": 0.0, "avg_logprob": -0.06411400708285245, "compression_ratio": 1.7304347826086957, "no_speech_prob": 0.033076126128435135}, {"id": 130, "seek": 81808, "start": 839.12, "end": 844.48, "text": " manually by a programmer so I ended up asking of course I've been doing this like every other person", "tokens": [51416, 16945, 538, 257, 32116, 370, 286, 4590, 493, 3365, 295, 1164, 286, 600, 668, 884, 341, 411, 633, 661, 954, 51684], "temperature": 0.0, "avg_logprob": -0.06411400708285245, "compression_ratio": 1.7304347826086957, "no_speech_prob": 0.033076126128435135}, {"id": 131, "seek": 84448, "start": 844.48, "end": 853.6800000000001, "text": " these days I've been asking ask chat gpd what is closing the resource in java and here's what my", "tokens": [50364, 613, 1708, 286, 600, 668, 3365, 1029, 5081, 290, 79, 67, 437, 307, 10377, 264, 7684, 294, 361, 4061, 293, 510, 311, 437, 452, 50824], "temperature": 0.0, "avg_logprob": -0.11813137629260756, "compression_ratio": 1.615819209039548, "no_speech_prob": 0.11586731672286987}, {"id": 132, "seek": 84448, "start": 853.6800000000001, "end": 862.88, "text": " programming buddy told me what this is sorry I was kind of having a moment I was like this is", "tokens": [50824, 9410, 10340, 1907, 385, 437, 341, 307, 2597, 286, 390, 733, 295, 1419, 257, 1623, 286, 390, 411, 341, 307, 51284], "temperature": 0.0, "avg_logprob": -0.11813137629260756, "compression_ratio": 1.615819209039548, "no_speech_prob": 0.11586731672286987}, {"id": 133, "seek": 84448, "start": 862.88, "end": 868.64, "text": " amazing where I've really been using chat gpd quite a lot at work and just asking questions and", "tokens": [51284, 2243, 689, 286, 600, 534, 668, 1228, 5081, 290, 79, 67, 1596, 257, 688, 412, 589, 293, 445, 3365, 1651, 293, 51572], "temperature": 0.0, "avg_logprob": -0.11813137629260756, "compression_ratio": 1.615819209039548, "no_speech_prob": 0.11586731672286987}, {"id": 134, "seek": 86864, "start": 868.64, "end": 873.52, "text": " getting help with code it's it's like an advanced evolved version of stack overflow", "tokens": [50364, 1242, 854, 365, 3089, 309, 311, 309, 311, 411, 364, 7339, 14178, 3037, 295, 8630, 37772, 50608], "temperature": 0.0, "avg_logprob": -0.11136730418485753, "compression_ratio": 1.6497695852534562, "no_speech_prob": 0.01911773346364498}, {"id": 135, "seek": 86864, "start": 875.36, "end": 881.52, "text": " so according to chat gpd in java closing a resource means that you are releasing any", "tokens": [50700, 370, 4650, 281, 5081, 290, 79, 67, 294, 361, 4061, 10377, 257, 7684, 1355, 300, 291, 366, 16327, 604, 51008], "temperature": 0.0, "avg_logprob": -0.11136730418485753, "compression_ratio": 1.6497695852534562, "no_speech_prob": 0.01911773346364498}, {"id": 136, "seek": 86864, "start": 881.52, "end": 888.56, "text": " resource that the object was using I agree mr chat gpd mr I shouldn't generate whatever man", "tokens": [51008, 7684, 300, 264, 2657, 390, 1228, 286, 3986, 33660, 5081, 290, 79, 67, 33660, 286, 4659, 380, 8460, 2035, 587, 51360], "temperature": 0.0, "avg_logprob": -0.11136730418485753, "compression_ratio": 1.6497695852534562, "no_speech_prob": 0.01911773346364498}, {"id": 137, "seek": 86864, "start": 888.56, "end": 896.96, "text": " woman I want to be uh uh inclusive here this is typically done by calling the close method on the", "tokens": [51360, 3059, 286, 528, 281, 312, 2232, 2232, 13429, 510, 341, 307, 5850, 1096, 538, 5141, 264, 1998, 3170, 322, 264, 51780], "temperature": 0.0, "avg_logprob": -0.11136730418485753, "compression_ratio": 1.6497695852534562, "no_speech_prob": 0.01911773346364498}, {"id": 138, "seek": 89696, "start": 896.96, "end": 902.32, "text": " object that represents the resource for example if you have an input stream like we do in that method", "tokens": [50364, 2657, 300, 8855, 264, 7684, 337, 1365, 498, 291, 362, 364, 4846, 4309, 411, 321, 360, 294, 300, 3170, 50632], "temperature": 0.0, "avg_logprob": -0.05095798667820021, "compression_ratio": 1.7953488372093023, "no_speech_prob": 0.003706555813550949}, {"id": 139, "seek": 89696, "start": 902.32, "end": 909.2800000000001, "text": " object that is used to read data from a file you would call the close method on that object to", "tokens": [50632, 2657, 300, 307, 1143, 281, 1401, 1412, 490, 257, 3991, 291, 576, 818, 264, 1998, 3170, 322, 300, 2657, 281, 50980], "temperature": 0.0, "avg_logprob": -0.05095798667820021, "compression_ratio": 1.7953488372093023, "no_speech_prob": 0.003706555813550949}, {"id": 140, "seek": 89696, "start": 909.2800000000001, "end": 915.2, "text": " close the file and free up any resources that were being used by the industry and then a bit", "tokens": [50980, 1998, 264, 3991, 293, 1737, 493, 604, 3593, 300, 645, 885, 1143, 538, 264, 3518, 293, 550, 257, 857, 51276], "temperature": 0.0, "avg_logprob": -0.05095798667820021, "compression_ratio": 1.7953488372093023, "no_speech_prob": 0.003706555813550949}, {"id": 141, "seek": 89696, "start": 915.2, "end": 922.24, "text": " more formal definition on closing resources by the oracle docs this is a pretty old article it's", "tokens": [51276, 544, 9860, 7123, 322, 10377, 3593, 538, 264, 420, 7041, 45623, 341, 307, 257, 1238, 1331, 7222, 309, 311, 51628], "temperature": 0.0, "avg_logprob": -0.05095798667820021, "compression_ratio": 1.7953488372093023, "no_speech_prob": 0.003706555813550949}, {"id": 142, "seek": 92224, "start": 922.24, "end": 928.4, "text": " in fact called better resource management with java seven and that was released a while back", "tokens": [50364, 294, 1186, 1219, 1101, 7684, 4592, 365, 361, 4061, 3407, 293, 300, 390, 4736, 257, 1339, 646, 50672], "temperature": 0.0, "avg_logprob": -0.10734071996476915, "compression_ratio": 1.7, "no_speech_prob": 0.015903325751423836}, {"id": 143, "seek": 92224, "start": 929.92, "end": 935.6, "text": " julian ponch states um the typical java application manipulates several types of", "tokens": [50748, 30764, 952, 9224, 339, 4368, 1105, 264, 7476, 361, 4061, 3861, 9258, 26192, 2940, 3467, 295, 51032], "temperature": 0.0, "avg_logprob": -0.10734071996476915, "compression_ratio": 1.7, "no_speech_prob": 0.015903325751423836}, {"id": 144, "seek": 92224, "start": 935.6, "end": 943.92, "text": " resources such as files stream sockets and database connections such resources must be handled", "tokens": [51032, 3593, 1270, 382, 7098, 4309, 370, 11984, 293, 8149, 9271, 1270, 3593, 1633, 312, 18033, 51448], "temperature": 0.0, "avg_logprob": -0.10734071996476915, "compression_ratio": 1.7, "no_speech_prob": 0.015903325751423836}, {"id": 145, "seek": 92224, "start": 943.92, "end": 950.08, "text": " with great care because they acquire system resources for their operations thus you need", "tokens": [51448, 365, 869, 1127, 570, 436, 20001, 1185, 3593, 337, 641, 7705, 8807, 291, 643, 51756], "temperature": 0.0, "avg_logprob": -0.10734071996476915, "compression_ratio": 1.7, "no_speech_prob": 0.015903325751423836}, {"id": 146, "seek": 95008, "start": 950.08, "end": 955.84, "text": " to ensure that they get freed even in case of errors indeed incorrect resource management", "tokens": [50364, 281, 5586, 300, 436, 483, 21796, 754, 294, 1389, 295, 13603, 6451, 18424, 7684, 4592, 50652], "temperature": 0.0, "avg_logprob": -0.07088963190714519, "compression_ratio": 1.7534246575342465, "no_speech_prob": 0.010160299949347973}, {"id": 147, "seek": 95008, "start": 955.84, "end": 962.0, "text": " is a common source of failure is common source of failures in production applications with the", "tokens": [50652, 307, 257, 2689, 4009, 295, 7763, 307, 2689, 4009, 295, 20774, 294, 4265, 5821, 365, 264, 50960], "temperature": 0.0, "avg_logprob": -0.07088963190714519, "compression_ratio": 1.7534246575342465, "no_speech_prob": 0.010160299949347973}, {"id": 148, "seek": 95008, "start": 962.0, "end": 969.0400000000001, "text": " usual pitfalls being database connections and file descriptors remaining open after an exception", "tokens": [50960, 7713, 10147, 18542, 885, 8149, 9271, 293, 3991, 31280, 830, 8877, 1269, 934, 364, 11183, 51312], "temperature": 0.0, "avg_logprob": -0.07088963190714519, "compression_ratio": 1.7534246575342465, "no_speech_prob": 0.010160299949347973}, {"id": 149, "seek": 95008, "start": 969.0400000000001, "end": 974.5600000000001, "text": " has occurred somewhere else in the code so similar similar to the example that you were looking at you", "tokens": [51312, 575, 11068, 4079, 1646, 294, 264, 3089, 370, 2531, 2531, 281, 264, 1365, 300, 291, 645, 1237, 412, 291, 51588], "temperature": 0.0, "avg_logprob": -0.07088963190714519, "compression_ratio": 1.7534246575342465, "no_speech_prob": 0.010160299949347973}, {"id": 150, "seek": 97456, "start": 974.56, "end": 981.4399999999999, "text": " know reading reading off a file this leads to application servers being frequently restarted", "tokens": [50364, 458, 3760, 3760, 766, 257, 3991, 341, 6689, 281, 3861, 15909, 885, 10374, 21022, 292, 50708], "temperature": 0.0, "avg_logprob": -0.06223056793212891, "compression_ratio": 1.7924528301886793, "no_speech_prob": 0.002589954063296318}, {"id": 151, "seek": 97456, "start": 981.4399999999999, "end": 988.16, "text": " when resource exhaustion occurs because operating systems and server applications generally have", "tokens": [50708, 562, 7684, 47408, 11843, 570, 7447, 3652, 293, 7154, 5821, 5101, 362, 51044], "temperature": 0.0, "avg_logprob": -0.06223056793212891, "compression_ratio": 1.7924528301886793, "no_speech_prob": 0.002589954063296318}, {"id": 152, "seek": 97456, "start": 988.16, "end": 992.88, "text": " an upper bound limit for resources of course because at the end of the day the software still", "tokens": [51044, 364, 6597, 5472, 4948, 337, 3593, 295, 1164, 570, 412, 264, 917, 295, 264, 786, 264, 4722, 920, 51280], "temperature": 0.0, "avg_logprob": -0.06223056793212891, "compression_ratio": 1.7924528301886793, "no_speech_prob": 0.002589954063296318}, {"id": 153, "seek": 97456, "start": 992.88, "end": 1000.7199999999999, "text": " runs on hardware and it's still a limited domain or we have limited resources as to how the what", "tokens": [51280, 6676, 322, 8837, 293, 309, 311, 920, 257, 5567, 9274, 420, 321, 362, 5567, 3593, 382, 281, 577, 264, 437, 51672], "temperature": 0.0, "avg_logprob": -0.06223056793212891, "compression_ratio": 1.7924528301886793, "no_speech_prob": 0.002589954063296318}, {"id": 154, "seek": 100072, "start": 1000.72, "end": 1005.28, "text": " we can do with the software even though perhaps that's changing now with cloud computing and all", "tokens": [50364, 321, 393, 360, 365, 264, 4722, 754, 1673, 4317, 300, 311, 4473, 586, 365, 4588, 15866, 293, 439, 50592], "temperature": 0.0, "avg_logprob": -0.12846977370125906, "compression_ratio": 1.7207207207207207, "no_speech_prob": 0.015421666204929352}, {"id": 155, "seek": 100072, "start": 1005.28, "end": 1012.32, "text": " that uh anyway another tangent man i can't help myself my mind goes everywhere um so and as i", "tokens": [50592, 300, 2232, 4033, 1071, 27747, 587, 741, 393, 380, 854, 2059, 452, 1575, 1709, 5315, 1105, 370, 293, 382, 741, 50944], "temperature": 0.0, "avg_logprob": -0.12846977370125906, "compression_ratio": 1.7207207207207207, "no_speech_prob": 0.015421666204929352}, {"id": 156, "seek": 100072, "start": 1012.32, "end": 1017.9200000000001, "text": " say that historically resources were closed with the tri finally and then java seven introduced", "tokens": [50944, 584, 300, 16180, 3593, 645, 5395, 365, 264, 1376, 2721, 293, 550, 361, 4061, 3407, 7268, 51224], "temperature": 0.0, "avg_logprob": -0.12846977370125906, "compression_ratio": 1.7207207207207207, "no_speech_prob": 0.015421666204929352}, {"id": 157, "seek": 100072, "start": 1017.9200000000001, "end": 1023.36, "text": " tri with resources i should have read this bit a bit uh somewhat earlier in this item on in the", "tokens": [51224, 1376, 365, 3593, 741, 820, 362, 1401, 341, 857, 257, 857, 2232, 8344, 3071, 294, 341, 3174, 322, 294, 264, 51496], "temperature": 0.0, "avg_logprob": -0.12846977370125906, "compression_ratio": 1.7207207207207207, "no_speech_prob": 0.015421666204929352}, {"id": 158, "seek": 102336, "start": 1023.36, "end": 1030.0, "text": " video but it's okay we got across a point so this is where this is a solution so this is", "tokens": [50364, 960, 457, 309, 311, 1392, 321, 658, 2108, 257, 935, 370, 341, 307, 689, 341, 307, 257, 3827, 370, 341, 307, 50696], "temperature": 0.0, "avg_logprob": -0.11679030000493767, "compression_ratio": 1.8682926829268294, "no_speech_prob": 0.01826123520731926}, {"id": 159, "seek": 102336, "start": 1030.0, "end": 1035.76, "text": " tri with resources is the solution to the pitfalls of tri finally and again another formal definition", "tokens": [50696, 1376, 365, 3593, 307, 264, 3827, 281, 264, 10147, 18542, 295, 1376, 2721, 293, 797, 1071, 9860, 7123, 50984], "temperature": 0.0, "avg_logprob": -0.11679030000493767, "compression_ratio": 1.8682926829268294, "no_speech_prob": 0.01826123520731926}, {"id": 160, "seek": 102336, "start": 1037.68, "end": 1045.1200000000001, "text": " by yorka docs the tri with resources statement is a statement that declares one or more resources", "tokens": [51080, 538, 288, 1284, 64, 45623, 264, 1376, 365, 3593, 5629, 307, 257, 5629, 300, 979, 19415, 472, 420, 544, 3593, 51452], "temperature": 0.0, "avg_logprob": -0.11679030000493767, "compression_ratio": 1.8682926829268294, "no_speech_prob": 0.01826123520731926}, {"id": 161, "seek": 102336, "start": 1045.84, "end": 1050.8, "text": " a resource is an object that must be closed after the program is finalized with it i feel like", "tokens": [51488, 257, 7684, 307, 364, 2657, 300, 1633, 312, 5395, 934, 264, 1461, 307, 2572, 1602, 365, 309, 741, 841, 411, 51736], "temperature": 0.0, "avg_logprob": -0.11679030000493767, "compression_ratio": 1.8682926829268294, "no_speech_prob": 0.01826123520731926}, {"id": 162, "seek": 105080, "start": 1050.8799999999999, "end": 1057.12, "text": " we've we're repeating that point a lot now i apologize for being just repetitive but that", "tokens": [50368, 321, 600, 321, 434, 18617, 300, 935, 257, 688, 586, 741, 12328, 337, 885, 445, 29404, 457, 300, 50680], "temperature": 0.0, "avg_logprob": -0.11221409952917764, "compression_ratio": 1.7592592592592593, "no_speech_prob": 0.0015485694166272879}, {"id": 163, "seek": 105080, "start": 1057.12, "end": 1064.1599999999999, "text": " really helps for that idea to get settled in your your mind let's say if that's how cognition works", "tokens": [50680, 534, 3665, 337, 300, 1558, 281, 483, 14819, 294, 428, 428, 1575, 718, 311, 584, 498, 300, 311, 577, 46905, 1985, 51032], "temperature": 0.0, "avg_logprob": -0.11221409952917764, "compression_ratio": 1.7592592592592593, "no_speech_prob": 0.0015485694166272879}, {"id": 164, "seek": 105080, "start": 1065.04, "end": 1070.48, "text": " the tri with resources statement ensures that each resources each resource is closed at the", "tokens": [51076, 264, 1376, 365, 3593, 5629, 28111, 300, 1184, 3593, 1184, 7684, 307, 5395, 412, 264, 51348], "temperature": 0.0, "avg_logprob": -0.11221409952917764, "compression_ratio": 1.7592592592592593, "no_speech_prob": 0.0015485694166272879}, {"id": 165, "seek": 105080, "start": 1070.48, "end": 1076.0, "text": " end of the statement yes we shall see in code the example let's just get the theory out of the way", "tokens": [51348, 917, 295, 264, 5629, 2086, 321, 4393, 536, 294, 3089, 264, 1365, 718, 311, 445, 483, 264, 5261, 484, 295, 264, 636, 51624], "temperature": 0.0, "avg_logprob": -0.11221409952917764, "compression_ratio": 1.7592592592592593, "no_speech_prob": 0.0015485694166272879}, {"id": 166, "seek": 107600, "start": 1076.0, "end": 1082.48, "text": " any object that implements java lang autoclosable again this bit was covered in item eight", "tokens": [50364, 604, 2657, 300, 704, 17988, 361, 4061, 2265, 45833, 9389, 712, 797, 341, 857, 390, 5343, 294, 3174, 3180, 50688], "temperature": 0.0, "avg_logprob": -0.11334719140845609, "compression_ratio": 1.801980198019802, "no_speech_prob": 0.003075002459809184}, {"id": 167, "seek": 107600, "start": 1083.6, "end": 1089.76, "text": " so please do watch the previous previous video which includes all objects which implement java", "tokens": [50744, 370, 1767, 360, 1159, 264, 3894, 3894, 960, 597, 5974, 439, 6565, 597, 4445, 361, 4061, 51052], "temperature": 0.0, "avg_logprob": -0.11334719140845609, "compression_ratio": 1.801980198019802, "no_speech_prob": 0.003075002459809184}, {"id": 168, "seek": 107600, "start": 1089.76, "end": 1096.56, "text": " ioclosable can be used as a resource so similarly also in the book joshua book states to be usable", "tokens": [51052, 741, 905, 9389, 712, 393, 312, 1143, 382, 257, 7684, 370, 14138, 611, 294, 264, 1446, 361, 3019, 4398, 1446, 4368, 281, 312, 29975, 51392], "temperature": 0.0, "avg_logprob": -0.11334719140845609, "compression_ratio": 1.801980198019802, "no_speech_prob": 0.003075002459809184}, {"id": 169, "seek": 107600, "start": 1096.56, "end": 1100.72, "text": " with this construct what he means by this construct is using tri with resources", "tokens": [51392, 365, 341, 7690, 437, 415, 1355, 538, 341, 7690, 307, 1228, 1376, 365, 3593, 51600], "temperature": 0.0, "avg_logprob": -0.11334719140845609, "compression_ratio": 1.801980198019802, "no_speech_prob": 0.003075002459809184}, {"id": 170, "seek": 110072, "start": 1101.68, "end": 1108.0, "text": " a resource must implement autoclo the autoclosable interface which consists of a single void", "tokens": [50412, 257, 7684, 1633, 4445, 45833, 752, 264, 45833, 9389, 712, 9226, 597, 14689, 295, 257, 2167, 22009, 50728], "temperature": 0.0, "avg_logprob": -0.2788057963053385, "compression_ratio": 1.6273291925465838, "no_speech_prob": 0.0039446912705898285}, {"id": 171, "seek": 110072, "start": 1108.0, "end": 1116.0, "text": " returning close method so here are the examples the first one is not the top line that was a", "tokens": [50728, 12678, 1998, 3170, 370, 510, 366, 264, 5110, 264, 700, 472, 307, 406, 264, 1192, 1622, 300, 390, 257, 51128], "temperature": 0.0, "avg_logprob": -0.2788057963053385, "compression_ratio": 1.6273291925465838, "no_speech_prob": 0.0039446912705898285}, {"id": 172, "seek": 110072, "start": 1116.0, "end": 1123.3600000000001, "text": " mistake uh first one i'm using tri with resources i believe is this one here", "tokens": [51128, 6146, 2232, 700, 472, 741, 478, 1228, 1376, 365, 3593, 741, 1697, 307, 341, 472, 510, 51496], "temperature": 0.0, "avg_logprob": -0.2788057963053385, "compression_ratio": 1.6273291925465838, "no_speech_prob": 0.0039446912705898285}, {"id": 173, "seek": 112336, "start": 1123.6799999999998, "end": 1132.3999999999999, "text": " yeah that's it uh for now just ignore this catch bit we'll get to that a bit later but", "tokens": [50380, 1338, 300, 311, 309, 2232, 337, 586, 445, 11200, 341, 3745, 857, 321, 603, 483, 281, 300, 257, 857, 1780, 457, 50816], "temperature": 0.0, "avg_logprob": -0.098576111263699, "compression_ratio": 1.87, "no_speech_prob": 0.0027145841158926487}, {"id": 174, "seek": 112336, "start": 1132.3999999999999, "end": 1139.4399999999998, "text": " essentially as you can see in the resource in the tri statement itself these objects are being", "tokens": [50816, 4476, 382, 291, 393, 536, 294, 264, 7684, 294, 264, 1376, 5629, 2564, 613, 6565, 366, 885, 51168], "temperature": 0.0, "avg_logprob": -0.098576111263699, "compression_ratio": 1.87, "no_speech_prob": 0.0027145841158926487}, {"id": 175, "seek": 112336, "start": 1139.4399999999998, "end": 1144.3999999999999, "text": " correct is that the correct one yeah that's the correct one in the tri statement itself uh the", "tokens": [51168, 3006, 307, 300, 264, 3006, 472, 1338, 300, 311, 264, 3006, 472, 294, 264, 1376, 5629, 2564, 2232, 264, 51416], "temperature": 0.0, "avg_logprob": -0.098576111263699, "compression_ratio": 1.87, "no_speech_prob": 0.0027145841158926487}, {"id": 176, "seek": 112336, "start": 1144.3999999999999, "end": 1150.4799999999998, "text": " reason i'm looking at the book is because i took this code off the book and repurposed it um yeah", "tokens": [51416, 1778, 741, 478, 1237, 412, 264, 1446, 307, 570, 741, 1890, 341, 3089, 766, 264, 1446, 293, 1085, 20130, 1744, 309, 1105, 1338, 51720], "temperature": 0.0, "avg_logprob": -0.098576111263699, "compression_ratio": 1.87, "no_speech_prob": 0.0027145841158926487}, {"id": 177, "seek": 115048, "start": 1150.48, "end": 1157.68, "text": " so in the tri statement itself the object is being created uh and then within it we we run the", "tokens": [50364, 370, 294, 264, 1376, 5629, 2564, 264, 2657, 307, 885, 2942, 2232, 293, 550, 1951, 309, 321, 321, 1190, 264, 50724], "temperature": 0.0, "avg_logprob": -0.06600544187757704, "compression_ratio": 1.854368932038835, "no_speech_prob": 0.0008829323342069983}, {"id": 178, "seek": 115048, "start": 1157.68, "end": 1166.4, "text": " read line method and if there's an exception it can be it can be suppressed and in this case you", "tokens": [50724, 1401, 1622, 3170, 293, 498, 456, 311, 364, 11183, 309, 393, 312, 309, 393, 312, 42645, 293, 294, 341, 1389, 291, 51160], "temperature": 0.0, "avg_logprob": -0.06600544187757704, "compression_ratio": 1.854368932038835, "no_speech_prob": 0.0008829323342069983}, {"id": 179, "seek": 115048, "start": 1166.4, "end": 1170.96, "text": " can probably see two objects are being created that was a mistake i just probably move it here so", "tokens": [51160, 393, 1391, 536, 732, 6565, 366, 885, 2942, 300, 390, 257, 6146, 741, 445, 1391, 1286, 309, 510, 370, 51388], "temperature": 0.0, "avg_logprob": -0.06600544187757704, "compression_ratio": 1.854368932038835, "no_speech_prob": 0.0008829323342069983}, {"id": 180, "seek": 115048, "start": 1170.96, "end": 1176.48, "text": " that it's easy to see but we're creating two objects the file reader and the buffered reader", "tokens": [51388, 300, 309, 311, 1858, 281, 536, 457, 321, 434, 4084, 732, 6565, 264, 3991, 15149, 293, 264, 9204, 4073, 15149, 51664], "temperature": 0.0, "avg_logprob": -0.06600544187757704, "compression_ratio": 1.854368932038835, "no_speech_prob": 0.0008829323342069983}, {"id": 181, "seek": 117648, "start": 1176.56, "end": 1181.44, "text": " and the point just should look states and i shall read it out a bit later is that if", "tokens": [50368, 293, 264, 935, 445, 820, 574, 4368, 293, 741, 4393, 1401, 309, 484, 257, 857, 1780, 307, 300, 498, 50612], "temperature": 0.0, "avg_logprob": -0.07348253560620685, "compression_ratio": 1.946524064171123, "no_speech_prob": 0.0017005675472319126}, {"id": 182, "seek": 117648, "start": 1181.44, "end": 1187.92, "text": " an exception is thrown over here in the new buffered reader and then another one is thrown", "tokens": [50612, 364, 11183, 307, 11732, 670, 510, 294, 264, 777, 9204, 4073, 15149, 293, 550, 1071, 472, 307, 11732, 50936], "temperature": 0.0, "avg_logprob": -0.07348253560620685, "compression_ratio": 1.946524064171123, "no_speech_prob": 0.0017005675472319126}, {"id": 183, "seek": 117648, "start": 1187.92, "end": 1196.64, "text": " over here this won't obliterate the stack of the error or the in the stack trace the what", "tokens": [50936, 670, 510, 341, 1582, 380, 23740, 1681, 473, 264, 8630, 295, 264, 6713, 420, 264, 294, 264, 8630, 13508, 264, 437, 51372], "temperature": 0.0, "avg_logprob": -0.07348253560620685, "compression_ratio": 1.946524064171123, "no_speech_prob": 0.0017005675472319126}, {"id": 184, "seek": 117648, "start": 1196.64, "end": 1202.16, "text": " indicates that an exception was thrown this won't obliterate that we could suppress the exceptions", "tokens": [51372, 16203, 300, 364, 11183, 390, 11732, 341, 1582, 380, 23740, 1681, 473, 300, 321, 727, 26835, 264, 22847, 51648], "temperature": 0.0, "avg_logprob": -0.07348253560620685, "compression_ratio": 1.946524064171123, "no_speech_prob": 0.0017005675472319126}, {"id": 185, "seek": 120216, "start": 1202.16, "end": 1211.52, "text": " and in the stack traces it even states that an exception was thrown uh before above the tree i'm", "tokens": [50364, 293, 294, 264, 8630, 26076, 309, 754, 4368, 300, 364, 11183, 390, 11732, 2232, 949, 3673, 264, 4230, 741, 478, 50832], "temperature": 0.0, "avg_logprob": -0.08864936609377806, "compression_ratio": 1.8743961352657006, "no_speech_prob": 0.002251650672405958}, {"id": 186, "seek": 120216, "start": 1211.52, "end": 1216.4, "text": " in front of think of the word here but an exception was thrown before the stack trace will indicate", "tokens": [50832, 294, 1868, 295, 519, 295, 264, 1349, 510, 457, 364, 11183, 390, 11732, 949, 264, 8630, 13508, 486, 13330, 51076], "temperature": 0.0, "avg_logprob": -0.08864936609377806, "compression_ratio": 1.8743961352657006, "no_speech_prob": 0.002251650672405958}, {"id": 187, "seek": 120216, "start": 1216.4, "end": 1225.52, "text": " that um and then there's another example where he's using the try with resources or he's using", "tokens": [51076, 300, 1105, 293, 550, 456, 311, 1071, 1365, 689, 415, 311, 1228, 264, 853, 365, 3593, 420, 415, 311, 1228, 51532], "temperature": 0.0, "avg_logprob": -0.08864936609377806, "compression_ratio": 1.8743961352657006, "no_speech_prob": 0.002251650672405958}, {"id": 188, "seek": 120216, "start": 1225.52, "end": 1231.0400000000002, "text": " multiple resources you know these examples are a bit confusing i wish he put a bit more comments", "tokens": [51532, 3866, 3593, 291, 458, 613, 5110, 366, 257, 857, 13181, 741, 3172, 415, 829, 257, 857, 544, 3053, 51808], "temperature": 0.0, "avg_logprob": -0.08864936609377806, "compression_ratio": 1.8743961352657006, "no_speech_prob": 0.002251650672405958}, {"id": 189, "seek": 123104, "start": 1231.04, "end": 1236.48, "text": " in them um so this is the other example he hopes sorry that's a wrong one", "tokens": [50364, 294, 552, 1105, 370, 341, 307, 264, 661, 1365, 415, 13681, 2597, 300, 311, 257, 2085, 472, 50636], "temperature": 0.0, "avg_logprob": -0.13111872731903454, "compression_ratio": 1.9226519337016574, "no_speech_prob": 0.007231442723423243}, {"id": 190, "seek": 123104, "start": 1239.84, "end": 1243.84, "text": " this is the other example where we're creating multiple objects so similar to the previous", "tokens": [50804, 341, 307, 264, 661, 1365, 689, 321, 434, 4084, 3866, 6565, 370, 2531, 281, 264, 3894, 51004], "temperature": 0.0, "avg_logprob": -0.13111872731903454, "compression_ratio": 1.9226519337016574, "no_speech_prob": 0.007231442723423243}, {"id": 191, "seek": 123104, "start": 1243.84, "end": 1249.2, "text": " example we saw we're creating uh two objects here we're having the n object and the outer", "tokens": [51004, 1365, 321, 1866, 321, 434, 4084, 2232, 732, 6565, 510, 321, 434, 1419, 264, 297, 2657, 293, 264, 10847, 51272], "temperature": 0.0, "avg_logprob": -0.13111872731903454, "compression_ratio": 1.9226519337016574, "no_speech_prob": 0.007231442723423243}, {"id": 192, "seek": 123104, "start": 1249.2, "end": 1255.92, "text": " object one is an input stream the other is an output stream and here's what he states firstly", "tokens": [51272, 2657, 472, 307, 364, 4846, 4309, 264, 661, 307, 364, 5598, 4309, 293, 510, 311, 437, 415, 4368, 27376, 51608], "temperature": 0.0, "avg_logprob": -0.13111872731903454, "compression_ratio": 1.9226519337016574, "no_speech_prob": 0.007231442723423243}, {"id": 193, "seek": 125592, "start": 1256.48, "end": 1263.92, "text": " uh again this point relates to the two examples i showed you not only are the try with resources", "tokens": [50392, 2232, 797, 341, 935, 16155, 281, 264, 732, 5110, 741, 4712, 291, 406, 787, 366, 264, 853, 365, 3593, 50764], "temperature": 0.0, "avg_logprob": -0.0616041747006503, "compression_ratio": 1.6782608695652175, "no_speech_prob": 0.016910579055547714}, {"id": 194, "seek": 125592, "start": 1263.92, "end": 1270.8000000000002, "text": " versions shorter and more readable than the originals but they provide far better diagnostics", "tokens": [50764, 9606, 11639, 293, 544, 49857, 813, 264, 4957, 1124, 457, 436, 2893, 1400, 1101, 43215, 1167, 51108], "temperature": 0.0, "avg_logprob": -0.0616041747006503, "compression_ratio": 1.6782608695652175, "no_speech_prob": 0.016910579055547714}, {"id": 195, "seek": 125592, "start": 1270.8000000000002, "end": 1276.0, "text": " and this is the point i was trying to make and i made quite badly in fact here's what he said so", "tokens": [51108, 293, 341, 307, 264, 935, 741, 390, 1382, 281, 652, 293, 741, 1027, 1596, 13425, 294, 1186, 510, 311, 437, 415, 848, 370, 51368], "temperature": 0.0, "avg_logprob": -0.0616041747006503, "compression_ratio": 1.6782608695652175, "no_speech_prob": 0.016910579055547714}, {"id": 196, "seek": 125592, "start": 1276.0, "end": 1283.28, "text": " hopefully this will make a bit more sense consider the first line of five that would be this let's", "tokens": [51368, 4696, 341, 486, 652, 257, 857, 544, 2020, 1949, 264, 700, 1622, 295, 1732, 300, 576, 312, 341, 718, 311, 51732], "temperature": 0.0, "avg_logprob": -0.0616041747006503, "compression_ratio": 1.6782608695652175, "no_speech_prob": 0.016910579055547714}, {"id": 197, "seek": 128328, "start": 1283.28, "end": 1296.0, "text": " consider that method the first line of five method if exceptions are thrown by both the", "tokens": [50364, 1949, 300, 3170, 264, 700, 1622, 295, 1732, 3170, 498, 22847, 366, 11732, 538, 1293, 264, 51000], "temperature": 0.0, "avg_logprob": -0.08806537091732025, "compression_ratio": 1.6402439024390243, "no_speech_prob": 0.001345697557553649}, {"id": 198, "seek": 128328, "start": 1296.0, "end": 1302.6399999999999, "text": " read line call which is oh it's going to be invisible in this case uh sorry uh the read", "tokens": [51000, 1401, 1622, 818, 597, 307, 1954, 309, 311, 516, 281, 312, 14603, 294, 341, 1389, 2232, 2597, 2232, 264, 1401, 51332], "temperature": 0.0, "avg_logprob": -0.08806537091732025, "compression_ratio": 1.6402439024390243, "no_speech_prob": 0.001345697557553649}, {"id": 199, "seek": 128328, "start": 1302.6399999999999, "end": 1307.76, "text": " line call is here but there's also a closing of resource that takes place oh so that's really", "tokens": [51332, 1622, 818, 307, 510, 457, 456, 311, 611, 257, 10377, 295, 7684, 300, 2516, 1081, 1954, 370, 300, 311, 534, 51588], "temperature": 0.0, "avg_logprob": -0.08806537091732025, "compression_ratio": 1.6402439024390243, "no_speech_prob": 0.001345697557553649}, {"id": 200, "seek": 130776, "start": 1307.76, "end": 1313.36, "text": " important right so i'll read the sentence and then then try and explain what what he's he means here", "tokens": [50364, 1021, 558, 370, 741, 603, 1401, 264, 8174, 293, 550, 550, 853, 293, 2903, 437, 437, 415, 311, 415, 1355, 510, 50644], "temperature": 0.0, "avg_logprob": -0.09331338545855354, "compression_ratio": 1.7465437788018434, "no_speech_prob": 0.009856960736215115}, {"id": 201, "seek": 130776, "start": 1314.0, "end": 1321.04, "text": " if exceptions are thrown by both the read line call so the read line here and the invisible close", "tokens": [50676, 498, 22847, 366, 11732, 538, 1293, 264, 1401, 1622, 818, 370, 264, 1401, 1622, 510, 293, 264, 14603, 1998, 51028], "temperature": 0.0, "avg_logprob": -0.09331338545855354, "compression_ratio": 1.7465437788018434, "no_speech_prob": 0.009856960736215115}, {"id": 202, "seek": 130776, "start": 1321.68, "end": 1331.2, "text": " the latter exception is suppressed in favor of the former so in the try with resources uh block", "tokens": [51060, 264, 18481, 11183, 307, 42645, 294, 2294, 295, 264, 5819, 370, 294, 264, 853, 365, 3593, 2232, 3461, 51536], "temperature": 0.0, "avg_logprob": -0.09331338545855354, "compression_ratio": 1.7465437788018434, "no_speech_prob": 0.009856960736215115}, {"id": 203, "seek": 130776, "start": 1332.0, "end": 1336.56, "text": " an automatic closing of the object does take place we don't have to do it explicitly", "tokens": [51576, 364, 12509, 10377, 295, 264, 2657, 775, 747, 1081, 321, 500, 380, 362, 281, 360, 309, 20803, 51804], "temperature": 0.0, "avg_logprob": -0.09331338545855354, "compression_ratio": 1.7465437788018434, "no_speech_prob": 0.009856960736215115}, {"id": 204, "seek": 133656, "start": 1337.52, "end": 1342.0, "text": " so we don't see the close happening but these objects that were created are in fact closed", "tokens": [50412, 370, 321, 500, 380, 536, 264, 1998, 2737, 457, 613, 6565, 300, 645, 2942, 366, 294, 1186, 5395, 50636], "temperature": 0.0, "avg_logprob": -0.06622144982621476, "compression_ratio": 1.8232323232323233, "no_speech_prob": 0.0018100683810189366}, {"id": 205, "seek": 133656, "start": 1345.36, "end": 1350.56, "text": " and then he goes in fact multiple exceptions may be suppressed in order to preserve the", "tokens": [50804, 293, 550, 415, 1709, 294, 1186, 3866, 22847, 815, 312, 42645, 294, 1668, 281, 15665, 264, 51064], "temperature": 0.0, "avg_logprob": -0.06622144982621476, "compression_ratio": 1.8232323232323233, "no_speech_prob": 0.0018100683810189366}, {"id": 206, "seek": 133656, "start": 1350.56, "end": 1356.8799999999999, "text": " exception that you actually want to see these suppressed exceptions are not merely discarded", "tokens": [51064, 11183, 300, 291, 767, 528, 281, 536, 613, 42645, 22847, 366, 406, 17003, 45469, 51380], "temperature": 0.0, "avg_logprob": -0.06622144982621476, "compression_ratio": 1.8232323232323233, "no_speech_prob": 0.0018100683810189366}, {"id": 207, "seek": 133656, "start": 1357.52, "end": 1362.8799999999999, "text": " they are printed in the stack trace with the notation saying that they were suppressed so", "tokens": [51412, 436, 366, 13567, 294, 264, 8630, 13508, 365, 264, 24657, 1566, 300, 436, 645, 42645, 370, 51680], "temperature": 0.0, "avg_logprob": -0.06622144982621476, "compression_ratio": 1.8232323232323233, "no_speech_prob": 0.0018100683810189366}, {"id": 208, "seek": 136288, "start": 1362.88, "end": 1369.3600000000001, "text": " that's important um this is what i meant by the fact that depending on where the exception is", "tokens": [50364, 300, 311, 1021, 1105, 341, 307, 437, 741, 4140, 538, 264, 1186, 300, 5413, 322, 689, 264, 11183, 307, 50688], "temperature": 0.0, "avg_logprob": -0.08897400938946268, "compression_ratio": 1.8221153846153846, "no_speech_prob": 0.0006165999220684171}, {"id": 209, "seek": 136288, "start": 1369.3600000000001, "end": 1376.88, "text": " thrown in the tree uh you you can decide which one you want to see and in fact i asked chat gpt", "tokens": [50688, 11732, 294, 264, 4230, 2232, 291, 291, 393, 4536, 597, 472, 291, 528, 281, 536, 293, 294, 1186, 741, 2351, 5081, 290, 662, 51064], "temperature": 0.0, "avg_logprob": -0.08897400938946268, "compression_ratio": 1.8221153846153846, "no_speech_prob": 0.0006165999220684171}, {"id": 210, "seek": 136288, "start": 1376.88, "end": 1385.7600000000002, "text": " again how do we do this and here is what chat gpt said uh apropos try with resources to print", "tokens": [51064, 797, 577, 360, 321, 360, 341, 293, 510, 307, 437, 5081, 290, 662, 848, 2232, 1882, 1513, 329, 853, 365, 3593, 281, 4482, 51508], "temperature": 0.0, "avg_logprob": -0.08897400938946268, "compression_ratio": 1.8221153846153846, "no_speech_prob": 0.0006165999220684171}, {"id": 211, "seek": 136288, "start": 1385.7600000000002, "end": 1391.0400000000002, "text": " the suppressed exceptions on the stack trace you can call the print stack trace method and that", "tokens": [51508, 264, 42645, 22847, 322, 264, 8630, 13508, 291, 393, 818, 264, 4482, 8630, 13508, 3170, 293, 300, 51772], "temperature": 0.0, "avg_logprob": -0.08897400938946268, "compression_ratio": 1.8221153846153846, "no_speech_prob": 0.0006165999220684171}, {"id": 212, "seek": 139104, "start": 1391.04, "end": 1396.6399999999999, "text": " does work i looked up a few examples i'll leave links down below on the first exception that was", "tokens": [50364, 775, 589, 741, 2956, 493, 257, 1326, 5110, 741, 603, 1856, 6123, 760, 2507, 322, 264, 700, 11183, 300, 390, 50644], "temperature": 0.0, "avg_logprob": -0.049501646396725676, "compression_ratio": 1.7592592592592593, "no_speech_prob": 0.003074945881962776}, {"id": 213, "seek": 139104, "start": 1396.6399999999999, "end": 1402.32, "text": " thrown and passed through as the argument this will print the stack trace of the first exception", "tokens": [50644, 11732, 293, 4678, 807, 382, 264, 6770, 341, 486, 4482, 264, 8630, 13508, 295, 264, 700, 11183, 50928], "temperature": 0.0, "avg_logprob": -0.049501646396725676, "compression_ratio": 1.7592592592592593, "no_speech_prob": 0.003074945881962776}, {"id": 214, "seek": 139104, "start": 1402.32, "end": 1407.6, "text": " along with the stack traces of any suppressed exceptions so we don't want our logs being too", "tokens": [50928, 2051, 365, 264, 8630, 26076, 295, 604, 42645, 22847, 370, 321, 500, 380, 528, 527, 20820, 885, 886, 51192], "temperature": 0.0, "avg_logprob": -0.049501646396725676, "compression_ratio": 1.7592592592592593, "no_speech_prob": 0.003074945881962776}, {"id": 215, "seek": 139104, "start": 1407.6, "end": 1416.0, "text": " verbose and to pollute it we can have it suppressed but if you want some extra diagnostics or", "tokens": [51192, 9595, 541, 293, 281, 6418, 1169, 309, 321, 393, 362, 309, 42645, 457, 498, 291, 528, 512, 2857, 43215, 1167, 420, 51612], "temperature": 0.0, "avg_logprob": -0.049501646396725676, "compression_ratio": 1.7592592592592593, "no_speech_prob": 0.003074945881962776}, {"id": 216, "seek": 141600, "start": 1416.08, "end": 1420.96, "text": " additional information we can use the print stack trace method pass through to it and get", "tokens": [50368, 4497, 1589, 321, 393, 764, 264, 4482, 8630, 13508, 3170, 1320, 807, 281, 309, 293, 483, 50612], "temperature": 0.0, "avg_logprob": -0.07894252595447358, "compression_ratio": 1.8385826771653544, "no_speech_prob": 0.026351885870099068}, {"id": 217, "seek": 141600, "start": 1420.96, "end": 1425.2, "text": " that information that's the point and then he says of course we could have a catch statement here", "tokens": [50612, 300, 1589, 300, 311, 264, 935, 293, 550, 415, 1619, 295, 1164, 321, 727, 362, 257, 3745, 5629, 510, 50824], "temperature": 0.0, "avg_logprob": -0.07894252595447358, "compression_ratio": 1.8385826771653544, "no_speech_prob": 0.026351885870099068}, {"id": 218, "seek": 141600, "start": 1425.2, "end": 1430.16, "text": " where we could do whatever with this exception either throw it throw it and let the client know", "tokens": [50824, 689, 321, 727, 360, 2035, 365, 341, 11183, 2139, 3507, 309, 3507, 309, 293, 718, 264, 6423, 458, 51072], "temperature": 0.0, "avg_logprob": -0.07894252595447358, "compression_ratio": 1.8385826771653544, "no_speech_prob": 0.026351885870099068}, {"id": 219, "seek": 141600, "start": 1430.16, "end": 1436.24, "text": " or return some kind of default value um i've even done that in the other example too", "tokens": [51072, 420, 2736, 512, 733, 295, 7576, 2158, 1105, 741, 600, 754, 1096, 300, 294, 264, 661, 1365, 886, 51376], "temperature": 0.0, "avg_logprob": -0.07894252595447358, "compression_ratio": 1.8385826771653544, "no_speech_prob": 0.026351885870099068}, {"id": 220, "seek": 141600, "start": 1437.2, "end": 1442.4, "text": " wait no not that one i think the top line example so in this case see i'm printing the stack trace", "tokens": [51424, 1699, 572, 406, 300, 472, 741, 519, 264, 1192, 1622, 1365, 370, 294, 341, 1389, 536, 741, 478, 14699, 264, 8630, 13508, 51684], "temperature": 0.0, "avg_logprob": -0.07894252595447358, "compression_ratio": 1.8385826771653544, "no_speech_prob": 0.026351885870099068}, {"id": 221, "seek": 144240, "start": 1442.4, "end": 1448.72, "text": " so here if i want all the suppressed exceptions all i gotta do is pass through", "tokens": [50364, 370, 510, 498, 741, 528, 439, 264, 42645, 22847, 439, 741, 3428, 360, 307, 1320, 807, 50680], "temperature": 0.0, "avg_logprob": -0.0925352040459128, "compression_ratio": 1.68348623853211, "no_speech_prob": 0.0008558749104849994}, {"id": 222, "seek": 144240, "start": 1450.0800000000002, "end": 1459.68, "text": " and that's an error remove redundant argument interesting oh perhaps it probably is a case", "tokens": [50748, 293, 300, 311, 364, 6713, 4159, 40997, 6770, 1880, 1954, 4317, 309, 1391, 307, 257, 1389, 51228], "temperature": 0.0, "avg_logprob": -0.0925352040459128, "compression_ratio": 1.68348623853211, "no_speech_prob": 0.0008558749104849994}, {"id": 223, "seek": 144240, "start": 1459.68, "end": 1466.0800000000002, "text": " that this was pertaining to Java 7 you don't even have to pass through i guess oh perhaps chat gpt was", "tokens": [51228, 300, 341, 390, 49582, 281, 10745, 1614, 291, 500, 380, 754, 362, 281, 1320, 807, 741, 2041, 1954, 4317, 5081, 290, 662, 390, 51548], "temperature": 0.0, "avg_logprob": -0.0925352040459128, "compression_ratio": 1.68348623853211, "no_speech_prob": 0.0008558749104849994}, {"id": 224, "seek": 144240, "start": 1466.0800000000002, "end": 1470.64, "text": " wrong there i don't think so because i did see a few examples where you are people are passing", "tokens": [51548, 2085, 456, 741, 500, 380, 519, 370, 570, 741, 630, 536, 257, 1326, 5110, 689, 291, 366, 561, 366, 8437, 51776], "temperature": 0.0, "avg_logprob": -0.0925352040459128, "compression_ratio": 1.68348623853211, "no_speech_prob": 0.0008558749104849994}, {"id": 225, "seek": 147064, "start": 1470.64, "end": 1476.24, "text": " through onto the print stack trace i'll i'll look into that and leave some links down below", "tokens": [50364, 807, 3911, 264, 4482, 8630, 13508, 741, 603, 741, 603, 574, 666, 300, 293, 1856, 512, 6123, 760, 2507, 50644], "temperature": 0.0, "avg_logprob": -0.12391278295233699, "compression_ratio": 1.8995983935742973, "no_speech_prob": 0.008444522507488728}, {"id": 226, "seek": 147064, "start": 1477.1200000000001, "end": 1481.0400000000002, "text": " so this will print the whole stack trace and tell exactly where the exceptions were thrown", "tokens": [50688, 370, 341, 486, 4482, 264, 1379, 8630, 13508, 293, 980, 2293, 689, 264, 22847, 645, 11732, 50884], "temperature": 0.0, "avg_logprob": -0.12391278295233699, "compression_ratio": 1.8995983935742973, "no_speech_prob": 0.008444522507488728}, {"id": 227, "seek": 147064, "start": 1482.16, "end": 1486.3200000000002, "text": " and that's the great thing about using try with resources because you could you could catch the", "tokens": [50940, 293, 300, 311, 264, 869, 551, 466, 1228, 853, 365, 3593, 570, 291, 727, 291, 727, 3745, 264, 51148], "temperature": 0.0, "avg_logprob": -0.12391278295233699, "compression_ratio": 1.8995983935742973, "no_speech_prob": 0.008444522507488728}, {"id": 228, "seek": 147064, "start": 1486.3200000000002, "end": 1491.8400000000001, "text": " exception you could print the stack trace and as Joshua Block has shown in his example you could", "tokens": [51148, 11183, 291, 727, 4482, 264, 8630, 13508, 293, 382, 24005, 17500, 575, 4898, 294, 702, 1365, 291, 727, 51424], "temperature": 0.0, "avg_logprob": -0.12391278295233699, "compression_ratio": 1.8995983935742973, "no_speech_prob": 0.008444522507488728}, {"id": 229, "seek": 147064, "start": 1491.8400000000001, "end": 1499.0400000000002, "text": " even once the exception is caught maybe return some kind of default value and not end up breaking", "tokens": [51424, 754, 1564, 264, 11183, 307, 5415, 1310, 2736, 512, 733, 295, 7576, 2158, 293, 406, 917, 493, 7697, 51784], "temperature": 0.0, "avg_logprob": -0.12391278295233699, "compression_ratio": 1.8995983935742973, "no_speech_prob": 0.008444522507488728}, {"id": 230, "seek": 149904, "start": 1499.04, "end": 1505.92, "text": " the whole application and okay putting putting more formally he states you can put catch closes on", "tokens": [50364, 264, 1379, 3861, 293, 1392, 3372, 3372, 544, 25983, 415, 4368, 291, 393, 829, 3745, 24157, 322, 50708], "temperature": 0.0, "avg_logprob": -0.11430486426296005, "compression_ratio": 1.8148148148148149, "no_speech_prob": 0.01615012250840664}, {"id": 231, "seek": 149904, "start": 1505.92, "end": 1513.04, "text": " try with resources statements just as you can on regular try finally statements oh i probably made", "tokens": [50708, 853, 365, 3593, 12363, 445, 382, 291, 393, 322, 3890, 853, 2721, 12363, 1954, 741, 1391, 1027, 51064], "temperature": 0.0, "avg_logprob": -0.11430486426296005, "compression_ratio": 1.8148148148148149, "no_speech_prob": 0.01615012250840664}, {"id": 232, "seek": 149904, "start": 1513.04, "end": 1516.96, "text": " a mistake and said that you can't do that in try finally of course you can because we can have try", "tokens": [51064, 257, 6146, 293, 848, 300, 291, 393, 380, 360, 300, 294, 853, 2721, 295, 1164, 291, 393, 570, 321, 393, 362, 853, 51260], "temperature": 0.0, "avg_logprob": -0.11430486426296005, "compression_ratio": 1.8148148148148149, "no_speech_prob": 0.01615012250840664}, {"id": 233, "seek": 149904, "start": 1516.96, "end": 1523.52, "text": " catch and then a finally uh this allows you to handle exceptions without selling your code with", "tokens": [51260, 3745, 293, 550, 257, 2721, 2232, 341, 4045, 291, 281, 4813, 22847, 1553, 6511, 428, 3089, 365, 51588], "temperature": 0.0, "avg_logprob": -0.11430486426296005, "compression_ratio": 1.8148148148148149, "no_speech_prob": 0.01615012250840664}, {"id": 234, "seek": 152352, "start": 1523.52, "end": 1531.28, "text": " another layer of nesting and then to conclude he states the lesson is clear always use try with", "tokens": [50364, 1071, 4583, 295, 297, 8714, 293, 550, 281, 16886, 415, 4368, 264, 6898, 307, 1850, 1009, 764, 853, 365, 50752], "temperature": 0.0, "avg_logprob": -0.063565475184743, "compression_ratio": 1.8203883495145632, "no_speech_prob": 0.005219810176640749}, {"id": 235, "seek": 152352, "start": 1531.28, "end": 1536.56, "text": " resources in preference to try finally when working with resources that must be closed", "tokens": [50752, 3593, 294, 17502, 281, 853, 2721, 562, 1364, 365, 3593, 300, 1633, 312, 5395, 51016], "temperature": 0.0, "avg_logprob": -0.063565475184743, "compression_ratio": 1.8203883495145632, "no_speech_prob": 0.005219810176640749}, {"id": 236, "seek": 152352, "start": 1537.92, "end": 1543.68, "text": " the resulting code is shorter and clearer and the exceptions that it generates are more useful", "tokens": [51084, 264, 16505, 3089, 307, 11639, 293, 26131, 293, 264, 22847, 300, 309, 23815, 366, 544, 4420, 51372], "temperature": 0.0, "avg_logprob": -0.063565475184743, "compression_ratio": 1.8203883495145632, "no_speech_prob": 0.005219810176640749}, {"id": 237, "seek": 152352, "start": 1544.32, "end": 1550.72, "text": " that's it that is the end of chapter one and the end of that item uh and then in the next chapter", "tokens": [51404, 300, 311, 309, 300, 307, 264, 917, 295, 7187, 472, 293, 264, 917, 295, 300, 3174, 2232, 293, 550, 294, 264, 958, 7187, 51724], "temperature": 0.0, "avg_logprob": -0.063565475184743, "compression_ratio": 1.8203883495145632, "no_speech_prob": 0.005219810176640749}, {"id": 238, "seek": 155072, "start": 1550.72, "end": 1556.0, "text": " as i did state before we're going to move to chapter three with it which is methods common to all", "tokens": [50364, 382, 741, 630, 1785, 949, 321, 434, 516, 281, 1286, 281, 7187, 1045, 365, 309, 597, 307, 7150, 2689, 281, 439, 50628], "temperature": 0.0, "avg_logprob": -0.08001484821752175, "compression_ratio": 1.6936170212765957, "no_speech_prob": 0.004754405468702316}, {"id": 239, "seek": 155072, "start": 1556.0, "end": 1561.92, "text": " objects i apologize if i did a bit of a i'm not i always feel like i don't do a good job at explaining", "tokens": [50628, 6565, 741, 12328, 498, 741, 630, 257, 857, 295, 257, 741, 478, 406, 741, 1009, 841, 411, 741, 500, 380, 360, 257, 665, 1691, 412, 13468, 50924], "temperature": 0.0, "avg_logprob": -0.08001484821752175, "compression_ratio": 1.6936170212765957, "no_speech_prob": 0.004754405468702316}, {"id": 240, "seek": 155072, "start": 1561.92, "end": 1567.84, "text": " these concepts a lot of that is because i'm learning a lot too but this seemed like quite an easy item", "tokens": [50924, 613, 10392, 257, 688, 295, 300, 307, 570, 741, 478, 2539, 257, 688, 886, 457, 341, 6576, 411, 1596, 364, 1858, 3174, 51220], "temperature": 0.0, "avg_logprob": -0.08001484821752175, "compression_ratio": 1.6936170212765957, "no_speech_prob": 0.004754405468702316}, {"id": 241, "seek": 155072, "start": 1567.84, "end": 1577.6000000000001, "text": " that i struggled quite pathetically to explain um hopefully the comments i've left in the code", "tokens": [51220, 300, 741, 19023, 1596, 3100, 22652, 281, 2903, 1105, 4696, 264, 3053, 741, 600, 1411, 294, 264, 3089, 51708], "temperature": 0.0, "avg_logprob": -0.08001484821752175, "compression_ratio": 1.6936170212765957, "no_speech_prob": 0.004754405468702316}, {"id": 242, "seek": 157760, "start": 1578.08, "end": 1583.9199999999998, "text": " and even the resources i leave will help you supplement what i'm doing in this video in some", "tokens": [50388, 293, 754, 264, 3593, 741, 1856, 486, 854, 291, 15436, 437, 741, 478, 884, 294, 341, 960, 294, 512, 50680], "temperature": 0.0, "avg_logprob": -0.06705745573966734, "compression_ratio": 1.746606334841629, "no_speech_prob": 0.03112843818962574}, {"id": 243, "seek": 157760, "start": 1583.9199999999998, "end": 1591.1999999999998, "text": " way um and of course the best thing you can do is read the book but i don't know a lot of people", "tokens": [50680, 636, 1105, 293, 295, 1164, 264, 1151, 551, 291, 393, 360, 307, 1401, 264, 1446, 457, 741, 500, 380, 458, 257, 688, 295, 561, 51044], "temperature": 0.0, "avg_logprob": -0.06705745573966734, "compression_ratio": 1.746606334841629, "no_speech_prob": 0.03112843818962574}, {"id": 244, "seek": 157760, "start": 1591.1999999999998, "end": 1596.56, "text": " prefer watching videos than reading so hopefully this video can be useful because of that in any", "tokens": [51044, 4382, 1976, 2145, 813, 3760, 370, 4696, 341, 960, 393, 312, 4420, 570, 295, 300, 294, 604, 51312], "temperature": 0.0, "avg_logprob": -0.06705745573966734, "compression_ratio": 1.746606334841629, "no_speech_prob": 0.03112843818962574}, {"id": 245, "seek": 157760, "start": 1596.56, "end": 1603.84, "text": " case enough self-flagellation i hope you enjoy this video thank you for watching i shall see you in", "tokens": [51312, 1389, 1547, 2698, 12, 3423, 609, 285, 399, 741, 1454, 291, 2103, 341, 960, 1309, 291, 337, 1976, 741, 4393, 536, 291, 294, 51676], "temperature": 0.0, "avg_logprob": -0.06705745573966734, "compression_ratio": 1.746606334841629, "no_speech_prob": 0.03112843818962574}, {"id": 246, "seek": 160384, "start": 1603.84, "end": 1608.48, "text": " the next one cheers", "tokens": [50364, 264, 958, 472, 15301, 50596], "temperature": 0.0, "avg_logprob": -0.5604743616921561, "compression_ratio": 0.7037037037037037, "no_speech_prob": 0.041138652712106705}], "language": "en"}