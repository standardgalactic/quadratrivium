1
00:00:00,000 --> 00:00:07,520
Hey, everyone. Welcome to the third part of item 10 in effective Java, which states obey

2
00:00:07,520 --> 00:00:13,520
the general contract when overriding equals. So we have been covering this item across

3
00:00:13,520 --> 00:00:18,440
multiple videos, and this is just a flow on from part one and two. So therefore, needless

4
00:00:18,440 --> 00:00:24,280
to state, please do watch part one and two if any of this is to make any sense. In part

5
00:00:24,280 --> 00:00:32,080
two, what we discussed was we discussed the first three properties of what we would call

6
00:00:32,080 --> 00:00:42,040
an equivalence relation, and we went through them as being reflexivity, symmetry, and transitivity.

7
00:00:42,040 --> 00:00:47,800
And today we're going to discuss consistency and non-nullity. But before that, Merry Christmas

8
00:00:47,800 --> 00:00:55,200
and Happy New Year. I hope you have a wonderful New Year's and had a wonderful Christmas.

9
00:00:55,200 --> 00:01:00,720
When you do see this though, it's probably going to be a bit later in general mid-gen.

10
00:01:00,720 --> 00:01:03,440
The reason being, I'm going to take some time off. I'm going to go to Queensland, and that's

11
00:01:03,440 --> 00:01:08,040
going to be nice. Therefore, I won't get time to edit and upload this video. But without

12
00:01:08,040 --> 00:01:14,120
further ado, let's get started. So today we're going to discuss consistency and non-nullity.

13
00:01:14,120 --> 00:01:17,840
I do apologize if there's some background noise. There's a bit of construction taking

14
00:01:17,840 --> 00:01:22,440
place outside. I really can't do anything about it. But I'll try my best to edit the

15
00:01:22,440 --> 00:01:27,160
audio or like, what's what I'm looking for? Reduce the background noise when I'm editing

16
00:01:27,160 --> 00:01:31,240
the video in the audio. That was a weird way of putting it. What I meant to say was I'll

17
00:01:31,240 --> 00:01:38,120
fix up the audio. Let's start with consistency. So consistency is again a part of those equivalence

18
00:01:38,120 --> 00:01:43,360
relation properties. And it's important to understand that to understand what the general

19
00:01:43,360 --> 00:01:51,720
contract of the equals method is. Consistency states, for any non-null reference values,

20
00:01:51,720 --> 00:01:58,800
x and y, multiple invocations of x equals y. So x and y could be of any type, string

21
00:01:58,800 --> 00:02:05,680
integer, that doesn't matter. But multiple invocations of x equals y must consistently

22
00:02:05,680 --> 00:02:13,680
return true or equal or consistently return false provided no information used in equals

23
00:02:13,680 --> 00:02:19,800
comparison is modified. That being, if you compare two strings, let's say x and y are

24
00:02:19,800 --> 00:02:26,280
of string type, which is a superclass or a subclass of the object class, which has the

25
00:02:26,280 --> 00:02:31,720
equals contract. So let's say you're building a new type of string class and you're overriding

26
00:02:31,720 --> 00:02:38,520
the equals contract. And then if you have two strings a and b, pardon me, a and a, because

27
00:02:38,520 --> 00:02:44,760
a and b is different, if a equals a returns true, it should do so consistent consistently

28
00:02:44,760 --> 00:02:51,080
across the program. And if b equals b returns false, that should also follow across the

29
00:02:51,080 --> 00:02:56,760
program that cannot change. But the best way to understand this is of course, by an example.

30
00:02:56,760 --> 00:03:01,360
So let's take a look. And as I've been doing recently, a lot of these examples are just

31
00:03:01,360 --> 00:03:08,480
me taking code that ChagGPT creates and repurposing them to make things a bit more clearer. So

32
00:03:08,480 --> 00:03:15,000
example courtesy of OpenAI or ChagGPT. We have a class called person. So just to again

33
00:03:15,000 --> 00:03:22,920
reiterate what we're trying to demo here is what consistency means in pertaining to the

34
00:03:22,920 --> 00:03:28,640
general contract. So if a class called person with two private fields, we have a string

35
00:03:28,640 --> 00:03:36,000
name and a integer h. Keep in mind, the string is a non primitive class and whereas int is

36
00:03:36,000 --> 00:03:41,040
an primitive type, non primitive, non primitive type, I mean to say, and then we do have the

37
00:03:41,040 --> 00:03:47,280
constructor where we set the values on the creation of the object. And here we override

38
00:03:47,280 --> 00:03:55,480
the equals method that's inherited from the object superclass. So what are we doing here?

39
00:03:55,480 --> 00:04:01,720
It's quite straightforward, really, we're checking if it's if it's equal, this equality

40
00:04:01,720 --> 00:04:09,120
is a reference equality. And just to save computation time and and and and to make the

41
00:04:09,120 --> 00:04:14,720
code more efficient. If this is true, we straight away return true, because that means it's

42
00:04:14,720 --> 00:04:21,240
pointing to the same memory address. So there's no question that these two objects in that

43
00:04:21,240 --> 00:04:25,520
case will be equal, or the comparison will be equal. If it's an instance, if it's not

44
00:04:25,520 --> 00:04:30,200
an instance, then we return false because there's no use in doing the rest of the executing

45
00:04:30,200 --> 00:04:34,560
the rest of the code if it's not an instance of the type of person, if this object we pass

46
00:04:34,560 --> 00:04:40,480
on to this method. And then here in line number 28 is where we do the comparison, where we

47
00:04:40,480 --> 00:04:45,320
are casting the value and we do it in both ways to make sure that the comparison takes

48
00:04:45,320 --> 00:04:52,160
place. And then really, all of that, it doesn't pertain to this particular property per se.

49
00:04:52,160 --> 00:04:58,520
For consistency, what we expect is we have three objects, three person objects created

50
00:04:58,520 --> 00:05:04,720
here. So when we compare Alice and Alice, it should always consistently return true.

51
00:05:04,720 --> 00:05:11,740
Whereas if we do compare to P three, person three, which is Bob, it should consistently

52
00:05:11,740 --> 00:05:19,160
return false, which is exactly what you'd see here. So true, true, false, false and

53
00:05:19,160 --> 00:05:24,520
wherever, well, whoever client that uses this class, and however they create objects of

54
00:05:24,520 --> 00:05:30,000
this class, this pattern should be followed. And that's what consistency is. It's really

55
00:05:30,000 --> 00:05:34,880
quite straightforward, which is why just your block states, if two objects are equal,

56
00:05:34,880 --> 00:05:40,960
they must return equal for all time, unless one or both of them is modified. In other

57
00:05:40,960 --> 00:05:47,200
words, mutable objects can be equal to different objects at different times while immutable

58
00:05:47,200 --> 00:05:53,560
objects can't. When you write a class, think hard about where they should be immutable.

59
00:05:53,560 --> 00:05:59,000
So we'll discuss immutability in a bit. If you conclude that it should make sure that

60
00:05:59,000 --> 00:06:04,760
your equals method enforces restriction that equal objects remain equal and unequal objects

61
00:06:04,760 --> 00:06:11,560
remain unequal for all time across the lifespan of an immutable object that that bit I added.

62
00:06:11,560 --> 00:06:17,240
And many states, whether or not a class is immutable, do not write an equals method that

63
00:06:17,240 --> 00:06:23,240
depends on unreliable resources. So he's spoken about an example there. Before we get to the

64
00:06:23,240 --> 00:06:29,200
idea of relying on unreliable resources, let's quickly get some theory out of the way.

65
00:06:29,200 --> 00:06:33,080
So what is immutability? We've got we've got two definitions here. And after that, we'll

66
00:06:33,080 --> 00:06:41,160
look at some demos. Firstly, by Oracle docs. Okay, the best way to think about immutability

67
00:06:41,160 --> 00:06:45,440
is it's an object that maintains state. It's the simplest way to think about it as a kind

68
00:06:45,440 --> 00:06:51,280
of heuristic. But more formally, an object is considered immutable. If it's state cannot

69
00:06:51,320 --> 00:06:57,840
change after it is constructed, maximum reliance on immutable objects is widely accepted as

70
00:06:57,840 --> 00:07:02,960
a sound strategy for creating simple, reliable code. So that said, that's from the Oracle

71
00:07:02,960 --> 00:07:08,360
docs. And then we have another probably a better definition really, from Biden, an immutable

72
00:07:08,360 --> 00:07:15,120
object is an object whose internal state remains constant after it has been entirely created.

73
00:07:15,120 --> 00:07:20,440
This means and this is the important part. And this really pertains to even our item.

74
00:07:20,440 --> 00:07:24,720
So when it comes to immutability, this means that the public API of an immutable object

75
00:07:24,720 --> 00:07:31,360
guarantees us that it will behave in the same way during its whole lifetime. It's that latter

76
00:07:31,360 --> 00:07:35,640
bit that we can connect to what Joshua Block has stated here, where he says, again, I'm

77
00:07:35,640 --> 00:07:40,520
repeating this point, if you conclude that it should make sure that your equals method

78
00:07:40,520 --> 00:07:46,960
enforces the restriction that equals or equal objects remain equal and unequal objects remain

79
00:07:47,040 --> 00:07:50,720
unequal for all time. So when he means if you conclude that is if you conclude that

80
00:07:50,720 --> 00:07:55,600
an object or a class, you're going to design it to be immutable. So another example that

81
00:07:55,600 --> 00:08:00,480
I use strategy to be to create is this one here, we have this class called an immutable

82
00:08:00,480 --> 00:08:05,120
class, which I created. And first, you can see I've created it as being public final,

83
00:08:05,120 --> 00:08:11,160
which means this class cannot be subclassed. And then afterwards, all the fields are declared

84
00:08:11,160 --> 00:08:19,360
private too, which means any outside entity, let's say, cannot tamper with these fields.

85
00:08:19,360 --> 00:08:25,800
There's good encapsulation in this class. And in the constructed itself, it's only when

86
00:08:25,800 --> 00:08:30,000
the class has been constructed initially, the values are set afterwards, it can't be

87
00:08:30,000 --> 00:08:34,520
tampered with. And while we do have getters for this class, where we get certain fields,

88
00:08:34,520 --> 00:08:39,040
you can see that there aren't any setters. So you can't even set values in this class,

89
00:08:39,040 --> 00:08:43,480
again, maintaining immutability. And then just an additional thing, yeah, just to make

90
00:08:43,480 --> 00:08:47,320
sure that it's fully immutable, we've made a deep copy and I'll explain what that is.

91
00:08:47,320 --> 00:08:54,640
So this field here, field three, it depends on an error list. An error list is in fact

92
00:08:54,640 --> 00:09:01,200
mutable. So which is why you know, let me just read out what strategy PD said itself. If

93
00:09:01,200 --> 00:09:08,040
the class has any immutable fields, make a deep copy of those fields in the constructor

94
00:09:08,040 --> 00:09:13,840
and assign the copied values to private final fields. This will ensure that the internal

95
00:09:13,840 --> 00:09:18,800
state of the immutable class cannot be modified. So by making a deep copy, really what we're

96
00:09:18,800 --> 00:09:24,360
doing is because this class or this object, when it's in runtime, depends on another resource

97
00:09:24,360 --> 00:09:30,200
that could be immutable, we make them independent, we decouple them so that any change to one

98
00:09:30,200 --> 00:09:35,240
of the other. So the field three field field three object will not affect the internal

99
00:09:35,240 --> 00:09:40,200
state of our broader object, which is the class at hand, the immutable class. So again,

100
00:09:40,200 --> 00:09:46,800
a bit of a formal definition of what a deep copy is. Again, a deep copy, this isn't very

101
00:09:46,800 --> 00:09:52,520
much related to what we're discussing in this item. However, of course, because we are discussing

102
00:09:52,520 --> 00:09:56,880
immutability, it's important to understand what a deep copy is. But formally in Java,

103
00:09:56,880 --> 00:10:02,600
a deep copy is a copy of an object that creates a new object with a new memory address and

104
00:10:02,600 --> 00:10:07,880
recursively copies the contents of the original object to the new object. This means that

105
00:10:07,880 --> 00:10:12,600
the new object is completely independent of the original object. And any changes made

106
00:10:12,600 --> 00:10:19,320
to the new object do not affect the original object. So you can see here, when we are setting

107
00:10:19,320 --> 00:10:25,920
the value for get field, we're returning a new object of type area list. And we are

108
00:10:25,920 --> 00:10:31,320
just passing the, sorry, this isn't the getter, by the way, we are passing the field three

109
00:10:31,320 --> 00:10:37,000
value into the constructor of the area list class. So that creates a new object. And it's

110
00:10:37,000 --> 00:10:44,840
an exact copy of the get field or the field three. But any change now in the new object

111
00:10:44,840 --> 00:10:52,200
that we give to the client will not affect the state, internal state of our broader immutable

112
00:10:52,200 --> 00:10:59,120
class object. That is what a deep copy does. And that's how a deep copy assists with immutability.

113
00:10:59,120 --> 00:11:02,840
And then from the JDK itself, I should have shown this example before the previous one,

114
00:11:02,840 --> 00:11:10,480
but you still get the point. If you run this code, you'll see, despite in this string,

115
00:11:10,480 --> 00:11:16,880
so string class is immutable, sorry, is immutable, pardon me. And in the string class, we're

116
00:11:16,880 --> 00:11:23,520
setting it initially to be by or done. And we're doing this replacement and then returning

117
00:11:23,520 --> 00:11:29,040
that value to this new name object. But what you'd see here is, even though we're doing

118
00:11:29,040 --> 00:11:35,760
the replacement here, that doesn't affect the internal state of the name object. So in line

119
00:11:35,760 --> 00:11:40,320
number 12, when we do print it, it's still going to print by or done, whereas a new name

120
00:11:40,320 --> 00:11:45,200
now is going to have the replacement is going to be its own object that you created newly.

121
00:11:45,200 --> 00:11:49,080
And then getting back to the idea of consistency and immutability, Joshua Block has given an

122
00:11:49,080 --> 00:11:55,240
example of mistakes made in the designing of the Java language itself, historical mistakes.

123
00:11:55,240 --> 00:11:58,640
So for instance, I didn't I didn't know this, I only figured this out. Oh, I only learned

124
00:11:58,640 --> 00:12:05,960
this by the book that the Java dot net dot URL in this library, the sorry, the Java dot

125
00:12:05,960 --> 00:12:13,760
net library, the URL class was relying on unreliable was relying, pardon me, was relying

126
00:12:13,760 --> 00:12:20,720
on hosts associated with IP addresses to affect the state of the object that it creates.

127
00:12:20,720 --> 00:12:25,760
But however, of course, we know that sometimes host names that are connected to IPs, they

128
00:12:25,760 --> 00:12:30,600
can change IP addresses can change all the time. And that itself. So the fact that that

129
00:12:30,600 --> 00:12:38,360
class relied on that unreliable resource was a mistake, which is why Joshua Block states

130
00:12:38,360 --> 00:12:45,440
the behavior of URLs equals method. So pardon me, the equals method was relying on that

131
00:12:45,440 --> 00:12:52,120
unreliable resource, which was the IP address, and the host name. And therefore, he states

132
00:12:52,120 --> 00:12:57,400
the behavior of URLs equals method was a big mistake and should not be emulated. Unfortunately,

133
00:12:57,400 --> 00:13:02,640
it cannot be changed due to compatibility requirements to avoid this sort of problem.

134
00:13:02,640 --> 00:13:09,360
Equals methods should perform only deterministic computations on memory resident objects.

135
00:13:09,360 --> 00:13:14,440
So as Joshua Block does highlight throughout this book, the language designers itself have

136
00:13:14,440 --> 00:13:19,560
made some of these mistakes. So when it comes to this mistake of consistency, or the mistake

137
00:13:19,560 --> 00:13:27,160
of not abiding by the property of consistency, even the people who are experts at Java have

138
00:13:27,160 --> 00:13:31,720
still made this mistake. And this is another example of that. So in that, let's get to

139
00:13:31,720 --> 00:13:39,000
the next property, the final one, last but not least, as they say, which is non knowledge.

140
00:13:39,000 --> 00:13:44,440
And non knowledge states, it seems quite straightforward. But once we dive into it,

141
00:13:44,440 --> 00:13:49,320
you'll see how there are there can be times when certain mistakes can happen. So non knowledge

142
00:13:49,320 --> 00:13:57,080
states for any non null reference values x, x equals null mass return false, because obviously

143
00:13:57,080 --> 00:14:01,040
you can't compare an object to a null value. And practically, what that really means is

144
00:14:01,040 --> 00:14:06,320
a null point exception can't be thrown in the equals method when the comparison takes place.

145
00:14:06,320 --> 00:14:14,480
So as Joshua Block states, it says that all objects must be unequal to null, of course.

146
00:14:14,480 --> 00:14:20,400
While it is hard to imagine accidentally returning true in response to the invocation of object

147
00:14:20,400 --> 00:14:27,880
dot equals null, it isn't hard to imagine accidentally throwing a null point exception,

148
00:14:27,880 --> 00:14:33,720
which violates a general contract or the he says the general contract prohibits this.

149
00:14:33,720 --> 00:14:38,360
So then he states that some classes have attempted or tried to do an explicit knowledge

150
00:14:38,360 --> 00:14:43,640
check to prevent this null point exception from being thrown. So here's an example of

151
00:14:43,640 --> 00:14:49,680
what that would look like. I'll just actually leave that there. Ignore that ever for now.

152
00:14:49,680 --> 00:14:55,080
If we just try and check in the equals method when the overriding with the object pass is

153
00:14:55,080 --> 00:15:01,520
equal to null, and here we're doing a memory reference comparison. And if it's not returned

154
00:15:01,520 --> 00:15:06,560
full straight away, but this isn't required, and we shall see why. So the rest of that

155
00:15:06,560 --> 00:15:10,800
part really is about this bit of code. So in this class, my type, what we're doing is

156
00:15:10,800 --> 00:15:16,640
we're checking if whatever object we pass onto the equals method, if it's a instance

157
00:15:16,640 --> 00:15:24,600
of my type, and if it isn't, we straight away return a false. And only if it is off type,

158
00:15:24,600 --> 00:15:29,880
my type, do we do the casting, as you can see here. And this check immediately prevents

159
00:15:29,880 --> 00:15:34,440
any class cast exceptions from taking place too, because even if you pass a null here,

160
00:15:34,440 --> 00:15:39,440
it's going to return true, which you shall see here. So when the client uses this new

161
00:15:39,440 --> 00:15:47,480
my type method and passes a null, it's going to return false as you can see. And the reason

162
00:15:47,480 --> 00:15:53,120
it does that is because obviously null is enough type, my type, and then the equals method

163
00:15:53,120 --> 00:15:57,320
recognizes that it immediately returns false. It's as straightforward as that really. And

164
00:15:57,320 --> 00:16:02,320
on the casting just to block states to test this argument for quality, the equals method

165
00:16:02,320 --> 00:16:08,920
must first cast its arguments on appropriate type. So it's accesses can be invoked, or

166
00:16:08,920 --> 00:16:13,320
it's fields accessed, which is what we're doing here in the casting. And then we're returning

167
00:16:13,320 --> 00:16:21,720
true if what we do cast by that object is equal to this, it has logical equality to

168
00:16:21,720 --> 00:16:28,760
this object in this class. And of course, this is just on 9 and 11, a very plain comparison,

169
00:16:28,760 --> 00:16:32,320
but the rest of the equals method, a lot more could take place. And we could do a lot more

170
00:16:32,320 --> 00:16:36,680
work to ensure there's logical equality. And that's it. That's what non knowledge is.

171
00:16:36,680 --> 00:16:42,560
There's not a lot to it except to put in that extra check. And this check, regardless of

172
00:16:42,560 --> 00:16:47,120
the context of whether we're passing a null to this method or not, would still be done.

173
00:16:47,120 --> 00:16:52,440
So it kind of solves our problem. But it's important to understand the property of non

174
00:16:52,440 --> 00:16:59,360
knowledge in principle when designing an equals method for our classes. That's it. And we're

175
00:16:59,360 --> 00:17:05,680
not going to move on to the rest of the item because part four is the final part almost

176
00:17:05,680 --> 00:17:11,640
damaged my book there. And in part four, really what we discuss is putting it all together

177
00:17:11,640 --> 00:17:15,720
after we've discussed all these properties of after we've discussed what equivalence

178
00:17:15,720 --> 00:17:20,000
relation is and everything we've discussed in this item so far, putting it all together

179
00:17:20,000 --> 00:17:26,560
and how to really design a good quality equals method that respects and abides by the general

180
00:17:26,560 --> 00:17:31,040
contract and these properties that we've been delineating and trying to understand saying

181
00:17:31,040 --> 00:17:35,440
that. Thank you for watching. I hope you found value in this video. I shall continue on with

182
00:17:35,440 --> 00:17:41,680
part four when I'm back from Queensland after my short break. And part four, as I said is

183
00:17:41,680 --> 00:17:45,720
putting it all together. It's the it's the it's the grand finale where we put this all

184
00:17:45,720 --> 00:17:51,160
together and design a superlative high quality equals method. So hopefully I see you in the

185
00:17:51,160 --> 00:17:55,160
next part. That's it. I'll see you in the next one. Cheers.

