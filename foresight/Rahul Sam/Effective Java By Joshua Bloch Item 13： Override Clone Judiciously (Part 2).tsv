start	end	text
0	7440	Hey everyone, welcome to part two of item 13 in Joshua Block's effective Java, which states
7440	15360	override clone judiciously. And if it's not obvious already, since item 13 is a pretty big item,
15360	20720	I've broken it down into two parts. And if you've missed part one, I'll leave a link down
20720	25440	below in the description for you to go check it out. Saying all that, let's get started
25440	32880	without further ado. So as we continue on from part one, item 13, when it comes to cloning,
33440	39520	we have to keep in mind that recursively calling the clone method may not be sufficient at all
39520	46800	times. So in part one, we kind of covered how when the clone takes place between a class,
46800	54640	when we create a new object or a clone of that class, we should recursively copy all the fields
54640	64080	to properly clone the class when using a cloneable, although that might not always suffice. So
65360	73920	firstly, let's take a look at a demo using a hash table, and indeed show a broken clone,
73920	78960	which will give us a shared medieval state, especially a hash table is a good example,
78960	85200	because at least a hash table we're going to use uses an array and an array that can happen
85840	91760	quite often. So let's take a look at this class. Obviously, let me zoom in a bit.
94080	100560	Hash table implements cloneable. This is a hash table we are designing. I'm not saying this is how
101760	106640	a good hash table to start should look like. It's just a rough design we have just for
107280	112080	the purpose of the demo. And this is where the carpet is. I wouldn't call it the carpet,
112080	118960	but here's where the problem lies. It's this array, the buckets array that creates a shared
120000	124160	a medieval state. So I'm going to skip over all the other implementations of a hash table,
124160	128320	things like the constructor, or well, actually, I should probably mention this, there is a
128320	135200	inner class called entry, the buckets array is of type entry, that's kind of important for the
135200	139680	purpose of the hash table. But still, it's kind of out of scope to one for a demo here.
140480	144560	But as I said, I'm going to skip over the puts, the gets, all of that, that's a part of the
144560	152000	hash table mechanism. Although if you look at the clone method, now this is a broken clone method,
152000	156880	because it results in a shared medieval state. And here's where the issue lies.
157200	165200	When we do the clone, and we simply clone the buck across, so the buckets array,
165200	170720	the elements in the buckets array are not copied, rather, they're shared between two
170720	177840	hash table objects. And that can obviously create corrupt state, ergo, this clone method being
177840	185200	broken. As Joshua Block states, though the clone has its own bucket array, this array references
185200	192720	the same length lists as the original, which can easily cause non-deterministic behavior
193360	199280	in both the clone and the original. Now this issue can be resolved using the concept of a
199280	205840	deep copy, which we've covered in previous items, but essentially what a deep copy does is, well,
205840	212480	as the name suggests, recursively goes through the array and copies each element into the new
212480	217280	object. It does a deep copy. So I didn't mention before, when I was showing the broken clone method,
217840	224560	that we have this inner class called entry. So in this inner class, we've defined a new method
224560	230400	called a deep copy to do this deep copy, which, as I said, does the recursive copying. And then
230400	236960	what can be done is, when the recursive copying is done using the deep copy method, the client,
237440	246560	or other client, the outer class, can use this deep copy method in its clone method. So if you
246560	252480	can see here, it does the cloning. And then in line number 90, it's doing a deep copy of the
252480	260080	bucket's array. This ensures that all the elements are copied to ergo, not not just resulting in,
260080	265360	I keep saying ergo, because I've been reading a lot of philosophy. Ergo is a Latin term, I should
265360	272160	probably say, therefore, therefore not resulting in a non deterministic state or a shared mutable
272160	276800	state. A deep copy will solve that problem. Although, although we've got a small issue here,
277440	284400	you can probably see we're doing a recursive copy here. And I'm going to admit, I find it a bit
284400	292240	hard to get this concept that Joshua Bloch has outlined in the book. But he states, when it comes
292240	299920	to recursive copying, while this technique is cute and works fine, if the buckets aren't too long,
299920	306560	so he's referring to the buckets array, it is not a good way to clone a linkless because it consumes
306560	313520	one stack frame for each element in the list. If the list is long, this could easily cause
313520	320000	a stack overflow error. So the problem is that it every time the deep copy takes place, it
320720	325520	for per per element, it creates a new stack frame. And that can obviously not a memory
325520	331760	leak, but it can cause a stack overflow error, because this happens runtime. Now, I found this
331760	336800	good article on a digital ocean, which kind of explains the difference between the heap and the
336800	343840	stack. We had a we had there's one item I forget which one way we covered quite deeply Java, Java,
344560	350960	memory management, garage collection, allocation, all of that. But but I had to put this in
350960	355600	charge of PD to get a bit more, let's say, elaborated definition. And here's what
356480	361760	charge of PD states, pertaining to this point that Joshua Bloch makes to choose. Oh, I didn't
361760	368320	mention that he says, because recursion can cause this stack overflow error, it's better choosing
368320	375680	iteration over recursion. And here's why. And I'm quoting charge of PD verbatim here. Using
375680	381200	iteration instead of recursion helps prevent a stack overflow error by avoiding excessive
381200	387040	stack frame allocation. When a method is invoked recursively, each recursive call creates a new
387040	392160	stack frame, as he stated, which consumes additional memory on a call on the call stack.
392720	397520	If the recursion goes too deep, or if the data structure being processed is large,
397520	403120	it can result in the stack running out of memory, causing a stack overflow error. So we need a
403920	410560	mechanism or an algorithm that doesn't create a new stack frame every time an element is created
411280	417520	in the data structure. And that's where iteration can be much more handy. So let's take a look at
417520	423920	how the iteration method works. Let's comment out the deep copy. And take a look at the
424800	431360	deep copy that uses iteration. So in iteration, because we're not calling the deep copy method
431360	438960	within the function, it's not happening recursively, it doesn't require a new frame on the call stack
438960	446720	every single time the loop runs. And therefore, for larger data structures or large array,
447600	454560	using iteration probably is a bad idea. Overusing recursion, even though, obviously,
454560	460320	as you can see here, the recursive method is much simpler. And it kind of makes a lot more
460320	465280	sense compared to this where you got p.next and your parsing generics and whatnot can be a bit
465280	471920	more complicated. So depending on the use case, you can use whatever method or we can implement
471920	478880	the method however may you think it'll suffice or it'll be apt. Okay, saying all that, let's move
478880	485920	to the wrong side. Saying all that, let's move to the next point, which is how in cloning, how we
485920	494320	can utilize the super dot clone method in your class. So you can use the clone method in your
494320	502000	superclass. Firstly, here's what Joshua book states, a final approach to cloning complex
502000	508400	mutable objects is to clone this to call super dot clone, set all the fields in the resulting
508400	514800	object to their initial state, and then call high level methods to regenerate the state of the
514800	519360	original object. So at first glance, this looks quite straightforward, because all we're doing here
519360	525680	is we're creating a new instance of hash table clone table object, and we're setting it to its
525680	532000	as special book states initial state, and then simply invoking the clone method of the super
532000	540480	class, which in this case would be the object class, and repopulating this new object with whatever
540480	548000	the super dot clone method or superclass, superclasses clone method returns. But but here we have an
548000	556240	issue. And the issue is that this type of cloning, because we're doing a deep copy, especially with
556240	564960	the buckets array, it doesn't abide by the the clonable architecture contract, because we're
564960	571600	implementing the clonable interface here, which is a contract that the class is supposed to follow.
572480	579040	But by doing it this way, by doing the deep copy, it is taking place without a field by field copy
579040	584720	of the object. And that is anatomical to the clonable architecture. I just realized as I was
584720	591040	rereading this, sorry, I wrote this script for this a while back, that I made a mistake here.
591040	597760	In fact, this is correct. The problem would have been if we did a shallow copy, similar to what I've
598560	607280	coded here, without doing a deep copy, which which is a part of the field by field copy,
607280	612480	that's a part of the architecture. I mean, this is correct, because even though we're invoking
612480	618320	super dot clone, and copying the state into the new object, and then create creating the buckets
618320	624880	array, we're still doing a field by field copy. So I should probably really rewrite this into
624880	632080	saying deep copy taking place with a field by field copy of the object. Now this is correct,
632080	638400	as it should be, because because a clone method should act very much like a constructor in a class.
638400	643440	And that's the point Joshua Block makes the I'm so sorry for the misunderstanding that even I got
643440	649040	confused, but I realized I was written that in the wrong way. And this is correct, we need a deep
649040	655520	copy to take place in the clone method. And it can happen, even when invoking the super dot clone
655520	662160	method just to clarify. It's a bad mistake. Okay, so here's what Joshua Block states,
662160	667200	pertaining to the clone method and how it should behave. Like a constructor, a clone method must
667200	676480	never invoke an overriding method on the clone under construction. If okay, so that is this can
676480	682640	be a problem because of that. Because in the clone method, we are invoking another overriding
682640	687200	method. Now this can be an issue. So the issue isn't with the deep copy, the issue really is
687200	696960	with line number 65, just to clarify. If clone invokes a method that is overridden in a subclass,
696960	704000	this method will execute before the subclass has had a chance to fix its state in the clone,
704000	709440	quite possibly leading to corruption in the clone and the original. So what does that mean? If clone
709440	714960	invokes a method that is overridden in a subclass, this method will execute before the subclass has
714960	720800	had a chance to fix its state in the clone. An example of that could potentially be this. We
720800	728240	have this put method, which is extended from hash table. But because it's public, it can be overridden.
728240	734640	Now let's say in the subclass, an extended hash table, we define another clone method,
734640	741360	which should be allowed to be overridden. But we've overridden the put method too. And what that
741360	748160	will do is it'll increase the size by an additional one. For instance, let's say we're
748960	752480	in the super dark put, we're doing the key and value. And then in the array,
753040	757440	where we're changing it, I haven't implemented that bit, but let's say the put changes it where
758240	765600	the array will also increase the size. This put will also increase the size by one. And then what
765600	771840	will happen is in the clone method, it'll create an inconsistent state because this put, which
771840	778000	should have been either private or final, has been invoked again in the subclass's clone method,
778720	784240	which you will see here in line number 22. So roughly, this is what the block means. Obviously,
784240	789680	I haven't implemented the whole code, but the idea being in the clone method, we shouldn't be
789680	798800	invoking methods of the superclass that can create corrupt state or non-deterministic behavior between
798800	803440	objects. Okay, now let's discuss the objects clone method. And sorry about the background noise,
803440	808160	it just started raining. When it comes to the objects clone method, so when I mean object,
808160	814640	I mean the superclass and Java of all other classes, the Java object class, Drusher book
814640	822080	states this, objects clone method is declared to throw clone not support exception, but overriding
822080	829280	methods need not public clone methods should admit the throws close as methods that don't throw
829280	837840	check exceptions are easy to use. So here's how the objects clone method is defined, which throws a
837840	843040	clone not support exception. And then if you have this class here, which overrides this code
843040	850480	method from the object class, as for the contract of the colonial architecture, it's a contract that
851200	857280	the JVM makes, or it's a contract with the JVM, that the clone will take place properly. Therefore,
857280	864240	this bit isn't required. So we can get rid of it really. But it's not that simple. Drusher book states
864240	870160	that there are two ways to do this when designing a class of inheritance. Firstly, on what you should
870160	876720	not do. If you have a superclass that is designed for being inherited, this shouldn't happen. We
876720	882160	shouldn't implement cloneable, because then it'll create corrupt state. As you can see, this resource
882160	889520	area here would be shared between these two objects creating a medieval not available state, sorry,
890160	895360	corrupt state. But given that though, we can still have a clone method in a class designed for
895360	900800	inheritance without implementing cloneable. There are two choices that just show gives us the first
900800	905920	one is implement a properly functioning clone method mimicking that in the object class. So not
905920	911440	a clone method like this, this is wrong. We should mimic what's being done in the object class,
911440	916080	despite not implementing the cloneable architecture, or prevent the subclasses from
916080	923360	implementing a clone method completely by making the clone method protected final. And then that
923360	932080	can't be any overriding taking place. Okay, a small caveat. The caveat is what to do when writing,
932080	940000	not a caveat really, but more of an axillary point, what to do when writing a class for threat safety
940000	945440	for an object to work with multiple threads. So firstly, the objects clone method is not
945440	950000	synchronized. Therefore, it is not thread safe. So we have to keep that in mind when writing a
950000	956320	class. And let's take a look at a demo as to how we can potentially write a thread safe class.
956320	961120	And again, this code isn't complete, they can certainly improve it's simply a blueprint on
961120	968720	writing a thread safe class. Really like, that was a mistake, like writing other threads,
968720	976240	thread safe, thread safe classes, what we can do is define the fields as being synchronized. So
976240	981440	now it's atomic. And then in that class, so have a class called safe kind of which implements cloneable,
982000	988640	this class here is not thread safe. And we can make it thread safe by giving it the
988640	994560	synchronized keyword, which will make this clone is synchronized. And in that in that way,
995200	1000640	two objects won't be able to invoke this method at the same time. Sorry, not two objects, two
1000640	1006560	threads will not be able to invoke this method at the same time. So to recap, what we've discussed
1006560	1015040	in both part one and part two of item 13, Joshua book states, to recap, as I said, all classes
1015040	1021520	that implement cloneable should override clone with a public method whose return type is the
1021600	1029120	class itself. This method should first call super dark clone, as we went through a bit before,
1029120	1036240	then fix any fields that need fixing. Typically, this means copying any mutable objects that
1036240	1041840	compromise internal deep structure of the object and replacing the clone's references
1042480	1047600	to these objects with references to their copies. So that's kind of what we discussed before in
1047600	1053440	using either recursion or iteration by doing a deep copy. And then just another point he makes,
1053440	1058320	if the class contains only primitive fields or references to mutable objects,
1059440	1067440	then it is likely the case that no fields need to be fixed. So then he asks, is all this complexity
1067440	1073280	really necessary when designing a clone method, or when overriding the clone method of the object
1073280	1077920	class? When he means all this complexity, we're talking about what we discussed in part one and
1077920	1085920	now in part two. So a better approach is using a technique called a copy constructor or a copy
1085920	1091120	factory method. But before we get to that, before we look at the demos, I'll read out what he said.
1092400	1099200	In regards to the complexity, he said, really, it's not needed. If you extend a class that already
1099200	1103600	implements cloneable, you have a little choice but to implement a well-behaved clone method.
1103600	1109360	That's the advantage of using an interface like cloneable, which kind of forces us to
1109360	1116560	abide by the contract. Otherwise, if we don't use cloneable, you're usually better off providing
1116560	1121600	an alternative means of object copying. Here's where we get to what I said before. A better
1121600	1128800	approach to object copying is to provide a copy constructor or copy factory. A copy constructor
1128880	1134480	is simply a constructor that takes a single argument whose type is the class containing the
1134480	1139120	constructor, for example. Now, this was really interesting. I don't think I've actually worked
1139120	1143360	with a copy constructor before. So I found this part quite interesting, despite it coming towards the
1143360	1148960	end of the item to kind of finalize and conclude on what he was trying to outline in this item.
1149920	1156240	So firstly, again, this is what the implementation or the signature of a copy constructor would look
1156240	1162960	like and then the copy factory. Similar kind of signature, but obviously the way it's implemented
1162960	1169200	is different. So the right, in fact, many advantages to using a copy constructor over a clone method.
1169920	1177120	Firstly, something that I think I touched on in part one, a clone method can be extra linguistic.
1177120	1183600	And what I mean by that is that generally a good rule of thumb in Java or OOP programming is
1184480	1189200	only a constructor should create a new method. Sorry, one of my sign. Only a constructor should
1189200	1193760	create a new object. But obviously the clone method creates a new object, making it extra
1193760	1200720	linguistic. And since it is doing it in a kind of a unforeseeable adherence to
1201840	1207520	purely documented conventions, it's doing it in a way that's not conventional to how an object
1207520	1212800	would be created. It can create issues. And the documentation isn't that good. At least that's
1212800	1218160	where Joshua Block states. Now with the copy construct, the constructor, it is in fact creating
1218160	1223200	a new object. You create a new object. So when the copy construct is being implemented, you
1223200	1230160	probably see here, we pass a new object into the copy constructor, and it's that that that
1230160	1235920	does the copying to the new object from the current object. So the construct or the constructor itself
1235920	1242080	in this case, doesn't do any work of creating new objects and whatnot. All it's doing is
1242080	1246320	taking in the past object and then doing the copy. And the other advantage of using a copy
1246320	1252800	constructor would be that when it comes to final classes or immutable classes, if you have this
1252800	1257280	immutable point class, so the first class I was showing you was point, but now we have another
1257280	1264640	variant of it that is immutable. We've used the final keyword. When using the clone method,
1264640	1270960	there can be issues when copying across final fields. Now this again wouldn't happen with the
1270960	1276000	copy constructor because again, we're creating a new object outside the constructor and passing it
1276000	1281840	into the method and then doing the copy. And another advantage is that a copy constructor
1281840	1288640	doesn't require casting because what we're doing is, as I said a couple of times already,
1289600	1295760	the new object we create is already of type whatever the class is, and that's what we pass
1295840	1300320	into the copy constructor. So if you use a clone method, for instance, you need to
1300320	1305200	do this kind of casting, which can be a bit of a pain. Oh, and as I said before, the copy
1305200	1309840	constructor doesn't have the issue with throwing unnecessary checked exceptions and whatnot,
1309840	1316640	which is again a part of the clone architecture. So this is an example. I was showing you the
1317280	1320720	copy constructor and I'm going through this code quite, quite quickly today. I'm sorry about that.
1320720	1326480	I'm in a bit of a hurry. But obviously, all of it will be available on GitHub. You could go take
1326480	1332800	a look at it and go through it carefully. Here we have an example of how the copy factory would
1332800	1337840	work. It's quite similar to, it's just a static factory method. So it's similar to the copy
1337840	1345280	constructor. It still does the copying and returns a new point by doing the copy fields in the new
1345280	1351280	object. Another advantage is that a copy constructor factory allows you to take in
1351920	1362320	an argument as a type, as type argument, when implementing the method or when using the method
1362320	1366560	as a client, you can pass in the type and that will return you an object of that type. So an
1366560	1371200	example that just should look as highlighted is between hash and entry sets of assume you have
1371680	1378560	hash set defined like this of type string and you have an hash set. And then if you want to, so
1378560	1385040	hash, hash set S. And if you want to copy that across to, let's say a tree set, simply all we
1385040	1394080	got to do is to go new instance of tree set and then pass in that object with the type tree set
1394080	1400240	and let it do the conversion automatically. And this is allowed as to how the copy constructors
1400800	1408000	implemented in hash set. So this won't be possible with the clone object. Oh, sorry,
1408000	1413760	with the clone method. I'm gonna get a bit tired clearly. Alrighty, that's it. That was part two.
1413760	1421520	I hope all of that makes sense. If I wasn't clear on certain parts, I apologize. I wrote the
1421520	1426240	script a while back and I got really busy so I couldn't record the video. But all the codes
1426240	1433040	available on GitHub and I've kind of commented what I've done so that it kind of makes sense,
1433040	1438320	despite some of it not being complete code rather being blueprints. But to conclude, Joshua Block
1438320	1445920	states, given all the problems associated with cloneable new interfaces should not extend it
1445920	1454080	and new extendable classes should not implement it. While it's less harmful for final classes
1454080	1459680	to implement cloneable, this should be viewed as a performance optimization reserved for the rare
1459680	1466080	cases where it is justified. As a rule, copy functionality is best provided by constructors
1466080	1471440	or factories, which we saw with the copy constructing the copy factory and all the advantages they have
1471440	1477520	for us. A notable exception to this rule is areas which are best copied with the clone method.
1477520	1483040	Alrighty, that was item 13 and I hope you found that useful and I'll see you in the next one,
1483040	1488720	item 14, which is consider implementing comparable. Cheers.
