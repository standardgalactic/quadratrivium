start	end	text
0	7520	Hey, everyone. Welcome to the third part of item 10 in effective Java, which states obey
7520	13520	the general contract when overriding equals. So we have been covering this item across
13520	18440	multiple videos, and this is just a flow on from part one and two. So therefore, needless
18440	24280	to state, please do watch part one and two if any of this is to make any sense. In part
24280	32080	two, what we discussed was we discussed the first three properties of what we would call
32080	42040	an equivalence relation, and we went through them as being reflexivity, symmetry, and transitivity.
42040	47800	And today we're going to discuss consistency and non-nullity. But before that, Merry Christmas
47800	55200	and Happy New Year. I hope you have a wonderful New Year's and had a wonderful Christmas.
55200	60720	When you do see this though, it's probably going to be a bit later in general mid-gen.
60720	63440	The reason being, I'm going to take some time off. I'm going to go to Queensland, and that's
63440	68040	going to be nice. Therefore, I won't get time to edit and upload this video. But without
68040	74120	further ado, let's get started. So today we're going to discuss consistency and non-nullity.
74120	77840	I do apologize if there's some background noise. There's a bit of construction taking
77840	82440	place outside. I really can't do anything about it. But I'll try my best to edit the
82440	87160	audio or like, what's what I'm looking for? Reduce the background noise when I'm editing
87160	91240	the video in the audio. That was a weird way of putting it. What I meant to say was I'll
91240	98120	fix up the audio. Let's start with consistency. So consistency is again a part of those equivalence
98120	103360	relation properties. And it's important to understand that to understand what the general
103360	111720	contract of the equals method is. Consistency states, for any non-null reference values,
111720	118800	x and y, multiple invocations of x equals y. So x and y could be of any type, string
118800	125680	integer, that doesn't matter. But multiple invocations of x equals y must consistently
125680	133680	return true or equal or consistently return false provided no information used in equals
133680	139800	comparison is modified. That being, if you compare two strings, let's say x and y are
139800	146280	of string type, which is a superclass or a subclass of the object class, which has the
146280	151720	equals contract. So let's say you're building a new type of string class and you're overriding
151720	158520	the equals contract. And then if you have two strings a and b, pardon me, a and a, because
158520	164760	a and b is different, if a equals a returns true, it should do so consistent consistently
164760	171080	across the program. And if b equals b returns false, that should also follow across the
171080	176760	program that cannot change. But the best way to understand this is of course, by an example.
176760	181360	So let's take a look. And as I've been doing recently, a lot of these examples are just
181360	188480	me taking code that ChagGPT creates and repurposing them to make things a bit more clearer. So
188480	195000	example courtesy of OpenAI or ChagGPT. We have a class called person. So just to again
195000	202920	reiterate what we're trying to demo here is what consistency means in pertaining to the
202920	208640	general contract. So if a class called person with two private fields, we have a string
208640	216000	name and a integer h. Keep in mind, the string is a non primitive class and whereas int is
216000	221040	an primitive type, non primitive, non primitive type, I mean to say, and then we do have the
221040	227280	constructor where we set the values on the creation of the object. And here we override
227280	235480	the equals method that's inherited from the object superclass. So what are we doing here?
235480	241720	It's quite straightforward, really, we're checking if it's if it's equal, this equality
241720	249120	is a reference equality. And just to save computation time and and and and to make the
249120	254720	code more efficient. If this is true, we straight away return true, because that means it's
254720	261240	pointing to the same memory address. So there's no question that these two objects in that
261240	265520	case will be equal, or the comparison will be equal. If it's an instance, if it's not
265520	270200	an instance, then we return false because there's no use in doing the rest of the executing
270200	274560	the rest of the code if it's not an instance of the type of person, if this object we pass
274560	280480	on to this method. And then here in line number 28 is where we do the comparison, where we
280480	285320	are casting the value and we do it in both ways to make sure that the comparison takes
285320	292160	place. And then really, all of that, it doesn't pertain to this particular property per se.
292160	298520	For consistency, what we expect is we have three objects, three person objects created
298520	304720	here. So when we compare Alice and Alice, it should always consistently return true.
304720	311740	Whereas if we do compare to P three, person three, which is Bob, it should consistently
311740	319160	return false, which is exactly what you'd see here. So true, true, false, false and
319160	324520	wherever, well, whoever client that uses this class, and however they create objects of
324520	330000	this class, this pattern should be followed. And that's what consistency is. It's really
330000	334880	quite straightforward, which is why just your block states, if two objects are equal,
334880	340960	they must return equal for all time, unless one or both of them is modified. In other
340960	347200	words, mutable objects can be equal to different objects at different times while immutable
347200	353560	objects can't. When you write a class, think hard about where they should be immutable.
353560	359000	So we'll discuss immutability in a bit. If you conclude that it should make sure that
359000	364760	your equals method enforces restriction that equal objects remain equal and unequal objects
364760	371560	remain unequal for all time across the lifespan of an immutable object that that bit I added.
371560	377240	And many states, whether or not a class is immutable, do not write an equals method that
377240	383240	depends on unreliable resources. So he's spoken about an example there. Before we get to the
383240	389200	idea of relying on unreliable resources, let's quickly get some theory out of the way.
389200	393080	So what is immutability? We've got we've got two definitions here. And after that, we'll
393080	401160	look at some demos. Firstly, by Oracle docs. Okay, the best way to think about immutability
401160	405440	is it's an object that maintains state. It's the simplest way to think about it as a kind
405440	411280	of heuristic. But more formally, an object is considered immutable. If it's state cannot
411320	417840	change after it is constructed, maximum reliance on immutable objects is widely accepted as
417840	422960	a sound strategy for creating simple, reliable code. So that said, that's from the Oracle
422960	428360	docs. And then we have another probably a better definition really, from Biden, an immutable
428360	435120	object is an object whose internal state remains constant after it has been entirely created.
435120	440440	This means and this is the important part. And this really pertains to even our item.
440440	444720	So when it comes to immutability, this means that the public API of an immutable object
444720	451360	guarantees us that it will behave in the same way during its whole lifetime. It's that latter
451360	455640	bit that we can connect to what Joshua Block has stated here, where he says, again, I'm
455640	460520	repeating this point, if you conclude that it should make sure that your equals method
460520	466960	enforces the restriction that equals or equal objects remain equal and unequal objects remain
467040	470720	unequal for all time. So when he means if you conclude that is if you conclude that
470720	475600	an object or a class, you're going to design it to be immutable. So another example that
475600	480480	I use strategy to be to create is this one here, we have this class called an immutable
480480	485120	class, which I created. And first, you can see I've created it as being public final,
485120	491160	which means this class cannot be subclassed. And then afterwards, all the fields are declared
491160	499360	private too, which means any outside entity, let's say, cannot tamper with these fields.
499360	505800	There's good encapsulation in this class. And in the constructed itself, it's only when
505800	510000	the class has been constructed initially, the values are set afterwards, it can't be
510000	514520	tampered with. And while we do have getters for this class, where we get certain fields,
514520	519040	you can see that there aren't any setters. So you can't even set values in this class,
519040	523480	again, maintaining immutability. And then just an additional thing, yeah, just to make
523480	527320	sure that it's fully immutable, we've made a deep copy and I'll explain what that is.
527320	534640	So this field here, field three, it depends on an error list. An error list is in fact
534640	541200	mutable. So which is why you know, let me just read out what strategy PD said itself. If
541200	548040	the class has any immutable fields, make a deep copy of those fields in the constructor
548040	553840	and assign the copied values to private final fields. This will ensure that the internal
553840	558800	state of the immutable class cannot be modified. So by making a deep copy, really what we're
558800	564360	doing is because this class or this object, when it's in runtime, depends on another resource
564360	570200	that could be immutable, we make them independent, we decouple them so that any change to one
570200	575240	of the other. So the field three field field three object will not affect the internal
575240	580200	state of our broader object, which is the class at hand, the immutable class. So again,
580200	586800	a bit of a formal definition of what a deep copy is. Again, a deep copy, this isn't very
586800	592520	much related to what we're discussing in this item. However, of course, because we are discussing
592520	596880	immutability, it's important to understand what a deep copy is. But formally in Java,
596880	602600	a deep copy is a copy of an object that creates a new object with a new memory address and
602600	607880	recursively copies the contents of the original object to the new object. This means that
607880	612600	the new object is completely independent of the original object. And any changes made
612600	619320	to the new object do not affect the original object. So you can see here, when we are setting
619320	625920	the value for get field, we're returning a new object of type area list. And we are
625920	631320	just passing the, sorry, this isn't the getter, by the way, we are passing the field three
631320	637000	value into the constructor of the area list class. So that creates a new object. And it's
637000	644840	an exact copy of the get field or the field three. But any change now in the new object
644840	652200	that we give to the client will not affect the state, internal state of our broader immutable
652200	659120	class object. That is what a deep copy does. And that's how a deep copy assists with immutability.
659120	662840	And then from the JDK itself, I should have shown this example before the previous one,
662840	670480	but you still get the point. If you run this code, you'll see, despite in this string,
670480	676880	so string class is immutable, sorry, is immutable, pardon me. And in the string class, we're
676880	683520	setting it initially to be by or done. And we're doing this replacement and then returning
683520	689040	that value to this new name object. But what you'd see here is, even though we're doing
689040	695760	the replacement here, that doesn't affect the internal state of the name object. So in line
695760	700320	number 12, when we do print it, it's still going to print by or done, whereas a new name
700320	705200	now is going to have the replacement is going to be its own object that you created newly.
705200	709080	And then getting back to the idea of consistency and immutability, Joshua Block has given an
709080	715240	example of mistakes made in the designing of the Java language itself, historical mistakes.
715240	718640	So for instance, I didn't I didn't know this, I only figured this out. Oh, I only learned
718640	725960	this by the book that the Java dot net dot URL in this library, the sorry, the Java dot
725960	733760	net library, the URL class was relying on unreliable was relying, pardon me, was relying
733760	740720	on hosts associated with IP addresses to affect the state of the object that it creates.
740720	745760	But however, of course, we know that sometimes host names that are connected to IPs, they
745760	750600	can change IP addresses can change all the time. And that itself. So the fact that that
750600	758360	class relied on that unreliable resource was a mistake, which is why Joshua Block states
758360	765440	the behavior of URLs equals method. So pardon me, the equals method was relying on that
765440	772120	unreliable resource, which was the IP address, and the host name. And therefore, he states
772120	777400	the behavior of URLs equals method was a big mistake and should not be emulated. Unfortunately,
777400	782640	it cannot be changed due to compatibility requirements to avoid this sort of problem.
782640	789360	Equals methods should perform only deterministic computations on memory resident objects.
789360	794440	So as Joshua Block does highlight throughout this book, the language designers itself have
794440	799560	made some of these mistakes. So when it comes to this mistake of consistency, or the mistake
799560	807160	of not abiding by the property of consistency, even the people who are experts at Java have
807160	811720	still made this mistake. And this is another example of that. So in that, let's get to
811720	819000	the next property, the final one, last but not least, as they say, which is non knowledge.
819000	824440	And non knowledge states, it seems quite straightforward. But once we dive into it,
824440	829320	you'll see how there are there can be times when certain mistakes can happen. So non knowledge
829320	837080	states for any non null reference values x, x equals null mass return false, because obviously
837080	841040	you can't compare an object to a null value. And practically, what that really means is
841040	846320	a null point exception can't be thrown in the equals method when the comparison takes place.
846320	854480	So as Joshua Block states, it says that all objects must be unequal to null, of course.
854480	860400	While it is hard to imagine accidentally returning true in response to the invocation of object
860400	867880	dot equals null, it isn't hard to imagine accidentally throwing a null point exception,
867880	873720	which violates a general contract or the he says the general contract prohibits this.
873720	878360	So then he states that some classes have attempted or tried to do an explicit knowledge
878360	883640	check to prevent this null point exception from being thrown. So here's an example of
883640	889680	what that would look like. I'll just actually leave that there. Ignore that ever for now.
889680	895080	If we just try and check in the equals method when the overriding with the object pass is
895080	901520	equal to null, and here we're doing a memory reference comparison. And if it's not returned
901520	906560	full straight away, but this isn't required, and we shall see why. So the rest of that
906560	910800	part really is about this bit of code. So in this class, my type, what we're doing is
910800	916640	we're checking if whatever object we pass onto the equals method, if it's a instance
916640	924600	of my type, and if it isn't, we straight away return a false. And only if it is off type,
924600	929880	my type, do we do the casting, as you can see here. And this check immediately prevents
929880	934440	any class cast exceptions from taking place too, because even if you pass a null here,
934440	939440	it's going to return true, which you shall see here. So when the client uses this new
939440	947480	my type method and passes a null, it's going to return false as you can see. And the reason
947480	953120	it does that is because obviously null is enough type, my type, and then the equals method
953120	957320	recognizes that it immediately returns false. It's as straightforward as that really. And
957320	962320	on the casting just to block states to test this argument for quality, the equals method
962320	968920	must first cast its arguments on appropriate type. So it's accesses can be invoked, or
968920	973320	it's fields accessed, which is what we're doing here in the casting. And then we're returning
973320	981720	true if what we do cast by that object is equal to this, it has logical equality to
981720	988760	this object in this class. And of course, this is just on 9 and 11, a very plain comparison,
988760	992320	but the rest of the equals method, a lot more could take place. And we could do a lot more
992320	996680	work to ensure there's logical equality. And that's it. That's what non knowledge is.
996680	1002560	There's not a lot to it except to put in that extra check. And this check, regardless of
1002560	1007120	the context of whether we're passing a null to this method or not, would still be done.
1007120	1012440	So it kind of solves our problem. But it's important to understand the property of non
1012440	1019360	knowledge in principle when designing an equals method for our classes. That's it. And we're
1019360	1025680	not going to move on to the rest of the item because part four is the final part almost
1025680	1031640	damaged my book there. And in part four, really what we discuss is putting it all together
1031640	1035720	after we've discussed all these properties of after we've discussed what equivalence
1035720	1040000	relation is and everything we've discussed in this item so far, putting it all together
1040000	1046560	and how to really design a good quality equals method that respects and abides by the general
1046560	1051040	contract and these properties that we've been delineating and trying to understand saying
1051040	1055440	that. Thank you for watching. I hope you found value in this video. I shall continue on with
1055440	1061680	part four when I'm back from Queensland after my short break. And part four, as I said is
1061680	1065720	putting it all together. It's the it's the it's the grand finale where we put this all
1065720	1071160	together and design a superlative high quality equals method. So hopefully I see you in the
1071160	1075160	next part. That's it. I'll see you in the next one. Cheers.
