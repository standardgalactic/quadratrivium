start	end	text
0	7960	Hey, everyone, welcome to yet another episode of my video series on Joshua blocks effective Java where I go through the items that he has
8800	12740	Animated in this book and expand on them and try and make sense of them
12740	18740	And hopefully as I do that you can gain some value from it too and today and forgive me for being
19860	25600	Self-advertising but I am quite happy because I managed to get through the first nine items which is essentially chapter two
25600	31860	So the first part of the book and I am I'm really happy that I didn't do it through. I'm I'm glad that
32680	35400	First of all, I'm really enjoying this. I'm learning a lot, but also
36400	38400	Given that this is something I'm new to
39640	44080	Expanding and elucidating on programming or just any concept in general
44640	48800	It's something that I'm I think it's a skill that I'm developing on learning to
49320	54960	Communicate and articulate myself when discussing programming concepts or software engineering concepts, let's say
55560	57560	and obviously, I
58200	61720	Still don't think I have a really deep understanding of the Java language
62440	64640	therefore, it's a great feeling to get through the
65240	68160	first nine items or the second chapter which
68720	72080	Essentially is the first chapter in this book because the first chapter is the introduction
72720	75360	And today we're gonna move on to chapter three
76000	78440	And as per usual before I do that
79000	81480	This is not gonna change. I've got to always do this
82200	84080	Proviso in the introduction
84080	88240	So if you've been following along in the series, you could skip this bit to save your time
88960	93000	But without further ado, let's get started with the proviso
94280	96280	Firstly as I always state
96480	100640	This is not a tutorial and I certainly am not a teacher or an expert
100640	106840	Which is again one reason I'm really glad that I managed to assist through the first to the first nine items
107520	108880	as
108880	112160	It is not something that naturally comes to me to be able to
112760	117280	As I teach firstly because I too am learning as I go along
118360	123240	Trying to make sense of these items and the concepts in the book. So again, sorry
123240	129560	I'm talking too much the proviso or the caveat is this is not a tutorial. So please don't treat it like one
129920	132200	I'm pretty sure I've in fact
132200	138040	I've already made a few mistakes in the previous items and I've corrected them and tried to rectify them in the comment section
138360	144080	When people have pointed them out and I'm pretty sure in the remaining what 90 odd items
144080	147880	I'm gonna make a lot more mistakes. So firstly, please do point them out
148640	149960	and
149960	154760	Again, don't take what I say as let's say gospel's truth. This is
155560	157560	an analogy that I use is
158080	165800	Blind leading the blind, which is kind of what I feel like I'm doing here. I don't know what the hell I'm doing and I'm trying to
167040	168880	hopefully
168880	174440	Make things a bit more lucid for you the viewer who probably also doesn't know what the hell you're doing
174440	180440	Probably you have a better idea than I do but still I feel equally lost in this world. Isn't that the ultimate verity?
181160	182760	Yeah, I call this a
183400	190040	Disquisition so it's something I'm trying to collectively make sense of using stucco flow using the community that I'm trying to build around
190640	192640	this video series and
192640	200320	Since recently even chat GPT. I've been asking questions for a cup 10 you do this book from chat GPT and it has been
201360	206480	Sublime, it's it's been extremely helpful. That's great. So again, I think I already made this point
206480	210040	I will inevitably make mistakes. So yeah, please point them out and
210760	212760	Given that this is a
213600	221480	Programming video series all the code that I use will be up on get have it'll be published on get have not only on my personal
221480	224920	repository, but also just your blocks. Let's say official
226240	229960	Repository on this book. I'll leave the links down below the description
230480	234440	and saying all that let us get started with item number 10
235200	236680	which is
236680	244280	Obey the general contract when overriding equals and this item since we are now in a new chapter is a part of chapter 3
244280	246600	Which is methods common to all objects
247960	249960	so item 10 is
251040	254760	Undoubtedly the longest item in this book. I think it's
255760	256920	probably
256920	262000	15 20 pages. It's quite long. Therefore. I have no choice but to
262720	270880	Well, I probably could cover the whole item in one really superficial video, but that's not the intent behind this video series
272880	279080	Yeah, it's not really annoying. I live in a very very quiet neighborhood, but the moment that I've got a recorded video
280200	284080	Some son of a bitch doesn't matter. Okay back to this
285200	289440	Where was I say I got distracted. Okay item 10 is quite a long item and
289840	290960	and
290960	297240	And and the intent. Yeah, that's that's where I was the intent behind this video series was always to try and and
297400	300360	Go as deep as possible into these ideas
300960	302960	within what
303000	305000	Within what I can manage
305040	312280	There's a limit as to what my understanding is. I don't think I can go to like the compiler level then explain the JVM algorithm and whatnot
312280	316560	I'm not that knowledgeable on Java O programming in general, but
316920	321880	To my limits to my current limits the goal was always to go as deep as possible
322400	328280	So therefore I'm gonna split up this item into multiple parts for now
328280	334760	I'm thinking three parts because it kind of breaks down the item if you go through where they come has this
335440	338520	Part where it's it's no connected, of course
338520	343200	But then one leads to the other and I think you could break it down into three coherent parts. Let's say
344200	350840	But also apart from its length, I really enjoy this item because it does involve some quite interesting computer science
350840	353880	I mean basic first-year uni computer science
353880	359920	But still it's always a good feeling at least for me to revisit some of those concepts like truth tables
360640	364120	And and logic and all of that that we learned it in uni
365200	368200	So again item 10 states
369200	374000	Obey the general con obey the general contract when overriding equals I
374640	377720	Apologize I just realized that since we are starting a new chapter
377720	382720	I looked at the book and I didn't read out the introduction for chapter 10
382840	388320	Which is methods common to all objects. So before we get to the item itself. Let me read that out
389480	391480	The chapter starts off like this
391880	399000	Although object is a concrete class. It is designed primarily for extension
399600	401600	That's correct. All classes are
402600	404600	subclassed from object
405480	411400	All of its non-final methods equals hash code to string clone and finalize
412000	414000	have explicitly
414000	418840	Sorry have explicit general contracts because they are designed to be overridden
419520	425120	It is the responsibility of any class overriding these methods to obey their general contracts
426640	431000	Failing to do so will prevent other classes that depend on the contracts
431440	437000	Such as hash map and hash set from functioning properly in conjunction with the class
438080	440920	So exactly as the introduction does suggest
441440	447960	Essentially this whole chapter is gonna be about this object concrete class and it's a good segue to this diagram in fact
448840	450480	this is
450480	452480	this is a
453240	456720	Let's let's just call it a skeletal diagram of what
457320	463760	All the classes in Java look like so as you can see the object is a super. Let me zoom in a bit
465200	472200	The object is the super class of all the other classes in Java and they inherit from that so these methods that
473320	474400	Joshua block
474440	475960	Joshua block in
475960	479640	Animated equals hash code to string clone and finalize
479640	485880	They're all methods of the object class that we'll be using across all the other classes and even the classes that we create
486120	490060	On our own it provides a really good blueprint and in this item
490060	497360	We're gonna really focus on the equals method and why we should obey the general contract when overriding this equals method by any of these
497360	501520	other subclasses that do inherited from the superclass object
502200	508680	So firstly just to get some formal definitions out of the way. I always like doing that
508680	512360	I think it's a good way to get a very high level understanding and slowly
512960	516560	Narrow into a to a concept the Oracle doc state
518120	521120	Class object is the root of the class hierarchy
521880	528600	Every class has object as a superclass all objects including areas implement the methods of this class
528920	531480	So, which is why again the the
532040	540560	The advice by Joshua block is to please try and obey the general contract when overriding any of these methods that we inherit
541920	548920	And now pretending more to item 10, let's take a look at the equals method because that's what we're gonna really discuss in this item
551000	557480	Again from the Oracle docs, I really like this definition actually it's it's a very straightforward one and kind of
558200	560200	Puts it quite coherently
561160	567720	The Oracle doc state where the equals method is that's how it's defined in the object class public Boolean equals
567720	572800	So it returns a Boolean and then you can pass an object into it as a parameter. It takes an object
574000	577920	The equals method implements. Sorry. I should say as a parameter. It takes
578560	585680	Something of type object. Okay back back to the definition the equals method implements an equivalence relation or
586280	588280	non-null object references
589520	595040	The equals method for class object implements the most discriminating possible equivalence
595760	596760	relating
596760	598760	Sorry, I'll read that again
599080	605800	The equals method for class object implements the most discriminating possible equivalence relation on objects
606240	611960	That is for any non-null references reference value values X and Y
612320	621560	This method returns true if and only if X and Y refer to the same object or in a bit more logic-based sense
622120	624220	X double equals Y has a value true
626520	632960	So firstly it's important to understand this this double equals operator, I forget if there's a proper word for it, but
633880	636640	We need to firstly explore what
637640	639640	This idea of
639880	642380	equivalence relation means because that
643000	645000	Pertains a lot to this item
645760	647760	But before we get to that, let's
648400	649360	firstly
649360	652600	Try to understand what this double equals operator is
653120	655800	so I got this article from GeeksforGeek and
656240	660120	Firstly, let me read out the definition and once we are done with the definition
660400	664880	Let's try to make a bit more sense as to what how that differs to the
665320	667720	Equals method that's in the object class
669640	672440	So the definition goes in GeeksforGeek geeks
674000	683240	We can use the double equals operators for reference comparison address comparison and dot equals method for content comparison
683640	690080	In simple words, the double equals checks if both objects point to the same memory location
690480	695920	Whereas the equals evaluates to the comparison of values in the objects
696360	700160	So it's a really simple concept. I mean, I could just show it right here
701400	708480	Actually instead of showing it on my notion page. Let me just open up this article and show it here. So this is quite straightforward
710400	712400	We have two variables
712400	717560	S1 and S2 of type string and then S1 and S2
718560	720560	Will will give
721400	727640	What will pass through because this string value? Hello, it's memory address. It's the same
728480	730960	It's it's it's immutable
731640	737000	And it'll it'll be the memory with the same address. So this will really do a memory address comparison
737600	745280	But here with S1 and S3 because we had firstly this is an anti pattern one should never do this because it's a waste of memory
746280	753480	This new object of string we are creating called. Hello. This hello for the variable S3
753840	757040	That gets a separate memory address
757400	760920	So then I'm gonna be the same comparison despite the content being the same
761120	764560	It's gonna return false because the memory address is different
764880	768640	But that's not the case with using the dot equals method. That's in
769080	772480	Dot equals method. That sounds weird the equals method. That's in the object class
772760	777360	So string obviously is an object. It inherits this method from the from the object class and
778200	783580	Here in both these lines. It's a pure content comparison. So despite
784600	786360	S3 and
786360	791440	Either S1 or S2 having a different memory location. The content is for the same
791440	794040	So that's the comparison that the equals method does so
794560	801400	You gotta remember that that's a general contract that we need to respect and we need to follow when if we are to override
801440	807700	This equals method that it's the content that we compare. So going back to the definition from the oracle docs this term here
808720	812720	Equivalence relation. It's actually a mathematical logic concept
813160	820640	So we I don't think we're gonna get get to that really firstly even I myself because I'm not a logician
820640	822640	I haven't got a good understanding of of
823640	829080	everything that entails or everything behind the theory behind equivalence relation, but
830040	831640	Apropos Java
831640	838400	What equivalence relation really means is comparing the content of the of two objects
838440	844920	Which is what we did in this example here. We're comparing the content and not really the reference in in memory
845400	852720	And saying all that let's get to so I should have mentioned this earlier in part one in this video
852960	855240	Which is part one of item 10
856040	862640	We're really gonna focus on this when not to override the equals method and then in the next part
862640	867240	We'll get to the crux of the matter as to when exactly to override it and then
867920	872800	how to to follow the general contract or obey the general contract so
873720	874840	firstly
874840	876920	When not to override the equals method
876920	884320	So if we do inherit this method from the superclass object, when is it okay to not override it despite most times?
884320	886320	We may have to override it
886600	889560	In the item 10 Joshua blocks starts off like this
891040	896080	The easiest way to avoid problems is not to override the equals method
896440	901880	In which case each instance of the class is equal only to itself and then he states
902040	907160	This is the right thing to do if any of the following conditions apply and he's listed down a few of the conditions
907160	911600	So in this item will go through sorry in this part of this item
911840	916120	Getting a bit confusing in this part will go through those reasons
917240	924800	The first one is if an instance of the class is inherently unique now. What does that mean firstly? Let me read out the definition
926160	928160	He states
928360	932800	Don't override the equals method if each instance of the class is inherently unique
933160	939880	This is true for classes such as thread that represent active entities rather than values
940240	946400	The equals implementation provided by object has exactly the right behavior for these classes
947080	949760	So of course the question with asking is what is threat?
949760	951920	What is the threat class the threat class?
951920	954420	You can go through the docs on Oracle
954480	961520	But it's it's used to spin up a new thread a new thread of work simply put according to the Oracle docs a thread is a
961520	963520	Thread of execution in a program
963520	969760	The JVM allows an application to have multiple threads of execution running concurrently
969760	972960	So obviously the threat class is used for a concurrency
973600	979200	And much threading. So why would a instance of a thread be inherently unique?
979200	982840	it it seems rather obvious isn't it because
983440	989680	Whenever a new thread is spun up, even if these two threads are spun up from the same state
990320	998360	We we were pretty sure that they're not gonna act the same way once they're spun up and they start executing in their computation
999400	1004760	They the the threads in that sense represent a dynamic computation a dynamic object where
1005560	1011600	It it throughout its lifetime. It's gonna change. It's gonna it's not gonna be consistent and therefore
1012000	1016880	Two threads that may again start on with the same state
1017280	1023080	Will still act completely differently because they're doing completely different work. Therefore, it makes no sense to
1024320	1026320	To override the equals method
1026520	1034080	That that only compares the content of of two objects for the threat class because we know that they're gonna be inherently unique
1034360	1039280	Therefore if you do compare two threat objects, their content is gonna be different
1039880	1044320	Therefore, it's no use to override it and try and change it because
1044960	1050440	What the object class has defined in the equals method that does the job
1050440	1054560	And if we just suppose the threat class with something like the string class
1054840	1060640	Where we know the content of the string class is gonna be the same as in not the content of the string class
1060640	1066480	But if you have two objects like this, we can make this object immutable because we know the content is gonna be the same
1066480	1068960	Therefore, it's no use doing something like this where we
1069840	1075800	Recreate a new instance of that class and have a new object. That's again, as I said an anti-pattern
1076040	1080520	So this is a static object in that sense for for all intents and purposes
1081000	1083320	Whereas that that won't be the case for the threat class
1084080	1086080	the next reason is
1086280	1089400	to not override the equals method is if a
1090440	1093480	Logically quality tests in a class is not required
1094240	1096120	So a warranted question is
1096120	1099320	What is a logically quality tests firstly?
1099320	1104960	Let's understand what logical equivalence is and this kind of what I meant by there's a bit of basic computer science that I find always
1104960	1113000	Interesting so Khan Academy defines logical equivalence as the idea that more than one expression can have the same meaning
1113320	1118720	But have a different form often a form that helps make the meaning more clear
1119080	1123000	so the example on Khan Academy for logical equivalence is as
1123480	1128520	If you take these three statements, you cannot go to the park if your sister is awake or
1129600	1137160	Your room is dirty. That's one statement. The other one is you can go to the park if your sister is not awake and
1138560	1141800	Your room is not dirty or even simpler
1142280	1150120	You can go to the park if your sister's asleep and your room is clean now these three statements despite having a
1151120	1154680	Different structure or different let's say content
1155240	1161160	They are still logically equal in terms of the meaning we derive from them. There is logical equivalence
1163200	1168200	But but for Java of course, and I just wanted to read that up because I thought it was quite interesting
1168200	1169800	Oh, by the way
1169800	1175800	Before we get the Java idea in the context of Java. I mean, let's let's take a look at this is like a
1176720	1184160	Biconditional truth table. So another way of thinking in a bit more formal sense of logical equivalence is is if we take
1184480	1189120	logical equivalence if if both P and Q are true, then
1189600	1194760	The biconditional value is also true if either one of them is false. It's gonna be false
1195160	1201800	But also if all of both of them are false, they're still they still have this logical equivalence. Therefore, it's gonna be true
1202400	1204400	so it's it's it's it's like a
1205120	1210360	One one is one and then zero zero is still one if that makes sense
1211000	1214560	But you know in the context of Java, it's I just thought that was interesting
1214560	1219320	And I wanted to go into that and the context of Java of course logical equality compares the content
1219800	1222280	The the content of the object the data of the object
1222840	1226440	Instead of the values of the memory reference as we discussed earlier
1226840	1230240	So let's take a look at a quick demo. Oh before I get to the demo
1230240	1234280	Let me read out the definition by Joshua block on that point. So again, he says
1235120	1236520	there's no need to
1236520	1242720	override the equals method if they if there's no need for the class to provide a
1243160	1245160	logical equality test
1245760	1247240	For example
1247240	1249760	The Java util reg X pattern class
1250400	1257480	Could have overwritten equals to check whether two pattern instances represent represented exactly the same regular expression
1257720	1260120	But the designers didn't think
1260760	1267200	That clients would need or want this functionality. Correct. It's it this very much
1267200	1269920	This is like the art of object-oriented design
1270680	1272680	It's important to understand
1272680	1280720	What what the context of a API we write will be used and and these the designers of this API thought that it's it's not
1280720	1282720	necessary to override the equals method because
1283440	1285440	We would never really use the
1286320	1294840	Equals method to compare to instances of pattern and let's take a look at an example. So a quick demo. I have here is
1296200	1298200	Let me open that up
1299080	1307120	So I have this static Boolean method called run regular expression against string which takes a reg X and takes a
1308080	1310080	text of type string and
1310200	1312200	really what we're doing is we're creating a
1313160	1316400	Compile reg X of type pattern a pattern object and
1317240	1325200	Afterwards, we're using the matcher which interprets this pattern that that's so pattern dot compile returns a pattern a compile pattern and then matcher
1325640	1330240	Interprets what it returns to look for equivalence. So not for equivalent
1330240	1336440	Sorry to find that pattern in a given string or a given object of type string
1337160	1339160	So over here if I run this
1342920	1346160	You'll see it returns true false false
1346160	1351440	So the reason for that is because obviously this reg X is a reg X for an email address
1351440	1358200	And the first one is an email address these two don't fulfill the requirements of this reg X pattern and
1359000	1360680	Attending to our point
1360680	1364320	This the designers made it made a call that
1364880	1366520	Uses of this API
1366520	1371840	Will never never want to compare instances of the pattern class. There's just no reason for it
1371840	1376660	Therefore we can leave the this as an order to put it in a bit more
1377440	1379040	formal sense
1379040	1382800	The designers made it made a call that the users of this API
1383520	1388160	Will never require logical equality between instances of the pattern class
1389760	1395520	Therefore we can leave the equals method as it is they thought and at times like that
1395520	1401680	there's no requirement to override the equals method and the other reason of course not override is if the class you're
1401680	1405840	writing and designing already has a superclass and inherits
1407400	1414640	Methods from the superclass and if that superclass is already overridden the the equals method appropriately to the subclass
1415480	1421000	Then this wouldn't be an issue. We wouldn't have to again override the overridden equals method
1421000	1427240	That would be a bit absurd. In fact, we're not gonna get to this in this part, but in the next part
1427240	1429240	we're gonna discuss the
1429600	1430960	The
1430960	1432320	List code
1432320	1437040	Substitution principle that is something we should follow when in class hierarchies and inheritance
1437360	1439840	Because of that principle and if we do follow that principle
1440560	1445760	theoretically, there shouldn't be a reason for or subclass to override a
1446360	1452380	Equals method of a superclass that's already overridden the equals method of the object class if that makes sense
1452380	1456860	So for instance before I get to the demo, let's take a look at this
1457260	1465340	This is the class diagram for and I I'm not sure what the accuracy of this is because the Java collections framework is huge
1465340	1470520	And it's growing huge sound like trumpet. It's huge and it's growing
1471260	1474460	quite a lot and and as you can see here
1474460	1481060	There's a there are there are many that all the class hierarchies their implementations and extensions and inheritance taking place so
1482120	1485500	the example that Joshua block has given in the item is
1487100	1493300	So don't override when a superclass has already overridden equals as I did say and the superclass
1493780	1498180	Behavior is appropriate for this class and if we do follow that principle theoretically
1498180	1499860	It should be the list curve
1499860	1507520	Substitution principle for example most set implementations inherit their equals implementation from abstract set
1507860	1515180	list implementations from abstract lists and map implementations from abstract map, and that's why I wanted to have this
1516060	1520740	diagram here because so if we take a look at set you can see that the
1521420	1524540	the set or the hash set in this case is
1525940	1527940	inheriting
1528780	1535940	Sorry the set interface is implemented by the abstract set as you can see here
1537060	1540020	And so yeah, sorry. I gotta be confused there
1540020	1545740	The set interface is implemented by the abstract set and I've caused in the concrete class
1545740	1548460	Which is the hash set that is here
1549180	1550780	extends that
1550780	1553260	abstract set but also implements the set interface
1554460	1557260	I'm not sure why that happens, but why would it?
1557860	1565380	extend the abstract set and again implement the set interface if the abstract set has already
1566500	1568500	implemented the set interface
1568620	1576940	I'm not sure but in any case. I'm not gonna get into the Java collections framework here, but the point being if the superclass is appropriately
1578420	1581780	Done the overriding. There's no requirement for
1582460	1589860	The subclass to do the overriding again. So in the example that I've used I've just created a few has sets hash sets
1590740	1592740	I'm just gonna write and show it to you
1593260	1595260	Whoops
1596260	1598260	Now you can see here I'm comparing
1599140	1602380	the first hash set to the second one and the
1602820	1608220	Again the first one of the third one the first two has set so hash hash set
1609300	1611300	Has set and has set two
1611300	1615140	They both have equivalence a in the sense of
1615860	1620060	Logical equivalence so the content of the objects are the same. They both have effective Java
1620300	1628740	Where's the third one hash set three has effective type strip a typescript and we compare hash set three to hash set one
1628860	1635260	It's part. It's returning a false and that's what you expect. So that means a superclass which was the abstract
1635940	1644300	Set class has done the overriding correctly and it's following the general contract of the object class equals method
1645300	1648780	Just on the Java collections framework as you saw even I was quite confused
1648780	1656620	I mean, I really don't know if anyone except probably the designers and you know the the pantheon of the Java legends
1657980	1663700	Have a tarot understanding of the collections framework. It's it's quite quite large and extensive
1664460	1666780	But if you do want to read about it
1667620	1670300	This is in fact not even read about it
1670300	1674540	But it's just good to that bookmark this page and use use it as a reference or these days you could just ask
1674940	1675940	Chagapiti
1675940	1677940	That life is much easier
1678260	1682260	Okay, before I go for a tangent the the other reason
1682780	1685620	to not override the equals method is
1686500	1694860	If you're certain that the equals method will never be invoked quite straightforward that again probably relates to the other point where
1695380	1699660	as a designer what has to make that call and and and see
1699700	1703940	If users of this API will ever really invoke the equals method
1704140	1709060	So Joshua block states that the class so even it will not be invoked if the class is
1709740	1716580	Private or packaged private and you are certain that it's equals method will never be invoked. That was a confusing way
1717700	1721980	For me to put it but you get the point and then he states if you extremely risk averse
1722220	1727340	You can override the equals method to ensure that it isn't invoked accidentally
1727380	1729380	And I think it's good to be
1729940	1735740	Risk averse in that sense and I shall show the demo as to why it's probably a good idea to override the equals method
1736340	1743140	Regardless of it being private regardless of the class being private or packaged private in this demo
1743500	1749140	So we have this class called demo and then in that class we have a private in a class
1749460	1755900	So a private in a class now this class would only be used by the demo class because it's private
1756020	1761620	No one outside can use it. It's well encapsulated and in the private in a class
1761620	1763620	We have overwritten the equals method
1764060	1769780	And I shall show this bit a bit later. This is how you be fully risk averse and prevent
1770420	1776020	Any class from overriding the equals method or any use of this API
1776660	1782060	So if you go to the this private in a class method, which I know can be a bit confusing
1782060	1786460	I call it a private in a class method not because it's inside the private in a class
1786660	1793500	But this method which is a public method can be used to access this private in a class via
1793940	1796740	The outer demo class. So that's what we're doing here
1796740	1800820	We're creating a new object of the inner class and we're calling this function call
1801420	1806580	Display and then we have perhaps a malicious actor who's trying to
1807100	1810580	Do the same thing access that it private in a class
1811580	1816180	Via the outer demo class and try to invoke the equals method
1816420	1819940	So if I do run this code, so here's a client that use that's using it
1819940	1825660	We've created an object of type demo a new instance of demo class and if I run this
1826580	1833140	You'll see as expected. It's it's running the private in a class method and it's first printing
1834140	1837260	this log here and then it's also printing the
1838020	1840020	log inside
1840060	1846820	The method display which is inside. Sorry of the method display which is inside the inner class the private in a class
1847340	1851840	That's fine. That's okay. We probably expect that. However, let's say
1852420	1854420	This person wants to access
1855260	1857260	What do I do there? I?
1857300	1863220	Collapsed my function. Okay, let's say this person wants to access the equals method
1863220	1866940	That's in the private in a class and we don't want it to be
1867700	1869700	accessed by anyone
1870020	1874940	In that case what we can do is we can throw a new assertion error saying keep away
1875740	1880460	And therefore if a client now tries to access the equals method
1880980	1883180	By the other class it'll throw an arrow
1885660	1887100	Just like that
1887100	1892780	Throw an assertion error saying keep away and that's how you be extra punctilious and careful
1893260	1895900	And not allow anyone to use the equals method
1896900	1902700	Especially if that someone's expected by the designer that is that is the end of item
1903380	1908020	10 part 1 I was gonna say at the end of item 10 most certainly not
1908020	1916020	We've still got heaps to cover in fact part 2 of this item is gonna be quite long because we need to go through all the reasons
1918180	1921860	When it is appropriate to override the equals method and that's quite interesting
1922060	1927480	So and then in part 3 we'll we'll finish it off with kind of summarizing on how
1928140	1933660	To respect and obey the general contract went over an equals method and again
1933660	1936580	I know it's quite long, but there's a reason that I'm doing that as I said
1936580	1939100	I won't the intent of these items is
1939700	1941700	To go as deep as possible
1941940	1943940	Within what what I can manage
1944660	1950380	And I hope you find value in it because what's the reason what's the use of just superficially reading these things?
1950380	1955140	If we don't really grok the concepts saying all that thank you for watching
1955140	1959040	I hope you found value in this video. I shall see you in the next one. Cheers
