{"text": " Hey everyone, welcome to yet another episode of my video series on Joshua Block's effective Java where I cover and Expound on the items that he has emulated in this book and of course what I've been trying to do in the previous videos or episodes is to Flesh out and try and make sense of what he's talking about in the different items in this book and Hopefully as I try to make sense of them the purpose of me Sharing this publicly and uploading these videos is that you too can gain some value from it. That's one I would say that's a primary purpose But the other is of course that there's that sublime effect where by me trying to teach someone a concept that I really Fundamentally don't still properly grok or understand Paradoxically, I understand it better. So yep, it's it is sublime indeed and it works well Say all that without further ado, let's get started. So as per usual I'm gonna repeat the introduction that I've sort of Repeated in all the other episodes. I just feel like I need to do that kind of due diligence as a sort of ethical duty Let's say So if you do want to skip it, of course, please go ahead because I'm just repeating the same old points I don't want to waste your time This is not a tutorial. That is the first caveat in this proviso. This is not a tutorial I am not a teacher and I certainly am non-expert in fact a point that I've been repeating ad nauseam is that the more I've Understood Java and the concepts He's outlining this book Java and OP in general I'm realizing how much of an expert I'm not so that's really interesting and very humbling indeed And I don't mean that in a false modest sense. I mean, that's sincerely An analogy or yeah, probably an algae I'd like to use to explain what I'm trying to do here is the blind living the blind. I am as naive or perhaps even more blind and ignorant and naive and oblivious all of those things As as much as you are and yeah, even probably even more. So this is not my tutorial I'm not trying to teach you anything So whatever I say, please do take it with a grain of salt. This is a Exploratory Disquisition another analogy. I've been using as what one would see in a University tutorial where we've got a tutor bunch of students trying to make sense of and understand a problem statement or some some programming principle, which is why unequivocally I will Inevitably make mistakes. So please point them out not just for my sake But even for anyone that's watching these videos if I do make a very fundamental Crucial mistake I'll try my best to be rectified by leaving a comment myself But if you do pick it up, I shall pin those comments just so that I don't mislead anyone With any Fake news to use a politically Overloaded term and of course as this is a programming video series all the code that I've been using for this effective Java series It's available on my GitHub. I've got a separate repository for each item and As I go through these all the code will be published here Anyway, now that we got the proviso out of the way, let's get started with item number six where Joshua block states Avoid creating unnecessary objects and this is quite an interesting one because I certainly am guilty of doing this of making these mistakes So it's it's valuable and worth our time. I think that's Java or generally OOP programmers to Understand why, you know, just sort of creating objects at a hawk without putting any thought into it There's a bad idea and perhaps even an anti-pattern Of course, this we are still in chapter 2 in creating and destroying objects So before we get to any of the content in the book, I kind of want to get some fundamentals real OOP basics out of the way Look, if you don't know what objects are this Video series really probably is a bit above your level. I'd say go and watch some basic OOP fundamental videos on YouTube just watch like a basic tutorial, but The definition we all hear of an object is that it is an instance of a class and the class is what acts as a blueprint as to how it defines How an object behaves when it is instantiated but something a bit more formal is the definition by the oracle docs and He goes like this Software objects are conceptually similar to real-world objects. That is true something. I truly Admire and appreciate about object oriented programming. I think it's brilliant that they've created that connection In fact, sorry to go off on a tangent here if you do start Following some of the design patents a bit more seriously so for instance the 23 patents popularized by the Gang of Four you'd see a lot of those patents to Have many deep connections to engineering patents in the world That's let's say not the conventional. Sorry the the the the conventional world which doesn't invoke which doesn't Attain to software engineering, but sort of the let's say civil engineering or some other kinds of engineering Anyway, sorry. Sorry. I'm going off on a tangent back to the definition Software objects are conceptually similar to real-world objects. They too consist of state and related behavior and Objects totes so it's state in fields Which are variables in some languages and exposes its behavior through methods of course and we shall see a few examples of that in this item Which are called functions in some languages methods operate on an object's internal state and serves as the primary mechanism for object-to-object communication Hiding internal state and requiring all interaction to be performed through an object's methods is known as data Encapsulation a fundamental principle of OOP or object going to programming So once again, if you don't know what encapsulation is what inheritance is those really fundamental ideas in OOP I think this video is a bit above your level Yeah, so that's probably should be caveat for this item in particular Okay, so now let's try to understand from a JVM and memory management perspective Well more from a JVM perspective. We're not gonna go too deeply into memory management how these objects exist at least Apropos the Java virtual machine now again, you would know what the JVMS JVM is what allows to execute Java code on Any any machine, which is what makes Java Quite popular because it can work on any operating system for instance so We have the call stack of course. Here's where we make calls or we give instructions To call different objects and whatnot our different methods. Sorry And the JVM primarily divides the memory into two two spaces or two domains now, of course Oops, I had the microphone now, of course It's okay. So firstly, it's the stack memory and the heap space now, of course these two high-level Demarcations also further divided into let's say sub-domains so the heap space for instance would have the dynamic meta space Which holds static content and we'll get to that too So the stack memory is used for static memory allocation, that's correct What static memory allocation sort of means for all intents and purposes is that an object created? Statically, let's say once it's in memory. It will remain in that state Throughout the application lifecycle, whereas dynamic objects change state They can change and they don't live in the stack memory so Also the the stack memory Again pretending to the JVM and Java holds primitive values So values like int or char These types live in the static memory and of course as I said before it Well, I don't think I did say that before anyway There are references to dynamic objects that live in the heap space now look all these definitions are fine For starters, but the best way to make sense of it is of course to an example So if we take person here this in the person method this Int value that you're passing that would live because it's a primitive type and it's a primitive Variable that would live in the stack memory Also, I apologize if I did say static memory before I should have said stack memory And then string which is a class and it's you know a class you can create an instance of that class What would live in the stack memory in that case wouldn't be the object itself but rather a memory address or a reference to the actual object which lives in the heap space in the string pool in this instance So and that's dynamic its state can change unlike some of the static types so Yeah, as I've written down here. There's a few notes. I took just to make sure that I stay on track. It's It's used for dynamic memory allocation of Java objects and GRE classes at one time So that means when applications running its state can change Also new objects which sometimes seem to be short-lived live live in the heap space. I shouldn't just say it outright Tends to be short-lived. There are some long-lived objects and here's where you know The different algorithms in garbage collection so that that's garbage collection is essentially essentially Memory management here. Here's where different algorithms play a role and allocate objects into you know, like for example the permanent space I think it used to be called like the nursery different parts of the The heap space. I'm not gonna go into that. This is this this video is gonna be way too long if you're getting to memory management and Java but the point is these objects are dynamic and They the references for them are stored again in stack memory And On that note, of course now that we understood sort of how objects exist at a very very high level Pertaining against Java and JVM Let's get to the item and the item essentially is telling us how to reuse objects and why in fact it's better To reuse objects than creating new ones and how doing so will make the code Cleaner more stylish more professional if you could use that term and even as we shall see with some examples Make the code run faster and that definitely is a benefit So the book starts off with a rather ridiculous example as what not to do So as Joshua Block has pointed out he has left the comments in an extreme example of what not to do I've never seen this done by any programmer to be honest, but This certainly isn't something one has to do where when we already have this string. We create another instance by using a new keyword This is sort of how most of us do it So the proper way The improved version he calls it, but let's just say it's a proper way and Here's what Joshua Block states The statement creates a new string instance each time it is executed and none of those objects object creations is necessary because So bikini can live here and Then it could just point to that all the all the references one one object can exist in the Heapspace, but if you have this new keyword every single time it's invoked a new object is created and that is a completely inefficient and ridiculous waste of space and time The argument to sorry I'll show it scroll down the argument to the string constructor bikini is itself a string instance that is correct Functionally identical to all of the objects created by the constructor if this usage occurs in a loop or in a frequent frequently invoked method Millions of string instances can be created needlessly So here's an example of what he definitely shouldn't do and just like the Bible We're gonna go from the Old Testament where what the goat says what he shouldn't do and in our case the Java code Joshua Block tells us don't don't do this. That shall not do this to the New Testament what you should do and what you should consider on when when writing code as to how These techniques can allow us to reuse objects It's interesting how I just converted this into a theology session So the first way one could easily reuse objects is something we already covered in In at item one is in fact using static factory methods I should say as Joshua Block stays here. In fact, I'll just read it out You can often avoid creating unnecessary objects by using static factory methods in preference to constructors when immutable classes that provide both So the example here would be the Boolean class where value of is a static method and that is indeed preferred over using The constructor and I think since Java 9. Yes, it does say here This has been deprecated. We can't even use this constructor because it's been made private. So The the static factory method doesn't require a creation of objects every time it's invoked Because static members are common to all instance instances of a class and again the way I think about it Oh, I guess this is exactly the way one should think about it is it belongs to the class Therefore, all the instances of that class will will share this Static member So that member itself can be shared up amongst all objects whenever that class is instantiated and As I did mention a bit before Static variables live in something called the dynamic meta space within heap memory and also an ancillary point He also adds in addition to reusing immutable objects You can also reuse immutable objects if you know they won't be modified. So For reusing objects, they don't have to all be declared final and Static and make for them to be mutable rather even if we know a certain object is Mutable, but still it won't change. We could reuse that using static factory methods So there could be some operations where it's much more computationally expensive to keep Invoking a certain function and here's the example Joshua block has used So before I do get to the example, probably I'll just go through his justification He says some object creations are much more expensive than others. That's right If you're going to need such an expensive object repeatedly It may be advisable to cache it for reuse Unfortunately, it's not always obvious when you're creating such an object. That is true However, here we have a solid example where this could be computationally expensive and that is using regular expressions So this is a very very simple class Well, what it does. Well, the class has these static methods we have well Practically it should only have one method called is numeral, but just for Demonstrative purposes we have is numeral slow and It's numeral fast and we shall see why we have those two methods in a bit So firstly the slow method what it does. Okay, so let me let me take a step back What this method does is it returns a true or false and And what that true or false tells us is if a string we pass on to this fulfills a certain regular expression And what that regular expression is looking for really is if the string we pass on to is a Roman Roman numeral and Here here though, this is the slow way what happens here is every single time we invoke this method and we pass the string The the the string class invokes the matches Method which uses a finite state machine Which we shall we shall get into what that is a finite state machine to do the matching And and that is computationally expensive. So every single time a pattern instance has to be created here A pattern instance really that won't change but for we know that why would we not reuse it But every single time the method is invoked We're creating this finite state machine instance and then after it's done It has to be garbage collected and the JVM has to take care of it. So that is computationally expensive. So this is a slow way But what he does propose instead is to cash it. So we have the regular expression instance We call that Roman here and we use this compile method in the pattern class and we explicitly compile it into an immutable pattern instance Which we still here and we call it Roman as I said and then we just reuse that in the esnemeral fast method Simple as that and to put it most succinctly He states while string dot matches is the easiest way to check if a string matches a regular expression Which is what we've sort of done here It's not suitable for repeated use in performance critical situations He continues creating a pattern instance is expensive Because it requires Compiling the regular expression as I said into a finite state machine So let's get a quick understanding of what a finite state machine encompasses because it pertains to the topic This is definition. I found from brilliant org by Kale more and Deshan Gupta is a system where particular inputs cause particular changes in state can be represented using a finite state machine or using finite state machines and This is a really good example. I found it was a 10 minute video by Valhalla data systems and the book here He not only explains quite simply with brevity what a finite state machine is But also afterwards shows a solid implementation in Java code So I'll leave a link to that video down in the description. It's well worth a watch But this is one snapshot of the video And here's what happens. So when we pass a string, which is really a an array of characters in Java It'll take each character and start going through the FSM I'm just gonna call it FSM because it's finite state machine is a mouthful So it's gonna start off with with state zero and if it's an at sign it'll go to one Oh, by the way, this pattern it's looking for is simply for an at sign or a hashtag. So this has nothing to do with the reg X given here because this is for Checking if it's a Roman numeral, but this is a different example. Just so you don't get confused So all it's looking for is if the string contains an at sign or a hashtag So it starts as I said with state zero if it contains an at sign goes to state one If it's a number between or an integer to use proper terminology between zero and nine It'll go to state two if it's a hashtag. It'll go to state three And it sort of loops it will remain in that state because so if it's an at sign it'll go back to state one so For all the intents and purposes This state represents at signs this state represents the hashtags and this represents integers That's really what a FSM is but for our problem We don't want this computation happening every single time this method is involved Which is why we create one instance and we store that object with its state in a constant This is our constant I declared in Java So let's look at the time differences. Now firstly, I'll invoke the slow method if I run this program You'll see that's how long it takes. Let me zoom in a bit there. So this is Millions seconds, isn't it? This is it's always in nanoseconds Man, I'm not even sure. I think this is a nanoseconds. I Looked it up, but in fact both my Options were wrong. It's actually microseconds. There you go. That's my ignorance. So it takes around 115 microseconds For this function to run and now if we do change it to fast Now keep in mind what the fastest what this method does is that it doesn't invoke the matches method in Well, sorry, it doesn't work the matches method But it isn't compile a new pattern every single time because we just use the cached Roman Instance here. So if we run that it'll be much faster There you go half the time 60 milliseconds 12 milliseconds for the next computation and Joshua block states in his machine. It was for a eight character input string. It was six six point five times faster Which is why he says the improved version is of is numeral provides significant performance gains if invoked frequently Then it continues and that's a really good point. He sort of touched on this in the in item number one where you could in fact give Static methods or even static values a name. It's more clearer It's more. It's it's quite clear that this pattern is a Roman pattern Roman numeral pattern So not only is the performance improved but arguably so is clarity the clarity because we know what the pattern we're using here Making a static final field for the otherwise invisible pattern instance A love allows us to give it a name. It's more explicit and clear Which is far more readable than the regular expression itself and then he makes a bit of an ancillary point just to clarify about lazy loading because now as I said when we Do it this way when we declare it in a private static final field and cash that object This belongs to this class. So it can be reused all the Objects of this class all the instances of this class will reuse this but what if we never use this object? It's just gonna be created For no reason at all and it's gonna exist in the heap space. Sorry. Yeah in the dynamic meta space in the heap and Here, you know, he says, oh, look, we could probably lazy load. However, perhaps it's not required We don't have to over complicate things for Optimization as don't canoe and I think it was apocryphally attributed to him premature optimization is the root of all evil and He continues not only is the performance improved. Oh, sorry. I already read that part If the class containing the improved version of the is numeral method is initialized, but the method is never invoked So what if this is numeral fast method is never used and this just exists there? The field Roman will be initialized needlessly It would be possible to eliminate the initial initialization By lazily initializing the field the first time the is numeral method is invoked But this is not recommended as it's often the case with lazy initial initialization What can I read the word those two words together lazy initialization? It would Complicate the implementation with no measurable performance improvement. So it's not required. It's fine To create an object even though it may potentially not be used especially with how fast Jvms of these the JVM and processes out these days And with that we move to a bit of an interesting problem here What about less obvious situations for object reusability? I'd say this one seemed quite straightforward Well, I don't know if it was at least for me But when I saw the code trust your block has written it came together. I was like, oh that makes complete sense but I from being honest, I probably would have done it this way and made the mistake of invoking this pattern instance every single time so It's probably not so obvious for inexperienced programmers like myself, but nevertheless Keeping aside aside the self-flagellation What about when it's less obvious? So he says when an object is immutable like the Roman object here It is obvious that it can be reused safely But there are other situations where it is far less obvious even kind of intuitive Now the example that Joshua block is used for that is adapters adapters simply are an object which backs other objects by allowing two incompatible objects to communicate together it's used a lot in the adapter pattern and even though Joshua block doesn't talk about the adapter pattern here It's I think it's worth going through a few definitions definitions as to what the adapter pattern does But of course, I'll leave Some good articles down there in the description. There's a good one by Vile Dung Where he goes through a few examples as to how the adapter pattern is used and how adapters these objects are used So the first definition is by refactoring guru Adapter is a structural design pattern which allows incompatible objects to collaborate The adapter acts as a wrapper between two objects It catches calls for one object and transforms them to format an interface recognizable Recognizable by the second object on the adapter pattern. I would recommend If you want to get a good understanding of the adapter pattern This book Headfirst design patterns goes quite deeply into the adapter pattern with some really good examples So I'll leave a link to this book down below in the description too And I'm hoping to cover some parts of this book at least after I'm done with this It's probably gonna be next year So the next definition that I found for the adapter pattern is an adapter pattern acts as a connector between two Incompatible interfaces that otherwise cannot be connected directly could be due to type mismatch whatnot an adapter wraps an existing class with a new interface So that it becomes compatible with the clients interface The main motive behind using this pattern is to convert an existing interface Into another interface that the client expects It's usually implemented once the application is assigned so one example as to how an adapter is used and Even though I read some definitions of the adapter pattern. I wouldn't say that the adapter pattern has been used here Exactly or precisely, but it's worth looking to how the adapter pattern is used and that is in the map interface so we so of course the map interface contains a method called a key key set and Our hash map, which is a concrete class will implement it which you see here now what I Did do so as a client what I would do is I would create a hash map I would add key value pairs and what the key set does is it returns a bunch of objects all the keys Which are functionally identical so we can cache that value the key set value We get can be cached and that's exactly what we see here in the implementation of key set so this method which is what returns the key set first checks if the key set is present if this key set value is now which Wasn't going there. Oh, that's interesting. I Was clicking the the wrong Variable look sorry, it's been a long day if this key set variable which is in the abstract map if this isn't available So if isn't cached then a new instance will be sent if not There's a requirement that same instance same object can be reused So here's what where we see that an object is being reused a good implementation in the JDK So again to print more formally as to how this example makes sense Theoretically although the return set instance is typically mutable. So that's the set that's returned here All of the return objects are functionally identical When one of the return objects changes so do all the others Because they're all backed by the same map instance While it is largely harmless to create multiple instances of the key set view object It is unnecessary and has no benefits. So the similar point is Biggest what this method returns is a set view. So of type set of the key set While this key set the the values in the key set can change It's Functionally still the same so the adapter the the outer layer which it returns is still the same and that's a set So that's why it could be cached another example of Reusing objects where it's less obvious is of course auto boxing now What that does is of course it allows programmers to mix primitive and non primitive type So primitive would be int a non primitive type or a a box type would be Integer while yes auto boxing does give the object more flexibility and give it more functionality It's not always a good idea to auto box because what auto box does is create A new object every time it's involved So the example we've used or the example that joshua block has given is In this sum class where in fact, I changed it to the proper way So this is the bad bit to do it where we have used an auto box type long And in fact the idea look at that it's even warning us to not to use this but rather to use a primitive type Now with this if we do run this loop where it's running 2 to the power 31 times An unnecessary number of objects of long instances are created in this loop. So if we do run it It takes so long Look at how long it takes it takes almost 3000 milliseconds and it keeps going I'll just zoom into that But simply by just not using an auto box type and rather using a primitive type We save a lot of time because there's no object creation involved here If you run it again It's much slower That's the advantage of using primitive types over auto box types and Again, one has to be careful and the good thing is the the way you saw intelligent is beautiful You got to love it the ide will normally warn you but you know in good programming etiquette One should be aware of that and that's why he states the lesson is clear prefer primitives So this here is the proper way to do it using a primitive type To box primitives and that is a wrong way using a box primitive which the ide warns us against Oops, uh, come on said And watch out for unintentional auto boxing and then finally towards the end of the item He does give some caveats and something I always appreciate about this book every single item has pros and cons Uh, it it's a well written book because it looks into both sides of the equation. Let's say And discusses the trade-offs So the the first caveat is that it's not the case that object creation should be Avoided at all costs, especially with how fast the processors are and how optimized the jvms It's not that we should try our best to Not create objects again do the whole premature optimization thing That's why he states this item should not be misconstrued To imply that object creation is expensive and should be avoided on the contrary the creation and reclamation of small objects Whose constructors do little explicit work is cheap, especially on modern jvm implementations Creating additional objects to enhance the clarity Simplicity or power of a program is generally a good thing And then we go to a classic example the classic example of an object That does justify an object pool is a database connection, which is why conversely Maintaining object pool in this case would be a better idea unless the object is significantly heavy weight a like a database connection So it depends on what the object we create is as to whether It makes sense to optimize it and to reuse it or just simply create an object if it's lightweight for instance The cost of establishing the connection is sufficiently high That it makes sense to reuse these objects This is something we see a lot with frameworks for instance a spring with the dependency injection Something like a database connection could be injected Into different components in the object pool or the object graph in this case Generally speaking, however Maintaining your own object pools clutters your code increases memory footprint and harms performance. So what he means by Maintaining your own object pools really is what we saw here in the numeral roman numeral example This is kind of like what an object pool is we we define all these objects in our class and let's say we have 20 of these That can cloud your code and make things a bit complicated and Make the code unreadable or more difficult to read So since Modern jvm implementations have highly optimized garbage collectors that easily outperform such object pools on lightweight objects It's not necessarily the case that one should always avoid object creation and then we get to an interesting sort of Conclusive point in this item and that's the concept idea of defensive copying What defensive copying The simplest way to think of defensive defensive copying is that it's used to maintain Immutability of an object and before we take a look at the example which I have here for defensive copying. It's when you get it It's a rather simple concept, but it's used a lot across frameworks. For instance, um, sorry defensive copying. I'm not sure I confused Reflections with defensive copying But regardless it's a known concept in java programming So what defensive copying is is Where to maintain immutability Instead of passing back a reference to the object at hand a reference to a new object is passed with the same values Making it a copy for all intense for all intents and purposes. What that means is Uh, you know what without me trying to theorize more. Let's look at the example here So we have a class called full calendar here, which Despite ostensibly looking immutable is in fact mutable And this example is courtesy of courtesy of abc study guide. The link to this blog post article is down below in the description So as a client when we use full calendar, what we're doing is we are passing this original date Uh object of date type into the constructor and the constructor assigns that to this private final Uh date object, which we think is immutable But what happens is because we are passing this when the class is instantiated. So in line number 30 If for instance, let's say this original date value changes The value of standard date also changes because they are both pointing to the same location in memory Therefore, even though we've declared this as private final And we think it's immutable. It's in fact not and here's where we can easily create a defensive copy So the right way to do this would be in fact When the class is invoked uh, or when when the class is instantiated and the construct is invoked We create a new date object. We we get we get the value of it So we create a copy of that with the the the date we pass here And then using that value we create in fact a new object and then pass said that in standard date That defensive copy ensures immutability of this class and the same thing when we are returning it when you're returning it We want to return a new instance and not The uh, the one that was here because that too could change And that's why we are we are passing. Um, we're not passing in this case. We're using the new keyword and creating a new Uh date instance. So yeah, that's sort of my still I'd say high level superficial understanding of defensive copying But whenever I do think of it, I always connect it to maintaining uh immutability But of course, I'll leave the code this code and also the the article that I got this code from In the description so that you could look a bit more deeply And to conclude here's what Joshua Bloch says about defensive copying The counterpoint to this item is item 50, which is on defensive copying. So this item is is about avoid Creating unnecessary object and here you would think we're creating an unnecessary object where every single time a new object is created So that's why he says it's a counterpoint The person item says don't create a new object when you should reuse an existing one While item 50 says don't reuse an existing object when you should create a new one like In the example of defensive copying note that the penalty for reusing an object when defensive copying is called for is far greater Than the penalty for needlessly creating a duplicate object Failing to make defensive copies where required can lead to insidious bugs and security holds creating objects unnecessarily Merely affects style and performance and of course we need to always at least in my opinion prioritize security over efficiency and performance, which is why It's a good sort of way to end this item with the caveat that This certainly doesn't mean that we should avoid creating objects at all costs There are costs a cost could be security and that could be detrimental And that's it. That is item number six on The avoiding of creating unnecessary objects. I hope you found that insightful Please do tell me how I can improve In the way I communicate and articulate these concepts But also as to how I demo and show the code I would like to maybe even a bit more be a bit more slow and leave more comments But perhaps the best thing to do is Go on to take a look at the code yourself. This video. Think of it as only a prelude I think that thanks a lot for watching. I really appreciate it. I'll receive the few comments here and there On on these videos and it means a lot to me. It means a lot to me And it's always nice to see that there are people actual human beings watching these videos and it's just not me Rambling like a raconteur Okay, enough rambling on the on in okay enough rambling on rambling ridiculous Thanks for watching. Cheers. See you in the next one", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 7.2, "text": " Hey everyone, welcome to yet another episode of my video series on Joshua Block's effective Java", "tokens": [50364, 1911, 1518, 11, 2928, 281, 1939, 1071, 3500, 295, 452, 960, 2638, 322, 24005, 17500, 311, 4942, 10745, 50724], "temperature": 0.0, "avg_logprob": -0.24655890190738372, "compression_ratio": 1.6296296296296295, "no_speech_prob": 0.1483554095029831}, {"id": 1, "seek": 0, "start": 7.5600000000000005, "end": 9.56, "text": " where I cover and", "tokens": [50742, 689, 286, 2060, 293, 50842], "temperature": 0.0, "avg_logprob": -0.24655890190738372, "compression_ratio": 1.6296296296296295, "no_speech_prob": 0.1483554095029831}, {"id": 2, "seek": 0, "start": 9.56, "end": 15.200000000000001, "text": " Expound on the items that he has emulated in this book and of course", "tokens": [50842, 21391, 554, 322, 264, 4754, 300, 415, 575, 846, 6987, 294, 341, 1446, 293, 295, 1164, 51124], "temperature": 0.0, "avg_logprob": -0.24655890190738372, "compression_ratio": 1.6296296296296295, "no_speech_prob": 0.1483554095029831}, {"id": 3, "seek": 0, "start": 15.84, "end": 20.16, "text": " what I've been trying to do in the previous videos or episodes is to", "tokens": [51156, 437, 286, 600, 668, 1382, 281, 360, 294, 264, 3894, 2145, 420, 9313, 307, 281, 51372], "temperature": 0.0, "avg_logprob": -0.24655890190738372, "compression_ratio": 1.6296296296296295, "no_speech_prob": 0.1483554095029831}, {"id": 4, "seek": 0, "start": 21.12, "end": 26.48, "text": " Flesh out and try and make sense of what he's talking about in the different items in this book and", "tokens": [51420, 479, 11802, 484, 293, 853, 293, 652, 2020, 295, 437, 415, 311, 1417, 466, 294, 264, 819, 4754, 294, 341, 1446, 293, 51688], "temperature": 0.0, "avg_logprob": -0.24655890190738372, "compression_ratio": 1.6296296296296295, "no_speech_prob": 0.1483554095029831}, {"id": 5, "seek": 2648, "start": 27.16, "end": 30.3, "text": " Hopefully as I try to make sense of them the purpose of me", "tokens": [50398, 10429, 382, 286, 853, 281, 652, 2020, 295, 552, 264, 4334, 295, 385, 50555], "temperature": 0.0, "avg_logprob": -0.21455692208331564, "compression_ratio": 1.5982905982905984, "no_speech_prob": 0.010318144224584103}, {"id": 6, "seek": 2648, "start": 30.72, "end": 37.32, "text": " Sharing this publicly and uploading these videos is that you too can gain some value from it. That's one", "tokens": [50576, 49060, 341, 14843, 293, 27301, 613, 2145, 307, 300, 291, 886, 393, 6052, 512, 2158, 490, 309, 13, 663, 311, 472, 50906], "temperature": 0.0, "avg_logprob": -0.21455692208331564, "compression_ratio": 1.5982905982905984, "no_speech_prob": 0.010318144224584103}, {"id": 7, "seek": 2648, "start": 37.32, "end": 39.32, "text": " I would say that's a primary purpose", "tokens": [50906, 286, 576, 584, 300, 311, 257, 6194, 4334, 51006], "temperature": 0.0, "avg_logprob": -0.21455692208331564, "compression_ratio": 1.5982905982905984, "no_speech_prob": 0.010318144224584103}, {"id": 8, "seek": 2648, "start": 39.760000000000005, "end": 46.400000000000006, "text": " But the other is of course that there's that sublime effect where by me trying to teach someone a", "tokens": [51028, 583, 264, 661, 307, 295, 1164, 300, 456, 311, 300, 1422, 40941, 1802, 689, 538, 385, 1382, 281, 2924, 1580, 257, 51360], "temperature": 0.0, "avg_logprob": -0.21455692208331564, "compression_ratio": 1.5982905982905984, "no_speech_prob": 0.010318144224584103}, {"id": 9, "seek": 2648, "start": 46.96, "end": 48.96, "text": " concept that I really", "tokens": [51388, 3410, 300, 286, 534, 51488], "temperature": 0.0, "avg_logprob": -0.21455692208331564, "compression_ratio": 1.5982905982905984, "no_speech_prob": 0.010318144224584103}, {"id": 10, "seek": 2648, "start": 49.36, "end": 52.32, "text": " Fundamentally don't still properly grok or understand", "tokens": [51508, 13493, 2466, 379, 500, 380, 920, 6108, 4634, 74, 420, 1223, 51656], "temperature": 0.0, "avg_logprob": -0.21455692208331564, "compression_ratio": 1.5982905982905984, "no_speech_prob": 0.010318144224584103}, {"id": 11, "seek": 5232, "start": 53.24, "end": 59.8, "text": " Paradoxically, I understand it better. So yep, it's it is sublime indeed and it works well", "tokens": [50410, 3457, 23029, 984, 11, 286, 1223, 309, 1101, 13, 407, 18633, 11, 309, 311, 309, 307, 1422, 40941, 6451, 293, 309, 1985, 731, 50738], "temperature": 0.0, "avg_logprob": -0.18863435089588165, "compression_ratio": 1.6527777777777777, "no_speech_prob": 0.014058079570531845}, {"id": 12, "seek": 5232, "start": 60.68, "end": 64.44, "text": " Say all that without further ado, let's get started. So as per usual", "tokens": [50782, 6463, 439, 300, 1553, 3052, 22450, 11, 718, 311, 483, 1409, 13, 407, 382, 680, 7713, 50970], "temperature": 0.0, "avg_logprob": -0.18863435089588165, "compression_ratio": 1.6527777777777777, "no_speech_prob": 0.014058079570531845}, {"id": 13, "seek": 5232, "start": 64.44, "end": 67.38, "text": " I'm gonna repeat the introduction that I've sort of", "tokens": [50970, 286, 478, 799, 7149, 264, 9339, 300, 286, 600, 1333, 295, 51117], "temperature": 0.0, "avg_logprob": -0.18863435089588165, "compression_ratio": 1.6527777777777777, "no_speech_prob": 0.014058079570531845}, {"id": 14, "seek": 5232, "start": 68.08, "end": 73.2, "text": " Repeated in all the other episodes. I just feel like I need to do that kind of due diligence as a sort of ethical duty", "tokens": [51152, 24927, 770, 294, 439, 264, 661, 9313, 13, 286, 445, 841, 411, 286, 643, 281, 360, 300, 733, 295, 3462, 40046, 382, 257, 1333, 295, 18890, 9776, 51408], "temperature": 0.0, "avg_logprob": -0.18863435089588165, "compression_ratio": 1.6527777777777777, "no_speech_prob": 0.014058079570531845}, {"id": 15, "seek": 5232, "start": 73.2, "end": 74.48, "text": " Let's say", "tokens": [51408, 961, 311, 584, 51472], "temperature": 0.0, "avg_logprob": -0.18863435089588165, "compression_ratio": 1.6527777777777777, "no_speech_prob": 0.014058079570531845}, {"id": 16, "seek": 5232, "start": 74.48, "end": 79.32, "text": " So if you do want to skip it, of course, please go ahead because I'm just repeating the same old points", "tokens": [51472, 407, 498, 291, 360, 528, 281, 10023, 309, 11, 295, 1164, 11, 1767, 352, 2286, 570, 286, 478, 445, 18617, 264, 912, 1331, 2793, 51714], "temperature": 0.0, "avg_logprob": -0.18863435089588165, "compression_ratio": 1.6527777777777777, "no_speech_prob": 0.014058079570531845}, {"id": 17, "seek": 5232, "start": 79.32, "end": 81.12, "text": " I don't want to waste your time", "tokens": [51714, 286, 500, 380, 528, 281, 5964, 428, 565, 51804], "temperature": 0.0, "avg_logprob": -0.18863435089588165, "compression_ratio": 1.6527777777777777, "no_speech_prob": 0.014058079570531845}, {"id": 18, "seek": 8112, "start": 81.16000000000001, "end": 86.0, "text": " This is not a tutorial. That is the first caveat in this proviso. This is not a tutorial", "tokens": [50366, 639, 307, 406, 257, 7073, 13, 663, 307, 264, 700, 43012, 294, 341, 1439, 19227, 13, 639, 307, 406, 257, 7073, 50608], "temperature": 0.0, "avg_logprob": -0.23502053566349362, "compression_ratio": 1.6883116883116882, "no_speech_prob": 0.0026725083589553833}, {"id": 19, "seek": 8112, "start": 86.0, "end": 89.0, "text": " I am not a teacher and I certainly am non-expert", "tokens": [50608, 286, 669, 406, 257, 5027, 293, 286, 3297, 669, 2107, 12, 3121, 15346, 50758], "temperature": 0.0, "avg_logprob": -0.23502053566349362, "compression_ratio": 1.6883116883116882, "no_speech_prob": 0.0026725083589553833}, {"id": 20, "seek": 8112, "start": 89.56, "end": 94.32000000000001, "text": " in fact a point that I've been repeating ad nauseam is that the more I've", "tokens": [50786, 294, 1186, 257, 935, 300, 286, 600, 668, 18617, 614, 34735, 335, 307, 300, 264, 544, 286, 600, 51024], "temperature": 0.0, "avg_logprob": -0.23502053566349362, "compression_ratio": 1.6883116883116882, "no_speech_prob": 0.0026725083589553833}, {"id": 21, "seek": 8112, "start": 95.0, "end": 97.32000000000001, "text": " Understood Java and the concepts", "tokens": [51058, 42832, 10745, 293, 264, 10392, 51174], "temperature": 0.0, "avg_logprob": -0.23502053566349362, "compression_ratio": 1.6883116883116882, "no_speech_prob": 0.0026725083589553833}, {"id": 22, "seek": 8112, "start": 97.88000000000001, "end": 101.68, "text": " He's outlining this book Java and OP in general", "tokens": [51202, 634, 311, 484, 31079, 341, 1446, 10745, 293, 23324, 294, 2674, 51392], "temperature": 0.0, "avg_logprob": -0.23502053566349362, "compression_ratio": 1.6883116883116882, "no_speech_prob": 0.0026725083589553833}, {"id": 23, "seek": 8112, "start": 102.4, "end": 108.08000000000001, "text": " I'm realizing how much of an expert I'm not so that's really interesting and very humbling indeed", "tokens": [51428, 286, 478, 16734, 577, 709, 295, 364, 5844, 286, 478, 406, 370, 300, 311, 534, 1880, 293, 588, 1484, 18262, 6451, 51712], "temperature": 0.0, "avg_logprob": -0.23502053566349362, "compression_ratio": 1.6883116883116882, "no_speech_prob": 0.0026725083589553833}, {"id": 24, "seek": 10808, "start": 108.08, "end": 111.48, "text": " And I don't mean that in a false modest sense. I mean, that's sincerely", "tokens": [50364, 400, 286, 500, 380, 914, 300, 294, 257, 7908, 25403, 2020, 13, 286, 914, 11, 300, 311, 30694, 50534], "temperature": 0.0, "avg_logprob": -0.28694484303298506, "compression_ratio": 1.6563876651982379, "no_speech_prob": 0.012426597997546196}, {"id": 25, "seek": 10808, "start": 112.12, "end": 115.32, "text": " An analogy or yeah, probably an algae", "tokens": [50566, 1107, 21663, 420, 1338, 11, 1391, 364, 32658, 50726], "temperature": 0.0, "avg_logprob": -0.28694484303298506, "compression_ratio": 1.6563876651982379, "no_speech_prob": 0.012426597997546196}, {"id": 26, "seek": 10808, "start": 115.32, "end": 122.24, "text": " I'd like to use to explain what I'm trying to do here is the blind living the blind. I am as naive or perhaps even more", "tokens": [50726, 286, 1116, 411, 281, 764, 281, 2903, 437, 286, 478, 1382, 281, 360, 510, 307, 264, 6865, 2647, 264, 6865, 13, 286, 669, 382, 29052, 420, 4317, 754, 544, 51072], "temperature": 0.0, "avg_logprob": -0.28694484303298506, "compression_ratio": 1.6563876651982379, "no_speech_prob": 0.012426597997546196}, {"id": 27, "seek": 10808, "start": 122.88, "end": 124.72, "text": " blind and", "tokens": [51104, 6865, 293, 51196], "temperature": 0.0, "avg_logprob": -0.28694484303298506, "compression_ratio": 1.6563876651982379, "no_speech_prob": 0.012426597997546196}, {"id": 28, "seek": 10808, "start": 124.72, "end": 126.72, "text": " ignorant and naive and oblivious all of those", "tokens": [51196, 29374, 293, 29052, 293, 47039, 851, 439, 295, 729, 51296], "temperature": 0.0, "avg_logprob": -0.28694484303298506, "compression_ratio": 1.6563876651982379, "no_speech_prob": 0.012426597997546196}, {"id": 29, "seek": 10808, "start": 127.32, "end": 129.32, "text": " things", "tokens": [51326, 721, 51426], "temperature": 0.0, "avg_logprob": -0.28694484303298506, "compression_ratio": 1.6563876651982379, "no_speech_prob": 0.012426597997546196}, {"id": 30, "seek": 10808, "start": 130.04, "end": 136.6, "text": " As as much as you are and yeah, even probably even more. So this is not my tutorial", "tokens": [51462, 1018, 382, 709, 382, 291, 366, 293, 1338, 11, 754, 1391, 754, 544, 13, 407, 341, 307, 406, 452, 7073, 51790], "temperature": 0.0, "avg_logprob": -0.28694484303298506, "compression_ratio": 1.6563876651982379, "no_speech_prob": 0.012426597997546196}, {"id": 31, "seek": 13660, "start": 136.6, "end": 138.6, "text": " I'm not trying to teach you anything", "tokens": [50364, 286, 478, 406, 1382, 281, 2924, 291, 1340, 50464], "temperature": 0.0, "avg_logprob": -0.29341262277930674, "compression_ratio": 1.5362903225806452, "no_speech_prob": 0.009555715136229992}, {"id": 32, "seek": 13660, "start": 138.84, "end": 142.92, "text": " So whatever I say, please do take it with a grain of salt. This is a", "tokens": [50476, 407, 2035, 286, 584, 11, 1767, 360, 747, 309, 365, 257, 12837, 295, 5139, 13, 639, 307, 257, 50680], "temperature": 0.0, "avg_logprob": -0.29341262277930674, "compression_ratio": 1.5362903225806452, "no_speech_prob": 0.009555715136229992}, {"id": 33, "seek": 13660, "start": 144.07999999999998, "end": 144.88, "text": " Exploratory", "tokens": [50738, 12514, 284, 4745, 50778], "temperature": 0.0, "avg_logprob": -0.29341262277930674, "compression_ratio": 1.5362903225806452, "no_speech_prob": 0.009555715136229992}, {"id": 34, "seek": 13660, "start": 144.88, "end": 149.32, "text": " Disquisition another analogy. I've been using as what one would see in a", "tokens": [50778, 4208, 15398, 849, 1071, 21663, 13, 286, 600, 668, 1228, 382, 437, 472, 576, 536, 294, 257, 51000], "temperature": 0.0, "avg_logprob": -0.29341262277930674, "compression_ratio": 1.5362903225806452, "no_speech_prob": 0.009555715136229992}, {"id": 35, "seek": 13660, "start": 150.28, "end": 153.4, "text": " University tutorial where we've got a tutor", "tokens": [51048, 3535, 7073, 689, 321, 600, 658, 257, 35613, 51204], "temperature": 0.0, "avg_logprob": -0.29341262277930674, "compression_ratio": 1.5362903225806452, "no_speech_prob": 0.009555715136229992}, {"id": 36, "seek": 13660, "start": 154.72, "end": 158.28, "text": " bunch of students trying to make sense of and understand a", "tokens": [51270, 3840, 295, 1731, 1382, 281, 652, 2020, 295, 293, 1223, 257, 51448], "temperature": 0.0, "avg_logprob": -0.29341262277930674, "compression_ratio": 1.5362903225806452, "no_speech_prob": 0.009555715136229992}, {"id": 37, "seek": 13660, "start": 159.04, "end": 164.28, "text": " problem statement or some some programming principle, which is why unequivocally I will", "tokens": [51486, 1154, 5629, 420, 512, 512, 9410, 8665, 11, 597, 307, 983, 2251, 358, 592, 905, 379, 286, 486, 51748], "temperature": 0.0, "avg_logprob": -0.29341262277930674, "compression_ratio": 1.5362903225806452, "no_speech_prob": 0.009555715136229992}, {"id": 38, "seek": 16428, "start": 164.8, "end": 168.76, "text": " Inevitably make mistakes. So please point them out not just for my sake", "tokens": [50390, 682, 68, 10398, 1188, 652, 8038, 13, 407, 1767, 935, 552, 484, 406, 445, 337, 452, 9717, 50588], "temperature": 0.0, "avg_logprob": -0.23317899409028672, "compression_ratio": 1.5701754385964912, "no_speech_prob": 0.013017777353525162}, {"id": 39, "seek": 16428, "start": 168.76, "end": 174.36, "text": " But even for anyone that's watching these videos if I do make a very fundamental", "tokens": [50588, 583, 754, 337, 2878, 300, 311, 1976, 613, 2145, 498, 286, 360, 652, 257, 588, 8088, 50868], "temperature": 0.0, "avg_logprob": -0.23317899409028672, "compression_ratio": 1.5701754385964912, "no_speech_prob": 0.013017777353525162}, {"id": 40, "seek": 16428, "start": 175.2, "end": 177.2, "text": " Crucial mistake", "tokens": [50910, 13586, 1013, 6146, 51010], "temperature": 0.0, "avg_logprob": -0.23317899409028672, "compression_ratio": 1.5701754385964912, "no_speech_prob": 0.013017777353525162}, {"id": 41, "seek": 16428, "start": 177.2, "end": 180.24, "text": " I'll try my best to be rectified by leaving a comment myself", "tokens": [51010, 286, 603, 853, 452, 1151, 281, 312, 11048, 2587, 538, 5012, 257, 2871, 2059, 51162], "temperature": 0.0, "avg_logprob": -0.23317899409028672, "compression_ratio": 1.5701754385964912, "no_speech_prob": 0.013017777353525162}, {"id": 42, "seek": 16428, "start": 180.24, "end": 185.4, "text": " But if you do pick it up, I shall pin those comments just so that I don't mislead anyone", "tokens": [51162, 583, 498, 291, 360, 1888, 309, 493, 11, 286, 4393, 5447, 729, 3053, 445, 370, 300, 286, 500, 380, 3346, 306, 345, 2878, 51420], "temperature": 0.0, "avg_logprob": -0.23317899409028672, "compression_ratio": 1.5701754385964912, "no_speech_prob": 0.013017777353525162}, {"id": 43, "seek": 16428, "start": 186.92000000000002, "end": 188.92000000000002, "text": " With any", "tokens": [51496, 2022, 604, 51596], "temperature": 0.0, "avg_logprob": -0.23317899409028672, "compression_ratio": 1.5701754385964912, "no_speech_prob": 0.013017777353525162}, {"id": 44, "seek": 16428, "start": 190.16, "end": 192.4, "text": " Fake news to use a politically", "tokens": [51658, 40469, 2583, 281, 764, 257, 21154, 51770], "temperature": 0.0, "avg_logprob": -0.23317899409028672, "compression_ratio": 1.5701754385964912, "no_speech_prob": 0.013017777353525162}, {"id": 45, "seek": 19240, "start": 193.4, "end": 200.64000000000001, "text": " Overloaded term and of course as this is a programming video series all the code that I've been using for this effective Java series", "tokens": [50414, 4886, 2907, 292, 1433, 293, 295, 1164, 382, 341, 307, 257, 9410, 960, 2638, 439, 264, 3089, 300, 286, 600, 668, 1228, 337, 341, 4942, 10745, 2638, 50776], "temperature": 0.0, "avg_logprob": -0.22576743998426071, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.02886243350803852}, {"id": 46, "seek": 19240, "start": 200.64000000000001, "end": 205.16, "text": " It's available on my GitHub. I've got a separate repository for each item and", "tokens": [50776, 467, 311, 2435, 322, 452, 23331, 13, 286, 600, 658, 257, 4994, 25841, 337, 1184, 3174, 293, 51002], "temperature": 0.0, "avg_logprob": -0.22576743998426071, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.02886243350803852}, {"id": 47, "seek": 19240, "start": 206.28, "end": 209.64000000000001, "text": " As I go through these all the code will be published here", "tokens": [51058, 1018, 286, 352, 807, 613, 439, 264, 3089, 486, 312, 6572, 510, 51226], "temperature": 0.0, "avg_logprob": -0.22576743998426071, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.02886243350803852}, {"id": 48, "seek": 19240, "start": 209.92000000000002, "end": 214.28, "text": " Anyway, now that we got the proviso out of the way, let's get started with item number six", "tokens": [51240, 5684, 11, 586, 300, 321, 658, 264, 1439, 19227, 484, 295, 264, 636, 11, 718, 311, 483, 1409, 365, 3174, 1230, 2309, 51458], "temperature": 0.0, "avg_logprob": -0.22576743998426071, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.02886243350803852}, {"id": 49, "seek": 19240, "start": 214.84, "end": 216.84, "text": " where Joshua block states", "tokens": [51486, 689, 24005, 3461, 4368, 51586], "temperature": 0.0, "avg_logprob": -0.22576743998426071, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.02886243350803852}, {"id": 50, "seek": 21684, "start": 217.44, "end": 219.44, "text": " Avoid creating", "tokens": [50394, 41061, 4084, 50494], "temperature": 0.0, "avg_logprob": -0.30269716183344525, "compression_ratio": 1.552, "no_speech_prob": 0.03112923912703991}, {"id": 51, "seek": 21684, "start": 219.44, "end": 222.64000000000001, "text": " unnecessary objects and this is quite an interesting one because", "tokens": [50494, 19350, 6565, 293, 341, 307, 1596, 364, 1880, 472, 570, 50654], "temperature": 0.0, "avg_logprob": -0.30269716183344525, "compression_ratio": 1.552, "no_speech_prob": 0.03112923912703991}, {"id": 52, "seek": 21684, "start": 223.6, "end": 226.84, "text": " I certainly am guilty of doing this of making these mistakes", "tokens": [50702, 286, 3297, 669, 12341, 295, 884, 341, 295, 1455, 613, 8038, 50864], "temperature": 0.0, "avg_logprob": -0.30269716183344525, "compression_ratio": 1.552, "no_speech_prob": 0.03112923912703991}, {"id": 53, "seek": 21684, "start": 227.6, "end": 231.12, "text": " So it's it's valuable and worth our time. I think that's", "tokens": [50902, 407, 309, 311, 309, 311, 8263, 293, 3163, 527, 565, 13, 286, 519, 300, 311, 51078], "temperature": 0.0, "avg_logprob": -0.30269716183344525, "compression_ratio": 1.552, "no_speech_prob": 0.03112923912703991}, {"id": 54, "seek": 21684, "start": 231.88, "end": 235.64000000000001, "text": " Java or generally OOP programmers to", "tokens": [51116, 10745, 420, 5101, 422, 12059, 41504, 281, 51304], "temperature": 0.0, "avg_logprob": -0.30269716183344525, "compression_ratio": 1.552, "no_speech_prob": 0.03112923912703991}, {"id": 55, "seek": 21684, "start": 236.24, "end": 241.96, "text": " Understand why, you know, just sort of creating objects at a hawk without putting any thought into it", "tokens": [51334, 26093, 983, 11, 291, 458, 11, 445, 1333, 295, 4084, 6565, 412, 257, 33634, 74, 1553, 3372, 604, 1194, 666, 309, 51620], "temperature": 0.0, "avg_logprob": -0.30269716183344525, "compression_ratio": 1.552, "no_speech_prob": 0.03112923912703991}, {"id": 56, "seek": 21684, "start": 242.12, "end": 245.16, "text": " There's a bad idea and perhaps even an anti-pattern", "tokens": [51628, 821, 311, 257, 1578, 1558, 293, 4317, 754, 364, 6061, 12, 79, 1161, 77, 51780], "temperature": 0.0, "avg_logprob": -0.30269716183344525, "compression_ratio": 1.552, "no_speech_prob": 0.03112923912703991}, {"id": 57, "seek": 24516, "start": 245.76, "end": 249.88, "text": " Of course, this we are still in chapter 2 in creating and destroying objects", "tokens": [50394, 2720, 1164, 11, 341, 321, 366, 920, 294, 7187, 568, 294, 4084, 293, 19926, 6565, 50600], "temperature": 0.0, "avg_logprob": -0.20731512705485025, "compression_ratio": 1.6007905138339922, "no_speech_prob": 0.0016482608625665307}, {"id": 58, "seek": 24516, "start": 250.28, "end": 256.2, "text": " So before we get to any of the content in the book, I kind of want to get some fundamentals real", "tokens": [50620, 407, 949, 321, 483, 281, 604, 295, 264, 2701, 294, 264, 1446, 11, 286, 733, 295, 528, 281, 483, 512, 29505, 957, 50916], "temperature": 0.0, "avg_logprob": -0.20731512705485025, "compression_ratio": 1.6007905138339922, "no_speech_prob": 0.0016482608625665307}, {"id": 59, "seek": 24516, "start": 256.92, "end": 258.92, "text": " OOP basics out of the way", "tokens": [50952, 422, 12059, 14688, 484, 295, 264, 636, 51052], "temperature": 0.0, "avg_logprob": -0.20731512705485025, "compression_ratio": 1.6007905138339922, "no_speech_prob": 0.0016482608625665307}, {"id": 60, "seek": 24516, "start": 259.44, "end": 261.76, "text": " Look, if you don't know what objects are this", "tokens": [51078, 2053, 11, 498, 291, 500, 380, 458, 437, 6565, 366, 341, 51194], "temperature": 0.0, "avg_logprob": -0.20731512705485025, "compression_ratio": 1.6007905138339922, "no_speech_prob": 0.0016482608625665307}, {"id": 61, "seek": 24516, "start": 262.64, "end": 268.24, "text": " Video series really probably is a bit above your level. I'd say go and watch some basic", "tokens": [51238, 9777, 2638, 534, 1391, 307, 257, 857, 3673, 428, 1496, 13, 286, 1116, 584, 352, 293, 1159, 512, 3875, 51518], "temperature": 0.0, "avg_logprob": -0.20731512705485025, "compression_ratio": 1.6007905138339922, "no_speech_prob": 0.0016482608625665307}, {"id": 62, "seek": 24516, "start": 269.04, "end": 273.72, "text": " OOP fundamental videos on YouTube just watch like a basic tutorial, but", "tokens": [51558, 422, 12059, 8088, 2145, 322, 3088, 445, 1159, 411, 257, 3875, 7073, 11, 457, 51792], "temperature": 0.0, "avg_logprob": -0.20731512705485025, "compression_ratio": 1.6007905138339922, "no_speech_prob": 0.0016482608625665307}, {"id": 63, "seek": 27372, "start": 274.20000000000005, "end": 282.08000000000004, "text": " The definition we all hear of an object is that it is an instance of a class and the class is what acts as a blueprint", "tokens": [50388, 440, 7123, 321, 439, 1568, 295, 364, 2657, 307, 300, 309, 307, 364, 5197, 295, 257, 1508, 293, 264, 1508, 307, 437, 10672, 382, 257, 35868, 50782], "temperature": 0.0, "avg_logprob": -0.2644401391347249, "compression_ratio": 1.6727272727272726, "no_speech_prob": 0.005219211336225271}, {"id": 64, "seek": 27372, "start": 282.44000000000005, "end": 284.44000000000005, "text": " as to how it defines", "tokens": [50800, 382, 281, 577, 309, 23122, 50900], "temperature": 0.0, "avg_logprob": -0.2644401391347249, "compression_ratio": 1.6727272727272726, "no_speech_prob": 0.005219211336225271}, {"id": 65, "seek": 27372, "start": 285.36, "end": 289.0, "text": " How an object behaves when it is instantiated", "tokens": [50946, 1012, 364, 2657, 36896, 562, 309, 307, 9836, 72, 770, 51128], "temperature": 0.0, "avg_logprob": -0.2644401391347249, "compression_ratio": 1.6727272727272726, "no_speech_prob": 0.005219211336225271}, {"id": 66, "seek": 27372, "start": 289.6, "end": 295.0, "text": " but something a bit more formal is the definition by the oracle docs and", "tokens": [51158, 457, 746, 257, 857, 544, 9860, 307, 264, 7123, 538, 264, 420, 7041, 45623, 293, 51428], "temperature": 0.0, "avg_logprob": -0.2644401391347249, "compression_ratio": 1.6727272727272726, "no_speech_prob": 0.005219211336225271}, {"id": 67, "seek": 27372, "start": 295.76000000000005, "end": 297.76000000000005, "text": " He goes like this", "tokens": [51466, 634, 1709, 411, 341, 51566], "temperature": 0.0, "avg_logprob": -0.2644401391347249, "compression_ratio": 1.6727272727272726, "no_speech_prob": 0.005219211336225271}, {"id": 68, "seek": 29776, "start": 298.0, "end": 303.92, "text": " Software objects are conceptually similar to real-world objects. That is true something. I truly", "tokens": [50376, 27428, 6565, 366, 3410, 671, 2531, 281, 957, 12, 13217, 6565, 13, 663, 307, 2074, 746, 13, 286, 4908, 50672], "temperature": 0.0, "avg_logprob": -0.2806754302978516, "compression_ratio": 1.6007462686567164, "no_speech_prob": 0.01825825870037079}, {"id": 69, "seek": 29776, "start": 304.36, "end": 309.71999999999997, "text": " Admire and appreciate about object oriented programming. I think it's brilliant that they've created that connection", "tokens": [50694, 46292, 621, 293, 4449, 466, 2657, 21841, 9410, 13, 286, 519, 309, 311, 10248, 300, 436, 600, 2942, 300, 4984, 50962], "temperature": 0.0, "avg_logprob": -0.2806754302978516, "compression_ratio": 1.6007462686567164, "no_speech_prob": 0.01825825870037079}, {"id": 70, "seek": 29776, "start": 310.08, "end": 312.92, "text": " In fact, sorry to go off on a tangent here", "tokens": [50980, 682, 1186, 11, 2597, 281, 352, 766, 322, 257, 27747, 510, 51122], "temperature": 0.0, "avg_logprob": -0.2806754302978516, "compression_ratio": 1.6007462686567164, "no_speech_prob": 0.01825825870037079}, {"id": 71, "seek": 29776, "start": 313.59999999999997, "end": 315.59999999999997, "text": " if you do start", "tokens": [51156, 498, 291, 360, 722, 51256], "temperature": 0.0, "avg_logprob": -0.2806754302978516, "compression_ratio": 1.6007462686567164, "no_speech_prob": 0.01825825870037079}, {"id": 72, "seek": 29776, "start": 316.48, "end": 321.92, "text": " Following some of the design patents a bit more seriously so for instance the 23 patents", "tokens": [51300, 19192, 512, 295, 264, 1715, 38142, 257, 857, 544, 6638, 370, 337, 5197, 264, 6673, 38142, 51572], "temperature": 0.0, "avg_logprob": -0.2806754302978516, "compression_ratio": 1.6007462686567164, "no_speech_prob": 0.01825825870037079}, {"id": 73, "seek": 29776, "start": 322.68, "end": 326.15999999999997, "text": " popularized by the Gang of Four you'd see a lot of those patents to", "tokens": [51610, 3743, 1602, 538, 264, 17984, 295, 7451, 291, 1116, 536, 257, 688, 295, 729, 38142, 281, 51784], "temperature": 0.0, "avg_logprob": -0.2806754302978516, "compression_ratio": 1.6007462686567164, "no_speech_prob": 0.01825825870037079}, {"id": 74, "seek": 32616, "start": 326.88000000000005, "end": 332.04, "text": " Have many deep connections to engineering patents in the world", "tokens": [50400, 3560, 867, 2452, 9271, 281, 7043, 38142, 294, 264, 1002, 50658], "temperature": 0.0, "avg_logprob": -0.2904628471091942, "compression_ratio": 1.7647058823529411, "no_speech_prob": 0.005640985444188118}, {"id": 75, "seek": 32616, "start": 332.8, "end": 340.36, "text": " That's let's say not the conventional. Sorry the the the the conventional world which doesn't invoke which doesn't", "tokens": [50696, 663, 311, 718, 311, 584, 406, 264, 16011, 13, 4919, 264, 264, 264, 264, 16011, 1002, 597, 1177, 380, 41117, 597, 1177, 380, 51074], "temperature": 0.0, "avg_logprob": -0.2904628471091942, "compression_ratio": 1.7647058823529411, "no_speech_prob": 0.005640985444188118}, {"id": 76, "seek": 32616, "start": 341.16, "end": 346.52000000000004, "text": " Attain to software engineering, but sort of the let's say civil engineering or some other kinds of engineering", "tokens": [51114, 7298, 491, 281, 4722, 7043, 11, 457, 1333, 295, 264, 718, 311, 584, 5605, 7043, 420, 512, 661, 3685, 295, 7043, 51382], "temperature": 0.0, "avg_logprob": -0.2904628471091942, "compression_ratio": 1.7647058823529411, "no_speech_prob": 0.005640985444188118}, {"id": 77, "seek": 32616, "start": 347.28000000000003, "end": 350.64000000000004, "text": " Anyway, sorry. Sorry. I'm going off on a tangent back to the definition", "tokens": [51420, 5684, 11, 2597, 13, 4919, 13, 286, 478, 516, 766, 322, 257, 27747, 646, 281, 264, 7123, 51588], "temperature": 0.0, "avg_logprob": -0.2904628471091942, "compression_ratio": 1.7647058823529411, "no_speech_prob": 0.005640985444188118}, {"id": 78, "seek": 35064, "start": 350.8, "end": 357.59999999999997, "text": " Software objects are conceptually similar to real-world objects. They too consist of state and related behavior and", "tokens": [50372, 27428, 6565, 366, 3410, 671, 2531, 281, 957, 12, 13217, 6565, 13, 814, 886, 4603, 295, 1785, 293, 4077, 5223, 293, 50712], "temperature": 0.0, "avg_logprob": -0.26593975444416423, "compression_ratio": 1.7583333333333333, "no_speech_prob": 0.00940971914678812}, {"id": 79, "seek": 35064, "start": 358.44, "end": 361.44, "text": " Objects totes so it's state in fields", "tokens": [50754, 24753, 82, 1993, 279, 370, 309, 311, 1785, 294, 7909, 50904], "temperature": 0.0, "avg_logprob": -0.26593975444416423, "compression_ratio": 1.7583333333333333, "no_speech_prob": 0.00940971914678812}, {"id": 80, "seek": 35064, "start": 361.59999999999997, "end": 370.24, "text": " Which are variables in some languages and exposes its behavior through methods of course and we shall see a few examples of that in this item", "tokens": [50912, 3013, 366, 9102, 294, 512, 8650, 293, 1278, 4201, 1080, 5223, 807, 7150, 295, 1164, 293, 321, 4393, 536, 257, 1326, 5110, 295, 300, 294, 341, 3174, 51344], "temperature": 0.0, "avg_logprob": -0.26593975444416423, "compression_ratio": 1.7583333333333333, "no_speech_prob": 0.00940971914678812}, {"id": 81, "seek": 35064, "start": 370.96, "end": 372.96, "text": " Which are called functions in some languages", "tokens": [51380, 3013, 366, 1219, 6828, 294, 512, 8650, 51480], "temperature": 0.0, "avg_logprob": -0.26593975444416423, "compression_ratio": 1.7583333333333333, "no_speech_prob": 0.00940971914678812}, {"id": 82, "seek": 35064, "start": 373.8, "end": 379.12, "text": " methods operate on an object's internal state and serves as the primary mechanism", "tokens": [51522, 7150, 9651, 322, 364, 2657, 311, 6920, 1785, 293, 13451, 382, 264, 6194, 7513, 51788], "temperature": 0.0, "avg_logprob": -0.26593975444416423, "compression_ratio": 1.7583333333333333, "no_speech_prob": 0.00940971914678812}, {"id": 83, "seek": 37912, "start": 379.88, "end": 381.88, "text": " for object-to-object communication", "tokens": [50402, 337, 2657, 12, 1353, 12, 41070, 6101, 50502], "temperature": 0.0, "avg_logprob": -0.24014637516994103, "compression_ratio": 1.645985401459854, "no_speech_prob": 0.022615639492869377}, {"id": 84, "seek": 37912, "start": 382.84000000000003, "end": 390.72, "text": " Hiding internal state and requiring all interaction to be performed through an object's methods is known as data", "tokens": [50550, 389, 2819, 6920, 1785, 293, 24165, 439, 9285, 281, 312, 10332, 807, 364, 2657, 311, 7150, 307, 2570, 382, 1412, 50944], "temperature": 0.0, "avg_logprob": -0.24014637516994103, "compression_ratio": 1.645985401459854, "no_speech_prob": 0.022615639492869377}, {"id": 85, "seek": 37912, "start": 391.36, "end": 395.6, "text": " Encapsulation a fundamental principle of OOP or object going to programming", "tokens": [50976, 2193, 496, 1878, 2776, 257, 8088, 8665, 295, 422, 12059, 420, 2657, 516, 281, 9410, 51188], "temperature": 0.0, "avg_logprob": -0.24014637516994103, "compression_ratio": 1.645985401459854, "no_speech_prob": 0.022615639492869377}, {"id": 86, "seek": 37912, "start": 395.6, "end": 401.52, "text": " So once again, if you don't know what encapsulation is what inheritance is those really fundamental ideas in OOP", "tokens": [51188, 407, 1564, 797, 11, 498, 291, 500, 380, 458, 437, 38745, 2776, 307, 437, 32122, 307, 729, 534, 8088, 3487, 294, 422, 12059, 51484], "temperature": 0.0, "avg_logprob": -0.24014637516994103, "compression_ratio": 1.645985401459854, "no_speech_prob": 0.022615639492869377}, {"id": 87, "seek": 37912, "start": 401.52, "end": 404.24, "text": " I think this video is a bit above your level", "tokens": [51484, 286, 519, 341, 960, 307, 257, 857, 3673, 428, 1496, 51620], "temperature": 0.0, "avg_logprob": -0.24014637516994103, "compression_ratio": 1.645985401459854, "no_speech_prob": 0.022615639492869377}, {"id": 88, "seek": 37912, "start": 405.0, "end": 408.84000000000003, "text": " Yeah, so that's probably should be caveat for this item in particular", "tokens": [51658, 865, 11, 370, 300, 311, 1391, 820, 312, 43012, 337, 341, 3174, 294, 1729, 51850], "temperature": 0.0, "avg_logprob": -0.24014637516994103, "compression_ratio": 1.645985401459854, "no_speech_prob": 0.022615639492869377}, {"id": 89, "seek": 40912, "start": 409.56, "end": 416.28000000000003, "text": " Okay, so now let's try to understand from a JVM and memory management perspective", "tokens": [50386, 1033, 11, 370, 586, 718, 311, 853, 281, 1223, 490, 257, 508, 53, 44, 293, 4675, 4592, 4585, 50722], "temperature": 0.0, "avg_logprob": -0.30026230760799943, "compression_ratio": 1.6026785714285714, "no_speech_prob": 0.0019564274698495865}, {"id": 90, "seek": 40912, "start": 416.28000000000003, "end": 420.2, "text": " Well more from a JVM perspective. We're not gonna go too deeply into memory management", "tokens": [50722, 1042, 544, 490, 257, 508, 53, 44, 4585, 13, 492, 434, 406, 799, 352, 886, 8760, 666, 4675, 4592, 50918], "temperature": 0.0, "avg_logprob": -0.30026230760799943, "compression_ratio": 1.6026785714285714, "no_speech_prob": 0.0019564274698495865}, {"id": 91, "seek": 40912, "start": 420.88, "end": 424.12, "text": " how these objects exist at least", "tokens": [50952, 577, 613, 6565, 2514, 412, 1935, 51114], "temperature": 0.0, "avg_logprob": -0.30026230760799943, "compression_ratio": 1.6026785714285714, "no_speech_prob": 0.0019564274698495865}, {"id": 92, "seek": 40912, "start": 425.4, "end": 433.76, "text": " Apropos the Java virtual machine now again, you would know what the JVMS JVM is what allows to execute Java code on", "tokens": [51178, 8723, 1513, 329, 264, 10745, 6374, 3479, 586, 797, 11, 291, 576, 458, 437, 264, 508, 53, 10288, 508, 53, 44, 307, 437, 4045, 281, 14483, 10745, 3089, 322, 51596], "temperature": 0.0, "avg_logprob": -0.30026230760799943, "compression_ratio": 1.6026785714285714, "no_speech_prob": 0.0019564274698495865}, {"id": 93, "seek": 40912, "start": 434.16, "end": 437.16, "text": " Any any machine, which is what makes Java", "tokens": [51616, 2639, 604, 3479, 11, 597, 307, 437, 1669, 10745, 51766], "temperature": 0.0, "avg_logprob": -0.30026230760799943, "compression_ratio": 1.6026785714285714, "no_speech_prob": 0.0019564274698495865}, {"id": 94, "seek": 43716, "start": 437.96000000000004, "end": 442.56, "text": " Quite popular because it can work on any operating system for instance", "tokens": [50404, 20464, 3743, 570, 309, 393, 589, 322, 604, 7447, 1185, 337, 5197, 50634], "temperature": 0.0, "avg_logprob": -0.30833525990330896, "compression_ratio": 1.5633187772925765, "no_speech_prob": 0.006587232928723097}, {"id": 95, "seek": 43716, "start": 443.36, "end": 444.6, "text": " so", "tokens": [50674, 370, 50736], "temperature": 0.0, "avg_logprob": -0.30833525990330896, "compression_ratio": 1.5633187772925765, "no_speech_prob": 0.006587232928723097}, {"id": 96, "seek": 43716, "start": 444.6, "end": 449.68, "text": " We have the call stack of course. Here's where we make calls or we give instructions", "tokens": [50736, 492, 362, 264, 818, 8630, 295, 1164, 13, 1692, 311, 689, 321, 652, 5498, 420, 321, 976, 9415, 50990], "temperature": 0.0, "avg_logprob": -0.30833525990330896, "compression_ratio": 1.5633187772925765, "no_speech_prob": 0.006587232928723097}, {"id": 97, "seek": 43716, "start": 450.16, "end": 453.52000000000004, "text": " To call different objects and whatnot our different methods. Sorry", "tokens": [51014, 1407, 818, 819, 6565, 293, 25882, 527, 819, 7150, 13, 4919, 51182], "temperature": 0.0, "avg_logprob": -0.30833525990330896, "compression_ratio": 1.5633187772925765, "no_speech_prob": 0.006587232928723097}, {"id": 98, "seek": 43716, "start": 454.68, "end": 462.16, "text": " And the JVM primarily divides the memory into two two spaces or two domains now, of course", "tokens": [51240, 400, 264, 508, 53, 44, 10029, 41347, 264, 4675, 666, 732, 732, 7673, 420, 732, 25514, 586, 11, 295, 1164, 51614], "temperature": 0.0, "avg_logprob": -0.30833525990330896, "compression_ratio": 1.5633187772925765, "no_speech_prob": 0.006587232928723097}, {"id": 99, "seek": 43716, "start": 462.16, "end": 464.48, "text": " Oops, I had the microphone now, of course", "tokens": [51614, 21726, 11, 286, 632, 264, 10952, 586, 11, 295, 1164, 51730], "temperature": 0.0, "avg_logprob": -0.30833525990330896, "compression_ratio": 1.5633187772925765, "no_speech_prob": 0.006587232928723097}, {"id": 100, "seek": 46448, "start": 465.48, "end": 472.44, "text": " It's okay. So firstly, it's the stack memory and the heap space now, of course these two high-level", "tokens": [50414, 467, 311, 1392, 13, 407, 27376, 11, 309, 311, 264, 8630, 4675, 293, 264, 33591, 1901, 586, 11, 295, 1164, 613, 732, 1090, 12, 12418, 50762], "temperature": 0.0, "avg_logprob": -0.23247980517010355, "compression_ratio": 1.625, "no_speech_prob": 0.0034291893243789673}, {"id": 101, "seek": 46448, "start": 475.04, "end": 482.20000000000005, "text": " Demarcations also further divided into let's say sub-domains so the heap space for instance would have the dynamic meta space", "tokens": [50892, 4686, 40088, 763, 611, 3052, 6666, 666, 718, 311, 584, 1422, 12, 4121, 2315, 370, 264, 33591, 1901, 337, 5197, 576, 362, 264, 8546, 19616, 1901, 51250], "temperature": 0.0, "avg_logprob": -0.23247980517010355, "compression_ratio": 1.625, "no_speech_prob": 0.0034291893243789673}, {"id": 102, "seek": 46448, "start": 483.0, "end": 485.72, "text": " Which holds static content and we'll get to that too", "tokens": [51290, 3013, 9190, 13437, 2701, 293, 321, 603, 483, 281, 300, 886, 51426], "temperature": 0.0, "avg_logprob": -0.23247980517010355, "compression_ratio": 1.625, "no_speech_prob": 0.0034291893243789673}, {"id": 103, "seek": 46448, "start": 487.52000000000004, "end": 492.0, "text": " So the stack memory is used for static memory allocation, that's correct", "tokens": [51516, 407, 264, 8630, 4675, 307, 1143, 337, 13437, 4675, 27599, 11, 300, 311, 3006, 51740], "temperature": 0.0, "avg_logprob": -0.23247980517010355, "compression_ratio": 1.625, "no_speech_prob": 0.0034291893243789673}, {"id": 104, "seek": 49200, "start": 492.0, "end": 497.64, "text": " What static memory allocation sort of means for all intents and purposes is that an object created?", "tokens": [50364, 708, 13437, 4675, 27599, 1333, 295, 1355, 337, 439, 560, 791, 293, 9932, 307, 300, 364, 2657, 2942, 30, 50646], "temperature": 0.0, "avg_logprob": -0.2498721461142263, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.003763617482036352}, {"id": 105, "seek": 49200, "start": 498.04, "end": 503.12, "text": " Statically, let's say once it's in memory. It will remain in that state", "tokens": [50666, 16249, 984, 11, 718, 311, 584, 1564, 309, 311, 294, 4675, 13, 467, 486, 6222, 294, 300, 1785, 50920], "temperature": 0.0, "avg_logprob": -0.2498721461142263, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.003763617482036352}, {"id": 106, "seek": 49200, "start": 503.64, "end": 508.96, "text": " Throughout the application lifecycle, whereas dynamic objects change state", "tokens": [50946, 22775, 264, 3861, 45722, 11, 9735, 8546, 6565, 1319, 1785, 51212], "temperature": 0.0, "avg_logprob": -0.2498721461142263, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.003763617482036352}, {"id": 107, "seek": 49200, "start": 508.96, "end": 512.56, "text": " They can change and they don't live in the stack memory", "tokens": [51212, 814, 393, 1319, 293, 436, 500, 380, 1621, 294, 264, 8630, 4675, 51392], "temperature": 0.0, "avg_logprob": -0.2498721461142263, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.003763617482036352}, {"id": 108, "seek": 49200, "start": 513.44, "end": 514.64, "text": " so", "tokens": [51436, 370, 51496], "temperature": 0.0, "avg_logprob": -0.2498721461142263, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.003763617482036352}, {"id": 109, "seek": 49200, "start": 514.64, "end": 516.64, "text": " Also the the stack memory", "tokens": [51496, 2743, 264, 264, 8630, 4675, 51596], "temperature": 0.0, "avg_logprob": -0.2498721461142263, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.003763617482036352}, {"id": 110, "seek": 49200, "start": 517.04, "end": 520.96, "text": " Again pretending to the JVM and Java holds primitive values", "tokens": [51616, 3764, 22106, 281, 264, 508, 53, 44, 293, 10745, 9190, 28540, 4190, 51812], "temperature": 0.0, "avg_logprob": -0.2498721461142263, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.003763617482036352}, {"id": 111, "seek": 52096, "start": 520.96, "end": 523.9200000000001, "text": " So values like int or char", "tokens": [50364, 407, 4190, 411, 560, 420, 1290, 50512], "temperature": 0.0, "avg_logprob": -0.2720570755004883, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0021150566171854734}, {"id": 112, "seek": 52096, "start": 524.6, "end": 526.6800000000001, "text": " These types live in the static memory", "tokens": [50546, 1981, 3467, 1621, 294, 264, 13437, 4675, 50650], "temperature": 0.0, "avg_logprob": -0.2720570755004883, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0021150566171854734}, {"id": 113, "seek": 52096, "start": 527.48, "end": 530.32, "text": " and of course as I said before it", "tokens": [50690, 293, 295, 1164, 382, 286, 848, 949, 309, 50832], "temperature": 0.0, "avg_logprob": -0.2720570755004883, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0021150566171854734}, {"id": 114, "seek": 52096, "start": 530.84, "end": 533.2, "text": " Well, I don't think I did say that before anyway", "tokens": [50858, 1042, 11, 286, 500, 380, 519, 286, 630, 584, 300, 949, 4033, 50976], "temperature": 0.0, "avg_logprob": -0.2720570755004883, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0021150566171854734}, {"id": 115, "seek": 52096, "start": 533.64, "end": 539.8000000000001, "text": " There are references to dynamic objects that live in the heap space now look all these definitions are fine", "tokens": [50998, 821, 366, 15400, 281, 8546, 6565, 300, 1621, 294, 264, 33591, 1901, 586, 574, 439, 613, 21988, 366, 2489, 51306], "temperature": 0.0, "avg_logprob": -0.2720570755004883, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0021150566171854734}, {"id": 116, "seek": 52096, "start": 540.0400000000001, "end": 543.6, "text": " For starters, but the best way to make sense of it is of course to an example", "tokens": [51318, 1171, 35131, 11, 457, 264, 1151, 636, 281, 652, 2020, 295, 309, 307, 295, 1164, 281, 364, 1365, 51496], "temperature": 0.0, "avg_logprob": -0.2720570755004883, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0021150566171854734}, {"id": 117, "seek": 52096, "start": 544.1600000000001, "end": 548.2, "text": " So if we take person here this in the person method", "tokens": [51524, 407, 498, 321, 747, 954, 510, 341, 294, 264, 954, 3170, 51726], "temperature": 0.0, "avg_logprob": -0.2720570755004883, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0021150566171854734}, {"id": 118, "seek": 52096, "start": 548.8000000000001, "end": 549.9200000000001, "text": " this", "tokens": [51756, 341, 51812], "temperature": 0.0, "avg_logprob": -0.2720570755004883, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0021150566171854734}, {"id": 119, "seek": 54992, "start": 549.9599999999999, "end": 556.36, "text": " Int value that you're passing that would live because it's a primitive type and it's a primitive", "tokens": [50366, 5681, 2158, 300, 291, 434, 8437, 300, 576, 1621, 570, 309, 311, 257, 28540, 2010, 293, 309, 311, 257, 28540, 50686], "temperature": 0.0, "avg_logprob": -0.18269391854604086, "compression_ratio": 1.8790697674418604, "no_speech_prob": 0.0037065334618091583}, {"id": 120, "seek": 54992, "start": 557.3199999999999, "end": 560.68, "text": " Variable that would live in the stack memory", "tokens": [50734, 32511, 712, 300, 576, 1621, 294, 264, 8630, 4675, 50902], "temperature": 0.0, "avg_logprob": -0.18269391854604086, "compression_ratio": 1.8790697674418604, "no_speech_prob": 0.0037065334618091583}, {"id": 121, "seek": 54992, "start": 561.8, "end": 566.04, "text": " Also, I apologize if I did say static memory before I should have said stack memory", "tokens": [50958, 2743, 11, 286, 12328, 498, 286, 630, 584, 13437, 4675, 949, 286, 820, 362, 848, 8630, 4675, 51170], "temperature": 0.0, "avg_logprob": -0.18269391854604086, "compression_ratio": 1.8790697674418604, "no_speech_prob": 0.0037065334618091583}, {"id": 122, "seek": 54992, "start": 566.64, "end": 571.88, "text": " And then string which is a class and it's you know a class you can create an instance of that class", "tokens": [51200, 400, 550, 6798, 597, 307, 257, 1508, 293, 309, 311, 291, 458, 257, 1508, 291, 393, 1884, 364, 5197, 295, 300, 1508, 51462], "temperature": 0.0, "avg_logprob": -0.18269391854604086, "compression_ratio": 1.8790697674418604, "no_speech_prob": 0.0037065334618091583}, {"id": 123, "seek": 54992, "start": 572.56, "end": 577.0799999999999, "text": " What would live in the stack memory in that case wouldn't be the object itself", "tokens": [51496, 708, 576, 1621, 294, 264, 8630, 4675, 294, 300, 1389, 2759, 380, 312, 264, 2657, 2564, 51722], "temperature": 0.0, "avg_logprob": -0.18269391854604086, "compression_ratio": 1.8790697674418604, "no_speech_prob": 0.0037065334618091583}, {"id": 124, "seek": 57708, "start": 577.08, "end": 584.5200000000001, "text": " but rather a memory address or a reference to the actual object which lives in the heap space in the string pool in this instance", "tokens": [50364, 457, 2831, 257, 4675, 2985, 420, 257, 6408, 281, 264, 3539, 2657, 597, 2909, 294, 264, 33591, 1901, 294, 264, 6798, 7005, 294, 341, 5197, 50736], "temperature": 0.0, "avg_logprob": -0.21162162780761717, "compression_ratio": 1.5816733067729083, "no_speech_prob": 0.002714623464271426}, {"id": 125, "seek": 57708, "start": 584.6800000000001, "end": 589.32, "text": " So and that's dynamic its state can change unlike some of the", "tokens": [50744, 407, 293, 300, 311, 8546, 1080, 1785, 393, 1319, 8343, 512, 295, 264, 50976], "temperature": 0.0, "avg_logprob": -0.21162162780761717, "compression_ratio": 1.5816733067729083, "no_speech_prob": 0.002714623464271426}, {"id": 126, "seek": 57708, "start": 590.08, "end": 591.64, "text": " static types", "tokens": [51014, 13437, 3467, 51092], "temperature": 0.0, "avg_logprob": -0.21162162780761717, "compression_ratio": 1.5816733067729083, "no_speech_prob": 0.002714623464271426}, {"id": 127, "seek": 57708, "start": 591.64, "end": 593.0, "text": " so", "tokens": [51092, 370, 51160], "temperature": 0.0, "avg_logprob": -0.21162162780761717, "compression_ratio": 1.5816733067729083, "no_speech_prob": 0.002714623464271426}, {"id": 128, "seek": 57708, "start": 593.0, "end": 598.9200000000001, "text": " Yeah, as I've written down here. There's a few notes. I took just to make sure that I stay on track. It's", "tokens": [51160, 865, 11, 382, 286, 600, 3720, 760, 510, 13, 821, 311, 257, 1326, 5570, 13, 286, 1890, 445, 281, 652, 988, 300, 286, 1754, 322, 2837, 13, 467, 311, 51456], "temperature": 0.0, "avg_logprob": -0.21162162780761717, "compression_ratio": 1.5816733067729083, "no_speech_prob": 0.002714623464271426}, {"id": 129, "seek": 57708, "start": 600.24, "end": 605.6, "text": " It's used for dynamic memory allocation of Java objects and GRE classes at one time", "tokens": [51522, 467, 311, 1143, 337, 8546, 4675, 27599, 295, 10745, 6565, 293, 20830, 5359, 412, 472, 565, 51790], "temperature": 0.0, "avg_logprob": -0.21162162780761717, "compression_ratio": 1.5816733067729083, "no_speech_prob": 0.002714623464271426}, {"id": 130, "seek": 60560, "start": 605.6, "end": 608.16, "text": " So that means when applications running its state can change", "tokens": [50364, 407, 300, 1355, 562, 5821, 2614, 1080, 1785, 393, 1319, 50492], "temperature": 0.0, "avg_logprob": -0.27763497685811606, "compression_ratio": 1.6940639269406392, "no_speech_prob": 0.004263611044734716}, {"id": 131, "seek": 60560, "start": 609.44, "end": 617.48, "text": " Also new objects which sometimes seem to be short-lived live live in the heap space. I shouldn't just say it outright", "tokens": [50556, 2743, 777, 6565, 597, 2171, 1643, 281, 312, 2099, 12, 46554, 1621, 1621, 294, 264, 33591, 1901, 13, 286, 4659, 380, 445, 584, 309, 35189, 50958], "temperature": 0.0, "avg_logprob": -0.27763497685811606, "compression_ratio": 1.6940639269406392, "no_speech_prob": 0.004263611044734716}, {"id": 132, "seek": 60560, "start": 618.0400000000001, "end": 620.0400000000001, "text": " Tends to be short-lived. There are", "tokens": [50986, 314, 2581, 281, 312, 2099, 12, 46554, 13, 821, 366, 51086], "temperature": 0.0, "avg_logprob": -0.27763497685811606, "compression_ratio": 1.6940639269406392, "no_speech_prob": 0.004263611044734716}, {"id": 133, "seek": 60560, "start": 620.6, "end": 623.8000000000001, "text": " some long-lived objects and here's where you know", "tokens": [51114, 512, 938, 12, 46554, 6565, 293, 510, 311, 689, 291, 458, 51274], "temperature": 0.0, "avg_logprob": -0.27763497685811606, "compression_ratio": 1.6940639269406392, "no_speech_prob": 0.004263611044734716}, {"id": 134, "seek": 60560, "start": 624.52, "end": 630.4, "text": " The different algorithms in garbage collection so that that's garbage collection is essentially essentially", "tokens": [51310, 440, 819, 14642, 294, 14150, 5765, 370, 300, 300, 311, 14150, 5765, 307, 4476, 4476, 51604], "temperature": 0.0, "avg_logprob": -0.27763497685811606, "compression_ratio": 1.6940639269406392, "no_speech_prob": 0.004263611044734716}, {"id": 135, "seek": 63040, "start": 630.88, "end": 638.4399999999999, "text": " Memory management here. Here's where different algorithms play a role and allocate objects into you know, like for example the permanent space", "tokens": [50388, 38203, 4592, 510, 13, 1692, 311, 689, 819, 14642, 862, 257, 3090, 293, 35713, 6565, 666, 291, 458, 11, 411, 337, 1365, 264, 10996, 1901, 50766], "temperature": 0.0, "avg_logprob": -0.23056644258045014, "compression_ratio": 1.7201492537313432, "no_speech_prob": 0.02262408286333084}, {"id": 136, "seek": 63040, "start": 638.4399999999999, "end": 642.3199999999999, "text": " I think it used to be called like the nursery different parts of the", "tokens": [50766, 286, 519, 309, 1143, 281, 312, 1219, 411, 264, 37538, 819, 3166, 295, 264, 50960], "temperature": 0.0, "avg_logprob": -0.23056644258045014, "compression_ratio": 1.7201492537313432, "no_speech_prob": 0.02262408286333084}, {"id": 137, "seek": 63040, "start": 643.12, "end": 649.1999999999999, "text": " The heap space. I'm not gonna go into that. This is this this video is gonna be way too long if you're getting to memory management and Java", "tokens": [51000, 440, 33591, 1901, 13, 286, 478, 406, 799, 352, 666, 300, 13, 639, 307, 341, 341, 960, 307, 799, 312, 636, 886, 938, 498, 291, 434, 1242, 281, 4675, 4592, 293, 10745, 51304], "temperature": 0.0, "avg_logprob": -0.23056644258045014, "compression_ratio": 1.7201492537313432, "no_speech_prob": 0.02262408286333084}, {"id": 138, "seek": 63040, "start": 649.72, "end": 651.72, "text": " but the point is", "tokens": [51330, 457, 264, 935, 307, 51430], "temperature": 0.0, "avg_logprob": -0.23056644258045014, "compression_ratio": 1.7201492537313432, "no_speech_prob": 0.02262408286333084}, {"id": 139, "seek": 63040, "start": 651.72, "end": 653.72, "text": " these objects are dynamic and", "tokens": [51430, 613, 6565, 366, 8546, 293, 51530], "temperature": 0.0, "avg_logprob": -0.23056644258045014, "compression_ratio": 1.7201492537313432, "no_speech_prob": 0.02262408286333084}, {"id": 140, "seek": 63040, "start": 654.68, "end": 657.96, "text": " They the references for them are stored again in stack memory", "tokens": [51578, 814, 264, 15400, 337, 552, 366, 12187, 797, 294, 8630, 4675, 51742], "temperature": 0.0, "avg_logprob": -0.23056644258045014, "compression_ratio": 1.7201492537313432, "no_speech_prob": 0.02262408286333084}, {"id": 141, "seek": 65796, "start": 658.96, "end": 660.48, "text": " And", "tokens": [50414, 400, 50490], "temperature": 0.0, "avg_logprob": -0.23811602592468262, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0029343843925744295}, {"id": 142, "seek": 65796, "start": 660.48, "end": 665.5600000000001, "text": " On that note, of course now that we understood sort of how objects exist at a very very high level", "tokens": [50490, 1282, 300, 3637, 11, 295, 1164, 586, 300, 321, 7320, 1333, 295, 577, 6565, 2514, 412, 257, 588, 588, 1090, 1496, 50744], "temperature": 0.0, "avg_logprob": -0.23811602592468262, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0029343843925744295}, {"id": 143, "seek": 65796, "start": 666.0, "end": 668.0, "text": " Pertaining against Java and JVM", "tokens": [50766, 430, 1408, 278, 1970, 10745, 293, 508, 53, 44, 50866], "temperature": 0.0, "avg_logprob": -0.23811602592468262, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0029343843925744295}, {"id": 144, "seek": 65796, "start": 668.2, "end": 674.52, "text": " Let's get to the item and the item essentially is telling us how to reuse objects and why in fact it's better", "tokens": [50876, 961, 311, 483, 281, 264, 3174, 293, 264, 3174, 4476, 307, 3585, 505, 577, 281, 26225, 6565, 293, 983, 294, 1186, 309, 311, 1101, 51192], "temperature": 0.0, "avg_logprob": -0.23811602592468262, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0029343843925744295}, {"id": 145, "seek": 65796, "start": 674.96, "end": 680.2800000000001, "text": " To reuse objects than creating new ones and how doing so will make the code", "tokens": [51214, 1407, 26225, 6565, 813, 4084, 777, 2306, 293, 577, 884, 370, 486, 652, 264, 3089, 51480], "temperature": 0.0, "avg_logprob": -0.23811602592468262, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0029343843925744295}, {"id": 146, "seek": 65796, "start": 680.96, "end": 687.9200000000001, "text": " Cleaner more stylish more professional if you could use that term and even as we shall see with some examples", "tokens": [51514, 18463, 260, 544, 30301, 544, 4843, 498, 291, 727, 764, 300, 1433, 293, 754, 382, 321, 4393, 536, 365, 512, 5110, 51862], "temperature": 0.0, "avg_logprob": -0.23811602592468262, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0029343843925744295}, {"id": 147, "seek": 68796, "start": 688.32, "end": 691.5600000000001, "text": " Make the code run faster and that definitely is a benefit", "tokens": [50382, 4387, 264, 3089, 1190, 4663, 293, 300, 2138, 307, 257, 5121, 50544], "temperature": 0.0, "avg_logprob": -0.19220051464733776, "compression_ratio": 1.6548042704626333, "no_speech_prob": 0.004904190078377724}, {"id": 148, "seek": 68796, "start": 691.5600000000001, "end": 695.9200000000001, "text": " So the book starts off with a rather ridiculous example as what not to do", "tokens": [50544, 407, 264, 1446, 3719, 766, 365, 257, 2831, 11083, 1365, 382, 437, 406, 281, 360, 50762], "temperature": 0.0, "avg_logprob": -0.19220051464733776, "compression_ratio": 1.6548042704626333, "no_speech_prob": 0.004904190078377724}, {"id": 149, "seek": 68796, "start": 695.9200000000001, "end": 702.08, "text": " So as Joshua Block has pointed out he has left the comments in an extreme example of what not to do", "tokens": [50762, 407, 382, 24005, 17500, 575, 10932, 484, 415, 575, 1411, 264, 3053, 294, 364, 8084, 1365, 295, 437, 406, 281, 360, 51070], "temperature": 0.0, "avg_logprob": -0.19220051464733776, "compression_ratio": 1.6548042704626333, "no_speech_prob": 0.004904190078377724}, {"id": 150, "seek": 68796, "start": 702.08, "end": 705.48, "text": " I've never seen this done by any programmer to be honest, but", "tokens": [51070, 286, 600, 1128, 1612, 341, 1096, 538, 604, 32116, 281, 312, 3245, 11, 457, 51240], "temperature": 0.0, "avg_logprob": -0.19220051464733776, "compression_ratio": 1.6548042704626333, "no_speech_prob": 0.004904190078377724}, {"id": 151, "seek": 68796, "start": 706.1600000000001, "end": 713.76, "text": " This certainly isn't something one has to do where when we already have this string. We create another instance by using a new keyword", "tokens": [51274, 639, 3297, 1943, 380, 746, 472, 575, 281, 360, 689, 562, 321, 1217, 362, 341, 6798, 13, 492, 1884, 1071, 5197, 538, 1228, 257, 777, 20428, 51654], "temperature": 0.0, "avg_logprob": -0.19220051464733776, "compression_ratio": 1.6548042704626333, "no_speech_prob": 0.004904190078377724}, {"id": 152, "seek": 68796, "start": 714.52, "end": 717.12, "text": " This is sort of how most of us do it", "tokens": [51692, 639, 307, 1333, 295, 577, 881, 295, 505, 360, 309, 51822], "temperature": 0.0, "avg_logprob": -0.19220051464733776, "compression_ratio": 1.6548042704626333, "no_speech_prob": 0.004904190078377724}, {"id": 153, "seek": 71712, "start": 717.12, "end": 719.12, "text": " So the proper way", "tokens": [50364, 407, 264, 2296, 636, 50464], "temperature": 0.0, "avg_logprob": -0.21111392974853516, "compression_ratio": 1.6391304347826088, "no_speech_prob": 0.002671795664355159}, {"id": 154, "seek": 71712, "start": 719.96, "end": 723.68, "text": " The improved version he calls it, but let's just say it's a proper way and", "tokens": [50506, 440, 9689, 3037, 415, 5498, 309, 11, 457, 718, 311, 445, 584, 309, 311, 257, 2296, 636, 293, 50692], "temperature": 0.0, "avg_logprob": -0.21111392974853516, "compression_ratio": 1.6391304347826088, "no_speech_prob": 0.002671795664355159}, {"id": 155, "seek": 71712, "start": 724.8, "end": 726.8, "text": " Here's what Joshua Block states", "tokens": [50748, 1692, 311, 437, 24005, 17500, 4368, 50848], "temperature": 0.0, "avg_logprob": -0.21111392974853516, "compression_ratio": 1.6391304347826088, "no_speech_prob": 0.002671795664355159}, {"id": 156, "seek": 71712, "start": 727.0, "end": 735.28, "text": " The statement creates a new string instance each time it is executed and none of those objects object creations is necessary because", "tokens": [50858, 440, 5629, 7829, 257, 777, 6798, 5197, 1184, 565, 309, 307, 17577, 293, 6022, 295, 729, 6565, 2657, 37836, 307, 4818, 570, 51272], "temperature": 0.0, "avg_logprob": -0.21111392974853516, "compression_ratio": 1.6391304347826088, "no_speech_prob": 0.002671795664355159}, {"id": 157, "seek": 71712, "start": 735.48, "end": 738.0, "text": " So bikini can live here and", "tokens": [51282, 407, 26730, 3812, 393, 1621, 510, 293, 51408], "temperature": 0.0, "avg_logprob": -0.21111392974853516, "compression_ratio": 1.6391304347826088, "no_speech_prob": 0.002671795664355159}, {"id": 158, "seek": 71712, "start": 739.08, "end": 744.16, "text": " Then it could just point to that all the all the references one one object can exist in the", "tokens": [51462, 1396, 309, 727, 445, 935, 281, 300, 439, 264, 439, 264, 15400, 472, 472, 2657, 393, 2514, 294, 264, 51716], "temperature": 0.0, "avg_logprob": -0.21111392974853516, "compression_ratio": 1.6391304347826088, "no_speech_prob": 0.002671795664355159}, {"id": 159, "seek": 74416, "start": 744.7199999999999, "end": 753.4399999999999, "text": " Heapspace, but if you have this new keyword every single time it's invoked a new object is created and that is a completely inefficient", "tokens": [50392, 634, 2382, 17940, 11, 457, 498, 291, 362, 341, 777, 20428, 633, 2167, 565, 309, 311, 1048, 9511, 257, 777, 2657, 307, 2942, 293, 300, 307, 257, 2584, 43495, 50828], "temperature": 0.0, "avg_logprob": -0.28595569398668075, "compression_ratio": 1.5628140703517588, "no_speech_prob": 0.002672345144674182}, {"id": 160, "seek": 74416, "start": 754.0799999999999, "end": 755.68, "text": " and", "tokens": [50860, 293, 50940], "temperature": 0.0, "avg_logprob": -0.28595569398668075, "compression_ratio": 1.5628140703517588, "no_speech_prob": 0.002672345144674182}, {"id": 161, "seek": 74416, "start": 755.68, "end": 757.68, "text": " ridiculous waste of space and time", "tokens": [50940, 11083, 5964, 295, 1901, 293, 565, 51040], "temperature": 0.0, "avg_logprob": -0.28595569398668075, "compression_ratio": 1.5628140703517588, "no_speech_prob": 0.002672345144674182}, {"id": 162, "seek": 74416, "start": 759.12, "end": 767.04, "text": " The argument to sorry I'll show it scroll down the argument to the string constructor bikini is itself a string instance that is correct", "tokens": [51112, 440, 6770, 281, 2597, 286, 603, 855, 309, 11369, 760, 264, 6770, 281, 264, 6798, 47479, 26730, 3812, 307, 2564, 257, 6798, 5197, 300, 307, 3006, 51508], "temperature": 0.0, "avg_logprob": -0.28595569398668075, "compression_ratio": 1.5628140703517588, "no_speech_prob": 0.002672345144674182}, {"id": 163, "seek": 76704, "start": 768.04, "end": 776.8, "text": " Functionally identical to all of the objects created by the constructor if this usage occurs in a loop or in a frequent frequently invoked", "tokens": [50414, 11166, 882, 379, 14800, 281, 439, 295, 264, 6565, 2942, 538, 264, 47479, 498, 341, 14924, 11843, 294, 257, 6367, 420, 294, 257, 18004, 10374, 1048, 9511, 50852], "temperature": 0.0, "avg_logprob": -0.21996340544327445, "compression_ratio": 1.628099173553719, "no_speech_prob": 0.014060926623642445}, {"id": 164, "seek": 76704, "start": 777.4, "end": 778.5999999999999, "text": " method", "tokens": [50882, 3170, 50942], "temperature": 0.0, "avg_logprob": -0.21996340544327445, "compression_ratio": 1.628099173553719, "no_speech_prob": 0.014060926623642445}, {"id": 165, "seek": 76704, "start": 778.5999999999999, "end": 781.76, "text": " Millions of string instances can be created needlessly", "tokens": [50942, 7190, 626, 295, 6798, 14519, 393, 312, 2942, 643, 12048, 51100], "temperature": 0.0, "avg_logprob": -0.21996340544327445, "compression_ratio": 1.628099173553719, "no_speech_prob": 0.014060926623642445}, {"id": 166, "seek": 76704, "start": 782.16, "end": 786.4, "text": " So here's an example of what he definitely shouldn't do and just like the Bible", "tokens": [51120, 407, 510, 311, 364, 1365, 295, 437, 415, 2138, 4659, 380, 360, 293, 445, 411, 264, 6544, 51332], "temperature": 0.0, "avg_logprob": -0.21996340544327445, "compression_ratio": 1.628099173553719, "no_speech_prob": 0.014060926623642445}, {"id": 167, "seek": 76704, "start": 786.4, "end": 791.92, "text": " We're gonna go from the Old Testament where what the goat says what he shouldn't do and in our case the Java code", "tokens": [51332, 492, 434, 799, 352, 490, 264, 8633, 15473, 689, 437, 264, 23608, 1619, 437, 415, 4659, 380, 360, 293, 294, 527, 1389, 264, 10745, 3089, 51608], "temperature": 0.0, "avg_logprob": -0.21996340544327445, "compression_ratio": 1.628099173553719, "no_speech_prob": 0.014060926623642445}, {"id": 168, "seek": 79192, "start": 792.0799999999999, "end": 799.92, "text": " Joshua Block tells us don't don't do this. That shall not do this to the New Testament what you should do and what you should consider", "tokens": [50372, 24005, 17500, 5112, 505, 500, 380, 500, 380, 360, 341, 13, 663, 4393, 406, 360, 341, 281, 264, 1873, 15473, 437, 291, 820, 360, 293, 437, 291, 820, 1949, 50764], "temperature": 0.0, "avg_logprob": -0.2860696656363351, "compression_ratio": 1.68348623853211, "no_speech_prob": 0.013633567839860916}, {"id": 169, "seek": 79192, "start": 800.68, "end": 803.88, "text": " on when when writing code as to how", "tokens": [50802, 322, 562, 562, 3579, 3089, 382, 281, 577, 50962], "temperature": 0.0, "avg_logprob": -0.2860696656363351, "compression_ratio": 1.68348623853211, "no_speech_prob": 0.013633567839860916}, {"id": 170, "seek": 79192, "start": 804.36, "end": 807.7199999999999, "text": " These techniques can allow us to reuse objects", "tokens": [50986, 1981, 7512, 393, 2089, 505, 281, 26225, 6565, 51154], "temperature": 0.0, "avg_logprob": -0.2860696656363351, "compression_ratio": 1.68348623853211, "no_speech_prob": 0.013633567839860916}, {"id": 171, "seek": 79192, "start": 808.4799999999999, "end": 811.88, "text": " It's interesting how I just converted this into a theology session", "tokens": [51192, 467, 311, 1880, 577, 286, 445, 16424, 341, 666, 257, 27927, 5481, 51362], "temperature": 0.0, "avg_logprob": -0.2860696656363351, "compression_ratio": 1.68348623853211, "no_speech_prob": 0.013633567839860916}, {"id": 172, "seek": 79192, "start": 814.3199999999999, "end": 819.28, "text": " So the first way one could easily reuse objects is something we already covered in", "tokens": [51484, 407, 264, 700, 636, 472, 727, 3612, 26225, 6565, 307, 746, 321, 1217, 5343, 294, 51732], "temperature": 0.0, "avg_logprob": -0.2860696656363351, "compression_ratio": 1.68348623853211, "no_speech_prob": 0.013633567839860916}, {"id": 173, "seek": 81928, "start": 819.36, "end": 823.9599999999999, "text": " In at item one is in fact using static factory methods", "tokens": [50368, 682, 412, 3174, 472, 307, 294, 1186, 1228, 13437, 9265, 7150, 50598], "temperature": 0.0, "avg_logprob": -0.22950501494355255, "compression_ratio": 1.6835443037974684, "no_speech_prob": 0.005218913313001394}, {"id": 174, "seek": 81928, "start": 823.9599999999999, "end": 827.16, "text": " I should say as Joshua Block stays here. In fact, I'll just read it out", "tokens": [50598, 286, 820, 584, 382, 24005, 17500, 10834, 510, 13, 682, 1186, 11, 286, 603, 445, 1401, 309, 484, 50758], "temperature": 0.0, "avg_logprob": -0.22950501494355255, "compression_ratio": 1.6835443037974684, "no_speech_prob": 0.005218913313001394}, {"id": 175, "seek": 81928, "start": 827.16, "end": 833.16, "text": " You can often avoid creating unnecessary objects by using static factory methods in", "tokens": [50758, 509, 393, 2049, 5042, 4084, 19350, 6565, 538, 1228, 13437, 9265, 7150, 294, 51058], "temperature": 0.0, "avg_logprob": -0.22950501494355255, "compression_ratio": 1.6835443037974684, "no_speech_prob": 0.005218913313001394}, {"id": 176, "seek": 81928, "start": 833.8399999999999, "end": 837.52, "text": " preference to constructors when immutable classes that provide both", "tokens": [51092, 17502, 281, 7690, 830, 562, 3397, 32148, 5359, 300, 2893, 1293, 51276], "temperature": 0.0, "avg_logprob": -0.22950501494355255, "compression_ratio": 1.6835443037974684, "no_speech_prob": 0.005218913313001394}, {"id": 177, "seek": 81928, "start": 838.04, "end": 845.76, "text": " So the example here would be the Boolean class where value of is a static method and that is indeed preferred over", "tokens": [51302, 407, 264, 1365, 510, 576, 312, 264, 23351, 28499, 1508, 689, 2158, 295, 307, 257, 13437, 3170, 293, 300, 307, 6451, 16494, 670, 51688], "temperature": 0.0, "avg_logprob": -0.22950501494355255, "compression_ratio": 1.6835443037974684, "no_speech_prob": 0.005218913313001394}, {"id": 178, "seek": 81928, "start": 846.4, "end": 847.48, "text": " using", "tokens": [51720, 1228, 51774], "temperature": 0.0, "avg_logprob": -0.22950501494355255, "compression_ratio": 1.6835443037974684, "no_speech_prob": 0.005218913313001394}, {"id": 179, "seek": 84748, "start": 847.52, "end": 852.96, "text": " The constructor and I think since Java 9. Yes, it does say here", "tokens": [50366, 440, 47479, 293, 286, 519, 1670, 10745, 1722, 13, 1079, 11, 309, 775, 584, 510, 50638], "temperature": 0.0, "avg_logprob": -0.21093461223851853, "compression_ratio": 1.6830188679245284, "no_speech_prob": 0.00400614645332098}, {"id": 180, "seek": 84748, "start": 853.44, "end": 858.52, "text": " This has been deprecated. We can't even use this constructor because it's been made private. So", "tokens": [50662, 639, 575, 668, 1367, 13867, 770, 13, 492, 393, 380, 754, 764, 341, 47479, 570, 309, 311, 668, 1027, 4551, 13, 407, 50916], "temperature": 0.0, "avg_logprob": -0.21093461223851853, "compression_ratio": 1.6830188679245284, "no_speech_prob": 0.00400614645332098}, {"id": 181, "seek": 84748, "start": 859.16, "end": 865.2, "text": " The the static factory method doesn't require a creation of objects every time it's invoked", "tokens": [50948, 440, 264, 13437, 9265, 3170, 1177, 380, 3651, 257, 8016, 295, 6565, 633, 565, 309, 311, 1048, 9511, 51250], "temperature": 0.0, "avg_logprob": -0.21093461223851853, "compression_ratio": 1.6830188679245284, "no_speech_prob": 0.00400614645332098}, {"id": 182, "seek": 84748, "start": 866.24, "end": 871.6800000000001, "text": " Because static members are common to all instance instances of a class and again the way I think about it", "tokens": [51302, 1436, 13437, 2679, 366, 2689, 281, 439, 5197, 14519, 295, 257, 1508, 293, 797, 264, 636, 286, 519, 466, 309, 51574], "temperature": 0.0, "avg_logprob": -0.21093461223851853, "compression_ratio": 1.6830188679245284, "no_speech_prob": 0.00400614645332098}, {"id": 183, "seek": 84748, "start": 871.6800000000001, "end": 876.6, "text": " Oh, I guess this is exactly the way one should think about it is it belongs to the class", "tokens": [51574, 876, 11, 286, 2041, 341, 307, 2293, 264, 636, 472, 820, 519, 466, 309, 307, 309, 12953, 281, 264, 1508, 51820], "temperature": 0.0, "avg_logprob": -0.21093461223851853, "compression_ratio": 1.6830188679245284, "no_speech_prob": 0.00400614645332098}, {"id": 184, "seek": 87660, "start": 877.44, "end": 882.4, "text": " Therefore, all the instances of that class will will share this", "tokens": [50406, 7504, 11, 439, 264, 14519, 295, 300, 1508, 486, 486, 2073, 341, 50654], "temperature": 0.0, "avg_logprob": -0.26536500776136246, "compression_ratio": 1.5979899497487438, "no_speech_prob": 0.0019567350391298532}, {"id": 185, "seek": 87660, "start": 883.36, "end": 884.6800000000001, "text": " Static member", "tokens": [50702, 745, 2399, 4006, 50768], "temperature": 0.0, "avg_logprob": -0.26536500776136246, "compression_ratio": 1.5979899497487438, "no_speech_prob": 0.0019567350391298532}, {"id": 186, "seek": 87660, "start": 884.6800000000001, "end": 891.6800000000001, "text": " So that member itself can be shared up amongst all objects whenever that class is instantiated and", "tokens": [50768, 407, 300, 4006, 2564, 393, 312, 5507, 493, 12918, 439, 6565, 5699, 300, 1508, 307, 9836, 72, 770, 293, 51118], "temperature": 0.0, "avg_logprob": -0.26536500776136246, "compression_ratio": 1.5979899497487438, "no_speech_prob": 0.0019567350391298532}, {"id": 187, "seek": 87660, "start": 892.8000000000001, "end": 894.8000000000001, "text": " As I did mention a bit before", "tokens": [51174, 1018, 286, 630, 2152, 257, 857, 949, 51274], "temperature": 0.0, "avg_logprob": -0.26536500776136246, "compression_ratio": 1.5979899497487438, "no_speech_prob": 0.0019567350391298532}, {"id": 188, "seek": 87660, "start": 894.84, "end": 901.64, "text": " Static variables live in something called the dynamic meta space within heap memory and also an ancillary point", "tokens": [51276, 745, 2399, 9102, 1621, 294, 746, 1219, 264, 8546, 19616, 1901, 1951, 33591, 4675, 293, 611, 364, 364, 7383, 822, 935, 51616], "temperature": 0.0, "avg_logprob": -0.26536500776136246, "compression_ratio": 1.5979899497487438, "no_speech_prob": 0.0019567350391298532}, {"id": 189, "seek": 90164, "start": 901.64, "end": 905.64, "text": " He also adds in addition to reusing immutable objects", "tokens": [50364, 634, 611, 10860, 294, 4500, 281, 319, 7981, 3397, 32148, 6565, 50564], "temperature": 0.0, "avg_logprob": -0.21285570428726522, "compression_ratio": 1.691588785046729, "no_speech_prob": 0.021268339827656746}, {"id": 190, "seek": 90164, "start": 905.64, "end": 910.1999999999999, "text": " You can also reuse immutable objects if you know they won't be modified. So", "tokens": [50564, 509, 393, 611, 26225, 3397, 32148, 6565, 498, 291, 458, 436, 1582, 380, 312, 15873, 13, 407, 50792], "temperature": 0.0, "avg_logprob": -0.21285570428726522, "compression_ratio": 1.691588785046729, "no_speech_prob": 0.021268339827656746}, {"id": 191, "seek": 90164, "start": 910.8, "end": 913.76, "text": " For reusing objects, they don't have to all be declared", "tokens": [50822, 1171, 319, 7981, 6565, 11, 436, 500, 380, 362, 281, 439, 312, 15489, 50970], "temperature": 0.0, "avg_logprob": -0.21285570428726522, "compression_ratio": 1.691588785046729, "no_speech_prob": 0.021268339827656746}, {"id": 192, "seek": 90164, "start": 914.48, "end": 915.96, "text": " final and", "tokens": [51006, 2572, 293, 51080], "temperature": 0.0, "avg_logprob": -0.21285570428726522, "compression_ratio": 1.691588785046729, "no_speech_prob": 0.021268339827656746}, {"id": 193, "seek": 90164, "start": 915.96, "end": 921.64, "text": " Static and make for them to be mutable rather even if we know a certain object is", "tokens": [51080, 745, 2399, 293, 652, 337, 552, 281, 312, 5839, 712, 2831, 754, 498, 321, 458, 257, 1629, 2657, 307, 51364], "temperature": 0.0, "avg_logprob": -0.21285570428726522, "compression_ratio": 1.691588785046729, "no_speech_prob": 0.021268339827656746}, {"id": 194, "seek": 90164, "start": 922.92, "end": 927.88, "text": " Mutable, but still it won't change. We could reuse that using static factory methods", "tokens": [51428, 18517, 712, 11, 457, 920, 309, 1582, 380, 1319, 13, 492, 727, 26225, 300, 1228, 13437, 9265, 7150, 51676], "temperature": 0.0, "avg_logprob": -0.21285570428726522, "compression_ratio": 1.691588785046729, "no_speech_prob": 0.021268339827656746}, {"id": 195, "seek": 92788, "start": 928.64, "end": 934.86, "text": " So there could be some operations where it's much more computationally expensive to keep", "tokens": [50402, 407, 456, 727, 312, 512, 7705, 689, 309, 311, 709, 544, 24903, 379, 5124, 281, 1066, 50713], "temperature": 0.0, "avg_logprob": -0.2312674129710478, "compression_ratio": 1.6623376623376624, "no_speech_prob": 0.002757273381575942}, {"id": 196, "seek": 92788, "start": 936.08, "end": 940.68, "text": " Invoking a certain function and here's the example Joshua block has used", "tokens": [50774, 31124, 5953, 257, 1629, 2445, 293, 510, 311, 264, 1365, 24005, 3461, 575, 1143, 51004], "temperature": 0.0, "avg_logprob": -0.2312674129710478, "compression_ratio": 1.6623376623376624, "no_speech_prob": 0.002757273381575942}, {"id": 197, "seek": 92788, "start": 940.68, "end": 944.92, "text": " So before I do get to the example, probably I'll just go through his justification", "tokens": [51004, 407, 949, 286, 360, 483, 281, 264, 1365, 11, 1391, 286, 603, 445, 352, 807, 702, 31591, 51216], "temperature": 0.0, "avg_logprob": -0.2312674129710478, "compression_ratio": 1.6623376623376624, "no_speech_prob": 0.002757273381575942}, {"id": 198, "seek": 92788, "start": 945.16, "end": 950.4, "text": " He says some object creations are much more expensive than others. That's right", "tokens": [51228, 634, 1619, 512, 2657, 37836, 366, 709, 544, 5124, 813, 2357, 13, 663, 311, 558, 51490], "temperature": 0.0, "avg_logprob": -0.2312674129710478, "compression_ratio": 1.6623376623376624, "no_speech_prob": 0.002757273381575942}, {"id": 199, "seek": 92788, "start": 950.4, "end": 954.6, "text": " If you're going to need such an expensive object repeatedly", "tokens": [51490, 759, 291, 434, 516, 281, 643, 1270, 364, 5124, 2657, 18227, 51700], "temperature": 0.0, "avg_logprob": -0.2312674129710478, "compression_ratio": 1.6623376623376624, "no_speech_prob": 0.002757273381575942}, {"id": 200, "seek": 95460, "start": 954.64, "end": 958.12, "text": " It may be advisable to cache it for reuse", "tokens": [50366, 467, 815, 312, 10280, 712, 281, 19459, 309, 337, 26225, 50540], "temperature": 0.0, "avg_logprob": -0.24800783793131512, "compression_ratio": 1.567099567099567, "no_speech_prob": 0.006289016455411911}, {"id": 201, "seek": 95460, "start": 959.12, "end": 963.76, "text": " Unfortunately, it's not always obvious when you're creating such an object. That is true", "tokens": [50590, 8590, 11, 309, 311, 406, 1009, 6322, 562, 291, 434, 4084, 1270, 364, 2657, 13, 663, 307, 2074, 50822], "temperature": 0.0, "avg_logprob": -0.24800783793131512, "compression_ratio": 1.567099567099567, "no_speech_prob": 0.006289016455411911}, {"id": 202, "seek": 95460, "start": 963.76, "end": 969.84, "text": " However, here we have a solid example where this could be computationally expensive and that is", "tokens": [50822, 2908, 11, 510, 321, 362, 257, 5100, 1365, 689, 341, 727, 312, 24903, 379, 5124, 293, 300, 307, 51126], "temperature": 0.0, "avg_logprob": -0.24800783793131512, "compression_ratio": 1.567099567099567, "no_speech_prob": 0.006289016455411911}, {"id": 203, "seek": 95460, "start": 970.6, "end": 972.6, "text": " using regular expressions", "tokens": [51164, 1228, 3890, 15277, 51264], "temperature": 0.0, "avg_logprob": -0.24800783793131512, "compression_ratio": 1.567099567099567, "no_speech_prob": 0.006289016455411911}, {"id": 204, "seek": 95460, "start": 972.76, "end": 975.44, "text": " So this is a very very simple class", "tokens": [51272, 407, 341, 307, 257, 588, 588, 2199, 1508, 51406], "temperature": 0.0, "avg_logprob": -0.24800783793131512, "compression_ratio": 1.567099567099567, "no_speech_prob": 0.006289016455411911}, {"id": 205, "seek": 95460, "start": 976.0, "end": 980.28, "text": " Well, what it does. Well, the class has these static methods", "tokens": [51434, 1042, 11, 437, 309, 775, 13, 1042, 11, 264, 1508, 575, 613, 13437, 7150, 51648], "temperature": 0.0, "avg_logprob": -0.24800783793131512, "compression_ratio": 1.567099567099567, "no_speech_prob": 0.006289016455411911}, {"id": 206, "seek": 95460, "start": 980.96, "end": 982.96, "text": " we have well", "tokens": [51682, 321, 362, 731, 51782], "temperature": 0.0, "avg_logprob": -0.24800783793131512, "compression_ratio": 1.567099567099567, "no_speech_prob": 0.006289016455411911}, {"id": 207, "seek": 98296, "start": 983.96, "end": 988.6800000000001, "text": " Practically it should only have one method called is numeral, but just for", "tokens": [50414, 19170, 984, 309, 820, 787, 362, 472, 3170, 1219, 307, 1031, 2790, 11, 457, 445, 337, 50650], "temperature": 0.0, "avg_logprob": -0.25619410396961684, "compression_ratio": 1.6076555023923444, "no_speech_prob": 0.0022867503575980663}, {"id": 208, "seek": 98296, "start": 989.24, "end": 991.96, "text": " Demonstrative purposes we have is numeral slow and", "tokens": [50678, 4686, 4068, 30457, 9932, 321, 362, 307, 1031, 2790, 2964, 293, 50814], "temperature": 0.0, "avg_logprob": -0.25619410396961684, "compression_ratio": 1.6076555023923444, "no_speech_prob": 0.0022867503575980663}, {"id": 209, "seek": 98296, "start": 992.5600000000001, "end": 996.9200000000001, "text": " It's numeral fast and we shall see why we have those two methods in a bit", "tokens": [50844, 467, 311, 1031, 2790, 2370, 293, 321, 4393, 536, 983, 321, 362, 729, 732, 7150, 294, 257, 857, 51062], "temperature": 0.0, "avg_logprob": -0.25619410396961684, "compression_ratio": 1.6076555023923444, "no_speech_prob": 0.0022867503575980663}, {"id": 210, "seek": 98296, "start": 998.12, "end": 1003.48, "text": " So firstly the slow method what it does. Okay, so let me let me take a step back", "tokens": [51122, 407, 27376, 264, 2964, 3170, 437, 309, 775, 13, 1033, 11, 370, 718, 385, 718, 385, 747, 257, 1823, 646, 51390], "temperature": 0.0, "avg_logprob": -0.25619410396961684, "compression_ratio": 1.6076555023923444, "no_speech_prob": 0.0022867503575980663}, {"id": 211, "seek": 98296, "start": 1005.1600000000001, "end": 1009.08, "text": " What this method does is it returns a true or false and", "tokens": [51474, 708, 341, 3170, 775, 307, 309, 11247, 257, 2074, 420, 7908, 293, 51670], "temperature": 0.0, "avg_logprob": -0.25619410396961684, "compression_ratio": 1.6076555023923444, "no_speech_prob": 0.0022867503575980663}, {"id": 212, "seek": 100908, "start": 1009.1600000000001, "end": 1014.44, "text": " And what that true or false tells us is if a string we pass on to this", "tokens": [50368, 400, 437, 300, 2074, 420, 7908, 5112, 505, 307, 498, 257, 6798, 321, 1320, 322, 281, 341, 50632], "temperature": 0.0, "avg_logprob": -0.24022209076654344, "compression_ratio": 1.8306878306878307, "no_speech_prob": 0.001896459492854774}, {"id": 213, "seek": 100908, "start": 1015.08, "end": 1017.08, "text": " fulfills a certain regular expression", "tokens": [50664, 8081, 2565, 257, 1629, 3890, 6114, 50764], "temperature": 0.0, "avg_logprob": -0.24022209076654344, "compression_ratio": 1.8306878306878307, "no_speech_prob": 0.001896459492854774}, {"id": 214, "seek": 100908, "start": 1017.88, "end": 1024.04, "text": " And what that regular expression is looking for really is if the string we pass on to is a Roman Roman numeral", "tokens": [50804, 400, 437, 300, 3890, 6114, 307, 1237, 337, 534, 307, 498, 264, 6798, 321, 1320, 322, 281, 307, 257, 8566, 8566, 1031, 2790, 51112], "temperature": 0.0, "avg_logprob": -0.24022209076654344, "compression_ratio": 1.8306878306878307, "no_speech_prob": 0.001896459492854774}, {"id": 215, "seek": 100908, "start": 1025.08, "end": 1026.44, "text": " and", "tokens": [51164, 293, 51232], "temperature": 0.0, "avg_logprob": -0.24022209076654344, "compression_ratio": 1.8306878306878307, "no_speech_prob": 0.001896459492854774}, {"id": 216, "seek": 100908, "start": 1026.44, "end": 1035.0, "text": " Here here though, this is the slow way what happens here is every single time we invoke this method and we pass the string", "tokens": [51232, 1692, 510, 1673, 11, 341, 307, 264, 2964, 636, 437, 2314, 510, 307, 633, 2167, 565, 321, 41117, 341, 3170, 293, 321, 1320, 264, 6798, 51660], "temperature": 0.0, "avg_logprob": -0.24022209076654344, "compression_ratio": 1.8306878306878307, "no_speech_prob": 0.001896459492854774}, {"id": 217, "seek": 103500, "start": 1035.68, "end": 1038.6, "text": " The the the string class invokes the matches", "tokens": [50398, 440, 264, 264, 6798, 1508, 1048, 8606, 264, 10676, 50544], "temperature": 0.0, "avg_logprob": -0.2673823412726907, "compression_ratio": 1.7370892018779343, "no_speech_prob": 0.011866667307913303}, {"id": 218, "seek": 103500, "start": 1040.08, "end": 1044.36, "text": " Method which uses a finite state machine", "tokens": [50618, 25285, 597, 4960, 257, 19362, 1785, 3479, 50832], "temperature": 0.0, "avg_logprob": -0.2673823412726907, "compression_ratio": 1.7370892018779343, "no_speech_prob": 0.011866667307913303}, {"id": 219, "seek": 103500, "start": 1045.24, "end": 1050.16, "text": " Which we shall we shall get into what that is a finite state machine to do the matching", "tokens": [50876, 3013, 321, 4393, 321, 4393, 483, 666, 437, 300, 307, 257, 19362, 1785, 3479, 281, 360, 264, 14324, 51122], "temperature": 0.0, "avg_logprob": -0.2673823412726907, "compression_ratio": 1.7370892018779343, "no_speech_prob": 0.011866667307913303}, {"id": 220, "seek": 103500, "start": 1050.72, "end": 1057.44, "text": " And and that is computationally expensive. So every single time a pattern instance has to be created here", "tokens": [51150, 400, 293, 300, 307, 24903, 379, 5124, 13, 407, 633, 2167, 565, 257, 5102, 5197, 575, 281, 312, 2942, 510, 51486], "temperature": 0.0, "avg_logprob": -0.2673823412726907, "compression_ratio": 1.7370892018779343, "no_speech_prob": 0.011866667307913303}, {"id": 221, "seek": 103500, "start": 1058.08, "end": 1064.32, "text": " A pattern instance really that won't change but for we know that why would we not reuse it", "tokens": [51518, 316, 5102, 5197, 534, 300, 1582, 380, 1319, 457, 337, 321, 458, 300, 983, 576, 321, 406, 26225, 309, 51830], "temperature": 0.0, "avg_logprob": -0.2673823412726907, "compression_ratio": 1.7370892018779343, "no_speech_prob": 0.011866667307913303}, {"id": 222, "seek": 106432, "start": 1064.32, "end": 1066.32, "text": " But every single time the method is invoked", "tokens": [50364, 583, 633, 2167, 565, 264, 3170, 307, 1048, 9511, 50464], "temperature": 0.0, "avg_logprob": -0.15057764734540666, "compression_ratio": 1.730909090909091, "no_speech_prob": 0.0005527484463527799}, {"id": 223, "seek": 106432, "start": 1066.6399999999999, "end": 1071.84, "text": " We're creating this finite state machine instance and then after it's done", "tokens": [50480, 492, 434, 4084, 341, 19362, 1785, 3479, 5197, 293, 550, 934, 309, 311, 1096, 50740], "temperature": 0.0, "avg_logprob": -0.15057764734540666, "compression_ratio": 1.730909090909091, "no_speech_prob": 0.0005527484463527799}, {"id": 224, "seek": 106432, "start": 1071.84, "end": 1077.72, "text": " It has to be garbage collected and the JVM has to take care of it. So that is computationally expensive. So this is a slow way", "tokens": [50740, 467, 575, 281, 312, 14150, 11087, 293, 264, 508, 53, 44, 575, 281, 747, 1127, 295, 309, 13, 407, 300, 307, 24903, 379, 5124, 13, 407, 341, 307, 257, 2964, 636, 51034], "temperature": 0.0, "avg_logprob": -0.15057764734540666, "compression_ratio": 1.730909090909091, "no_speech_prob": 0.0005527484463527799}, {"id": 225, "seek": 106432, "start": 1078.48, "end": 1083.9199999999998, "text": " But what he does propose instead is to cash it. So we have the regular expression instance", "tokens": [51072, 583, 437, 415, 775, 17421, 2602, 307, 281, 6388, 309, 13, 407, 321, 362, 264, 3890, 6114, 5197, 51344], "temperature": 0.0, "avg_logprob": -0.15057764734540666, "compression_ratio": 1.730909090909091, "no_speech_prob": 0.0005527484463527799}, {"id": 226, "seek": 106432, "start": 1084.0, "end": 1085.56, "text": " We call that", "tokens": [51348, 492, 818, 300, 51426], "temperature": 0.0, "avg_logprob": -0.15057764734540666, "compression_ratio": 1.730909090909091, "no_speech_prob": 0.0005527484463527799}, {"id": 227, "seek": 106432, "start": 1085.56, "end": 1092.76, "text": " Roman here and we use this compile method in the pattern class and we explicitly compile it into an immutable pattern instance", "tokens": [51426, 8566, 510, 293, 321, 764, 341, 31413, 3170, 294, 264, 5102, 1508, 293, 321, 20803, 31413, 309, 666, 364, 3397, 32148, 5102, 5197, 51786], "temperature": 0.0, "avg_logprob": -0.15057764734540666, "compression_ratio": 1.730909090909091, "no_speech_prob": 0.0005527484463527799}, {"id": 228, "seek": 109276, "start": 1092.76, "end": 1098.52, "text": " Which we still here and we call it Roman as I said and then we just reuse that in the esnemeral fast method", "tokens": [50364, 3013, 321, 920, 510, 293, 321, 818, 309, 8566, 382, 286, 848, 293, 550, 321, 445, 26225, 300, 294, 264, 785, 716, 936, 304, 2370, 3170, 50652], "temperature": 0.0, "avg_logprob": -0.25516819467349927, "compression_ratio": 1.6521739130434783, "no_speech_prob": 0.0011334770824760199}, {"id": 229, "seek": 109276, "start": 1098.84, "end": 1100.76, "text": " Simple as that and to put it most succinctly", "tokens": [50668, 21532, 382, 300, 293, 281, 829, 309, 881, 21578, 5460, 356, 50764], "temperature": 0.0, "avg_logprob": -0.25516819467349927, "compression_ratio": 1.6521739130434783, "no_speech_prob": 0.0011334770824760199}, {"id": 230, "seek": 109276, "start": 1100.76, "end": 1106.56, "text": " He states while string dot matches is the easiest way to check if a string matches a regular expression", "tokens": [50764, 634, 4368, 1339, 6798, 5893, 10676, 307, 264, 12889, 636, 281, 1520, 498, 257, 6798, 10676, 257, 3890, 6114, 51054], "temperature": 0.0, "avg_logprob": -0.25516819467349927, "compression_ratio": 1.6521739130434783, "no_speech_prob": 0.0011334770824760199}, {"id": 231, "seek": 109276, "start": 1106.6, "end": 1108.8, "text": " Which is what we've sort of done here", "tokens": [51056, 3013, 307, 437, 321, 600, 1333, 295, 1096, 510, 51166], "temperature": 0.0, "avg_logprob": -0.25516819467349927, "compression_ratio": 1.6521739130434783, "no_speech_prob": 0.0011334770824760199}, {"id": 232, "seek": 109276, "start": 1110.48, "end": 1114.92, "text": " It's not suitable for repeated use in performance critical situations", "tokens": [51250, 467, 311, 406, 12873, 337, 10477, 764, 294, 3389, 4924, 6851, 51472], "temperature": 0.0, "avg_logprob": -0.25516819467349927, "compression_ratio": 1.6521739130434783, "no_speech_prob": 0.0011334770824760199}, {"id": 233, "seek": 109276, "start": 1115.2, "end": 1119.0, "text": " He continues creating a pattern instance is expensive", "tokens": [51486, 634, 6515, 4084, 257, 5102, 5197, 307, 5124, 51676], "temperature": 0.0, "avg_logprob": -0.25516819467349927, "compression_ratio": 1.6521739130434783, "no_speech_prob": 0.0011334770824760199}, {"id": 234, "seek": 111900, "start": 1119.32, "end": 1120.96, "text": " Because it requires", "tokens": [50380, 1436, 309, 7029, 50462], "temperature": 0.0, "avg_logprob": -0.2903511991205904, "compression_ratio": 1.7958333333333334, "no_speech_prob": 0.020017554983496666}, {"id": 235, "seek": 111900, "start": 1120.96, "end": 1124.76, "text": " Compiling the regular expression as I said into a finite state machine", "tokens": [50462, 6620, 4883, 264, 3890, 6114, 382, 286, 848, 666, 257, 19362, 1785, 3479, 50652], "temperature": 0.0, "avg_logprob": -0.2903511991205904, "compression_ratio": 1.7958333333333334, "no_speech_prob": 0.020017554983496666}, {"id": 236, "seek": 111900, "start": 1124.76, "end": 1130.28, "text": " So let's get a quick understanding of what a finite state machine encompasses because it pertains to the topic", "tokens": [50652, 407, 718, 311, 483, 257, 1702, 3701, 295, 437, 257, 19362, 1785, 3479, 49866, 570, 309, 13269, 2315, 281, 264, 4829, 50928], "temperature": 0.0, "avg_logprob": -0.2903511991205904, "compression_ratio": 1.7958333333333334, "no_speech_prob": 0.020017554983496666}, {"id": 237, "seek": 111900, "start": 1130.52, "end": 1134.28, "text": " This is definition. I found from brilliant org by", "tokens": [50940, 639, 307, 7123, 13, 286, 1352, 490, 10248, 420, 70, 538, 51128], "temperature": 0.0, "avg_logprob": -0.2903511991205904, "compression_ratio": 1.7958333333333334, "no_speech_prob": 0.020017554983496666}, {"id": 238, "seek": 111900, "start": 1134.84, "end": 1137.48, "text": " Kale more and Deshan Gupta is a", "tokens": [51156, 591, 1220, 544, 293, 3885, 3451, 2694, 47366, 307, 257, 51288], "temperature": 0.0, "avg_logprob": -0.2903511991205904, "compression_ratio": 1.7958333333333334, "no_speech_prob": 0.020017554983496666}, {"id": 239, "seek": 111900, "start": 1138.04, "end": 1142.72, "text": " system where particular inputs cause particular changes in state can be", "tokens": [51316, 1185, 689, 1729, 15743, 3082, 1729, 2962, 294, 1785, 393, 312, 51550], "temperature": 0.0, "avg_logprob": -0.2903511991205904, "compression_ratio": 1.7958333333333334, "no_speech_prob": 0.020017554983496666}, {"id": 240, "seek": 111900, "start": 1143.16, "end": 1147.48, "text": " represented using a finite state machine or using finite state machines and", "tokens": [51572, 10379, 1228, 257, 19362, 1785, 3479, 420, 1228, 19362, 1785, 8379, 293, 51788], "temperature": 0.0, "avg_logprob": -0.2903511991205904, "compression_ratio": 1.7958333333333334, "no_speech_prob": 0.020017554983496666}, {"id": 241, "seek": 114748, "start": 1147.96, "end": 1154.52, "text": " This is a really good example. I found it was a 10 minute video by Valhalla data systems and the book here", "tokens": [50388, 639, 307, 257, 534, 665, 1365, 13, 286, 1352, 309, 390, 257, 1266, 3456, 960, 538, 7188, 71, 10352, 1412, 3652, 293, 264, 1446, 510, 50716], "temperature": 0.0, "avg_logprob": -0.1913620842827691, "compression_ratio": 1.51440329218107, "no_speech_prob": 0.002251578029245138}, {"id": 242, "seek": 114748, "start": 1154.52, "end": 1160.88, "text": " He not only explains quite simply with brevity what a finite state machine is", "tokens": [50716, 634, 406, 787, 13948, 1596, 2935, 365, 1403, 23110, 437, 257, 19362, 1785, 3479, 307, 51034], "temperature": 0.0, "avg_logprob": -0.1913620842827691, "compression_ratio": 1.51440329218107, "no_speech_prob": 0.002251578029245138}, {"id": 243, "seek": 114748, "start": 1160.92, "end": 1164.96, "text": " But also afterwards shows a solid implementation in Java code", "tokens": [51036, 583, 611, 10543, 3110, 257, 5100, 11420, 294, 10745, 3089, 51238], "temperature": 0.0, "avg_logprob": -0.1913620842827691, "compression_ratio": 1.51440329218107, "no_speech_prob": 0.002251578029245138}, {"id": 244, "seek": 114748, "start": 1165.04, "end": 1169.1200000000001, "text": " So I'll leave a link to that video down in the description. It's well worth a watch", "tokens": [51242, 407, 286, 603, 1856, 257, 2113, 281, 300, 960, 760, 294, 264, 3855, 13, 467, 311, 731, 3163, 257, 1159, 51446], "temperature": 0.0, "avg_logprob": -0.1913620842827691, "compression_ratio": 1.51440329218107, "no_speech_prob": 0.002251578029245138}, {"id": 245, "seek": 114748, "start": 1169.1200000000001, "end": 1171.56, "text": " But this is one snapshot of the video", "tokens": [51446, 583, 341, 307, 472, 30163, 295, 264, 960, 51568], "temperature": 0.0, "avg_logprob": -0.1913620842827691, "compression_ratio": 1.51440329218107, "no_speech_prob": 0.002251578029245138}, {"id": 246, "seek": 117156, "start": 1172.1599999999999, "end": 1178.0, "text": " And here's what happens. So when we pass a string, which is really a an array of characters in Java", "tokens": [50394, 400, 510, 311, 437, 2314, 13, 407, 562, 321, 1320, 257, 6798, 11, 597, 307, 534, 257, 364, 10225, 295, 4342, 294, 10745, 50686], "temperature": 0.0, "avg_logprob": -0.20360797946735965, "compression_ratio": 1.6488549618320612, "no_speech_prob": 0.027581345289945602}, {"id": 247, "seek": 117156, "start": 1178.6, "end": 1183.28, "text": " It'll take each character and start going through the FSM", "tokens": [50716, 467, 603, 747, 1184, 2517, 293, 722, 516, 807, 264, 479, 26693, 50950], "temperature": 0.0, "avg_logprob": -0.20360797946735965, "compression_ratio": 1.6488549618320612, "no_speech_prob": 0.027581345289945602}, {"id": 248, "seek": 117156, "start": 1183.28, "end": 1186.6799999999998, "text": " I'm just gonna call it FSM because it's finite state machine is a mouthful", "tokens": [50950, 286, 478, 445, 799, 818, 309, 479, 26693, 570, 309, 311, 19362, 1785, 3479, 307, 257, 4525, 906, 51120], "temperature": 0.0, "avg_logprob": -0.20360797946735965, "compression_ratio": 1.6488549618320612, "no_speech_prob": 0.027581345289945602}, {"id": 249, "seek": 117156, "start": 1187.8, "end": 1194.24, "text": " So it's gonna start off with with state zero and if it's an at sign it'll go to one", "tokens": [51176, 407, 309, 311, 799, 722, 766, 365, 365, 1785, 4018, 293, 498, 309, 311, 364, 412, 1465, 309, 603, 352, 281, 472, 51498], "temperature": 0.0, "avg_logprob": -0.20360797946735965, "compression_ratio": 1.6488549618320612, "no_speech_prob": 0.027581345289945602}, {"id": 250, "seek": 117156, "start": 1194.24, "end": 1196.24, "text": " Oh, by the way, this", "tokens": [51498, 876, 11, 538, 264, 636, 11, 341, 51598], "temperature": 0.0, "avg_logprob": -0.20360797946735965, "compression_ratio": 1.6488549618320612, "no_speech_prob": 0.027581345289945602}, {"id": 251, "seek": 117156, "start": 1196.6799999999998, "end": 1200.6, "text": " pattern it's looking for is simply for an at sign or a hashtag. So this has nothing to do with", "tokens": [51620, 5102, 309, 311, 1237, 337, 307, 2935, 337, 364, 412, 1465, 420, 257, 20379, 13, 407, 341, 575, 1825, 281, 360, 365, 51816], "temperature": 0.0, "avg_logprob": -0.20360797946735965, "compression_ratio": 1.6488549618320612, "no_speech_prob": 0.027581345289945602}, {"id": 252, "seek": 120060, "start": 1201.12, "end": 1203.6399999999999, "text": " the reg X given here because this is for", "tokens": [50390, 264, 1121, 1783, 2212, 510, 570, 341, 307, 337, 50516], "temperature": 0.0, "avg_logprob": -0.19465110261561508, "compression_ratio": 1.8024193548387097, "no_speech_prob": 0.004198136273771524}, {"id": 253, "seek": 120060, "start": 1204.32, "end": 1208.36, "text": " Checking if it's a Roman numeral, but this is a different example. Just so you don't get confused", "tokens": [50550, 6881, 278, 498, 309, 311, 257, 8566, 1031, 2790, 11, 457, 341, 307, 257, 819, 1365, 13, 1449, 370, 291, 500, 380, 483, 9019, 50752], "temperature": 0.0, "avg_logprob": -0.19465110261561508, "compression_ratio": 1.8024193548387097, "no_speech_prob": 0.004198136273771524}, {"id": 254, "seek": 120060, "start": 1208.9599999999998, "end": 1213.56, "text": " So all it's looking for is if the string contains an at sign or a hashtag", "tokens": [50782, 407, 439, 309, 311, 1237, 337, 307, 498, 264, 6798, 8306, 364, 412, 1465, 420, 257, 20379, 51012], "temperature": 0.0, "avg_logprob": -0.19465110261561508, "compression_ratio": 1.8024193548387097, "no_speech_prob": 0.004198136273771524}, {"id": 255, "seek": 120060, "start": 1214.0, "end": 1219.4399999999998, "text": " So it starts as I said with state zero if it contains an at sign goes to state one", "tokens": [51034, 407, 309, 3719, 382, 286, 848, 365, 1785, 4018, 498, 309, 8306, 364, 412, 1465, 1709, 281, 1785, 472, 51306], "temperature": 0.0, "avg_logprob": -0.19465110261561508, "compression_ratio": 1.8024193548387097, "no_speech_prob": 0.004198136273771524}, {"id": 256, "seek": 120060, "start": 1220.04, "end": 1225.8799999999999, "text": " If it's a number between or an integer to use proper terminology between zero and nine", "tokens": [51336, 759, 309, 311, 257, 1230, 1296, 420, 364, 24922, 281, 764, 2296, 27575, 1296, 4018, 293, 4949, 51628], "temperature": 0.0, "avg_logprob": -0.19465110261561508, "compression_ratio": 1.8024193548387097, "no_speech_prob": 0.004198136273771524}, {"id": 257, "seek": 120060, "start": 1225.8799999999999, "end": 1229.32, "text": " It'll go to state two if it's a hashtag. It'll go to state three", "tokens": [51628, 467, 603, 352, 281, 1785, 732, 498, 309, 311, 257, 20379, 13, 467, 603, 352, 281, 1785, 1045, 51800], "temperature": 0.0, "avg_logprob": -0.19465110261561508, "compression_ratio": 1.8024193548387097, "no_speech_prob": 0.004198136273771524}, {"id": 258, "seek": 122932, "start": 1229.9199999999998, "end": 1235.96, "text": " And it sort of loops it will remain in that state because so if it's an at sign it'll go back to state one", "tokens": [50394, 400, 309, 1333, 295, 16121, 309, 486, 6222, 294, 300, 1785, 570, 370, 498, 309, 311, 364, 412, 1465, 309, 603, 352, 646, 281, 1785, 472, 50696], "temperature": 0.0, "avg_logprob": -0.2439435828815807, "compression_ratio": 1.6803652968036529, "no_speech_prob": 0.00337608577683568}, {"id": 259, "seek": 122932, "start": 1236.24, "end": 1237.3999999999999, "text": " so", "tokens": [50710, 370, 50768], "temperature": 0.0, "avg_logprob": -0.2439435828815807, "compression_ratio": 1.6803652968036529, "no_speech_prob": 0.00337608577683568}, {"id": 260, "seek": 122932, "start": 1237.3999999999999, "end": 1239.3999999999999, "text": " For all the intents and purposes", "tokens": [50768, 1171, 439, 264, 560, 791, 293, 9932, 50868], "temperature": 0.0, "avg_logprob": -0.2439435828815807, "compression_ratio": 1.6803652968036529, "no_speech_prob": 0.00337608577683568}, {"id": 261, "seek": 122932, "start": 1239.72, "end": 1246.48, "text": " This state represents at signs this state represents the hashtags and this represents integers", "tokens": [50884, 639, 1785, 8855, 412, 7880, 341, 1785, 8855, 264, 50016, 293, 341, 8855, 41674, 51222], "temperature": 0.0, "avg_logprob": -0.2439435828815807, "compression_ratio": 1.6803652968036529, "no_speech_prob": 0.00337608577683568}, {"id": 262, "seek": 122932, "start": 1247.12, "end": 1251.4399999999998, "text": " That's really what a FSM is but for our problem", "tokens": [51254, 663, 311, 534, 437, 257, 479, 26693, 307, 457, 337, 527, 1154, 51470], "temperature": 0.0, "avg_logprob": -0.2439435828815807, "compression_ratio": 1.6803652968036529, "no_speech_prob": 0.00337608577683568}, {"id": 263, "seek": 122932, "start": 1251.4399999999998, "end": 1255.28, "text": " We don't want this computation happening every single time this method is involved", "tokens": [51470, 492, 500, 380, 528, 341, 24903, 2737, 633, 2167, 565, 341, 3170, 307, 3288, 51662], "temperature": 0.0, "avg_logprob": -0.2439435828815807, "compression_ratio": 1.6803652968036529, "no_speech_prob": 0.00337608577683568}, {"id": 264, "seek": 125528, "start": 1255.28, "end": 1262.04, "text": " Which is why we create one instance and we store that object with its state in a constant", "tokens": [50364, 3013, 307, 983, 321, 1884, 472, 5197, 293, 321, 3531, 300, 2657, 365, 1080, 1785, 294, 257, 5754, 50702], "temperature": 0.0, "avg_logprob": -0.2600165473090278, "compression_ratio": 1.5546218487394958, "no_speech_prob": 0.004608244635164738}, {"id": 265, "seek": 125528, "start": 1262.16, "end": 1264.16, "text": " This is our constant I declared in Java", "tokens": [50708, 639, 307, 527, 5754, 286, 15489, 294, 10745, 50808], "temperature": 0.0, "avg_logprob": -0.2600165473090278, "compression_ratio": 1.5546218487394958, "no_speech_prob": 0.004608244635164738}, {"id": 266, "seek": 125528, "start": 1265.12, "end": 1272.2, "text": " So let's look at the time differences. Now firstly, I'll invoke the slow method if I run this program", "tokens": [50856, 407, 718, 311, 574, 412, 264, 565, 7300, 13, 823, 27376, 11, 286, 603, 41117, 264, 2964, 3170, 498, 286, 1190, 341, 1461, 51210], "temperature": 0.0, "avg_logprob": -0.2600165473090278, "compression_ratio": 1.5546218487394958, "no_speech_prob": 0.004608244635164738}, {"id": 267, "seek": 125528, "start": 1274.16, "end": 1279.06, "text": " You'll see that's how long it takes. Let me zoom in a bit there. So this is", "tokens": [51308, 509, 603, 536, 300, 311, 577, 938, 309, 2516, 13, 961, 385, 8863, 294, 257, 857, 456, 13, 407, 341, 307, 51553], "temperature": 0.0, "avg_logprob": -0.2600165473090278, "compression_ratio": 1.5546218487394958, "no_speech_prob": 0.004608244635164738}, {"id": 268, "seek": 125528, "start": 1279.56, "end": 1282.44, "text": " Millions seconds, isn't it? This is it's always in nanoseconds", "tokens": [51578, 7190, 626, 3949, 11, 1943, 380, 309, 30, 639, 307, 309, 311, 1009, 294, 14067, 541, 28750, 51722], "temperature": 0.0, "avg_logprob": -0.2600165473090278, "compression_ratio": 1.5546218487394958, "no_speech_prob": 0.004608244635164738}, {"id": 269, "seek": 128244, "start": 1283.44, "end": 1286.72, "text": " Man, I'm not even sure. I think this is a nanoseconds. I", "tokens": [50414, 2458, 11, 286, 478, 406, 754, 988, 13, 286, 519, 341, 307, 257, 14067, 541, 28750, 13, 286, 50578], "temperature": 0.0, "avg_logprob": -0.20426005761600236, "compression_ratio": 1.5738396624472575, "no_speech_prob": 0.003765149973332882}, {"id": 270, "seek": 128244, "start": 1287.28, "end": 1289.28, "text": " Looked it up, but in fact both my", "tokens": [50606, 2053, 292, 309, 493, 11, 457, 294, 1186, 1293, 452, 50706], "temperature": 0.0, "avg_logprob": -0.20426005761600236, "compression_ratio": 1.5738396624472575, "no_speech_prob": 0.003765149973332882}, {"id": 271, "seek": 128244, "start": 1289.8, "end": 1296.92, "text": " Options were wrong. It's actually microseconds. There you go. That's my ignorance. So it takes around 115 microseconds", "tokens": [50732, 42934, 645, 2085, 13, 467, 311, 767, 3123, 37841, 28750, 13, 821, 291, 352, 13, 663, 311, 452, 25390, 13, 407, 309, 2516, 926, 39436, 3123, 37841, 28750, 51088], "temperature": 0.0, "avg_logprob": -0.20426005761600236, "compression_ratio": 1.5738396624472575, "no_speech_prob": 0.003765149973332882}, {"id": 272, "seek": 128244, "start": 1297.52, "end": 1301.96, "text": " For this function to run and now if we do change it to fast", "tokens": [51118, 1171, 341, 2445, 281, 1190, 293, 586, 498, 321, 360, 1319, 309, 281, 2370, 51340], "temperature": 0.0, "avg_logprob": -0.20426005761600236, "compression_ratio": 1.5738396624472575, "no_speech_prob": 0.003765149973332882}, {"id": 273, "seek": 128244, "start": 1303.76, "end": 1310.56, "text": " Now keep in mind what the fastest what this method does is that it doesn't invoke the matches method in", "tokens": [51430, 823, 1066, 294, 1575, 437, 264, 14573, 437, 341, 3170, 775, 307, 300, 309, 1177, 380, 41117, 264, 10676, 3170, 294, 51770], "temperature": 0.0, "avg_logprob": -0.20426005761600236, "compression_ratio": 1.5738396624472575, "no_speech_prob": 0.003765149973332882}, {"id": 274, "seek": 131056, "start": 1311.56, "end": 1313.6799999999998, "text": " Well, sorry, it doesn't work the matches method", "tokens": [50414, 1042, 11, 2597, 11, 309, 1177, 380, 589, 264, 10676, 3170, 50520], "temperature": 0.0, "avg_logprob": -0.23712083065148556, "compression_ratio": 1.562992125984252, "no_speech_prob": 0.001987628173083067}, {"id": 275, "seek": 131056, "start": 1313.6799999999998, "end": 1318.84, "text": " But it isn't compile a new pattern every single time because we just use the cached Roman", "tokens": [50520, 583, 309, 1943, 380, 31413, 257, 777, 5102, 633, 2167, 565, 570, 321, 445, 764, 264, 269, 15095, 8566, 50778], "temperature": 0.0, "avg_logprob": -0.23712083065148556, "compression_ratio": 1.562992125984252, "no_speech_prob": 0.001987628173083067}, {"id": 276, "seek": 131056, "start": 1319.84, "end": 1323.34, "text": " Instance here. So if we run that it'll be much faster", "tokens": [50828, 2730, 719, 510, 13, 407, 498, 321, 1190, 300, 309, 603, 312, 709, 4663, 51003], "temperature": 0.0, "avg_logprob": -0.23712083065148556, "compression_ratio": 1.562992125984252, "no_speech_prob": 0.001987628173083067}, {"id": 277, "seek": 131056, "start": 1324.12, "end": 1325.76, "text": " There you go", "tokens": [51042, 821, 291, 352, 51124], "temperature": 0.0, "avg_logprob": -0.23712083065148556, "compression_ratio": 1.562992125984252, "no_speech_prob": 0.001987628173083067}, {"id": 278, "seek": 131056, "start": 1325.76, "end": 1327.36, "text": " half the time", "tokens": [51124, 1922, 264, 565, 51204], "temperature": 0.0, "avg_logprob": -0.23712083065148556, "compression_ratio": 1.562992125984252, "no_speech_prob": 0.001987628173083067}, {"id": 279, "seek": 131056, "start": 1327.36, "end": 1330.76, "text": " 60 milliseconds 12 milliseconds for the next computation and", "tokens": [51204, 4060, 34184, 2272, 34184, 337, 264, 958, 24903, 293, 51374], "temperature": 0.0, "avg_logprob": -0.23712083065148556, "compression_ratio": 1.562992125984252, "no_speech_prob": 0.001987628173083067}, {"id": 280, "seek": 131056, "start": 1331.32, "end": 1338.56, "text": " Joshua block states in his machine. It was for a eight character input string. It was six six point five times faster", "tokens": [51402, 24005, 3461, 4368, 294, 702, 3479, 13, 467, 390, 337, 257, 3180, 2517, 4846, 6798, 13, 467, 390, 2309, 2309, 935, 1732, 1413, 4663, 51764], "temperature": 0.0, "avg_logprob": -0.23712083065148556, "compression_ratio": 1.562992125984252, "no_speech_prob": 0.001987628173083067}, {"id": 281, "seek": 133856, "start": 1338.9199999999998, "end": 1347.28, "text": " Which is why he says the improved version is of is numeral provides significant performance gains if invoked frequently", "tokens": [50382, 3013, 307, 983, 415, 1619, 264, 9689, 3037, 307, 295, 307, 1031, 2790, 6417, 4776, 3389, 16823, 498, 1048, 9511, 10374, 50800], "temperature": 0.0, "avg_logprob": -0.2236210734573836, "compression_ratio": 1.677685950413223, "no_speech_prob": 0.0022515554446727037}, {"id": 282, "seek": 133856, "start": 1347.6399999999999, "end": 1351.56, "text": " Then it continues and that's a really good point. He sort of touched on this in", "tokens": [50818, 1396, 309, 6515, 293, 300, 311, 257, 534, 665, 935, 13, 634, 1333, 295, 9828, 322, 341, 294, 51014], "temperature": 0.0, "avg_logprob": -0.2236210734573836, "compression_ratio": 1.677685950413223, "no_speech_prob": 0.0022515554446727037}, {"id": 283, "seek": 133856, "start": 1352.6, "end": 1355.8, "text": " the in item number one where you could in fact give", "tokens": [51066, 264, 294, 3174, 1230, 472, 689, 291, 727, 294, 1186, 976, 51226], "temperature": 0.0, "avg_logprob": -0.2236210734573836, "compression_ratio": 1.677685950413223, "no_speech_prob": 0.0022515554446727037}, {"id": 284, "seek": 133856, "start": 1357.1599999999999, "end": 1361.76, "text": " Static methods or even static values a name. It's more clearer", "tokens": [51294, 745, 2399, 7150, 420, 754, 13437, 4190, 257, 1315, 13, 467, 311, 544, 26131, 51524], "temperature": 0.0, "avg_logprob": -0.2236210734573836, "compression_ratio": 1.677685950413223, "no_speech_prob": 0.0022515554446727037}, {"id": 285, "seek": 133856, "start": 1361.84, "end": 1366.3999999999999, "text": " It's more. It's it's quite clear that this pattern is a Roman pattern Roman numeral pattern", "tokens": [51528, 467, 311, 544, 13, 467, 311, 309, 311, 1596, 1850, 300, 341, 5102, 307, 257, 8566, 5102, 8566, 1031, 2790, 5102, 51756], "temperature": 0.0, "avg_logprob": -0.2236210734573836, "compression_ratio": 1.677685950413223, "no_speech_prob": 0.0022515554446727037}, {"id": 286, "seek": 136640, "start": 1366.88, "end": 1375.1200000000001, "text": " So not only is the performance improved but arguably so is clarity the clarity because we know what the pattern we're using here", "tokens": [50388, 407, 406, 787, 307, 264, 3389, 9689, 457, 26771, 370, 307, 16992, 264, 16992, 570, 321, 458, 437, 264, 5102, 321, 434, 1228, 510, 50800], "temperature": 0.0, "avg_logprob": -0.19169912532884248, "compression_ratio": 1.6199261992619927, "no_speech_prob": 0.0008829127764329314}, {"id": 287, "seek": 136640, "start": 1376.6000000000001, "end": 1380.68, "text": " Making a static final field for the otherwise invisible pattern instance", "tokens": [50874, 14595, 257, 13437, 2572, 2519, 337, 264, 5911, 14603, 5102, 5197, 51078], "temperature": 0.0, "avg_logprob": -0.19169912532884248, "compression_ratio": 1.6199261992619927, "no_speech_prob": 0.0008829127764329314}, {"id": 288, "seek": 136640, "start": 1380.68, "end": 1384.0400000000002, "text": " A love allows us to give it a name. It's more explicit and clear", "tokens": [51078, 316, 959, 4045, 505, 281, 976, 309, 257, 1315, 13, 467, 311, 544, 13691, 293, 1850, 51246], "temperature": 0.0, "avg_logprob": -0.19169912532884248, "compression_ratio": 1.6199261992619927, "no_speech_prob": 0.0008829127764329314}, {"id": 289, "seek": 136640, "start": 1384.16, "end": 1387.52, "text": " Which is far more readable than the regular expression itself", "tokens": [51252, 3013, 307, 1400, 544, 49857, 813, 264, 3890, 6114, 2564, 51420], "temperature": 0.0, "avg_logprob": -0.19169912532884248, "compression_ratio": 1.6199261992619927, "no_speech_prob": 0.0008829127764329314}, {"id": 290, "seek": 136640, "start": 1387.52, "end": 1395.0, "text": " and then he makes a bit of an ancillary point just to clarify about lazy loading because now as I said when we", "tokens": [51420, 293, 550, 415, 1669, 257, 857, 295, 364, 364, 7383, 822, 935, 445, 281, 17594, 466, 14847, 15114, 570, 586, 382, 286, 848, 562, 321, 51794], "temperature": 0.0, "avg_logprob": -0.19169912532884248, "compression_ratio": 1.6199261992619927, "no_speech_prob": 0.0008829127764329314}, {"id": 291, "seek": 139500, "start": 1395.96, "end": 1402.08, "text": " Do it this way when we declare it in a private static final field and cash that object", "tokens": [50412, 1144, 309, 341, 636, 562, 321, 19710, 309, 294, 257, 4551, 13437, 2572, 2519, 293, 6388, 300, 2657, 50718], "temperature": 0.0, "avg_logprob": -0.21103317260742188, "compression_ratio": 1.7422222222222221, "no_speech_prob": 0.0036489604972302914}, {"id": 292, "seek": 139500, "start": 1402.32, "end": 1406.56, "text": " This belongs to this class. So it can be reused all the", "tokens": [50730, 639, 12953, 281, 341, 1508, 13, 407, 309, 393, 312, 319, 4717, 439, 264, 50942], "temperature": 0.0, "avg_logprob": -0.21103317260742188, "compression_ratio": 1.7422222222222221, "no_speech_prob": 0.0036489604972302914}, {"id": 293, "seek": 139500, "start": 1407.2, "end": 1413.04, "text": " Objects of this class all the instances of this class will reuse this but what if we never use this object?", "tokens": [50974, 24753, 82, 295, 341, 1508, 439, 264, 14519, 295, 341, 1508, 486, 26225, 341, 457, 437, 498, 321, 1128, 764, 341, 2657, 30, 51266], "temperature": 0.0, "avg_logprob": -0.21103317260742188, "compression_ratio": 1.7422222222222221, "no_speech_prob": 0.0036489604972302914}, {"id": 294, "seek": 139500, "start": 1413.08, "end": 1415.08, "text": " It's just gonna be created", "tokens": [51268, 467, 311, 445, 799, 312, 2942, 51368], "temperature": 0.0, "avg_logprob": -0.21103317260742188, "compression_ratio": 1.7422222222222221, "no_speech_prob": 0.0036489604972302914}, {"id": 295, "seek": 139500, "start": 1415.08, "end": 1421.8, "text": " For no reason at all and it's gonna exist in the heap space. Sorry. Yeah in the dynamic meta space in the heap and", "tokens": [51368, 1171, 572, 1778, 412, 439, 293, 309, 311, 799, 2514, 294, 264, 33591, 1901, 13, 4919, 13, 865, 294, 264, 8546, 19616, 1901, 294, 264, 33591, 293, 51704], "temperature": 0.0, "avg_logprob": -0.21103317260742188, "compression_ratio": 1.7422222222222221, "no_speech_prob": 0.0036489604972302914}, {"id": 296, "seek": 142180, "start": 1422.6, "end": 1427.6399999999999, "text": " Here, you know, he says, oh, look, we could probably lazy load. However, perhaps it's not required", "tokens": [50404, 1692, 11, 291, 458, 11, 415, 1619, 11, 1954, 11, 574, 11, 321, 727, 1391, 14847, 3677, 13, 2908, 11, 4317, 309, 311, 406, 4739, 50656], "temperature": 0.0, "avg_logprob": -0.2936236884004326, "compression_ratio": 1.543103448275862, "no_speech_prob": 0.0027145445346832275}, {"id": 297, "seek": 142180, "start": 1427.6399999999999, "end": 1430.3999999999999, "text": " We don't have to over complicate things for", "tokens": [50656, 492, 500, 380, 362, 281, 670, 1209, 8700, 721, 337, 50794], "temperature": 0.0, "avg_logprob": -0.2936236884004326, "compression_ratio": 1.543103448275862, "no_speech_prob": 0.0027145445346832275}, {"id": 298, "seek": 142180, "start": 1431.32, "end": 1436.24, "text": " Optimization as don't canoe and I think it was apocryphally attributed to him", "tokens": [50840, 35013, 2144, 382, 500, 380, 47650, 293, 286, 519, 309, 390, 1882, 905, 627, 950, 379, 30976, 281, 796, 51086], "temperature": 0.0, "avg_logprob": -0.2936236884004326, "compression_ratio": 1.543103448275862, "no_speech_prob": 0.0027145445346832275}, {"id": 299, "seek": 142180, "start": 1437.28, "end": 1439.8, "text": " premature optimization is the root of all evil and", "tokens": [51138, 34877, 19618, 307, 264, 5593, 295, 439, 6724, 293, 51264], "temperature": 0.0, "avg_logprob": -0.2936236884004326, "compression_ratio": 1.543103448275862, "no_speech_prob": 0.0027145445346832275}, {"id": 300, "seek": 142180, "start": 1440.6, "end": 1445.2, "text": " He continues not only is the performance improved. Oh, sorry. I already read that part", "tokens": [51304, 634, 6515, 406, 787, 307, 264, 3389, 9689, 13, 876, 11, 2597, 13, 286, 1217, 1401, 300, 644, 51534], "temperature": 0.0, "avg_logprob": -0.2936236884004326, "compression_ratio": 1.543103448275862, "no_speech_prob": 0.0027145445346832275}, {"id": 301, "seek": 144520, "start": 1445.44, "end": 1452.0800000000002, "text": " If the class containing the improved version of the is numeral method is initialized, but the method is never invoked", "tokens": [50376, 759, 264, 1508, 19273, 264, 9689, 3037, 295, 264, 307, 1031, 2790, 3170, 307, 5883, 1602, 11, 457, 264, 3170, 307, 1128, 1048, 9511, 50708], "temperature": 0.0, "avg_logprob": -0.2430404830764938, "compression_ratio": 1.8516746411483254, "no_speech_prob": 0.0034293844364583492}, {"id": 302, "seek": 144520, "start": 1452.3600000000001, "end": 1457.48, "text": " So what if this is numeral fast method is never used and this just exists there?", "tokens": [50722, 407, 437, 498, 341, 307, 1031, 2790, 2370, 3170, 307, 1128, 1143, 293, 341, 445, 8198, 456, 30, 50978], "temperature": 0.0, "avg_logprob": -0.2430404830764938, "compression_ratio": 1.8516746411483254, "no_speech_prob": 0.0034293844364583492}, {"id": 303, "seek": 144520, "start": 1458.76, "end": 1461.6000000000001, "text": " The field Roman will be initialized needlessly", "tokens": [51042, 440, 2519, 8566, 486, 312, 5883, 1602, 643, 12048, 51184], "temperature": 0.0, "avg_logprob": -0.2430404830764938, "compression_ratio": 1.8516746411483254, "no_speech_prob": 0.0034293844364583492}, {"id": 304, "seek": 144520, "start": 1461.72, "end": 1465.1200000000001, "text": " It would be possible to eliminate the initial initialization", "tokens": [51190, 467, 576, 312, 1944, 281, 13819, 264, 5883, 5883, 2144, 51360], "temperature": 0.0, "avg_logprob": -0.2430404830764938, "compression_ratio": 1.8516746411483254, "no_speech_prob": 0.0034293844364583492}, {"id": 305, "seek": 144520, "start": 1466.0, "end": 1472.3600000000001, "text": " By lazily initializing the field the first time the is numeral method is invoked", "tokens": [51404, 3146, 19320, 953, 5883, 3319, 264, 2519, 264, 700, 565, 264, 307, 1031, 2790, 3170, 307, 1048, 9511, 51722], "temperature": 0.0, "avg_logprob": -0.2430404830764938, "compression_ratio": 1.8516746411483254, "no_speech_prob": 0.0034293844364583492}, {"id": 306, "seek": 147236, "start": 1472.36, "end": 1477.4799999999998, "text": " But this is not recommended as it's often the case with lazy initial initialization", "tokens": [50364, 583, 341, 307, 406, 9628, 382, 309, 311, 2049, 264, 1389, 365, 14847, 5883, 5883, 2144, 50620], "temperature": 0.0, "avg_logprob": -0.24988224109013876, "compression_ratio": 1.6126482213438735, "no_speech_prob": 0.0028893344569951296}, {"id": 307, "seek": 147236, "start": 1477.6799999999998, "end": 1483.6399999999999, "text": " What can I read the word those two words together lazy initialization? It would", "tokens": [50630, 708, 393, 286, 1401, 264, 1349, 729, 732, 2283, 1214, 14847, 5883, 2144, 30, 467, 576, 50928], "temperature": 0.0, "avg_logprob": -0.24988224109013876, "compression_ratio": 1.6126482213438735, "no_speech_prob": 0.0028893344569951296}, {"id": 308, "seek": 147236, "start": 1484.8799999999999, "end": 1490.54, "text": " Complicate the implementation with no measurable performance improvement. So it's not required. It's fine", "tokens": [50990, 2432, 4770, 473, 264, 11420, 365, 572, 43615, 3389, 10444, 13, 407, 309, 311, 406, 4739, 13, 467, 311, 2489, 51273], "temperature": 0.0, "avg_logprob": -0.24988224109013876, "compression_ratio": 1.6126482213438735, "no_speech_prob": 0.0028893344569951296}, {"id": 309, "seek": 147236, "start": 1491.04, "end": 1494.6399999999999, "text": " To create an object even though it may potentially not be used", "tokens": [51298, 1407, 1884, 364, 2657, 754, 1673, 309, 815, 7263, 406, 312, 1143, 51478], "temperature": 0.0, "avg_logprob": -0.24988224109013876, "compression_ratio": 1.6126482213438735, "no_speech_prob": 0.0028893344569951296}, {"id": 310, "seek": 147236, "start": 1495.8799999999999, "end": 1497.8799999999999, "text": " especially with how fast", "tokens": [51540, 2318, 365, 577, 2370, 51640], "temperature": 0.0, "avg_logprob": -0.24988224109013876, "compression_ratio": 1.6126482213438735, "no_speech_prob": 0.0028893344569951296}, {"id": 311, "seek": 147236, "start": 1498.32, "end": 1501.52, "text": " Jvms of these the JVM and processes out these days", "tokens": [51662, 508, 85, 2592, 295, 613, 264, 508, 53, 44, 293, 7555, 484, 613, 1708, 51822], "temperature": 0.0, "avg_logprob": -0.24988224109013876, "compression_ratio": 1.6126482213438735, "no_speech_prob": 0.0028893344569951296}, {"id": 312, "seek": 150152, "start": 1501.52, "end": 1505.56, "text": " And with that we move to a bit of an interesting problem here", "tokens": [50364, 400, 365, 300, 321, 1286, 281, 257, 857, 295, 364, 1880, 1154, 510, 50566], "temperature": 0.0, "avg_logprob": -0.27031982491869444, "compression_ratio": 1.5856164383561644, "no_speech_prob": 0.0041984026320278645}, {"id": 313, "seek": 150152, "start": 1505.8799999999999, "end": 1513.16, "text": " What about less obvious situations for object reusability? I'd say this one seemed quite straightforward", "tokens": [50582, 708, 466, 1570, 6322, 6851, 337, 2657, 38860, 2310, 30, 286, 1116, 584, 341, 472, 6576, 1596, 15325, 50946], "temperature": 0.0, "avg_logprob": -0.27031982491869444, "compression_ratio": 1.5856164383561644, "no_speech_prob": 0.0041984026320278645}, {"id": 314, "seek": 150152, "start": 1513.56, "end": 1516.2, "text": " Well, I don't know if it was at least for me", "tokens": [50966, 1042, 11, 286, 500, 380, 458, 498, 309, 390, 412, 1935, 337, 385, 51098], "temperature": 0.0, "avg_logprob": -0.27031982491869444, "compression_ratio": 1.5856164383561644, "no_speech_prob": 0.0041984026320278645}, {"id": 315, "seek": 150152, "start": 1516.2, "end": 1521.6, "text": " But when I saw the code trust your block has written it came together. I was like, oh that makes complete sense", "tokens": [51098, 583, 562, 286, 1866, 264, 3089, 3361, 428, 3461, 575, 3720, 309, 1361, 1214, 13, 286, 390, 411, 11, 1954, 300, 1669, 3566, 2020, 51368], "temperature": 0.0, "avg_logprob": -0.27031982491869444, "compression_ratio": 1.5856164383561644, "no_speech_prob": 0.0041984026320278645}, {"id": 316, "seek": 150152, "start": 1522.0, "end": 1523.16, "text": " but I", "tokens": [51388, 457, 286, 51446], "temperature": 0.0, "avg_logprob": -0.27031982491869444, "compression_ratio": 1.5856164383561644, "no_speech_prob": 0.0041984026320278645}, {"id": 317, "seek": 150152, "start": 1523.16, "end": 1530.96, "text": " from being honest, I probably would have done it this way and made the mistake of invoking this pattern instance every single time so", "tokens": [51446, 490, 885, 3245, 11, 286, 1391, 576, 362, 1096, 309, 341, 636, 293, 1027, 264, 6146, 295, 1048, 5953, 341, 5102, 5197, 633, 2167, 565, 370, 51836], "temperature": 0.0, "avg_logprob": -0.27031982491869444, "compression_ratio": 1.5856164383561644, "no_speech_prob": 0.0041984026320278645}, {"id": 318, "seek": 153152, "start": 1531.6399999999999, "end": 1537.12, "text": " It's probably not so obvious for inexperienced programmers like myself, but nevertheless", "tokens": [50370, 467, 311, 1391, 406, 370, 6322, 337, 29961, 610, 47592, 41504, 411, 2059, 11, 457, 26924, 50644], "temperature": 0.0, "avg_logprob": -0.24610761754653032, "compression_ratio": 1.600896860986547, "no_speech_prob": 0.004069266375154257}, {"id": 319, "seek": 153152, "start": 1537.8799999999999, "end": 1540.52, "text": " Keeping aside aside the self-flagellation", "tokens": [50682, 30187, 7359, 7359, 264, 2698, 12, 3423, 609, 285, 399, 50814], "temperature": 0.0, "avg_logprob": -0.24610761754653032, "compression_ratio": 1.600896860986547, "no_speech_prob": 0.004069266375154257}, {"id": 320, "seek": 153152, "start": 1541.56, "end": 1547.6, "text": " What about when it's less obvious? So he says when an object is immutable like the Roman object here", "tokens": [50866, 708, 466, 562, 309, 311, 1570, 6322, 30, 407, 415, 1619, 562, 364, 2657, 307, 3397, 32148, 411, 264, 8566, 2657, 510, 51168], "temperature": 0.0, "avg_logprob": -0.24610761754653032, "compression_ratio": 1.600896860986547, "no_speech_prob": 0.004069266375154257}, {"id": 321, "seek": 153152, "start": 1548.12, "end": 1551.16, "text": " It is obvious that it can be reused safely", "tokens": [51194, 467, 307, 6322, 300, 309, 393, 312, 319, 4717, 11750, 51346], "temperature": 0.0, "avg_logprob": -0.24610761754653032, "compression_ratio": 1.600896860986547, "no_speech_prob": 0.004069266375154257}, {"id": 322, "seek": 153152, "start": 1551.84, "end": 1556.6, "text": " But there are other situations where it is far less obvious even kind of intuitive", "tokens": [51380, 583, 456, 366, 661, 6851, 689, 309, 307, 1400, 1570, 6322, 754, 733, 295, 21769, 51618], "temperature": 0.0, "avg_logprob": -0.24610761754653032, "compression_ratio": 1.600896860986547, "no_speech_prob": 0.004069266375154257}, {"id": 323, "seek": 155660, "start": 1557.08, "end": 1560.9599999999998, "text": " Now the example that Joshua block is used for that is adapters", "tokens": [50388, 823, 264, 1365, 300, 24005, 3461, 307, 1143, 337, 300, 307, 23169, 1559, 50582], "temperature": 0.0, "avg_logprob": -0.27203777858189176, "compression_ratio": 1.8544600938967135, "no_speech_prob": 0.0063860369846224785}, {"id": 324, "seek": 155660, "start": 1561.7199999999998, "end": 1564.24, "text": " adapters simply are an object", "tokens": [50620, 23169, 1559, 2935, 366, 364, 2657, 50746], "temperature": 0.0, "avg_logprob": -0.27203777858189176, "compression_ratio": 1.8544600938967135, "no_speech_prob": 0.0063860369846224785}, {"id": 325, "seek": 155660, "start": 1564.7199999999998, "end": 1570.7199999999998, "text": " which backs other objects by allowing two incompatible objects to", "tokens": [50770, 597, 19513, 661, 6565, 538, 8293, 732, 40393, 267, 964, 6565, 281, 51070], "temperature": 0.0, "avg_logprob": -0.27203777858189176, "compression_ratio": 1.8544600938967135, "no_speech_prob": 0.0063860369846224785}, {"id": 326, "seek": 155660, "start": 1571.12, "end": 1572.36, "text": " communicate together", "tokens": [51090, 7890, 1214, 51152], "temperature": 0.0, "avg_logprob": -0.27203777858189176, "compression_ratio": 1.8544600938967135, "no_speech_prob": 0.0063860369846224785}, {"id": 327, "seek": 155660, "start": 1572.36, "end": 1575.8799999999999, "text": " it's used a lot in the adapter pattern and even though", "tokens": [51152, 309, 311, 1143, 257, 688, 294, 264, 22860, 5102, 293, 754, 1673, 51328], "temperature": 0.0, "avg_logprob": -0.27203777858189176, "compression_ratio": 1.8544600938967135, "no_speech_prob": 0.0063860369846224785}, {"id": 328, "seek": 155660, "start": 1576.6399999999999, "end": 1578.9199999999998, "text": " Joshua block doesn't talk about the adapter pattern here", "tokens": [51366, 24005, 3461, 1177, 380, 751, 466, 264, 22860, 5102, 510, 51480], "temperature": 0.0, "avg_logprob": -0.27203777858189176, "compression_ratio": 1.8544600938967135, "no_speech_prob": 0.0063860369846224785}, {"id": 329, "seek": 155660, "start": 1578.9199999999998, "end": 1583.24, "text": " It's I think it's worth going through a few definitions definitions as to what the adapter pattern does", "tokens": [51480, 467, 311, 286, 519, 309, 311, 3163, 516, 807, 257, 1326, 21988, 21988, 382, 281, 437, 264, 22860, 5102, 775, 51696], "temperature": 0.0, "avg_logprob": -0.27203777858189176, "compression_ratio": 1.8544600938967135, "no_speech_prob": 0.0063860369846224785}, {"id": 330, "seek": 158324, "start": 1583.44, "end": 1585.2, "text": " But of course, I'll leave", "tokens": [50374, 583, 295, 1164, 11, 286, 603, 1856, 50462], "temperature": 0.0, "avg_logprob": -0.23906656753185185, "compression_ratio": 1.5726872246696035, "no_speech_prob": 0.003944130148738623}, {"id": 331, "seek": 158324, "start": 1585.2, "end": 1589.2, "text": " Some good articles down there in the description. There's a good one by Vile Dung", "tokens": [50462, 2188, 665, 11290, 760, 456, 294, 264, 3855, 13, 821, 311, 257, 665, 472, 538, 691, 794, 413, 1063, 50662], "temperature": 0.0, "avg_logprob": -0.23906656753185185, "compression_ratio": 1.5726872246696035, "no_speech_prob": 0.003944130148738623}, {"id": 332, "seek": 158324, "start": 1589.6, "end": 1596.04, "text": " Where he goes through a few examples as to how the adapter pattern is used and how adapters these objects are used", "tokens": [50682, 2305, 415, 1709, 807, 257, 1326, 5110, 382, 281, 577, 264, 22860, 5102, 307, 1143, 293, 577, 23169, 1559, 613, 6565, 366, 1143, 51004], "temperature": 0.0, "avg_logprob": -0.23906656753185185, "compression_ratio": 1.5726872246696035, "no_speech_prob": 0.003944130148738623}, {"id": 333, "seek": 158324, "start": 1597.04, "end": 1599.92, "text": " So the first definition is by refactoring guru", "tokens": [51054, 407, 264, 700, 7123, 307, 538, 1895, 578, 3662, 29949, 51198], "temperature": 0.0, "avg_logprob": -0.23906656753185185, "compression_ratio": 1.5726872246696035, "no_speech_prob": 0.003944130148738623}, {"id": 334, "seek": 158324, "start": 1600.76, "end": 1606.24, "text": " Adapter is a structural design pattern which allows incompatible objects to collaborate", "tokens": [51240, 1999, 5446, 307, 257, 15067, 1715, 5102, 597, 4045, 40393, 267, 964, 6565, 281, 18338, 51514], "temperature": 0.0, "avg_logprob": -0.23906656753185185, "compression_ratio": 1.5726872246696035, "no_speech_prob": 0.003944130148738623}, {"id": 335, "seek": 160624, "start": 1606.76, "end": 1609.96, "text": " The adapter acts as a wrapper between two objects", "tokens": [50390, 440, 22860, 10672, 382, 257, 46906, 1296, 732, 6565, 50550], "temperature": 0.0, "avg_logprob": -0.24401810728473428, "compression_ratio": 1.7387387387387387, "no_speech_prob": 0.09801769256591797}, {"id": 336, "seek": 160624, "start": 1609.96, "end": 1616.52, "text": " It catches calls for one object and transforms them to format an interface recognizable", "tokens": [50550, 467, 25496, 5498, 337, 472, 2657, 293, 35592, 552, 281, 7877, 364, 9226, 40757, 50878], "temperature": 0.0, "avg_logprob": -0.24401810728473428, "compression_ratio": 1.7387387387387387, "no_speech_prob": 0.09801769256591797}, {"id": 337, "seek": 160624, "start": 1617.28, "end": 1620.64, "text": " Recognizable by the second object on the adapter pattern. I would recommend", "tokens": [50916, 44682, 22395, 538, 264, 1150, 2657, 322, 264, 22860, 5102, 13, 286, 576, 2748, 51084], "temperature": 0.0, "avg_logprob": -0.24401810728473428, "compression_ratio": 1.7387387387387387, "no_speech_prob": 0.09801769256591797}, {"id": 338, "seek": 160624, "start": 1623.64, "end": 1626.1200000000001, "text": " If you want to get a good understanding of the adapter pattern", "tokens": [51234, 759, 291, 528, 281, 483, 257, 665, 3701, 295, 264, 22860, 5102, 51358], "temperature": 0.0, "avg_logprob": -0.24401810728473428, "compression_ratio": 1.7387387387387387, "no_speech_prob": 0.09801769256591797}, {"id": 339, "seek": 160624, "start": 1627.16, "end": 1628.52, "text": " This book", "tokens": [51410, 639, 1446, 51478], "temperature": 0.0, "avg_logprob": -0.24401810728473428, "compression_ratio": 1.7387387387387387, "no_speech_prob": 0.09801769256591797}, {"id": 340, "seek": 160624, "start": 1628.52, "end": 1634.04, "text": " Headfirst design patterns goes quite deeply into the adapter pattern with some really good examples", "tokens": [51478, 11398, 29581, 1715, 8294, 1709, 1596, 8760, 666, 264, 22860, 5102, 365, 512, 534, 665, 5110, 51754], "temperature": 0.0, "avg_logprob": -0.24401810728473428, "compression_ratio": 1.7387387387387387, "no_speech_prob": 0.09801769256591797}, {"id": 341, "seek": 163404, "start": 1634.04, "end": 1637.48, "text": " So I'll leave a link to this book down below in the description too", "tokens": [50364, 407, 286, 603, 1856, 257, 2113, 281, 341, 1446, 760, 2507, 294, 264, 3855, 886, 50536], "temperature": 0.0, "avg_logprob": -0.19458076328907198, "compression_ratio": 1.728301886792453, "no_speech_prob": 0.0008166832267306745}, {"id": 342, "seek": 163404, "start": 1637.48, "end": 1641.0, "text": " And I'm hoping to cover some parts of this book at least after I'm done with this", "tokens": [50536, 400, 286, 478, 7159, 281, 2060, 512, 3166, 295, 341, 1446, 412, 1935, 934, 286, 478, 1096, 365, 341, 50712], "temperature": 0.0, "avg_logprob": -0.19458076328907198, "compression_ratio": 1.728301886792453, "no_speech_prob": 0.0008166832267306745}, {"id": 343, "seek": 163404, "start": 1641.0, "end": 1642.44, "text": " It's probably gonna be next year", "tokens": [50712, 467, 311, 1391, 799, 312, 958, 1064, 50784], "temperature": 0.0, "avg_logprob": -0.19458076328907198, "compression_ratio": 1.728301886792453, "no_speech_prob": 0.0008166832267306745}, {"id": 344, "seek": 163404, "start": 1642.44, "end": 1649.28, "text": " So the next definition that I found for the adapter pattern is an adapter pattern acts as a connector between two", "tokens": [50784, 407, 264, 958, 7123, 300, 286, 1352, 337, 264, 22860, 5102, 307, 364, 22860, 5102, 10672, 382, 257, 19127, 1296, 732, 51126], "temperature": 0.0, "avg_logprob": -0.19458076328907198, "compression_ratio": 1.728301886792453, "no_speech_prob": 0.0008166832267306745}, {"id": 345, "seek": 163404, "start": 1650.12, "end": 1660.1599999999999, "text": " Incompatible interfaces that otherwise cannot be connected directly could be due to type mismatch whatnot an adapter wraps an existing class with a new interface", "tokens": [51168, 682, 1112, 11584, 964, 28416, 300, 5911, 2644, 312, 4582, 3838, 727, 312, 3462, 281, 2010, 23220, 852, 25882, 364, 22860, 25831, 364, 6741, 1508, 365, 257, 777, 9226, 51670], "temperature": 0.0, "avg_logprob": -0.19458076328907198, "compression_ratio": 1.728301886792453, "no_speech_prob": 0.0008166832267306745}, {"id": 346, "seek": 166016, "start": 1660.72, "end": 1664.28, "text": " So that it becomes compatible with the clients interface", "tokens": [50392, 407, 300, 309, 3643, 18218, 365, 264, 6982, 9226, 50570], "temperature": 0.0, "avg_logprob": -0.20121790113903226, "compression_ratio": 1.735042735042735, "no_speech_prob": 0.010326255112886429}, {"id": 347, "seek": 166016, "start": 1664.5600000000002, "end": 1669.88, "text": " The main motive behind using this pattern is to convert an existing interface", "tokens": [50584, 440, 2135, 28827, 2261, 1228, 341, 5102, 307, 281, 7620, 364, 6741, 9226, 50850], "temperature": 0.0, "avg_logprob": -0.20121790113903226, "compression_ratio": 1.735042735042735, "no_speech_prob": 0.010326255112886429}, {"id": 348, "seek": 166016, "start": 1670.6000000000001, "end": 1673.0400000000002, "text": " Into another interface that the client expects", "tokens": [50886, 23373, 1071, 9226, 300, 264, 6423, 33280, 51008], "temperature": 0.0, "avg_logprob": -0.20121790113903226, "compression_ratio": 1.735042735042735, "no_speech_prob": 0.010326255112886429}, {"id": 349, "seek": 166016, "start": 1673.88, "end": 1679.8000000000002, "text": " It's usually implemented once the application is assigned so one example as to how an adapter is used and", "tokens": [51050, 467, 311, 2673, 12270, 1564, 264, 3861, 307, 13279, 370, 472, 1365, 382, 281, 577, 364, 22860, 307, 1143, 293, 51346], "temperature": 0.0, "avg_logprob": -0.20121790113903226, "compression_ratio": 1.735042735042735, "no_speech_prob": 0.010326255112886429}, {"id": 350, "seek": 166016, "start": 1680.28, "end": 1685.92, "text": " Even though I read some definitions of the adapter pattern. I wouldn't say that the adapter pattern has been used here", "tokens": [51370, 2754, 1673, 286, 1401, 512, 21988, 295, 264, 22860, 5102, 13, 286, 2759, 380, 584, 300, 264, 22860, 5102, 575, 668, 1143, 510, 51652], "temperature": 0.0, "avg_logprob": -0.20121790113903226, "compression_ratio": 1.735042735042735, "no_speech_prob": 0.010326255112886429}, {"id": 351, "seek": 168592, "start": 1686.88, "end": 1694.68, "text": " Exactly or precisely, but it's worth looking to how the adapter pattern is used and that is in the map interface", "tokens": [50412, 7587, 420, 13402, 11, 457, 309, 311, 3163, 1237, 281, 577, 264, 22860, 5102, 307, 1143, 293, 300, 307, 294, 264, 4471, 9226, 50802], "temperature": 0.0, "avg_logprob": -0.2388421970865001, "compression_ratio": 1.6844660194174756, "no_speech_prob": 0.015658341348171234}, {"id": 352, "seek": 168592, "start": 1695.4, "end": 1697.4, "text": " so we so of course the map interface", "tokens": [50838, 370, 321, 370, 295, 1164, 264, 4471, 9226, 50938], "temperature": 0.0, "avg_logprob": -0.2388421970865001, "compression_ratio": 1.6844660194174756, "no_speech_prob": 0.015658341348171234}, {"id": 353, "seek": 168592, "start": 1697.88, "end": 1699.88, "text": " contains a method called a", "tokens": [50962, 8306, 257, 3170, 1219, 257, 51062], "temperature": 0.0, "avg_logprob": -0.2388421970865001, "compression_ratio": 1.6844660194174756, "no_speech_prob": 0.015658341348171234}, {"id": 354, "seek": 168592, "start": 1700.3200000000002, "end": 1702.3200000000002, "text": " key key set and", "tokens": [51084, 2141, 2141, 992, 293, 51184], "temperature": 0.0, "avg_logprob": -0.2388421970865001, "compression_ratio": 1.6844660194174756, "no_speech_prob": 0.015658341348171234}, {"id": 355, "seek": 168592, "start": 1702.76, "end": 1707.2, "text": " Our hash map, which is a concrete class will implement it which you see here", "tokens": [51206, 2621, 22019, 4471, 11, 597, 307, 257, 9859, 1508, 486, 4445, 309, 597, 291, 536, 510, 51428], "temperature": 0.0, "avg_logprob": -0.2388421970865001, "compression_ratio": 1.6844660194174756, "no_speech_prob": 0.015658341348171234}, {"id": 356, "seek": 168592, "start": 1708.1200000000001, "end": 1709.5600000000002, "text": " now what I", "tokens": [51474, 586, 437, 286, 51546], "temperature": 0.0, "avg_logprob": -0.2388421970865001, "compression_ratio": 1.6844660194174756, "no_speech_prob": 0.015658341348171234}, {"id": 357, "seek": 168592, "start": 1709.5600000000002, "end": 1712.76, "text": " Did do so as a client what I would do is I would create a hash map", "tokens": [51546, 2589, 360, 370, 382, 257, 6423, 437, 286, 576, 360, 307, 286, 576, 1884, 257, 22019, 4471, 51706], "temperature": 0.0, "avg_logprob": -0.2388421970865001, "compression_ratio": 1.6844660194174756, "no_speech_prob": 0.015658341348171234}, {"id": 358, "seek": 171276, "start": 1712.76, "end": 1719.2, "text": " I would add key value pairs and what the key set does is it returns a bunch of objects all the keys", "tokens": [50364, 286, 576, 909, 2141, 2158, 15494, 293, 437, 264, 2141, 992, 775, 307, 309, 11247, 257, 3840, 295, 6565, 439, 264, 9317, 50686], "temperature": 0.0, "avg_logprob": -0.1762499707810422, "compression_ratio": 1.8483412322274881, "no_speech_prob": 0.006191801279783249}, {"id": 359, "seek": 171276, "start": 1719.2, "end": 1724.24, "text": " Which are functionally identical so we can cache that value the key set value", "tokens": [50686, 3013, 366, 2445, 379, 14800, 370, 321, 393, 19459, 300, 2158, 264, 2141, 992, 2158, 50938], "temperature": 0.0, "avg_logprob": -0.1762499707810422, "compression_ratio": 1.8483412322274881, "no_speech_prob": 0.006191801279783249}, {"id": 360, "seek": 171276, "start": 1724.24, "end": 1730.36, "text": " We get can be cached and that's exactly what we see here in the implementation of key set", "tokens": [50938, 492, 483, 393, 312, 269, 15095, 293, 300, 311, 2293, 437, 321, 536, 510, 294, 264, 11420, 295, 2141, 992, 51244], "temperature": 0.0, "avg_logprob": -0.1762499707810422, "compression_ratio": 1.8483412322274881, "no_speech_prob": 0.006191801279783249}, {"id": 361, "seek": 171276, "start": 1730.52, "end": 1735.52, "text": " so this method which is what returns the key set first checks if", "tokens": [51252, 370, 341, 3170, 597, 307, 437, 11247, 264, 2141, 992, 700, 13834, 498, 51502], "temperature": 0.0, "avg_logprob": -0.1762499707810422, "compression_ratio": 1.8483412322274881, "no_speech_prob": 0.006191801279783249}, {"id": 362, "seek": 171276, "start": 1735.8799999999999, "end": 1740.64, "text": " the key set is present if this key set value is now which", "tokens": [51520, 264, 2141, 992, 307, 1974, 498, 341, 2141, 992, 2158, 307, 586, 597, 51758], "temperature": 0.0, "avg_logprob": -0.1762499707810422, "compression_ratio": 1.8483412322274881, "no_speech_prob": 0.006191801279783249}, {"id": 363, "seek": 174276, "start": 1742.76, "end": 1745.64, "text": " Wasn't going there. Oh, that's interesting. I", "tokens": [50364, 28782, 380, 516, 456, 13, 876, 11, 300, 311, 1880, 13, 286, 50508], "temperature": 0.0, "avg_logprob": -0.24364104094328703, "compression_ratio": 1.6942148760330578, "no_speech_prob": 0.0008425693376921117}, {"id": 364, "seek": 174276, "start": 1748.52, "end": 1750.52, "text": " Was clicking the the wrong", "tokens": [50652, 3027, 9697, 264, 264, 2085, 50752], "temperature": 0.0, "avg_logprob": -0.24364104094328703, "compression_ratio": 1.6942148760330578, "no_speech_prob": 0.0008425693376921117}, {"id": 365, "seek": 174276, "start": 1751.52, "end": 1757.64, "text": " Variable look sorry, it's been a long day if this key set variable which is in the abstract map if this isn't available", "tokens": [50802, 32511, 712, 574, 2597, 11, 309, 311, 668, 257, 938, 786, 498, 341, 2141, 992, 7006, 597, 307, 294, 264, 12649, 4471, 498, 341, 1943, 380, 2435, 51108], "temperature": 0.0, "avg_logprob": -0.24364104094328703, "compression_ratio": 1.6942148760330578, "no_speech_prob": 0.0008425693376921117}, {"id": 366, "seek": 174276, "start": 1757.64, "end": 1761.76, "text": " So if isn't cached then a new instance will be sent if not", "tokens": [51108, 407, 498, 1943, 380, 269, 15095, 550, 257, 777, 5197, 486, 312, 2279, 498, 406, 51314], "temperature": 0.0, "avg_logprob": -0.24364104094328703, "compression_ratio": 1.6942148760330578, "no_speech_prob": 0.0008425693376921117}, {"id": 367, "seek": 174276, "start": 1761.76, "end": 1765.28, "text": " There's a requirement that same instance same object can be reused", "tokens": [51314, 821, 311, 257, 11695, 300, 912, 5197, 912, 2657, 393, 312, 319, 4717, 51490], "temperature": 0.0, "avg_logprob": -0.24364104094328703, "compression_ratio": 1.6942148760330578, "no_speech_prob": 0.0008425693376921117}, {"id": 368, "seek": 174276, "start": 1765.48, "end": 1769.6, "text": " So here's what where we see that an object is being reused a good", "tokens": [51500, 407, 510, 311, 437, 689, 321, 536, 300, 364, 2657, 307, 885, 319, 4717, 257, 665, 51706], "temperature": 0.0, "avg_logprob": -0.24364104094328703, "compression_ratio": 1.6942148760330578, "no_speech_prob": 0.0008425693376921117}, {"id": 369, "seek": 174276, "start": 1770.4, "end": 1772.4, "text": " implementation in the JDK", "tokens": [51746, 11420, 294, 264, 37082, 42, 51846], "temperature": 0.0, "avg_logprob": -0.24364104094328703, "compression_ratio": 1.6942148760330578, "no_speech_prob": 0.0008425693376921117}, {"id": 370, "seek": 177276, "start": 1772.76, "end": 1775.96, "text": " So again to print more formally as to how this example makes sense", "tokens": [50364, 407, 797, 281, 4482, 544, 25983, 382, 281, 577, 341, 1365, 1669, 2020, 50524], "temperature": 0.0, "avg_logprob": -0.22618677261027884, "compression_ratio": 1.7448559670781894, "no_speech_prob": 0.000166019715834409}, {"id": 371, "seek": 177276, "start": 1776.68, "end": 1783.8, "text": " Theoretically although the return set instance is typically mutable. So that's the set that's returned here", "tokens": [50560, 440, 26262, 984, 4878, 264, 2736, 992, 5197, 307, 5850, 5839, 712, 13, 407, 300, 311, 264, 992, 300, 311, 8752, 510, 50916], "temperature": 0.0, "avg_logprob": -0.22618677261027884, "compression_ratio": 1.7448559670781894, "no_speech_prob": 0.000166019715834409}, {"id": 372, "seek": 177276, "start": 1785.8799999999999, "end": 1788.68, "text": " All of the return objects are functionally identical", "tokens": [51020, 1057, 295, 264, 2736, 6565, 366, 2445, 379, 14800, 51160], "temperature": 0.0, "avg_logprob": -0.22618677261027884, "compression_ratio": 1.7448559670781894, "no_speech_prob": 0.000166019715834409}, {"id": 373, "seek": 177276, "start": 1789.56, "end": 1793.48, "text": " When one of the return objects changes so do all the others", "tokens": [51204, 1133, 472, 295, 264, 2736, 6565, 2962, 370, 360, 439, 264, 2357, 51400], "temperature": 0.0, "avg_logprob": -0.22618677261027884, "compression_ratio": 1.7448559670781894, "no_speech_prob": 0.000166019715834409}, {"id": 374, "seek": 177276, "start": 1794.08, "end": 1797.08, "text": " Because they're all backed by the same map instance", "tokens": [51430, 1436, 436, 434, 439, 20391, 538, 264, 912, 4471, 5197, 51580], "temperature": 0.0, "avg_logprob": -0.22618677261027884, "compression_ratio": 1.7448559670781894, "no_speech_prob": 0.000166019715834409}, {"id": 375, "seek": 177276, "start": 1797.72, "end": 1802.44, "text": " While it is largely harmless to create multiple instances of the key set view object", "tokens": [51612, 3987, 309, 307, 11611, 40160, 281, 1884, 3866, 14519, 295, 264, 2141, 992, 1910, 2657, 51848], "temperature": 0.0, "avg_logprob": -0.22618677261027884, "compression_ratio": 1.7448559670781894, "no_speech_prob": 0.000166019715834409}, {"id": 376, "seek": 180276, "start": 1802.84, "end": 1806.36, "text": " It is unnecessary and has no benefits. So the similar point is", "tokens": [50368, 467, 307, 19350, 293, 575, 572, 5311, 13, 407, 264, 2531, 935, 307, 50544], "temperature": 0.0, "avg_logprob": -0.1931537122142558, "compression_ratio": 1.7064220183486238, "no_speech_prob": 0.0013249649200588465}, {"id": 377, "seek": 180276, "start": 1807.08, "end": 1813.08, "text": " Biggest what this method returns is a set view. So of type set of the key set", "tokens": [50580, 5429, 2629, 437, 341, 3170, 11247, 307, 257, 992, 1910, 13, 407, 295, 2010, 992, 295, 264, 2141, 992, 50880], "temperature": 0.0, "avg_logprob": -0.1931537122142558, "compression_ratio": 1.7064220183486238, "no_speech_prob": 0.0013249649200588465}, {"id": 378, "seek": 180276, "start": 1813.8799999999999, "end": 1817.64, "text": " While this key set the the values in the key set can change", "tokens": [50920, 3987, 341, 2141, 992, 264, 264, 4190, 294, 264, 2141, 992, 393, 1319, 51108], "temperature": 0.0, "avg_logprob": -0.1931537122142558, "compression_ratio": 1.7064220183486238, "no_speech_prob": 0.0013249649200588465}, {"id": 379, "seek": 180276, "start": 1818.2, "end": 1819.56, "text": " It's", "tokens": [51136, 467, 311, 51204], "temperature": 0.0, "avg_logprob": -0.1931537122142558, "compression_ratio": 1.7064220183486238, "no_speech_prob": 0.0013249649200588465}, {"id": 380, "seek": 180276, "start": 1819.56, "end": 1826.04, "text": " Functionally still the same so the adapter the the outer layer which it returns is still the same and that's a set", "tokens": [51204, 11166, 882, 379, 920, 264, 912, 370, 264, 22860, 264, 264, 10847, 4583, 597, 309, 11247, 307, 920, 264, 912, 293, 300, 311, 257, 992, 51528], "temperature": 0.0, "avg_logprob": -0.1931537122142558, "compression_ratio": 1.7064220183486238, "no_speech_prob": 0.0013249649200588465}, {"id": 381, "seek": 180276, "start": 1826.52, "end": 1829.32, "text": " So that's why it could be cached another example of", "tokens": [51552, 407, 300, 311, 983, 309, 727, 312, 269, 15095, 1071, 1365, 295, 51692], "temperature": 0.0, "avg_logprob": -0.1931537122142558, "compression_ratio": 1.7064220183486238, "no_speech_prob": 0.0013249649200588465}, {"id": 382, "seek": 182932, "start": 1829.6399999999999, "end": 1834.04, "text": " Reusing objects where it's less obvious is of course auto boxing now", "tokens": [50380, 1300, 7981, 6565, 689, 309, 311, 1570, 6322, 307, 295, 1164, 8399, 24424, 586, 50600], "temperature": 0.0, "avg_logprob": -0.1991039981012759, "compression_ratio": 1.8538812785388128, "no_speech_prob": 0.005219337530434132}, {"id": 383, "seek": 182932, "start": 1834.4399999999998, "end": 1840.28, "text": " What that does is of course it allows programmers to mix primitive and non primitive type", "tokens": [50620, 708, 300, 775, 307, 295, 1164, 309, 4045, 41504, 281, 2890, 28540, 293, 2107, 28540, 2010, 50912], "temperature": 0.0, "avg_logprob": -0.1991039981012759, "compression_ratio": 1.8538812785388128, "no_speech_prob": 0.005219337530434132}, {"id": 384, "seek": 182932, "start": 1840.28, "end": 1846.28, "text": " So primitive would be int a non primitive type or a a box type would be", "tokens": [50912, 407, 28540, 576, 312, 560, 257, 2107, 28540, 2010, 420, 257, 257, 2424, 2010, 576, 312, 51212], "temperature": 0.0, "avg_logprob": -0.1991039981012759, "compression_ratio": 1.8538812785388128, "no_speech_prob": 0.005219337530434132}, {"id": 385, "seek": 182932, "start": 1847.1599999999999, "end": 1853.24, "text": " Integer while yes auto boxing does give the object more flexibility and give it more functionality", "tokens": [51256, 5681, 30744, 1339, 2086, 8399, 24424, 775, 976, 264, 2657, 544, 12635, 293, 976, 309, 544, 14980, 51560], "temperature": 0.0, "avg_logprob": -0.1991039981012759, "compression_ratio": 1.8538812785388128, "no_speech_prob": 0.005219337530434132}, {"id": 386, "seek": 182932, "start": 1854.12, "end": 1858.36, "text": " It's not always a good idea to auto box because what auto box does is create", "tokens": [51604, 467, 311, 406, 1009, 257, 665, 1558, 281, 8399, 2424, 570, 437, 8399, 2424, 775, 307, 1884, 51816], "temperature": 0.0, "avg_logprob": -0.1991039981012759, "compression_ratio": 1.8538812785388128, "no_speech_prob": 0.005219337530434132}, {"id": 387, "seek": 185836, "start": 1859.1599999999999, "end": 1861.3999999999999, "text": " A new object every time it's involved", "tokens": [50404, 316, 777, 2657, 633, 565, 309, 311, 3288, 50516], "temperature": 0.0, "avg_logprob": -0.15487206107691714, "compression_ratio": 1.6435185185185186, "no_speech_prob": 0.0032717036083340645}, {"id": 388, "seek": 185836, "start": 1863.56, "end": 1868.28, "text": " So the example we've used or the example that joshua block has given is", "tokens": [50624, 407, 264, 1365, 321, 600, 1143, 420, 264, 1365, 300, 361, 3019, 4398, 3461, 575, 2212, 307, 50860], "temperature": 0.0, "avg_logprob": -0.15487206107691714, "compression_ratio": 1.6435185185185186, "no_speech_prob": 0.0032717036083340645}, {"id": 389, "seek": 185836, "start": 1869.32, "end": 1873.32, "text": " In this sum class where in fact, I changed it to the proper way", "tokens": [50912, 682, 341, 2408, 1508, 689, 294, 1186, 11, 286, 3105, 309, 281, 264, 2296, 636, 51112], "temperature": 0.0, "avg_logprob": -0.15487206107691714, "compression_ratio": 1.6435185185185186, "no_speech_prob": 0.0032717036083340645}, {"id": 390, "seek": 185836, "start": 1873.56, "end": 1878.36, "text": " So this is the bad bit to do it where we have used an auto box type long", "tokens": [51124, 407, 341, 307, 264, 1578, 857, 281, 360, 309, 689, 321, 362, 1143, 364, 8399, 2424, 2010, 938, 51364], "temperature": 0.0, "avg_logprob": -0.15487206107691714, "compression_ratio": 1.6435185185185186, "no_speech_prob": 0.0032717036083340645}, {"id": 391, "seek": 185836, "start": 1878.84, "end": 1883.9599999999998, "text": " And in fact the idea look at that it's even warning us to not to use this but rather to use a primitive type", "tokens": [51388, 400, 294, 1186, 264, 1558, 574, 412, 300, 309, 311, 754, 9164, 505, 281, 406, 281, 764, 341, 457, 2831, 281, 764, 257, 28540, 2010, 51644], "temperature": 0.0, "avg_logprob": -0.15487206107691714, "compression_ratio": 1.6435185185185186, "no_speech_prob": 0.0032717036083340645}, {"id": 392, "seek": 188396, "start": 1884.52, "end": 1888.44, "text": " Now with this if we do run this loop where it's running", "tokens": [50392, 823, 365, 341, 498, 321, 360, 1190, 341, 6367, 689, 309, 311, 2614, 50588], "temperature": 0.0, "avg_logprob": -0.12578999690520457, "compression_ratio": 1.5336787564766838, "no_speech_prob": 0.007936838082969189}, {"id": 393, "seek": 188396, "start": 1889.24, "end": 1891.24, "text": " 2 to the power 31 times", "tokens": [50628, 568, 281, 264, 1347, 10353, 1413, 50728], "temperature": 0.0, "avg_logprob": -0.12578999690520457, "compression_ratio": 1.5336787564766838, "no_speech_prob": 0.007936838082969189}, {"id": 394, "seek": 188396, "start": 1892.68, "end": 1898.2, "text": " An unnecessary number of objects of long instances are created in this loop. So if we do run it", "tokens": [50800, 1107, 19350, 1230, 295, 6565, 295, 938, 14519, 366, 2942, 294, 341, 6367, 13, 407, 498, 321, 360, 1190, 309, 51076], "temperature": 0.0, "avg_logprob": -0.12578999690520457, "compression_ratio": 1.5336787564766838, "no_speech_prob": 0.007936838082969189}, {"id": 395, "seek": 188396, "start": 1903.4, "end": 1905.0, "text": " It takes so long", "tokens": [51336, 467, 2516, 370, 938, 51416], "temperature": 0.0, "avg_logprob": -0.12578999690520457, "compression_ratio": 1.5336787564766838, "no_speech_prob": 0.007936838082969189}, {"id": 396, "seek": 188396, "start": 1905.0, "end": 1908.8400000000001, "text": " Look at how long it takes it takes almost 3000 milliseconds and it keeps going", "tokens": [51416, 2053, 412, 577, 938, 309, 2516, 309, 2516, 1920, 20984, 34184, 293, 309, 5965, 516, 51608], "temperature": 0.0, "avg_logprob": -0.12578999690520457, "compression_ratio": 1.5336787564766838, "no_speech_prob": 0.007936838082969189}, {"id": 397, "seek": 188396, "start": 1910.04, "end": 1911.88, "text": " I'll just zoom into that", "tokens": [51668, 286, 603, 445, 8863, 666, 300, 51760], "temperature": 0.0, "avg_logprob": -0.12578999690520457, "compression_ratio": 1.5336787564766838, "no_speech_prob": 0.007936838082969189}, {"id": 398, "seek": 191188, "start": 1911.88, "end": 1917.0, "text": " But simply by just not using an auto box type and rather using a primitive type", "tokens": [50364, 583, 2935, 538, 445, 406, 1228, 364, 8399, 2424, 2010, 293, 2831, 1228, 257, 28540, 2010, 50620], "temperature": 0.0, "avg_logprob": -0.1260159736455873, "compression_ratio": 1.6267281105990783, "no_speech_prob": 0.0005613581161014736}, {"id": 399, "seek": 191188, "start": 1917.48, "end": 1921.0, "text": " We save a lot of time because there's no object creation involved here", "tokens": [50644, 492, 3155, 257, 688, 295, 565, 570, 456, 311, 572, 2657, 8016, 3288, 510, 50820], "temperature": 0.0, "avg_logprob": -0.1260159736455873, "compression_ratio": 1.6267281105990783, "no_speech_prob": 0.0005613581161014736}, {"id": 400, "seek": 191188, "start": 1921.72, "end": 1923.64, "text": " If you run it again", "tokens": [50856, 759, 291, 1190, 309, 797, 50952], "temperature": 0.0, "avg_logprob": -0.1260159736455873, "compression_ratio": 1.6267281105990783, "no_speech_prob": 0.0005613581161014736}, {"id": 401, "seek": 191188, "start": 1923.64, "end": 1925.64, "text": " It's much slower", "tokens": [50952, 467, 311, 709, 14009, 51052], "temperature": 0.0, "avg_logprob": -0.1260159736455873, "compression_ratio": 1.6267281105990783, "no_speech_prob": 0.0005613581161014736}, {"id": 402, "seek": 191188, "start": 1925.64, "end": 1930.5200000000002, "text": " That's the advantage of using primitive types over auto box types and", "tokens": [51052, 663, 311, 264, 5002, 295, 1228, 28540, 3467, 670, 8399, 2424, 3467, 293, 51296], "temperature": 0.0, "avg_logprob": -0.1260159736455873, "compression_ratio": 1.6267281105990783, "no_speech_prob": 0.0005613581161014736}, {"id": 403, "seek": 191188, "start": 1931.48, "end": 1936.2, "text": " Again, one has to be careful and the good thing is the the way you saw intelligent is beautiful", "tokens": [51344, 3764, 11, 472, 575, 281, 312, 5026, 293, 264, 665, 551, 307, 264, 264, 636, 291, 1866, 13232, 307, 2238, 51580], "temperature": 0.0, "avg_logprob": -0.1260159736455873, "compression_ratio": 1.6267281105990783, "no_speech_prob": 0.0005613581161014736}, {"id": 404, "seek": 193620, "start": 1936.2, "end": 1941.88, "text": " You got to love it the ide will normally warn you but you know in good programming etiquette", "tokens": [50364, 509, 658, 281, 959, 309, 264, 1153, 486, 5646, 12286, 291, 457, 291, 458, 294, 665, 9410, 42177, 3007, 50648], "temperature": 0.0, "avg_logprob": -0.15678809000098187, "compression_ratio": 1.6774193548387097, "no_speech_prob": 0.0056400541216135025}, {"id": 405, "seek": 193620, "start": 1942.2, "end": 1947.0, "text": " One should be aware of that and that's why he states the lesson is clear prefer primitives", "tokens": [50664, 1485, 820, 312, 3650, 295, 300, 293, 300, 311, 983, 415, 4368, 264, 6898, 307, 1850, 4382, 2886, 38970, 50904], "temperature": 0.0, "avg_logprob": -0.15678809000098187, "compression_ratio": 1.6774193548387097, "no_speech_prob": 0.0056400541216135025}, {"id": 406, "seek": 193620, "start": 1947.0800000000002, "end": 1950.1200000000001, "text": " So this here is the proper way to do it using a primitive type", "tokens": [50908, 407, 341, 510, 307, 264, 2296, 636, 281, 360, 309, 1228, 257, 28540, 2010, 51060], "temperature": 0.0, "avg_logprob": -0.15678809000098187, "compression_ratio": 1.6774193548387097, "no_speech_prob": 0.0056400541216135025}, {"id": 407, "seek": 193620, "start": 1951.0800000000002, "end": 1957.72, "text": " To box primitives and that is a wrong way using a box primitive which the ide warns us against", "tokens": [51108, 1407, 2424, 2886, 38970, 293, 300, 307, 257, 2085, 636, 1228, 257, 2424, 28540, 597, 264, 1153, 12286, 82, 505, 1970, 51440], "temperature": 0.0, "avg_logprob": -0.15678809000098187, "compression_ratio": 1.6774193548387097, "no_speech_prob": 0.0056400541216135025}, {"id": 408, "seek": 193620, "start": 1959.24, "end": 1961.24, "text": " Oops, uh, come on said", "tokens": [51516, 21726, 11, 2232, 11, 808, 322, 848, 51616], "temperature": 0.0, "avg_logprob": -0.15678809000098187, "compression_ratio": 1.6774193548387097, "no_speech_prob": 0.0056400541216135025}, {"id": 409, "seek": 196124, "start": 1962.2, "end": 1968.36, "text": " And watch out for unintentional auto boxing and then finally towards the end of the item", "tokens": [50412, 400, 1159, 484, 337, 45514, 304, 8399, 24424, 293, 550, 2721, 3030, 264, 917, 295, 264, 3174, 50720], "temperature": 0.0, "avg_logprob": -0.16290080547332764, "compression_ratio": 1.6408163265306122, "no_speech_prob": 0.004828959237784147}, {"id": 410, "seek": 196124, "start": 1968.6, "end": 1975.16, "text": " He does give some caveats and something I always appreciate about this book every single item has pros and cons", "tokens": [50732, 634, 775, 976, 512, 11730, 1720, 293, 746, 286, 1009, 4449, 466, 341, 1446, 633, 2167, 3174, 575, 6267, 293, 1014, 51060], "temperature": 0.0, "avg_logprob": -0.16290080547332764, "compression_ratio": 1.6408163265306122, "no_speech_prob": 0.004828959237784147}, {"id": 411, "seek": 196124, "start": 1975.48, "end": 1981.64, "text": " Uh, it it's a well written book because it looks into both sides of the equation. Let's say", "tokens": [51076, 4019, 11, 309, 309, 311, 257, 731, 3720, 1446, 570, 309, 1542, 666, 1293, 4881, 295, 264, 5367, 13, 961, 311, 584, 51384], "temperature": 0.0, "avg_logprob": -0.16290080547332764, "compression_ratio": 1.6408163265306122, "no_speech_prob": 0.004828959237784147}, {"id": 412, "seek": 196124, "start": 1982.2, "end": 1984.2, "text": " And discusses the trade-offs", "tokens": [51412, 400, 2248, 279, 264, 4923, 12, 19231, 51512], "temperature": 0.0, "avg_logprob": -0.16290080547332764, "compression_ratio": 1.6408163265306122, "no_speech_prob": 0.004828959237784147}, {"id": 413, "seek": 196124, "start": 1984.44, "end": 1989.4, "text": " So the the first caveat is that it's not the case that object creation should be", "tokens": [51524, 407, 264, 264, 700, 43012, 307, 300, 309, 311, 406, 264, 1389, 300, 2657, 8016, 820, 312, 51772], "temperature": 0.0, "avg_logprob": -0.16290080547332764, "compression_ratio": 1.6408163265306122, "no_speech_prob": 0.004828959237784147}, {"id": 414, "seek": 198940, "start": 1990.3600000000001, "end": 1996.1200000000001, "text": " Avoided at all costs, especially with how fast the processors are and how optimized the jvms", "tokens": [50412, 36175, 2112, 412, 439, 5497, 11, 2318, 365, 577, 2370, 264, 27751, 366, 293, 577, 26941, 264, 361, 85, 2592, 50700], "temperature": 0.0, "avg_logprob": -0.1263742446899414, "compression_ratio": 1.6768558951965065, "no_speech_prob": 0.009265296161174774}, {"id": 415, "seek": 198940, "start": 1996.8400000000001, "end": 1999.0800000000002, "text": " It's not that we should try our best to", "tokens": [50736, 467, 311, 406, 300, 321, 820, 853, 527, 1151, 281, 50848], "temperature": 0.0, "avg_logprob": -0.1263742446899414, "compression_ratio": 1.6768558951965065, "no_speech_prob": 0.009265296161174774}, {"id": 416, "seek": 198940, "start": 1999.8000000000002, "end": 2003.96, "text": " Not create objects again do the whole premature optimization thing", "tokens": [50884, 1726, 1884, 6565, 797, 360, 264, 1379, 34877, 19618, 551, 51092], "temperature": 0.0, "avg_logprob": -0.1263742446899414, "compression_ratio": 1.6768558951965065, "no_speech_prob": 0.009265296161174774}, {"id": 417, "seek": 198940, "start": 2005.0800000000002, "end": 2008.68, "text": " That's why he states this item should not be misconstrued", "tokens": [51148, 663, 311, 983, 415, 4368, 341, 3174, 820, 406, 312, 3346, 25279, 894, 292, 51328], "temperature": 0.0, "avg_logprob": -0.1263742446899414, "compression_ratio": 1.6768558951965065, "no_speech_prob": 0.009265296161174774}, {"id": 418, "seek": 198940, "start": 2009.16, "end": 2017.0, "text": " To imply that object creation is expensive and should be avoided on the contrary the creation and reclamation of small objects", "tokens": [51352, 1407, 33616, 300, 2657, 8016, 307, 5124, 293, 820, 312, 24890, 322, 264, 19506, 264, 8016, 293, 850, 43233, 295, 1359, 6565, 51744], "temperature": 0.0, "avg_logprob": -0.1263742446899414, "compression_ratio": 1.6768558951965065, "no_speech_prob": 0.009265296161174774}, {"id": 419, "seek": 201700, "start": 2017.08, "end": 2023.96, "text": " Whose constructors do little explicit work is cheap, especially on modern jvm implementations", "tokens": [50368, 28463, 7690, 830, 360, 707, 13691, 589, 307, 7084, 11, 2318, 322, 4363, 361, 85, 76, 4445, 763, 50712], "temperature": 0.0, "avg_logprob": -0.16162714546109425, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.001956864492967725}, {"id": 420, "seek": 201700, "start": 2024.76, "end": 2027.56, "text": " Creating additional objects to enhance the clarity", "tokens": [50752, 40002, 4497, 6565, 281, 11985, 264, 16992, 50892], "temperature": 0.0, "avg_logprob": -0.16162714546109425, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.001956864492967725}, {"id": 421, "seek": 201700, "start": 2028.04, "end": 2031.32, "text": " Simplicity or power of a program is generally a good thing", "tokens": [50916, 3998, 24428, 420, 1347, 295, 257, 1461, 307, 5101, 257, 665, 551, 51080], "temperature": 0.0, "avg_logprob": -0.16162714546109425, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.001956864492967725}, {"id": 422, "seek": 201700, "start": 2031.8, "end": 2035.08, "text": " And then we go to a classic example the classic example of an object", "tokens": [51104, 400, 550, 321, 352, 281, 257, 7230, 1365, 264, 7230, 1365, 295, 364, 2657, 51268], "temperature": 0.0, "avg_logprob": -0.16162714546109425, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.001956864492967725}, {"id": 423, "seek": 201700, "start": 2035.96, "end": 2040.68, "text": " That does justify an object pool is a database connection, which is why", "tokens": [51312, 663, 775, 20833, 364, 2657, 7005, 307, 257, 8149, 4984, 11, 597, 307, 983, 51548], "temperature": 0.0, "avg_logprob": -0.16162714546109425, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.001956864492967725}, {"id": 424, "seek": 201700, "start": 2041.4, "end": 2042.6, "text": " conversely", "tokens": [51584, 2615, 736, 51644], "temperature": 0.0, "avg_logprob": -0.16162714546109425, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.001956864492967725}, {"id": 425, "seek": 204260, "start": 2042.6, "end": 2050.7599999999998, "text": " Maintaining object pool in this case would be a better idea unless the object is significantly heavy weight a like a database connection", "tokens": [50364, 376, 5114, 3686, 2657, 7005, 294, 341, 1389, 576, 312, 257, 1101, 1558, 5969, 264, 2657, 307, 10591, 4676, 3364, 257, 411, 257, 8149, 4984, 50772], "temperature": 0.0, "avg_logprob": -0.10506135961982642, "compression_ratio": 1.7415254237288136, "no_speech_prob": 0.0005527152097783983}, {"id": 426, "seek": 204260, "start": 2051.3199999999997, "end": 2055.64, "text": " So it depends on what the object we create is as to whether", "tokens": [50800, 407, 309, 5946, 322, 437, 264, 2657, 321, 1884, 307, 382, 281, 1968, 51016], "temperature": 0.0, "avg_logprob": -0.10506135961982642, "compression_ratio": 1.7415254237288136, "no_speech_prob": 0.0005527152097783983}, {"id": 427, "seek": 204260, "start": 2056.2799999999997, "end": 2061.72, "text": " It makes sense to optimize it and to reuse it or just simply create an object if it's lightweight for instance", "tokens": [51048, 467, 1669, 2020, 281, 19719, 309, 293, 281, 26225, 309, 420, 445, 2935, 1884, 364, 2657, 498, 309, 311, 22052, 337, 5197, 51320], "temperature": 0.0, "avg_logprob": -0.10506135961982642, "compression_ratio": 1.7415254237288136, "no_speech_prob": 0.0005527152097783983}, {"id": 428, "seek": 204260, "start": 2062.44, "end": 2065.64, "text": " The cost of establishing the connection is sufficiently high", "tokens": [51356, 440, 2063, 295, 22494, 264, 4984, 307, 31868, 1090, 51516], "temperature": 0.0, "avg_logprob": -0.10506135961982642, "compression_ratio": 1.7415254237288136, "no_speech_prob": 0.0005527152097783983}, {"id": 429, "seek": 204260, "start": 2066.2, "end": 2068.6, "text": " That it makes sense to reuse these objects", "tokens": [51544, 663, 309, 1669, 2020, 281, 26225, 613, 6565, 51664], "temperature": 0.0, "avg_logprob": -0.10506135961982642, "compression_ratio": 1.7415254237288136, "no_speech_prob": 0.0005527152097783983}, {"id": 430, "seek": 206860, "start": 2068.68, "end": 2073.7999999999997, "text": " This is something we see a lot with frameworks for instance a spring with the dependency injection", "tokens": [50368, 639, 307, 746, 321, 536, 257, 688, 365, 29834, 337, 5197, 257, 5587, 365, 264, 33621, 22873, 50624], "temperature": 0.0, "avg_logprob": -0.1711535159452462, "compression_ratio": 1.625531914893617, "no_speech_prob": 0.006691064219921827}, {"id": 431, "seek": 206860, "start": 2074.36, "end": 2076.7599999999998, "text": " Something like a database connection could be injected", "tokens": [50652, 6595, 411, 257, 8149, 4984, 727, 312, 36967, 50772], "temperature": 0.0, "avg_logprob": -0.1711535159452462, "compression_ratio": 1.625531914893617, "no_speech_prob": 0.006691064219921827}, {"id": 432, "seek": 206860, "start": 2077.56, "end": 2082.6, "text": " Into different components in the object pool or the object graph in this case", "tokens": [50812, 23373, 819, 6677, 294, 264, 2657, 7005, 420, 264, 2657, 4295, 294, 341, 1389, 51064], "temperature": 0.0, "avg_logprob": -0.1711535159452462, "compression_ratio": 1.625531914893617, "no_speech_prob": 0.006691064219921827}, {"id": 433, "seek": 206860, "start": 2083.7999999999997, "end": 2085.7999999999997, "text": " Generally speaking, however", "tokens": [51124, 21082, 4124, 11, 4461, 51224], "temperature": 0.0, "avg_logprob": -0.1711535159452462, "compression_ratio": 1.625531914893617, "no_speech_prob": 0.006691064219921827}, {"id": 434, "seek": 206860, "start": 2085.88, "end": 2089.24, "text": " Maintaining your own object pools clutters your code", "tokens": [51228, 376, 5114, 3686, 428, 1065, 2657, 28688, 596, 325, 1559, 428, 3089, 51396], "temperature": 0.0, "avg_logprob": -0.1711535159452462, "compression_ratio": 1.625531914893617, "no_speech_prob": 0.006691064219921827}, {"id": 435, "seek": 206860, "start": 2089.7999999999997, "end": 2094.04, "text": " increases memory footprint and harms performance. So what he means by", "tokens": [51424, 8637, 4675, 24222, 293, 48505, 3389, 13, 407, 437, 415, 1355, 538, 51636], "temperature": 0.0, "avg_logprob": -0.1711535159452462, "compression_ratio": 1.625531914893617, "no_speech_prob": 0.006691064219921827}, {"id": 436, "seek": 209404, "start": 2094.6, "end": 2099.0, "text": " Maintaining your own object pools really is what we saw here", "tokens": [50392, 376, 5114, 3686, 428, 1065, 2657, 28688, 534, 307, 437, 321, 1866, 510, 50612], "temperature": 0.0, "avg_logprob": -0.1598088052537706, "compression_ratio": 1.6208530805687205, "no_speech_prob": 0.014724203385412693}, {"id": 437, "seek": 209404, "start": 2099.64, "end": 2101.16, "text": " in the", "tokens": [50644, 294, 264, 50720], "temperature": 0.0, "avg_logprob": -0.1598088052537706, "compression_ratio": 1.6208530805687205, "no_speech_prob": 0.014724203385412693}, {"id": 438, "seek": 209404, "start": 2101.16, "end": 2103.08, "text": " numeral roman numeral example", "tokens": [50720, 1031, 2790, 41362, 1031, 2790, 1365, 50816], "temperature": 0.0, "avg_logprob": -0.1598088052537706, "compression_ratio": 1.6208530805687205, "no_speech_prob": 0.014724203385412693}, {"id": 439, "seek": 209404, "start": 2103.08, "end": 2109.08, "text": " This is kind of like what an object pool is we we define all these objects in our class and let's say we have 20 of these", "tokens": [50816, 639, 307, 733, 295, 411, 437, 364, 2657, 7005, 307, 321, 321, 6964, 439, 613, 6565, 294, 527, 1508, 293, 718, 311, 584, 321, 362, 945, 295, 613, 51116], "temperature": 0.0, "avg_logprob": -0.1598088052537706, "compression_ratio": 1.6208530805687205, "no_speech_prob": 0.014724203385412693}, {"id": 440, "seek": 209404, "start": 2109.4, "end": 2111.88, "text": " That can cloud your code and make things a bit complicated and", "tokens": [51132, 663, 393, 4588, 428, 3089, 293, 652, 721, 257, 857, 6179, 293, 51256], "temperature": 0.0, "avg_logprob": -0.1598088052537706, "compression_ratio": 1.6208530805687205, "no_speech_prob": 0.014724203385412693}, {"id": 441, "seek": 209404, "start": 2112.52, "end": 2115.32, "text": " Make the code unreadable or more difficult to read", "tokens": [51288, 4387, 264, 3089, 517, 2538, 712, 420, 544, 2252, 281, 1401, 51428], "temperature": 0.0, "avg_logprob": -0.1598088052537706, "compression_ratio": 1.6208530805687205, "no_speech_prob": 0.014724203385412693}, {"id": 442, "seek": 209404, "start": 2117.56, "end": 2119.56, "text": " So since", "tokens": [51540, 407, 1670, 51640], "temperature": 0.0, "avg_logprob": -0.1598088052537706, "compression_ratio": 1.6208530805687205, "no_speech_prob": 0.014724203385412693}, {"id": 443, "seek": 211956, "start": 2119.7999999999997, "end": 2128.7599999999998, "text": " Modern jvm implementations have highly optimized garbage collectors that easily outperform such object pools on lightweight objects", "tokens": [50376, 19814, 361, 85, 76, 4445, 763, 362, 5405, 26941, 14150, 35384, 300, 3612, 484, 26765, 1270, 2657, 28688, 322, 22052, 6565, 50824], "temperature": 0.0, "avg_logprob": -0.1428926213582357, "compression_ratio": 1.6355140186915889, "no_speech_prob": 0.0012841935968026519}, {"id": 444, "seek": 211956, "start": 2129.24, "end": 2131.88, "text": " It's not necessarily the case that one should always", "tokens": [50848, 467, 311, 406, 4725, 264, 1389, 300, 472, 820, 1009, 50980], "temperature": 0.0, "avg_logprob": -0.1428926213582357, "compression_ratio": 1.6355140186915889, "no_speech_prob": 0.0012841935968026519}, {"id": 445, "seek": 211956, "start": 2132.7599999999998, "end": 2135.96, "text": " avoid object creation and then we get to an interesting", "tokens": [51024, 5042, 2657, 8016, 293, 550, 321, 483, 281, 364, 1880, 51184], "temperature": 0.0, "avg_logprob": -0.1428926213582357, "compression_ratio": 1.6355140186915889, "no_speech_prob": 0.0012841935968026519}, {"id": 446, "seek": 211956, "start": 2136.84, "end": 2138.36, "text": " sort of", "tokens": [51228, 1333, 295, 51304], "temperature": 0.0, "avg_logprob": -0.1428926213582357, "compression_ratio": 1.6355140186915889, "no_speech_prob": 0.0012841935968026519}, {"id": 447, "seek": 211956, "start": 2138.36, "end": 2142.52, "text": " Conclusive point in this item and that's the concept idea of defensive copying", "tokens": [51304, 18200, 7233, 935, 294, 341, 3174, 293, 300, 311, 264, 3410, 1558, 295, 16468, 27976, 51512], "temperature": 0.0, "avg_logprob": -0.1428926213582357, "compression_ratio": 1.6355140186915889, "no_speech_prob": 0.0012841935968026519}, {"id": 448, "seek": 211956, "start": 2144.68, "end": 2146.68, "text": " What defensive copying", "tokens": [51620, 708, 16468, 27976, 51720], "temperature": 0.0, "avg_logprob": -0.1428926213582357, "compression_ratio": 1.6355140186915889, "no_speech_prob": 0.0012841935968026519}, {"id": 449, "seek": 214668, "start": 2147.0, "end": 2151.72, "text": " The simplest way to think of defensive defensive copying is that it's used to maintain", "tokens": [50380, 440, 22811, 636, 281, 519, 295, 16468, 16468, 27976, 307, 300, 309, 311, 1143, 281, 6909, 50616], "temperature": 0.0, "avg_logprob": -0.20328336495619553, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.002115152543410659}, {"id": 450, "seek": 214668, "start": 2152.3599999999997, "end": 2158.6, "text": " Immutability of an object and before we take a look at the example which I have here for defensive copying. It's when you get it", "tokens": [50648, 17322, 325, 2310, 295, 364, 2657, 293, 949, 321, 747, 257, 574, 412, 264, 1365, 597, 286, 362, 510, 337, 16468, 27976, 13, 467, 311, 562, 291, 483, 309, 50960], "temperature": 0.0, "avg_logprob": -0.20328336495619553, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.002115152543410659}, {"id": 451, "seek": 214668, "start": 2158.68, "end": 2168.44, "text": " It's a rather simple concept, but it's used a lot across frameworks. For instance, um, sorry defensive copying. I'm not sure I confused", "tokens": [50964, 467, 311, 257, 2831, 2199, 3410, 11, 457, 309, 311, 1143, 257, 688, 2108, 29834, 13, 1171, 5197, 11, 1105, 11, 2597, 16468, 27976, 13, 286, 478, 406, 988, 286, 9019, 51452], "temperature": 0.0, "avg_logprob": -0.20328336495619553, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.002115152543410659}, {"id": 452, "seek": 214668, "start": 2169.72, "end": 2171.72, "text": " Reflections with defensive copying", "tokens": [51516, 16957, 1809, 626, 365, 16468, 27976, 51616], "temperature": 0.0, "avg_logprob": -0.20328336495619553, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.002115152543410659}, {"id": 453, "seek": 214668, "start": 2171.96, "end": 2176.12, "text": " But regardless it's a known concept in java programming", "tokens": [51628, 583, 10060, 309, 311, 257, 2570, 3410, 294, 361, 4061, 9410, 51836], "temperature": 0.0, "avg_logprob": -0.20328336495619553, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.002115152543410659}, {"id": 454, "seek": 217668, "start": 2177.0, "end": 2179.0, "text": " So what defensive copying is is", "tokens": [50380, 407, 437, 16468, 27976, 307, 307, 50480], "temperature": 0.0, "avg_logprob": -0.1545156751360212, "compression_ratio": 1.6514522821576763, "no_speech_prob": 0.0008828737773001194}, {"id": 455, "seek": 217668, "start": 2179.8799999999997, "end": 2182.2799999999997, "text": " Where to maintain immutability", "tokens": [50524, 2305, 281, 6909, 3397, 325, 2310, 50644], "temperature": 0.0, "avg_logprob": -0.1545156751360212, "compression_ratio": 1.6514522821576763, "no_speech_prob": 0.0008828737773001194}, {"id": 456, "seek": 217668, "start": 2182.9199999999996, "end": 2189.64, "text": " Instead of passing back a reference to the object at hand a reference to a new object is passed with the same values", "tokens": [50676, 7156, 295, 8437, 646, 257, 6408, 281, 264, 2657, 412, 1011, 257, 6408, 281, 257, 777, 2657, 307, 4678, 365, 264, 912, 4190, 51012], "temperature": 0.0, "avg_logprob": -0.1545156751360212, "compression_ratio": 1.6514522821576763, "no_speech_prob": 0.0008828737773001194}, {"id": 457, "seek": 217668, "start": 2189.96, "end": 2194.44, "text": " Making it a copy for all intense for all intents and purposes. What that means is", "tokens": [51028, 14595, 309, 257, 5055, 337, 439, 9447, 337, 439, 560, 791, 293, 9932, 13, 708, 300, 1355, 307, 51252], "temperature": 0.0, "avg_logprob": -0.1545156751360212, "compression_ratio": 1.6514522821576763, "no_speech_prob": 0.0008828737773001194}, {"id": 458, "seek": 217668, "start": 2195.0, "end": 2199.08, "text": " Uh, you know what without me trying to theorize more. Let's look at the example here", "tokens": [51280, 4019, 11, 291, 458, 437, 1553, 385, 1382, 281, 27423, 1125, 544, 13, 961, 311, 574, 412, 264, 1365, 510, 51484], "temperature": 0.0, "avg_logprob": -0.1545156751360212, "compression_ratio": 1.6514522821576763, "no_speech_prob": 0.0008828737773001194}, {"id": 459, "seek": 217668, "start": 2199.72, "end": 2202.2, "text": " So we have a class called full calendar here, which", "tokens": [51516, 407, 321, 362, 257, 1508, 1219, 1577, 12183, 510, 11, 597, 51640], "temperature": 0.0, "avg_logprob": -0.1545156751360212, "compression_ratio": 1.6514522821576763, "no_speech_prob": 0.0008828737773001194}, {"id": 460, "seek": 220220, "start": 2203.0, "end": 2206.52, "text": " Despite ostensibly looking immutable is in fact mutable", "tokens": [50404, 11334, 32946, 694, 3545, 1237, 3397, 32148, 307, 294, 1186, 5839, 712, 50580], "temperature": 0.0, "avg_logprob": -0.15195848749971938, "compression_ratio": 1.6406926406926408, "no_speech_prob": 0.002980615943670273}, {"id": 461, "seek": 220220, "start": 2207.16, "end": 2215.96, "text": " And this example is courtesy of courtesy of abc study guide. The link to this blog post article is down below in the description", "tokens": [50612, 400, 341, 1365, 307, 41704, 295, 41704, 295, 410, 66, 2979, 5934, 13, 440, 2113, 281, 341, 6968, 2183, 7222, 307, 760, 2507, 294, 264, 3855, 51052], "temperature": 0.0, "avg_logprob": -0.15195848749971938, "compression_ratio": 1.6406926406926408, "no_speech_prob": 0.002980615943670273}, {"id": 462, "seek": 220220, "start": 2216.4399999999996, "end": 2222.12, "text": " So as a client when we use full calendar, what we're doing is we are passing this original date", "tokens": [51076, 407, 382, 257, 6423, 562, 321, 764, 1577, 12183, 11, 437, 321, 434, 884, 307, 321, 366, 8437, 341, 3380, 4002, 51360], "temperature": 0.0, "avg_logprob": -0.15195848749971938, "compression_ratio": 1.6406926406926408, "no_speech_prob": 0.002980615943670273}, {"id": 463, "seek": 220220, "start": 2222.8399999999997, "end": 2229.3999999999996, "text": " Uh object of date type into the constructor and the constructor assigns that to this private final", "tokens": [51396, 4019, 2657, 295, 4002, 2010, 666, 264, 47479, 293, 264, 47479, 6269, 82, 300, 281, 341, 4551, 2572, 51724], "temperature": 0.0, "avg_logprob": -0.15195848749971938, "compression_ratio": 1.6406926406926408, "no_speech_prob": 0.002980615943670273}, {"id": 464, "seek": 222940, "start": 2230.12, "end": 2233.0, "text": " Uh date object, which we think is immutable", "tokens": [50400, 4019, 4002, 2657, 11, 597, 321, 519, 307, 3397, 32148, 50544], "temperature": 0.0, "avg_logprob": -0.12181716245763442, "compression_ratio": 1.5844155844155845, "no_speech_prob": 0.009410950355231762}, {"id": 465, "seek": 222940, "start": 2233.88, "end": 2239.32, "text": " But what happens is because we are passing this when the class is instantiated. So in line number 30", "tokens": [50588, 583, 437, 2314, 307, 570, 321, 366, 8437, 341, 562, 264, 1508, 307, 9836, 72, 770, 13, 407, 294, 1622, 1230, 2217, 50860], "temperature": 0.0, "avg_logprob": -0.12181716245763442, "compression_ratio": 1.5844155844155845, "no_speech_prob": 0.009410950355231762}, {"id": 466, "seek": 222940, "start": 2240.6800000000003, "end": 2245.2400000000002, "text": " If for instance, let's say this original date value changes", "tokens": [50928, 759, 337, 5197, 11, 718, 311, 584, 341, 3380, 4002, 2158, 2962, 51156], "temperature": 0.0, "avg_logprob": -0.12181716245763442, "compression_ratio": 1.5844155844155845, "no_speech_prob": 0.009410950355231762}, {"id": 467, "seek": 222940, "start": 2246.36, "end": 2252.6, "text": " The value of standard date also changes because they are both pointing to the same location in memory", "tokens": [51212, 440, 2158, 295, 3832, 4002, 611, 2962, 570, 436, 366, 1293, 12166, 281, 264, 912, 4914, 294, 4675, 51524], "temperature": 0.0, "avg_logprob": -0.12181716245763442, "compression_ratio": 1.5844155844155845, "no_speech_prob": 0.009410950355231762}, {"id": 468, "seek": 222940, "start": 2253.0, "end": 2256.28, "text": " Therefore, even though we've declared this as private final", "tokens": [51544, 7504, 11, 754, 1673, 321, 600, 15489, 341, 382, 4551, 2572, 51708], "temperature": 0.0, "avg_logprob": -0.12181716245763442, "compression_ratio": 1.5844155844155845, "no_speech_prob": 0.009410950355231762}, {"id": 469, "seek": 225628, "start": 2257.0800000000004, "end": 2263.4, "text": " And we think it's immutable. It's in fact not and here's where we can easily create a defensive copy", "tokens": [50404, 400, 321, 519, 309, 311, 3397, 32148, 13, 467, 311, 294, 1186, 406, 293, 510, 311, 689, 321, 393, 3612, 1884, 257, 16468, 5055, 50720], "temperature": 0.0, "avg_logprob": -0.10650341109474107, "compression_ratio": 1.7440758293838863, "no_speech_prob": 0.005818008910864592}, {"id": 470, "seek": 225628, "start": 2263.96, "end": 2265.96, "text": " So the right way to do this would be in fact", "tokens": [50748, 407, 264, 558, 636, 281, 360, 341, 576, 312, 294, 1186, 50848], "temperature": 0.0, "avg_logprob": -0.10650341109474107, "compression_ratio": 1.7440758293838863, "no_speech_prob": 0.005818008910864592}, {"id": 471, "seek": 225628, "start": 2267.4, "end": 2272.2000000000003, "text": " When the class is invoked uh, or when when the class is instantiated and the construct is invoked", "tokens": [50920, 1133, 264, 1508, 307, 1048, 9511, 2232, 11, 420, 562, 562, 264, 1508, 307, 9836, 72, 770, 293, 264, 7690, 307, 1048, 9511, 51160], "temperature": 0.0, "avg_logprob": -0.10650341109474107, "compression_ratio": 1.7440758293838863, "no_speech_prob": 0.005818008910864592}, {"id": 472, "seek": 225628, "start": 2272.76, "end": 2277.4, "text": " We create a new date object. We we get we get the value of it", "tokens": [51188, 492, 1884, 257, 777, 4002, 2657, 13, 492, 321, 483, 321, 483, 264, 2158, 295, 309, 51420], "temperature": 0.0, "avg_logprob": -0.10650341109474107, "compression_ratio": 1.7440758293838863, "no_speech_prob": 0.005818008910864592}, {"id": 473, "seek": 225628, "start": 2277.4, "end": 2281.32, "text": " So we create a copy of that with the the the date we pass here", "tokens": [51420, 407, 321, 1884, 257, 5055, 295, 300, 365, 264, 264, 264, 4002, 321, 1320, 510, 51616], "temperature": 0.0, "avg_logprob": -0.10650341109474107, "compression_ratio": 1.7440758293838863, "no_speech_prob": 0.005818008910864592}, {"id": 474, "seek": 228132, "start": 2282.04, "end": 2287.48, "text": " And then using that value we create in fact a new object and then pass said that in standard date", "tokens": [50400, 400, 550, 1228, 300, 2158, 321, 1884, 294, 1186, 257, 777, 2657, 293, 550, 1320, 848, 300, 294, 3832, 4002, 50672], "temperature": 0.0, "avg_logprob": -0.13001956939697265, "compression_ratio": 1.7935222672064777, "no_speech_prob": 0.005641082301735878}, {"id": 475, "seek": 228132, "start": 2288.04, "end": 2294.36, "text": " That defensive copy ensures immutability of this class and the same thing when we are returning it when you're returning it", "tokens": [50700, 663, 16468, 5055, 28111, 3397, 325, 2310, 295, 341, 1508, 293, 264, 912, 551, 562, 321, 366, 12678, 309, 562, 291, 434, 12678, 309, 51016], "temperature": 0.0, "avg_logprob": -0.13001956939697265, "compression_ratio": 1.7935222672064777, "no_speech_prob": 0.005641082301735878}, {"id": 476, "seek": 228132, "start": 2294.6000000000004, "end": 2296.6000000000004, "text": " We want to return a new instance", "tokens": [51028, 492, 528, 281, 2736, 257, 777, 5197, 51128], "temperature": 0.0, "avg_logprob": -0.13001956939697265, "compression_ratio": 1.7935222672064777, "no_speech_prob": 0.005641082301735878}, {"id": 477, "seek": 228132, "start": 2296.92, "end": 2298.92, "text": " and not", "tokens": [51144, 293, 406, 51244], "temperature": 0.0, "avg_logprob": -0.13001956939697265, "compression_ratio": 1.7935222672064777, "no_speech_prob": 0.005641082301735878}, {"id": 478, "seek": 228132, "start": 2299.1600000000003, "end": 2302.28, "text": " The uh, the one that was here because that too could change", "tokens": [51256, 440, 2232, 11, 264, 472, 300, 390, 510, 570, 300, 886, 727, 1319, 51412], "temperature": 0.0, "avg_logprob": -0.13001956939697265, "compression_ratio": 1.7935222672064777, "no_speech_prob": 0.005641082301735878}, {"id": 479, "seek": 228132, "start": 2302.92, "end": 2309.2400000000002, "text": " And that's why we are we are passing. Um, we're not passing in this case. We're using the new keyword and creating a new", "tokens": [51444, 400, 300, 311, 983, 321, 366, 321, 366, 8437, 13, 3301, 11, 321, 434, 406, 8437, 294, 341, 1389, 13, 492, 434, 1228, 264, 777, 20428, 293, 4084, 257, 777, 51760], "temperature": 0.0, "avg_logprob": -0.13001956939697265, "compression_ratio": 1.7935222672064777, "no_speech_prob": 0.005641082301735878}, {"id": 480, "seek": 230924, "start": 2309.7999999999997, "end": 2316.04, "text": " Uh date instance. So yeah, that's sort of my still I'd say high level superficial understanding of defensive copying", "tokens": [50392, 4019, 4002, 5197, 13, 407, 1338, 11, 300, 311, 1333, 295, 452, 920, 286, 1116, 584, 1090, 1496, 34622, 3701, 295, 16468, 27976, 50704], "temperature": 0.0, "avg_logprob": -0.1847547456329944, "compression_ratio": 1.6245210727969348, "no_speech_prob": 0.006796557456254959}, {"id": 481, "seek": 230924, "start": 2316.2, "end": 2320.4399999999996, "text": " But whenever I do think of it, I always connect it to maintaining", "tokens": [50712, 583, 5699, 286, 360, 519, 295, 309, 11, 286, 1009, 1745, 309, 281, 14916, 50924], "temperature": 0.0, "avg_logprob": -0.1847547456329944, "compression_ratio": 1.6245210727969348, "no_speech_prob": 0.006796557456254959}, {"id": 482, "seek": 230924, "start": 2321.08, "end": 2323.08, "text": " uh immutability", "tokens": [50956, 2232, 3397, 325, 2310, 51056], "temperature": 0.0, "avg_logprob": -0.1847547456329944, "compression_ratio": 1.6245210727969348, "no_speech_prob": 0.006796557456254959}, {"id": 483, "seek": 230924, "start": 2323.08, "end": 2327.4799999999996, "text": " But of course, I'll leave the code this code and also the the article that I got this code from", "tokens": [51056, 583, 295, 1164, 11, 286, 603, 1856, 264, 3089, 341, 3089, 293, 611, 264, 264, 7222, 300, 286, 658, 341, 3089, 490, 51276], "temperature": 0.0, "avg_logprob": -0.1847547456329944, "compression_ratio": 1.6245210727969348, "no_speech_prob": 0.006796557456254959}, {"id": 484, "seek": 230924, "start": 2328.2799999999997, "end": 2330.68, "text": " In the description so that you could look a bit more deeply", "tokens": [51316, 682, 264, 3855, 370, 300, 291, 727, 574, 257, 857, 544, 8760, 51436], "temperature": 0.0, "avg_logprob": -0.1847547456329944, "compression_ratio": 1.6245210727969348, "no_speech_prob": 0.006796557456254959}, {"id": 485, "seek": 230924, "start": 2332.2799999999997, "end": 2336.7599999999998, "text": " And to conclude here's what Joshua Bloch says about defensive copying", "tokens": [51516, 400, 281, 16886, 510, 311, 437, 24005, 9865, 339, 1619, 466, 16468, 27976, 51740], "temperature": 0.0, "avg_logprob": -0.1847547456329944, "compression_ratio": 1.6245210727969348, "no_speech_prob": 0.006796557456254959}, {"id": 486, "seek": 233676, "start": 2337.0, "end": 2344.36, "text": " The counterpoint to this item is item 50, which is on defensive copying. So this item is is about avoid", "tokens": [50376, 440, 5682, 6053, 281, 341, 3174, 307, 3174, 2625, 11, 597, 307, 322, 16468, 27976, 13, 407, 341, 3174, 307, 307, 466, 5042, 50744], "temperature": 0.0, "avg_logprob": -0.14944344475155785, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.0019875585567206144}, {"id": 487, "seek": 233676, "start": 2345.0, "end": 2352.6000000000004, "text": " Creating unnecessary object and here you would think we're creating an unnecessary object where every single time a new object is created", "tokens": [50776, 40002, 19350, 2657, 293, 510, 291, 576, 519, 321, 434, 4084, 364, 19350, 2657, 689, 633, 2167, 565, 257, 777, 2657, 307, 2942, 51156], "temperature": 0.0, "avg_logprob": -0.14944344475155785, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.0019875585567206144}, {"id": 488, "seek": 233676, "start": 2353.96, "end": 2355.96, "text": " So that's why he says it's a counterpoint", "tokens": [51224, 407, 300, 311, 983, 415, 1619, 309, 311, 257, 5682, 6053, 51324], "temperature": 0.0, "avg_logprob": -0.14944344475155785, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.0019875585567206144}, {"id": 489, "seek": 233676, "start": 2357.32, "end": 2362.5200000000004, "text": " The person item says don't create a new object when you should reuse an existing one", "tokens": [51392, 440, 954, 3174, 1619, 500, 380, 1884, 257, 777, 2657, 562, 291, 820, 26225, 364, 6741, 472, 51652], "temperature": 0.0, "avg_logprob": -0.14944344475155785, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.0019875585567206144}, {"id": 490, "seek": 236252, "start": 2363.32, "end": 2369.0, "text": " While item 50 says don't reuse an existing object when you should create a new one", "tokens": [50404, 3987, 3174, 2625, 1619, 500, 380, 26225, 364, 6741, 2657, 562, 291, 820, 1884, 257, 777, 472, 50688], "temperature": 0.0, "avg_logprob": -0.13654216130574545, "compression_ratio": 1.748878923766816, "no_speech_prob": 0.002322865417227149}, {"id": 491, "seek": 236252, "start": 2369.56, "end": 2370.28, "text": " like", "tokens": [50716, 411, 50752], "temperature": 0.0, "avg_logprob": -0.13654216130574545, "compression_ratio": 1.748878923766816, "no_speech_prob": 0.002322865417227149}, {"id": 492, "seek": 236252, "start": 2370.28, "end": 2377.48, "text": " In the example of defensive copying note that the penalty for reusing an object when defensive copying is called for is far greater", "tokens": [50752, 682, 264, 1365, 295, 16468, 27976, 3637, 300, 264, 16263, 337, 319, 7981, 364, 2657, 562, 16468, 27976, 307, 1219, 337, 307, 1400, 5044, 51112], "temperature": 0.0, "avg_logprob": -0.13654216130574545, "compression_ratio": 1.748878923766816, "no_speech_prob": 0.002322865417227149}, {"id": 493, "seek": 236252, "start": 2378.12, "end": 2381.64, "text": " Than the penalty for needlessly creating a duplicate object", "tokens": [51144, 18289, 264, 16263, 337, 643, 12048, 4084, 257, 23976, 2657, 51320], "temperature": 0.0, "avg_logprob": -0.13654216130574545, "compression_ratio": 1.748878923766816, "no_speech_prob": 0.002322865417227149}, {"id": 494, "seek": 236252, "start": 2383.08, "end": 2390.6, "text": " Failing to make defensive copies where required can lead to insidious bugs and security holds creating objects", "tokens": [51392, 479, 23315, 281, 652, 16468, 14341, 689, 4739, 393, 1477, 281, 1028, 327, 851, 15120, 293, 3825, 9190, 4084, 6565, 51768], "temperature": 0.0, "avg_logprob": -0.13654216130574545, "compression_ratio": 1.748878923766816, "no_speech_prob": 0.002322865417227149}, {"id": 495, "seek": 239060, "start": 2390.68, "end": 2392.04, "text": " unnecessarily", "tokens": [50368, 16799, 3289, 50436], "temperature": 0.0, "avg_logprob": -0.14005260467529296, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.008059676736593246}, {"id": 496, "seek": 239060, "start": 2392.04, "end": 2397.24, "text": " Merely affects style and performance and of course we need to always at least in my opinion prioritize", "tokens": [50436, 376, 323, 356, 11807, 3758, 293, 3389, 293, 295, 1164, 321, 643, 281, 1009, 412, 1935, 294, 452, 4800, 25164, 50696], "temperature": 0.0, "avg_logprob": -0.14005260467529296, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.008059676736593246}, {"id": 497, "seek": 239060, "start": 2397.7999999999997, "end": 2400.7599999999998, "text": " security over efficiency and performance, which is why", "tokens": [50724, 3825, 670, 10493, 293, 3389, 11, 597, 307, 983, 50872], "temperature": 0.0, "avg_logprob": -0.14005260467529296, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.008059676736593246}, {"id": 498, "seek": 239060, "start": 2401.24, "end": 2404.8399999999997, "text": " It's a good sort of way to end this item with the caveat that", "tokens": [50896, 467, 311, 257, 665, 1333, 295, 636, 281, 917, 341, 3174, 365, 264, 43012, 300, 51076], "temperature": 0.0, "avg_logprob": -0.14005260467529296, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.008059676736593246}, {"id": 499, "seek": 239060, "start": 2405.4, "end": 2409.64, "text": " This certainly doesn't mean that we should avoid creating objects at all costs", "tokens": [51104, 639, 3297, 1177, 380, 914, 300, 321, 820, 5042, 4084, 6565, 412, 439, 5497, 51316], "temperature": 0.0, "avg_logprob": -0.14005260467529296, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.008059676736593246}, {"id": 500, "seek": 239060, "start": 2409.88, "end": 2414.2, "text": " There are costs a cost could be security and that could be detrimental", "tokens": [51328, 821, 366, 5497, 257, 2063, 727, 312, 3825, 293, 300, 727, 312, 45694, 51544], "temperature": 0.0, "avg_logprob": -0.14005260467529296, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.008059676736593246}, {"id": 501, "seek": 239060, "start": 2415.3199999999997, "end": 2418.52, "text": " And that's it. That is item number six on", "tokens": [51600, 400, 300, 311, 309, 13, 663, 307, 3174, 1230, 2309, 322, 51760], "temperature": 0.0, "avg_logprob": -0.14005260467529296, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.008059676736593246}, {"id": 502, "seek": 241852, "start": 2419.48, "end": 2424.2, "text": " The avoiding of creating unnecessary objects. I hope you found that insightful", "tokens": [50412, 440, 20220, 295, 4084, 19350, 6565, 13, 286, 1454, 291, 1352, 300, 46401, 50648], "temperature": 0.0, "avg_logprob": -0.11544333866664341, "compression_ratio": 1.6274509803921569, "no_speech_prob": 0.030660219490528107}, {"id": 503, "seek": 241852, "start": 2424.92, "end": 2426.92, "text": " Please do tell me how I can improve", "tokens": [50684, 2555, 360, 980, 385, 577, 286, 393, 3470, 50784], "temperature": 0.0, "avg_logprob": -0.11544333866664341, "compression_ratio": 1.6274509803921569, "no_speech_prob": 0.030660219490528107}, {"id": 504, "seek": 241852, "start": 2427.0, "end": 2429.56, "text": " In the way I communicate and articulate these concepts", "tokens": [50788, 682, 264, 636, 286, 7890, 293, 30305, 613, 10392, 50916], "temperature": 0.0, "avg_logprob": -0.11544333866664341, "compression_ratio": 1.6274509803921569, "no_speech_prob": 0.030660219490528107}, {"id": 505, "seek": 241852, "start": 2429.88, "end": 2432.28, "text": " But also as to how I demo and show the code", "tokens": [50932, 583, 611, 382, 281, 577, 286, 10723, 293, 855, 264, 3089, 51052], "temperature": 0.0, "avg_logprob": -0.11544333866664341, "compression_ratio": 1.6274509803921569, "no_speech_prob": 0.030660219490528107}, {"id": 506, "seek": 241852, "start": 2433.0, "end": 2437.56, "text": " I would like to maybe even a bit more be a bit more slow and leave more comments", "tokens": [51088, 286, 576, 411, 281, 1310, 754, 257, 857, 544, 312, 257, 857, 544, 2964, 293, 1856, 544, 3053, 51316], "temperature": 0.0, "avg_logprob": -0.11544333866664341, "compression_ratio": 1.6274509803921569, "no_speech_prob": 0.030660219490528107}, {"id": 507, "seek": 241852, "start": 2437.72, "end": 2439.72, "text": " But perhaps the best thing to do is", "tokens": [51324, 583, 4317, 264, 1151, 551, 281, 360, 307, 51424], "temperature": 0.0, "avg_logprob": -0.11544333866664341, "compression_ratio": 1.6274509803921569, "no_speech_prob": 0.030660219490528107}, {"id": 508, "seek": 241852, "start": 2440.36, "end": 2444.6, "text": " Go on to take a look at the code yourself. This video. Think of it as only a prelude", "tokens": [51456, 1037, 322, 281, 747, 257, 574, 412, 264, 3089, 1803, 13, 639, 960, 13, 6557, 295, 309, 382, 787, 257, 659, 32334, 51668], "temperature": 0.0, "avg_logprob": -0.11544333866664341, "compression_ratio": 1.6274509803921569, "no_speech_prob": 0.030660219490528107}, {"id": 509, "seek": 244460, "start": 2444.68, "end": 2450.52, "text": " I think that thanks a lot for watching. I really appreciate it. I'll receive the few comments here and there", "tokens": [50368, 286, 519, 300, 3231, 257, 688, 337, 1976, 13, 286, 534, 4449, 309, 13, 286, 603, 4774, 264, 1326, 3053, 510, 293, 456, 50660], "temperature": 0.0, "avg_logprob": -0.19107736587524415, "compression_ratio": 1.8232558139534885, "no_speech_prob": 0.025930602103471756}, {"id": 510, "seek": 244460, "start": 2451.56, "end": 2455.0, "text": " On on these videos and it means a lot to me. It means a lot to me", "tokens": [50712, 1282, 322, 613, 2145, 293, 309, 1355, 257, 688, 281, 385, 13, 467, 1355, 257, 688, 281, 385, 50884], "temperature": 0.0, "avg_logprob": -0.19107736587524415, "compression_ratio": 1.8232558139534885, "no_speech_prob": 0.025930602103471756}, {"id": 511, "seek": 244460, "start": 2455.96, "end": 2462.2799999999997, "text": " And it's always nice to see that there are people actual human beings watching these videos and it's just not me", "tokens": [50932, 400, 309, 311, 1009, 1481, 281, 536, 300, 456, 366, 561, 3539, 1952, 8958, 1976, 613, 2145, 293, 309, 311, 445, 406, 385, 51248], "temperature": 0.0, "avg_logprob": -0.19107736587524415, "compression_ratio": 1.8232558139534885, "no_speech_prob": 0.025930602103471756}, {"id": 512, "seek": 244460, "start": 2464.44, "end": 2466.44, "text": " Rambling like a raconteur", "tokens": [51356, 497, 19391, 411, 257, 4129, 10219, 374, 51456], "temperature": 0.0, "avg_logprob": -0.19107736587524415, "compression_ratio": 1.8232558139534885, "no_speech_prob": 0.025930602103471756}, {"id": 513, "seek": 244460, "start": 2467.4, "end": 2472.44, "text": " Okay, enough rambling on the on in okay enough rambling on rambling ridiculous", "tokens": [51504, 1033, 11, 1547, 367, 19391, 322, 264, 322, 294, 1392, 1547, 367, 19391, 322, 367, 19391, 11083, 51756], "temperature": 0.0, "avg_logprob": -0.19107736587524415, "compression_ratio": 1.8232558139534885, "no_speech_prob": 0.025930602103471756}, {"id": 514, "seek": 247244, "start": 2472.44, "end": 2474.92, "text": " Thanks for watching. Cheers. See you in the next one", "tokens": [50388, 2561, 337, 1976, 13, 13006, 13, 3008, 291, 294, 264, 958, 472, 50488], "temperature": 0.0, "avg_logprob": -0.12253545125325521, "compression_ratio": 0.8666666666666667, "no_speech_prob": 0.007795162033289671}], "language": "en"}