start	end	text
0	15760	All right, come on Blender. Let's see what you got. Yes, it finished! One frame, only
15760	25040	16 hours. Okay, so let's see. Per frame, 16 hours for a 1000 frame animation should get
25040	40960	done in about six months, which is before Christmas. Yeah, that's all right. Let's do it.
40960	62240	Hello? Hello? Can you hear me? It worked! It worked! Hello! It's me! It's you in the future!
62240	71520	I'm calling you from 2030. Hi! Really? Because it looks like you haven't aged a day. Well, yeah,
71520	78400	I mean, I wear a lot of sunscreen. What can I say? But listen, you need to know, render times are
78400	88000	important. Okay? Because if you spend too long rendering, then you'll end up like me, living in
88000	97840	a box on the side of the highway, poor, desolate, a piece of chewing gum on the soul of society,
98640	105920	I'm homeless. Right. So because I rendered for too long, I ended up homeless?
107040	113040	Basically, I spent so long rendering that, well, I was never able to develop my skills as an artist
113040	121200	because I was rendering so much and then so I was never able to get a job. Also meth. Ah, right.
121200	130880	Copious amounts of meth. I'm sure, yeah. Listen, the sky's going black again, so I haven't got much
130880	137920	time, but I need to give you the advice that might just save your life. It's the 18 ways to speed up
137920	144800	cycles. Okay, well, just email it to me or something. Can you do that? No, no, in the future,
144800	152000	we don't have email. It's all like cerebral uplinks. It funny story, actually, it was the downfall of
152000	159440	society, like the nanoparticle base of the pain and what collapsed. Okay, it's breaking up. Okay,
159440	166960	okay. All right, listen, I'll fax it to you. Fax it? Who's got a fax machine? Yeah, I know the hipsters,
166960	171040	they brought it back, it's done. Well, fine, but I don't have one, don't... All right, listen, I've
171040	180240	just sent it. Andrew, with great power comes great responsibility. Rest easy on the wicked,
180880	186000	for they have not seen the truth. Also, don't touch meth.
186000	202480	It's weird, but helpful, you know, the best kind of weird. So that's what we'll do in this video,
202480	210960	we'll go over the 18 ways to speed up cycles rendering. These aren't, well, these aren't like
210960	216640	a checklist that you must follow, but they're sort of helpful tips, you know, if you want to shave
216640	222400	off seconds, or maybe you're rendering a big feature length animation, you know, one of the
222400	229280	first for Blender, and you want to see how to improve it, this is going to go over all of the
229280	238480	ways that I know of how to do it. So let's get to it. Number one, reduce your light bounces.
239280	244000	Light bounces. What are light bounces, Andrew? Well, light bounces are something that happens
244000	248560	in the real world and in 3D software. So when light hits another surface, it bounces off that
248560	253360	surface, and it'll hit another surface, it'll bounce off that surface, et cetera, et cetera,
253360	259840	to infinity in the real world. But in 3D software, that bouncing process is a very
261040	267600	processor expensive task. So you pay for that in your render times. So there's a value in Blender,
267600	273600	which will allow you to set the maximum, the minimum and the maximum amount of light bounces
273600	280640	that happen in the scene. And by default, it's set to 12, which I think personally is a little bit
280640	288880	too high. So for example, this is a classroom scene, which has eight light bounces set at maximum,
288880	293840	right? Okay, this is how it looks at eight, right? Now, what I'm going to do, I'm overlaying a grid
293840	298080	over here, and we've got along the x-axis, the number of bounces. And what I'm going to do is
298080	304160	I'm going to cycle through these bounces here. And in the background, the render is changing
304160	310880	with this graph, okay? It's an interactive demo, right? So you can see that up until about
311520	315600	four light bounces, there's no difference, no difference at all. And that's basically,
315600	319920	my guess is, there wasn't actually any extra light to bounce around. So four was the maximum.
320720	327200	And then after about four, you can see three to one, you can see that the glass becomes opaque,
327200	332080	but don't worry about that. I'll show you a fix for that in a second. And then finally,
332080	336960	zero down at the bottom there. So zero, there's a big change. You'll notice the biggest difference
336960	344320	between no bounces and one bounce, okay? So in my opinion, other than the glass, you don't need
344320	351360	anything beyond one light bounce for this scene, which means you can save a considerable
353360	357920	amount of time. So instead of going from eight light bounces, if you went to one,
357920	364800	you'll be rendering at 48 seconds instead of 95, which is a huge savings. Now, I know you're
364800	369360	probably thinking, hey, yeah, but that glass looked really horrible there. So we still want the
369360	375120	glass to look nice. Well, actually, the settings over here, these are the bounce sets. This is
375120	379040	where you would change it. So these are the broad values here, the maximum, minimum for the whole
379040	384000	scene. But you can also set it individually for your transparency and your transmission,
384000	388000	and all the different ones there. So all you would have to do is just set these diffusing
388000	392160	glossies down to one, and then just make sure that the transparency is set to at least three
392160	396640	or four or something like that. And that would be it. And you would be able to save a huge amount
396640	401440	of render time. A lot of people don't know that, but it's a really easy way you can do it. Okay,
401440	410080	number two, use portals. Portals. Does he mean these portals? No, not those portals. I'm talking
410080	416240	about Blender's portals. So when you are making an interior scene in Blender, which is like, you
416240	422080	know, a room, and you have a window in which there is light coming in through the window
422080	428000	from particularly an HDR, but any environment light, basically, you've got a lot of light
428000	432240	calculation because it's actually lighting the outside of your room. And then some of that
432240	437120	light is going in through the window. Well, that's wasted information, right? That there's too much,
437120	441760	you know, that that's being wasted there. So what you can do is over the window, if you place one
441760	448000	area lamp, and then in the lamp settings, if you check a box that says portal, what that will do
448000	452480	is it will tell Blender essentially where the window is. So make sure that you get the light
452480	457840	in through here. And don't worry so much about the rest of it. It's huge. Once you see it,
457840	462560	have a look at this. So this is with no portals. All right, you can see very grainy. I'm hoping
462560	469280	you can see that in the YouTube compression, but it's a very, very grainy image. Now, when we add
469280	474400	one portal, sorry, two portals, because there's two windows, look at the difference from super grainy
474480	480240	to almost completely clear, okay, which is crazy. Now you can see the render time does actually go
480240	487120	up by 30 seconds, which is not much. So that's not really a fair comparison, because really,
487120	492640	you know, the whole point of a render is to get rid of the noise. So if we were to, without portals
492640	498400	at all, try and get it to the, to that level, I would have to double or probably even triple the
498400	503520	amount of samples. So just for this comparison to make it fair, you can see that you would have to
503520	508480	really go double or triple your render times to try and get it without portals. So it's a huge
508480	512240	saving. So make sure that if you're making an interior scene, all the architects out there
512240	516800	watching this, if you hadn't learned about portals before, and hopefully this will save you a lot
516800	522320	of time in the future, use them and yeah, it's really, really handy. So again, that's where to
522320	526880	find it. And I've got a tutorial in the description if you want to watch it, but it's super easy to
526880	536880	use. All right, number three, use your GPU. Now some of you older blender users perhaps would say,
536880	542240	yeah, come on, everyone knows that. Well, not necessarily. Especially a lot of beginners,
542240	547600	they will not know that you can actually, with Blender, you can render with either your CPU
547600	552800	or your GPU. So there's most computers have to and generally speaking, and this is,
553520	560000	excuse me, let me get a drink. That's where you change it. You change it in the device setting
560000	565440	right there. You can set it to GPU. And if you don't see that, by the way, if you only see CPU
565440	570720	there, if you go to file user preferences, system in the bottom left hand corner, you should see
570720	575600	underneath compute device, something that says CUDA. If you don't see something that says CUDA
575600	580560	and your graphics cards underneath it, then you don't have a card that is supported in Blender.
580560	585280	Right now AMD is not supported in Blender. So I mean that they're working on it. I just don't
585280	590080	know when it's going to happen. So Nvidia, yeah, you would see it there. And generally speaking,
590960	597440	Nvidia, you know, GPUs, whatever, they render a lot faster than a CPU. So this is just one example
597440	602480	here, but you can see that it's saved a render time of 33%. And that's, you know, that's probably
602480	608880	with a really good CPU as well. So that's a considerable savings. But the really, really
608960	613760	cool thing about GPUs, and the reason that there was such a game changer for the industry like
613760	620080	five years ago, is that you can add more graphics cards to your computer, but you can't add more
620080	625440	CPUs. Like if you wanted to upgrade your CPU, you first of all won't get that much of a bigger
625440	631200	difference over your last CPU. But not only that, like you can't put two CPUs in your computer,
631200	637760	at least not usually, right? So if you wanted to upgrade your CPU, you would have to upgrade your
637760	641440	motherboard, which means you have to upgrade your RAM, which means forget it, I might as well just
641440	646160	get a whole new computer. Whereas a GPU can be taken out and put into another computer,
646160	651440	no problems. So it's a very easy investment. If you want to halve your render times, you can
651440	656400	purchase two graphics cards, and it will render it in half the time, because it's a linear sort of
656400	660880	growth. So three graphics cards, four graphics cards, it's going to render four times faster
660880	667600	than one graphics card. So yeah, it's a huge, huge thing. So make sure that if you've got
667600	675200	a GPU and you can use it, use it whenever possible. Number four, change your tile size. So this is
675200	681760	another really important one that a lot of people don't realize is so important. Tiles. What are
681760	688640	tiles? Well, tiles are when you hit the render key, those little blocks that appear on the screen
688640	695280	that slowly reveal your render. Those are tiles. And the size of your tile is defined in the
695360	702560	render settings underneath tiles X and Y. By default, it's set to 64, which is not really ideal
702560	709040	for most people's whatever they're they're rendering on. Okay, the size of your tile depends on whether
709040	714560	what whether you're working on a CPU or GPU, the tile sizes should be different. In fact,
714560	721200	the exact opposite. So if you're working and you're rendering on a CPU, the smaller your tile size,
721920	728000	the best coming in at about 16 by 16 pixels, the better it will be. If you if you go larger for
728000	733920	CPU, the worse it will be. And on GPUs, the opposite, the larger your tile size, the better the
733920	739200	renderings will be. So you could see that you could considerably like if you accidentally were
739200	746320	rendering at a really small size on the GPU, you could take forever to render the scene because
746320	751600	it's you've got the wrong tile size, right? So you can have huge memory, sorry, render time
751600	757440	improvements just by changing the tile size. As a general rule of thumb, smaller tile sizes work
757440	764000	better for CPUs. I just use 16 by 16 every single time works for me. And the bigger tile sizes for
764000	772480	GPUs maxing out at about 512 by 512, generally speaking, is better. Now different GPUs, different
772560	776720	tile sizes will work better. I've heard that like different architectures for Nvidia,
776720	781760	like a Kepler card or a Tesla card, some of those use better with like rectangle shapes. I don't
781760	787680	know why. But just when you get a new card, just do some tests and figure out what your optimal
787680	792960	size is for your card, because that'll save you a lot of time in the future. All right,
792960	801040	got to get another drink here. I think his office is really dry. My throat is getting raspy. All
801040	806720	right, number five, reduce your samples. Yeah, you might say, duh, you got to reduce your samples.
807360	811760	But okay, first of all, what are samples? I know a lot of you do, but let's talk about samples.
811760	817920	Samples, most of you know as that grain that appears over your image, okay? So the whole
817920	824000	point of rendering is to try to reduce that grain and you do that by increasing your samples,
824000	830560	which you can define in your render settings right there. So obviously the higher the render
830560	835280	sample amount you set it to, the longer your render times are going to be. But the clearer
836320	842000	your final image will look. So basically you want to try and set it to a higher value for your final
842000	848720	render. And yeah, but the problem is, is that I see a lot of people using incredibly high sample
848720	853840	amounts to the point that there's no point in doing it that high. So for example, here is a scene
853840	861360	set at 10,000 samples. And here's the same scene again set at 2,500 samples, one quarter of the
861360	868240	number of samples as before. Now as I flick back between them, can you see a difference? No, you
868240	874080	can't because it's indistinguishable to your eye. You can't see any difference between them. And yet,
874720	881280	the 10,000 samples one took most of the day to render and the 2,500 rendered in less than an
881280	887520	hour and a half. So huge time differences there, but very, very little difference between the actual
887520	892880	images. So there's a point where the samples that the point of going any high is pointless. So you
892880	897360	want to try and find out what are the optimal amount. Because while this might sound like an
897360	903120	exaggeration, like yeah, who would go to 10,000? Have a look on Blender Artists. You'll see some
903120	908000	people that are rendering their scenes. Like I've seen some with like 50,000 samples and they said
908000	913920	they let it render for 48 hours thinking, what are you doing? There's no reason to go that high.
913920	920000	That's just insane. It's just a waste of power, a waste of your time more importantly. And it's
920000	927760	just don't go that high. Okay, keep it keep it as low as it needs to be. Speaking of noise and
927760	936080	samples, there is a new feature in Blender 2.79 called denoising. And it is going to be a game
936160	939520	changer. Now I've only just played around with it for a little bit, but I'm going to show you
939520	946080	here what it does. Denoising does this. It takes that grainy image and then it applies
947040	954080	like a post processing step, I believe, on top of it, which will make it appear clear and smoothed
954080	961200	out. So it's a big deal and it's going to be a huge deal for the Blender community once everyone
961200	966080	sees it. It's like, whoa, this is going to make a lot of difference. You're going to see it from
966080	972560	now on, like in the future, most renders are going to be using a denoiser. Because for example,
972560	977520	here is my bathroom scene and I'm hoping you can see it in the YouTube thing, but this is a very,
977520	983920	very noisy image. Very noisy. I would never use this as a final image. However, when I applied the
983920	990960	denoise filter on top of it, it looks like a final render. It's amazing. I don't properly
990960	995840	understand how it works because I haven't really researched it that much, but it looks like black
995840	1002480	magic. It's like sorcery. So yeah, okay, now the difference between these two here, you can see
1002480	1007520	that the denoising step applies a small, like it does actually add something to the render,
1007520	1011280	but again, it's not a fair comparison to say that the denoise one took longer,
1011280	1016560	because the whole point is to make a clearer render. So it's saving you, let's say if you had to double
1017200	1022480	or sorry, quadruple the rendered time, it's saving you considerable amounts of time,
1023280	1029280	especially for animations. Like I can now, looking at this, I can say like, wow, I can finally do an
1029280	1035920	architectural animation now. Because before like interiors are just horrible, just noise absolutely
1035920	1040160	everywhere, but with this, it's going to make it possible. So I'm really, really excited about this
1040160	1045280	feature. And I think once the community sees it, they're going to go ballistic. But yeah, try it out.
1045840	1051120	It's really fun. In 2.79, it'll be in there for everyone. I'll probably do a tutorial on it if
1051120	1056720	people want it. But there you go. All right. Number seven, this is one a lot of people don't
1056720	1062160	realise, but you should be using the latest Blender version, because there are big differences
1062160	1068000	between all the versions of Blender and newer versions. Pretty much every new version of Blender,
1068000	1073760	they try to improve on the render times of the one before it. And they're always doing improvements.
1074320	1080960	So this is, I did this one a couple of years ago, but comparing 2.64 to 2.71,
1081600	1088320	basically like a year of releases there, you can see considerable time savings. And this is for
1088320	1096080	both CPU and GPU. CPU, especially they've been able to really crush the render times in each
1096080	1102720	consecutive later release. So it's just going, it's going crazy. So make sure that you are using
1102720	1106960	the latest version. Sounds like a no brainer, but you know, I still see emails from people
1106960	1111840	where they're like, Hey, I'm, you know, I'm using 2.66. So I don't have that feature. And I think,
1113040	1117680	why, why? And they're like, Oh, well, you know, I just, that's the one I've got. So I don't,
1117680	1122080	I like how it works. So I don't want to install the latest one. It's like, you can do that. And,
1122080	1125920	you know, I'm all for making life simple, but you're going to be paying for it in your render
1125920	1131920	time. So make sure you're using the latest version, please. Again, I haven't done it for 2.78,
1131920	1138240	whatever we're on now. But yeah, it just, it's going down. Okay. All right. Number eight,
1138240	1143040	this is an interesting one. A lot of people don't realize, but actually different operating systems.
1143040	1147840	And by that, I mean, you know, Windows, Mac, Linux, they have different rendering times,
1148400	1153200	because it is supported on every platform, which is fantastic. And most software, you can't do that.
1153840	1159120	But there are different times between them. So here I've got two tests, just testing between
1159120	1165200	Windows and Mint, which is Linux, a Linux distribution. And you can see that for GPU,
1165200	1170240	there's almost no difference. In fact, in most examples, I found Windows performs better on
1170240	1177520	Windows, sorry, GPUs perform better on Windows than they do on Linux. However, for CPU, Linux
1177520	1184400	kills it. So CP, so Linux is really good at CPUs, not as great with GPUs, because I think they put
1184480	1189840	a lot more effort into the drivers for Windows, because there's gamers on it, obviously. But yeah,
1189840	1194320	it's really good with CPUs. So that's just something to keep in mind. I wouldn't just
1194320	1198480	immediately rush out and go and get Linux. Don't feel you have to do that, or that you're missing
1198480	1204080	out because you're using Windows. I've known about this for years, and I use Windows. And that's
1204080	1208720	just because it makes my life easier, because that's where all the software is. I can play games on it
1208720	1214960	as well. And it's just, I don't see, I'm happy to eat the render time. But you know, hard core
1214960	1218640	people out there, if you really want to cut down on the render times, this is why a lot of render
1218640	1223280	servers, by the way, if they use Linux, because it's just optimized and just performed so much
1223280	1228240	better. So yeah, you might be wondering, hey, Andrew, what about Mac? Where does Mac fit into
1228240	1233520	that? I have no idea. I'm going to throw it to you guys. Do you guys have a Mac that also has
1233520	1238240	Windows and Linux? Because I searched for it online, and I didn't see anybody that had one,
1238240	1243680	like a triple boot system. So if you do, it'll be great to test out the render times between
1243680	1249360	them. I'd like to see it. Yeah, post it in the comments if you do. All right, number nine,
1250080	1259120	clamp it. What do I mean by clamp it? Wouldn't you like to know? Clamp it? What's clamping?
1259920	1266080	Other than that meaning? Clamping is, okay, so you know, sometimes when you render a scene,
1266080	1273680	you see in the background, you sometimes see these tiny little little tiny grains of light.
1273680	1280400	Okay, those are called fireflies. And oftentimes, no amount of extra rendering like increasing your
1280400	1285360	samples will get rid of those. So you can't get rid of those fireflies. Sometimes they're just there.
1285360	1289440	They're usually caused by small light sources or core sticks or a bunch of different things.
1290320	1295280	But you can get rid of them by changing your clamp settings in the render settings there.
1296080	1299760	I will say this should be used as a last resort, and I'll explain at the end why,
1300560	1305680	but it can be done. So say, for example, you have this teapot scene here, and you can see that in
1305680	1311840	the background there, you've got a lot of grainy noise. Okay. Well, if you were to clamp it, you
1311840	1318240	can see that it goes away immediately. So this is without clamping, and then this is with. Okay,
1318240	1324160	big change. So that's, that's going to save you a lot of time because you don't have to use as higher
1324880	1329680	a sample amount. So that's a huge improvement there. Now, again, that is where you can find it,
1329680	1337600	the clamp direct and indirect. However, I use it as a last resort. So to me, I use it like a get
1337600	1343200	out of jail free card. If nothing else works, that's when I do the clamping. And the reason I
1343200	1348480	don't use it all the time is that by clamping, it's going to bring down the values of, yes,
1348480	1353200	the fireflies in the background, it'll clamp those values down, but it will also clamp down every
1353200	1358160	other value in your scene. So you can see with this teapot here, difference between them, I'm
1358160	1364160	losing some brightness in the rim there, because when I clamped it, I had to, I had to get rid of
1364160	1368960	some of that brightness in the teapot, which I didn't want to do, but I had no choice. So that is
1368960	1377280	something to keep in mind. Just keep it in mind. Generally, also zero is turned off. And then the
1377360	1383600	higher the value, the better, because the higher the value, it's going to allow more light values
1383600	1388080	to get through. And then you just turn it down gradually and see when the fireflies disappear.
1389040	1393520	And generally speaking, you only want to use indirect, not direct, but yeah, it's up to you. So
1393520	1397600	like if you have like light shining in on the floor, that's a big part of your scene. If you
1397600	1402400	just clamped it, you're going to lose all that brightness in the, in the floor. So that's why
1402480	1411440	use it sparingly. Number 10, speaking of fireflies, caustics, the largest cause of them. So caustics,
1411440	1416160	for those who don't know, are like if you've got a glass of water on a table, the light shines
1416160	1422080	through it, you see that weird little like light pattern that appears on the table. That's refractive
1422080	1427600	caustics. You can also have reflective caustics, which is when light bounces off a surface onto
1427600	1432960	another surface. And it creates like an interesting light pattern. So those are two different types
1432960	1440960	of caustics. And they are very processor intensive for, for a renderer, right? And they often cause
1440960	1445440	more problems than they're worth. So there is two little checkboxes in your render settings,
1445440	1450160	enabling you to turn them off. And sometimes turning them off can save you a lot of time.
1450160	1455760	So for example, this is an image of a glass of water on a table or floor, I guess,
1455760	1461840	that's a big glass of water, let's be honest. But you can see there, you've got that nice
1461840	1466800	light shadow on the ground there. But if I was to turn it off, you can see that there's no light
1466800	1471520	shadow. However, the render times were a lot faster. So this is the difference between the two
1471520	1477120	there, 31% faster without the caustics. However, you could argue that the whole point of this scene
1477120	1481040	is to see the light shining through the glass. So you would obviously want to leave it on.
1481040	1486800	But honestly, for a lot of scenes, it's just, it's more trouble than it's worth. And for probably
1486800	1492880	95% of all my renders I've ever done, I just leave it turned off because it's just so commonly the
1492880	1497760	cause for those fireflies to appear in your scene. I just don't like it. And I just, I don't see the
1497760	1503760	point in most of the time. So I usually leave it turned off. But there you go. Okay. So number
1503760	1510960	11, let's talk about object instancing. What is object instancing? So say you have one tree
1510960	1515600	like this, right? And you want to make two trees. So you take that tree, you hit shift D,
1516320	1522480	and you duplicate it. Now you have two trees. However, as well as two trees, you've also doubled
1522480	1527200	up on the amount of memory you've used, and your render times as well, because it has to
1527200	1534400	now cache that mesh, essentially. So by duplicating it, I have doubled the amount of information in
1534400	1540720	the scene. Not so great, especially when they are an identical tree. So what you can do is you can
1540720	1547600	use object instancing so that they share the same object data. So for example, with this, with this
1547600	1554320	leaves here selected, if I select these other leaves, shift select, then hit Ctrl L here underneath
1554320	1562400	make links, if I select object data. Now up here in the object data panel, you can see that next to
1562400	1568480	the object, there is now a two number next to it. Because there are now two objects using that same
1568480	1573600	object data. And you'll know that they're connected because if you were to edit one of the meshes,
1573600	1579760	like say make that all the way out there, then you can see that they both have that change. Okay.
1580720	1586960	But you say okay. But I've got a number of different objects here. Okay, I've got I've got tree branches,
1586960	1590720	I've got a bunch of different stuff going on. I don't want to have to do that every time I duplicate
1590720	1597120	something. Well, if you want to duplicate something, but you want to keep that object information,
1597120	1604400	if you use alt D, alt D instead of shift D, the same thing happens, you've duplicated the tree.
1604400	1610000	However, it's automatically made them share the same object data. So this means a lot for
1610000	1614720	your final render. So this is very simple scene with a bunch of trees on it. And this is with
1614720	1620800	them set to single users, meaning I duplicated them the wrong way, I did shift D instead of alt D.
1620800	1627040	Okay, they're all spread out there. Okay, you can see that the render times two minutes 42 seconds
1627040	1633760	and six gigabytes of RAM, which is incredible amount. However, if it's instanced, I have the render
1633760	1641200	time. And I'm more than I decrease the memory used by 100 times almost, just by using instances
1641200	1648880	instead of actual like, single objects for each one. So huge savings there. And I'm ashamed to
1648880	1654160	say it took me like six years of using blender before I even realized that object instances were
1654160	1658320	a thing. So don't feel bad if this is the first time you're finding out about it. I'm hoping it's
1658320	1663840	news to a few of you out there. So use that and you'll save a lot of render time and memory,
1663840	1669280	which means that you more likely you can render it on your graphics card. So anyway, there you go.
1669280	1676640	Cool. Now let's talk about adaptive subdivision. Sounds technical. Well, this was something that
1676640	1682080	again is a very new feature. It only came out, I think in the last release or two. But what it
1682080	1687120	allows you to do is say you have an object, a scene like this where there's a lot of depth
1687680	1690800	in your scene. So you've got stuff that's in the foreground, you've got stuff that's in the
1690800	1696160	background. So a lot of nature scenes, interiors, all that kind of stuff, they have this going on.
1696160	1700800	Well, the detail that you need to see in the foreground is different to the amount of detail
1700800	1705360	you need to see in the background. The background, you can get away with very low poly objects,
1705360	1710640	but in the foreground, you want to have higher poly objects. So adaptive subdivision allows
1710640	1716800	you to do that. You just check one box in your modifier settings there to use the adaptive
1716800	1723360	subdivision. And now it will subdivide it depending on how close it is or how far it is
1723360	1728960	from the camera. And that has big savings for your render times. So check this out.
1728960	1735200	This is where it turned off. Render is in 21 minutes, uses 12 gigabytes of memory. Now,
1735760	1741440	with it enabled, it's 14 minutes and it's used a fraction of the amount of memory.
1742480	1746080	Huge amounts of saving there. So this is why I was so excited when it came out.
1746640	1750800	I made a whole tutorial on it, by the way, if you want to see it, it's in the description.
1750800	1755600	You can check it out. But it's such a huge feature. So yeah, it's really important. So
1755600	1759680	especially for nature scenes, do make sure that you make use of this new cool feature.
1760800	1768000	Number 13, remove alpha transparency. So this is fairly scene specific now we're getting into.
1768960	1774480	But this is a big one. So what is alpha transparency? So this is when, particularly when
1774480	1781200	you're making trees or plants or anything like that, sometimes you want to have a leaf and
1781200	1786320	the leaf maybe has like interesting little bits on the like frilly bits on the outside there.
1786320	1790720	And you want to make sure that it has that frilly bit in the render. So you can actually use
1790720	1796720	the alpha channel of the leaf so that it has that nice frilly pattern there.
1797840	1801520	As opposed to if you were to just model around it, you know, in a blocky shape,
1801520	1805760	you wouldn't get that pattern there. So it looks nicer with alpha transparency.
1805760	1812400	However, you pay for it in render times significantly. So here is a tree with alpha
1812400	1818800	transparency, it took 29 minutes to render. Without alpha transparency, the blocky method,
1818800	1825360	it's 16 minutes to render almost half the render time. And honestly, there is very,
1825360	1830160	very little difference between them in the in the final render. You can actually see like a
1830160	1834640	bright green outline there. But that's only because I think it was just as an example on
1834640	1839200	this render to show you where it is. But you shouldn't see that if you've modeled this correctly.
1839760	1844480	If you're if you're making a tree, I I'm ashamed to say I didn't even realize this and I was making
1844480	1848880	trees for ages. I thought that using alpha transparency was the way to go because it makes
1848880	1853200	a better looking leaf. And I didn't realize it was adding anything to the render times,
1853200	1858960	but significant amounts. So just crazy. So make sure that if you're making a tree or a plant,
1858960	1864560	that you are using the blocky leaf shape. And don't worry about the alpha transparency because
1864560	1871520	you'll pay for it. It's just too expensive. So forget it. Alright, number 14, reduce the strand
1871520	1879360	count. So again, very niche depends on your scene. But strands, basically, it's the particles. So it
1879360	1885680	could be grass, it could be, what could it be, could be hair on a character's head, or it could be
1885680	1892480	rug on a lounge room floor. It's a very expensive thing to render all that every single one of
1892480	1898160	those particles. So you pay for it. So this is with 145,000 particles with five children's
1898160	1906960	strands for each 36 minutes. 65,000, however, is 26 minutes. So there's a big difference between
1906960	1912080	that. And you know, you might think, you know, maybe it's not that bad, I might go with the extra,
1912080	1918720	you know, 145. And that's fine. You can do that. But just know that the more strands you add into it,
1918720	1922320	the longer you're going to be paying for it. A lot of people don't realize that they try and use like
1922320	1928480	a full on million particle ground or something like that. And then wonder why they can't render.
1928480	1933120	So just know it's a very intensive task. I'm gonna get another drink here. Gosh.
1933280	1943200	Number 15, coming to the end. Remove volumetrics. Volumetrics. What are volumetrics? Well,
1943200	1947760	you might already know. But it's like fog. It's when the light shines through something,
1947760	1953600	or it's just fog in a scene, right? So this was a new feature, well, new ish two or three years ago,
1953600	1959520	they added it, but you can now render volumetrics, which is very, very cool. It's also very, very
1959600	1966080	expensive in terms of rendering. So here's a scene with volumetrics, very cool scene. And here's it
1966080	1970640	without volumetrics. Obviously with looks a lot nicer. And that was actually the whole point of
1970640	1977440	this scene was to show off the volumetrics. But you can see that it does add significant amounts to
1977440	1985840	the render time, about 40% almost extra. And it looks a lot looks a lot grainier as well. Maybe
1985840	1991120	my throat is as well. So you have to you have to be aware, like when you're building a scene,
1991120	1995760	know that when you if you're just going to add some fog or whatever, if it's a tiny little bit
1995760	1999600	of fog, like do you really need it? Because you're going to be paying for it with your render time.
1999600	2004800	So use it when necessary. Sometimes for this scene, it makes a lot of sense. But if you're
2004800	2011600	seeing just consider it. Okay. So number 16, speaking of things to cut, you can also cut
2011600	2017760	the SSS, which is subsurface scattering. So subsurface scattering is something that you might
2017760	2022480	have seen. If you hold your hand up to the light, or if you're talking to somebody in the sunlights
2022480	2028720	behind them, you see it through their ears. But it's light as it's traversing through an object,
2028720	2033360	it will shine through on the opposite side. That's called a subsurface scattering.
2034560	2039600	And there is a special shader for that in your node settings. So yeah, basically, if you're
2039600	2044560	making a character, that's really the really the only time you use it. Another example might be
2044560	2049520	food, like a glass of milk or something, you can sometimes get it there, but mostly just characters.
2051120	2061520	Yikes. Sintel the sequel. Sintel, my precious. You forget how good hair looks until you don't
2061520	2068080	have it anymore, right? I'm sure a lot of men have realized that. With SSS, you can see it
2068080	2074480	renders in four and a half minutes. But if you use no SSS at all, it's a fraction of the time. So
2074480	2081040	it's a very expensive shader to use. So I would agree that it does actually look better with
2081040	2085760	subsurface scattering. If you don't use it for a character, the skin sort of looks waxy. No,
2085760	2091120	not waxy. It looks like like hard concrete or something like you really need some light to
2091120	2097120	be passing through it. So yeah, I would say you do need to use it in this case. It is a lot to
2097120	2101760	pay for those. So you know, you know, when when useful, you can use it. Otherwise, I just don't,
2101760	2112160	right? Number 17. Enable MIS. What is MIS? You might ask. It looks like MI5, but it is
2112720	2118000	not the same. Multiple important sampling is what it stands for. It's in the world panel,
2118000	2124400	right down there, little checkbox sort of hidden there. And there it is. What does it do? Well,
2124480	2129600	if it's turned off, it might, your scene might look like this. If it's turned on,
2129600	2135280	your scene might look like this. Now this is really only applicable if you have
2136560	2142880	lit your scene using an HDR environment light. Because I believe what it's doing is it's taking
2142880	2148000	it from, you know, an HDR with all its thousands of pixels and trying to find the light values of
2148000	2153440	each one. And I think when you enable it, it tries to average it. So you don't get that noisy
2153440	2158640	some parts dark, some parts bright sort of mess going on. It tries to average it, I believe.
2158640	2166080	Don't quote me on that. But it has a huge, huge impact. And yeah, I believe it's now turned on
2166080	2171680	by default, but it used to be like this hidden secret that some artists knew about. And when
2171680	2176320	they turned it on, they were like, Whoa, my scene looks so much better. But now I think it's turned
2176320	2180400	on by default. So it's not as cool anymore. You can't impress too many people with it.
2180400	2186240	But for a while you could. So if you if you are rendering with an HDR,
2186240	2189760	got to make sure that that one is checked. Otherwise, it's going to look awful.
2191040	2195360	I mean, basically, it looks broken if it's if it's not enabled. So that's I mean,
2195360	2198400	it really shouldn't be called a performance improvement. It should be called like,
2200160	2205840	is it right? Yes or no. With it checked, it is correct. So anyway,
2205840	2212800	finally, the last one to leave on because there was 18 cycles improvements, we're going to talk
2212800	2218640	about these are the small performance improvements which you can find in your render panel underneath
2218640	2226720	performance. So these are the use spatial splits, the use air BBH use, sorry, save buffers and the
2226720	2231520	persistent images. Now, here's the thing, maybe you might have noticed this as I was cycling
2231520	2238400	through it. But in these examples, I didn't actually find these checkboxes to actually
2238400	2243760	make an impact. The first time we ran these tests, we were able to see an improvement.
2243760	2247280	We did it for a different scene and we rendered like one frame and then we stopped in another frame.
2248160	2253040	And we were able to see an improvement. However, I and then I recorded the start of this video
2253040	2259280	and I call it the 18, you know, ways to improve cycles or whatever. And now I then I did some
2259280	2265120	retests halfway through, you know, doing this tutorial, and then I wasn't able to reproduce it.
2265120	2272480	My point being is that these small performance improvements supposedly are supposed to improve
2273520	2278640	the performance of cycles, but I haven't actually found that to be the case. I found it to pretty
2278640	2283760	well stay the same whether their boxes are checked or whether they're not checked spatial splits,
2283760	2290960	I've been told as opposed to increase your memory slightly with a decrease in render speed,
2290960	2296240	I didn't find that I found that render speed was about the same. By the way, if you see like two
2296240	2302640	seconds plus one or two, whatever, factor that as zero improvement or change because the system,
2302640	2308720	if you re-render, I think twice without changing anything, it can usually come within a hair of
2308720	2316160	that anyway. So it's basically the same, no difference. Use hair BVH. Maybe five seconds
2316160	2321920	faster with more memory. It was actually supposed to be when you check it, use hair BVH, it's supposed
2321920	2328320	to use less memory. So I found it to be the opposite way with that one. Not great. But I did, I spoke
2328320	2336160	with Andy Karalsik on Twitter and he said from he heard from Shurgay that this is really only
2336240	2341440	impact, it really only impacts it if you've got motion blur. So say you had grass blowing in the
2341440	2348880	wind like that, and there was motion blur. Oh, for Agent 327, his hair was moving or whatever.
2348880	2354240	And apparently that really, really taxed the render times. So this was supposed to solve that.
2355200	2361040	Or it should solve that, right? But I wasn't able to replicate it. Sorry to say I really,
2361040	2368720	yeah, I wasn't able to do it. Save buffers. I've since learned Andy told me that this is actually
2368720	2373520	was really only applicable to the render, the Blender internal rendering engine, and that cycles
2373520	2378240	it won't make much of a difference, which explains why I wasn't able to get much of a difference from
2378240	2385520	it. It was supposed to case your image textures somewhere so that it's then able to reference
2385520	2391200	them faster for your extra frames then on, I didn't find any improvement. And then we've got
2391200	2396720	persistent images, which I think also might be the same, like it doesn't apply to cycles,
2396720	2403280	I could be wrong on that. But I wasn't able to find any improvements. So yeah, so these,
2404960	2410800	I mean, I feel bad ending on such a low note, like I wasn't able to replicate this stuff. But I do
2411440	2415760	include it because it looks so important. And you see this stuff in the performance settings.
2415760	2419680	And you've probably wondered, like I've wondered, what do these buttons do? Should I leave them
2419680	2424560	checked checked on checked off? Does it am I paying for render times because it's turned on or because
2424560	2431280	it's turned off? Honestly, in my opinion, it doesn't make any difference. Probably nine times
2431280	2434720	out of 10 the scene that you're rendering is not going to make any difference. When you're doing
2434720	2440560	a production, like they were doing for Agent 327, you probably come across like one or two
2440640	2447200	frames where it just crashes, or you get horrendously long render times for this specific object. And
2447200	2452480	that's where having a guy like sure gay, the developer on your team to go, Oh, you've got to
2452480	2457200	check the head be the age box, right? That's when it's applicable. But I think for the everyday
2457200	2462080	artist, I mean, this should really be hidden almost in like the user preferences. Because it's
2462080	2468320	that I feel like it doesn't make that big of a difference to anyone. In my opinion, that's just
2468400	2476160	my opinion. But yeah. Alright, we discussed a lot. Let's round it off. We discussed a lot in
2477360	2483360	this, this little video. The summary is on blender guru.com. You can click the link below.
2483360	2490160	That's what it says behind my shirt and microphone. Link is below. So I'm going to put the whole
2490160	2493600	summary up there with images and everything. So you can just reference it in the future. You
2493600	2499040	don't have to listen to my voice all over again. You can just reference it on there. Now, if you
2499040	2505280	look at this and you think, boy, Andrew, that sure is a lot for the user to take in like why don't
2505920	2512960	those stupid blender developers pull their head out and turn this stuff on by default or make it
2512960	2519200	automatic or something like that. Here's why you a lot of these things you might seem like a no
2519200	2526240	brainer like, Hey, the everybody should be using GPU. Well, not everybody has a computer that supports
2526240	2531680	GPU. A lot of features don't work with GPU. So having it on by default isn't a good idea. Other
2531680	2536880	things like portals, how would blender know whether you've got an interior scene or an exterior scene
2536880	2543840	where the lights coming from, etc. Some of these things you just have to it's when you're building
2543840	2548560	the scene. It's only the artist that's building it that can know that this particular thing is
2549920	2555120	useful. Yes, it's true. Some of this stuff you would never know unless somebody told you. But I
2555120	2561280	think that's part that comes with the territory. Some of it is becoming automatic. Like for example,
2561280	2569840	use optimal tile size. Tom told me that that's going to be in 2.8 or 2.79. But yeah, that's going
2569840	2574720	to be automatic. So hopefully you shouldn't have to touch that in the future. And there's other
2574720	2579040	stuff like use denoising. You could argue that should be an automatic feature, but you could also
2579600	2585200	argue the other way that it blows things in, you know, so you might not not every artist needs it
2585200	2590400	on by default. So the whole like default argument isn't as clear cut as it sounds. So some of this
2590400	2594960	stuff you do just have to know. So that's why I'm making this video because it's a common question
2594960	2599280	a lot of people have. How do you improve render times and some of the stuff you just don't know
2599280	2604560	until you find it. So and the other thing is, is that a lot of these things here you don't have
2604560	2611040	to do every time you make something. It's just like some of this stuff like volumetrics, sss,
2612560	2616960	object interesting, all that stuff, that stuff that you once you know it now, when you make a
2616960	2621200	scene in the future, you'll know like, oh, if I add fog to this, I'm going to pay for that
2621200	2626800	dealing. So I might not do that or something like that. Like you don't have to go through a checklist
2626800	2632480	every time you render a scene, or maybe you'd want to do that anyway. But yeah, you can just
2632480	2638560	yeah, know about it. So as an example, this is the scene that I started with on the on the first
2638560	2645040	slide. Let's talk about let's say I finished this scene. And now I want to do an animation,
2645040	2650160	I want to make the camera fly through the scene. Now, if I was just doing a still
2650880	2659520	I probably wouldn't worry about doing all 18 of these. I would say, you know, if I can render it,
2659520	2662640	who cares? I'm just going to render it overnight. I'm going to come back. It's going to be fine.
2662640	2668000	If I'm doing an animation, it could mean the difference between a two month long render
2668000	2676000	and a five day render or a five hour render. I don't know. Animations are so like it's just
2676080	2682320	obviously it's multiplied exponentially. What is it exponential? Whatever the performance
2682320	2687600	improvements you can make, like even down to fractions of a second can have big impacts over
2687600	2692400	a you know, feature length film. So for something like this, I would go through my checklist and
2692400	2696800	I would say, All right, looking at my scene here, can I reduce the light bounces? Yes,
2696800	2702480	doesn't need portals. I will make sure I use my GPU if possible, make sure I'm using the optimal
2702480	2706000	tile size. I don't worry. I need to worry about clamping or reducing the samples because they're
2706000	2710800	already optimized denoising. Yes, I want to make sure that I smooth it out instead of, you know,
2710800	2715680	having heaps and heaps of samples. Make sure I'm definitely losing using the latest plan
2715680	2721680	diversion. That's just a no brainer object. Instancing absolutely. If I had for all those
2721680	2727040	duplicate cherry blossom trees there, if each one of those they were individual single user
2727040	2732080	objects, I probably wouldn't even be able to render it. It would be so overblown in the memory.
2732160	2736880	So definitely make sure I'm using that adaptive sub div definitely for the ground and rocks and
2736880	2741440	things like that. I want to make sure I'm using that offer transparency. Absolutely make sure
2741440	2745840	that's eliminated from all my nature objects because that's a very common scene where you would see
2745840	2753760	it strand count. Make sure I'm using the lowest amount of grass possible. Volumetrics. That's
2753760	2757920	here's an example of like volumetrics like you there's fog on those mountains there.
2758480	2764240	Do I really need true volumetric fog or can I get away with doing it in the compositor like a
2764240	2769040	fakery sort of thing where it's not entirely accurate but I wouldn't be paying for it as
2769040	2775200	dearly. Doesn't need SSI because it's hasn't got any people in it basically. MSI turned on. Yes,
2775200	2779920	if I'm using an HDR and those small performance improvements, right? That's that's sort of the
2779920	2784880	checklist that I would run through as an artist if I was doing an animation. Not every single scene
2784880	2790960	that I make I go through this. It's not like you know a flight manifest you have to go through all
2790960	2795200	the checklists before you take off or whatever. It's only if you absolutely need to.
2797600	2802640	Give me a like. No, thank you for watching essentially. This is the end. If you found this
2802640	2808560	useful do give it a like and I do want to end by saying thank you to these people. Mason Menzies
2808560	2814400	actually did a whole bunch of the tests basically most of the tests that you just saw a painful
2814400	2820240	job rendering for two hours coming back rendering again. But he did that so thank you to Mason,
2820240	2825520	the Blender Foundation for providing the CC source files, Mike Pan, Christoph Souche,
2826800	2833360	Nick Brunner and E-Marage provided some of those render time test benchmark scenes
2833360	2840480	and then Rob Garlington for the artwork for this tutorial. But that's it. Thank you for watching.
2840480	2846640	Hope it was useful and send it to anyone who's got terrible render times.
2847920	2850000	Thank you for watching. See you next time. Bye.
