1
00:00:00,000 --> 00:00:15,760
All right, come on Blender. Let's see what you got. Yes, it finished! One frame, only

2
00:00:15,760 --> 00:00:25,040
16 hours. Okay, so let's see. Per frame, 16 hours for a 1000 frame animation should get

3
00:00:25,040 --> 00:00:40,960
done in about six months, which is before Christmas. Yeah, that's all right. Let's do it.

4
00:00:40,960 --> 00:01:02,240
Hello? Hello? Can you hear me? It worked! It worked! Hello! It's me! It's you in the future!

5
00:01:02,240 --> 00:01:11,520
I'm calling you from 2030. Hi! Really? Because it looks like you haven't aged a day. Well, yeah,

6
00:01:11,520 --> 00:01:18,400
I mean, I wear a lot of sunscreen. What can I say? But listen, you need to know, render times are

7
00:01:18,400 --> 00:01:28,000
important. Okay? Because if you spend too long rendering, then you'll end up like me, living in

8
00:01:28,000 --> 00:01:37,840
a box on the side of the highway, poor, desolate, a piece of chewing gum on the soul of society,

9
00:01:38,640 --> 00:01:45,920
I'm homeless. Right. So because I rendered for too long, I ended up homeless?

10
00:01:47,040 --> 00:01:53,040
Basically, I spent so long rendering that, well, I was never able to develop my skills as an artist

11
00:01:53,040 --> 00:02:01,200
because I was rendering so much and then so I was never able to get a job. Also meth. Ah, right.

12
00:02:01,200 --> 00:02:10,880
Copious amounts of meth. I'm sure, yeah. Listen, the sky's going black again, so I haven't got much

13
00:02:10,880 --> 00:02:17,920
time, but I need to give you the advice that might just save your life. It's the 18 ways to speed up

14
00:02:17,920 --> 00:02:24,800
cycles. Okay, well, just email it to me or something. Can you do that? No, no, in the future,

15
00:02:24,800 --> 00:02:32,000
we don't have email. It's all like cerebral uplinks. It funny story, actually, it was the downfall of

16
00:02:32,000 --> 00:02:39,440
society, like the nanoparticle base of the pain and what collapsed. Okay, it's breaking up. Okay,

17
00:02:39,440 --> 00:02:46,960
okay. All right, listen, I'll fax it to you. Fax it? Who's got a fax machine? Yeah, I know the hipsters,

18
00:02:46,960 --> 00:02:51,040
they brought it back, it's done. Well, fine, but I don't have one, don't... All right, listen, I've

19
00:02:51,040 --> 00:03:00,240
just sent it. Andrew, with great power comes great responsibility. Rest easy on the wicked,

20
00:03:00,880 --> 00:03:06,000
for they have not seen the truth. Also, don't touch meth.

21
00:03:06,000 --> 00:03:22,480
It's weird, but helpful, you know, the best kind of weird. So that's what we'll do in this video,

22
00:03:22,480 --> 00:03:30,960
we'll go over the 18 ways to speed up cycles rendering. These aren't, well, these aren't like

23
00:03:30,960 --> 00:03:36,640
a checklist that you must follow, but they're sort of helpful tips, you know, if you want to shave

24
00:03:36,640 --> 00:03:42,400
off seconds, or maybe you're rendering a big feature length animation, you know, one of the

25
00:03:42,400 --> 00:03:49,280
first for Blender, and you want to see how to improve it, this is going to go over all of the

26
00:03:49,280 --> 00:03:58,480
ways that I know of how to do it. So let's get to it. Number one, reduce your light bounces.

27
00:03:59,280 --> 00:04:04,000
Light bounces. What are light bounces, Andrew? Well, light bounces are something that happens

28
00:04:04,000 --> 00:04:08,560
in the real world and in 3D software. So when light hits another surface, it bounces off that

29
00:04:08,560 --> 00:04:13,360
surface, and it'll hit another surface, it'll bounce off that surface, et cetera, et cetera,

30
00:04:13,360 --> 00:04:19,840
to infinity in the real world. But in 3D software, that bouncing process is a very

31
00:04:21,040 --> 00:04:27,600
processor expensive task. So you pay for that in your render times. So there's a value in Blender,

32
00:04:27,600 --> 00:04:33,600
which will allow you to set the maximum, the minimum and the maximum amount of light bounces

33
00:04:33,600 --> 00:04:40,640
that happen in the scene. And by default, it's set to 12, which I think personally is a little bit

34
00:04:40,640 --> 00:04:48,880
too high. So for example, this is a classroom scene, which has eight light bounces set at maximum,

35
00:04:48,880 --> 00:04:53,840
right? Okay, this is how it looks at eight, right? Now, what I'm going to do, I'm overlaying a grid

36
00:04:53,840 --> 00:04:58,080
over here, and we've got along the x-axis, the number of bounces. And what I'm going to do is

37
00:04:58,080 --> 00:05:04,160
I'm going to cycle through these bounces here. And in the background, the render is changing

38
00:05:04,160 --> 00:05:10,880
with this graph, okay? It's an interactive demo, right? So you can see that up until about

39
00:05:11,520 --> 00:05:15,600
four light bounces, there's no difference, no difference at all. And that's basically,

40
00:05:15,600 --> 00:05:19,920
my guess is, there wasn't actually any extra light to bounce around. So four was the maximum.

41
00:05:20,720 --> 00:05:27,200
And then after about four, you can see three to one, you can see that the glass becomes opaque,

42
00:05:27,200 --> 00:05:32,080
but don't worry about that. I'll show you a fix for that in a second. And then finally,

43
00:05:32,080 --> 00:05:36,960
zero down at the bottom there. So zero, there's a big change. You'll notice the biggest difference

44
00:05:36,960 --> 00:05:44,320
between no bounces and one bounce, okay? So in my opinion, other than the glass, you don't need

45
00:05:44,320 --> 00:05:51,360
anything beyond one light bounce for this scene, which means you can save a considerable

46
00:05:53,360 --> 00:05:57,920
amount of time. So instead of going from eight light bounces, if you went to one,

47
00:05:57,920 --> 00:06:04,800
you'll be rendering at 48 seconds instead of 95, which is a huge savings. Now, I know you're

48
00:06:04,800 --> 00:06:09,360
probably thinking, hey, yeah, but that glass looked really horrible there. So we still want the

49
00:06:09,360 --> 00:06:15,120
glass to look nice. Well, actually, the settings over here, these are the bounce sets. This is

50
00:06:15,120 --> 00:06:19,040
where you would change it. So these are the broad values here, the maximum, minimum for the whole

51
00:06:19,040 --> 00:06:24,000
scene. But you can also set it individually for your transparency and your transmission,

52
00:06:24,000 --> 00:06:28,000
and all the different ones there. So all you would have to do is just set these diffusing

53
00:06:28,000 --> 00:06:32,160
glossies down to one, and then just make sure that the transparency is set to at least three

54
00:06:32,160 --> 00:06:36,640
or four or something like that. And that would be it. And you would be able to save a huge amount

55
00:06:36,640 --> 00:06:41,440
of render time. A lot of people don't know that, but it's a really easy way you can do it. Okay,

56
00:06:41,440 --> 00:06:50,080
number two, use portals. Portals. Does he mean these portals? No, not those portals. I'm talking

57
00:06:50,080 --> 00:06:56,240
about Blender's portals. So when you are making an interior scene in Blender, which is like, you

58
00:06:56,240 --> 00:07:02,080
know, a room, and you have a window in which there is light coming in through the window

59
00:07:02,080 --> 00:07:08,000
from particularly an HDR, but any environment light, basically, you've got a lot of light

60
00:07:08,000 --> 00:07:12,240
calculation because it's actually lighting the outside of your room. And then some of that

61
00:07:12,240 --> 00:07:17,120
light is going in through the window. Well, that's wasted information, right? That there's too much,

62
00:07:17,120 --> 00:07:21,760
you know, that that's being wasted there. So what you can do is over the window, if you place one

63
00:07:21,760 --> 00:07:28,000
area lamp, and then in the lamp settings, if you check a box that says portal, what that will do

64
00:07:28,000 --> 00:07:32,480
is it will tell Blender essentially where the window is. So make sure that you get the light

65
00:07:32,480 --> 00:07:37,840
in through here. And don't worry so much about the rest of it. It's huge. Once you see it,

66
00:07:37,840 --> 00:07:42,560
have a look at this. So this is with no portals. All right, you can see very grainy. I'm hoping

67
00:07:42,560 --> 00:07:49,280
you can see that in the YouTube compression, but it's a very, very grainy image. Now, when we add

68
00:07:49,280 --> 00:07:54,400
one portal, sorry, two portals, because there's two windows, look at the difference from super grainy

69
00:07:54,480 --> 00:08:00,240
to almost completely clear, okay, which is crazy. Now you can see the render time does actually go

70
00:08:00,240 --> 00:08:07,120
up by 30 seconds, which is not much. So that's not really a fair comparison, because really,

71
00:08:07,120 --> 00:08:12,640
you know, the whole point of a render is to get rid of the noise. So if we were to, without portals

72
00:08:12,640 --> 00:08:18,400
at all, try and get it to the, to that level, I would have to double or probably even triple the

73
00:08:18,400 --> 00:08:23,520
amount of samples. So just for this comparison to make it fair, you can see that you would have to

74
00:08:23,520 --> 00:08:28,480
really go double or triple your render times to try and get it without portals. So it's a huge

75
00:08:28,480 --> 00:08:32,240
saving. So make sure that if you're making an interior scene, all the architects out there

76
00:08:32,240 --> 00:08:36,800
watching this, if you hadn't learned about portals before, and hopefully this will save you a lot

77
00:08:36,800 --> 00:08:42,320
of time in the future, use them and yeah, it's really, really handy. So again, that's where to

78
00:08:42,320 --> 00:08:46,880
find it. And I've got a tutorial in the description if you want to watch it, but it's super easy to

79
00:08:46,880 --> 00:08:56,880
use. All right, number three, use your GPU. Now some of you older blender users perhaps would say,

80
00:08:56,880 --> 00:09:02,240
yeah, come on, everyone knows that. Well, not necessarily. Especially a lot of beginners,

81
00:09:02,240 --> 00:09:07,600
they will not know that you can actually, with Blender, you can render with either your CPU

82
00:09:07,600 --> 00:09:12,800
or your GPU. So there's most computers have to and generally speaking, and this is,

83
00:09:13,520 --> 00:09:20,000
excuse me, let me get a drink. That's where you change it. You change it in the device setting

84
00:09:20,000 --> 00:09:25,440
right there. You can set it to GPU. And if you don't see that, by the way, if you only see CPU

85
00:09:25,440 --> 00:09:30,720
there, if you go to file user preferences, system in the bottom left hand corner, you should see

86
00:09:30,720 --> 00:09:35,600
underneath compute device, something that says CUDA. If you don't see something that says CUDA

87
00:09:35,600 --> 00:09:40,560
and your graphics cards underneath it, then you don't have a card that is supported in Blender.

88
00:09:40,560 --> 00:09:45,280
Right now AMD is not supported in Blender. So I mean that they're working on it. I just don't

89
00:09:45,280 --> 00:09:50,080
know when it's going to happen. So Nvidia, yeah, you would see it there. And generally speaking,

90
00:09:50,960 --> 00:09:57,440
Nvidia, you know, GPUs, whatever, they render a lot faster than a CPU. So this is just one example

91
00:09:57,440 --> 00:10:02,480
here, but you can see that it's saved a render time of 33%. And that's, you know, that's probably

92
00:10:02,480 --> 00:10:08,880
with a really good CPU as well. So that's a considerable savings. But the really, really

93
00:10:08,960 --> 00:10:13,760
cool thing about GPUs, and the reason that there was such a game changer for the industry like

94
00:10:13,760 --> 00:10:20,080
five years ago, is that you can add more graphics cards to your computer, but you can't add more

95
00:10:20,080 --> 00:10:25,440
CPUs. Like if you wanted to upgrade your CPU, you first of all won't get that much of a bigger

96
00:10:25,440 --> 00:10:31,200
difference over your last CPU. But not only that, like you can't put two CPUs in your computer,

97
00:10:31,200 --> 00:10:37,760
at least not usually, right? So if you wanted to upgrade your CPU, you would have to upgrade your

98
00:10:37,760 --> 00:10:41,440
motherboard, which means you have to upgrade your RAM, which means forget it, I might as well just

99
00:10:41,440 --> 00:10:46,160
get a whole new computer. Whereas a GPU can be taken out and put into another computer,

100
00:10:46,160 --> 00:10:51,440
no problems. So it's a very easy investment. If you want to halve your render times, you can

101
00:10:51,440 --> 00:10:56,400
purchase two graphics cards, and it will render it in half the time, because it's a linear sort of

102
00:10:56,400 --> 00:11:00,880
growth. So three graphics cards, four graphics cards, it's going to render four times faster

103
00:11:00,880 --> 00:11:07,600
than one graphics card. So yeah, it's a huge, huge thing. So make sure that if you've got

104
00:11:07,600 --> 00:11:15,200
a GPU and you can use it, use it whenever possible. Number four, change your tile size. So this is

105
00:11:15,200 --> 00:11:21,760
another really important one that a lot of people don't realize is so important. Tiles. What are

106
00:11:21,760 --> 00:11:28,640
tiles? Well, tiles are when you hit the render key, those little blocks that appear on the screen

107
00:11:28,640 --> 00:11:35,280
that slowly reveal your render. Those are tiles. And the size of your tile is defined in the

108
00:11:35,360 --> 00:11:42,560
render settings underneath tiles X and Y. By default, it's set to 64, which is not really ideal

109
00:11:42,560 --> 00:11:49,040
for most people's whatever they're they're rendering on. Okay, the size of your tile depends on whether

110
00:11:49,040 --> 00:11:54,560
what whether you're working on a CPU or GPU, the tile sizes should be different. In fact,

111
00:11:54,560 --> 00:12:01,200
the exact opposite. So if you're working and you're rendering on a CPU, the smaller your tile size,

112
00:12:01,920 --> 00:12:08,000
the best coming in at about 16 by 16 pixels, the better it will be. If you if you go larger for

113
00:12:08,000 --> 00:12:13,920
CPU, the worse it will be. And on GPUs, the opposite, the larger your tile size, the better the

114
00:12:13,920 --> 00:12:19,200
renderings will be. So you could see that you could considerably like if you accidentally were

115
00:12:19,200 --> 00:12:26,320
rendering at a really small size on the GPU, you could take forever to render the scene because

116
00:12:26,320 --> 00:12:31,600
it's you've got the wrong tile size, right? So you can have huge memory, sorry, render time

117
00:12:31,600 --> 00:12:37,440
improvements just by changing the tile size. As a general rule of thumb, smaller tile sizes work

118
00:12:37,440 --> 00:12:44,000
better for CPUs. I just use 16 by 16 every single time works for me. And the bigger tile sizes for

119
00:12:44,000 --> 00:12:52,480
GPUs maxing out at about 512 by 512, generally speaking, is better. Now different GPUs, different

120
00:12:52,560 --> 00:12:56,720
tile sizes will work better. I've heard that like different architectures for Nvidia,

121
00:12:56,720 --> 00:13:01,760
like a Kepler card or a Tesla card, some of those use better with like rectangle shapes. I don't

122
00:13:01,760 --> 00:13:07,680
know why. But just when you get a new card, just do some tests and figure out what your optimal

123
00:13:07,680 --> 00:13:12,960
size is for your card, because that'll save you a lot of time in the future. All right,

124
00:13:12,960 --> 00:13:21,040
got to get another drink here. I think his office is really dry. My throat is getting raspy. All

125
00:13:21,040 --> 00:13:26,720
right, number five, reduce your samples. Yeah, you might say, duh, you got to reduce your samples.

126
00:13:27,360 --> 00:13:31,760
But okay, first of all, what are samples? I know a lot of you do, but let's talk about samples.

127
00:13:31,760 --> 00:13:37,920
Samples, most of you know as that grain that appears over your image, okay? So the whole

128
00:13:37,920 --> 00:13:44,000
point of rendering is to try to reduce that grain and you do that by increasing your samples,

129
00:13:44,000 --> 00:13:50,560
which you can define in your render settings right there. So obviously the higher the render

130
00:13:50,560 --> 00:13:55,280
sample amount you set it to, the longer your render times are going to be. But the clearer

131
00:13:56,320 --> 00:14:02,000
your final image will look. So basically you want to try and set it to a higher value for your final

132
00:14:02,000 --> 00:14:08,720
render. And yeah, but the problem is, is that I see a lot of people using incredibly high sample

133
00:14:08,720 --> 00:14:13,840
amounts to the point that there's no point in doing it that high. So for example, here is a scene

134
00:14:13,840 --> 00:14:21,360
set at 10,000 samples. And here's the same scene again set at 2,500 samples, one quarter of the

135
00:14:21,360 --> 00:14:28,240
number of samples as before. Now as I flick back between them, can you see a difference? No, you

136
00:14:28,240 --> 00:14:34,080
can't because it's indistinguishable to your eye. You can't see any difference between them. And yet,

137
00:14:34,720 --> 00:14:41,280
the 10,000 samples one took most of the day to render and the 2,500 rendered in less than an

138
00:14:41,280 --> 00:14:47,520
hour and a half. So huge time differences there, but very, very little difference between the actual

139
00:14:47,520 --> 00:14:52,880
images. So there's a point where the samples that the point of going any high is pointless. So you

140
00:14:52,880 --> 00:14:57,360
want to try and find out what are the optimal amount. Because while this might sound like an

141
00:14:57,360 --> 00:15:03,120
exaggeration, like yeah, who would go to 10,000? Have a look on Blender Artists. You'll see some

142
00:15:03,120 --> 00:15:08,000
people that are rendering their scenes. Like I've seen some with like 50,000 samples and they said

143
00:15:08,000 --> 00:15:13,920
they let it render for 48 hours thinking, what are you doing? There's no reason to go that high.

144
00:15:13,920 --> 00:15:20,000
That's just insane. It's just a waste of power, a waste of your time more importantly. And it's

145
00:15:20,000 --> 00:15:27,760
just don't go that high. Okay, keep it keep it as low as it needs to be. Speaking of noise and

146
00:15:27,760 --> 00:15:36,080
samples, there is a new feature in Blender 2.79 called denoising. And it is going to be a game

147
00:15:36,160 --> 00:15:39,520
changer. Now I've only just played around with it for a little bit, but I'm going to show you

148
00:15:39,520 --> 00:15:46,080
here what it does. Denoising does this. It takes that grainy image and then it applies

149
00:15:47,040 --> 00:15:54,080
like a post processing step, I believe, on top of it, which will make it appear clear and smoothed

150
00:15:54,080 --> 00:16:01,200
out. So it's a big deal and it's going to be a huge deal for the Blender community once everyone

151
00:16:01,200 --> 00:16:06,080
sees it. It's like, whoa, this is going to make a lot of difference. You're going to see it from

152
00:16:06,080 --> 00:16:12,560
now on, like in the future, most renders are going to be using a denoiser. Because for example,

153
00:16:12,560 --> 00:16:17,520
here is my bathroom scene and I'm hoping you can see it in the YouTube thing, but this is a very,

154
00:16:17,520 --> 00:16:23,920
very noisy image. Very noisy. I would never use this as a final image. However, when I applied the

155
00:16:23,920 --> 00:16:30,960
denoise filter on top of it, it looks like a final render. It's amazing. I don't properly

156
00:16:30,960 --> 00:16:35,840
understand how it works because I haven't really researched it that much, but it looks like black

157
00:16:35,840 --> 00:16:42,480
magic. It's like sorcery. So yeah, okay, now the difference between these two here, you can see

158
00:16:42,480 --> 00:16:47,520
that the denoising step applies a small, like it does actually add something to the render,

159
00:16:47,520 --> 00:16:51,280
but again, it's not a fair comparison to say that the denoise one took longer,

160
00:16:51,280 --> 00:16:56,560
because the whole point is to make a clearer render. So it's saving you, let's say if you had to double

161
00:16:57,200 --> 00:17:02,480
or sorry, quadruple the rendered time, it's saving you considerable amounts of time,

162
00:17:03,280 --> 00:17:09,280
especially for animations. Like I can now, looking at this, I can say like, wow, I can finally do an

163
00:17:09,280 --> 00:17:15,920
architectural animation now. Because before like interiors are just horrible, just noise absolutely

164
00:17:15,920 --> 00:17:20,160
everywhere, but with this, it's going to make it possible. So I'm really, really excited about this

165
00:17:20,160 --> 00:17:25,280
feature. And I think once the community sees it, they're going to go ballistic. But yeah, try it out.

166
00:17:25,840 --> 00:17:31,120
It's really fun. In 2.79, it'll be in there for everyone. I'll probably do a tutorial on it if

167
00:17:31,120 --> 00:17:36,720
people want it. But there you go. All right. Number seven, this is one a lot of people don't

168
00:17:36,720 --> 00:17:42,160
realise, but you should be using the latest Blender version, because there are big differences

169
00:17:42,160 --> 00:17:48,000
between all the versions of Blender and newer versions. Pretty much every new version of Blender,

170
00:17:48,000 --> 00:17:53,760
they try to improve on the render times of the one before it. And they're always doing improvements.

171
00:17:54,320 --> 00:18:00,960
So this is, I did this one a couple of years ago, but comparing 2.64 to 2.71,

172
00:18:01,600 --> 00:18:08,320
basically like a year of releases there, you can see considerable time savings. And this is for

173
00:18:08,320 --> 00:18:16,080
both CPU and GPU. CPU, especially they've been able to really crush the render times in each

174
00:18:16,080 --> 00:18:22,720
consecutive later release. So it's just going, it's going crazy. So make sure that you are using

175
00:18:22,720 --> 00:18:26,960
the latest version. Sounds like a no brainer, but you know, I still see emails from people

176
00:18:26,960 --> 00:18:31,840
where they're like, Hey, I'm, you know, I'm using 2.66. So I don't have that feature. And I think,

177
00:18:33,040 --> 00:18:37,680
why, why? And they're like, Oh, well, you know, I just, that's the one I've got. So I don't,

178
00:18:37,680 --> 00:18:42,080
I like how it works. So I don't want to install the latest one. It's like, you can do that. And,

179
00:18:42,080 --> 00:18:45,920
you know, I'm all for making life simple, but you're going to be paying for it in your render

180
00:18:45,920 --> 00:18:51,920
time. So make sure you're using the latest version, please. Again, I haven't done it for 2.78,

181
00:18:51,920 --> 00:18:58,240
whatever we're on now. But yeah, it just, it's going down. Okay. All right. Number eight,

182
00:18:58,240 --> 00:19:03,040
this is an interesting one. A lot of people don't realize, but actually different operating systems.

183
00:19:03,040 --> 00:19:07,840
And by that, I mean, you know, Windows, Mac, Linux, they have different rendering times,

184
00:19:08,400 --> 00:19:13,200
because it is supported on every platform, which is fantastic. And most software, you can't do that.

185
00:19:13,840 --> 00:19:19,120
But there are different times between them. So here I've got two tests, just testing between

186
00:19:19,120 --> 00:19:25,200
Windows and Mint, which is Linux, a Linux distribution. And you can see that for GPU,

187
00:19:25,200 --> 00:19:30,240
there's almost no difference. In fact, in most examples, I found Windows performs better on

188
00:19:30,240 --> 00:19:37,520
Windows, sorry, GPUs perform better on Windows than they do on Linux. However, for CPU, Linux

189
00:19:37,520 --> 00:19:44,400
kills it. So CP, so Linux is really good at CPUs, not as great with GPUs, because I think they put

190
00:19:44,480 --> 00:19:49,840
a lot more effort into the drivers for Windows, because there's gamers on it, obviously. But yeah,

191
00:19:49,840 --> 00:19:54,320
it's really good with CPUs. So that's just something to keep in mind. I wouldn't just

192
00:19:54,320 --> 00:19:58,480
immediately rush out and go and get Linux. Don't feel you have to do that, or that you're missing

193
00:19:58,480 --> 00:20:04,080
out because you're using Windows. I've known about this for years, and I use Windows. And that's

194
00:20:04,080 --> 00:20:08,720
just because it makes my life easier, because that's where all the software is. I can play games on it

195
00:20:08,720 --> 00:20:14,960
as well. And it's just, I don't see, I'm happy to eat the render time. But you know, hard core

196
00:20:14,960 --> 00:20:18,640
people out there, if you really want to cut down on the render times, this is why a lot of render

197
00:20:18,640 --> 00:20:23,280
servers, by the way, if they use Linux, because it's just optimized and just performed so much

198
00:20:23,280 --> 00:20:28,240
better. So yeah, you might be wondering, hey, Andrew, what about Mac? Where does Mac fit into

199
00:20:28,240 --> 00:20:33,520
that? I have no idea. I'm going to throw it to you guys. Do you guys have a Mac that also has

200
00:20:33,520 --> 00:20:38,240
Windows and Linux? Because I searched for it online, and I didn't see anybody that had one,

201
00:20:38,240 --> 00:20:43,680
like a triple boot system. So if you do, it'll be great to test out the render times between

202
00:20:43,680 --> 00:20:49,360
them. I'd like to see it. Yeah, post it in the comments if you do. All right, number nine,

203
00:20:50,080 --> 00:20:59,120
clamp it. What do I mean by clamp it? Wouldn't you like to know? Clamp it? What's clamping?

204
00:20:59,920 --> 00:21:06,080
Other than that meaning? Clamping is, okay, so you know, sometimes when you render a scene,

205
00:21:06,080 --> 00:21:13,680
you see in the background, you sometimes see these tiny little little tiny grains of light.

206
00:21:13,680 --> 00:21:20,400
Okay, those are called fireflies. And oftentimes, no amount of extra rendering like increasing your

207
00:21:20,400 --> 00:21:25,360
samples will get rid of those. So you can't get rid of those fireflies. Sometimes they're just there.

208
00:21:25,360 --> 00:21:29,440
They're usually caused by small light sources or core sticks or a bunch of different things.

209
00:21:30,320 --> 00:21:35,280
But you can get rid of them by changing your clamp settings in the render settings there.

210
00:21:36,080 --> 00:21:39,760
I will say this should be used as a last resort, and I'll explain at the end why,

211
00:21:40,560 --> 00:21:45,680
but it can be done. So say, for example, you have this teapot scene here, and you can see that in

212
00:21:45,680 --> 00:21:51,840
the background there, you've got a lot of grainy noise. Okay. Well, if you were to clamp it, you

213
00:21:51,840 --> 00:21:58,240
can see that it goes away immediately. So this is without clamping, and then this is with. Okay,

214
00:21:58,240 --> 00:22:04,160
big change. So that's, that's going to save you a lot of time because you don't have to use as higher

215
00:22:04,880 --> 00:22:09,680
a sample amount. So that's a huge improvement there. Now, again, that is where you can find it,

216
00:22:09,680 --> 00:22:17,600
the clamp direct and indirect. However, I use it as a last resort. So to me, I use it like a get

217
00:22:17,600 --> 00:22:23,200
out of jail free card. If nothing else works, that's when I do the clamping. And the reason I

218
00:22:23,200 --> 00:22:28,480
don't use it all the time is that by clamping, it's going to bring down the values of, yes,

219
00:22:28,480 --> 00:22:33,200
the fireflies in the background, it'll clamp those values down, but it will also clamp down every

220
00:22:33,200 --> 00:22:38,160
other value in your scene. So you can see with this teapot here, difference between them, I'm

221
00:22:38,160 --> 00:22:44,160
losing some brightness in the rim there, because when I clamped it, I had to, I had to get rid of

222
00:22:44,160 --> 00:22:48,960
some of that brightness in the teapot, which I didn't want to do, but I had no choice. So that is

223
00:22:48,960 --> 00:22:57,280
something to keep in mind. Just keep it in mind. Generally, also zero is turned off. And then the

224
00:22:57,360 --> 00:23:03,600
higher the value, the better, because the higher the value, it's going to allow more light values

225
00:23:03,600 --> 00:23:08,080
to get through. And then you just turn it down gradually and see when the fireflies disappear.

226
00:23:09,040 --> 00:23:13,520
And generally speaking, you only want to use indirect, not direct, but yeah, it's up to you. So

227
00:23:13,520 --> 00:23:17,600
like if you have like light shining in on the floor, that's a big part of your scene. If you

228
00:23:17,600 --> 00:23:22,400
just clamped it, you're going to lose all that brightness in the, in the floor. So that's why

229
00:23:22,480 --> 00:23:31,440
use it sparingly. Number 10, speaking of fireflies, caustics, the largest cause of them. So caustics,

230
00:23:31,440 --> 00:23:36,160
for those who don't know, are like if you've got a glass of water on a table, the light shines

231
00:23:36,160 --> 00:23:42,080
through it, you see that weird little like light pattern that appears on the table. That's refractive

232
00:23:42,080 --> 00:23:47,600
caustics. You can also have reflective caustics, which is when light bounces off a surface onto

233
00:23:47,600 --> 00:23:52,960
another surface. And it creates like an interesting light pattern. So those are two different types

234
00:23:52,960 --> 00:24:00,960
of caustics. And they are very processor intensive for, for a renderer, right? And they often cause

235
00:24:00,960 --> 00:24:05,440
more problems than they're worth. So there is two little checkboxes in your render settings,

236
00:24:05,440 --> 00:24:10,160
enabling you to turn them off. And sometimes turning them off can save you a lot of time.

237
00:24:10,160 --> 00:24:15,760
So for example, this is an image of a glass of water on a table or floor, I guess,

238
00:24:15,760 --> 00:24:21,840
that's a big glass of water, let's be honest. But you can see there, you've got that nice

239
00:24:21,840 --> 00:24:26,800
light shadow on the ground there. But if I was to turn it off, you can see that there's no light

240
00:24:26,800 --> 00:24:31,520
shadow. However, the render times were a lot faster. So this is the difference between the two

241
00:24:31,520 --> 00:24:37,120
there, 31% faster without the caustics. However, you could argue that the whole point of this scene

242
00:24:37,120 --> 00:24:41,040
is to see the light shining through the glass. So you would obviously want to leave it on.

243
00:24:41,040 --> 00:24:46,800
But honestly, for a lot of scenes, it's just, it's more trouble than it's worth. And for probably

244
00:24:46,800 --> 00:24:52,880
95% of all my renders I've ever done, I just leave it turned off because it's just so commonly the

245
00:24:52,880 --> 00:24:57,760
cause for those fireflies to appear in your scene. I just don't like it. And I just, I don't see the

246
00:24:57,760 --> 00:25:03,760
point in most of the time. So I usually leave it turned off. But there you go. Okay. So number

247
00:25:03,760 --> 00:25:10,960
11, let's talk about object instancing. What is object instancing? So say you have one tree

248
00:25:10,960 --> 00:25:15,600
like this, right? And you want to make two trees. So you take that tree, you hit shift D,

249
00:25:16,320 --> 00:25:22,480
and you duplicate it. Now you have two trees. However, as well as two trees, you've also doubled

250
00:25:22,480 --> 00:25:27,200
up on the amount of memory you've used, and your render times as well, because it has to

251
00:25:27,200 --> 00:25:34,400
now cache that mesh, essentially. So by duplicating it, I have doubled the amount of information in

252
00:25:34,400 --> 00:25:40,720
the scene. Not so great, especially when they are an identical tree. So what you can do is you can

253
00:25:40,720 --> 00:25:47,600
use object instancing so that they share the same object data. So for example, with this, with this

254
00:25:47,600 --> 00:25:54,320
leaves here selected, if I select these other leaves, shift select, then hit Ctrl L here underneath

255
00:25:54,320 --> 00:26:02,400
make links, if I select object data. Now up here in the object data panel, you can see that next to

256
00:26:02,400 --> 00:26:08,480
the object, there is now a two number next to it. Because there are now two objects using that same

257
00:26:08,480 --> 00:26:13,600
object data. And you'll know that they're connected because if you were to edit one of the meshes,

258
00:26:13,600 --> 00:26:19,760
like say make that all the way out there, then you can see that they both have that change. Okay.

259
00:26:20,720 --> 00:26:26,960
But you say okay. But I've got a number of different objects here. Okay, I've got I've got tree branches,

260
00:26:26,960 --> 00:26:30,720
I've got a bunch of different stuff going on. I don't want to have to do that every time I duplicate

261
00:26:30,720 --> 00:26:37,120
something. Well, if you want to duplicate something, but you want to keep that object information,

262
00:26:37,120 --> 00:26:44,400
if you use alt D, alt D instead of shift D, the same thing happens, you've duplicated the tree.

263
00:26:44,400 --> 00:26:50,000
However, it's automatically made them share the same object data. So this means a lot for

264
00:26:50,000 --> 00:26:54,720
your final render. So this is very simple scene with a bunch of trees on it. And this is with

265
00:26:54,720 --> 00:27:00,800
them set to single users, meaning I duplicated them the wrong way, I did shift D instead of alt D.

266
00:27:00,800 --> 00:27:07,040
Okay, they're all spread out there. Okay, you can see that the render times two minutes 42 seconds

267
00:27:07,040 --> 00:27:13,760
and six gigabytes of RAM, which is incredible amount. However, if it's instanced, I have the render

268
00:27:13,760 --> 00:27:21,200
time. And I'm more than I decrease the memory used by 100 times almost, just by using instances

269
00:27:21,200 --> 00:27:28,880
instead of actual like, single objects for each one. So huge savings there. And I'm ashamed to

270
00:27:28,880 --> 00:27:34,160
say it took me like six years of using blender before I even realized that object instances were

271
00:27:34,160 --> 00:27:38,320
a thing. So don't feel bad if this is the first time you're finding out about it. I'm hoping it's

272
00:27:38,320 --> 00:27:43,840
news to a few of you out there. So use that and you'll save a lot of render time and memory,

273
00:27:43,840 --> 00:27:49,280
which means that you more likely you can render it on your graphics card. So anyway, there you go.

274
00:27:49,280 --> 00:27:56,640
Cool. Now let's talk about adaptive subdivision. Sounds technical. Well, this was something that

275
00:27:56,640 --> 00:28:02,080
again is a very new feature. It only came out, I think in the last release or two. But what it

276
00:28:02,080 --> 00:28:07,120
allows you to do is say you have an object, a scene like this where there's a lot of depth

277
00:28:07,680 --> 00:28:10,800
in your scene. So you've got stuff that's in the foreground, you've got stuff that's in the

278
00:28:10,800 --> 00:28:16,160
background. So a lot of nature scenes, interiors, all that kind of stuff, they have this going on.

279
00:28:16,160 --> 00:28:20,800
Well, the detail that you need to see in the foreground is different to the amount of detail

280
00:28:20,800 --> 00:28:25,360
you need to see in the background. The background, you can get away with very low poly objects,

281
00:28:25,360 --> 00:28:30,640
but in the foreground, you want to have higher poly objects. So adaptive subdivision allows

282
00:28:30,640 --> 00:28:36,800
you to do that. You just check one box in your modifier settings there to use the adaptive

283
00:28:36,800 --> 00:28:43,360
subdivision. And now it will subdivide it depending on how close it is or how far it is

284
00:28:43,360 --> 00:28:48,960
from the camera. And that has big savings for your render times. So check this out.

285
00:28:48,960 --> 00:28:55,200
This is where it turned off. Render is in 21 minutes, uses 12 gigabytes of memory. Now,

286
00:28:55,760 --> 00:29:01,440
with it enabled, it's 14 minutes and it's used a fraction of the amount of memory.

287
00:29:02,480 --> 00:29:06,080
Huge amounts of saving there. So this is why I was so excited when it came out.

288
00:29:06,640 --> 00:29:10,800
I made a whole tutorial on it, by the way, if you want to see it, it's in the description.

289
00:29:10,800 --> 00:29:15,600
You can check it out. But it's such a huge feature. So yeah, it's really important. So

290
00:29:15,600 --> 00:29:19,680
especially for nature scenes, do make sure that you make use of this new cool feature.

291
00:29:20,800 --> 00:29:28,000
Number 13, remove alpha transparency. So this is fairly scene specific now we're getting into.

292
00:29:28,960 --> 00:29:34,480
But this is a big one. So what is alpha transparency? So this is when, particularly when

293
00:29:34,480 --> 00:29:41,200
you're making trees or plants or anything like that, sometimes you want to have a leaf and

294
00:29:41,200 --> 00:29:46,320
the leaf maybe has like interesting little bits on the like frilly bits on the outside there.

295
00:29:46,320 --> 00:29:50,720
And you want to make sure that it has that frilly bit in the render. So you can actually use

296
00:29:50,720 --> 00:29:56,720
the alpha channel of the leaf so that it has that nice frilly pattern there.

297
00:29:57,840 --> 00:30:01,520
As opposed to if you were to just model around it, you know, in a blocky shape,

298
00:30:01,520 --> 00:30:05,760
you wouldn't get that pattern there. So it looks nicer with alpha transparency.

299
00:30:05,760 --> 00:30:12,400
However, you pay for it in render times significantly. So here is a tree with alpha

300
00:30:12,400 --> 00:30:18,800
transparency, it took 29 minutes to render. Without alpha transparency, the blocky method,

301
00:30:18,800 --> 00:30:25,360
it's 16 minutes to render almost half the render time. And honestly, there is very,

302
00:30:25,360 --> 00:30:30,160
very little difference between them in the in the final render. You can actually see like a

303
00:30:30,160 --> 00:30:34,640
bright green outline there. But that's only because I think it was just as an example on

304
00:30:34,640 --> 00:30:39,200
this render to show you where it is. But you shouldn't see that if you've modeled this correctly.

305
00:30:39,760 --> 00:30:44,480
If you're if you're making a tree, I I'm ashamed to say I didn't even realize this and I was making

306
00:30:44,480 --> 00:30:48,880
trees for ages. I thought that using alpha transparency was the way to go because it makes

307
00:30:48,880 --> 00:30:53,200
a better looking leaf. And I didn't realize it was adding anything to the render times,

308
00:30:53,200 --> 00:30:58,960
but significant amounts. So just crazy. So make sure that if you're making a tree or a plant,

309
00:30:58,960 --> 00:31:04,560
that you are using the blocky leaf shape. And don't worry about the alpha transparency because

310
00:31:04,560 --> 00:31:11,520
you'll pay for it. It's just too expensive. So forget it. Alright, number 14, reduce the strand

311
00:31:11,520 --> 00:31:19,360
count. So again, very niche depends on your scene. But strands, basically, it's the particles. So it

312
00:31:19,360 --> 00:31:25,680
could be grass, it could be, what could it be, could be hair on a character's head, or it could be

313
00:31:25,680 --> 00:31:32,480
rug on a lounge room floor. It's a very expensive thing to render all that every single one of

314
00:31:32,480 --> 00:31:38,160
those particles. So you pay for it. So this is with 145,000 particles with five children's

315
00:31:38,160 --> 00:31:46,960
strands for each 36 minutes. 65,000, however, is 26 minutes. So there's a big difference between

316
00:31:46,960 --> 00:31:52,080
that. And you know, you might think, you know, maybe it's not that bad, I might go with the extra,

317
00:31:52,080 --> 00:31:58,720
you know, 145. And that's fine. You can do that. But just know that the more strands you add into it,

318
00:31:58,720 --> 00:32:02,320
the longer you're going to be paying for it. A lot of people don't realize that they try and use like

319
00:32:02,320 --> 00:32:08,480
a full on million particle ground or something like that. And then wonder why they can't render.

320
00:32:08,480 --> 00:32:13,120
So just know it's a very intensive task. I'm gonna get another drink here. Gosh.

321
00:32:13,280 --> 00:32:23,200
Number 15, coming to the end. Remove volumetrics. Volumetrics. What are volumetrics? Well,

322
00:32:23,200 --> 00:32:27,760
you might already know. But it's like fog. It's when the light shines through something,

323
00:32:27,760 --> 00:32:33,600
or it's just fog in a scene, right? So this was a new feature, well, new ish two or three years ago,

324
00:32:33,600 --> 00:32:39,520
they added it, but you can now render volumetrics, which is very, very cool. It's also very, very

325
00:32:39,600 --> 00:32:46,080
expensive in terms of rendering. So here's a scene with volumetrics, very cool scene. And here's it

326
00:32:46,080 --> 00:32:50,640
without volumetrics. Obviously with looks a lot nicer. And that was actually the whole point of

327
00:32:50,640 --> 00:32:57,440
this scene was to show off the volumetrics. But you can see that it does add significant amounts to

328
00:32:57,440 --> 00:33:05,840
the render time, about 40% almost extra. And it looks a lot looks a lot grainier as well. Maybe

329
00:33:05,840 --> 00:33:11,120
my throat is as well. So you have to you have to be aware, like when you're building a scene,

330
00:33:11,120 --> 00:33:15,760
know that when you if you're just going to add some fog or whatever, if it's a tiny little bit

331
00:33:15,760 --> 00:33:19,600
of fog, like do you really need it? Because you're going to be paying for it with your render time.

332
00:33:19,600 --> 00:33:24,800
So use it when necessary. Sometimes for this scene, it makes a lot of sense. But if you're

333
00:33:24,800 --> 00:33:31,600
seeing just consider it. Okay. So number 16, speaking of things to cut, you can also cut

334
00:33:31,600 --> 00:33:37,760
the SSS, which is subsurface scattering. So subsurface scattering is something that you might

335
00:33:37,760 --> 00:33:42,480
have seen. If you hold your hand up to the light, or if you're talking to somebody in the sunlights

336
00:33:42,480 --> 00:33:48,720
behind them, you see it through their ears. But it's light as it's traversing through an object,

337
00:33:48,720 --> 00:33:53,360
it will shine through on the opposite side. That's called a subsurface scattering.

338
00:33:54,560 --> 00:33:59,600
And there is a special shader for that in your node settings. So yeah, basically, if you're

339
00:33:59,600 --> 00:34:04,560
making a character, that's really the really the only time you use it. Another example might be

340
00:34:04,560 --> 00:34:09,520
food, like a glass of milk or something, you can sometimes get it there, but mostly just characters.

341
00:34:11,120 --> 00:34:21,520
Yikes. Sintel the sequel. Sintel, my precious. You forget how good hair looks until you don't

342
00:34:21,520 --> 00:34:28,080
have it anymore, right? I'm sure a lot of men have realized that. With SSS, you can see it

343
00:34:28,080 --> 00:34:34,480
renders in four and a half minutes. But if you use no SSS at all, it's a fraction of the time. So

344
00:34:34,480 --> 00:34:41,040
it's a very expensive shader to use. So I would agree that it does actually look better with

345
00:34:41,040 --> 00:34:45,760
subsurface scattering. If you don't use it for a character, the skin sort of looks waxy. No,

346
00:34:45,760 --> 00:34:51,120
not waxy. It looks like like hard concrete or something like you really need some light to

347
00:34:51,120 --> 00:34:57,120
be passing through it. So yeah, I would say you do need to use it in this case. It is a lot to

348
00:34:57,120 --> 00:35:01,760
pay for those. So you know, you know, when when useful, you can use it. Otherwise, I just don't,

349
00:35:01,760 --> 00:35:12,160
right? Number 17. Enable MIS. What is MIS? You might ask. It looks like MI5, but it is

350
00:35:12,720 --> 00:35:18,000
not the same. Multiple important sampling is what it stands for. It's in the world panel,

351
00:35:18,000 --> 00:35:24,400
right down there, little checkbox sort of hidden there. And there it is. What does it do? Well,

352
00:35:24,480 --> 00:35:29,600
if it's turned off, it might, your scene might look like this. If it's turned on,

353
00:35:29,600 --> 00:35:35,280
your scene might look like this. Now this is really only applicable if you have

354
00:35:36,560 --> 00:35:42,880
lit your scene using an HDR environment light. Because I believe what it's doing is it's taking

355
00:35:42,880 --> 00:35:48,000
it from, you know, an HDR with all its thousands of pixels and trying to find the light values of

356
00:35:48,000 --> 00:35:53,440
each one. And I think when you enable it, it tries to average it. So you don't get that noisy

357
00:35:53,440 --> 00:35:58,640
some parts dark, some parts bright sort of mess going on. It tries to average it, I believe.

358
00:35:58,640 --> 00:36:06,080
Don't quote me on that. But it has a huge, huge impact. And yeah, I believe it's now turned on

359
00:36:06,080 --> 00:36:11,680
by default, but it used to be like this hidden secret that some artists knew about. And when

360
00:36:11,680 --> 00:36:16,320
they turned it on, they were like, Whoa, my scene looks so much better. But now I think it's turned

361
00:36:16,320 --> 00:36:20,400
on by default. So it's not as cool anymore. You can't impress too many people with it.

362
00:36:20,400 --> 00:36:26,240
But for a while you could. So if you if you are rendering with an HDR,

363
00:36:26,240 --> 00:36:29,760
got to make sure that that one is checked. Otherwise, it's going to look awful.

364
00:36:31,040 --> 00:36:35,360
I mean, basically, it looks broken if it's if it's not enabled. So that's I mean,

365
00:36:35,360 --> 00:36:38,400
it really shouldn't be called a performance improvement. It should be called like,

366
00:36:40,160 --> 00:36:45,840
is it right? Yes or no. With it checked, it is correct. So anyway,

367
00:36:45,840 --> 00:36:52,800
finally, the last one to leave on because there was 18 cycles improvements, we're going to talk

368
00:36:52,800 --> 00:36:58,640
about these are the small performance improvements which you can find in your render panel underneath

369
00:36:58,640 --> 00:37:06,720
performance. So these are the use spatial splits, the use air BBH use, sorry, save buffers and the

370
00:37:06,720 --> 00:37:11,520
persistent images. Now, here's the thing, maybe you might have noticed this as I was cycling

371
00:37:11,520 --> 00:37:18,400
through it. But in these examples, I didn't actually find these checkboxes to actually

372
00:37:18,400 --> 00:37:23,760
make an impact. The first time we ran these tests, we were able to see an improvement.

373
00:37:23,760 --> 00:37:27,280
We did it for a different scene and we rendered like one frame and then we stopped in another frame.

374
00:37:28,160 --> 00:37:33,040
And we were able to see an improvement. However, I and then I recorded the start of this video

375
00:37:33,040 --> 00:37:39,280
and I call it the 18, you know, ways to improve cycles or whatever. And now I then I did some

376
00:37:39,280 --> 00:37:45,120
retests halfway through, you know, doing this tutorial, and then I wasn't able to reproduce it.

377
00:37:45,120 --> 00:37:52,480
My point being is that these small performance improvements supposedly are supposed to improve

378
00:37:53,520 --> 00:37:58,640
the performance of cycles, but I haven't actually found that to be the case. I found it to pretty

379
00:37:58,640 --> 00:38:03,760
well stay the same whether their boxes are checked or whether they're not checked spatial splits,

380
00:38:03,760 --> 00:38:10,960
I've been told as opposed to increase your memory slightly with a decrease in render speed,

381
00:38:10,960 --> 00:38:16,240
I didn't find that I found that render speed was about the same. By the way, if you see like two

382
00:38:16,240 --> 00:38:22,640
seconds plus one or two, whatever, factor that as zero improvement or change because the system,

383
00:38:22,640 --> 00:38:28,720
if you re-render, I think twice without changing anything, it can usually come within a hair of

384
00:38:28,720 --> 00:38:36,160
that anyway. So it's basically the same, no difference. Use hair BVH. Maybe five seconds

385
00:38:36,160 --> 00:38:41,920
faster with more memory. It was actually supposed to be when you check it, use hair BVH, it's supposed

386
00:38:41,920 --> 00:38:48,320
to use less memory. So I found it to be the opposite way with that one. Not great. But I did, I spoke

387
00:38:48,320 --> 00:38:56,160
with Andy Karalsik on Twitter and he said from he heard from Shurgay that this is really only

388
00:38:56,240 --> 00:39:01,440
impact, it really only impacts it if you've got motion blur. So say you had grass blowing in the

389
00:39:01,440 --> 00:39:08,880
wind like that, and there was motion blur. Oh, for Agent 327, his hair was moving or whatever.

390
00:39:08,880 --> 00:39:14,240
And apparently that really, really taxed the render times. So this was supposed to solve that.

391
00:39:15,200 --> 00:39:21,040
Or it should solve that, right? But I wasn't able to replicate it. Sorry to say I really,

392
00:39:21,040 --> 00:39:28,720
yeah, I wasn't able to do it. Save buffers. I've since learned Andy told me that this is actually

393
00:39:28,720 --> 00:39:33,520
was really only applicable to the render, the Blender internal rendering engine, and that cycles

394
00:39:33,520 --> 00:39:38,240
it won't make much of a difference, which explains why I wasn't able to get much of a difference from

395
00:39:38,240 --> 00:39:45,520
it. It was supposed to case your image textures somewhere so that it's then able to reference

396
00:39:45,520 --> 00:39:51,200
them faster for your extra frames then on, I didn't find any improvement. And then we've got

397
00:39:51,200 --> 00:39:56,720
persistent images, which I think also might be the same, like it doesn't apply to cycles,

398
00:39:56,720 --> 00:40:03,280
I could be wrong on that. But I wasn't able to find any improvements. So yeah, so these,

399
00:40:04,960 --> 00:40:10,800
I mean, I feel bad ending on such a low note, like I wasn't able to replicate this stuff. But I do

400
00:40:11,440 --> 00:40:15,760
include it because it looks so important. And you see this stuff in the performance settings.

401
00:40:15,760 --> 00:40:19,680
And you've probably wondered, like I've wondered, what do these buttons do? Should I leave them

402
00:40:19,680 --> 00:40:24,560
checked checked on checked off? Does it am I paying for render times because it's turned on or because

403
00:40:24,560 --> 00:40:31,280
it's turned off? Honestly, in my opinion, it doesn't make any difference. Probably nine times

404
00:40:31,280 --> 00:40:34,720
out of 10 the scene that you're rendering is not going to make any difference. When you're doing

405
00:40:34,720 --> 00:40:40,560
a production, like they were doing for Agent 327, you probably come across like one or two

406
00:40:40,640 --> 00:40:47,200
frames where it just crashes, or you get horrendously long render times for this specific object. And

407
00:40:47,200 --> 00:40:52,480
that's where having a guy like sure gay, the developer on your team to go, Oh, you've got to

408
00:40:52,480 --> 00:40:57,200
check the head be the age box, right? That's when it's applicable. But I think for the everyday

409
00:40:57,200 --> 00:41:02,080
artist, I mean, this should really be hidden almost in like the user preferences. Because it's

410
00:41:02,080 --> 00:41:08,320
that I feel like it doesn't make that big of a difference to anyone. In my opinion, that's just

411
00:41:08,400 --> 00:41:16,160
my opinion. But yeah. Alright, we discussed a lot. Let's round it off. We discussed a lot in

412
00:41:17,360 --> 00:41:23,360
this, this little video. The summary is on blender guru.com. You can click the link below.

413
00:41:23,360 --> 00:41:30,160
That's what it says behind my shirt and microphone. Link is below. So I'm going to put the whole

414
00:41:30,160 --> 00:41:33,600
summary up there with images and everything. So you can just reference it in the future. You

415
00:41:33,600 --> 00:41:39,040
don't have to listen to my voice all over again. You can just reference it on there. Now, if you

416
00:41:39,040 --> 00:41:45,280
look at this and you think, boy, Andrew, that sure is a lot for the user to take in like why don't

417
00:41:45,920 --> 00:41:52,960
those stupid blender developers pull their head out and turn this stuff on by default or make it

418
00:41:52,960 --> 00:41:59,200
automatic or something like that. Here's why you a lot of these things you might seem like a no

419
00:41:59,200 --> 00:42:06,240
brainer like, Hey, the everybody should be using GPU. Well, not everybody has a computer that supports

420
00:42:06,240 --> 00:42:11,680
GPU. A lot of features don't work with GPU. So having it on by default isn't a good idea. Other

421
00:42:11,680 --> 00:42:16,880
things like portals, how would blender know whether you've got an interior scene or an exterior scene

422
00:42:16,880 --> 00:42:23,840
where the lights coming from, etc. Some of these things you just have to it's when you're building

423
00:42:23,840 --> 00:42:28,560
the scene. It's only the artist that's building it that can know that this particular thing is

424
00:42:29,920 --> 00:42:35,120
useful. Yes, it's true. Some of this stuff you would never know unless somebody told you. But I

425
00:42:35,120 --> 00:42:41,280
think that's part that comes with the territory. Some of it is becoming automatic. Like for example,

426
00:42:41,280 --> 00:42:49,840
use optimal tile size. Tom told me that that's going to be in 2.8 or 2.79. But yeah, that's going

427
00:42:49,840 --> 00:42:54,720
to be automatic. So hopefully you shouldn't have to touch that in the future. And there's other

428
00:42:54,720 --> 00:42:59,040
stuff like use denoising. You could argue that should be an automatic feature, but you could also

429
00:42:59,600 --> 00:43:05,200
argue the other way that it blows things in, you know, so you might not not every artist needs it

430
00:43:05,200 --> 00:43:10,400
on by default. So the whole like default argument isn't as clear cut as it sounds. So some of this

431
00:43:10,400 --> 00:43:14,960
stuff you do just have to know. So that's why I'm making this video because it's a common question

432
00:43:14,960 --> 00:43:19,280
a lot of people have. How do you improve render times and some of the stuff you just don't know

433
00:43:19,280 --> 00:43:24,560
until you find it. So and the other thing is, is that a lot of these things here you don't have

434
00:43:24,560 --> 00:43:31,040
to do every time you make something. It's just like some of this stuff like volumetrics, sss,

435
00:43:32,560 --> 00:43:36,960
object interesting, all that stuff, that stuff that you once you know it now, when you make a

436
00:43:36,960 --> 00:43:41,200
scene in the future, you'll know like, oh, if I add fog to this, I'm going to pay for that

437
00:43:41,200 --> 00:43:46,800
dealing. So I might not do that or something like that. Like you don't have to go through a checklist

438
00:43:46,800 --> 00:43:52,480
every time you render a scene, or maybe you'd want to do that anyway. But yeah, you can just

439
00:43:52,480 --> 00:43:58,560
yeah, know about it. So as an example, this is the scene that I started with on the on the first

440
00:43:58,560 --> 00:44:05,040
slide. Let's talk about let's say I finished this scene. And now I want to do an animation,

441
00:44:05,040 --> 00:44:10,160
I want to make the camera fly through the scene. Now, if I was just doing a still

442
00:44:10,880 --> 00:44:19,520
I probably wouldn't worry about doing all 18 of these. I would say, you know, if I can render it,

443
00:44:19,520 --> 00:44:22,640
who cares? I'm just going to render it overnight. I'm going to come back. It's going to be fine.

444
00:44:22,640 --> 00:44:28,000
If I'm doing an animation, it could mean the difference between a two month long render

445
00:44:28,000 --> 00:44:36,000
and a five day render or a five hour render. I don't know. Animations are so like it's just

446
00:44:36,080 --> 00:44:42,320
obviously it's multiplied exponentially. What is it exponential? Whatever the performance

447
00:44:42,320 --> 00:44:47,600
improvements you can make, like even down to fractions of a second can have big impacts over

448
00:44:47,600 --> 00:44:52,400
a you know, feature length film. So for something like this, I would go through my checklist and

449
00:44:52,400 --> 00:44:56,800
I would say, All right, looking at my scene here, can I reduce the light bounces? Yes,

450
00:44:56,800 --> 00:45:02,480
doesn't need portals. I will make sure I use my GPU if possible, make sure I'm using the optimal

451
00:45:02,480 --> 00:45:06,000
tile size. I don't worry. I need to worry about clamping or reducing the samples because they're

452
00:45:06,000 --> 00:45:10,800
already optimized denoising. Yes, I want to make sure that I smooth it out instead of, you know,

453
00:45:10,800 --> 00:45:15,680
having heaps and heaps of samples. Make sure I'm definitely losing using the latest plan

454
00:45:15,680 --> 00:45:21,680
diversion. That's just a no brainer object. Instancing absolutely. If I had for all those

455
00:45:21,680 --> 00:45:27,040
duplicate cherry blossom trees there, if each one of those they were individual single user

456
00:45:27,040 --> 00:45:32,080
objects, I probably wouldn't even be able to render it. It would be so overblown in the memory.

457
00:45:32,160 --> 00:45:36,880
So definitely make sure I'm using that adaptive sub div definitely for the ground and rocks and

458
00:45:36,880 --> 00:45:41,440
things like that. I want to make sure I'm using that offer transparency. Absolutely make sure

459
00:45:41,440 --> 00:45:45,840
that's eliminated from all my nature objects because that's a very common scene where you would see

460
00:45:45,840 --> 00:45:53,760
it strand count. Make sure I'm using the lowest amount of grass possible. Volumetrics. That's

461
00:45:53,760 --> 00:45:57,920
here's an example of like volumetrics like you there's fog on those mountains there.

462
00:45:58,480 --> 00:46:04,240
Do I really need true volumetric fog or can I get away with doing it in the compositor like a

463
00:46:04,240 --> 00:46:09,040
fakery sort of thing where it's not entirely accurate but I wouldn't be paying for it as

464
00:46:09,040 --> 00:46:15,200
dearly. Doesn't need SSI because it's hasn't got any people in it basically. MSI turned on. Yes,

465
00:46:15,200 --> 00:46:19,920
if I'm using an HDR and those small performance improvements, right? That's that's sort of the

466
00:46:19,920 --> 00:46:24,880
checklist that I would run through as an artist if I was doing an animation. Not every single scene

467
00:46:24,880 --> 00:46:30,960
that I make I go through this. It's not like you know a flight manifest you have to go through all

468
00:46:30,960 --> 00:46:35,200
the checklists before you take off or whatever. It's only if you absolutely need to.

469
00:46:37,600 --> 00:46:42,640
Give me a like. No, thank you for watching essentially. This is the end. If you found this

470
00:46:42,640 --> 00:46:48,560
useful do give it a like and I do want to end by saying thank you to these people. Mason Menzies

471
00:46:48,560 --> 00:46:54,400
actually did a whole bunch of the tests basically most of the tests that you just saw a painful

472
00:46:54,400 --> 00:47:00,240
job rendering for two hours coming back rendering again. But he did that so thank you to Mason,

473
00:47:00,240 --> 00:47:05,520
the Blender Foundation for providing the CC source files, Mike Pan, Christoph Souche,

474
00:47:06,800 --> 00:47:13,360
Nick Brunner and E-Marage provided some of those render time test benchmark scenes

475
00:47:13,360 --> 00:47:20,480
and then Rob Garlington for the artwork for this tutorial. But that's it. Thank you for watching.

476
00:47:20,480 --> 00:47:26,640
Hope it was useful and send it to anyone who's got terrible render times.

477
00:47:27,920 --> 00:47:30,000
Thank you for watching. See you next time. Bye.

