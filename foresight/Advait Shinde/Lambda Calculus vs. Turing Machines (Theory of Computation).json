{"text": " All right, let's jump in. Cool, introduction to the theory of computation. I have been more excited about this talk than any other talk that I've given in my entire life. So forget about the company vision. We're talking about the theory of computing. I learned, I was introduced to some of this stuff when I was an undergrad at UCLA about 10 years ago and I didn't understand it. And it was kind of presented as like, here's the sort of tablets from the mountain and learn and memorize them and this is why computing is. And it took me 10 years and I finally understand it. And it's so mind blowing that I wanted to talk to you guys about it. So this is what it's about. The subtext of this is it's a tale of two towers and this will make sense as we get into it. But the preface is an intro to axiomatic thinking. This is a kind of strange way of thinking if you guys haven't been introduced to formal math. It's not, it's strange. Let's just jump in. So two plus three times seven, this is I think 23. Why do we know the answer to this? And I asked this question and I encourage you guys to take the perspective as if you were like an alien who has never really seen symbols like this. Or perhaps you didn't even understand the concept of multiplication or addition. How do you know what to do over here? So let's just step through it. The first thing that you would do is three times seven is 21 and two plus 21 is 23. So what do we have over here? We have these symbols called numbers. We have these things called operators. And then we have this interesting thing over here where we can substitute an operator for its equivalent form. So three times seven is the same thing as 21. Here we've kind of made that substitution. And then these operators also have precedents. Like we knew to do three times seven first because of all of the middle school math homework that we did. And then we have this final reduced form. So in theory, each of these levels are equal to each other because we've just kind of made substitutions along the way. And what I'm trying to get at is we have these collections of rules that we kind of take for granted that we never really thought too much about. That if you really examine like across representing an operation or this little like two and one like right next to each other represent 21 these are really kind of non-trivial concepts. So let's dig into some of these. The first idea is that three times seven is actually seven plus seven plus seven. And so this is to say that the rule of multiplication is actually defined in terms of addition. So this is interesting. If some rules are defined in terms of each other we can say that the rule is kind of redundant. So in theory, like we don't really need multiplication in math because every time we multiply we can just add instead. And therefore multiplication hasn't really given us any more expressive power than addition already provides for us, right? So if some rules are redundant then maybe we can ask the question of like what rules are non-redundant? Or really what is the minimum subset of rules necessary to describe all of math? And so we can call this minimum subset of rules axioms and this comes from the word Greek axioma that which is self-evident. And then we can call all of the other derived rules theorems which is like a proposition to be proved. And so the question is what are the axioms for math? The minimum non-redundant set of rules to define all of math. This is a question that nobody really thought about or nobody had a really compelling answer to until this guy came around. His name is Giuseppe Piano. He was an Italian mathematician. And in 1889, so a little over 100 years ago he put forth these axioms. There's nine of them. Only three of them are interesting. So bear with me for a moment and keep in mind like we're starting with a blank slate. So there's no numbers yet and we have to define what numbers are. So first we define the first number, which is zero. And so Piano says zero is a natural number. The next thing he does is define what equality is because we don't have that either, right? So for a thing x, x is equal to x. This is what equality is. This one is not very interesting either. If x equals y, y also equals x. If x equals y and y equals z, then x equals z. This is the transit property. If b is a natural number and a equals b, then a is also a natural number. So this is sort of saying we have this collection of things called natural numbers. Right now we only have one of them, zero. And if b is a natural number and a equals b, then a is also a natural number. So you have this like glue-like property of natural numbers. This is an interesting one. We define this function s such that s of n is a natural number. s is like a successor function. It's what it literally stands for. And so now we have a way of going from zero to producing the successor of zero with this function. So s of zero is the successor of zero and s of zero is also a natural number. Is everyone following? And I think the best way to go about this is to just immediately stop me if you guys have any questions because this is gonna get more and more complex. Sounds good? Great. m and n are equal to each other if and only if their successors are equal to each other. There's no n such that the successor of n equals zero. So here we're not going into negative numbers. We're just defining the natural numbers. So there's no successor for zero. Or zero is not the successor of anything. That's what this is saying. And then finally, the very last one, if k is a set such that zero is in k and if n is in k, it means that s and n is in k, then k contains every natural number. This is like the base case, zero is in k, then the inductive case, if n is in k, it means that s of n is in k and then therefore k contains all the natural numbers. So here they're saying there's no like loops. It's just like this directed graph that goes all the way out to infinity. Sound good? This is it. This is all you need to define all of math. So you'll notice we never define numbers besides zero. We just define the concept of zero, right? And yet we use these symbols like one and two and three and four and so on. And here I'm proposing the concept that one is actually just syntactic sugar for s of zero. Which is to say that these two forms are equal to each other and if we were more precise, we would actually prefer the form on the right, but it would be kind of annoying. And so we have this concept of one and then two is the successor of one and so on. Seven is actually s of s of s of zero. I think you guys get the idea, right? We haven't added any new information here, right? And in theory, when we do our math, we should prefer to reduce, if we were a piano, we would prefer to reduce the form all the way down into like this thing over here, but that's just too confusing. So we're okay with the syntactic sugar representation on the left. Sound good? Okay, so syntactic sugar is sort of convenience rules or symbols that we don't need to further reduce down into the primitive forms. So let's now define addition. So addition can be thought of as an operation that maps two natural numbers to another natural number, right? And the syntax is a plus b, so you guys know. And we just need two rules. The first is sort of the base case. a plus zero equals a, sort of obvious. This one you might have to pause and think about it a little bit. a plus the successor of b is equal to the successor of a plus b. So what we're doing over here is b without this little s in the wrapping, right? We're just kind of taking this s and wrapping it around the whole thing, right? And so the term on the right, b, is actually one less than the term of successor of b. So we're kind of going down. This will make sense in just a moment. I think let's go through an example. So three plus two, the rules up there are on the right. The first thing that we do is expand out our syntactic sugar. So we have s of s of s of zero plus s of s of zero, right? And now we need to apply one of our rules. Obviously, we can't apply this rule because it doesn't match. So we have to apply this rule, right? So a is in purple on the left or pink. And then we have s of b, b is this purple thing over here, equals s of a plus b, right? So s of a plus b. Do you guys see that substitution? And then we do that again. And then now we're in a form where we can apply rule number one, a plus zero equals just a by itself, right? And that's five. And now we can add. All right, so basically this is compelling because we didn't have the concept of addition in terms of the axioms. And we define the concept of addition as recursive incrementing, essentially. And now we have this property of addition, which we can use to define some other things. For example, we can define multiplication. a times zero equals zero, a times s of b equals a plus a times b. And it can work out that obviously intuitively that addition and multiplication are kinds of intrinsically related to each other. So we have the piano axioms, so then we built addition and then we built multiplication on top, right? And it's this type of thinking that I wanna really imprint in your minds. And here I'm inventing this new concept called axiom towers. And you can think of axiom towers as having a foundation, which is the axioms themselves. So in this case, the piano axioms. And then on top of that, we built addition. And then on top of that, we built multiplication. And then maybe we can build more stuff on top. And it turns out that the piano axioms are sufficient to basically describe like most of math. So from multiplication, you can kind of imagine that you can build division and from division or not from division necessarily, but you can imagine also you can represent the integers which are negative numbers from just the real numbers. We won't get into the proofs, but I'm sure you guys can kind of envision how this might be the case. And then once you have negative numbers, you can imagine defining rational numbers, which are just kind of, in the context of division, a rational number is just a numerator and a denominator. And then from rational numbers, you can maybe get to exponentials, which is just sort of repeated multiplication. And then from exponentials, you can get to irrational numbers, like the exponent of a fraction gets you irrational numbers. And then maybe you can build imaginary numbers and so on and so forth. And all of it is kind of stacked on top of just these core axioms at the very bottom. Sound good? Cool. This is gonna get interesting, I promise. All right, so the first idea is that the axioms are not divine, right? There's nothing special about them. In fact, when Piano first wrote his papers, he started off with one as like the root. He didn't start off with zero, but then mathematicians later said like, no, no, let's start with zero, it's better. So you can imagine starting off with one and say, you can imagine using like a predecessor function instead of like a successor function. But here I'm making a claim that some axiom towers are better than other axiom towers. Let's say more useful than other axiom towers. Like for example, Roman numerals are just horribly inconvenient at doing anything useful, like multiplication. And yet everything that you can do in regular numbers, you can also do in terms of Roman numerals. And so Roman numerals aren't like, they're just a different set of axioms that are somehow slightly less useful. All right, axiom towers don't have to correspond to reality. So Euclid was a Greek philosopher and he's sort of like the father of geometry. And way before Piano, he put forth the axioms for geometry and we call his flavor of geometry Euclidean geometry. And one of the axioms that he kind of put forth was that if you have two parallel lines, let's say like this Y right here, as well as like the Y axis, these are parallel to each other. So if two lines are parallel, then they stay parallel forever. They never intersect. That was one of his axioms. But it turns out that you can have these things called non-Euclidean geometries, which essentially forego that axiom. And the example is sort of like a globe where you have these vertical longitude lines or meridians. And the meridians are all parallel to each other. But as you see at the poles, they all kind of intersect. So a non-Euclidean geometry is one that foregoes this notion of like parallel lines don't intersect. And it turns out that there's all sorts of really interesting non-Euclidean spaces that you can imagine that don't at all correspond to reality. And so there's this whole sets of branches of mathematics that kind of conceptualize all sorts of different axioms that are unique and interesting and form this sort of logically coherent axiom tower on the basis of those axioms. And in many ways, those towers don't correspond at all to reality. And it's just sort of mathematicians having fun. Interesting idea. Okay, symbols. So we talked a bunch about symbols. It might be interesting to think of the symbols as sort of separate from the rules. But it turns out that if you really examine the situation, the symbols don't really make sense without the rules. And the rules can't really be expressed without symbols. And so symbols here are making the claim that they're kind of intrinsically related to each other, really two sides of the same coin. So this symbol, if you've done any sort of computing, 0x20 is the hexadecimal number 32, right? But it's also like, sorry, it's also the ASCII symbol for space, the space character. So whether you're interpreting the symbol in the context of hexadecimal math or this axiom tower of ASCII or Unicode, like the symbol has meaning only in the context of a particular like frame of reference, which is the axiom tower that you're interpreting the symbol in. And they're one and the same. You can't separate out these ideas. Another interesting example is DNA. So there's this like funny concept that DNA consists of these base pairs and that all of the human genome is sort of some ridiculously small amount of data. And it's just like claim that, therefore like life is not really that complex because there's really not much information in DNA. But if you really examine this question, DNA by itself is completely meaningless and useless without the corresponding like cellular machinery that's able to actually unpack it and read it and build actual life from it. So DNA and the thing that reads the DNA, they're intrinsically linked to each other. The symbols and the rules are one and the same. Here's an interesting philosophical claim. I think that math is actually discovered and not invented. And the analogy that I have is sort of a visualization of this axiom tower and the top levels of this axiom tower are kind of obscured. It's not exactly clear what they should be. And what you're doing as a mathematician is kind of like discovering consequences of having initial axioms. Sound good? Questions? All right. So recap, axioms are self-evident. They're taken as given. Theorems are derived from redundant rules. Axioms and theorems stack up together to build these things called axiom towers. And some symbols are actually just syntactic sugar. Symbols and rules are intrinsically related. And math is a discovery of the consequences of foundational axioms. And the axioms are arbitrary, but some axiom towers are more useful than others. All right. You guys are comfortable. We're gonna get to the exciting part. Computation. This is a graph of certain things that we kind of take for granted today, like running water and electric power over time. And here I wanna point out that in the 1930s, more people had electric power than running water. And that number was around 65, 70%. So you can imagine being in the 1930s, right? And at this point, algorithms had already existed, right? So way back in 2000 BC, Egyptians figured out how to multiply two numbers together. Babylonians figured out how to factorize things and find square roots. Euclid's algorithm, which is really cool, the same Euclid as geometry. He figured out how to get the greatest common factor between two numbers. And this algorithm is actually really beautiful if you've never seen it. It's called, I've actually never pronounced it, but I've read it, it's sieve or aerotostinese. It's a way to generate prime numbers. And Al-Quarizmi figured out how to solve linear equations and quadratic equations. And it turns out that the word algorithm actually comes from his name. So we have like hundreds or thousands of years of understanding of these things called algorithms, which really were kind of informal at the time. And you can kind of consider them as like sequences of instructions to follow to do something, right? But we didn't have like a precise axiomatic definition of computing in the way that Piano defined the axiomatic definition of mass, right? In the 30s. And so these guys pretty much at exactly the same time did that independently. Alan Turing created these things called Turing Machines. Alonzo Church created these things, this thing called Lambda Calculus. And Kurt Godel created these things called general recursive functions. So we're gonna ignore the last one and actually drill into these two, Turing Machines and Lambda Calculus. And the really, really cool thing is that these axiomatic systems are both reasonable and good definitions for computing, but they look very, very different from each other. So we're gonna talk about what they are. So Turing Machines. You can envision a Turing machine. So Alan Turing was thinking about, like you can kind of empathize with what he was doing. He was looking at all these algorithms that we have and he was trying to reduce like all of the algorithms down into their most principle like reduced forms, right? And then essentially use that as the base of an axiom tower and build higher level constructs on top of that, right? This was his goal. And so he envisioned this concept called a Turing machine. And a Turing machine starts off with this thing, which is like an infinitely long tape. And the tape is actually broken up into these things called cells. And in the cells, you can actually, like each cell can either be marked or unmarked. So here we have empty cells and the X's correspond to marked cells, right? And this is infinitely long. It goes on in both directions. And you have this thing called the head and the head can do some stuff. You can move it to the right. In every case, it's always pointing to a particular cell. You can move it to the left. You can mark the box that the head is pointing at. You can unmark the box. And if the box is marked, you go to end. We'll talk about go to end in just a moment. And if the box is unmarked, also go to end. These are all different instructions that you can provide to this like turning machine. And the execution of the turning machine, essentially, you start off with a blank tape and a list of instructions that you want this turning machine to execute. And the list of instructions are ordered from zero through N. And you execute the first instruction. And if it's an ordinary instruction, you execute the next instruction. And if it's one of these like jump instructions at the bottom, then if it tells you to jump, you go to the Nth instruction. Sound good? And basically Alan Turing showed that this model is sufficient for all of computation. Anything that can be computed can be computed with just these primitives. That's all it takes. Okay, so there is an actual virtual implementation of a Turing machine called brain flap. It's a technical term. And basically there's a few instructions. And it essentially you can imagine it as like a virtual Turing machine. And it has these instructions. You can move the head to the right. You can move the head to the left. This is slightly different than a Turing machine because the cells don't contain just like binary values of marked and unmarked. Instead, they contain numbers. And you can increment numbers and decrement numbers. And just integers, right? And then these characters, so the open bracket, like if the value at the head is zero, jump forward to the matching like closed bracket. And then the closed bracket is if the value at the head is non-zero, jump back to the matching open bracket. So here we've kind of defined our jumping behavior. And then this language also provides like functionality for input and output, which is something that Turing didn't necessarily require. But this makes the language a little bit more useful because you can have it do stuff like print out output. And every other character is ignored. So anything that's not this magenta color is basically ignored in this language. So this is the implementation of adding two numbers together. And if you squint, you can kind of see the recursive definition that Piano kind of described earlier, right? We'll actually go to a much clearer example. So in the beginning, you can imagine the head is pointing at cell C0 and we increment it twice. So now C0 has a value two. And then you move to the right to cell C1 and you increment it five times. So C1 has a value five, right? And then you start your loop. The first thing that you do is you go back to C0 and you add one to it. And then you go right to C1 and then you subtract one from it and you keep looping. And your loop will basically end. I can't think properly right now, but once C1 essentially reaches zero, then the loop will end and your program will terminate. And now you have this ability to add two numbers, C0 and C1, right? This is an algorithm for computing the Mandelbrot fractal set. If you guys haven't heard of this, it's just a really cool like fractal, I won't get into fractals, but basically this is a program, it prints out this, right? So just using our turning machine, we were able to now output like this fractal. Cool. So basically turning created an axiom tower for computing and an algorithm is computable if and only if it can be encoded as a turning machine. And Turing showed this before the existence of electrical computers. And he also showed this when he was 24 years old. If you guys have heard of the Turing Award, it's basically like the Nobel Prize for computer science and it's named after Alan Turing. So some observations, you need an infinite tape and you need a program, like which is a sequence of instructions to follow and you're constantly modifying the tape. So you can think of the tape as sort of like the state of your program and every instruction that you execute that modifies the tape is in theory kind of modifying the way that the program kind of unfolds itself, right? And the behavior of the program is changed with every single tape modification. And so therefore reasoning about the behavior of the program requires understanding the state of the tape at every moment of modification. And so you can imagine sort of debugging or turning machine as perhaps similar to debugging like an application where you kind of think about how the application's memory state changed over time and all of a sudden your ideal understanding of how it's supposed to change like differs from the way it actually changed and there's your bug. From here, Turing defined this concept called Turing completeness because you said that you can have other forms of computing. For example, you can imagine like different instruction sets for this Turing machine, right? And he basically said that an axiom tower that's sort of different than a Turing machine is called Turing complete if and only if it can be used to emulate a Turing machine. And if it can emulate a Turing machine, then it can compute anything that's computable. That sounds good. This concept of Turing completeness has now popped up. So it turns out that there's some interesting things that are Turing complete. If you guys have heard of Conway's Game of Life, it's this basically life simulator, emulator, I guess. And it's very simple. You have this grid of squares and each square corresponds to a living thing and it's either alive or dead. And at every step in time, there's some certain rules for allowing like whether in the next time step, the cell is alive or dead. And so it essentially, oops, let's see if we can get this to play. I won't get into the rules because they're not really relevant, but every kind of step in this animation is like the universe kind of unfolding according to the rules of Conway's Game of Life. And it turns out that the basic rules are sufficient to represent a Turing machine. And so Conway's Game of Life is Turing complete. And so any algorithm that's computable can be represented in Conway's Game of Life. Magic the Gathering is also Turing complete. So some researchers got together and they looked at some specific cards that allow you to place these like counters and they use the counters as a way to represent an actual Turing tape. And so just following the rules of Magic the Gathering, they're sufficiently complex enough that you can compute all of the prime numbers in the game. Microsoft PowerPoint is Turing complete. Obviously it has like macros and stuff, but here using only auto shape, hyperlink and transition. And this paper is hilarious. Given PowerPoint's versatility and cross-platform compatibility, some have asked whether any other applications are necessary at all, or if all computational tasks can be accomplished through PowerPoint. This research aims to definitively answer these questions in the affirmative through the creation of a PowerPoint Turing machine. Okay, we've talked about Turing machines. Now let's talk about Lambda calculus. So to me, when I first learned about Turing machines, I thought it was really kind of unintuitive that such a simple thing can be used to represent so much complexity. But then after really thinking about it, I realized that wait, the piano axioms are also very simple and we can get all of math from it. So it must follow that you can have simple computing axioms and that's the case. And I think for computer scientists and software engineers, this is sort of what we're in the business of doing. Like we take like simple building blocks and we compose them together to build complexity. And we have ways of reasoning about how these things combine together to build complexity. And we, it's sort of our job to make sure that the complexity that we build is actually founded and not buggy, let's say. So it turns out that there's another flavor or another axiom tower for computing that was invented basically or discovered exactly around the same time. And it was discovered by Alonzo Church and it's a thing called Lambda calculus. And the way, basically in Alonzo Church's original paper, he has a particular syntax for how he denotes Lambda calculus. And JavaScript also has its own syntax for declaring anonymous functions. And because most of us are more familiar with JavaScript, I'm gonna write both Alonzo Church's notation as well as the JavaScript notation to represent the same ideas. So the first idea that he introduced was, you can have variables. So here X is a variable. It's like a placeholder for a value. Second idea is you can have functions. And a function, this is on the left, Alonzo Church's definition or notation. And on the right, you have the ES6 equivalent syntax. This is just a function that takes in one parameter Y and has somebody M and M itself, itself another Lambda expression. So you have function definition. And then finally you have function application. So F of M, right? So calling function F with a particular M. So if in this case we call Y with some value, like everything inside the body of M gets replaced with whatever value we call it. You guys should be really familiar with this concept. And it turns out that this is all you need. And with just these three concepts, you can get something that's turned complete. And so this is really, really unintuitive. For me, it was way more unintuitive than the turning machine which felt like this mechanical thing. And therefore because you can operate it mechanically, perhaps it can do some computation. Here there's no notion of mechanics. I mean, maybe you have function application. And so we'll get into like, how can this possibly do stuff? So the first thing is you have in Lambda calculus this concept called identity function. This is the Lambda definition on the left and the JavaScript definition on the right. Obviously a very simple construct. In JavaScript we can have optional braces for the input parameter, right? So these two forms are equivalent. So I'm gonna drop the braces. And the names are just placeholders, right? So X and X and Z and Q that are, all of these constructs mean the same thing, right? So there's nothing special about X. So in Lambda calculus, you can call the identity function on itself. And basically what this is doing is, this is the function, right? And this is the thing that you're calling it with, right? This is a JavaScript equivalent, right? So what you do is for, this is the input variable X and this is the body of the function M. And inside the body, whenever you call this function, you replace every occurrence of X with whatever you call it with. So here every occurrence of X is replaced with this Lambda function with the purple Xs and you get this output. Not very interesting. Next you have this concept called curing. So in modern programming languages, most of them have this notion of having functions that accept multiple input parameters. But it turns out that you don't actually need this. And the way Alonzo church got around this idea is that instead of a function taking in two input parameters like this, we just have a function which returns another function which takes in an input parameter. That make sense? So this construct and this construct are equivalent. And Alonzo church said, instead of kind of being verbose like this, I'm gonna denote Lambda XY.M as equivalent to this. So it's not equivalent to this thing on the right because here in JavaScript, we have a function that takes in two input parameters. It's instead equivalent to this thing on the top right. Sorry for that's a little confusing. This concept is called curing. Next we're gonna define some true and false symbols. So you'll notice we didn't have any definition of numbers. And we didn't really have any definition of types or booleans or anything like that. We just had variables, function definition and function application. And so now we're adding more semantics to our language by defining these symbols called true and false. So very similar to how the number seven as a symbol is defined in terms of the successor function. Here the symbol T is defined as this function over here. And what this function is, is it's function that takes in two parameters and returns the first parameter. And the false symbol is the function that also takes in two parameters, but it returns the second symbol or second parameter. Is it following? Cool. So this is similar to our definition of seven. And from here, now we can sort of build an end function because we have boolean values. Let's see how we can build and. So this is actually the definition of and and we can kind of try it together. So and apply to true and false. Like logically we know that this should be false. So if we step through it, the first thing that we do is we replace and with this body over here. So lambda x, y, x, y, f, T and f, right? So here we have some lambda function and here we're denoting that we want to apply T to this function. So what we do is the first parameter is x. And so it's in this body. Every single time this x appears, we want to replace it with a T. And so what we're left with is lambda y, T, y, f. So this x has now become a T and we have one more input parameter that we need to resolve. And then same sort of deal, every occurrence of y. Now we're calling this function with f. Every occurrence of y, we want to replace with an f. And so we get T, f, f, okay? And so as you guys remember, true is actually defined as a function that takes in two input parameters and returns the first one. So in this case, it takes in two input parameters and then just returns the first one, which is f. So now we have some way of doing the and function. All right, let's try another example and T and T. Similarly, we expand and out to this thing and then we apply T to this thing, replace all the x's with T's and we get T, y, f. And then replace all the y's with T's and then we get T, T, f. And very similarly, T resolves to picking the first parameter and then we get T. So with just variables, functions and function application, all of a sudden now we have like Boolean logic. You can imagine how we can implement or an XOR and so on, right? So this is super unintuitive to me. Like the concept of defining true and false as these functions, like a true is actually a function which takes in two parameters and false is also a function which takes in two other parameters. And from there, building other functions like and, we can now do logical, like all of Boolean logic, right? Cool. This is the hardest slide, so you'll have to deal with me. I'm gonna talk about the y-combinator. So it turns out that many of you guys know about yc up in the Bay and it was essentially founded by a computer scientist who got the name from this principle. It's actually a Lambda calculus construct and it looks like this. And we're gonna go really slow and we'll go through it together, right? The first thing to notice is that y is just a function that takes in some input parameter y and it returns something, right? So nothing too crazy. What we can do is apply y, so let's say we have this function r, right? We wanna apply y to r, right? So in order to apply y to r, what we need to do is every occurrence of this yellow y inside this body, we need to replace with our input parameter r, okay? So all the yellow y's have now just become blue r's. Sound good? Okay, now if you look at this body, we can actually reduce it further. This first piece over here is a function and the second piece over here is a value that we can bind to this function or we can call this function with this value on the right. Okay? So what we're gonna do is this is the value on the right and if you look at this body, r, open print, x, x, close print, every occurrence of this magenta x, we're gonna replace with this body over here, okay? So r, x, x, has now been replaced with r, this body, this body, okay? We haven't done anything like too crazy and now if you'll notice like this line over here and the thing inside the parentheses of this r, they're actually the same thing. You guys see it? Here you have magenta values and here you have purple values. And the only difference is that this row has like an enclosed r, do you guys see that? Okay, so what we can do is take this yr because these yr and this thing on the right are equal to each other, so we can say yr is r of yr and it's not readily clear like why this is actually interesting or useful, but if you kind of sit down and think about it, what we've really done is define yr in terms of itself. So we've created like a recursive definition right here. And so what's actually happened is that this y-combinator is this thing over here allows you to take like a non-recursive concept and create recursion from nothing. So we just have variables, function definitions and function application and from those things we're able to create recursion. So this is like a crazy construct to me. Like we've created booleans and therefore we've created conditionals and from the same sort of raw axioms we've created recursion. Now, I encourage you guys to spend some time if you're interested like really examining this and coming to an understanding of why it's actually interesting and profound. But for now just take it on faith that we're able to create recursion from nothing and that's what the compelling aspect of the y-combinator is. Okay, the church Turing thesis. So we have these two independent models of computation the Turing machine and Lambda calculus invented at exactly the same time. And eventually these guys got together and they realized that their models of computation were actually equivalent. So originally when church was defining Lambda calculus he didn't define it in terms of turning machines and Turing when he was defining turning machines he didn't define it in terms of Lambda calculus they were sort of separate axiom towers. And so these guys got together and they said, wait, we have two different models of computation that we've proven independently to be sufficient to be able to compute anything that's computable. Is it true that our models are equivalent to each other? Was the question. And so they published this paper called the church Turing thesis. And it turns out that all Turing machines can be rewritten as Lambda expressions and all Lambda expressions can be rewritten as Turing machines. And we didn't really talk about Godel's recursive functions but it turns out that those are also equivalent. And so the conclusion here is that Lambda calculus is turning complete. Without any notions of explicit recursion, conditional state, et cetera. So all we need is variables, functions and function application. So let's go into the peculiarities of Lambda calculus because as software engineers we're sort of, we can think of the Turing machine as this thing that's very similar to a computer. And I'm gonna get to that in a moment but it's not really clear what this Lambda calculus thing is and how to do computation with it. So the first idea is that there's no notion of global state. There's no tape. All you have is the input arguments to your functions. That's the only semblance of state that you have. The second idea is all functions are pure. So purity is sort of this mathematical concept which is to say that it's a math function in that for any given input, it always, a function always returns the same output. So if you have a function for example, f of x equals x squared for an input three, call it this function with three, it's always gonna return nine no matter what. So all functions in Lambda calculus are pure. All values are immutable. So you can't modify an input parameter. But what you can do is generate a new value from an existing one. And there's also no loops. So you can't really iterate on things but the way we actually handle iteration in Lambda calculus like structures is through recursion. And then functions are your unit of composition. And the way you compose functions is sort of passing them as parameters to each other. And because of the nature of Lambda calculus, you don't have to reason about this global state. So when you're combining two simple functions together, all you need to know is what the consuming function does with the input. You don't have to reason about side effects or any other properties. So my claim over here is that because there's no global state, when you compose two things together, you can be sure that that composition is like really, really solid and it's not gonna result in bugs. Okay, the two towers. So we have turning machines on one hand and Lambda calculus on the other hand. And I've not so subtly drawn this Lambda calculus tower is perfect. But first we need to make a brief aside. In the 1940s, so less than a decade after turning machines came out, people started to ask the question of, okay, wait, this is great as a mathematical construct, but ultimately like I need to compute real stuff for my job. And so can we actually build a physical machine that does computation? And one of the core people involved in this work was this guy named John Von Neumann. He was a computer scientist. And he proposed this model for how we should build computing machines. And what he started with was this concept of memory, the RAM, and memory is basically just like a Turing tape in that it's put up into these cells and the cells can contain values. And then he proposed this thing called a CPU, which is composed of two components essentially, a control unit and a logic unit. And the CPU interacts with the memory by reading stuff from it and writing stuff to it. And Von Neumann proposed like a small set of instructions. You can load a value X from the memory cell at the location P. You can store a value X into the memory cell location P. You can add, subtract, and multiply. And so here's sort of like a minor deviation from Turing's model. Turing had no notion of numbers or addition or so on and Turing as a mathematician just basically said, those are levels of the axiom tower that you can obviously derive for yourself. Like I don't need to embed those in my axioms. But Von Neumann wanted to build something that actually computed stuff. So did the addition and so on. And so rather than having to do addition manually in the form of like incrementing or marking and unmarking cells, Von Neumann said, why don't we just build like circuitry that does the addition of two numbers and embed that into the CPU. So if I wanna take a value from cell A and a value from cell B and add them together and store them into cell C, instead of manually doing that computation like incrementing and decrementing, let's create circuitry that does the addition so that it's faster, okay? And that's what the logic unit is essentially responsible for. Then you also have these instructions called branches or jumps. So if the memory cell at location P contains zero, go to N. And if it doesn't contain zero, go to N, it's another instruction. And what I'm trying to get at is that this looks very much like a Turing machine. And Von Neumann proposed the actual physical circuitry that could implement something like this. And the first computers, the very first general computer was this thing called ENIAC. And I think it popped up in the 40s, like 47 or something like that. And basically it was like a room almost this size and there was no notion of like a program that you give to it. All it had was like circuitry and you had these like engineers that would go up and unplug and replug stuff to program the ENIAC and then it would operate and turn through the computation, right? But ultimately it looked exactly like this. It had some mechanism to store values in memory and then it had some mechanism to read those values from memory, combine them together in useful mathematical ways and store the results back. Cool, so the Turing machine tower. Start off with Turing machines and then we have this Von Neumann model. And the compelling aspect of this is sort of like a deviation from Turing machines in that it can be actually physically implemented. And one limitation here is that you don't have an infinite tape, you just have a finite amount of memory, right? But if you embrace that constraint, now all of a sudden you can actually compute things instead of just leaving it up to a mathematician, okay? In 1949, people got tired of manually plugging and replugging in wires and they wanted like a human level way to reason about what the instructions were. So they gave each of these instructions names, like small names like add, store, mold, divide, things like that. And programs were written like by hand first in this sort of ways that humans could reason about. And then later they were assembled down to the actual programming of the computer, like programming the instructions into the computer. And so what we've done is created a higher level construct called assembly that humans are able to reason about more easily, which maps down to the Von Neumann model in terms of actually programming the computer. Does that make sense? Ultimately, it's sort of like syntactic sugar or addition in that assembly doesn't add any more constructs. Like there, all of the rules of assembly are defined in terms of the Von Neumann axioms. And then we have Fortran. So Fortran is even higher level and here it adds constructs like if statements and loops. And you can imagine in 1957, there really wasn't anyone who had conceived of like a general notion of loops or even like conditionals, right? All we had were these like branch instructions and maybe it was sort of implicitly defined that you could make looping constructs from it. But then people were like, wait, why don't we just embrace this high level notion of a looping construct and embedded in our language? But just like assembly, looping doesn't actually give you any more expressivity. Every single loop can be defined in terms of the lower level constructs. Then we have C. C introduces these things called functions and then we have the ability to create more complex structures of data called structs. And then we have the ability to dynamically allocate in free memory as opposed to just using, you can imagine kind of manually dealing with all of the memory on your physical hardware as opposed to some other memory manager, right? And then finally, we have C++ in 1985, introduces this concept called classes and objects. I'm not sure if like these concepts on the right were introduced solely by the languages. I probably not, they probably came in some other flavor, but I think these languages over here are the most significant in terms of widespread use. So that's really what I'm trying to get at. It's not as much attribution as it much as it is sort of relatively speaking when these ideas popped up into existence. But just like pianos axiom towers, where you have kind of irrational numbers like up at the top, classes and objects are really just defined in relation to von Neumann instructions. Everything boils down to those things. So we can think of the von Neumann machine instructions almost like the axioms for computing, for modern computing really. And the Turing, so this claim is my own. Like after studying like the history of this, I asked myself the question, like, why is this tower, like these languages specifically so much more popular compared to the corresponding languages and ideas in the Lambda calculus tower. And my belief is that the Turing machine axiom tower is actually easily implementable in hardware because it's sort of like a physical device. And because you can implement it in hardware, you can actually compute stuff with it as opposed to it being relegated to pure math, right? The final idea is that a compiler is just something that takes like a higher level construct and reduces it down to its axiomatic von Neumann definition. That's all what a compiler is. Sound good? Okay, the Lambda calculus tower. So this one looks very different because the first thing that we have is just variables, functions and function application. And we've already kind of seen some constructs that you can build on top of that. But one of the most interesting ones is this idea called Lisp, which came about in the 1950s. And it came about also by a mathematician, his name was John McCarthy. And what McCarthy did was, if you look at piano's axioms, the definitions of those axioms were sort of defined in terms of English and mathematical notation, right? McCarthy said, what if we could take Lambda calculus or structures like that and define those axioms in the language itself? And he created this language called Lisp. And basically the implementation of Lisp is in Lisp itself. And because he was a mathematician, he had no need to actually implement it on a real computer. And so this was sort of the first example of what we call like a meta-circular construct. So the construct is defined in terms of itself and it's fully self-containing. And I think a rite of passage for like every single computer scientist is to build your own Lisp interpreter. And so McCarthy kind of proposed this idea in 1958 and then his students went along and actually implemented Lisp as on top of one Neumann machine to actually compute stuff. The next idea is System F. So this popped up in 1972 and you can think of System F as like Lambda calculus except it has support for types. So the Lambda calculus that I kind of showed you before didn't really have any types. So it's kind of like JavaScript. System F is kind of the typescript equivalent of Lambda calculus. But a lot more sophisticated for reasons that I don't want to get into. But really every single System F construct can be boiled down into its corresponding Lambda calculus construct. So very similar to how Fortran didn't add any expressivity. System F didn't really add any expressivity either. Then on top of this, we have these languages called ML. I think ML stands for meta language and OCaml which is the sort of most widely used flavor of ML. And it introduced like higher level constructs like pattern matching. You guys haven't spent much time in functional programming. Like it's, this whole tower is super weird because these constructs don't actually carry over cleanly to the imperative tower. Sorry, the Von Neumann tower, the Turing tower. On top of this, we have this language called Haskell which earliest roots of it popped up in 1985. Basically the same year that C++ came about was when Haskell came about or the predecessor to Haskell came about. And the cool thing about Haskell is that it is a general purpose programming language that can do IO and things like that. But its constructs are still pure. So it still has pure math functions like everywhere. And today Haskell is sort of like the king of statically typed functional programming languages. But now we get into some stuff which might be more relevant to your guys' experience. In 2012, Elm kind of popped up and Elm is very much a functional programming language even though it compiles down into JavaScript. And the Elm people essentially pioneered the flux-redex pattern. So this idea that actions result in essentially the production of a new state and that new state can be used to render a new view and there's a sort of like one-way data flow. This idea popped up in 2012. But if you're kind of thinking about the world in terms of the Lambda calculus tower, this idea is actually not that novel. It's sort of a very obvious outcome of dealing with the constraints of the Lambda tower. Then from here in 2013, we have React. React kind of makes a claim that the view needs to be a pure function of the state or your props. But really it's kind of just the same. So given a state, we can always render the same view like deterministically as a pure function. And at first, like if you're coming from jQuery, adopting the React pattern was probably like extremely frustrating. And for those of you, if you kind of recall back to your first experiences with React, you kind of felt like there was these artificial constraints being imposed upon you. Like I just want to hide the modal. Why can't I do that? Right? But then eventually as you start to build larger and larger apps, you realize that like this sort of one-way data flow constraint makes it way more easy to reason about what your view is going to look like given a state. And the point I'm trying to make over here is that one, these ideas are not new. Like Lambda calculus kind of forces us to embody this perspective that the output of a function is a pure outcome of its inputs, right? And it's just now in like 2012, 2013 that we're starting to re-embrace these ideas. And I guess most of us believe that I can't even imagine building a UI in a non-reactive way. It's sort of like taken as given. And so I think that if more engineers spend time kind of thinking about the history of this thing, it becomes a lot more like, you can understand more like why React looks the way it does or why Elm looks the way it does. And rather than trying to apply your like Turing machine imperative programming mindset to functional programming, you can kind of build your way up starting with Lambda calculus going up. And I think that path actually makes it much more easy to reason about functional programming. As a fun side effect or a fun anecdote, the original compiler for React when it was still like an experimental project at Facebook was written in OCaml. All right, so the final like concession that I'll make is that Lambda calculus is really hard to implement in hardware. And whereas the Turing machine von Neumann model is obviously very easy to implement in hardware. Okay, final slide. React is to jQuery as Lambda calculus is to the Turing machine. So in jQuery, you have this concept called like the DOM is your state. So all of the HTML elements that are there is your state. You've probably written jQuery code that looks like this. jQuery.model.show and shows the modal. And basically what I'm trying to get at here is that whether the modal is being shown is encoded in the DOM itself. Anything can make modifications to the DOM and the DOM as a result ends up in these weird unexpected states because you didn't precisely reason about state modifications, kind of just wrote code like this over and over again until it essentially resulted in a Turing machine like construct where it's difficult to reason about the tape. And so in React, the state is explicitly defined, right? It's an input to your render function kind of implicitly and your view is a pure function of the state. And you don't modify the state, you produce a new state. And so React's constraints actually make it easier to reason about the state and the DOM. And by analogy, functional programming's constraints make it easier to reason about programs. And so if you're intrigued and wanna learn more about the Lambda Tower, I highly recommend taking this approach. If you guys haven't done Advent of Code, it's essentially this wonderful set of problems that show up every December. Solve those problems in Elm. Elm is a really good intro to functional programming because the compiler messages were meant for humans and the whole ecosystem is built so that it's easy to pick up and learn. And if you're familiar with the React-Redux pattern, that kind of came from Elm and it becomes like, you can build some cool stuff right out of the get-go. All right, that's all I got. Thanks. Thank you. Thank you. Thanks. Yes. It's tough for me to say it because I wasn't there. But I think it's sort of like a chicken and egg situation, because we didn't have machines that could compute stuff. We didn't rely on those machines to compute the stuff. But then all of a sudden, the machine to compute stuff popped up and I got to imagine the first sets of calculations were just silly, solving linear equations. But then eventually people started to realize we could do compelling things with this. I'm sure the military was one of the first users of it. We can do ballistic missile trajectory calculations very easily. And then, obviously, computing is now universal. Questions, questions. Yeah. Have you heard of ReasonML? Okay, so ReasonML is a rewrite of the OCaml syntax to make it more comfortable for JavaScript developers. Because the OCaml syntax is kind of stodgy if you first look at it. Whereas ReasonML, if you're coming from JavaScript, it looks very similar. But ReasonML is not a new language. All it does is transpile down to OCaml. And so if you want to get started with OCaml, I wouldn't necessarily recommend it. I would recommend starting with Elm first. But then from there, if you want to build programs that can interoperate with JavaScript really easily, I think ReasonML is the best way to go. Yeah. Yeah. Yeah, there was a lot of researchers in the 1980s that actually tried this. I think they built some prototypes. The problem is that you have these sort of positive feedback loops in ecosystems. And so the Turing model and the Von Neumann model essentially caught on so well that even though in theory the Lambda Tower might allow for more expressivity, practically speaking, the best computers are in the Turing model. And therefore, more attention kind of gravitates towards there. People build more stuff for it. And now, I don't know, 90% plus of all languages are kind of all Turing-based. So in the 80s, they did build functional programming computers. But because most of investment into these technologies comes as a function of industry, like businesses, like needing to solve business problems, then the positive feedback loop of the Turing Tower kind of diminished the Lambda Tower. Yeah, so I would probably boil it down to just the three constructs, right? You have variables. You have functions and function applications. So is there a way to represent a variable in some sort of circuitry? Is there a way to represent a function in circuitry as well as function application? I think the answer to all those is you probably conceive of some way. I don't know the details of how the actual Lambda computers were built, but it might be an interesting thing to look into. But they obviously fizzled out. The nature of the Von Neumann model in Turing machines is that it maps so cleanly to binary circuitry and originally vacuum tubes, but now transistors map so perfectly down to that model, whereas the concept of a function doesn't map to logic gates cleanly. All right. Well, I guess with that we'll wrap up. Thank you everyone.", "segments": [{"id": 0, "seek": 0, "start": 1.0, "end": 2.7600000000000002, "text": " All right, let's jump in.", "tokens": [50414, 1057, 558, 11, 718, 311, 3012, 294, 13, 50502], "temperature": 0.0, "avg_logprob": -0.16524970415726448, "compression_ratio": 1.6170212765957446, "no_speech_prob": 0.03402402997016907}, {"id": 1, "seek": 0, "start": 2.7600000000000002, "end": 7.32, "text": " Cool, introduction to the theory of computation.", "tokens": [50502, 8561, 11, 9339, 281, 264, 5261, 295, 24903, 13, 50730], "temperature": 0.0, "avg_logprob": -0.16524970415726448, "compression_ratio": 1.6170212765957446, "no_speech_prob": 0.03402402997016907}, {"id": 2, "seek": 0, "start": 7.32, "end": 10.08, "text": " I have been more excited about this talk", "tokens": [50730, 286, 362, 668, 544, 2919, 466, 341, 751, 50868], "temperature": 0.0, "avg_logprob": -0.16524970415726448, "compression_ratio": 1.6170212765957446, "no_speech_prob": 0.03402402997016907}, {"id": 3, "seek": 0, "start": 10.08, "end": 13.52, "text": " than any other talk that I've given in my entire life.", "tokens": [50868, 813, 604, 661, 751, 300, 286, 600, 2212, 294, 452, 2302, 993, 13, 51040], "temperature": 0.0, "avg_logprob": -0.16524970415726448, "compression_ratio": 1.6170212765957446, "no_speech_prob": 0.03402402997016907}, {"id": 4, "seek": 0, "start": 13.52, "end": 14.88, "text": " So forget about the company vision.", "tokens": [51040, 407, 2870, 466, 264, 2237, 5201, 13, 51108], "temperature": 0.0, "avg_logprob": -0.16524970415726448, "compression_ratio": 1.6170212765957446, "no_speech_prob": 0.03402402997016907}, {"id": 5, "seek": 0, "start": 14.88, "end": 17.12, "text": " We're talking about the theory of computing.", "tokens": [51108, 492, 434, 1417, 466, 264, 5261, 295, 15866, 13, 51220], "temperature": 0.0, "avg_logprob": -0.16524970415726448, "compression_ratio": 1.6170212765957446, "no_speech_prob": 0.03402402997016907}, {"id": 6, "seek": 0, "start": 19.0, "end": 21.98, "text": " I learned, I was introduced to some of this stuff", "tokens": [51314, 286, 3264, 11, 286, 390, 7268, 281, 512, 295, 341, 1507, 51463], "temperature": 0.0, "avg_logprob": -0.16524970415726448, "compression_ratio": 1.6170212765957446, "no_speech_prob": 0.03402402997016907}, {"id": 7, "seek": 0, "start": 21.98, "end": 26.68, "text": " when I was an undergrad at UCLA about 10 years ago", "tokens": [51463, 562, 286, 390, 364, 14295, 412, 42862, 466, 1266, 924, 2057, 51698], "temperature": 0.0, "avg_logprob": -0.16524970415726448, "compression_ratio": 1.6170212765957446, "no_speech_prob": 0.03402402997016907}, {"id": 8, "seek": 0, "start": 26.68, "end": 29.48, "text": " and I didn't understand it.", "tokens": [51698, 293, 286, 994, 380, 1223, 309, 13, 51838], "temperature": 0.0, "avg_logprob": -0.16524970415726448, "compression_ratio": 1.6170212765957446, "no_speech_prob": 0.03402402997016907}, {"id": 9, "seek": 2948, "start": 29.48, "end": 32.02, "text": " And it was kind of presented as like,", "tokens": [50364, 400, 309, 390, 733, 295, 8212, 382, 411, 11, 50491], "temperature": 0.0, "avg_logprob": -0.11995908639726847, "compression_ratio": 1.730909090909091, "no_speech_prob": 0.0001710454234853387}, {"id": 10, "seek": 2948, "start": 33.04, "end": 36.52, "text": " here's the sort of tablets from the mountain", "tokens": [50542, 510, 311, 264, 1333, 295, 27622, 490, 264, 6937, 50716], "temperature": 0.0, "avg_logprob": -0.11995908639726847, "compression_ratio": 1.730909090909091, "no_speech_prob": 0.0001710454234853387}, {"id": 11, "seek": 2948, "start": 36.52, "end": 40.56, "text": " and learn and memorize them and this is why computing is.", "tokens": [50716, 293, 1466, 293, 27478, 552, 293, 341, 307, 983, 15866, 307, 13, 50918], "temperature": 0.0, "avg_logprob": -0.11995908639726847, "compression_ratio": 1.730909090909091, "no_speech_prob": 0.0001710454234853387}, {"id": 12, "seek": 2948, "start": 40.56, "end": 43.44, "text": " And it took me 10 years and I finally understand it.", "tokens": [50918, 400, 309, 1890, 385, 1266, 924, 293, 286, 2721, 1223, 309, 13, 51062], "temperature": 0.0, "avg_logprob": -0.11995908639726847, "compression_ratio": 1.730909090909091, "no_speech_prob": 0.0001710454234853387}, {"id": 13, "seek": 2948, "start": 43.44, "end": 45.64, "text": " And it's so mind blowing that I wanted to talk", "tokens": [51062, 400, 309, 311, 370, 1575, 15068, 300, 286, 1415, 281, 751, 51172], "temperature": 0.0, "avg_logprob": -0.11995908639726847, "compression_ratio": 1.730909090909091, "no_speech_prob": 0.0001710454234853387}, {"id": 14, "seek": 2948, "start": 45.64, "end": 46.480000000000004, "text": " to you guys about it.", "tokens": [51172, 281, 291, 1074, 466, 309, 13, 51214], "temperature": 0.0, "avg_logprob": -0.11995908639726847, "compression_ratio": 1.730909090909091, "no_speech_prob": 0.0001710454234853387}, {"id": 15, "seek": 2948, "start": 46.480000000000004, "end": 48.400000000000006, "text": " So this is what it's about.", "tokens": [51214, 407, 341, 307, 437, 309, 311, 466, 13, 51310], "temperature": 0.0, "avg_logprob": -0.11995908639726847, "compression_ratio": 1.730909090909091, "no_speech_prob": 0.0001710454234853387}, {"id": 16, "seek": 2948, "start": 48.400000000000006, "end": 50.8, "text": " The subtext of this is it's a tale of two towers", "tokens": [51310, 440, 1422, 25111, 295, 341, 307, 309, 311, 257, 17172, 295, 732, 25045, 51430], "temperature": 0.0, "avg_logprob": -0.11995908639726847, "compression_ratio": 1.730909090909091, "no_speech_prob": 0.0001710454234853387}, {"id": 17, "seek": 2948, "start": 50.8, "end": 52.84, "text": " and this will make sense as we get into it.", "tokens": [51430, 293, 341, 486, 652, 2020, 382, 321, 483, 666, 309, 13, 51532], "temperature": 0.0, "avg_logprob": -0.11995908639726847, "compression_ratio": 1.730909090909091, "no_speech_prob": 0.0001710454234853387}, {"id": 18, "seek": 2948, "start": 52.84, "end": 56.980000000000004, "text": " But the preface is an intro to axiomatic thinking.", "tokens": [51532, 583, 264, 659, 2868, 307, 364, 12897, 281, 6360, 72, 13143, 1953, 13, 51739], "temperature": 0.0, "avg_logprob": -0.11995908639726847, "compression_ratio": 1.730909090909091, "no_speech_prob": 0.0001710454234853387}, {"id": 19, "seek": 2948, "start": 56.980000000000004, "end": 59.2, "text": " This is a kind of strange way of thinking", "tokens": [51739, 639, 307, 257, 733, 295, 5861, 636, 295, 1953, 51850], "temperature": 0.0, "avg_logprob": -0.11995908639726847, "compression_ratio": 1.730909090909091, "no_speech_prob": 0.0001710454234853387}, {"id": 20, "seek": 5920, "start": 59.24, "end": 62.28, "text": " if you guys haven't been introduced to formal math.", "tokens": [50366, 498, 291, 1074, 2378, 380, 668, 7268, 281, 9860, 5221, 13, 50518], "temperature": 0.0, "avg_logprob": -0.1693884776188777, "compression_ratio": 1.5081967213114753, "no_speech_prob": 0.00029121810803189874}, {"id": 21, "seek": 5920, "start": 63.84, "end": 65.48, "text": " It's not, it's strange.", "tokens": [50596, 467, 311, 406, 11, 309, 311, 5861, 13, 50678], "temperature": 0.0, "avg_logprob": -0.1693884776188777, "compression_ratio": 1.5081967213114753, "no_speech_prob": 0.00029121810803189874}, {"id": 22, "seek": 5920, "start": 65.48, "end": 66.46000000000001, "text": " Let's just jump in.", "tokens": [50678, 961, 311, 445, 3012, 294, 13, 50727], "temperature": 0.0, "avg_logprob": -0.1693884776188777, "compression_ratio": 1.5081967213114753, "no_speech_prob": 0.00029121810803189874}, {"id": 23, "seek": 5920, "start": 66.46000000000001, "end": 71.46000000000001, "text": " So two plus three times seven, this is I think 23.", "tokens": [50727, 407, 732, 1804, 1045, 1413, 3407, 11, 341, 307, 286, 519, 6673, 13, 50977], "temperature": 0.0, "avg_logprob": -0.1693884776188777, "compression_ratio": 1.5081967213114753, "no_speech_prob": 0.00029121810803189874}, {"id": 24, "seek": 5920, "start": 74.24000000000001, "end": 76.68, "text": " Why do we know the answer to this?", "tokens": [51116, 1545, 360, 321, 458, 264, 1867, 281, 341, 30, 51238], "temperature": 0.0, "avg_logprob": -0.1693884776188777, "compression_ratio": 1.5081967213114753, "no_speech_prob": 0.00029121810803189874}, {"id": 25, "seek": 5920, "start": 76.68, "end": 79.76, "text": " And I asked this question and I encourage you guys", "tokens": [51238, 400, 286, 2351, 341, 1168, 293, 286, 5373, 291, 1074, 51392], "temperature": 0.0, "avg_logprob": -0.1693884776188777, "compression_ratio": 1.5081967213114753, "no_speech_prob": 0.00029121810803189874}, {"id": 26, "seek": 5920, "start": 79.76, "end": 83.04, "text": " to take the perspective as if you were like an alien", "tokens": [51392, 281, 747, 264, 4585, 382, 498, 291, 645, 411, 364, 12319, 51556], "temperature": 0.0, "avg_logprob": -0.1693884776188777, "compression_ratio": 1.5081967213114753, "no_speech_prob": 0.00029121810803189874}, {"id": 27, "seek": 5920, "start": 83.04, "end": 87.0, "text": " who has never really seen symbols like this.", "tokens": [51556, 567, 575, 1128, 534, 1612, 16944, 411, 341, 13, 51754], "temperature": 0.0, "avg_logprob": -0.1693884776188777, "compression_ratio": 1.5081967213114753, "no_speech_prob": 0.00029121810803189874}, {"id": 28, "seek": 5920, "start": 87.0, "end": 88.56, "text": " Or perhaps you didn't even understand", "tokens": [51754, 1610, 4317, 291, 994, 380, 754, 1223, 51832], "temperature": 0.0, "avg_logprob": -0.1693884776188777, "compression_ratio": 1.5081967213114753, "no_speech_prob": 0.00029121810803189874}, {"id": 29, "seek": 8856, "start": 88.60000000000001, "end": 90.92, "text": " the concept of multiplication or addition.", "tokens": [50366, 264, 3410, 295, 27290, 420, 4500, 13, 50482], "temperature": 0.0, "avg_logprob": -0.11610311758322794, "compression_ratio": 1.7790697674418605, "no_speech_prob": 0.0006358812097460032}, {"id": 30, "seek": 8856, "start": 90.92, "end": 92.84, "text": " How do you know what to do over here?", "tokens": [50482, 1012, 360, 291, 458, 437, 281, 360, 670, 510, 30, 50578], "temperature": 0.0, "avg_logprob": -0.11610311758322794, "compression_ratio": 1.7790697674418605, "no_speech_prob": 0.0006358812097460032}, {"id": 31, "seek": 8856, "start": 92.84, "end": 94.60000000000001, "text": " So let's just step through it.", "tokens": [50578, 407, 718, 311, 445, 1823, 807, 309, 13, 50666], "temperature": 0.0, "avg_logprob": -0.11610311758322794, "compression_ratio": 1.7790697674418605, "no_speech_prob": 0.0006358812097460032}, {"id": 32, "seek": 8856, "start": 94.60000000000001, "end": 97.4, "text": " The first thing that you would do is three times seven is 21", "tokens": [50666, 440, 700, 551, 300, 291, 576, 360, 307, 1045, 1413, 3407, 307, 5080, 50806], "temperature": 0.0, "avg_logprob": -0.11610311758322794, "compression_ratio": 1.7790697674418605, "no_speech_prob": 0.0006358812097460032}, {"id": 33, "seek": 8856, "start": 97.4, "end": 99.32000000000001, "text": " and two plus 21 is 23.", "tokens": [50806, 293, 732, 1804, 5080, 307, 6673, 13, 50902], "temperature": 0.0, "avg_logprob": -0.11610311758322794, "compression_ratio": 1.7790697674418605, "no_speech_prob": 0.0006358812097460032}, {"id": 34, "seek": 8856, "start": 99.32000000000001, "end": 100.88, "text": " So what do we have over here?", "tokens": [50902, 407, 437, 360, 321, 362, 670, 510, 30, 50980], "temperature": 0.0, "avg_logprob": -0.11610311758322794, "compression_ratio": 1.7790697674418605, "no_speech_prob": 0.0006358812097460032}, {"id": 35, "seek": 8856, "start": 100.88, "end": 104.28, "text": " We have these symbols called numbers.", "tokens": [50980, 492, 362, 613, 16944, 1219, 3547, 13, 51150], "temperature": 0.0, "avg_logprob": -0.11610311758322794, "compression_ratio": 1.7790697674418605, "no_speech_prob": 0.0006358812097460032}, {"id": 36, "seek": 8856, "start": 104.28, "end": 106.80000000000001, "text": " We have these things called operators.", "tokens": [51150, 492, 362, 613, 721, 1219, 19077, 13, 51276], "temperature": 0.0, "avg_logprob": -0.11610311758322794, "compression_ratio": 1.7790697674418605, "no_speech_prob": 0.0006358812097460032}, {"id": 37, "seek": 8856, "start": 106.80000000000001, "end": 108.80000000000001, "text": " And then we have this interesting thing over here", "tokens": [51276, 400, 550, 321, 362, 341, 1880, 551, 670, 510, 51376], "temperature": 0.0, "avg_logprob": -0.11610311758322794, "compression_ratio": 1.7790697674418605, "no_speech_prob": 0.0006358812097460032}, {"id": 38, "seek": 8856, "start": 108.80000000000001, "end": 113.80000000000001, "text": " where we can substitute an operator for its equivalent form.", "tokens": [51376, 689, 321, 393, 15802, 364, 12973, 337, 1080, 10344, 1254, 13, 51626], "temperature": 0.0, "avg_logprob": -0.11610311758322794, "compression_ratio": 1.7790697674418605, "no_speech_prob": 0.0006358812097460032}, {"id": 39, "seek": 8856, "start": 114.32000000000001, "end": 117.4, "text": " So three times seven is the same thing as 21.", "tokens": [51652, 407, 1045, 1413, 3407, 307, 264, 912, 551, 382, 5080, 13, 51806], "temperature": 0.0, "avg_logprob": -0.11610311758322794, "compression_ratio": 1.7790697674418605, "no_speech_prob": 0.0006358812097460032}, {"id": 40, "seek": 11740, "start": 117.4, "end": 120.08000000000001, "text": " Here we've kind of made that substitution.", "tokens": [50364, 1692, 321, 600, 733, 295, 1027, 300, 35827, 13, 50498], "temperature": 0.0, "avg_logprob": -0.09330830940833458, "compression_ratio": 1.7526132404181185, "no_speech_prob": 0.0007318785064853728}, {"id": 41, "seek": 11740, "start": 120.08000000000001, "end": 122.52000000000001, "text": " And then these operators also have precedents.", "tokens": [50498, 400, 550, 613, 19077, 611, 362, 16969, 791, 13, 50620], "temperature": 0.0, "avg_logprob": -0.09330830940833458, "compression_ratio": 1.7526132404181185, "no_speech_prob": 0.0007318785064853728}, {"id": 42, "seek": 11740, "start": 122.52000000000001, "end": 125.32000000000001, "text": " Like we knew to do three times seven first", "tokens": [50620, 1743, 321, 2586, 281, 360, 1045, 1413, 3407, 700, 50760], "temperature": 0.0, "avg_logprob": -0.09330830940833458, "compression_ratio": 1.7526132404181185, "no_speech_prob": 0.0007318785064853728}, {"id": 43, "seek": 11740, "start": 125.32000000000001, "end": 127.60000000000001, "text": " because of all of the middle school math homework", "tokens": [50760, 570, 295, 439, 295, 264, 2808, 1395, 5221, 14578, 50874], "temperature": 0.0, "avg_logprob": -0.09330830940833458, "compression_ratio": 1.7526132404181185, "no_speech_prob": 0.0007318785064853728}, {"id": 44, "seek": 11740, "start": 127.60000000000001, "end": 128.76, "text": " that we did.", "tokens": [50874, 300, 321, 630, 13, 50932], "temperature": 0.0, "avg_logprob": -0.09330830940833458, "compression_ratio": 1.7526132404181185, "no_speech_prob": 0.0007318785064853728}, {"id": 45, "seek": 11740, "start": 128.76, "end": 131.96, "text": " And then we have this final reduced form.", "tokens": [50932, 400, 550, 321, 362, 341, 2572, 9212, 1254, 13, 51092], "temperature": 0.0, "avg_logprob": -0.09330830940833458, "compression_ratio": 1.7526132404181185, "no_speech_prob": 0.0007318785064853728}, {"id": 46, "seek": 11740, "start": 131.96, "end": 136.44, "text": " So in theory, each of these levels are equal to each other", "tokens": [51092, 407, 294, 5261, 11, 1184, 295, 613, 4358, 366, 2681, 281, 1184, 661, 51316], "temperature": 0.0, "avg_logprob": -0.09330830940833458, "compression_ratio": 1.7526132404181185, "no_speech_prob": 0.0007318785064853728}, {"id": 47, "seek": 11740, "start": 136.44, "end": 138.96, "text": " because we've just kind of made substitutions along the way.", "tokens": [51316, 570, 321, 600, 445, 733, 295, 1027, 26441, 3666, 2051, 264, 636, 13, 51442], "temperature": 0.0, "avg_logprob": -0.09330830940833458, "compression_ratio": 1.7526132404181185, "no_speech_prob": 0.0007318785064853728}, {"id": 48, "seek": 11740, "start": 138.96, "end": 141.88, "text": " And what I'm trying to get at is we have these collections", "tokens": [51442, 400, 437, 286, 478, 1382, 281, 483, 412, 307, 321, 362, 613, 16641, 51588], "temperature": 0.0, "avg_logprob": -0.09330830940833458, "compression_ratio": 1.7526132404181185, "no_speech_prob": 0.0007318785064853728}, {"id": 49, "seek": 11740, "start": 141.88, "end": 143.84, "text": " of rules that we kind of take for granted", "tokens": [51588, 295, 4474, 300, 321, 733, 295, 747, 337, 12344, 51686], "temperature": 0.0, "avg_logprob": -0.09330830940833458, "compression_ratio": 1.7526132404181185, "no_speech_prob": 0.0007318785064853728}, {"id": 50, "seek": 11740, "start": 143.84, "end": 145.92000000000002, "text": " that we never really thought too much about.", "tokens": [51686, 300, 321, 1128, 534, 1194, 886, 709, 466, 13, 51790], "temperature": 0.0, "avg_logprob": -0.09330830940833458, "compression_ratio": 1.7526132404181185, "no_speech_prob": 0.0007318785064853728}, {"id": 51, "seek": 14592, "start": 145.95999999999998, "end": 150.95999999999998, "text": " That if you really examine like across representing", "tokens": [50366, 663, 498, 291, 534, 17496, 411, 2108, 13460, 50616], "temperature": 0.0, "avg_logprob": -0.10319271716442736, "compression_ratio": 1.6511627906976745, "no_speech_prob": 0.00010067911352962255}, {"id": 52, "seek": 14592, "start": 152.0, "end": 156.07999999999998, "text": " an operation or this little like two and one", "tokens": [50668, 364, 6916, 420, 341, 707, 411, 732, 293, 472, 50872], "temperature": 0.0, "avg_logprob": -0.10319271716442736, "compression_ratio": 1.6511627906976745, "no_speech_prob": 0.00010067911352962255}, {"id": 53, "seek": 14592, "start": 156.07999999999998, "end": 158.72, "text": " like right next to each other represent 21", "tokens": [50872, 411, 558, 958, 281, 1184, 661, 2906, 5080, 51004], "temperature": 0.0, "avg_logprob": -0.10319271716442736, "compression_ratio": 1.6511627906976745, "no_speech_prob": 0.00010067911352962255}, {"id": 54, "seek": 14592, "start": 158.72, "end": 161.76, "text": " these are really kind of non-trivial concepts.", "tokens": [51004, 613, 366, 534, 733, 295, 2107, 12, 83, 470, 22640, 10392, 13, 51156], "temperature": 0.0, "avg_logprob": -0.10319271716442736, "compression_ratio": 1.6511627906976745, "no_speech_prob": 0.00010067911352962255}, {"id": 55, "seek": 14592, "start": 161.76, "end": 163.79999999999998, "text": " So let's dig into some of these.", "tokens": [51156, 407, 718, 311, 2528, 666, 512, 295, 613, 13, 51258], "temperature": 0.0, "avg_logprob": -0.10319271716442736, "compression_ratio": 1.6511627906976745, "no_speech_prob": 0.00010067911352962255}, {"id": 56, "seek": 14592, "start": 163.79999999999998, "end": 167.76, "text": " The first idea is that three times seven", "tokens": [51258, 440, 700, 1558, 307, 300, 1045, 1413, 3407, 51456], "temperature": 0.0, "avg_logprob": -0.10319271716442736, "compression_ratio": 1.6511627906976745, "no_speech_prob": 0.00010067911352962255}, {"id": 57, "seek": 14592, "start": 167.76, "end": 170.44, "text": " is actually seven plus seven plus seven.", "tokens": [51456, 307, 767, 3407, 1804, 3407, 1804, 3407, 13, 51590], "temperature": 0.0, "avg_logprob": -0.10319271716442736, "compression_ratio": 1.6511627906976745, "no_speech_prob": 0.00010067911352962255}, {"id": 58, "seek": 14592, "start": 170.44, "end": 173.39999999999998, "text": " And so this is to say that the rule of multiplication", "tokens": [51590, 400, 370, 341, 307, 281, 584, 300, 264, 4978, 295, 27290, 51738], "temperature": 0.0, "avg_logprob": -0.10319271716442736, "compression_ratio": 1.6511627906976745, "no_speech_prob": 0.00010067911352962255}, {"id": 59, "seek": 17340, "start": 173.4, "end": 175.56, "text": " is actually defined in terms of addition.", "tokens": [50364, 307, 767, 7642, 294, 2115, 295, 4500, 13, 50472], "temperature": 0.0, "avg_logprob": -0.15024503386846863, "compression_ratio": 1.7118644067796611, "no_speech_prob": 0.00043046960490755737}, {"id": 60, "seek": 17340, "start": 178.12, "end": 179.24, "text": " So this is interesting.", "tokens": [50600, 407, 341, 307, 1880, 13, 50656], "temperature": 0.0, "avg_logprob": -0.15024503386846863, "compression_ratio": 1.7118644067796611, "no_speech_prob": 0.00043046960490755737}, {"id": 61, "seek": 17340, "start": 181.28, "end": 184.0, "text": " If some rules are defined in terms of each other", "tokens": [50758, 759, 512, 4474, 366, 7642, 294, 2115, 295, 1184, 661, 50894], "temperature": 0.0, "avg_logprob": -0.15024503386846863, "compression_ratio": 1.7118644067796611, "no_speech_prob": 0.00043046960490755737}, {"id": 62, "seek": 17340, "start": 184.0, "end": 187.04000000000002, "text": " we can say that the rule is kind of redundant.", "tokens": [50894, 321, 393, 584, 300, 264, 4978, 307, 733, 295, 40997, 13, 51046], "temperature": 0.0, "avg_logprob": -0.15024503386846863, "compression_ratio": 1.7118644067796611, "no_speech_prob": 0.00043046960490755737}, {"id": 63, "seek": 17340, "start": 187.04000000000002, "end": 190.48000000000002, "text": " So in theory, like we don't really need multiplication", "tokens": [51046, 407, 294, 5261, 11, 411, 321, 500, 380, 534, 643, 27290, 51218], "temperature": 0.0, "avg_logprob": -0.15024503386846863, "compression_ratio": 1.7118644067796611, "no_speech_prob": 0.00043046960490755737}, {"id": 64, "seek": 17340, "start": 190.48000000000002, "end": 192.68, "text": " in math because every time we multiply", "tokens": [51218, 294, 5221, 570, 633, 565, 321, 12972, 51328], "temperature": 0.0, "avg_logprob": -0.15024503386846863, "compression_ratio": 1.7118644067796611, "no_speech_prob": 0.00043046960490755737}, {"id": 65, "seek": 17340, "start": 192.68, "end": 194.52, "text": " we can just add instead.", "tokens": [51328, 321, 393, 445, 909, 2602, 13, 51420], "temperature": 0.0, "avg_logprob": -0.15024503386846863, "compression_ratio": 1.7118644067796611, "no_speech_prob": 0.00043046960490755737}, {"id": 66, "seek": 17340, "start": 194.52, "end": 196.72, "text": " And therefore multiplication hasn't really given us", "tokens": [51420, 400, 4412, 27290, 6132, 380, 534, 2212, 505, 51530], "temperature": 0.0, "avg_logprob": -0.15024503386846863, "compression_ratio": 1.7118644067796611, "no_speech_prob": 0.00043046960490755737}, {"id": 67, "seek": 17340, "start": 196.72, "end": 200.08, "text": " any more expressive power than addition already provides", "tokens": [51530, 604, 544, 40189, 1347, 813, 4500, 1217, 6417, 51698], "temperature": 0.0, "avg_logprob": -0.15024503386846863, "compression_ratio": 1.7118644067796611, "no_speech_prob": 0.00043046960490755737}, {"id": 68, "seek": 17340, "start": 200.08, "end": 201.20000000000002, "text": " for us, right?", "tokens": [51698, 337, 505, 11, 558, 30, 51754], "temperature": 0.0, "avg_logprob": -0.15024503386846863, "compression_ratio": 1.7118644067796611, "no_speech_prob": 0.00043046960490755737}, {"id": 69, "seek": 20120, "start": 201.2, "end": 204.51999999999998, "text": " So if some rules are redundant", "tokens": [50364, 407, 498, 512, 4474, 366, 40997, 50530], "temperature": 0.0, "avg_logprob": -0.11774701907716949, "compression_ratio": 1.7835497835497836, "no_speech_prob": 2.885101093852427e-05}, {"id": 70, "seek": 20120, "start": 204.51999999999998, "end": 206.95999999999998, "text": " then maybe we can ask the question of like", "tokens": [50530, 550, 1310, 321, 393, 1029, 264, 1168, 295, 411, 50652], "temperature": 0.0, "avg_logprob": -0.11774701907716949, "compression_ratio": 1.7835497835497836, "no_speech_prob": 2.885101093852427e-05}, {"id": 71, "seek": 20120, "start": 206.95999999999998, "end": 209.35999999999999, "text": " what rules are non-redundant?", "tokens": [50652, 437, 4474, 366, 2107, 12, 265, 769, 273, 394, 30, 50772], "temperature": 0.0, "avg_logprob": -0.11774701907716949, "compression_ratio": 1.7835497835497836, "no_speech_prob": 2.885101093852427e-05}, {"id": 72, "seek": 20120, "start": 210.48, "end": 212.35999999999999, "text": " Or really what is the minimum subset of rules", "tokens": [50828, 1610, 534, 437, 307, 264, 7285, 25993, 295, 4474, 50922], "temperature": 0.0, "avg_logprob": -0.11774701907716949, "compression_ratio": 1.7835497835497836, "no_speech_prob": 2.885101093852427e-05}, {"id": 73, "seek": 20120, "start": 212.35999999999999, "end": 214.28, "text": " necessary to describe all of math?", "tokens": [50922, 4818, 281, 6786, 439, 295, 5221, 30, 51018], "temperature": 0.0, "avg_logprob": -0.11774701907716949, "compression_ratio": 1.7835497835497836, "no_speech_prob": 2.885101093852427e-05}, {"id": 74, "seek": 20120, "start": 215.28, "end": 218.44, "text": " And so we can call this minimum subset of rules axioms", "tokens": [51068, 400, 370, 321, 393, 818, 341, 7285, 25993, 295, 4474, 6360, 72, 4785, 51226], "temperature": 0.0, "avg_logprob": -0.11774701907716949, "compression_ratio": 1.7835497835497836, "no_speech_prob": 2.885101093852427e-05}, {"id": 75, "seek": 20120, "start": 218.44, "end": 221.35999999999999, "text": " and this comes from the word Greek axioma", "tokens": [51226, 293, 341, 1487, 490, 264, 1349, 10281, 6360, 72, 6440, 51372], "temperature": 0.0, "avg_logprob": -0.11774701907716949, "compression_ratio": 1.7835497835497836, "no_speech_prob": 2.885101093852427e-05}, {"id": 76, "seek": 20120, "start": 221.35999999999999, "end": 223.2, "text": " that which is self-evident.", "tokens": [51372, 300, 597, 307, 2698, 12, 13379, 1078, 13, 51464], "temperature": 0.0, "avg_logprob": -0.11774701907716949, "compression_ratio": 1.7835497835497836, "no_speech_prob": 2.885101093852427e-05}, {"id": 77, "seek": 20120, "start": 223.2, "end": 226.79999999999998, "text": " And then we can call all of the other derived rules theorems", "tokens": [51464, 400, 550, 321, 393, 818, 439, 295, 264, 661, 18949, 4474, 10299, 2592, 51644], "temperature": 0.0, "avg_logprob": -0.11774701907716949, "compression_ratio": 1.7835497835497836, "no_speech_prob": 2.885101093852427e-05}, {"id": 78, "seek": 20120, "start": 228.28, "end": 231.0, "text": " which is like a proposition to be proved.", "tokens": [51718, 597, 307, 411, 257, 24830, 281, 312, 14617, 13, 51854], "temperature": 0.0, "avg_logprob": -0.11774701907716949, "compression_ratio": 1.7835497835497836, "no_speech_prob": 2.885101093852427e-05}, {"id": 79, "seek": 23100, "start": 231.0, "end": 233.48, "text": " And so the question is what are the axioms for math?", "tokens": [50364, 400, 370, 264, 1168, 307, 437, 366, 264, 6360, 72, 4785, 337, 5221, 30, 50488], "temperature": 0.0, "avg_logprob": -0.1438248417958492, "compression_ratio": 1.5372549019607844, "no_speech_prob": 7.36541478545405e-05}, {"id": 80, "seek": 23100, "start": 233.48, "end": 236.08, "text": " The minimum non-redundant set of rules", "tokens": [50488, 440, 7285, 2107, 12, 265, 769, 273, 394, 992, 295, 4474, 50618], "temperature": 0.0, "avg_logprob": -0.1438248417958492, "compression_ratio": 1.5372549019607844, "no_speech_prob": 7.36541478545405e-05}, {"id": 81, "seek": 23100, "start": 236.08, "end": 237.88, "text": " to define all of math.", "tokens": [50618, 281, 6964, 439, 295, 5221, 13, 50708], "temperature": 0.0, "avg_logprob": -0.1438248417958492, "compression_ratio": 1.5372549019607844, "no_speech_prob": 7.36541478545405e-05}, {"id": 82, "seek": 23100, "start": 239.68, "end": 242.92, "text": " This is a question that nobody really thought about", "tokens": [50798, 639, 307, 257, 1168, 300, 5079, 534, 1194, 466, 50960], "temperature": 0.0, "avg_logprob": -0.1438248417958492, "compression_ratio": 1.5372549019607844, "no_speech_prob": 7.36541478545405e-05}, {"id": 83, "seek": 23100, "start": 244.4, "end": 246.4, "text": " or nobody had a really compelling answer to", "tokens": [51034, 420, 5079, 632, 257, 534, 20050, 1867, 281, 51134], "temperature": 0.0, "avg_logprob": -0.1438248417958492, "compression_ratio": 1.5372549019607844, "no_speech_prob": 7.36541478545405e-05}, {"id": 84, "seek": 23100, "start": 246.4, "end": 247.56, "text": " until this guy came around.", "tokens": [51134, 1826, 341, 2146, 1361, 926, 13, 51192], "temperature": 0.0, "avg_logprob": -0.1438248417958492, "compression_ratio": 1.5372549019607844, "no_speech_prob": 7.36541478545405e-05}, {"id": 85, "seek": 23100, "start": 247.56, "end": 249.64, "text": " His name is Giuseppe Piano.", "tokens": [51192, 2812, 1315, 307, 15334, 438, 19833, 430, 6254, 13, 51296], "temperature": 0.0, "avg_logprob": -0.1438248417958492, "compression_ratio": 1.5372549019607844, "no_speech_prob": 7.36541478545405e-05}, {"id": 86, "seek": 23100, "start": 249.64, "end": 251.76, "text": " He was an Italian mathematician.", "tokens": [51296, 634, 390, 364, 10003, 48281, 13, 51402], "temperature": 0.0, "avg_logprob": -0.1438248417958492, "compression_ratio": 1.5372549019607844, "no_speech_prob": 7.36541478545405e-05}, {"id": 87, "seek": 23100, "start": 251.76, "end": 255.76, "text": " And in 1889, so a little over 100 years ago", "tokens": [51402, 400, 294, 2443, 21115, 11, 370, 257, 707, 670, 2319, 924, 2057, 51602], "temperature": 0.0, "avg_logprob": -0.1438248417958492, "compression_ratio": 1.5372549019607844, "no_speech_prob": 7.36541478545405e-05}, {"id": 88, "seek": 23100, "start": 257.08, "end": 258.32, "text": " he put forth these axioms.", "tokens": [51668, 415, 829, 5220, 613, 6360, 72, 4785, 13, 51730], "temperature": 0.0, "avg_logprob": -0.1438248417958492, "compression_ratio": 1.5372549019607844, "no_speech_prob": 7.36541478545405e-05}, {"id": 89, "seek": 23100, "start": 258.32, "end": 259.36, "text": " There's nine of them.", "tokens": [51730, 821, 311, 4949, 295, 552, 13, 51782], "temperature": 0.0, "avg_logprob": -0.1438248417958492, "compression_ratio": 1.5372549019607844, "no_speech_prob": 7.36541478545405e-05}, {"id": 90, "seek": 25936, "start": 260.2, "end": 261.88, "text": " Only three of them are interesting.", "tokens": [50406, 5686, 1045, 295, 552, 366, 1880, 13, 50490], "temperature": 0.0, "avg_logprob": -0.11567051045215913, "compression_ratio": 1.8068181818181819, "no_speech_prob": 0.00025702096172608435}, {"id": 91, "seek": 25936, "start": 261.88, "end": 263.96000000000004, "text": " So bear with me for a moment and keep in mind", "tokens": [50490, 407, 6155, 365, 385, 337, 257, 1623, 293, 1066, 294, 1575, 50594], "temperature": 0.0, "avg_logprob": -0.11567051045215913, "compression_ratio": 1.8068181818181819, "no_speech_prob": 0.00025702096172608435}, {"id": 92, "seek": 25936, "start": 263.96000000000004, "end": 266.48, "text": " like we're starting with a blank slate.", "tokens": [50594, 411, 321, 434, 2891, 365, 257, 8247, 39118, 13, 50720], "temperature": 0.0, "avg_logprob": -0.11567051045215913, "compression_ratio": 1.8068181818181819, "no_speech_prob": 0.00025702096172608435}, {"id": 93, "seek": 25936, "start": 266.48, "end": 268.12, "text": " So there's no numbers yet", "tokens": [50720, 407, 456, 311, 572, 3547, 1939, 50802], "temperature": 0.0, "avg_logprob": -0.11567051045215913, "compression_ratio": 1.8068181818181819, "no_speech_prob": 0.00025702096172608435}, {"id": 94, "seek": 25936, "start": 268.12, "end": 270.08000000000004, "text": " and we have to define what numbers are.", "tokens": [50802, 293, 321, 362, 281, 6964, 437, 3547, 366, 13, 50900], "temperature": 0.0, "avg_logprob": -0.11567051045215913, "compression_ratio": 1.8068181818181819, "no_speech_prob": 0.00025702096172608435}, {"id": 95, "seek": 25936, "start": 270.08000000000004, "end": 275.08000000000004, "text": " So first we define the first number, which is zero.", "tokens": [50900, 407, 700, 321, 6964, 264, 700, 1230, 11, 597, 307, 4018, 13, 51150], "temperature": 0.0, "avg_logprob": -0.11567051045215913, "compression_ratio": 1.8068181818181819, "no_speech_prob": 0.00025702096172608435}, {"id": 96, "seek": 25936, "start": 275.08000000000004, "end": 277.64, "text": " And so Piano says zero is a natural number.", "tokens": [51150, 400, 370, 430, 6254, 1619, 4018, 307, 257, 3303, 1230, 13, 51278], "temperature": 0.0, "avg_logprob": -0.11567051045215913, "compression_ratio": 1.8068181818181819, "no_speech_prob": 0.00025702096172608435}, {"id": 97, "seek": 25936, "start": 279.0, "end": 281.44, "text": " The next thing he does is define what equality is", "tokens": [51346, 440, 958, 551, 415, 775, 307, 6964, 437, 14949, 307, 51468], "temperature": 0.0, "avg_logprob": -0.11567051045215913, "compression_ratio": 1.8068181818181819, "no_speech_prob": 0.00025702096172608435}, {"id": 98, "seek": 25936, "start": 281.44, "end": 282.64, "text": " because we don't have that either, right?", "tokens": [51468, 570, 321, 500, 380, 362, 300, 2139, 11, 558, 30, 51528], "temperature": 0.0, "avg_logprob": -0.11567051045215913, "compression_ratio": 1.8068181818181819, "no_speech_prob": 0.00025702096172608435}, {"id": 99, "seek": 25936, "start": 282.64, "end": 285.52000000000004, "text": " So for a thing x, x is equal to x.", "tokens": [51528, 407, 337, 257, 551, 2031, 11, 2031, 307, 2681, 281, 2031, 13, 51672], "temperature": 0.0, "avg_logprob": -0.11567051045215913, "compression_ratio": 1.8068181818181819, "no_speech_prob": 0.00025702096172608435}, {"id": 100, "seek": 25936, "start": 285.52000000000004, "end": 287.32, "text": " This is what equality is.", "tokens": [51672, 639, 307, 437, 14949, 307, 13, 51762], "temperature": 0.0, "avg_logprob": -0.11567051045215913, "compression_ratio": 1.8068181818181819, "no_speech_prob": 0.00025702096172608435}, {"id": 101, "seek": 25936, "start": 287.32, "end": 288.8, "text": " This one is not very interesting either.", "tokens": [51762, 639, 472, 307, 406, 588, 1880, 2139, 13, 51836], "temperature": 0.0, "avg_logprob": -0.11567051045215913, "compression_ratio": 1.8068181818181819, "no_speech_prob": 0.00025702096172608435}, {"id": 102, "seek": 28880, "start": 288.8, "end": 291.08, "text": " If x equals y, y also equals x.", "tokens": [50364, 759, 2031, 6915, 288, 11, 288, 611, 6915, 2031, 13, 50478], "temperature": 0.0, "avg_logprob": -0.13524008508938462, "compression_ratio": 2.2019704433497536, "no_speech_prob": 5.828282519360073e-05}, {"id": 103, "seek": 28880, "start": 291.08, "end": 294.08, "text": " If x equals y and y equals z, then x equals z.", "tokens": [50478, 759, 2031, 6915, 288, 293, 288, 6915, 710, 11, 550, 2031, 6915, 710, 13, 50628], "temperature": 0.0, "avg_logprob": -0.13524008508938462, "compression_ratio": 2.2019704433497536, "no_speech_prob": 5.828282519360073e-05}, {"id": 104, "seek": 28880, "start": 294.08, "end": 295.52000000000004, "text": " This is the transit property.", "tokens": [50628, 639, 307, 264, 17976, 4707, 13, 50700], "temperature": 0.0, "avg_logprob": -0.13524008508938462, "compression_ratio": 2.2019704433497536, "no_speech_prob": 5.828282519360073e-05}, {"id": 105, "seek": 28880, "start": 297.44, "end": 300.12, "text": " If b is a natural number and a equals b,", "tokens": [50796, 759, 272, 307, 257, 3303, 1230, 293, 257, 6915, 272, 11, 50930], "temperature": 0.0, "avg_logprob": -0.13524008508938462, "compression_ratio": 2.2019704433497536, "no_speech_prob": 5.828282519360073e-05}, {"id": 106, "seek": 28880, "start": 300.12, "end": 302.2, "text": " then a is also a natural number.", "tokens": [50930, 550, 257, 307, 611, 257, 3303, 1230, 13, 51034], "temperature": 0.0, "avg_logprob": -0.13524008508938462, "compression_ratio": 2.2019704433497536, "no_speech_prob": 5.828282519360073e-05}, {"id": 107, "seek": 28880, "start": 302.2, "end": 304.64, "text": " So this is sort of saying we have this collection", "tokens": [51034, 407, 341, 307, 1333, 295, 1566, 321, 362, 341, 5765, 51156], "temperature": 0.0, "avg_logprob": -0.13524008508938462, "compression_ratio": 2.2019704433497536, "no_speech_prob": 5.828282519360073e-05}, {"id": 108, "seek": 28880, "start": 304.64, "end": 305.88, "text": " of things called natural numbers.", "tokens": [51156, 295, 721, 1219, 3303, 3547, 13, 51218], "temperature": 0.0, "avg_logprob": -0.13524008508938462, "compression_ratio": 2.2019704433497536, "no_speech_prob": 5.828282519360073e-05}, {"id": 109, "seek": 28880, "start": 305.88, "end": 308.76, "text": " Right now we only have one of them, zero.", "tokens": [51218, 1779, 586, 321, 787, 362, 472, 295, 552, 11, 4018, 13, 51362], "temperature": 0.0, "avg_logprob": -0.13524008508938462, "compression_ratio": 2.2019704433497536, "no_speech_prob": 5.828282519360073e-05}, {"id": 110, "seek": 28880, "start": 308.76, "end": 312.28000000000003, "text": " And if b is a natural number and a equals b,", "tokens": [51362, 400, 498, 272, 307, 257, 3303, 1230, 293, 257, 6915, 272, 11, 51538], "temperature": 0.0, "avg_logprob": -0.13524008508938462, "compression_ratio": 2.2019704433497536, "no_speech_prob": 5.828282519360073e-05}, {"id": 111, "seek": 28880, "start": 312.28000000000003, "end": 314.24, "text": " then a is also a natural number.", "tokens": [51538, 550, 257, 307, 611, 257, 3303, 1230, 13, 51636], "temperature": 0.0, "avg_logprob": -0.13524008508938462, "compression_ratio": 2.2019704433497536, "no_speech_prob": 5.828282519360073e-05}, {"id": 112, "seek": 28880, "start": 314.24, "end": 316.04, "text": " So you have this like glue-like property", "tokens": [51636, 407, 291, 362, 341, 411, 8998, 12, 4092, 4707, 51726], "temperature": 0.0, "avg_logprob": -0.13524008508938462, "compression_ratio": 2.2019704433497536, "no_speech_prob": 5.828282519360073e-05}, {"id": 113, "seek": 28880, "start": 316.04, "end": 317.2, "text": " of natural numbers.", "tokens": [51726, 295, 3303, 3547, 13, 51784], "temperature": 0.0, "avg_logprob": -0.13524008508938462, "compression_ratio": 2.2019704433497536, "no_speech_prob": 5.828282519360073e-05}, {"id": 114, "seek": 31880, "start": 319.48, "end": 320.96000000000004, "text": " This is an interesting one.", "tokens": [50398, 639, 307, 364, 1880, 472, 13, 50472], "temperature": 0.0, "avg_logprob": -0.10606525127704326, "compression_ratio": 1.7976653696498055, "no_speech_prob": 0.00011409310536691919}, {"id": 115, "seek": 31880, "start": 320.96000000000004, "end": 324.24, "text": " We define this function s such that s of n", "tokens": [50472, 492, 6964, 341, 2445, 262, 1270, 300, 262, 295, 297, 50636], "temperature": 0.0, "avg_logprob": -0.10606525127704326, "compression_ratio": 1.7976653696498055, "no_speech_prob": 0.00011409310536691919}, {"id": 116, "seek": 31880, "start": 324.24, "end": 325.12, "text": " is a natural number.", "tokens": [50636, 307, 257, 3303, 1230, 13, 50680], "temperature": 0.0, "avg_logprob": -0.10606525127704326, "compression_ratio": 1.7976653696498055, "no_speech_prob": 0.00011409310536691919}, {"id": 117, "seek": 31880, "start": 325.12, "end": 327.24, "text": " s is like a successor function.", "tokens": [50680, 262, 307, 411, 257, 31864, 2445, 13, 50786], "temperature": 0.0, "avg_logprob": -0.10606525127704326, "compression_ratio": 1.7976653696498055, "no_speech_prob": 0.00011409310536691919}, {"id": 118, "seek": 31880, "start": 327.24, "end": 328.84000000000003, "text": " It's what it literally stands for.", "tokens": [50786, 467, 311, 437, 309, 3736, 7382, 337, 13, 50866], "temperature": 0.0, "avg_logprob": -0.10606525127704326, "compression_ratio": 1.7976653696498055, "no_speech_prob": 0.00011409310536691919}, {"id": 119, "seek": 31880, "start": 328.84000000000003, "end": 332.24, "text": " And so now we have a way of going from zero", "tokens": [50866, 400, 370, 586, 321, 362, 257, 636, 295, 516, 490, 4018, 51036], "temperature": 0.0, "avg_logprob": -0.10606525127704326, "compression_ratio": 1.7976653696498055, "no_speech_prob": 0.00011409310536691919}, {"id": 120, "seek": 31880, "start": 332.24, "end": 335.52, "text": " to producing the successor of zero with this function.", "tokens": [51036, 281, 10501, 264, 31864, 295, 4018, 365, 341, 2445, 13, 51200], "temperature": 0.0, "avg_logprob": -0.10606525127704326, "compression_ratio": 1.7976653696498055, "no_speech_prob": 0.00011409310536691919}, {"id": 121, "seek": 31880, "start": 335.52, "end": 338.76, "text": " So s of zero is the successor of zero", "tokens": [51200, 407, 262, 295, 4018, 307, 264, 31864, 295, 4018, 51362], "temperature": 0.0, "avg_logprob": -0.10606525127704326, "compression_ratio": 1.7976653696498055, "no_speech_prob": 0.00011409310536691919}, {"id": 122, "seek": 31880, "start": 338.76, "end": 341.12, "text": " and s of zero is also a natural number.", "tokens": [51362, 293, 262, 295, 4018, 307, 611, 257, 3303, 1230, 13, 51480], "temperature": 0.0, "avg_logprob": -0.10606525127704326, "compression_ratio": 1.7976653696498055, "no_speech_prob": 0.00011409310536691919}, {"id": 123, "seek": 31880, "start": 341.12, "end": 342.28000000000003, "text": " Is everyone following?", "tokens": [51480, 1119, 1518, 3480, 30, 51538], "temperature": 0.0, "avg_logprob": -0.10606525127704326, "compression_ratio": 1.7976653696498055, "no_speech_prob": 0.00011409310536691919}, {"id": 124, "seek": 31880, "start": 343.32, "end": 345.36, "text": " And I think the best way to go about this", "tokens": [51590, 400, 286, 519, 264, 1151, 636, 281, 352, 466, 341, 51692], "temperature": 0.0, "avg_logprob": -0.10606525127704326, "compression_ratio": 1.7976653696498055, "no_speech_prob": 0.00011409310536691919}, {"id": 125, "seek": 31880, "start": 345.36, "end": 346.96000000000004, "text": " is to just immediately stop me", "tokens": [51692, 307, 281, 445, 4258, 1590, 385, 51772], "temperature": 0.0, "avg_logprob": -0.10606525127704326, "compression_ratio": 1.7976653696498055, "no_speech_prob": 0.00011409310536691919}, {"id": 126, "seek": 31880, "start": 346.96000000000004, "end": 348.08000000000004, "text": " if you guys have any questions", "tokens": [51772, 498, 291, 1074, 362, 604, 1651, 51828], "temperature": 0.0, "avg_logprob": -0.10606525127704326, "compression_ratio": 1.7976653696498055, "no_speech_prob": 0.00011409310536691919}, {"id": 127, "seek": 34808, "start": 348.2, "end": 350.64, "text": " because this is gonna get more and more complex.", "tokens": [50370, 570, 341, 307, 799, 483, 544, 293, 544, 3997, 13, 50492], "temperature": 0.0, "avg_logprob": -0.15438137883725372, "compression_ratio": 1.811659192825112, "no_speech_prob": 0.0002531004720367491}, {"id": 128, "seek": 34808, "start": 350.64, "end": 352.2, "text": " Sounds good?", "tokens": [50492, 14576, 665, 30, 50570], "temperature": 0.0, "avg_logprob": -0.15438137883725372, "compression_ratio": 1.811659192825112, "no_speech_prob": 0.0002531004720367491}, {"id": 129, "seek": 34808, "start": 352.2, "end": 353.03999999999996, "text": " Great.", "tokens": [50570, 3769, 13, 50612], "temperature": 0.0, "avg_logprob": -0.15438137883725372, "compression_ratio": 1.811659192825112, "no_speech_prob": 0.0002531004720367491}, {"id": 130, "seek": 34808, "start": 354.64, "end": 356.47999999999996, "text": " m and n are equal to each other", "tokens": [50692, 275, 293, 297, 366, 2681, 281, 1184, 661, 50784], "temperature": 0.0, "avg_logprob": -0.15438137883725372, "compression_ratio": 1.811659192825112, "no_speech_prob": 0.0002531004720367491}, {"id": 131, "seek": 34808, "start": 356.47999999999996, "end": 359.4, "text": " if and only if their successors are equal to each other.", "tokens": [50784, 498, 293, 787, 498, 641, 2245, 830, 366, 2681, 281, 1184, 661, 13, 50930], "temperature": 0.0, "avg_logprob": -0.15438137883725372, "compression_ratio": 1.811659192825112, "no_speech_prob": 0.0002531004720367491}, {"id": 132, "seek": 34808, "start": 361.24, "end": 365.28, "text": " There's no n such that the successor of n equals zero.", "tokens": [51022, 821, 311, 572, 297, 1270, 300, 264, 31864, 295, 297, 6915, 4018, 13, 51224], "temperature": 0.0, "avg_logprob": -0.15438137883725372, "compression_ratio": 1.811659192825112, "no_speech_prob": 0.0002531004720367491}, {"id": 133, "seek": 34808, "start": 365.28, "end": 367.79999999999995, "text": " So here we're not going into negative numbers.", "tokens": [51224, 407, 510, 321, 434, 406, 516, 666, 3671, 3547, 13, 51350], "temperature": 0.0, "avg_logprob": -0.15438137883725372, "compression_ratio": 1.811659192825112, "no_speech_prob": 0.0002531004720367491}, {"id": 134, "seek": 34808, "start": 367.79999999999995, "end": 369.79999999999995, "text": " We're just defining the natural numbers.", "tokens": [51350, 492, 434, 445, 17827, 264, 3303, 3547, 13, 51450], "temperature": 0.0, "avg_logprob": -0.15438137883725372, "compression_ratio": 1.811659192825112, "no_speech_prob": 0.0002531004720367491}, {"id": 135, "seek": 34808, "start": 370.91999999999996, "end": 372.91999999999996, "text": " So there's no successor for zero.", "tokens": [51506, 407, 456, 311, 572, 31864, 337, 4018, 13, 51606], "temperature": 0.0, "avg_logprob": -0.15438137883725372, "compression_ratio": 1.811659192825112, "no_speech_prob": 0.0002531004720367491}, {"id": 136, "seek": 34808, "start": 372.91999999999996, "end": 374.96, "text": " Or zero is not the successor of anything.", "tokens": [51606, 1610, 4018, 307, 406, 264, 31864, 295, 1340, 13, 51708], "temperature": 0.0, "avg_logprob": -0.15438137883725372, "compression_ratio": 1.811659192825112, "no_speech_prob": 0.0002531004720367491}, {"id": 137, "seek": 34808, "start": 374.96, "end": 376.84, "text": " That's what this is saying.", "tokens": [51708, 663, 311, 437, 341, 307, 1566, 13, 51802], "temperature": 0.0, "avg_logprob": -0.15438137883725372, "compression_ratio": 1.811659192825112, "no_speech_prob": 0.0002531004720367491}, {"id": 138, "seek": 37684, "start": 376.84, "end": 378.88, "text": " And then finally, the very last one,", "tokens": [50364, 400, 550, 2721, 11, 264, 588, 1036, 472, 11, 50466], "temperature": 0.0, "avg_logprob": -0.1430891812857935, "compression_ratio": 1.9526315789473685, "no_speech_prob": 0.00011590476788114756}, {"id": 139, "seek": 37684, "start": 378.88, "end": 382.76, "text": " if k is a set such that zero is in k", "tokens": [50466, 498, 350, 307, 257, 992, 1270, 300, 4018, 307, 294, 350, 50660], "temperature": 0.0, "avg_logprob": -0.1430891812857935, "compression_ratio": 1.9526315789473685, "no_speech_prob": 0.00011590476788114756}, {"id": 140, "seek": 37684, "start": 384.11999999999995, "end": 388.44, "text": " and if n is in k, it means that s and n is in k,", "tokens": [50728, 293, 498, 297, 307, 294, 350, 11, 309, 1355, 300, 262, 293, 297, 307, 294, 350, 11, 50944], "temperature": 0.0, "avg_logprob": -0.1430891812857935, "compression_ratio": 1.9526315789473685, "no_speech_prob": 0.00011590476788114756}, {"id": 141, "seek": 37684, "start": 390.15999999999997, "end": 392.32, "text": " then k contains every natural number.", "tokens": [51030, 550, 350, 8306, 633, 3303, 1230, 13, 51138], "temperature": 0.0, "avg_logprob": -0.1430891812857935, "compression_ratio": 1.9526315789473685, "no_speech_prob": 0.00011590476788114756}, {"id": 142, "seek": 37684, "start": 393.62, "end": 396.84, "text": " This is like the base case, zero is in k,", "tokens": [51203, 639, 307, 411, 264, 3096, 1389, 11, 4018, 307, 294, 350, 11, 51364], "temperature": 0.0, "avg_logprob": -0.1430891812857935, "compression_ratio": 1.9526315789473685, "no_speech_prob": 0.00011590476788114756}, {"id": 143, "seek": 37684, "start": 396.84, "end": 398.84, "text": " then the inductive case, if n is in k,", "tokens": [51364, 550, 264, 31612, 488, 1389, 11, 498, 297, 307, 294, 350, 11, 51464], "temperature": 0.0, "avg_logprob": -0.1430891812857935, "compression_ratio": 1.9526315789473685, "no_speech_prob": 0.00011590476788114756}, {"id": 144, "seek": 37684, "start": 398.84, "end": 400.76, "text": " it means that s of n is in k", "tokens": [51464, 309, 1355, 300, 262, 295, 297, 307, 294, 350, 51560], "temperature": 0.0, "avg_logprob": -0.1430891812857935, "compression_ratio": 1.9526315789473685, "no_speech_prob": 0.00011590476788114756}, {"id": 145, "seek": 37684, "start": 400.76, "end": 403.64, "text": " and then therefore k contains all the natural numbers.", "tokens": [51560, 293, 550, 4412, 350, 8306, 439, 264, 3303, 3547, 13, 51704], "temperature": 0.0, "avg_logprob": -0.1430891812857935, "compression_ratio": 1.9526315789473685, "no_speech_prob": 0.00011590476788114756}, {"id": 146, "seek": 37684, "start": 403.64, "end": 406.44, "text": " So here they're saying there's no like loops.", "tokens": [51704, 407, 510, 436, 434, 1566, 456, 311, 572, 411, 16121, 13, 51844], "temperature": 0.0, "avg_logprob": -0.1430891812857935, "compression_ratio": 1.9526315789473685, "no_speech_prob": 0.00011590476788114756}, {"id": 147, "seek": 40644, "start": 406.92, "end": 408.71999999999997, "text": " It's just like this directed graph", "tokens": [50388, 467, 311, 445, 411, 341, 12898, 4295, 50478], "temperature": 0.0, "avg_logprob": -0.15285044702990302, "compression_ratio": 1.6748971193415638, "no_speech_prob": 0.0001880985510069877}, {"id": 148, "seek": 40644, "start": 408.71999999999997, "end": 411.12, "text": " that goes all the way out to infinity.", "tokens": [50478, 300, 1709, 439, 264, 636, 484, 281, 13202, 13, 50598], "temperature": 0.0, "avg_logprob": -0.15285044702990302, "compression_ratio": 1.6748971193415638, "no_speech_prob": 0.0001880985510069877}, {"id": 149, "seek": 40644, "start": 411.12, "end": 411.96, "text": " Sound good?", "tokens": [50598, 14673, 665, 30, 50640], "temperature": 0.0, "avg_logprob": -0.15285044702990302, "compression_ratio": 1.6748971193415638, "no_speech_prob": 0.0001880985510069877}, {"id": 150, "seek": 40644, "start": 413.08, "end": 413.92, "text": " This is it.", "tokens": [50696, 639, 307, 309, 13, 50738], "temperature": 0.0, "avg_logprob": -0.15285044702990302, "compression_ratio": 1.6748971193415638, "no_speech_prob": 0.0001880985510069877}, {"id": 151, "seek": 40644, "start": 415.0, "end": 417.16, "text": " This is all you need to define all of math.", "tokens": [50792, 639, 307, 439, 291, 643, 281, 6964, 439, 295, 5221, 13, 50900], "temperature": 0.0, "avg_logprob": -0.15285044702990302, "compression_ratio": 1.6748971193415638, "no_speech_prob": 0.0001880985510069877}, {"id": 152, "seek": 40644, "start": 418.8, "end": 423.8, "text": " So you'll notice we never define numbers besides zero.", "tokens": [50982, 407, 291, 603, 3449, 321, 1128, 6964, 3547, 11868, 4018, 13, 51232], "temperature": 0.0, "avg_logprob": -0.15285044702990302, "compression_ratio": 1.6748971193415638, "no_speech_prob": 0.0001880985510069877}, {"id": 153, "seek": 40644, "start": 423.84, "end": 425.84, "text": " We just define the concept of zero, right?", "tokens": [51234, 492, 445, 6964, 264, 3410, 295, 4018, 11, 558, 30, 51334], "temperature": 0.0, "avg_logprob": -0.15285044702990302, "compression_ratio": 1.6748971193415638, "no_speech_prob": 0.0001880985510069877}, {"id": 154, "seek": 40644, "start": 425.84, "end": 428.08, "text": " And yet we use these symbols like one and two", "tokens": [51334, 400, 1939, 321, 764, 613, 16944, 411, 472, 293, 732, 51446], "temperature": 0.0, "avg_logprob": -0.15285044702990302, "compression_ratio": 1.6748971193415638, "no_speech_prob": 0.0001880985510069877}, {"id": 155, "seek": 40644, "start": 428.08, "end": 430.4, "text": " and three and four and so on.", "tokens": [51446, 293, 1045, 293, 1451, 293, 370, 322, 13, 51562], "temperature": 0.0, "avg_logprob": -0.15285044702990302, "compression_ratio": 1.6748971193415638, "no_speech_prob": 0.0001880985510069877}, {"id": 156, "seek": 40644, "start": 430.4, "end": 432.0, "text": " And here I'm proposing the concept", "tokens": [51562, 400, 510, 286, 478, 29939, 264, 3410, 51642], "temperature": 0.0, "avg_logprob": -0.15285044702990302, "compression_ratio": 1.6748971193415638, "no_speech_prob": 0.0001880985510069877}, {"id": 157, "seek": 40644, "start": 432.0, "end": 436.34, "text": " that one is actually just syntactic sugar for s of zero.", "tokens": [51642, 300, 472, 307, 767, 445, 23980, 19892, 5076, 337, 262, 295, 4018, 13, 51859], "temperature": 0.0, "avg_logprob": -0.15285044702990302, "compression_ratio": 1.6748971193415638, "no_speech_prob": 0.0001880985510069877}, {"id": 158, "seek": 43644, "start": 436.76, "end": 439.56, "text": " Which is to say that these two forms are equal to each other", "tokens": [50380, 3013, 307, 281, 584, 300, 613, 732, 6422, 366, 2681, 281, 1184, 661, 50520], "temperature": 0.0, "avg_logprob": -0.12698307193693567, "compression_ratio": 1.6746987951807228, "no_speech_prob": 0.00022330803039949387}, {"id": 159, "seek": 43644, "start": 439.56, "end": 440.76, "text": " and if we were more precise,", "tokens": [50520, 293, 498, 321, 645, 544, 13600, 11, 50580], "temperature": 0.0, "avg_logprob": -0.12698307193693567, "compression_ratio": 1.6746987951807228, "no_speech_prob": 0.00022330803039949387}, {"id": 160, "seek": 43644, "start": 440.76, "end": 443.12, "text": " we would actually prefer the form on the right,", "tokens": [50580, 321, 576, 767, 4382, 264, 1254, 322, 264, 558, 11, 50698], "temperature": 0.0, "avg_logprob": -0.12698307193693567, "compression_ratio": 1.6746987951807228, "no_speech_prob": 0.00022330803039949387}, {"id": 161, "seek": 43644, "start": 443.12, "end": 444.96, "text": " but it would be kind of annoying.", "tokens": [50698, 457, 309, 576, 312, 733, 295, 11304, 13, 50790], "temperature": 0.0, "avg_logprob": -0.12698307193693567, "compression_ratio": 1.6746987951807228, "no_speech_prob": 0.00022330803039949387}, {"id": 162, "seek": 43644, "start": 444.96, "end": 446.88, "text": " And so we have this concept of one", "tokens": [50790, 400, 370, 321, 362, 341, 3410, 295, 472, 50886], "temperature": 0.0, "avg_logprob": -0.12698307193693567, "compression_ratio": 1.6746987951807228, "no_speech_prob": 0.00022330803039949387}, {"id": 163, "seek": 43644, "start": 446.88, "end": 450.84, "text": " and then two is the successor of one and so on.", "tokens": [50886, 293, 550, 732, 307, 264, 31864, 295, 472, 293, 370, 322, 13, 51084], "temperature": 0.0, "avg_logprob": -0.12698307193693567, "compression_ratio": 1.6746987951807228, "no_speech_prob": 0.00022330803039949387}, {"id": 164, "seek": 43644, "start": 451.84, "end": 454.4, "text": " Seven is actually s of s of s of zero.", "tokens": [51134, 14868, 307, 767, 262, 295, 262, 295, 262, 295, 4018, 13, 51262], "temperature": 0.0, "avg_logprob": -0.12698307193693567, "compression_ratio": 1.6746987951807228, "no_speech_prob": 0.00022330803039949387}, {"id": 165, "seek": 43644, "start": 454.4, "end": 456.24, "text": " I think you guys get the idea, right?", "tokens": [51262, 286, 519, 291, 1074, 483, 264, 1558, 11, 558, 30, 51354], "temperature": 0.0, "avg_logprob": -0.12698307193693567, "compression_ratio": 1.6746987951807228, "no_speech_prob": 0.00022330803039949387}, {"id": 166, "seek": 43644, "start": 457.68, "end": 460.0, "text": " We haven't added any new information here, right?", "tokens": [51426, 492, 2378, 380, 3869, 604, 777, 1589, 510, 11, 558, 30, 51542], "temperature": 0.0, "avg_logprob": -0.12698307193693567, "compression_ratio": 1.6746987951807228, "no_speech_prob": 0.00022330803039949387}, {"id": 167, "seek": 43644, "start": 460.0, "end": 463.0, "text": " And in theory, when we do our math,", "tokens": [51542, 400, 294, 5261, 11, 562, 321, 360, 527, 5221, 11, 51692], "temperature": 0.0, "avg_logprob": -0.12698307193693567, "compression_ratio": 1.6746987951807228, "no_speech_prob": 0.00022330803039949387}, {"id": 168, "seek": 46300, "start": 464.0, "end": 468.76, "text": " we should prefer to reduce, if we were a piano,", "tokens": [50414, 321, 820, 4382, 281, 5407, 11, 498, 321, 645, 257, 9211, 11, 50652], "temperature": 0.0, "avg_logprob": -0.14506096515840697, "compression_ratio": 1.6696428571428572, "no_speech_prob": 0.00014647652278654277}, {"id": 169, "seek": 46300, "start": 468.76, "end": 471.64, "text": " we would prefer to reduce the form all the way down", "tokens": [50652, 321, 576, 4382, 281, 5407, 264, 1254, 439, 264, 636, 760, 50796], "temperature": 0.0, "avg_logprob": -0.14506096515840697, "compression_ratio": 1.6696428571428572, "no_speech_prob": 0.00014647652278654277}, {"id": 170, "seek": 46300, "start": 471.64, "end": 473.56, "text": " into like this thing over here,", "tokens": [50796, 666, 411, 341, 551, 670, 510, 11, 50892], "temperature": 0.0, "avg_logprob": -0.14506096515840697, "compression_ratio": 1.6696428571428572, "no_speech_prob": 0.00014647652278654277}, {"id": 171, "seek": 46300, "start": 473.56, "end": 474.84, "text": " but that's just too confusing.", "tokens": [50892, 457, 300, 311, 445, 886, 13181, 13, 50956], "temperature": 0.0, "avg_logprob": -0.14506096515840697, "compression_ratio": 1.6696428571428572, "no_speech_prob": 0.00014647652278654277}, {"id": 172, "seek": 46300, "start": 474.84, "end": 477.28, "text": " So we're okay with the syntactic sugar representation", "tokens": [50956, 407, 321, 434, 1392, 365, 264, 23980, 19892, 5076, 10290, 51078], "temperature": 0.0, "avg_logprob": -0.14506096515840697, "compression_ratio": 1.6696428571428572, "no_speech_prob": 0.00014647652278654277}, {"id": 173, "seek": 46300, "start": 477.28, "end": 478.76, "text": " on the left.", "tokens": [51078, 322, 264, 1411, 13, 51152], "temperature": 0.0, "avg_logprob": -0.14506096515840697, "compression_ratio": 1.6696428571428572, "no_speech_prob": 0.00014647652278654277}, {"id": 174, "seek": 46300, "start": 478.76, "end": 479.6, "text": " Sound good?", "tokens": [51152, 14673, 665, 30, 51194], "temperature": 0.0, "avg_logprob": -0.14506096515840697, "compression_ratio": 1.6696428571428572, "no_speech_prob": 0.00014647652278654277}, {"id": 175, "seek": 46300, "start": 481.56, "end": 485.28, "text": " Okay, so syntactic sugar is sort of convenience rules", "tokens": [51292, 1033, 11, 370, 23980, 19892, 5076, 307, 1333, 295, 19283, 4474, 51478], "temperature": 0.0, "avg_logprob": -0.14506096515840697, "compression_ratio": 1.6696428571428572, "no_speech_prob": 0.00014647652278654277}, {"id": 176, "seek": 46300, "start": 485.28, "end": 488.76, "text": " or symbols that we don't need to further reduce down", "tokens": [51478, 420, 16944, 300, 321, 500, 380, 643, 281, 3052, 5407, 760, 51652], "temperature": 0.0, "avg_logprob": -0.14506096515840697, "compression_ratio": 1.6696428571428572, "no_speech_prob": 0.00014647652278654277}, {"id": 177, "seek": 46300, "start": 488.76, "end": 491.08, "text": " into the primitive forms.", "tokens": [51652, 666, 264, 28540, 6422, 13, 51768], "temperature": 0.0, "avg_logprob": -0.14506096515840697, "compression_ratio": 1.6696428571428572, "no_speech_prob": 0.00014647652278654277}, {"id": 178, "seek": 49108, "start": 491.08, "end": 494.47999999999996, "text": " So let's now define addition.", "tokens": [50364, 407, 718, 311, 586, 6964, 4500, 13, 50534], "temperature": 0.0, "avg_logprob": -0.17475630597370426, "compression_ratio": 1.7385892116182573, "no_speech_prob": 3.704835762619041e-05}, {"id": 179, "seek": 49108, "start": 495.47999999999996, "end": 497.15999999999997, "text": " So addition can be thought of as an operation", "tokens": [50584, 407, 4500, 393, 312, 1194, 295, 382, 364, 6916, 50668], "temperature": 0.0, "avg_logprob": -0.17475630597370426, "compression_ratio": 1.7385892116182573, "no_speech_prob": 3.704835762619041e-05}, {"id": 180, "seek": 49108, "start": 497.15999999999997, "end": 500.52, "text": " that maps two natural numbers to another natural number,", "tokens": [50668, 300, 11317, 732, 3303, 3547, 281, 1071, 3303, 1230, 11, 50836], "temperature": 0.0, "avg_logprob": -0.17475630597370426, "compression_ratio": 1.7385892116182573, "no_speech_prob": 3.704835762619041e-05}, {"id": 181, "seek": 49108, "start": 500.52, "end": 501.35999999999996, "text": " right?", "tokens": [50836, 558, 30, 50878], "temperature": 0.0, "avg_logprob": -0.17475630597370426, "compression_ratio": 1.7385892116182573, "no_speech_prob": 3.704835762619041e-05}, {"id": 182, "seek": 49108, "start": 501.35999999999996, "end": 503.8, "text": " And the syntax is a plus b, so you guys know.", "tokens": [50878, 400, 264, 28431, 307, 257, 1804, 272, 11, 370, 291, 1074, 458, 13, 51000], "temperature": 0.0, "avg_logprob": -0.17475630597370426, "compression_ratio": 1.7385892116182573, "no_speech_prob": 3.704835762619041e-05}, {"id": 183, "seek": 49108, "start": 504.76, "end": 507.02, "text": " And we just need two rules.", "tokens": [51048, 400, 321, 445, 643, 732, 4474, 13, 51161], "temperature": 0.0, "avg_logprob": -0.17475630597370426, "compression_ratio": 1.7385892116182573, "no_speech_prob": 3.704835762619041e-05}, {"id": 184, "seek": 49108, "start": 507.02, "end": 508.79999999999995, "text": " The first is sort of the base case.", "tokens": [51161, 440, 700, 307, 1333, 295, 264, 3096, 1389, 13, 51250], "temperature": 0.0, "avg_logprob": -0.17475630597370426, "compression_ratio": 1.7385892116182573, "no_speech_prob": 3.704835762619041e-05}, {"id": 185, "seek": 49108, "start": 508.79999999999995, "end": 511.4, "text": " a plus zero equals a, sort of obvious.", "tokens": [51250, 257, 1804, 4018, 6915, 257, 11, 1333, 295, 6322, 13, 51380], "temperature": 0.0, "avg_logprob": -0.17475630597370426, "compression_ratio": 1.7385892116182573, "no_speech_prob": 3.704835762619041e-05}, {"id": 186, "seek": 49108, "start": 512.72, "end": 513.88, "text": " This one you might have to pause", "tokens": [51446, 639, 472, 291, 1062, 362, 281, 10465, 51504], "temperature": 0.0, "avg_logprob": -0.17475630597370426, "compression_ratio": 1.7385892116182573, "no_speech_prob": 3.704835762619041e-05}, {"id": 187, "seek": 49108, "start": 513.88, "end": 515.68, "text": " and think about it a little bit.", "tokens": [51504, 293, 519, 466, 309, 257, 707, 857, 13, 51594], "temperature": 0.0, "avg_logprob": -0.17475630597370426, "compression_ratio": 1.7385892116182573, "no_speech_prob": 3.704835762619041e-05}, {"id": 188, "seek": 49108, "start": 515.68, "end": 518.6, "text": " a plus the successor of b", "tokens": [51594, 257, 1804, 264, 31864, 295, 272, 51740], "temperature": 0.0, "avg_logprob": -0.17475630597370426, "compression_ratio": 1.7385892116182573, "no_speech_prob": 3.704835762619041e-05}, {"id": 189, "seek": 49108, "start": 518.6, "end": 520.52, "text": " is equal to the successor of a plus b.", "tokens": [51740, 307, 2681, 281, 264, 31864, 295, 257, 1804, 272, 13, 51836], "temperature": 0.0, "avg_logprob": -0.17475630597370426, "compression_ratio": 1.7385892116182573, "no_speech_prob": 3.704835762619041e-05}, {"id": 190, "seek": 52108, "start": 521.6800000000001, "end": 524.88, "text": " So what we're doing over here is b", "tokens": [50394, 407, 437, 321, 434, 884, 670, 510, 307, 272, 50554], "temperature": 0.0, "avg_logprob": -0.13386328202964615, "compression_ratio": 1.7153284671532847, "no_speech_prob": 9.458074055146426e-05}, {"id": 191, "seek": 52108, "start": 524.88, "end": 527.96, "text": " without this little s in the wrapping, right?", "tokens": [50554, 1553, 341, 707, 262, 294, 264, 21993, 11, 558, 30, 50708], "temperature": 0.0, "avg_logprob": -0.13386328202964615, "compression_ratio": 1.7153284671532847, "no_speech_prob": 9.458074055146426e-05}, {"id": 192, "seek": 52108, "start": 527.96, "end": 529.4000000000001, "text": " We're just kind of taking this s", "tokens": [50708, 492, 434, 445, 733, 295, 1940, 341, 262, 50780], "temperature": 0.0, "avg_logprob": -0.13386328202964615, "compression_ratio": 1.7153284671532847, "no_speech_prob": 9.458074055146426e-05}, {"id": 193, "seek": 52108, "start": 529.4000000000001, "end": 532.48, "text": " and wrapping it around the whole thing, right?", "tokens": [50780, 293, 21993, 309, 926, 264, 1379, 551, 11, 558, 30, 50934], "temperature": 0.0, "avg_logprob": -0.13386328202964615, "compression_ratio": 1.7153284671532847, "no_speech_prob": 9.458074055146426e-05}, {"id": 194, "seek": 52108, "start": 532.48, "end": 534.88, "text": " And so the term on the right, b,", "tokens": [50934, 400, 370, 264, 1433, 322, 264, 558, 11, 272, 11, 51054], "temperature": 0.0, "avg_logprob": -0.13386328202964615, "compression_ratio": 1.7153284671532847, "no_speech_prob": 9.458074055146426e-05}, {"id": 195, "seek": 52108, "start": 534.88, "end": 537.9000000000001, "text": " is actually one less than the term of successor of b.", "tokens": [51054, 307, 767, 472, 1570, 813, 264, 1433, 295, 31864, 295, 272, 13, 51205], "temperature": 0.0, "avg_logprob": -0.13386328202964615, "compression_ratio": 1.7153284671532847, "no_speech_prob": 9.458074055146426e-05}, {"id": 196, "seek": 52108, "start": 537.9000000000001, "end": 539.84, "text": " So we're kind of going down.", "tokens": [51205, 407, 321, 434, 733, 295, 516, 760, 13, 51302], "temperature": 0.0, "avg_logprob": -0.13386328202964615, "compression_ratio": 1.7153284671532847, "no_speech_prob": 9.458074055146426e-05}, {"id": 197, "seek": 52108, "start": 539.84, "end": 541.48, "text": " This will make sense in just a moment.", "tokens": [51302, 639, 486, 652, 2020, 294, 445, 257, 1623, 13, 51384], "temperature": 0.0, "avg_logprob": -0.13386328202964615, "compression_ratio": 1.7153284671532847, "no_speech_prob": 9.458074055146426e-05}, {"id": 198, "seek": 52108, "start": 541.48, "end": 542.5600000000001, "text": " I think let's go through an example.", "tokens": [51384, 286, 519, 718, 311, 352, 807, 364, 1365, 13, 51438], "temperature": 0.0, "avg_logprob": -0.13386328202964615, "compression_ratio": 1.7153284671532847, "no_speech_prob": 9.458074055146426e-05}, {"id": 199, "seek": 52108, "start": 542.5600000000001, "end": 545.36, "text": " So three plus two, the rules up there are on the right.", "tokens": [51438, 407, 1045, 1804, 732, 11, 264, 4474, 493, 456, 366, 322, 264, 558, 13, 51578], "temperature": 0.0, "avg_logprob": -0.13386328202964615, "compression_ratio": 1.7153284671532847, "no_speech_prob": 9.458074055146426e-05}, {"id": 200, "seek": 52108, "start": 546.5200000000001, "end": 549.72, "text": " The first thing that we do is expand out our syntactic sugar.", "tokens": [51636, 440, 700, 551, 300, 321, 360, 307, 5268, 484, 527, 23980, 19892, 5076, 13, 51796], "temperature": 0.0, "avg_logprob": -0.13386328202964615, "compression_ratio": 1.7153284671532847, "no_speech_prob": 9.458074055146426e-05}, {"id": 201, "seek": 54972, "start": 549.72, "end": 554.2, "text": " So we have s of s of s of zero plus s of s of zero, right?", "tokens": [50364, 407, 321, 362, 262, 295, 262, 295, 262, 295, 4018, 1804, 262, 295, 262, 295, 4018, 11, 558, 30, 50588], "temperature": 0.0, "avg_logprob": -0.12586717987060547, "compression_ratio": 1.8056872037914693, "no_speech_prob": 0.00014880867092870176}, {"id": 202, "seek": 54972, "start": 554.2, "end": 556.32, "text": " And now we need to apply one of our rules.", "tokens": [50588, 400, 586, 321, 643, 281, 3079, 472, 295, 527, 4474, 13, 50694], "temperature": 0.0, "avg_logprob": -0.12586717987060547, "compression_ratio": 1.8056872037914693, "no_speech_prob": 0.00014880867092870176}, {"id": 203, "seek": 54972, "start": 556.32, "end": 558.84, "text": " Obviously, we can't apply this rule", "tokens": [50694, 7580, 11, 321, 393, 380, 3079, 341, 4978, 50820], "temperature": 0.0, "avg_logprob": -0.12586717987060547, "compression_ratio": 1.8056872037914693, "no_speech_prob": 0.00014880867092870176}, {"id": 204, "seek": 54972, "start": 558.84, "end": 559.76, "text": " because it doesn't match.", "tokens": [50820, 570, 309, 1177, 380, 2995, 13, 50866], "temperature": 0.0, "avg_logprob": -0.12586717987060547, "compression_ratio": 1.8056872037914693, "no_speech_prob": 0.00014880867092870176}, {"id": 205, "seek": 54972, "start": 559.76, "end": 561.64, "text": " So we have to apply this rule, right?", "tokens": [50866, 407, 321, 362, 281, 3079, 341, 4978, 11, 558, 30, 50960], "temperature": 0.0, "avg_logprob": -0.12586717987060547, "compression_ratio": 1.8056872037914693, "no_speech_prob": 0.00014880867092870176}, {"id": 206, "seek": 54972, "start": 561.64, "end": 565.08, "text": " So a is in purple on the left or pink.", "tokens": [50960, 407, 257, 307, 294, 9656, 322, 264, 1411, 420, 7022, 13, 51132], "temperature": 0.0, "avg_logprob": -0.12586717987060547, "compression_ratio": 1.8056872037914693, "no_speech_prob": 0.00014880867092870176}, {"id": 207, "seek": 54972, "start": 565.08, "end": 569.64, "text": " And then we have s of b, b is this purple thing over here,", "tokens": [51132, 400, 550, 321, 362, 262, 295, 272, 11, 272, 307, 341, 9656, 551, 670, 510, 11, 51360], "temperature": 0.0, "avg_logprob": -0.12586717987060547, "compression_ratio": 1.8056872037914693, "no_speech_prob": 0.00014880867092870176}, {"id": 208, "seek": 54972, "start": 569.64, "end": 572.78, "text": " equals s of a plus b, right?", "tokens": [51360, 6915, 262, 295, 257, 1804, 272, 11, 558, 30, 51517], "temperature": 0.0, "avg_logprob": -0.12586717987060547, "compression_ratio": 1.8056872037914693, "no_speech_prob": 0.00014880867092870176}, {"id": 209, "seek": 54972, "start": 572.78, "end": 574.5600000000001, "text": " So s of a plus b.", "tokens": [51517, 407, 262, 295, 257, 1804, 272, 13, 51606], "temperature": 0.0, "avg_logprob": -0.12586717987060547, "compression_ratio": 1.8056872037914693, "no_speech_prob": 0.00014880867092870176}, {"id": 210, "seek": 54972, "start": 575.5, "end": 577.2, "text": " Do you guys see that substitution?", "tokens": [51653, 1144, 291, 1074, 536, 300, 35827, 30, 51738], "temperature": 0.0, "avg_logprob": -0.12586717987060547, "compression_ratio": 1.8056872037914693, "no_speech_prob": 0.00014880867092870176}, {"id": 211, "seek": 57972, "start": 580.08, "end": 582.32, "text": " And then we do that again.", "tokens": [50382, 400, 550, 321, 360, 300, 797, 13, 50494], "temperature": 0.0, "avg_logprob": -0.1600146052813289, "compression_ratio": 1.62, "no_speech_prob": 0.00011410172010073438}, {"id": 212, "seek": 57972, "start": 582.32, "end": 583.96, "text": " And then now we're in a form", "tokens": [50494, 400, 550, 586, 321, 434, 294, 257, 1254, 50576], "temperature": 0.0, "avg_logprob": -0.1600146052813289, "compression_ratio": 1.62, "no_speech_prob": 0.00011410172010073438}, {"id": 213, "seek": 57972, "start": 583.96, "end": 585.5600000000001, "text": " where we can apply rule number one,", "tokens": [50576, 689, 321, 393, 3079, 4978, 1230, 472, 11, 50656], "temperature": 0.0, "avg_logprob": -0.1600146052813289, "compression_ratio": 1.62, "no_speech_prob": 0.00011410172010073438}, {"id": 214, "seek": 57972, "start": 585.5600000000001, "end": 590.0600000000001, "text": " a plus zero equals just a by itself, right?", "tokens": [50656, 257, 1804, 4018, 6915, 445, 257, 538, 2564, 11, 558, 30, 50881], "temperature": 0.0, "avg_logprob": -0.1600146052813289, "compression_ratio": 1.62, "no_speech_prob": 0.00011410172010073438}, {"id": 215, "seek": 57972, "start": 591.0, "end": 593.4, "text": " And that's five.", "tokens": [50928, 400, 300, 311, 1732, 13, 51048], "temperature": 0.0, "avg_logprob": -0.1600146052813289, "compression_ratio": 1.62, "no_speech_prob": 0.00011410172010073438}, {"id": 216, "seek": 57972, "start": 593.4, "end": 594.44, "text": " And now we can add.", "tokens": [51048, 400, 586, 321, 393, 909, 13, 51100], "temperature": 0.0, "avg_logprob": -0.1600146052813289, "compression_ratio": 1.62, "no_speech_prob": 0.00011410172010073438}, {"id": 217, "seek": 57972, "start": 597.0400000000001, "end": 600.02, "text": " All right, so basically this is compelling", "tokens": [51230, 1057, 558, 11, 370, 1936, 341, 307, 20050, 51379], "temperature": 0.0, "avg_logprob": -0.1600146052813289, "compression_ratio": 1.62, "no_speech_prob": 0.00011410172010073438}, {"id": 218, "seek": 57972, "start": 600.02, "end": 603.4, "text": " because we didn't have the concept of addition", "tokens": [51379, 570, 321, 994, 380, 362, 264, 3410, 295, 4500, 51548], "temperature": 0.0, "avg_logprob": -0.1600146052813289, "compression_ratio": 1.62, "no_speech_prob": 0.00011410172010073438}, {"id": 219, "seek": 57972, "start": 603.4, "end": 605.48, "text": " in terms of the axioms.", "tokens": [51548, 294, 2115, 295, 264, 6360, 72, 4785, 13, 51652], "temperature": 0.0, "avg_logprob": -0.1600146052813289, "compression_ratio": 1.62, "no_speech_prob": 0.00011410172010073438}, {"id": 220, "seek": 57972, "start": 605.48, "end": 607.64, "text": " And we define the concept of addition", "tokens": [51652, 400, 321, 6964, 264, 3410, 295, 4500, 51760], "temperature": 0.0, "avg_logprob": -0.1600146052813289, "compression_ratio": 1.62, "no_speech_prob": 0.00011410172010073438}, {"id": 221, "seek": 60764, "start": 607.64, "end": 610.48, "text": " as recursive incrementing, essentially.", "tokens": [50364, 382, 20560, 488, 26200, 278, 11, 4476, 13, 50506], "temperature": 0.0, "avg_logprob": -0.15758021372669148, "compression_ratio": 1.6995708154506437, "no_speech_prob": 0.00034590528230182827}, {"id": 222, "seek": 60764, "start": 610.48, "end": 613.88, "text": " And now we have this property of addition,", "tokens": [50506, 400, 586, 321, 362, 341, 4707, 295, 4500, 11, 50676], "temperature": 0.0, "avg_logprob": -0.15758021372669148, "compression_ratio": 1.6995708154506437, "no_speech_prob": 0.00034590528230182827}, {"id": 223, "seek": 60764, "start": 613.88, "end": 615.96, "text": " which we can use to define some other things.", "tokens": [50676, 597, 321, 393, 764, 281, 6964, 512, 661, 721, 13, 50780], "temperature": 0.0, "avg_logprob": -0.15758021372669148, "compression_ratio": 1.6995708154506437, "no_speech_prob": 0.00034590528230182827}, {"id": 224, "seek": 60764, "start": 615.96, "end": 618.3199999999999, "text": " For example, we can define multiplication.", "tokens": [50780, 1171, 1365, 11, 321, 393, 6964, 27290, 13, 50898], "temperature": 0.0, "avg_logprob": -0.15758021372669148, "compression_ratio": 1.6995708154506437, "no_speech_prob": 0.00034590528230182827}, {"id": 225, "seek": 60764, "start": 618.3199999999999, "end": 620.4399999999999, "text": " a times zero equals zero,", "tokens": [50898, 257, 1413, 4018, 6915, 4018, 11, 51004], "temperature": 0.0, "avg_logprob": -0.15758021372669148, "compression_ratio": 1.6995708154506437, "no_speech_prob": 0.00034590528230182827}, {"id": 226, "seek": 60764, "start": 620.4399999999999, "end": 624.46, "text": " a times s of b equals a plus a times b.", "tokens": [51004, 257, 1413, 262, 295, 272, 6915, 257, 1804, 257, 1413, 272, 13, 51205], "temperature": 0.0, "avg_logprob": -0.15758021372669148, "compression_ratio": 1.6995708154506437, "no_speech_prob": 0.00034590528230182827}, {"id": 227, "seek": 60764, "start": 624.46, "end": 627.72, "text": " And it can work out that obviously intuitively", "tokens": [51205, 400, 309, 393, 589, 484, 300, 2745, 46506, 51368], "temperature": 0.0, "avg_logprob": -0.15758021372669148, "compression_ratio": 1.6995708154506437, "no_speech_prob": 0.00034590528230182827}, {"id": 228, "seek": 60764, "start": 627.72, "end": 629.52, "text": " that addition and multiplication", "tokens": [51368, 300, 4500, 293, 27290, 51458], "temperature": 0.0, "avg_logprob": -0.15758021372669148, "compression_ratio": 1.6995708154506437, "no_speech_prob": 0.00034590528230182827}, {"id": 229, "seek": 60764, "start": 629.52, "end": 632.8, "text": " are kinds of intrinsically related to each other.", "tokens": [51458, 366, 3685, 295, 28621, 984, 4077, 281, 1184, 661, 13, 51622], "temperature": 0.0, "avg_logprob": -0.15758021372669148, "compression_ratio": 1.6995708154506437, "no_speech_prob": 0.00034590528230182827}, {"id": 230, "seek": 60764, "start": 632.8, "end": 634.56, "text": " So we have the piano axioms,", "tokens": [51622, 407, 321, 362, 264, 9211, 6360, 72, 4785, 11, 51710], "temperature": 0.0, "avg_logprob": -0.15758021372669148, "compression_ratio": 1.6995708154506437, "no_speech_prob": 0.00034590528230182827}, {"id": 231, "seek": 63456, "start": 634.56, "end": 635.68, "text": " so then we built addition", "tokens": [50364, 370, 550, 321, 3094, 4500, 50420], "temperature": 0.0, "avg_logprob": -0.09208554190558356, "compression_ratio": 1.9961089494163424, "no_speech_prob": 0.00023773909197188914}, {"id": 232, "seek": 63456, "start": 635.68, "end": 638.5999999999999, "text": " and then we built multiplication on top, right?", "tokens": [50420, 293, 550, 321, 3094, 27290, 322, 1192, 11, 558, 30, 50566], "temperature": 0.0, "avg_logprob": -0.09208554190558356, "compression_ratio": 1.9961089494163424, "no_speech_prob": 0.00023773909197188914}, {"id": 233, "seek": 63456, "start": 638.5999999999999, "end": 641.0799999999999, "text": " And it's this type of thinking", "tokens": [50566, 400, 309, 311, 341, 2010, 295, 1953, 50690], "temperature": 0.0, "avg_logprob": -0.09208554190558356, "compression_ratio": 1.9961089494163424, "no_speech_prob": 0.00023773909197188914}, {"id": 234, "seek": 63456, "start": 641.0799999999999, "end": 644.4, "text": " that I wanna really imprint in your minds.", "tokens": [50690, 300, 286, 1948, 534, 44615, 294, 428, 9634, 13, 50856], "temperature": 0.0, "avg_logprob": -0.09208554190558356, "compression_ratio": 1.9961089494163424, "no_speech_prob": 0.00023773909197188914}, {"id": 235, "seek": 63456, "start": 644.4, "end": 648.0799999999999, "text": " And here I'm inventing this new concept called axiom towers.", "tokens": [50856, 400, 510, 286, 478, 7962, 278, 341, 777, 3410, 1219, 6360, 72, 298, 25045, 13, 51040], "temperature": 0.0, "avg_logprob": -0.09208554190558356, "compression_ratio": 1.9961089494163424, "no_speech_prob": 0.00023773909197188914}, {"id": 236, "seek": 63456, "start": 648.0799999999999, "end": 650.1199999999999, "text": " And you can think of axiom towers", "tokens": [51040, 400, 291, 393, 519, 295, 6360, 72, 298, 25045, 51142], "temperature": 0.0, "avg_logprob": -0.09208554190558356, "compression_ratio": 1.9961089494163424, "no_speech_prob": 0.00023773909197188914}, {"id": 237, "seek": 63456, "start": 650.1199999999999, "end": 652.5999999999999, "text": " as having a foundation, which is the axioms themselves.", "tokens": [51142, 382, 1419, 257, 7030, 11, 597, 307, 264, 6360, 72, 4785, 2969, 13, 51266], "temperature": 0.0, "avg_logprob": -0.09208554190558356, "compression_ratio": 1.9961089494163424, "no_speech_prob": 0.00023773909197188914}, {"id": 238, "seek": 63456, "start": 652.5999999999999, "end": 654.3399999999999, "text": " So in this case, the piano axioms.", "tokens": [51266, 407, 294, 341, 1389, 11, 264, 9211, 6360, 72, 4785, 13, 51353], "temperature": 0.0, "avg_logprob": -0.09208554190558356, "compression_ratio": 1.9961089494163424, "no_speech_prob": 0.00023773909197188914}, {"id": 239, "seek": 63456, "start": 654.3399999999999, "end": 656.56, "text": " And then on top of that, we built addition.", "tokens": [51353, 400, 550, 322, 1192, 295, 300, 11, 321, 3094, 4500, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09208554190558356, "compression_ratio": 1.9961089494163424, "no_speech_prob": 0.00023773909197188914}, {"id": 240, "seek": 63456, "start": 656.56, "end": 658.8399999999999, "text": " And then on top of that, we built multiplication.", "tokens": [51464, 400, 550, 322, 1192, 295, 300, 11, 321, 3094, 27290, 13, 51578], "temperature": 0.0, "avg_logprob": -0.09208554190558356, "compression_ratio": 1.9961089494163424, "no_speech_prob": 0.00023773909197188914}, {"id": 241, "seek": 63456, "start": 658.8399999999999, "end": 661.92, "text": " And then maybe we can build more stuff on top.", "tokens": [51578, 400, 550, 1310, 321, 393, 1322, 544, 1507, 322, 1192, 13, 51732], "temperature": 0.0, "avg_logprob": -0.09208554190558356, "compression_ratio": 1.9961089494163424, "no_speech_prob": 0.00023773909197188914}, {"id": 242, "seek": 63456, "start": 661.92, "end": 664.1199999999999, "text": " And it turns out that the piano axioms", "tokens": [51732, 400, 309, 4523, 484, 300, 264, 9211, 6360, 72, 4785, 51842], "temperature": 0.0, "avg_logprob": -0.09208554190558356, "compression_ratio": 1.9961089494163424, "no_speech_prob": 0.00023773909197188914}, {"id": 243, "seek": 66412, "start": 664.12, "end": 667.28, "text": " are sufficient to basically describe like most of math.", "tokens": [50364, 366, 11563, 281, 1936, 6786, 411, 881, 295, 5221, 13, 50522], "temperature": 0.0, "avg_logprob": -0.11113010826757398, "compression_ratio": 1.8638132295719845, "no_speech_prob": 0.0007429515826515853}, {"id": 244, "seek": 66412, "start": 668.8, "end": 671.48, "text": " So from multiplication, you can kind of imagine", "tokens": [50598, 407, 490, 27290, 11, 291, 393, 733, 295, 3811, 50732], "temperature": 0.0, "avg_logprob": -0.11113010826757398, "compression_ratio": 1.8638132295719845, "no_speech_prob": 0.0007429515826515853}, {"id": 245, "seek": 66412, "start": 671.48, "end": 674.64, "text": " that you can build division and from division", "tokens": [50732, 300, 291, 393, 1322, 10044, 293, 490, 10044, 50890], "temperature": 0.0, "avg_logprob": -0.11113010826757398, "compression_ratio": 1.8638132295719845, "no_speech_prob": 0.0007429515826515853}, {"id": 246, "seek": 66412, "start": 674.64, "end": 675.92, "text": " or not from division necessarily,", "tokens": [50890, 420, 406, 490, 10044, 4725, 11, 50954], "temperature": 0.0, "avg_logprob": -0.11113010826757398, "compression_ratio": 1.8638132295719845, "no_speech_prob": 0.0007429515826515853}, {"id": 247, "seek": 66412, "start": 675.92, "end": 679.16, "text": " but you can imagine also you can represent the integers", "tokens": [50954, 457, 291, 393, 3811, 611, 291, 393, 2906, 264, 41674, 51116], "temperature": 0.0, "avg_logprob": -0.11113010826757398, "compression_ratio": 1.8638132295719845, "no_speech_prob": 0.0007429515826515853}, {"id": 248, "seek": 66412, "start": 679.16, "end": 682.96, "text": " which are negative numbers from just the real numbers.", "tokens": [51116, 597, 366, 3671, 3547, 490, 445, 264, 957, 3547, 13, 51306], "temperature": 0.0, "avg_logprob": -0.11113010826757398, "compression_ratio": 1.8638132295719845, "no_speech_prob": 0.0007429515826515853}, {"id": 249, "seek": 66412, "start": 682.96, "end": 684.16, "text": " We won't get into the proofs,", "tokens": [51306, 492, 1582, 380, 483, 666, 264, 8177, 82, 11, 51366], "temperature": 0.0, "avg_logprob": -0.11113010826757398, "compression_ratio": 1.8638132295719845, "no_speech_prob": 0.0007429515826515853}, {"id": 250, "seek": 66412, "start": 684.16, "end": 686.24, "text": " but I'm sure you guys can kind of envision", "tokens": [51366, 457, 286, 478, 988, 291, 1074, 393, 733, 295, 24739, 51470], "temperature": 0.0, "avg_logprob": -0.11113010826757398, "compression_ratio": 1.8638132295719845, "no_speech_prob": 0.0007429515826515853}, {"id": 251, "seek": 66412, "start": 686.24, "end": 688.2, "text": " how this might be the case.", "tokens": [51470, 577, 341, 1062, 312, 264, 1389, 13, 51568], "temperature": 0.0, "avg_logprob": -0.11113010826757398, "compression_ratio": 1.8638132295719845, "no_speech_prob": 0.0007429515826515853}, {"id": 252, "seek": 66412, "start": 688.2, "end": 690.28, "text": " And then once you have negative numbers,", "tokens": [51568, 400, 550, 1564, 291, 362, 3671, 3547, 11, 51672], "temperature": 0.0, "avg_logprob": -0.11113010826757398, "compression_ratio": 1.8638132295719845, "no_speech_prob": 0.0007429515826515853}, {"id": 253, "seek": 66412, "start": 690.28, "end": 692.96, "text": " you can imagine defining rational numbers,", "tokens": [51672, 291, 393, 3811, 17827, 15090, 3547, 11, 51806], "temperature": 0.0, "avg_logprob": -0.11113010826757398, "compression_ratio": 1.8638132295719845, "no_speech_prob": 0.0007429515826515853}, {"id": 254, "seek": 69296, "start": 692.96, "end": 696.9200000000001, "text": " which are just kind of, in the context of division,", "tokens": [50364, 597, 366, 445, 733, 295, 11, 294, 264, 4319, 295, 10044, 11, 50562], "temperature": 0.0, "avg_logprob": -0.15359295539136203, "compression_ratio": 2.0144927536231885, "no_speech_prob": 0.00024915937683545053}, {"id": 255, "seek": 69296, "start": 696.9200000000001, "end": 699.88, "text": " a rational number is just a numerator and a denominator.", "tokens": [50562, 257, 15090, 1230, 307, 445, 257, 30380, 293, 257, 20687, 13, 50710], "temperature": 0.0, "avg_logprob": -0.15359295539136203, "compression_ratio": 2.0144927536231885, "no_speech_prob": 0.00024915937683545053}, {"id": 256, "seek": 69296, "start": 701.76, "end": 703.0400000000001, "text": " And then from rational numbers,", "tokens": [50804, 400, 550, 490, 15090, 3547, 11, 50868], "temperature": 0.0, "avg_logprob": -0.15359295539136203, "compression_ratio": 2.0144927536231885, "no_speech_prob": 0.00024915937683545053}, {"id": 257, "seek": 69296, "start": 703.0400000000001, "end": 704.9200000000001, "text": " you can maybe get to exponentials,", "tokens": [50868, 291, 393, 1310, 483, 281, 21510, 82, 11, 50962], "temperature": 0.0, "avg_logprob": -0.15359295539136203, "compression_ratio": 2.0144927536231885, "no_speech_prob": 0.00024915937683545053}, {"id": 258, "seek": 69296, "start": 704.9200000000001, "end": 708.52, "text": " which is just sort of repeated multiplication.", "tokens": [50962, 597, 307, 445, 1333, 295, 10477, 27290, 13, 51142], "temperature": 0.0, "avg_logprob": -0.15359295539136203, "compression_ratio": 2.0144927536231885, "no_speech_prob": 0.00024915937683545053}, {"id": 259, "seek": 69296, "start": 708.52, "end": 709.6800000000001, "text": " And then from exponentials,", "tokens": [51142, 400, 550, 490, 21510, 82, 11, 51200], "temperature": 0.0, "avg_logprob": -0.15359295539136203, "compression_ratio": 2.0144927536231885, "no_speech_prob": 0.00024915937683545053}, {"id": 260, "seek": 69296, "start": 709.6800000000001, "end": 711.44, "text": " you can get to irrational numbers,", "tokens": [51200, 291, 393, 483, 281, 39914, 3547, 11, 51288], "temperature": 0.0, "avg_logprob": -0.15359295539136203, "compression_ratio": 2.0144927536231885, "no_speech_prob": 0.00024915937683545053}, {"id": 261, "seek": 69296, "start": 711.44, "end": 715.44, "text": " like the exponent of a fraction gets you irrational numbers.", "tokens": [51288, 411, 264, 37871, 295, 257, 14135, 2170, 291, 39914, 3547, 13, 51488], "temperature": 0.0, "avg_logprob": -0.15359295539136203, "compression_ratio": 2.0144927536231885, "no_speech_prob": 0.00024915937683545053}, {"id": 262, "seek": 69296, "start": 715.44, "end": 718.88, "text": " And then maybe you can build imaginary numbers", "tokens": [51488, 400, 550, 1310, 291, 393, 1322, 26164, 3547, 51660], "temperature": 0.0, "avg_logprob": -0.15359295539136203, "compression_ratio": 2.0144927536231885, "no_speech_prob": 0.00024915937683545053}, {"id": 263, "seek": 69296, "start": 718.88, "end": 720.1600000000001, "text": " and so on and so forth.", "tokens": [51660, 293, 370, 322, 293, 370, 5220, 13, 51724], "temperature": 0.0, "avg_logprob": -0.15359295539136203, "compression_ratio": 2.0144927536231885, "no_speech_prob": 0.00024915937683545053}, {"id": 264, "seek": 72016, "start": 721.16, "end": 723.68, "text": " And all of it is kind of stacked on top", "tokens": [50414, 400, 439, 295, 309, 307, 733, 295, 28867, 322, 1192, 50540], "temperature": 0.0, "avg_logprob": -0.1076623306274414, "compression_ratio": 1.583011583011583, "no_speech_prob": 0.00036817582440562546}, {"id": 265, "seek": 72016, "start": 723.68, "end": 726.24, "text": " of just these core axioms at the very bottom.", "tokens": [50540, 295, 445, 613, 4965, 6360, 72, 4785, 412, 264, 588, 2767, 13, 50668], "temperature": 0.0, "avg_logprob": -0.1076623306274414, "compression_ratio": 1.583011583011583, "no_speech_prob": 0.00036817582440562546}, {"id": 266, "seek": 72016, "start": 727.36, "end": 728.1999999999999, "text": " Sound good?", "tokens": [50724, 14673, 665, 30, 50766], "temperature": 0.0, "avg_logprob": -0.1076623306274414, "compression_ratio": 1.583011583011583, "no_speech_prob": 0.00036817582440562546}, {"id": 267, "seek": 72016, "start": 729.52, "end": 730.36, "text": " Cool.", "tokens": [50832, 8561, 13, 50874], "temperature": 0.0, "avg_logprob": -0.1076623306274414, "compression_ratio": 1.583011583011583, "no_speech_prob": 0.00036817582440562546}, {"id": 268, "seek": 72016, "start": 731.7199999999999, "end": 733.7199999999999, "text": " This is gonna get interesting, I promise.", "tokens": [50942, 639, 307, 799, 483, 1880, 11, 286, 6228, 13, 51042], "temperature": 0.0, "avg_logprob": -0.1076623306274414, "compression_ratio": 1.583011583011583, "no_speech_prob": 0.00036817582440562546}, {"id": 269, "seek": 72016, "start": 733.7199999999999, "end": 735.36, "text": " All right, so the first idea is", "tokens": [51042, 1057, 558, 11, 370, 264, 700, 1558, 307, 51124], "temperature": 0.0, "avg_logprob": -0.1076623306274414, "compression_ratio": 1.583011583011583, "no_speech_prob": 0.00036817582440562546}, {"id": 270, "seek": 72016, "start": 735.36, "end": 737.52, "text": " that the axioms are not divine, right?", "tokens": [51124, 300, 264, 6360, 72, 4785, 366, 406, 13678, 11, 558, 30, 51232], "temperature": 0.0, "avg_logprob": -0.1076623306274414, "compression_ratio": 1.583011583011583, "no_speech_prob": 0.00036817582440562546}, {"id": 271, "seek": 72016, "start": 737.52, "end": 738.7199999999999, "text": " There's nothing special about them.", "tokens": [51232, 821, 311, 1825, 2121, 466, 552, 13, 51292], "temperature": 0.0, "avg_logprob": -0.1076623306274414, "compression_ratio": 1.583011583011583, "no_speech_prob": 0.00036817582440562546}, {"id": 272, "seek": 72016, "start": 738.7199999999999, "end": 741.9599999999999, "text": " In fact, when Piano first wrote his papers,", "tokens": [51292, 682, 1186, 11, 562, 430, 6254, 700, 4114, 702, 10577, 11, 51454], "temperature": 0.0, "avg_logprob": -0.1076623306274414, "compression_ratio": 1.583011583011583, "no_speech_prob": 0.00036817582440562546}, {"id": 273, "seek": 72016, "start": 741.9599999999999, "end": 745.0, "text": " he started off with one as like the root.", "tokens": [51454, 415, 1409, 766, 365, 472, 382, 411, 264, 5593, 13, 51606], "temperature": 0.0, "avg_logprob": -0.1076623306274414, "compression_ratio": 1.583011583011583, "no_speech_prob": 0.00036817582440562546}, {"id": 274, "seek": 72016, "start": 745.0, "end": 746.36, "text": " He didn't start off with zero,", "tokens": [51606, 634, 994, 380, 722, 766, 365, 4018, 11, 51674], "temperature": 0.0, "avg_logprob": -0.1076623306274414, "compression_ratio": 1.583011583011583, "no_speech_prob": 0.00036817582440562546}, {"id": 275, "seek": 72016, "start": 746.36, "end": 748.4, "text": " but then mathematicians later said like,", "tokens": [51674, 457, 550, 32811, 2567, 1780, 848, 411, 11, 51776], "temperature": 0.0, "avg_logprob": -0.1076623306274414, "compression_ratio": 1.583011583011583, "no_speech_prob": 0.00036817582440562546}, {"id": 276, "seek": 74840, "start": 748.4399999999999, "end": 750.92, "text": " no, no, let's start with zero, it's better.", "tokens": [50366, 572, 11, 572, 11, 718, 311, 722, 365, 4018, 11, 309, 311, 1101, 13, 50490], "temperature": 0.0, "avg_logprob": -0.1315757509261843, "compression_ratio": 1.8082706766917294, "no_speech_prob": 0.00011958205868722871}, {"id": 277, "seek": 74840, "start": 750.92, "end": 752.64, "text": " So you can imagine starting off with one and say,", "tokens": [50490, 407, 291, 393, 3811, 2891, 766, 365, 472, 293, 584, 11, 50576], "temperature": 0.0, "avg_logprob": -0.1315757509261843, "compression_ratio": 1.8082706766917294, "no_speech_prob": 0.00011958205868722871}, {"id": 278, "seek": 74840, "start": 752.64, "end": 756.0, "text": " you can imagine using like a predecessor function", "tokens": [50576, 291, 393, 3811, 1228, 411, 257, 34991, 2445, 50744], "temperature": 0.0, "avg_logprob": -0.1315757509261843, "compression_ratio": 1.8082706766917294, "no_speech_prob": 0.00011958205868722871}, {"id": 279, "seek": 74840, "start": 756.0, "end": 757.84, "text": " instead of like a successor function.", "tokens": [50744, 2602, 295, 411, 257, 31864, 2445, 13, 50836], "temperature": 0.0, "avg_logprob": -0.1315757509261843, "compression_ratio": 1.8082706766917294, "no_speech_prob": 0.00011958205868722871}, {"id": 280, "seek": 74840, "start": 759.72, "end": 762.28, "text": " But here I'm making a claim that some axiom towers", "tokens": [50930, 583, 510, 286, 478, 1455, 257, 3932, 300, 512, 6360, 72, 298, 25045, 51058], "temperature": 0.0, "avg_logprob": -0.1315757509261843, "compression_ratio": 1.8082706766917294, "no_speech_prob": 0.00011958205868722871}, {"id": 281, "seek": 74840, "start": 762.28, "end": 764.68, "text": " are better than other axiom towers.", "tokens": [51058, 366, 1101, 813, 661, 6360, 72, 298, 25045, 13, 51178], "temperature": 0.0, "avg_logprob": -0.1315757509261843, "compression_ratio": 1.8082706766917294, "no_speech_prob": 0.00011958205868722871}, {"id": 282, "seek": 74840, "start": 764.68, "end": 766.72, "text": " Let's say more useful than other axiom towers.", "tokens": [51178, 961, 311, 584, 544, 4420, 813, 661, 6360, 72, 298, 25045, 13, 51280], "temperature": 0.0, "avg_logprob": -0.1315757509261843, "compression_ratio": 1.8082706766917294, "no_speech_prob": 0.00011958205868722871}, {"id": 283, "seek": 74840, "start": 766.72, "end": 770.16, "text": " Like for example, Roman numerals are just horribly inconvenient", "tokens": [51280, 1743, 337, 1365, 11, 8566, 7866, 1124, 366, 445, 45028, 46196, 51452], "temperature": 0.0, "avg_logprob": -0.1315757509261843, "compression_ratio": 1.8082706766917294, "no_speech_prob": 0.00011958205868722871}, {"id": 284, "seek": 74840, "start": 770.16, "end": 773.68, "text": " at doing anything useful, like multiplication.", "tokens": [51452, 412, 884, 1340, 4420, 11, 411, 27290, 13, 51628], "temperature": 0.0, "avg_logprob": -0.1315757509261843, "compression_ratio": 1.8082706766917294, "no_speech_prob": 0.00011958205868722871}, {"id": 285, "seek": 74840, "start": 773.68, "end": 776.76, "text": " And yet everything that you can do in regular numbers,", "tokens": [51628, 400, 1939, 1203, 300, 291, 393, 360, 294, 3890, 3547, 11, 51782], "temperature": 0.0, "avg_logprob": -0.1315757509261843, "compression_ratio": 1.8082706766917294, "no_speech_prob": 0.00011958205868722871}, {"id": 286, "seek": 77676, "start": 776.76, "end": 778.8, "text": " you can also do in terms of Roman numerals.", "tokens": [50364, 291, 393, 611, 360, 294, 2115, 295, 8566, 7866, 1124, 13, 50466], "temperature": 0.0, "avg_logprob": -0.10481889247894287, "compression_ratio": 1.6775510204081632, "no_speech_prob": 7.252276554936543e-05}, {"id": 287, "seek": 77676, "start": 778.8, "end": 780.64, "text": " And so Roman numerals aren't like,", "tokens": [50466, 400, 370, 8566, 7866, 1124, 3212, 380, 411, 11, 50558], "temperature": 0.0, "avg_logprob": -0.10481889247894287, "compression_ratio": 1.6775510204081632, "no_speech_prob": 7.252276554936543e-05}, {"id": 288, "seek": 77676, "start": 780.64, "end": 782.04, "text": " they're just a different set of axioms", "tokens": [50558, 436, 434, 445, 257, 819, 992, 295, 6360, 72, 4785, 50628], "temperature": 0.0, "avg_logprob": -0.10481889247894287, "compression_ratio": 1.6775510204081632, "no_speech_prob": 7.252276554936543e-05}, {"id": 289, "seek": 77676, "start": 782.04, "end": 784.3199999999999, "text": " that are somehow slightly less useful.", "tokens": [50628, 300, 366, 6063, 4748, 1570, 4420, 13, 50742], "temperature": 0.0, "avg_logprob": -0.10481889247894287, "compression_ratio": 1.6775510204081632, "no_speech_prob": 7.252276554936543e-05}, {"id": 290, "seek": 77676, "start": 786.8, "end": 790.22, "text": " All right, axiom towers don't have to correspond to reality.", "tokens": [50866, 1057, 558, 11, 6360, 72, 298, 25045, 500, 380, 362, 281, 6805, 281, 4103, 13, 51037], "temperature": 0.0, "avg_logprob": -0.10481889247894287, "compression_ratio": 1.6775510204081632, "no_speech_prob": 7.252276554936543e-05}, {"id": 291, "seek": 77676, "start": 791.48, "end": 794.96, "text": " So Euclid was a Greek philosopher", "tokens": [51100, 407, 462, 1311, 75, 327, 390, 257, 10281, 29805, 51274], "temperature": 0.0, "avg_logprob": -0.10481889247894287, "compression_ratio": 1.6775510204081632, "no_speech_prob": 7.252276554936543e-05}, {"id": 292, "seek": 77676, "start": 794.96, "end": 797.92, "text": " and he's sort of like the father of geometry.", "tokens": [51274, 293, 415, 311, 1333, 295, 411, 264, 3086, 295, 18426, 13, 51422], "temperature": 0.0, "avg_logprob": -0.10481889247894287, "compression_ratio": 1.6775510204081632, "no_speech_prob": 7.252276554936543e-05}, {"id": 293, "seek": 77676, "start": 797.92, "end": 802.48, "text": " And way before Piano, he put forth the axioms for geometry", "tokens": [51422, 400, 636, 949, 430, 6254, 11, 415, 829, 5220, 264, 6360, 72, 4785, 337, 18426, 51650], "temperature": 0.0, "avg_logprob": -0.10481889247894287, "compression_ratio": 1.6775510204081632, "no_speech_prob": 7.252276554936543e-05}, {"id": 294, "seek": 77676, "start": 802.48, "end": 806.58, "text": " and we call his flavor of geometry Euclidean geometry.", "tokens": [51650, 293, 321, 818, 702, 6813, 295, 18426, 462, 1311, 31264, 282, 18426, 13, 51855], "temperature": 0.0, "avg_logprob": -0.10481889247894287, "compression_ratio": 1.6775510204081632, "no_speech_prob": 7.252276554936543e-05}, {"id": 295, "seek": 80658, "start": 806.58, "end": 809.9000000000001, "text": " And one of the axioms that he kind of put forth", "tokens": [50364, 400, 472, 295, 264, 6360, 72, 4785, 300, 415, 733, 295, 829, 5220, 50530], "temperature": 0.0, "avg_logprob": -0.10378684015835032, "compression_ratio": 1.7169811320754718, "no_speech_prob": 0.00010226348967989907}, {"id": 296, "seek": 80658, "start": 809.9000000000001, "end": 812.46, "text": " was that if you have two parallel lines,", "tokens": [50530, 390, 300, 498, 291, 362, 732, 8952, 3876, 11, 50658], "temperature": 0.0, "avg_logprob": -0.10378684015835032, "compression_ratio": 1.7169811320754718, "no_speech_prob": 0.00010226348967989907}, {"id": 297, "seek": 80658, "start": 812.46, "end": 814.9000000000001, "text": " let's say like this Y right here,", "tokens": [50658, 718, 311, 584, 411, 341, 398, 558, 510, 11, 50780], "temperature": 0.0, "avg_logprob": -0.10378684015835032, "compression_ratio": 1.7169811320754718, "no_speech_prob": 0.00010226348967989907}, {"id": 298, "seek": 80658, "start": 814.9000000000001, "end": 818.6600000000001, "text": " as well as like the Y axis, these are parallel to each other.", "tokens": [50780, 382, 731, 382, 411, 264, 398, 10298, 11, 613, 366, 8952, 281, 1184, 661, 13, 50968], "temperature": 0.0, "avg_logprob": -0.10378684015835032, "compression_ratio": 1.7169811320754718, "no_speech_prob": 0.00010226348967989907}, {"id": 299, "seek": 80658, "start": 818.6600000000001, "end": 820.22, "text": " So if two lines are parallel,", "tokens": [50968, 407, 498, 732, 3876, 366, 8952, 11, 51046], "temperature": 0.0, "avg_logprob": -0.10378684015835032, "compression_ratio": 1.7169811320754718, "no_speech_prob": 0.00010226348967989907}, {"id": 300, "seek": 80658, "start": 820.22, "end": 822.22, "text": " then they stay parallel forever.", "tokens": [51046, 550, 436, 1754, 8952, 5680, 13, 51146], "temperature": 0.0, "avg_logprob": -0.10378684015835032, "compression_ratio": 1.7169811320754718, "no_speech_prob": 0.00010226348967989907}, {"id": 301, "seek": 80658, "start": 822.22, "end": 823.62, "text": " They never intersect.", "tokens": [51146, 814, 1128, 27815, 13, 51216], "temperature": 0.0, "avg_logprob": -0.10378684015835032, "compression_ratio": 1.7169811320754718, "no_speech_prob": 0.00010226348967989907}, {"id": 302, "seek": 80658, "start": 823.62, "end": 825.1, "text": " That was one of his axioms.", "tokens": [51216, 663, 390, 472, 295, 702, 6360, 72, 4785, 13, 51290], "temperature": 0.0, "avg_logprob": -0.10378684015835032, "compression_ratio": 1.7169811320754718, "no_speech_prob": 0.00010226348967989907}, {"id": 303, "seek": 80658, "start": 826.14, "end": 828.6600000000001, "text": " But it turns out that you can have these things", "tokens": [51342, 583, 309, 4523, 484, 300, 291, 393, 362, 613, 721, 51468], "temperature": 0.0, "avg_logprob": -0.10378684015835032, "compression_ratio": 1.7169811320754718, "no_speech_prob": 0.00010226348967989907}, {"id": 304, "seek": 80658, "start": 828.6600000000001, "end": 830.6600000000001, "text": " called non-Euclidean geometries,", "tokens": [51468, 1219, 2107, 12, 36, 1311, 31264, 282, 12956, 2244, 11, 51568], "temperature": 0.0, "avg_logprob": -0.10378684015835032, "compression_ratio": 1.7169811320754718, "no_speech_prob": 0.00010226348967989907}, {"id": 305, "seek": 80658, "start": 830.6600000000001, "end": 833.0600000000001, "text": " which essentially forego that axiom.", "tokens": [51568, 597, 4476, 2091, 1571, 300, 6360, 72, 298, 13, 51688], "temperature": 0.0, "avg_logprob": -0.10378684015835032, "compression_ratio": 1.7169811320754718, "no_speech_prob": 0.00010226348967989907}, {"id": 306, "seek": 80658, "start": 833.0600000000001, "end": 835.0200000000001, "text": " And the example is sort of like a globe", "tokens": [51688, 400, 264, 1365, 307, 1333, 295, 411, 257, 15371, 51786], "temperature": 0.0, "avg_logprob": -0.10378684015835032, "compression_ratio": 1.7169811320754718, "no_speech_prob": 0.00010226348967989907}, {"id": 307, "seek": 83502, "start": 835.02, "end": 839.86, "text": " where you have these vertical longitude lines or meridians.", "tokens": [50364, 689, 291, 362, 613, 9429, 938, 4377, 3876, 420, 3551, 327, 2567, 13, 50606], "temperature": 0.0, "avg_logprob": -0.10216283798217773, "compression_ratio": 1.73109243697479, "no_speech_prob": 0.00025704040308482945}, {"id": 308, "seek": 83502, "start": 839.86, "end": 842.38, "text": " And the meridians are all parallel to each other.", "tokens": [50606, 400, 264, 3551, 327, 2567, 366, 439, 8952, 281, 1184, 661, 13, 50732], "temperature": 0.0, "avg_logprob": -0.10216283798217773, "compression_ratio": 1.73109243697479, "no_speech_prob": 0.00025704040308482945}, {"id": 309, "seek": 83502, "start": 843.54, "end": 847.02, "text": " But as you see at the poles, they all kind of intersect.", "tokens": [50790, 583, 382, 291, 536, 412, 264, 24760, 11, 436, 439, 733, 295, 27815, 13, 50964], "temperature": 0.0, "avg_logprob": -0.10216283798217773, "compression_ratio": 1.73109243697479, "no_speech_prob": 0.00025704040308482945}, {"id": 310, "seek": 83502, "start": 847.02, "end": 851.42, "text": " So a non-Euclidean geometry is one that foregoes", "tokens": [50964, 407, 257, 2107, 12, 36, 1311, 31264, 282, 18426, 307, 472, 300, 2091, 1571, 279, 51184], "temperature": 0.0, "avg_logprob": -0.10216283798217773, "compression_ratio": 1.73109243697479, "no_speech_prob": 0.00025704040308482945}, {"id": 311, "seek": 83502, "start": 851.42, "end": 854.26, "text": " this notion of like parallel lines don't intersect.", "tokens": [51184, 341, 10710, 295, 411, 8952, 3876, 500, 380, 27815, 13, 51326], "temperature": 0.0, "avg_logprob": -0.10216283798217773, "compression_ratio": 1.73109243697479, "no_speech_prob": 0.00025704040308482945}, {"id": 312, "seek": 83502, "start": 854.26, "end": 855.62, "text": " And it turns out that there's all sorts", "tokens": [51326, 400, 309, 4523, 484, 300, 456, 311, 439, 7527, 51394], "temperature": 0.0, "avg_logprob": -0.10216283798217773, "compression_ratio": 1.73109243697479, "no_speech_prob": 0.00025704040308482945}, {"id": 313, "seek": 83502, "start": 855.62, "end": 858.46, "text": " of really interesting non-Euclidean spaces", "tokens": [51394, 295, 534, 1880, 2107, 12, 36, 1311, 31264, 282, 7673, 51536], "temperature": 0.0, "avg_logprob": -0.10216283798217773, "compression_ratio": 1.73109243697479, "no_speech_prob": 0.00025704040308482945}, {"id": 314, "seek": 83502, "start": 858.46, "end": 861.6999999999999, "text": " that you can imagine that don't at all correspond to reality.", "tokens": [51536, 300, 291, 393, 3811, 300, 500, 380, 412, 439, 6805, 281, 4103, 13, 51698], "temperature": 0.0, "avg_logprob": -0.10216283798217773, "compression_ratio": 1.73109243697479, "no_speech_prob": 0.00025704040308482945}, {"id": 315, "seek": 86170, "start": 861.7, "end": 866.0600000000001, "text": " And so there's this whole sets of branches of mathematics", "tokens": [50364, 400, 370, 456, 311, 341, 1379, 6352, 295, 14770, 295, 18666, 50582], "temperature": 0.0, "avg_logprob": -0.09298246096720737, "compression_ratio": 1.6829268292682926, "no_speech_prob": 0.00010388315422460437}, {"id": 316, "seek": 86170, "start": 866.0600000000001, "end": 869.5400000000001, "text": " that kind of conceptualize all sorts of different axioms", "tokens": [50582, 300, 733, 295, 24106, 1125, 439, 7527, 295, 819, 6360, 72, 4785, 50756], "temperature": 0.0, "avg_logprob": -0.09298246096720737, "compression_ratio": 1.6829268292682926, "no_speech_prob": 0.00010388315422460437}, {"id": 317, "seek": 86170, "start": 869.5400000000001, "end": 871.4200000000001, "text": " that are unique and interesting", "tokens": [50756, 300, 366, 3845, 293, 1880, 50850], "temperature": 0.0, "avg_logprob": -0.09298246096720737, "compression_ratio": 1.6829268292682926, "no_speech_prob": 0.00010388315422460437}, {"id": 318, "seek": 86170, "start": 871.4200000000001, "end": 874.26, "text": " and form this sort of logically coherent axiom tower", "tokens": [50850, 293, 1254, 341, 1333, 295, 38887, 36239, 6360, 72, 298, 10567, 50992], "temperature": 0.0, "avg_logprob": -0.09298246096720737, "compression_ratio": 1.6829268292682926, "no_speech_prob": 0.00010388315422460437}, {"id": 319, "seek": 86170, "start": 874.26, "end": 876.0600000000001, "text": " on the basis of those axioms.", "tokens": [50992, 322, 264, 5143, 295, 729, 6360, 72, 4785, 13, 51082], "temperature": 0.0, "avg_logprob": -0.09298246096720737, "compression_ratio": 1.6829268292682926, "no_speech_prob": 0.00010388315422460437}, {"id": 320, "seek": 86170, "start": 876.0600000000001, "end": 878.98, "text": " And in many ways, those towers don't correspond", "tokens": [51082, 400, 294, 867, 2098, 11, 729, 25045, 500, 380, 6805, 51228], "temperature": 0.0, "avg_logprob": -0.09298246096720737, "compression_ratio": 1.6829268292682926, "no_speech_prob": 0.00010388315422460437}, {"id": 321, "seek": 86170, "start": 878.98, "end": 880.4200000000001, "text": " at all to reality.", "tokens": [51228, 412, 439, 281, 4103, 13, 51300], "temperature": 0.0, "avg_logprob": -0.09298246096720737, "compression_ratio": 1.6829268292682926, "no_speech_prob": 0.00010388315422460437}, {"id": 322, "seek": 86170, "start": 880.4200000000001, "end": 882.86, "text": " And it's just sort of mathematicians having fun.", "tokens": [51300, 400, 309, 311, 445, 1333, 295, 32811, 2567, 1419, 1019, 13, 51422], "temperature": 0.0, "avg_logprob": -0.09298246096720737, "compression_ratio": 1.6829268292682926, "no_speech_prob": 0.00010388315422460437}, {"id": 323, "seek": 86170, "start": 884.0600000000001, "end": 885.82, "text": " Interesting idea.", "tokens": [51482, 14711, 1558, 13, 51570], "temperature": 0.0, "avg_logprob": -0.09298246096720737, "compression_ratio": 1.6829268292682926, "no_speech_prob": 0.00010388315422460437}, {"id": 324, "seek": 86170, "start": 885.82, "end": 888.0200000000001, "text": " Okay, symbols.", "tokens": [51570, 1033, 11, 16944, 13, 51680], "temperature": 0.0, "avg_logprob": -0.09298246096720737, "compression_ratio": 1.6829268292682926, "no_speech_prob": 0.00010388315422460437}, {"id": 325, "seek": 86170, "start": 888.0200000000001, "end": 890.22, "text": " So we talked a bunch about symbols.", "tokens": [51680, 407, 321, 2825, 257, 3840, 466, 16944, 13, 51790], "temperature": 0.0, "avg_logprob": -0.09298246096720737, "compression_ratio": 1.6829268292682926, "no_speech_prob": 0.00010388315422460437}, {"id": 326, "seek": 89022, "start": 890.22, "end": 892.26, "text": " It might be interesting to think of the symbols", "tokens": [50364, 467, 1062, 312, 1880, 281, 519, 295, 264, 16944, 50466], "temperature": 0.0, "avg_logprob": -0.08729702234268188, "compression_ratio": 1.7967479674796747, "no_speech_prob": 8.748214168008417e-05}, {"id": 327, "seek": 89022, "start": 892.26, "end": 894.98, "text": " as sort of separate from the rules.", "tokens": [50466, 382, 1333, 295, 4994, 490, 264, 4474, 13, 50602], "temperature": 0.0, "avg_logprob": -0.08729702234268188, "compression_ratio": 1.7967479674796747, "no_speech_prob": 8.748214168008417e-05}, {"id": 328, "seek": 89022, "start": 894.98, "end": 898.82, "text": " But it turns out that if you really examine the situation,", "tokens": [50602, 583, 309, 4523, 484, 300, 498, 291, 534, 17496, 264, 2590, 11, 50794], "temperature": 0.0, "avg_logprob": -0.08729702234268188, "compression_ratio": 1.7967479674796747, "no_speech_prob": 8.748214168008417e-05}, {"id": 329, "seek": 89022, "start": 898.82, "end": 902.1800000000001, "text": " the symbols don't really make sense without the rules.", "tokens": [50794, 264, 16944, 500, 380, 534, 652, 2020, 1553, 264, 4474, 13, 50962], "temperature": 0.0, "avg_logprob": -0.08729702234268188, "compression_ratio": 1.7967479674796747, "no_speech_prob": 8.748214168008417e-05}, {"id": 330, "seek": 89022, "start": 902.1800000000001, "end": 905.78, "text": " And the rules can't really be expressed without symbols.", "tokens": [50962, 400, 264, 4474, 393, 380, 534, 312, 12675, 1553, 16944, 13, 51142], "temperature": 0.0, "avg_logprob": -0.08729702234268188, "compression_ratio": 1.7967479674796747, "no_speech_prob": 8.748214168008417e-05}, {"id": 331, "seek": 89022, "start": 905.78, "end": 907.38, "text": " And so symbols here are making the claim", "tokens": [51142, 400, 370, 16944, 510, 366, 1455, 264, 3932, 51222], "temperature": 0.0, "avg_logprob": -0.08729702234268188, "compression_ratio": 1.7967479674796747, "no_speech_prob": 8.748214168008417e-05}, {"id": 332, "seek": 89022, "start": 907.38, "end": 910.1, "text": " that they're kind of intrinsically related to each other,", "tokens": [51222, 300, 436, 434, 733, 295, 28621, 984, 4077, 281, 1184, 661, 11, 51358], "temperature": 0.0, "avg_logprob": -0.08729702234268188, "compression_ratio": 1.7967479674796747, "no_speech_prob": 8.748214168008417e-05}, {"id": 333, "seek": 89022, "start": 910.1, "end": 911.78, "text": " really two sides of the same coin.", "tokens": [51358, 534, 732, 4881, 295, 264, 912, 11464, 13, 51442], "temperature": 0.0, "avg_logprob": -0.08729702234268188, "compression_ratio": 1.7967479674796747, "no_speech_prob": 8.748214168008417e-05}, {"id": 334, "seek": 89022, "start": 911.78, "end": 915.82, "text": " So this symbol, if you've done any sort of computing,", "tokens": [51442, 407, 341, 5986, 11, 498, 291, 600, 1096, 604, 1333, 295, 15866, 11, 51644], "temperature": 0.0, "avg_logprob": -0.08729702234268188, "compression_ratio": 1.7967479674796747, "no_speech_prob": 8.748214168008417e-05}, {"id": 335, "seek": 91582, "start": 915.82, "end": 920.62, "text": " 0x20 is the hexadecimal number 32, right?", "tokens": [50364, 1958, 87, 2009, 307, 264, 23291, 762, 66, 10650, 1230, 8858, 11, 558, 30, 50604], "temperature": 0.0, "avg_logprob": -0.1430436372756958, "compression_ratio": 1.6543778801843319, "no_speech_prob": 0.0019869261886924505}, {"id": 336, "seek": 91582, "start": 922.82, "end": 924.3000000000001, "text": " But it's also like, sorry,", "tokens": [50714, 583, 309, 311, 611, 411, 11, 2597, 11, 50788], "temperature": 0.0, "avg_logprob": -0.1430436372756958, "compression_ratio": 1.6543778801843319, "no_speech_prob": 0.0019869261886924505}, {"id": 337, "seek": 91582, "start": 924.3000000000001, "end": 929.3000000000001, "text": " it's also the ASCII symbol for space, the space character.", "tokens": [50788, 309, 311, 611, 264, 7469, 34, 9503, 5986, 337, 1901, 11, 264, 1901, 2517, 13, 51038], "temperature": 0.0, "avg_logprob": -0.1430436372756958, "compression_ratio": 1.6543778801843319, "no_speech_prob": 0.0019869261886924505}, {"id": 338, "seek": 91582, "start": 929.46, "end": 931.7800000000001, "text": " So whether you're interpreting the symbol", "tokens": [51046, 407, 1968, 291, 434, 37395, 264, 5986, 51162], "temperature": 0.0, "avg_logprob": -0.1430436372756958, "compression_ratio": 1.6543778801843319, "no_speech_prob": 0.0019869261886924505}, {"id": 339, "seek": 91582, "start": 931.7800000000001, "end": 933.7, "text": " in the context of hexadecimal math", "tokens": [51162, 294, 264, 4319, 295, 23291, 762, 66, 10650, 5221, 51258], "temperature": 0.0, "avg_logprob": -0.1430436372756958, "compression_ratio": 1.6543778801843319, "no_speech_prob": 0.0019869261886924505}, {"id": 340, "seek": 91582, "start": 933.7, "end": 937.74, "text": " or this axiom tower of ASCII or Unicode,", "tokens": [51258, 420, 341, 6360, 72, 298, 10567, 295, 7469, 34, 9503, 420, 1156, 299, 1429, 11, 51460], "temperature": 0.0, "avg_logprob": -0.1430436372756958, "compression_ratio": 1.6543778801843319, "no_speech_prob": 0.0019869261886924505}, {"id": 341, "seek": 91582, "start": 937.74, "end": 940.98, "text": " like the symbol has meaning only in the context", "tokens": [51460, 411, 264, 5986, 575, 3620, 787, 294, 264, 4319, 51622], "temperature": 0.0, "avg_logprob": -0.1430436372756958, "compression_ratio": 1.6543778801843319, "no_speech_prob": 0.0019869261886924505}, {"id": 342, "seek": 91582, "start": 940.98, "end": 943.2600000000001, "text": " of a particular like frame of reference,", "tokens": [51622, 295, 257, 1729, 411, 3920, 295, 6408, 11, 51736], "temperature": 0.0, "avg_logprob": -0.1430436372756958, "compression_ratio": 1.6543778801843319, "no_speech_prob": 0.0019869261886924505}, {"id": 343, "seek": 91582, "start": 943.2600000000001, "end": 944.74, "text": " which is the axiom tower", "tokens": [51736, 597, 307, 264, 6360, 72, 298, 10567, 51810], "temperature": 0.0, "avg_logprob": -0.1430436372756958, "compression_ratio": 1.6543778801843319, "no_speech_prob": 0.0019869261886924505}, {"id": 344, "seek": 94474, "start": 944.74, "end": 946.74, "text": " that you're interpreting the symbol in.", "tokens": [50364, 300, 291, 434, 37395, 264, 5986, 294, 13, 50464], "temperature": 0.0, "avg_logprob": -0.10453281717852128, "compression_ratio": 1.724264705882353, "no_speech_prob": 0.00033526637707836926}, {"id": 345, "seek": 94474, "start": 946.74, "end": 947.7, "text": " And they're one and the same.", "tokens": [50464, 400, 436, 434, 472, 293, 264, 912, 13, 50512], "temperature": 0.0, "avg_logprob": -0.10453281717852128, "compression_ratio": 1.724264705882353, "no_speech_prob": 0.00033526637707836926}, {"id": 346, "seek": 94474, "start": 947.7, "end": 950.78, "text": " You can't separate out these ideas.", "tokens": [50512, 509, 393, 380, 4994, 484, 613, 3487, 13, 50666], "temperature": 0.0, "avg_logprob": -0.10453281717852128, "compression_ratio": 1.724264705882353, "no_speech_prob": 0.00033526637707836926}, {"id": 347, "seek": 94474, "start": 950.78, "end": 952.78, "text": " Another interesting example is DNA.", "tokens": [50666, 3996, 1880, 1365, 307, 8272, 13, 50766], "temperature": 0.0, "avg_logprob": -0.10453281717852128, "compression_ratio": 1.724264705882353, "no_speech_prob": 0.00033526637707836926}, {"id": 348, "seek": 94474, "start": 952.78, "end": 955.26, "text": " So there's this like funny concept", "tokens": [50766, 407, 456, 311, 341, 411, 4074, 3410, 50890], "temperature": 0.0, "avg_logprob": -0.10453281717852128, "compression_ratio": 1.724264705882353, "no_speech_prob": 0.00033526637707836926}, {"id": 349, "seek": 94474, "start": 955.26, "end": 957.98, "text": " that DNA consists of these base pairs", "tokens": [50890, 300, 8272, 14689, 295, 613, 3096, 15494, 51026], "temperature": 0.0, "avg_logprob": -0.10453281717852128, "compression_ratio": 1.724264705882353, "no_speech_prob": 0.00033526637707836926}, {"id": 350, "seek": 94474, "start": 957.98, "end": 960.02, "text": " and that all of the human genome", "tokens": [51026, 293, 300, 439, 295, 264, 1952, 21953, 51128], "temperature": 0.0, "avg_logprob": -0.10453281717852128, "compression_ratio": 1.724264705882353, "no_speech_prob": 0.00033526637707836926}, {"id": 351, "seek": 94474, "start": 960.02, "end": 963.22, "text": " is sort of some ridiculously small amount of data.", "tokens": [51128, 307, 1333, 295, 512, 41358, 1359, 2372, 295, 1412, 13, 51288], "temperature": 0.0, "avg_logprob": -0.10453281717852128, "compression_ratio": 1.724264705882353, "no_speech_prob": 0.00033526637707836926}, {"id": 352, "seek": 94474, "start": 963.22, "end": 965.98, "text": " And it's just like claim that,", "tokens": [51288, 400, 309, 311, 445, 411, 3932, 300, 11, 51426], "temperature": 0.0, "avg_logprob": -0.10453281717852128, "compression_ratio": 1.724264705882353, "no_speech_prob": 0.00033526637707836926}, {"id": 353, "seek": 94474, "start": 965.98, "end": 969.0600000000001, "text": " therefore like life is not really that complex", "tokens": [51426, 4412, 411, 993, 307, 406, 534, 300, 3997, 51580], "temperature": 0.0, "avg_logprob": -0.10453281717852128, "compression_ratio": 1.724264705882353, "no_speech_prob": 0.00033526637707836926}, {"id": 354, "seek": 94474, "start": 969.0600000000001, "end": 971.82, "text": " because there's really not much information in DNA.", "tokens": [51580, 570, 456, 311, 534, 406, 709, 1589, 294, 8272, 13, 51718], "temperature": 0.0, "avg_logprob": -0.10453281717852128, "compression_ratio": 1.724264705882353, "no_speech_prob": 0.00033526637707836926}, {"id": 355, "seek": 94474, "start": 971.82, "end": 973.86, "text": " But if you really examine this question,", "tokens": [51718, 583, 498, 291, 534, 17496, 341, 1168, 11, 51820], "temperature": 0.0, "avg_logprob": -0.10453281717852128, "compression_ratio": 1.724264705882353, "no_speech_prob": 0.00033526637707836926}, {"id": 356, "seek": 97386, "start": 973.86, "end": 977.66, "text": " DNA by itself is completely meaningless and useless", "tokens": [50364, 8272, 538, 2564, 307, 2584, 33232, 293, 14115, 50554], "temperature": 0.0, "avg_logprob": -0.12192094214608735, "compression_ratio": 1.6578947368421053, "no_speech_prob": 4.005586379207671e-05}, {"id": 357, "seek": 97386, "start": 977.66, "end": 980.26, "text": " without the corresponding like cellular machinery", "tokens": [50554, 1553, 264, 11760, 411, 29267, 27302, 50684], "temperature": 0.0, "avg_logprob": -0.12192094214608735, "compression_ratio": 1.6578947368421053, "no_speech_prob": 4.005586379207671e-05}, {"id": 358, "seek": 97386, "start": 980.26, "end": 982.22, "text": " that's able to actually unpack it and read it", "tokens": [50684, 300, 311, 1075, 281, 767, 26699, 309, 293, 1401, 309, 50782], "temperature": 0.0, "avg_logprob": -0.12192094214608735, "compression_ratio": 1.6578947368421053, "no_speech_prob": 4.005586379207671e-05}, {"id": 359, "seek": 97386, "start": 982.22, "end": 984.5600000000001, "text": " and build actual life from it.", "tokens": [50782, 293, 1322, 3539, 993, 490, 309, 13, 50899], "temperature": 0.0, "avg_logprob": -0.12192094214608735, "compression_ratio": 1.6578947368421053, "no_speech_prob": 4.005586379207671e-05}, {"id": 360, "seek": 97386, "start": 984.5600000000001, "end": 987.26, "text": " So DNA and the thing that reads the DNA,", "tokens": [50899, 407, 8272, 293, 264, 551, 300, 15700, 264, 8272, 11, 51034], "temperature": 0.0, "avg_logprob": -0.12192094214608735, "compression_ratio": 1.6578947368421053, "no_speech_prob": 4.005586379207671e-05}, {"id": 361, "seek": 97386, "start": 987.26, "end": 990.1800000000001, "text": " they're intrinsically linked to each other.", "tokens": [51034, 436, 434, 28621, 984, 9408, 281, 1184, 661, 13, 51180], "temperature": 0.0, "avg_logprob": -0.12192094214608735, "compression_ratio": 1.6578947368421053, "no_speech_prob": 4.005586379207671e-05}, {"id": 362, "seek": 97386, "start": 990.1800000000001, "end": 992.7, "text": " The symbols and the rules are one and the same.", "tokens": [51180, 440, 16944, 293, 264, 4474, 366, 472, 293, 264, 912, 13, 51306], "temperature": 0.0, "avg_logprob": -0.12192094214608735, "compression_ratio": 1.6578947368421053, "no_speech_prob": 4.005586379207671e-05}, {"id": 363, "seek": 97386, "start": 996.22, "end": 997.86, "text": " Here's an interesting philosophical claim.", "tokens": [51482, 1692, 311, 364, 1880, 25066, 3932, 13, 51564], "temperature": 0.0, "avg_logprob": -0.12192094214608735, "compression_ratio": 1.6578947368421053, "no_speech_prob": 4.005586379207671e-05}, {"id": 364, "seek": 97386, "start": 997.86, "end": 1001.58, "text": " I think that math is actually discovered and not invented.", "tokens": [51564, 286, 519, 300, 5221, 307, 767, 6941, 293, 406, 14479, 13, 51750], "temperature": 0.0, "avg_logprob": -0.12192094214608735, "compression_ratio": 1.6578947368421053, "no_speech_prob": 4.005586379207671e-05}, {"id": 365, "seek": 97386, "start": 1001.58, "end": 1003.0600000000001, "text": " And the analogy that I have", "tokens": [51750, 400, 264, 21663, 300, 286, 362, 51824], "temperature": 0.0, "avg_logprob": -0.12192094214608735, "compression_ratio": 1.6578947368421053, "no_speech_prob": 4.005586379207671e-05}, {"id": 366, "seek": 100306, "start": 1003.06, "end": 1006.2199999999999, "text": " is sort of a visualization of this axiom tower", "tokens": [50364, 307, 1333, 295, 257, 25801, 295, 341, 6360, 72, 298, 10567, 50522], "temperature": 0.0, "avg_logprob": -0.15514175980179398, "compression_ratio": 1.5644444444444445, "no_speech_prob": 0.0002002114342758432}, {"id": 367, "seek": 100306, "start": 1006.2199999999999, "end": 1009.8199999999999, "text": " and the top levels of this axiom tower are kind of obscured.", "tokens": [50522, 293, 264, 1192, 4358, 295, 341, 6360, 72, 298, 10567, 366, 733, 295, 22082, 3831, 13, 50702], "temperature": 0.0, "avg_logprob": -0.15514175980179398, "compression_ratio": 1.5644444444444445, "no_speech_prob": 0.0002002114342758432}, {"id": 368, "seek": 100306, "start": 1009.8199999999999, "end": 1012.3399999999999, "text": " It's not exactly clear what they should be.", "tokens": [50702, 467, 311, 406, 2293, 1850, 437, 436, 820, 312, 13, 50828], "temperature": 0.0, "avg_logprob": -0.15514175980179398, "compression_ratio": 1.5644444444444445, "no_speech_prob": 0.0002002114342758432}, {"id": 369, "seek": 100306, "start": 1013.3, "end": 1014.8599999999999, "text": " And what you're doing as a mathematician", "tokens": [50876, 400, 437, 291, 434, 884, 382, 257, 48281, 50954], "temperature": 0.0, "avg_logprob": -0.15514175980179398, "compression_ratio": 1.5644444444444445, "no_speech_prob": 0.0002002114342758432}, {"id": 370, "seek": 100306, "start": 1014.8599999999999, "end": 1017.4599999999999, "text": " is kind of like discovering consequences", "tokens": [50954, 307, 733, 295, 411, 24773, 10098, 51084], "temperature": 0.0, "avg_logprob": -0.15514175980179398, "compression_ratio": 1.5644444444444445, "no_speech_prob": 0.0002002114342758432}, {"id": 371, "seek": 100306, "start": 1017.4599999999999, "end": 1019.66, "text": " of having initial axioms.", "tokens": [51084, 295, 1419, 5883, 6360, 72, 4785, 13, 51194], "temperature": 0.0, "avg_logprob": -0.15514175980179398, "compression_ratio": 1.5644444444444445, "no_speech_prob": 0.0002002114342758432}, {"id": 372, "seek": 100306, "start": 1021.66, "end": 1022.5, "text": " Sound good?", "tokens": [51294, 14673, 665, 30, 51336], "temperature": 0.0, "avg_logprob": -0.15514175980179398, "compression_ratio": 1.5644444444444445, "no_speech_prob": 0.0002002114342758432}, {"id": 373, "seek": 100306, "start": 1022.5, "end": 1023.3399999999999, "text": " Questions?", "tokens": [51336, 27738, 30, 51378], "temperature": 0.0, "avg_logprob": -0.15514175980179398, "compression_ratio": 1.5644444444444445, "no_speech_prob": 0.0002002114342758432}, {"id": 374, "seek": 100306, "start": 1026.62, "end": 1027.98, "text": " All right.", "tokens": [51542, 1057, 558, 13, 51610], "temperature": 0.0, "avg_logprob": -0.15514175980179398, "compression_ratio": 1.5644444444444445, "no_speech_prob": 0.0002002114342758432}, {"id": 375, "seek": 100306, "start": 1027.98, "end": 1029.74, "text": " So recap, axioms are self-evident.", "tokens": [51610, 407, 20928, 11, 6360, 72, 4785, 366, 2698, 12, 13379, 1078, 13, 51698], "temperature": 0.0, "avg_logprob": -0.15514175980179398, "compression_ratio": 1.5644444444444445, "no_speech_prob": 0.0002002114342758432}, {"id": 376, "seek": 100306, "start": 1029.74, "end": 1031.54, "text": " They're taken as given.", "tokens": [51698, 814, 434, 2726, 382, 2212, 13, 51788], "temperature": 0.0, "avg_logprob": -0.15514175980179398, "compression_ratio": 1.5644444444444445, "no_speech_prob": 0.0002002114342758432}, {"id": 377, "seek": 103154, "start": 1032.54, "end": 1035.18, "text": " Theorems are derived from redundant rules.", "tokens": [50414, 440, 284, 9097, 366, 18949, 490, 40997, 4474, 13, 50546], "temperature": 0.0, "avg_logprob": -0.1555208072327731, "compression_ratio": 1.677685950413223, "no_speech_prob": 8.21818393887952e-05}, {"id": 378, "seek": 103154, "start": 1035.18, "end": 1036.94, "text": " Axioms and theorems stack up together", "tokens": [50546, 20118, 72, 4785, 293, 10299, 2592, 8630, 493, 1214, 50634], "temperature": 0.0, "avg_logprob": -0.1555208072327731, "compression_ratio": 1.677685950413223, "no_speech_prob": 8.21818393887952e-05}, {"id": 379, "seek": 103154, "start": 1036.94, "end": 1039.6599999999999, "text": " to build these things called axiom towers.", "tokens": [50634, 281, 1322, 613, 721, 1219, 6360, 72, 298, 25045, 13, 50770], "temperature": 0.0, "avg_logprob": -0.1555208072327731, "compression_ratio": 1.677685950413223, "no_speech_prob": 8.21818393887952e-05}, {"id": 380, "seek": 103154, "start": 1039.6599999999999, "end": 1043.06, "text": " And some symbols are actually just syntactic sugar.", "tokens": [50770, 400, 512, 16944, 366, 767, 445, 23980, 19892, 5076, 13, 50940], "temperature": 0.0, "avg_logprob": -0.1555208072327731, "compression_ratio": 1.677685950413223, "no_speech_prob": 8.21818393887952e-05}, {"id": 381, "seek": 103154, "start": 1043.06, "end": 1046.62, "text": " Symbols and rules are intrinsically related.", "tokens": [50940, 3902, 5612, 82, 293, 4474, 366, 28621, 984, 4077, 13, 51118], "temperature": 0.0, "avg_logprob": -0.1555208072327731, "compression_ratio": 1.677685950413223, "no_speech_prob": 8.21818393887952e-05}, {"id": 382, "seek": 103154, "start": 1046.62, "end": 1049.2, "text": " And math is a discovery of the consequences", "tokens": [51118, 400, 5221, 307, 257, 12114, 295, 264, 10098, 51247], "temperature": 0.0, "avg_logprob": -0.1555208072327731, "compression_ratio": 1.677685950413223, "no_speech_prob": 8.21818393887952e-05}, {"id": 383, "seek": 103154, "start": 1049.2, "end": 1050.7, "text": " of foundational axioms.", "tokens": [51247, 295, 32195, 6360, 72, 4785, 13, 51322], "temperature": 0.0, "avg_logprob": -0.1555208072327731, "compression_ratio": 1.677685950413223, "no_speech_prob": 8.21818393887952e-05}, {"id": 384, "seek": 103154, "start": 1052.62, "end": 1054.02, "text": " And the axioms are arbitrary,", "tokens": [51418, 400, 264, 6360, 72, 4785, 366, 23211, 11, 51488], "temperature": 0.0, "avg_logprob": -0.1555208072327731, "compression_ratio": 1.677685950413223, "no_speech_prob": 8.21818393887952e-05}, {"id": 385, "seek": 103154, "start": 1054.02, "end": 1056.62, "text": " but some axiom towers are more useful than others.", "tokens": [51488, 457, 512, 6360, 72, 298, 25045, 366, 544, 4420, 813, 2357, 13, 51618], "temperature": 0.0, "avg_logprob": -0.1555208072327731, "compression_ratio": 1.677685950413223, "no_speech_prob": 8.21818393887952e-05}, {"id": 386, "seek": 103154, "start": 1057.74, "end": 1059.3799999999999, "text": " All right.", "tokens": [51674, 1057, 558, 13, 51756], "temperature": 0.0, "avg_logprob": -0.1555208072327731, "compression_ratio": 1.677685950413223, "no_speech_prob": 8.21818393887952e-05}, {"id": 387, "seek": 103154, "start": 1059.3799999999999, "end": 1060.22, "text": " You guys are comfortable.", "tokens": [51756, 509, 1074, 366, 4619, 13, 51798], "temperature": 0.0, "avg_logprob": -0.1555208072327731, "compression_ratio": 1.677685950413223, "no_speech_prob": 8.21818393887952e-05}, {"id": 388, "seek": 106022, "start": 1060.22, "end": 1062.1000000000001, "text": " We're gonna get to the exciting part.", "tokens": [50364, 492, 434, 799, 483, 281, 264, 4670, 644, 13, 50458], "temperature": 0.0, "avg_logprob": -0.17630285146285077, "compression_ratio": 1.5575221238938053, "no_speech_prob": 0.0001397816085955128}, {"id": 389, "seek": 106022, "start": 1063.26, "end": 1064.1000000000001, "text": " Computation.", "tokens": [50516, 37804, 399, 13, 50558], "temperature": 0.0, "avg_logprob": -0.17630285146285077, "compression_ratio": 1.5575221238938053, "no_speech_prob": 0.0001397816085955128}, {"id": 390, "seek": 106022, "start": 1067.3, "end": 1069.54, "text": " This is a graph of certain things", "tokens": [50718, 639, 307, 257, 4295, 295, 1629, 721, 50830], "temperature": 0.0, "avg_logprob": -0.17630285146285077, "compression_ratio": 1.5575221238938053, "no_speech_prob": 0.0001397816085955128}, {"id": 391, "seek": 106022, "start": 1069.54, "end": 1071.06, "text": " that we kind of take for granted today,", "tokens": [50830, 300, 321, 733, 295, 747, 337, 12344, 965, 11, 50906], "temperature": 0.0, "avg_logprob": -0.17630285146285077, "compression_ratio": 1.5575221238938053, "no_speech_prob": 0.0001397816085955128}, {"id": 392, "seek": 106022, "start": 1071.06, "end": 1074.42, "text": " like running water and electric power over time.", "tokens": [50906, 411, 2614, 1281, 293, 5210, 1347, 670, 565, 13, 51074], "temperature": 0.0, "avg_logprob": -0.17630285146285077, "compression_ratio": 1.5575221238938053, "no_speech_prob": 0.0001397816085955128}, {"id": 393, "seek": 106022, "start": 1074.42, "end": 1078.02, "text": " And here I wanna point out that in the 1930s,", "tokens": [51074, 400, 510, 286, 1948, 935, 484, 300, 294, 264, 22350, 82, 11, 51254], "temperature": 0.0, "avg_logprob": -0.17630285146285077, "compression_ratio": 1.5575221238938053, "no_speech_prob": 0.0001397816085955128}, {"id": 394, "seek": 106022, "start": 1079.54, "end": 1082.5, "text": " more people had electric power than running water.", "tokens": [51330, 544, 561, 632, 5210, 1347, 813, 2614, 1281, 13, 51478], "temperature": 0.0, "avg_logprob": -0.17630285146285077, "compression_ratio": 1.5575221238938053, "no_speech_prob": 0.0001397816085955128}, {"id": 395, "seek": 106022, "start": 1082.5, "end": 1086.3, "text": " And that number was around 65, 70%.", "tokens": [51478, 400, 300, 1230, 390, 926, 11624, 11, 5285, 6856, 51668], "temperature": 0.0, "avg_logprob": -0.17630285146285077, "compression_ratio": 1.5575221238938053, "no_speech_prob": 0.0001397816085955128}, {"id": 396, "seek": 106022, "start": 1086.3, "end": 1089.14, "text": " So you can imagine being in the 1930s, right?", "tokens": [51668, 407, 291, 393, 3811, 885, 294, 264, 22350, 82, 11, 558, 30, 51810], "temperature": 0.0, "avg_logprob": -0.17630285146285077, "compression_ratio": 1.5575221238938053, "no_speech_prob": 0.0001397816085955128}, {"id": 397, "seek": 109022, "start": 1091.02, "end": 1095.34, "text": " And at this point, algorithms had already existed, right?", "tokens": [50404, 400, 412, 341, 935, 11, 14642, 632, 1217, 13135, 11, 558, 30, 50620], "temperature": 0.0, "avg_logprob": -0.12355189360389414, "compression_ratio": 1.6830985915492958, "no_speech_prob": 0.00012336049985606223}, {"id": 398, "seek": 109022, "start": 1095.34, "end": 1097.78, "text": " So way back in 2000 BC,", "tokens": [50620, 407, 636, 646, 294, 8132, 14359, 11, 50742], "temperature": 0.0, "avg_logprob": -0.12355189360389414, "compression_ratio": 1.6830985915492958, "no_speech_prob": 0.00012336049985606223}, {"id": 399, "seek": 109022, "start": 1097.78, "end": 1100.42, "text": " Egyptians figured out how to multiply two numbers together.", "tokens": [50742, 44119, 8932, 484, 577, 281, 12972, 732, 3547, 1214, 13, 50874], "temperature": 0.0, "avg_logprob": -0.12355189360389414, "compression_ratio": 1.6830985915492958, "no_speech_prob": 0.00012336049985606223}, {"id": 400, "seek": 109022, "start": 1100.42, "end": 1102.9, "text": " Babylonians figured out how to factorize things", "tokens": [50874, 30278, 2567, 8932, 484, 577, 281, 5952, 1125, 721, 50998], "temperature": 0.0, "avg_logprob": -0.12355189360389414, "compression_ratio": 1.6830985915492958, "no_speech_prob": 0.00012336049985606223}, {"id": 401, "seek": 109022, "start": 1102.9, "end": 1104.7, "text": " and find square roots.", "tokens": [50998, 293, 915, 3732, 10669, 13, 51088], "temperature": 0.0, "avg_logprob": -0.12355189360389414, "compression_ratio": 1.6830985915492958, "no_speech_prob": 0.00012336049985606223}, {"id": 402, "seek": 109022, "start": 1104.7, "end": 1106.58, "text": " Euclid's algorithm, which is really cool,", "tokens": [51088, 462, 1311, 75, 327, 311, 9284, 11, 597, 307, 534, 1627, 11, 51182], "temperature": 0.0, "avg_logprob": -0.12355189360389414, "compression_ratio": 1.6830985915492958, "no_speech_prob": 0.00012336049985606223}, {"id": 403, "seek": 109022, "start": 1106.58, "end": 1108.7, "text": " the same Euclid as geometry.", "tokens": [51182, 264, 912, 462, 1311, 75, 327, 382, 18426, 13, 51288], "temperature": 0.0, "avg_logprob": -0.12355189360389414, "compression_ratio": 1.6830985915492958, "no_speech_prob": 0.00012336049985606223}, {"id": 404, "seek": 109022, "start": 1108.7, "end": 1111.92, "text": " He figured out how to get the greatest common factor", "tokens": [51288, 634, 8932, 484, 577, 281, 483, 264, 6636, 2689, 5952, 51449], "temperature": 0.0, "avg_logprob": -0.12355189360389414, "compression_ratio": 1.6830985915492958, "no_speech_prob": 0.00012336049985606223}, {"id": 405, "seek": 109022, "start": 1111.92, "end": 1113.5, "text": " between two numbers.", "tokens": [51449, 1296, 732, 3547, 13, 51528], "temperature": 0.0, "avg_logprob": -0.12355189360389414, "compression_ratio": 1.6830985915492958, "no_speech_prob": 0.00012336049985606223}, {"id": 406, "seek": 109022, "start": 1113.5, "end": 1115.82, "text": " And this algorithm is actually really beautiful", "tokens": [51528, 400, 341, 9284, 307, 767, 534, 2238, 51644], "temperature": 0.0, "avg_logprob": -0.12355189360389414, "compression_ratio": 1.6830985915492958, "no_speech_prob": 0.00012336049985606223}, {"id": 407, "seek": 109022, "start": 1115.82, "end": 1116.74, "text": " if you've never seen it.", "tokens": [51644, 498, 291, 600, 1128, 1612, 309, 13, 51690], "temperature": 0.0, "avg_logprob": -0.12355189360389414, "compression_ratio": 1.6830985915492958, "no_speech_prob": 0.00012336049985606223}, {"id": 408, "seek": 109022, "start": 1116.74, "end": 1119.5, "text": " It's called, I've actually never pronounced it,", "tokens": [51690, 467, 311, 1219, 11, 286, 600, 767, 1128, 23155, 309, 11, 51828], "temperature": 0.0, "avg_logprob": -0.12355189360389414, "compression_ratio": 1.6830985915492958, "no_speech_prob": 0.00012336049985606223}, {"id": 409, "seek": 111950, "start": 1119.5, "end": 1123.18, "text": " but I've read it, it's sieve or aerotostinese.", "tokens": [50364, 457, 286, 600, 1401, 309, 11, 309, 311, 2804, 303, 420, 11207, 310, 555, 259, 1130, 13, 50548], "temperature": 0.0, "avg_logprob": -0.20478993603306958, "compression_ratio": 1.6305970149253732, "no_speech_prob": 0.00018509004439692944}, {"id": 410, "seek": 111950, "start": 1123.18, "end": 1126.28, "text": " It's a way to generate prime numbers.", "tokens": [50548, 467, 311, 257, 636, 281, 8460, 5835, 3547, 13, 50703], "temperature": 0.0, "avg_logprob": -0.20478993603306958, "compression_ratio": 1.6305970149253732, "no_speech_prob": 0.00018509004439692944}, {"id": 411, "seek": 111950, "start": 1127.76, "end": 1131.18, "text": " And Al-Quarizmi figured out how to solve linear equations", "tokens": [50777, 400, 967, 12, 8547, 289, 590, 3057, 8932, 484, 577, 281, 5039, 8213, 11787, 50948], "temperature": 0.0, "avg_logprob": -0.20478993603306958, "compression_ratio": 1.6305970149253732, "no_speech_prob": 0.00018509004439692944}, {"id": 412, "seek": 111950, "start": 1131.18, "end": 1132.36, "text": " and quadratic equations.", "tokens": [50948, 293, 37262, 11787, 13, 51007], "temperature": 0.0, "avg_logprob": -0.20478993603306958, "compression_ratio": 1.6305970149253732, "no_speech_prob": 0.00018509004439692944}, {"id": 413, "seek": 111950, "start": 1132.36, "end": 1133.86, "text": " And it turns out that the word algorithm", "tokens": [51007, 400, 309, 4523, 484, 300, 264, 1349, 9284, 51082], "temperature": 0.0, "avg_logprob": -0.20478993603306958, "compression_ratio": 1.6305970149253732, "no_speech_prob": 0.00018509004439692944}, {"id": 414, "seek": 111950, "start": 1133.86, "end": 1135.34, "text": " actually comes from his name.", "tokens": [51082, 767, 1487, 490, 702, 1315, 13, 51156], "temperature": 0.0, "avg_logprob": -0.20478993603306958, "compression_ratio": 1.6305970149253732, "no_speech_prob": 0.00018509004439692944}, {"id": 415, "seek": 111950, "start": 1136.9, "end": 1139.7, "text": " So we have like hundreds or thousands of years", "tokens": [51234, 407, 321, 362, 411, 6779, 420, 5383, 295, 924, 51374], "temperature": 0.0, "avg_logprob": -0.20478993603306958, "compression_ratio": 1.6305970149253732, "no_speech_prob": 0.00018509004439692944}, {"id": 416, "seek": 111950, "start": 1139.7, "end": 1142.98, "text": " of understanding of these things called algorithms,", "tokens": [51374, 295, 3701, 295, 613, 721, 1219, 14642, 11, 51538], "temperature": 0.0, "avg_logprob": -0.20478993603306958, "compression_ratio": 1.6305970149253732, "no_speech_prob": 0.00018509004439692944}, {"id": 417, "seek": 111950, "start": 1142.98, "end": 1145.66, "text": " which really were kind of informal at the time.", "tokens": [51538, 597, 534, 645, 733, 295, 24342, 412, 264, 565, 13, 51672], "temperature": 0.0, "avg_logprob": -0.20478993603306958, "compression_ratio": 1.6305970149253732, "no_speech_prob": 0.00018509004439692944}, {"id": 418, "seek": 111950, "start": 1145.66, "end": 1148.42, "text": " And you can kind of consider them as like sequences", "tokens": [51672, 400, 291, 393, 733, 295, 1949, 552, 382, 411, 22978, 51810], "temperature": 0.0, "avg_logprob": -0.20478993603306958, "compression_ratio": 1.6305970149253732, "no_speech_prob": 0.00018509004439692944}, {"id": 419, "seek": 114842, "start": 1148.46, "end": 1151.98, "text": " of instructions to follow to do something, right?", "tokens": [50366, 295, 9415, 281, 1524, 281, 360, 746, 11, 558, 30, 50542], "temperature": 0.0, "avg_logprob": -0.174205568101671, "compression_ratio": 1.5774647887323943, "no_speech_prob": 0.0005788351991213858}, {"id": 420, "seek": 114842, "start": 1151.98, "end": 1155.5800000000002, "text": " But we didn't have like a precise axiomatic definition", "tokens": [50542, 583, 321, 994, 380, 362, 411, 257, 13600, 6360, 72, 13143, 7123, 50722], "temperature": 0.0, "avg_logprob": -0.174205568101671, "compression_ratio": 1.5774647887323943, "no_speech_prob": 0.0005788351991213858}, {"id": 421, "seek": 114842, "start": 1155.5800000000002, "end": 1158.8200000000002, "text": " of computing in the way that Piano defined", "tokens": [50722, 295, 15866, 294, 264, 636, 300, 430, 6254, 7642, 50884], "temperature": 0.0, "avg_logprob": -0.174205568101671, "compression_ratio": 1.5774647887323943, "no_speech_prob": 0.0005788351991213858}, {"id": 422, "seek": 114842, "start": 1158.8200000000002, "end": 1162.18, "text": " the axiomatic definition of mass, right?", "tokens": [50884, 264, 6360, 72, 13143, 7123, 295, 2758, 11, 558, 30, 51052], "temperature": 0.0, "avg_logprob": -0.174205568101671, "compression_ratio": 1.5774647887323943, "no_speech_prob": 0.0005788351991213858}, {"id": 423, "seek": 114842, "start": 1162.18, "end": 1163.3400000000001, "text": " In the 30s.", "tokens": [51052, 682, 264, 2217, 82, 13, 51110], "temperature": 0.0, "avg_logprob": -0.174205568101671, "compression_ratio": 1.5774647887323943, "no_speech_prob": 0.0005788351991213858}, {"id": 424, "seek": 114842, "start": 1163.3400000000001, "end": 1168.3400000000001, "text": " And so these guys pretty much at exactly the same time", "tokens": [51110, 400, 370, 613, 1074, 1238, 709, 412, 2293, 264, 912, 565, 51360], "temperature": 0.0, "avg_logprob": -0.174205568101671, "compression_ratio": 1.5774647887323943, "no_speech_prob": 0.0005788351991213858}, {"id": 425, "seek": 114842, "start": 1170.76, "end": 1173.22, "text": " did that independently.", "tokens": [51481, 630, 300, 21761, 13, 51604], "temperature": 0.0, "avg_logprob": -0.174205568101671, "compression_ratio": 1.5774647887323943, "no_speech_prob": 0.0005788351991213858}, {"id": 426, "seek": 114842, "start": 1174.52, "end": 1177.74, "text": " Alan Turing created these things called Turing Machines.", "tokens": [51669, 16442, 314, 1345, 2942, 613, 721, 1219, 314, 1345, 12089, 1652, 13, 51830], "temperature": 0.0, "avg_logprob": -0.174205568101671, "compression_ratio": 1.5774647887323943, "no_speech_prob": 0.0005788351991213858}, {"id": 427, "seek": 117842, "start": 1178.42, "end": 1180.46, "text": " Alonzo Church created these things,", "tokens": [50364, 967, 266, 4765, 7882, 2942, 613, 721, 11, 50466], "temperature": 0.0, "avg_logprob": -0.15486012608551783, "compression_ratio": 1.7642585551330798, "no_speech_prob": 0.00014420079241972417}, {"id": 428, "seek": 117842, "start": 1180.46, "end": 1182.26, "text": " this thing called Lambda Calculus.", "tokens": [50466, 341, 551, 1219, 45691, 3511, 36002, 13, 50556], "temperature": 0.0, "avg_logprob": -0.15486012608551783, "compression_ratio": 1.7642585551330798, "no_speech_prob": 0.00014420079241972417}, {"id": 429, "seek": 117842, "start": 1183.22, "end": 1185.02, "text": " And Kurt Godel created these things", "tokens": [50604, 400, 26168, 1265, 338, 2942, 613, 721, 50694], "temperature": 0.0, "avg_logprob": -0.15486012608551783, "compression_ratio": 1.7642585551330798, "no_speech_prob": 0.00014420079241972417}, {"id": 430, "seek": 117842, "start": 1185.02, "end": 1187.46, "text": " called general recursive functions.", "tokens": [50694, 1219, 2674, 20560, 488, 6828, 13, 50816], "temperature": 0.0, "avg_logprob": -0.15486012608551783, "compression_ratio": 1.7642585551330798, "no_speech_prob": 0.00014420079241972417}, {"id": 431, "seek": 117842, "start": 1187.46, "end": 1189.02, "text": " So we're gonna ignore the last one", "tokens": [50816, 407, 321, 434, 799, 11200, 264, 1036, 472, 50894], "temperature": 0.0, "avg_logprob": -0.15486012608551783, "compression_ratio": 1.7642585551330798, "no_speech_prob": 0.00014420079241972417}, {"id": 432, "seek": 117842, "start": 1189.02, "end": 1191.18, "text": " and actually drill into these two,", "tokens": [50894, 293, 767, 11392, 666, 613, 732, 11, 51002], "temperature": 0.0, "avg_logprob": -0.15486012608551783, "compression_ratio": 1.7642585551330798, "no_speech_prob": 0.00014420079241972417}, {"id": 433, "seek": 117842, "start": 1191.18, "end": 1193.6200000000001, "text": " Turing Machines and Lambda Calculus.", "tokens": [51002, 314, 1345, 12089, 1652, 293, 45691, 3511, 36002, 13, 51124], "temperature": 0.0, "avg_logprob": -0.15486012608551783, "compression_ratio": 1.7642585551330798, "no_speech_prob": 0.00014420079241972417}, {"id": 434, "seek": 117842, "start": 1193.6200000000001, "end": 1196.1000000000001, "text": " And the really, really cool thing is that", "tokens": [51124, 400, 264, 534, 11, 534, 1627, 551, 307, 300, 51248], "temperature": 0.0, "avg_logprob": -0.15486012608551783, "compression_ratio": 1.7642585551330798, "no_speech_prob": 0.00014420079241972417}, {"id": 435, "seek": 117842, "start": 1196.1000000000001, "end": 1200.74, "text": " these axiomatic systems are both reasonable", "tokens": [51248, 613, 6360, 72, 13143, 3652, 366, 1293, 10585, 51480], "temperature": 0.0, "avg_logprob": -0.15486012608551783, "compression_ratio": 1.7642585551330798, "no_speech_prob": 0.00014420079241972417}, {"id": 436, "seek": 117842, "start": 1200.74, "end": 1202.6200000000001, "text": " and good definitions for computing,", "tokens": [51480, 293, 665, 21988, 337, 15866, 11, 51574], "temperature": 0.0, "avg_logprob": -0.15486012608551783, "compression_ratio": 1.7642585551330798, "no_speech_prob": 0.00014420079241972417}, {"id": 437, "seek": 117842, "start": 1202.6200000000001, "end": 1205.1000000000001, "text": " but they look very, very different from each other.", "tokens": [51574, 457, 436, 574, 588, 11, 588, 819, 490, 1184, 661, 13, 51698], "temperature": 0.0, "avg_logprob": -0.15486012608551783, "compression_ratio": 1.7642585551330798, "no_speech_prob": 0.00014420079241972417}, {"id": 438, "seek": 117842, "start": 1205.1000000000001, "end": 1207.54, "text": " So we're gonna talk about what they are.", "tokens": [51698, 407, 321, 434, 799, 751, 466, 437, 436, 366, 13, 51820], "temperature": 0.0, "avg_logprob": -0.15486012608551783, "compression_ratio": 1.7642585551330798, "no_speech_prob": 0.00014420079241972417}, {"id": 439, "seek": 120842, "start": 1208.42, "end": 1209.6200000000001, "text": " So Turing Machines.", "tokens": [50364, 407, 314, 1345, 12089, 1652, 13, 50424], "temperature": 0.0, "avg_logprob": -0.1337683969292759, "compression_ratio": 1.6856060606060606, "no_speech_prob": 0.00011589356290642172}, {"id": 440, "seek": 120842, "start": 1211.18, "end": 1212.9, "text": " You can envision a Turing machine.", "tokens": [50502, 509, 393, 24739, 257, 314, 1345, 3479, 13, 50588], "temperature": 0.0, "avg_logprob": -0.1337683969292759, "compression_ratio": 1.6856060606060606, "no_speech_prob": 0.00011589356290642172}, {"id": 441, "seek": 120842, "start": 1212.9, "end": 1215.18, "text": " So Alan Turing was thinking about,", "tokens": [50588, 407, 16442, 314, 1345, 390, 1953, 466, 11, 50702], "temperature": 0.0, "avg_logprob": -0.1337683969292759, "compression_ratio": 1.6856060606060606, "no_speech_prob": 0.00011589356290642172}, {"id": 442, "seek": 120842, "start": 1215.18, "end": 1218.3400000000001, "text": " like you can kind of empathize with what he was doing.", "tokens": [50702, 411, 291, 393, 733, 295, 27155, 1125, 365, 437, 415, 390, 884, 13, 50860], "temperature": 0.0, "avg_logprob": -0.1337683969292759, "compression_ratio": 1.6856060606060606, "no_speech_prob": 0.00011589356290642172}, {"id": 443, "seek": 120842, "start": 1218.3400000000001, "end": 1221.46, "text": " He was looking at all these algorithms that we have", "tokens": [50860, 634, 390, 1237, 412, 439, 613, 14642, 300, 321, 362, 51016], "temperature": 0.0, "avg_logprob": -0.1337683969292759, "compression_ratio": 1.6856060606060606, "no_speech_prob": 0.00011589356290642172}, {"id": 444, "seek": 120842, "start": 1221.46, "end": 1225.18, "text": " and he was trying to reduce like all of the algorithms down", "tokens": [51016, 293, 415, 390, 1382, 281, 5407, 411, 439, 295, 264, 14642, 760, 51202], "temperature": 0.0, "avg_logprob": -0.1337683969292759, "compression_ratio": 1.6856060606060606, "no_speech_prob": 0.00011589356290642172}, {"id": 445, "seek": 120842, "start": 1225.18, "end": 1229.18, "text": " into their most principle like reduced forms, right?", "tokens": [51202, 666, 641, 881, 8665, 411, 9212, 6422, 11, 558, 30, 51402], "temperature": 0.0, "avg_logprob": -0.1337683969292759, "compression_ratio": 1.6856060606060606, "no_speech_prob": 0.00011589356290642172}, {"id": 446, "seek": 120842, "start": 1229.18, "end": 1232.3400000000001, "text": " And then essentially use that as the base of an axiom tower", "tokens": [51402, 400, 550, 4476, 764, 300, 382, 264, 3096, 295, 364, 6360, 72, 298, 10567, 51560], "temperature": 0.0, "avg_logprob": -0.1337683969292759, "compression_ratio": 1.6856060606060606, "no_speech_prob": 0.00011589356290642172}, {"id": 447, "seek": 120842, "start": 1232.3400000000001, "end": 1235.18, "text": " and build higher level constructs on top of that, right?", "tokens": [51560, 293, 1322, 2946, 1496, 7690, 82, 322, 1192, 295, 300, 11, 558, 30, 51702], "temperature": 0.0, "avg_logprob": -0.1337683969292759, "compression_ratio": 1.6856060606060606, "no_speech_prob": 0.00011589356290642172}, {"id": 448, "seek": 120842, "start": 1235.18, "end": 1236.3400000000001, "text": " This was his goal.", "tokens": [51702, 639, 390, 702, 3387, 13, 51760], "temperature": 0.0, "avg_logprob": -0.1337683969292759, "compression_ratio": 1.6856060606060606, "no_speech_prob": 0.00011589356290642172}, {"id": 449, "seek": 123634, "start": 1236.3799999999999, "end": 1239.86, "text": " And so he envisioned this concept called a Turing machine.", "tokens": [50366, 400, 370, 415, 47733, 341, 3410, 1219, 257, 314, 1345, 3479, 13, 50540], "temperature": 0.0, "avg_logprob": -0.16909831712225906, "compression_ratio": 1.7459677419354838, "no_speech_prob": 6.108210800448433e-05}, {"id": 450, "seek": 123634, "start": 1239.86, "end": 1243.02, "text": " And a Turing machine starts off with this thing,", "tokens": [50540, 400, 257, 314, 1345, 3479, 3719, 766, 365, 341, 551, 11, 50698], "temperature": 0.0, "avg_logprob": -0.16909831712225906, "compression_ratio": 1.7459677419354838, "no_speech_prob": 6.108210800448433e-05}, {"id": 451, "seek": 123634, "start": 1243.02, "end": 1245.3799999999999, "text": " which is like an infinitely long tape.", "tokens": [50698, 597, 307, 411, 364, 36227, 938, 7314, 13, 50816], "temperature": 0.0, "avg_logprob": -0.16909831712225906, "compression_ratio": 1.7459677419354838, "no_speech_prob": 6.108210800448433e-05}, {"id": 452, "seek": 123634, "start": 1246.82, "end": 1248.6599999999999, "text": " And the tape is actually broken up", "tokens": [50888, 400, 264, 7314, 307, 767, 5463, 493, 50980], "temperature": 0.0, "avg_logprob": -0.16909831712225906, "compression_ratio": 1.7459677419354838, "no_speech_prob": 6.108210800448433e-05}, {"id": 453, "seek": 123634, "start": 1248.6599999999999, "end": 1250.58, "text": " into these things called cells.", "tokens": [50980, 666, 613, 721, 1219, 5438, 13, 51076], "temperature": 0.0, "avg_logprob": -0.16909831712225906, "compression_ratio": 1.7459677419354838, "no_speech_prob": 6.108210800448433e-05}, {"id": 454, "seek": 123634, "start": 1250.58, "end": 1253.6599999999999, "text": " And in the cells, you can actually,", "tokens": [51076, 400, 294, 264, 5438, 11, 291, 393, 767, 11, 51230], "temperature": 0.0, "avg_logprob": -0.16909831712225906, "compression_ratio": 1.7459677419354838, "no_speech_prob": 6.108210800448433e-05}, {"id": 455, "seek": 123634, "start": 1254.62, "end": 1257.1799999999998, "text": " like each cell can either be marked or unmarked.", "tokens": [51278, 411, 1184, 2815, 393, 2139, 312, 12658, 420, 517, 5638, 292, 13, 51406], "temperature": 0.0, "avg_logprob": -0.16909831712225906, "compression_ratio": 1.7459677419354838, "no_speech_prob": 6.108210800448433e-05}, {"id": 456, "seek": 123634, "start": 1257.1799999999998, "end": 1258.82, "text": " So here we have empty cells", "tokens": [51406, 407, 510, 321, 362, 6707, 5438, 51488], "temperature": 0.0, "avg_logprob": -0.16909831712225906, "compression_ratio": 1.7459677419354838, "no_speech_prob": 6.108210800448433e-05}, {"id": 457, "seek": 123634, "start": 1258.82, "end": 1261.3, "text": " and the X's correspond to marked cells, right?", "tokens": [51488, 293, 264, 1783, 311, 6805, 281, 12658, 5438, 11, 558, 30, 51612], "temperature": 0.0, "avg_logprob": -0.16909831712225906, "compression_ratio": 1.7459677419354838, "no_speech_prob": 6.108210800448433e-05}, {"id": 458, "seek": 123634, "start": 1262.1399999999999, "end": 1263.1399999999999, "text": " And this is infinitely long.", "tokens": [51654, 400, 341, 307, 36227, 938, 13, 51704], "temperature": 0.0, "avg_logprob": -0.16909831712225906, "compression_ratio": 1.7459677419354838, "no_speech_prob": 6.108210800448433e-05}, {"id": 459, "seek": 123634, "start": 1263.1399999999999, "end": 1264.82, "text": " It goes on in both directions.", "tokens": [51704, 467, 1709, 322, 294, 1293, 11095, 13, 51788], "temperature": 0.0, "avg_logprob": -0.16909831712225906, "compression_ratio": 1.7459677419354838, "no_speech_prob": 6.108210800448433e-05}, {"id": 460, "seek": 126482, "start": 1264.82, "end": 1267.54, "text": " And you have this thing called the head", "tokens": [50364, 400, 291, 362, 341, 551, 1219, 264, 1378, 50500], "temperature": 0.0, "avg_logprob": -0.11867009228422441, "compression_ratio": 1.9026548672566372, "no_speech_prob": 8.74892866704613e-05}, {"id": 461, "seek": 126482, "start": 1267.54, "end": 1270.76, "text": " and the head can do some stuff.", "tokens": [50500, 293, 264, 1378, 393, 360, 512, 1507, 13, 50661], "temperature": 0.0, "avg_logprob": -0.11867009228422441, "compression_ratio": 1.9026548672566372, "no_speech_prob": 8.74892866704613e-05}, {"id": 462, "seek": 126482, "start": 1270.76, "end": 1272.1, "text": " You can move it to the right.", "tokens": [50661, 509, 393, 1286, 309, 281, 264, 558, 13, 50728], "temperature": 0.0, "avg_logprob": -0.11867009228422441, "compression_ratio": 1.9026548672566372, "no_speech_prob": 8.74892866704613e-05}, {"id": 463, "seek": 126482, "start": 1272.1, "end": 1275.06, "text": " In every case, it's always pointing to a particular cell.", "tokens": [50728, 682, 633, 1389, 11, 309, 311, 1009, 12166, 281, 257, 1729, 2815, 13, 50876], "temperature": 0.0, "avg_logprob": -0.11867009228422441, "compression_ratio": 1.9026548672566372, "no_speech_prob": 8.74892866704613e-05}, {"id": 464, "seek": 126482, "start": 1275.06, "end": 1276.5, "text": " You can move it to the left.", "tokens": [50876, 509, 393, 1286, 309, 281, 264, 1411, 13, 50948], "temperature": 0.0, "avg_logprob": -0.11867009228422441, "compression_ratio": 1.9026548672566372, "no_speech_prob": 8.74892866704613e-05}, {"id": 465, "seek": 126482, "start": 1278.02, "end": 1281.62, "text": " You can mark the box that the head is pointing at.", "tokens": [51024, 509, 393, 1491, 264, 2424, 300, 264, 1378, 307, 12166, 412, 13, 51204], "temperature": 0.0, "avg_logprob": -0.11867009228422441, "compression_ratio": 1.9026548672566372, "no_speech_prob": 8.74892866704613e-05}, {"id": 466, "seek": 126482, "start": 1281.62, "end": 1283.5, "text": " You can unmark the box.", "tokens": [51204, 509, 393, 517, 5638, 264, 2424, 13, 51298], "temperature": 0.0, "avg_logprob": -0.11867009228422441, "compression_ratio": 1.9026548672566372, "no_speech_prob": 8.74892866704613e-05}, {"id": 467, "seek": 126482, "start": 1283.5, "end": 1286.3, "text": " And if the box is marked, you go to end.", "tokens": [51298, 400, 498, 264, 2424, 307, 12658, 11, 291, 352, 281, 917, 13, 51438], "temperature": 0.0, "avg_logprob": -0.11867009228422441, "compression_ratio": 1.9026548672566372, "no_speech_prob": 8.74892866704613e-05}, {"id": 468, "seek": 126482, "start": 1286.3, "end": 1288.1799999999998, "text": " We'll talk about go to end in just a moment.", "tokens": [51438, 492, 603, 751, 466, 352, 281, 917, 294, 445, 257, 1623, 13, 51532], "temperature": 0.0, "avg_logprob": -0.11867009228422441, "compression_ratio": 1.9026548672566372, "no_speech_prob": 8.74892866704613e-05}, {"id": 469, "seek": 126482, "start": 1288.1799999999998, "end": 1290.78, "text": " And if the box is unmarked, also go to end.", "tokens": [51532, 400, 498, 264, 2424, 307, 517, 5638, 292, 11, 611, 352, 281, 917, 13, 51662], "temperature": 0.0, "avg_logprob": -0.11867009228422441, "compression_ratio": 1.9026548672566372, "no_speech_prob": 8.74892866704613e-05}, {"id": 470, "seek": 126482, "start": 1290.78, "end": 1292.74, "text": " These are all different instructions", "tokens": [51662, 1981, 366, 439, 819, 9415, 51760], "temperature": 0.0, "avg_logprob": -0.11867009228422441, "compression_ratio": 1.9026548672566372, "no_speech_prob": 8.74892866704613e-05}, {"id": 471, "seek": 129274, "start": 1292.74, "end": 1295.54, "text": " that you can provide to this like turning machine.", "tokens": [50364, 300, 291, 393, 2893, 281, 341, 411, 6246, 3479, 13, 50504], "temperature": 0.0, "avg_logprob": -0.1375098051848235, "compression_ratio": 2.0721153846153846, "no_speech_prob": 0.0002531060599721968}, {"id": 472, "seek": 129274, "start": 1296.98, "end": 1299.34, "text": " And the execution of the turning machine,", "tokens": [50576, 400, 264, 15058, 295, 264, 6246, 3479, 11, 50694], "temperature": 0.0, "avg_logprob": -0.1375098051848235, "compression_ratio": 2.0721153846153846, "no_speech_prob": 0.0002531060599721968}, {"id": 473, "seek": 129274, "start": 1299.34, "end": 1303.58, "text": " essentially, you start off with a blank tape", "tokens": [50694, 4476, 11, 291, 722, 766, 365, 257, 8247, 7314, 50906], "temperature": 0.0, "avg_logprob": -0.1375098051848235, "compression_ratio": 2.0721153846153846, "no_speech_prob": 0.0002531060599721968}, {"id": 474, "seek": 129274, "start": 1303.58, "end": 1305.14, "text": " and a list of instructions", "tokens": [50906, 293, 257, 1329, 295, 9415, 50984], "temperature": 0.0, "avg_logprob": -0.1375098051848235, "compression_ratio": 2.0721153846153846, "no_speech_prob": 0.0002531060599721968}, {"id": 475, "seek": 129274, "start": 1305.14, "end": 1306.98, "text": " that you want this turning machine to execute.", "tokens": [50984, 300, 291, 528, 341, 6246, 3479, 281, 14483, 13, 51076], "temperature": 0.0, "avg_logprob": -0.1375098051848235, "compression_ratio": 2.0721153846153846, "no_speech_prob": 0.0002531060599721968}, {"id": 476, "seek": 129274, "start": 1306.98, "end": 1308.5, "text": " And the list of instructions are ordered", "tokens": [51076, 400, 264, 1329, 295, 9415, 366, 8866, 51152], "temperature": 0.0, "avg_logprob": -0.1375098051848235, "compression_ratio": 2.0721153846153846, "no_speech_prob": 0.0002531060599721968}, {"id": 477, "seek": 129274, "start": 1308.5, "end": 1309.78, "text": " from zero through N.", "tokens": [51152, 490, 4018, 807, 426, 13, 51216], "temperature": 0.0, "avg_logprob": -0.1375098051848235, "compression_ratio": 2.0721153846153846, "no_speech_prob": 0.0002531060599721968}, {"id": 478, "seek": 129274, "start": 1310.8, "end": 1313.94, "text": " And you execute the first instruction.", "tokens": [51267, 400, 291, 14483, 264, 700, 10951, 13, 51424], "temperature": 0.0, "avg_logprob": -0.1375098051848235, "compression_ratio": 2.0721153846153846, "no_speech_prob": 0.0002531060599721968}, {"id": 479, "seek": 129274, "start": 1313.94, "end": 1315.22, "text": " And if it's an ordinary instruction,", "tokens": [51424, 400, 498, 309, 311, 364, 10547, 10951, 11, 51488], "temperature": 0.0, "avg_logprob": -0.1375098051848235, "compression_ratio": 2.0721153846153846, "no_speech_prob": 0.0002531060599721968}, {"id": 480, "seek": 129274, "start": 1315.22, "end": 1317.54, "text": " you execute the next instruction.", "tokens": [51488, 291, 14483, 264, 958, 10951, 13, 51604], "temperature": 0.0, "avg_logprob": -0.1375098051848235, "compression_ratio": 2.0721153846153846, "no_speech_prob": 0.0002531060599721968}, {"id": 481, "seek": 129274, "start": 1317.54, "end": 1320.18, "text": " And if it's one of these like jump instructions", "tokens": [51604, 400, 498, 309, 311, 472, 295, 613, 411, 3012, 9415, 51736], "temperature": 0.0, "avg_logprob": -0.1375098051848235, "compression_ratio": 2.0721153846153846, "no_speech_prob": 0.0002531060599721968}, {"id": 482, "seek": 132018, "start": 1320.18, "end": 1323.26, "text": " at the bottom, then if it tells you to jump,", "tokens": [50364, 412, 264, 2767, 11, 550, 498, 309, 5112, 291, 281, 3012, 11, 50518], "temperature": 0.0, "avg_logprob": -0.18639436635104092, "compression_ratio": 1.5533980582524272, "no_speech_prob": 0.00022689269098918885}, {"id": 483, "seek": 132018, "start": 1323.26, "end": 1324.8200000000002, "text": " you go to the Nth instruction.", "tokens": [50518, 291, 352, 281, 264, 426, 392, 10951, 13, 50596], "temperature": 0.0, "avg_logprob": -0.18639436635104092, "compression_ratio": 1.5533980582524272, "no_speech_prob": 0.00022689269098918885}, {"id": 484, "seek": 132018, "start": 1325.94, "end": 1326.78, "text": " Sound good?", "tokens": [50652, 14673, 665, 30, 50694], "temperature": 0.0, "avg_logprob": -0.18639436635104092, "compression_ratio": 1.5533980582524272, "no_speech_prob": 0.00022689269098918885}, {"id": 485, "seek": 132018, "start": 1328.46, "end": 1332.5, "text": " And basically Alan Turing showed that this model", "tokens": [50778, 400, 1936, 16442, 314, 1345, 4712, 300, 341, 2316, 50980], "temperature": 0.0, "avg_logprob": -0.18639436635104092, "compression_ratio": 1.5533980582524272, "no_speech_prob": 0.00022689269098918885}, {"id": 486, "seek": 132018, "start": 1332.5, "end": 1334.66, "text": " is sufficient for all of computation.", "tokens": [50980, 307, 11563, 337, 439, 295, 24903, 13, 51088], "temperature": 0.0, "avg_logprob": -0.18639436635104092, "compression_ratio": 1.5533980582524272, "no_speech_prob": 0.00022689269098918885}, {"id": 487, "seek": 132018, "start": 1335.66, "end": 1337.94, "text": " Anything that can be computed", "tokens": [51138, 11998, 300, 393, 312, 40610, 51252], "temperature": 0.0, "avg_logprob": -0.18639436635104092, "compression_ratio": 1.5533980582524272, "no_speech_prob": 0.00022689269098918885}, {"id": 488, "seek": 132018, "start": 1337.94, "end": 1340.3, "text": " can be computed with just these primitives.", "tokens": [51252, 393, 312, 40610, 365, 445, 613, 2886, 38970, 13, 51370], "temperature": 0.0, "avg_logprob": -0.18639436635104092, "compression_ratio": 1.5533980582524272, "no_speech_prob": 0.00022689269098918885}, {"id": 489, "seek": 132018, "start": 1342.1000000000001, "end": 1343.1000000000001, "text": " That's all it takes.", "tokens": [51460, 663, 311, 439, 309, 2516, 13, 51510], "temperature": 0.0, "avg_logprob": -0.18639436635104092, "compression_ratio": 1.5533980582524272, "no_speech_prob": 0.00022689269098918885}, {"id": 490, "seek": 132018, "start": 1345.5, "end": 1348.94, "text": " Okay, so there is an actual virtual implementation", "tokens": [51630, 1033, 11, 370, 456, 307, 364, 3539, 6374, 11420, 51802], "temperature": 0.0, "avg_logprob": -0.18639436635104092, "compression_ratio": 1.5533980582524272, "no_speech_prob": 0.00022689269098918885}, {"id": 491, "seek": 134894, "start": 1348.94, "end": 1351.5, "text": " of a Turing machine called brain flap.", "tokens": [50364, 295, 257, 314, 1345, 3479, 1219, 3567, 30781, 13, 50492], "temperature": 0.0, "avg_logprob": -0.15045983863599371, "compression_ratio": 1.9215686274509804, "no_speech_prob": 0.0007206403533928096}, {"id": 492, "seek": 134894, "start": 1351.5, "end": 1352.94, "text": " It's a technical term.", "tokens": [50492, 467, 311, 257, 6191, 1433, 13, 50564], "temperature": 0.0, "avg_logprob": -0.15045983863599371, "compression_ratio": 1.9215686274509804, "no_speech_prob": 0.0007206403533928096}, {"id": 493, "seek": 134894, "start": 1352.94, "end": 1356.22, "text": " And basically there's a few instructions.", "tokens": [50564, 400, 1936, 456, 311, 257, 1326, 9415, 13, 50728], "temperature": 0.0, "avg_logprob": -0.15045983863599371, "compression_ratio": 1.9215686274509804, "no_speech_prob": 0.0007206403533928096}, {"id": 494, "seek": 134894, "start": 1356.22, "end": 1358.8600000000001, "text": " And it essentially you can imagine it", "tokens": [50728, 400, 309, 4476, 291, 393, 3811, 309, 50860], "temperature": 0.0, "avg_logprob": -0.15045983863599371, "compression_ratio": 1.9215686274509804, "no_speech_prob": 0.0007206403533928096}, {"id": 495, "seek": 134894, "start": 1358.8600000000001, "end": 1360.98, "text": " as like a virtual Turing machine.", "tokens": [50860, 382, 411, 257, 6374, 314, 1345, 3479, 13, 50966], "temperature": 0.0, "avg_logprob": -0.15045983863599371, "compression_ratio": 1.9215686274509804, "no_speech_prob": 0.0007206403533928096}, {"id": 496, "seek": 134894, "start": 1360.98, "end": 1363.06, "text": " And it has these instructions.", "tokens": [50966, 400, 309, 575, 613, 9415, 13, 51070], "temperature": 0.0, "avg_logprob": -0.15045983863599371, "compression_ratio": 1.9215686274509804, "no_speech_prob": 0.0007206403533928096}, {"id": 497, "seek": 134894, "start": 1363.06, "end": 1364.54, "text": " You can move the head to the right.", "tokens": [51070, 509, 393, 1286, 264, 1378, 281, 264, 558, 13, 51144], "temperature": 0.0, "avg_logprob": -0.15045983863599371, "compression_ratio": 1.9215686274509804, "no_speech_prob": 0.0007206403533928096}, {"id": 498, "seek": 134894, "start": 1364.54, "end": 1366.3400000000001, "text": " You can move the head to the left.", "tokens": [51144, 509, 393, 1286, 264, 1378, 281, 264, 1411, 13, 51234], "temperature": 0.0, "avg_logprob": -0.15045983863599371, "compression_ratio": 1.9215686274509804, "no_speech_prob": 0.0007206403533928096}, {"id": 499, "seek": 134894, "start": 1366.3400000000001, "end": 1368.22, "text": " This is slightly different than a Turing machine", "tokens": [51234, 639, 307, 4748, 819, 813, 257, 314, 1345, 3479, 51328], "temperature": 0.0, "avg_logprob": -0.15045983863599371, "compression_ratio": 1.9215686274509804, "no_speech_prob": 0.0007206403533928096}, {"id": 500, "seek": 134894, "start": 1368.22, "end": 1372.18, "text": " because the cells don't contain just like binary values", "tokens": [51328, 570, 264, 5438, 500, 380, 5304, 445, 411, 17434, 4190, 51526], "temperature": 0.0, "avg_logprob": -0.15045983863599371, "compression_ratio": 1.9215686274509804, "no_speech_prob": 0.0007206403533928096}, {"id": 501, "seek": 134894, "start": 1372.18, "end": 1373.5, "text": " of marked and unmarked.", "tokens": [51526, 295, 12658, 293, 517, 5638, 292, 13, 51592], "temperature": 0.0, "avg_logprob": -0.15045983863599371, "compression_ratio": 1.9215686274509804, "no_speech_prob": 0.0007206403533928096}, {"id": 502, "seek": 134894, "start": 1373.5, "end": 1375.02, "text": " Instead, they contain numbers.", "tokens": [51592, 7156, 11, 436, 5304, 3547, 13, 51668], "temperature": 0.0, "avg_logprob": -0.15045983863599371, "compression_ratio": 1.9215686274509804, "no_speech_prob": 0.0007206403533928096}, {"id": 503, "seek": 134894, "start": 1375.02, "end": 1377.1000000000001, "text": " And you can increment numbers and decrement numbers.", "tokens": [51668, 400, 291, 393, 26200, 3547, 293, 6853, 518, 3547, 13, 51772], "temperature": 0.0, "avg_logprob": -0.15045983863599371, "compression_ratio": 1.9215686274509804, "no_speech_prob": 0.0007206403533928096}, {"id": 504, "seek": 137710, "start": 1377.1, "end": 1378.6999999999998, "text": " And just integers, right?", "tokens": [50364, 400, 445, 41674, 11, 558, 30, 50444], "temperature": 0.0, "avg_logprob": -0.23288433031104078, "compression_ratio": 1.8352272727272727, "no_speech_prob": 0.00027798768132925034}, {"id": 505, "seek": 137710, "start": 1379.74, "end": 1384.74, "text": " And then these characters, so the open bracket,", "tokens": [50496, 400, 550, 613, 4342, 11, 370, 264, 1269, 16904, 11, 50746], "temperature": 0.0, "avg_logprob": -0.23288433031104078, "compression_ratio": 1.8352272727272727, "no_speech_prob": 0.00027798768132925034}, {"id": 506, "seek": 137710, "start": 1384.74, "end": 1387.02, "text": " like if the value at the head is zero,", "tokens": [50746, 411, 498, 264, 2158, 412, 264, 1378, 307, 4018, 11, 50860], "temperature": 0.0, "avg_logprob": -0.23288433031104078, "compression_ratio": 1.8352272727272727, "no_speech_prob": 0.00027798768132925034}, {"id": 507, "seek": 137710, "start": 1387.02, "end": 1390.9399999999998, "text": " jump forward to the matching like closed bracket.", "tokens": [50860, 3012, 2128, 281, 264, 14324, 411, 5395, 16904, 13, 51056], "temperature": 0.0, "avg_logprob": -0.23288433031104078, "compression_ratio": 1.8352272727272727, "no_speech_prob": 0.00027798768132925034}, {"id": 508, "seek": 137710, "start": 1390.9399999999998, "end": 1393.4199999999998, "text": " And then the closed bracket is if the value at the head", "tokens": [51056, 400, 550, 264, 5395, 16904, 307, 498, 264, 2158, 412, 264, 1378, 51180], "temperature": 0.0, "avg_logprob": -0.23288433031104078, "compression_ratio": 1.8352272727272727, "no_speech_prob": 0.00027798768132925034}, {"id": 509, "seek": 137710, "start": 1393.4199999999998, "end": 1397.3799999999999, "text": " is non-zero, jump back to the matching open bracket.", "tokens": [51180, 307, 2107, 12, 32226, 11, 3012, 646, 281, 264, 14324, 1269, 16904, 13, 51378], "temperature": 0.0, "avg_logprob": -0.23288433031104078, "compression_ratio": 1.8352272727272727, "no_speech_prob": 0.00027798768132925034}, {"id": 510, "seek": 137710, "start": 1397.3799999999999, "end": 1402.3799999999999, "text": " So here we've kind of defined our jumping behavior.", "tokens": [51378, 407, 510, 321, 600, 733, 295, 7642, 527, 11233, 5223, 13, 51628], "temperature": 0.0, "avg_logprob": -0.23288433031104078, "compression_ratio": 1.8352272727272727, "no_speech_prob": 0.00027798768132925034}, {"id": 511, "seek": 140238, "start": 1403.0600000000002, "end": 1406.5, "text": " And then this language also provides like functionality", "tokens": [50398, 400, 550, 341, 2856, 611, 6417, 411, 14980, 50570], "temperature": 0.0, "avg_logprob": -0.2999377059936523, "compression_ratio": 1.6640625, "no_speech_prob": 0.001956519903615117}, {"id": 512, "seek": 140238, "start": 1406.5, "end": 1408.3000000000002, "text": " for input and output, which is something", "tokens": [50570, 337, 4846, 293, 5598, 11, 597, 307, 746, 50660], "temperature": 0.0, "avg_logprob": -0.2999377059936523, "compression_ratio": 1.6640625, "no_speech_prob": 0.001956519903615117}, {"id": 513, "seek": 140238, "start": 1408.3000000000002, "end": 1411.0600000000002, "text": " that Turing didn't necessarily require.", "tokens": [50660, 300, 314, 1345, 994, 380, 4725, 3651, 13, 50798], "temperature": 0.0, "avg_logprob": -0.2999377059936523, "compression_ratio": 1.6640625, "no_speech_prob": 0.001956519903615117}, {"id": 514, "seek": 140238, "start": 1411.0600000000002, "end": 1413.6200000000001, "text": " But this makes the language a little bit more useful", "tokens": [50798, 583, 341, 1669, 264, 2856, 257, 707, 857, 544, 4420, 50926], "temperature": 0.0, "avg_logprob": -0.2999377059936523, "compression_ratio": 1.6640625, "no_speech_prob": 0.001956519903615117}, {"id": 515, "seek": 140238, "start": 1413.6200000000001, "end": 1417.14, "text": " because you can have it do stuff like print out output.", "tokens": [50926, 570, 291, 393, 362, 309, 360, 1507, 411, 4482, 484, 5598, 13, 51102], "temperature": 0.0, "avg_logprob": -0.2999377059936523, "compression_ratio": 1.6640625, "no_speech_prob": 0.001956519903615117}, {"id": 516, "seek": 140238, "start": 1418.98, "end": 1421.14, "text": " And every other character is ignored.", "tokens": [51194, 400, 633, 661, 2517, 307, 19735, 13, 51302], "temperature": 0.0, "avg_logprob": -0.2999377059936523, "compression_ratio": 1.6640625, "no_speech_prob": 0.001956519903615117}, {"id": 517, "seek": 140238, "start": 1421.14, "end": 1423.9, "text": " So anything that's not this magenta color", "tokens": [51302, 407, 1340, 300, 311, 406, 341, 2258, 8938, 2017, 51440], "temperature": 0.0, "avg_logprob": -0.2999377059936523, "compression_ratio": 1.6640625, "no_speech_prob": 0.001956519903615117}, {"id": 518, "seek": 140238, "start": 1423.9, "end": 1426.3400000000001, "text": " is basically ignored in this language.", "tokens": [51440, 307, 1936, 19735, 294, 341, 2856, 13, 51562], "temperature": 0.0, "avg_logprob": -0.2999377059936523, "compression_ratio": 1.6640625, "no_speech_prob": 0.001956519903615117}, {"id": 519, "seek": 140238, "start": 1426.3400000000001, "end": 1431.3400000000001, "text": " So this is the implementation of adding two numbers together.", "tokens": [51562, 407, 341, 307, 264, 11420, 295, 5127, 732, 3547, 1214, 13, 51812], "temperature": 0.0, "avg_logprob": -0.2999377059936523, "compression_ratio": 1.6640625, "no_speech_prob": 0.001956519903615117}, {"id": 520, "seek": 143134, "start": 1432.34, "end": 1437.34, "text": " And if you squint, you can kind of see the recursive definition", "tokens": [50414, 400, 498, 291, 2339, 686, 11, 291, 393, 733, 295, 536, 264, 20560, 488, 7123, 50664], "temperature": 0.0, "avg_logprob": -0.2742725840786047, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.0006260318914428353}, {"id": 521, "seek": 143134, "start": 1437.82, "end": 1441.1399999999999, "text": " that Piano kind of described earlier, right?", "tokens": [50688, 300, 430, 6254, 733, 295, 7619, 3071, 11, 558, 30, 50854], "temperature": 0.0, "avg_logprob": -0.2742725840786047, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.0006260318914428353}, {"id": 522, "seek": 143134, "start": 1441.1399999999999, "end": 1444.82, "text": " We'll actually go to a much clearer example.", "tokens": [50854, 492, 603, 767, 352, 281, 257, 709, 26131, 1365, 13, 51038], "temperature": 0.0, "avg_logprob": -0.2742725840786047, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.0006260318914428353}, {"id": 523, "seek": 143134, "start": 1444.82, "end": 1447.58, "text": " So in the beginning, you can imagine the head", "tokens": [51038, 407, 294, 264, 2863, 11, 291, 393, 3811, 264, 1378, 51176], "temperature": 0.0, "avg_logprob": -0.2742725840786047, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.0006260318914428353}, {"id": 524, "seek": 143134, "start": 1447.58, "end": 1450.74, "text": " is pointing at cell C0 and we increment it twice.", "tokens": [51176, 307, 12166, 412, 2815, 383, 15, 293, 321, 26200, 309, 6091, 13, 51334], "temperature": 0.0, "avg_logprob": -0.2742725840786047, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.0006260318914428353}, {"id": 525, "seek": 143134, "start": 1450.74, "end": 1452.98, "text": " So now C0 has a value two.", "tokens": [51334, 407, 586, 383, 15, 575, 257, 2158, 732, 13, 51446], "temperature": 0.0, "avg_logprob": -0.2742725840786047, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.0006260318914428353}, {"id": 526, "seek": 143134, "start": 1452.98, "end": 1455.02, "text": " And then you move to the right to cell C1", "tokens": [51446, 400, 550, 291, 1286, 281, 264, 558, 281, 2815, 383, 16, 51548], "temperature": 0.0, "avg_logprob": -0.2742725840786047, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.0006260318914428353}, {"id": 527, "seek": 143134, "start": 1455.02, "end": 1456.54, "text": " and you increment it five times.", "tokens": [51548, 293, 291, 26200, 309, 1732, 1413, 13, 51624], "temperature": 0.0, "avg_logprob": -0.2742725840786047, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.0006260318914428353}, {"id": 528, "seek": 143134, "start": 1456.54, "end": 1458.98, "text": " So C1 has a value five, right?", "tokens": [51624, 407, 383, 16, 575, 257, 2158, 1732, 11, 558, 30, 51746], "temperature": 0.0, "avg_logprob": -0.2742725840786047, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.0006260318914428353}, {"id": 529, "seek": 145898, "start": 1459.66, "end": 1463.34, "text": " And then you start your loop.", "tokens": [50398, 400, 550, 291, 722, 428, 6367, 13, 50582], "temperature": 0.0, "avg_logprob": -0.1659088319945104, "compression_ratio": 1.70935960591133, "no_speech_prob": 0.0001971368765225634}, {"id": 530, "seek": 145898, "start": 1463.34, "end": 1465.94, "text": " The first thing that you do is you go back to C0", "tokens": [50582, 440, 700, 551, 300, 291, 360, 307, 291, 352, 646, 281, 383, 15, 50712], "temperature": 0.0, "avg_logprob": -0.1659088319945104, "compression_ratio": 1.70935960591133, "no_speech_prob": 0.0001971368765225634}, {"id": 531, "seek": 145898, "start": 1465.94, "end": 1467.98, "text": " and you add one to it.", "tokens": [50712, 293, 291, 909, 472, 281, 309, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1659088319945104, "compression_ratio": 1.70935960591133, "no_speech_prob": 0.0001971368765225634}, {"id": 532, "seek": 145898, "start": 1467.98, "end": 1470.1, "text": " And then you go right to C1", "tokens": [50814, 400, 550, 291, 352, 558, 281, 383, 16, 50920], "temperature": 0.0, "avg_logprob": -0.1659088319945104, "compression_ratio": 1.70935960591133, "no_speech_prob": 0.0001971368765225634}, {"id": 533, "seek": 145898, "start": 1470.1, "end": 1473.5, "text": " and then you subtract one from it and you keep looping.", "tokens": [50920, 293, 550, 291, 16390, 472, 490, 309, 293, 291, 1066, 6367, 278, 13, 51090], "temperature": 0.0, "avg_logprob": -0.1659088319945104, "compression_ratio": 1.70935960591133, "no_speech_prob": 0.0001971368765225634}, {"id": 534, "seek": 145898, "start": 1473.5, "end": 1475.94, "text": " And your loop will basically end.", "tokens": [51090, 400, 428, 6367, 486, 1936, 917, 13, 51212], "temperature": 0.0, "avg_logprob": -0.1659088319945104, "compression_ratio": 1.70935960591133, "no_speech_prob": 0.0001971368765225634}, {"id": 535, "seek": 145898, "start": 1477.54, "end": 1478.9, "text": " I can't think properly right now,", "tokens": [51292, 286, 393, 380, 519, 6108, 558, 586, 11, 51360], "temperature": 0.0, "avg_logprob": -0.1659088319945104, "compression_ratio": 1.70935960591133, "no_speech_prob": 0.0001971368765225634}, {"id": 536, "seek": 145898, "start": 1478.9, "end": 1483.3, "text": " but once C1 essentially reaches zero,", "tokens": [51360, 457, 1564, 383, 16, 4476, 14235, 4018, 11, 51580], "temperature": 0.0, "avg_logprob": -0.1659088319945104, "compression_ratio": 1.70935960591133, "no_speech_prob": 0.0001971368765225634}, {"id": 537, "seek": 145898, "start": 1483.3, "end": 1485.54, "text": " then the loop will end and your program will terminate.", "tokens": [51580, 550, 264, 6367, 486, 917, 293, 428, 1461, 486, 10761, 473, 13, 51692], "temperature": 0.0, "avg_logprob": -0.1659088319945104, "compression_ratio": 1.70935960591133, "no_speech_prob": 0.0001971368765225634}, {"id": 538, "seek": 148554, "start": 1485.54, "end": 1487.82, "text": " And now you have this ability to add two numbers,", "tokens": [50364, 400, 586, 291, 362, 341, 3485, 281, 909, 732, 3547, 11, 50478], "temperature": 0.0, "avg_logprob": -0.151855281755036, "compression_ratio": 1.5186915887850467, "no_speech_prob": 9.608081745682284e-05}, {"id": 539, "seek": 148554, "start": 1487.82, "end": 1489.62, "text": " C0 and C1, right?", "tokens": [50478, 383, 15, 293, 383, 16, 11, 558, 30, 50568], "temperature": 0.0, "avg_logprob": -0.151855281755036, "compression_ratio": 1.5186915887850467, "no_speech_prob": 9.608081745682284e-05}, {"id": 540, "seek": 148554, "start": 1493.46, "end": 1496.46, "text": " This is an algorithm for computing", "tokens": [50760, 639, 307, 364, 9284, 337, 15866, 50910], "temperature": 0.0, "avg_logprob": -0.151855281755036, "compression_ratio": 1.5186915887850467, "no_speech_prob": 9.608081745682284e-05}, {"id": 541, "seek": 148554, "start": 1496.46, "end": 1499.74, "text": " the Mandelbrot fractal set.", "tokens": [50910, 264, 15458, 338, 1443, 310, 17948, 304, 992, 13, 51074], "temperature": 0.0, "avg_logprob": -0.151855281755036, "compression_ratio": 1.5186915887850467, "no_speech_prob": 9.608081745682284e-05}, {"id": 542, "seek": 148554, "start": 1499.74, "end": 1501.58, "text": " If you guys haven't heard of this,", "tokens": [51074, 759, 291, 1074, 2378, 380, 2198, 295, 341, 11, 51166], "temperature": 0.0, "avg_logprob": -0.151855281755036, "compression_ratio": 1.5186915887850467, "no_speech_prob": 9.608081745682284e-05}, {"id": 543, "seek": 148554, "start": 1501.58, "end": 1506.58, "text": " it's just a really cool like fractal,", "tokens": [51166, 309, 311, 445, 257, 534, 1627, 411, 17948, 304, 11, 51416], "temperature": 0.0, "avg_logprob": -0.151855281755036, "compression_ratio": 1.5186915887850467, "no_speech_prob": 9.608081745682284e-05}, {"id": 544, "seek": 148554, "start": 1506.78, "end": 1507.7, "text": " I won't get into fractals,", "tokens": [51426, 286, 1582, 380, 483, 666, 17948, 1124, 11, 51472], "temperature": 0.0, "avg_logprob": -0.151855281755036, "compression_ratio": 1.5186915887850467, "no_speech_prob": 9.608081745682284e-05}, {"id": 545, "seek": 148554, "start": 1507.7, "end": 1510.98, "text": " but basically this is a program, it prints out this, right?", "tokens": [51472, 457, 1936, 341, 307, 257, 1461, 11, 309, 22305, 484, 341, 11, 558, 30, 51636], "temperature": 0.0, "avg_logprob": -0.151855281755036, "compression_ratio": 1.5186915887850467, "no_speech_prob": 9.608081745682284e-05}, {"id": 546, "seek": 148554, "start": 1511.94, "end": 1513.86, "text": " So just using our turning machine,", "tokens": [51684, 407, 445, 1228, 527, 6246, 3479, 11, 51780], "temperature": 0.0, "avg_logprob": -0.151855281755036, "compression_ratio": 1.5186915887850467, "no_speech_prob": 9.608081745682284e-05}, {"id": 547, "seek": 151386, "start": 1513.86, "end": 1517.4199999999998, "text": " we were able to now output like this fractal.", "tokens": [50364, 321, 645, 1075, 281, 586, 5598, 411, 341, 17948, 304, 13, 50542], "temperature": 0.0, "avg_logprob": -0.17068627868035827, "compression_ratio": 1.6053811659192825, "no_speech_prob": 9.458535350859165e-05}, {"id": 548, "seek": 151386, "start": 1523.06, "end": 1523.8999999999999, "text": " Cool.", "tokens": [50824, 8561, 13, 50866], "temperature": 0.0, "avg_logprob": -0.17068627868035827, "compression_ratio": 1.6053811659192825, "no_speech_prob": 9.458535350859165e-05}, {"id": 549, "seek": 151386, "start": 1523.8999999999999, "end": 1526.06, "text": " So basically turning created an axiom tower for computing", "tokens": [50866, 407, 1936, 6246, 2942, 364, 6360, 72, 298, 10567, 337, 15866, 50974], "temperature": 0.0, "avg_logprob": -0.17068627868035827, "compression_ratio": 1.6053811659192825, "no_speech_prob": 9.458535350859165e-05}, {"id": 550, "seek": 151386, "start": 1526.06, "end": 1528.54, "text": " and an algorithm is computable", "tokens": [50974, 293, 364, 9284, 307, 2807, 712, 51098], "temperature": 0.0, "avg_logprob": -0.17068627868035827, "compression_ratio": 1.6053811659192825, "no_speech_prob": 9.458535350859165e-05}, {"id": 551, "seek": 151386, "start": 1528.54, "end": 1531.26, "text": " if and only if it can be encoded as a turning machine.", "tokens": [51098, 498, 293, 787, 498, 309, 393, 312, 2058, 12340, 382, 257, 6246, 3479, 13, 51234], "temperature": 0.0, "avg_logprob": -0.17068627868035827, "compression_ratio": 1.6053811659192825, "no_speech_prob": 9.458535350859165e-05}, {"id": 552, "seek": 151386, "start": 1532.26, "end": 1534.1399999999999, "text": " And Turing showed this before the existence", "tokens": [51284, 400, 314, 1345, 4712, 341, 949, 264, 9123, 51378], "temperature": 0.0, "avg_logprob": -0.17068627868035827, "compression_ratio": 1.6053811659192825, "no_speech_prob": 9.458535350859165e-05}, {"id": 553, "seek": 151386, "start": 1534.1399999999999, "end": 1535.6999999999998, "text": " of electrical computers.", "tokens": [51378, 295, 12147, 10807, 13, 51456], "temperature": 0.0, "avg_logprob": -0.17068627868035827, "compression_ratio": 1.6053811659192825, "no_speech_prob": 9.458535350859165e-05}, {"id": 554, "seek": 151386, "start": 1535.6999999999998, "end": 1538.3, "text": " And he also showed this when he was 24 years old.", "tokens": [51456, 400, 415, 611, 4712, 341, 562, 415, 390, 4022, 924, 1331, 13, 51586], "temperature": 0.0, "avg_logprob": -0.17068627868035827, "compression_ratio": 1.6053811659192825, "no_speech_prob": 9.458535350859165e-05}, {"id": 555, "seek": 151386, "start": 1540.9799999999998, "end": 1542.62, "text": " If you guys have heard of the Turing Award,", "tokens": [51720, 759, 291, 1074, 362, 2198, 295, 264, 314, 1345, 13894, 11, 51802], "temperature": 0.0, "avg_logprob": -0.17068627868035827, "compression_ratio": 1.6053811659192825, "no_speech_prob": 9.458535350859165e-05}, {"id": 556, "seek": 154262, "start": 1542.62, "end": 1547.34, "text": " it's basically like the Nobel Prize for computer science", "tokens": [50364, 309, 311, 1936, 411, 264, 24611, 22604, 337, 3820, 3497, 50600], "temperature": 0.0, "avg_logprob": -0.13543523399575244, "compression_ratio": 1.7136752136752136, "no_speech_prob": 0.00023775314912199974}, {"id": 557, "seek": 154262, "start": 1547.34, "end": 1549.02, "text": " and it's named after Alan Turing.", "tokens": [50600, 293, 309, 311, 4926, 934, 16442, 314, 1345, 13, 50684], "temperature": 0.0, "avg_logprob": -0.13543523399575244, "compression_ratio": 1.7136752136752136, "no_speech_prob": 0.00023775314912199974}, {"id": 558, "seek": 154262, "start": 1550.1799999999998, "end": 1554.26, "text": " So some observations, you need an infinite tape", "tokens": [50742, 407, 512, 18163, 11, 291, 643, 364, 13785, 7314, 50946], "temperature": 0.0, "avg_logprob": -0.13543523399575244, "compression_ratio": 1.7136752136752136, "no_speech_prob": 0.00023775314912199974}, {"id": 559, "seek": 154262, "start": 1554.26, "end": 1555.82, "text": " and you need a program,", "tokens": [50946, 293, 291, 643, 257, 1461, 11, 51024], "temperature": 0.0, "avg_logprob": -0.13543523399575244, "compression_ratio": 1.7136752136752136, "no_speech_prob": 0.00023775314912199974}, {"id": 560, "seek": 154262, "start": 1555.82, "end": 1558.1, "text": " like which is a sequence of instructions to follow", "tokens": [51024, 411, 597, 307, 257, 8310, 295, 9415, 281, 1524, 51138], "temperature": 0.0, "avg_logprob": -0.13543523399575244, "compression_ratio": 1.7136752136752136, "no_speech_prob": 0.00023775314912199974}, {"id": 561, "seek": 154262, "start": 1559.1399999999999, "end": 1561.9399999999998, "text": " and you're constantly modifying the tape.", "tokens": [51190, 293, 291, 434, 6460, 42626, 264, 7314, 13, 51330], "temperature": 0.0, "avg_logprob": -0.13543523399575244, "compression_ratio": 1.7136752136752136, "no_speech_prob": 0.00023775314912199974}, {"id": 562, "seek": 154262, "start": 1561.9399999999998, "end": 1563.4599999999998, "text": " So you can think of the tape", "tokens": [51330, 407, 291, 393, 519, 295, 264, 7314, 51406], "temperature": 0.0, "avg_logprob": -0.13543523399575244, "compression_ratio": 1.7136752136752136, "no_speech_prob": 0.00023775314912199974}, {"id": 563, "seek": 154262, "start": 1563.4599999999998, "end": 1565.78, "text": " as sort of like the state of your program", "tokens": [51406, 382, 1333, 295, 411, 264, 1785, 295, 428, 1461, 51522], "temperature": 0.0, "avg_logprob": -0.13543523399575244, "compression_ratio": 1.7136752136752136, "no_speech_prob": 0.00023775314912199974}, {"id": 564, "seek": 154262, "start": 1565.78, "end": 1568.02, "text": " and every instruction that you execute", "tokens": [51522, 293, 633, 10951, 300, 291, 14483, 51634], "temperature": 0.0, "avg_logprob": -0.13543523399575244, "compression_ratio": 1.7136752136752136, "no_speech_prob": 0.00023775314912199974}, {"id": 565, "seek": 154262, "start": 1568.02, "end": 1571.26, "text": " that modifies the tape is in theory", "tokens": [51634, 300, 1072, 11221, 264, 7314, 307, 294, 5261, 51796], "temperature": 0.0, "avg_logprob": -0.13543523399575244, "compression_ratio": 1.7136752136752136, "no_speech_prob": 0.00023775314912199974}, {"id": 566, "seek": 157126, "start": 1571.26, "end": 1575.86, "text": " kind of modifying the way that the program", "tokens": [50364, 733, 295, 42626, 264, 636, 300, 264, 1461, 50594], "temperature": 0.0, "avg_logprob": -0.16941030970159568, "compression_ratio": 1.915966386554622, "no_speech_prob": 0.000314963108394295}, {"id": 567, "seek": 157126, "start": 1575.86, "end": 1577.86, "text": " kind of unfolds itself, right?", "tokens": [50594, 733, 295, 17980, 82, 2564, 11, 558, 30, 50694], "temperature": 0.0, "avg_logprob": -0.16941030970159568, "compression_ratio": 1.915966386554622, "no_speech_prob": 0.000314963108394295}, {"id": 568, "seek": 157126, "start": 1578.86, "end": 1581.3799999999999, "text": " And the behavior of the program", "tokens": [50744, 400, 264, 5223, 295, 264, 1461, 50870], "temperature": 0.0, "avg_logprob": -0.16941030970159568, "compression_ratio": 1.915966386554622, "no_speech_prob": 0.000314963108394295}, {"id": 569, "seek": 157126, "start": 1581.3799999999999, "end": 1583.26, "text": " is changed with every single tape modification.", "tokens": [50870, 307, 3105, 365, 633, 2167, 7314, 26747, 13, 50964], "temperature": 0.0, "avg_logprob": -0.16941030970159568, "compression_ratio": 1.915966386554622, "no_speech_prob": 0.000314963108394295}, {"id": 570, "seek": 157126, "start": 1583.26, "end": 1585.06, "text": " And so therefore reasoning about the behavior", "tokens": [50964, 400, 370, 4412, 21577, 466, 264, 5223, 51054], "temperature": 0.0, "avg_logprob": -0.16941030970159568, "compression_ratio": 1.915966386554622, "no_speech_prob": 0.000314963108394295}, {"id": 571, "seek": 157126, "start": 1585.06, "end": 1587.82, "text": " of the program requires understanding the state of the tape", "tokens": [51054, 295, 264, 1461, 7029, 3701, 264, 1785, 295, 264, 7314, 51192], "temperature": 0.0, "avg_logprob": -0.16941030970159568, "compression_ratio": 1.915966386554622, "no_speech_prob": 0.000314963108394295}, {"id": 572, "seek": 157126, "start": 1587.82, "end": 1590.06, "text": " at every moment of modification.", "tokens": [51192, 412, 633, 1623, 295, 26747, 13, 51304], "temperature": 0.0, "avg_logprob": -0.16941030970159568, "compression_ratio": 1.915966386554622, "no_speech_prob": 0.000314963108394295}, {"id": 573, "seek": 157126, "start": 1590.06, "end": 1592.74, "text": " And so you can imagine sort of debugging", "tokens": [51304, 400, 370, 291, 393, 3811, 1333, 295, 45592, 51438], "temperature": 0.0, "avg_logprob": -0.16941030970159568, "compression_ratio": 1.915966386554622, "no_speech_prob": 0.000314963108394295}, {"id": 574, "seek": 157126, "start": 1592.74, "end": 1595.58, "text": " or turning machine as perhaps similar", "tokens": [51438, 420, 6246, 3479, 382, 4317, 2531, 51580], "temperature": 0.0, "avg_logprob": -0.16941030970159568, "compression_ratio": 1.915966386554622, "no_speech_prob": 0.000314963108394295}, {"id": 575, "seek": 157126, "start": 1595.58, "end": 1598.06, "text": " to debugging like an application", "tokens": [51580, 281, 45592, 411, 364, 3861, 51704], "temperature": 0.0, "avg_logprob": -0.16941030970159568, "compression_ratio": 1.915966386554622, "no_speech_prob": 0.000314963108394295}, {"id": 576, "seek": 157126, "start": 1598.06, "end": 1600.98, "text": " where you kind of think about how the application's", "tokens": [51704, 689, 291, 733, 295, 519, 466, 577, 264, 3861, 311, 51850], "temperature": 0.0, "avg_logprob": -0.16941030970159568, "compression_ratio": 1.915966386554622, "no_speech_prob": 0.000314963108394295}, {"id": 577, "seek": 160098, "start": 1600.98, "end": 1602.7, "text": " memory state changed over time", "tokens": [50364, 4675, 1785, 3105, 670, 565, 50450], "temperature": 0.0, "avg_logprob": -0.1539939703400602, "compression_ratio": 1.6694915254237288, "no_speech_prob": 0.0001685909228399396}, {"id": 578, "seek": 160098, "start": 1602.7, "end": 1607.58, "text": " and all of a sudden your ideal understanding", "tokens": [50450, 293, 439, 295, 257, 3990, 428, 7157, 3701, 50694], "temperature": 0.0, "avg_logprob": -0.1539939703400602, "compression_ratio": 1.6694915254237288, "no_speech_prob": 0.0001685909228399396}, {"id": 579, "seek": 160098, "start": 1607.58, "end": 1609.54, "text": " of how it's supposed to change like differs", "tokens": [50694, 295, 577, 309, 311, 3442, 281, 1319, 411, 37761, 50792], "temperature": 0.0, "avg_logprob": -0.1539939703400602, "compression_ratio": 1.6694915254237288, "no_speech_prob": 0.0001685909228399396}, {"id": 580, "seek": 160098, "start": 1609.54, "end": 1611.94, "text": " from the way it actually changed and there's your bug.", "tokens": [50792, 490, 264, 636, 309, 767, 3105, 293, 456, 311, 428, 7426, 13, 50912], "temperature": 0.0, "avg_logprob": -0.1539939703400602, "compression_ratio": 1.6694915254237288, "no_speech_prob": 0.0001685909228399396}, {"id": 581, "seek": 160098, "start": 1614.46, "end": 1616.34, "text": " From here, Turing defined this concept", "tokens": [51038, 3358, 510, 11, 314, 1345, 7642, 341, 3410, 51132], "temperature": 0.0, "avg_logprob": -0.1539939703400602, "compression_ratio": 1.6694915254237288, "no_speech_prob": 0.0001685909228399396}, {"id": 582, "seek": 160098, "start": 1616.34, "end": 1617.54, "text": " called Turing completeness", "tokens": [51132, 1219, 314, 1345, 1557, 15264, 51192], "temperature": 0.0, "avg_logprob": -0.1539939703400602, "compression_ratio": 1.6694915254237288, "no_speech_prob": 0.0001685909228399396}, {"id": 583, "seek": 160098, "start": 1617.54, "end": 1621.58, "text": " because you said that you can have other forms of computing.", "tokens": [51192, 570, 291, 848, 300, 291, 393, 362, 661, 6422, 295, 15866, 13, 51394], "temperature": 0.0, "avg_logprob": -0.1539939703400602, "compression_ratio": 1.6694915254237288, "no_speech_prob": 0.0001685909228399396}, {"id": 584, "seek": 160098, "start": 1621.58, "end": 1625.98, "text": " For example, you can imagine like different instruction sets", "tokens": [51394, 1171, 1365, 11, 291, 393, 3811, 411, 819, 10951, 6352, 51614], "temperature": 0.0, "avg_logprob": -0.1539939703400602, "compression_ratio": 1.6694915254237288, "no_speech_prob": 0.0001685909228399396}, {"id": 585, "seek": 160098, "start": 1625.98, "end": 1627.94, "text": " for this Turing machine, right?", "tokens": [51614, 337, 341, 314, 1345, 3479, 11, 558, 30, 51712], "temperature": 0.0, "avg_logprob": -0.1539939703400602, "compression_ratio": 1.6694915254237288, "no_speech_prob": 0.0001685909228399396}, {"id": 586, "seek": 162794, "start": 1628.94, "end": 1632.66, "text": " And he basically said that an axiom tower", "tokens": [50414, 400, 415, 1936, 848, 300, 364, 6360, 72, 298, 10567, 50600], "temperature": 0.0, "avg_logprob": -0.23715981265954805, "compression_ratio": 1.8687782805429864, "no_speech_prob": 0.00020985145238228142}, {"id": 587, "seek": 162794, "start": 1632.66, "end": 1634.8600000000001, "text": " that's sort of different than a Turing machine", "tokens": [50600, 300, 311, 1333, 295, 819, 813, 257, 314, 1345, 3479, 50710], "temperature": 0.0, "avg_logprob": -0.23715981265954805, "compression_ratio": 1.8687782805429864, "no_speech_prob": 0.00020985145238228142}, {"id": 588, "seek": 162794, "start": 1634.8600000000001, "end": 1637.66, "text": " is called Turing complete if and only if", "tokens": [50710, 307, 1219, 314, 1345, 3566, 498, 293, 787, 498, 50850], "temperature": 0.0, "avg_logprob": -0.23715981265954805, "compression_ratio": 1.8687782805429864, "no_speech_prob": 0.00020985145238228142}, {"id": 589, "seek": 162794, "start": 1637.66, "end": 1641.06, "text": " it can be used to emulate a Turing machine.", "tokens": [50850, 309, 393, 312, 1143, 281, 45497, 257, 314, 1345, 3479, 13, 51020], "temperature": 0.0, "avg_logprob": -0.23715981265954805, "compression_ratio": 1.8687782805429864, "no_speech_prob": 0.00020985145238228142}, {"id": 590, "seek": 162794, "start": 1641.06, "end": 1643.5, "text": " And if it can emulate a Turing machine,", "tokens": [51020, 400, 498, 309, 393, 45497, 257, 314, 1345, 3479, 11, 51142], "temperature": 0.0, "avg_logprob": -0.23715981265954805, "compression_ratio": 1.8687782805429864, "no_speech_prob": 0.00020985145238228142}, {"id": 591, "seek": 162794, "start": 1643.5, "end": 1645.94, "text": " then it can compute anything that's computable.", "tokens": [51142, 550, 309, 393, 14722, 1340, 300, 311, 2807, 712, 13, 51264], "temperature": 0.0, "avg_logprob": -0.23715981265954805, "compression_ratio": 1.8687782805429864, "no_speech_prob": 0.00020985145238228142}, {"id": 592, "seek": 162794, "start": 1646.94, "end": 1647.8600000000001, "text": " That sounds good.", "tokens": [51314, 663, 3263, 665, 13, 51360], "temperature": 0.0, "avg_logprob": -0.23715981265954805, "compression_ratio": 1.8687782805429864, "no_speech_prob": 0.00020985145238228142}, {"id": 593, "seek": 162794, "start": 1647.8600000000001, "end": 1650.46, "text": " This concept of Turing completeness has now popped up.", "tokens": [51360, 639, 3410, 295, 314, 1345, 1557, 15264, 575, 586, 21545, 493, 13, 51490], "temperature": 0.0, "avg_logprob": -0.23715981265954805, "compression_ratio": 1.8687782805429864, "no_speech_prob": 0.00020985145238228142}, {"id": 594, "seek": 162794, "start": 1652.06, "end": 1653.94, "text": " So it turns out that there's some interesting things", "tokens": [51570, 407, 309, 4523, 484, 300, 456, 311, 512, 1880, 721, 51664], "temperature": 0.0, "avg_logprob": -0.23715981265954805, "compression_ratio": 1.8687782805429864, "no_speech_prob": 0.00020985145238228142}, {"id": 595, "seek": 162794, "start": 1653.94, "end": 1655.06, "text": " that are Turing complete.", "tokens": [51664, 300, 366, 314, 1345, 3566, 13, 51720], "temperature": 0.0, "avg_logprob": -0.23715981265954805, "compression_ratio": 1.8687782805429864, "no_speech_prob": 0.00020985145238228142}, {"id": 596, "seek": 165506, "start": 1656.06, "end": 1659.58, "text": " If you guys have heard of Conway's Game of Life,", "tokens": [50414, 759, 291, 1074, 362, 2198, 295, 2656, 676, 311, 7522, 295, 7720, 11, 50590], "temperature": 0.0, "avg_logprob": -0.1628437264021053, "compression_ratio": 1.517766497461929, "no_speech_prob": 0.0015238445485010743}, {"id": 597, "seek": 165506, "start": 1659.58, "end": 1664.58, "text": " it's this basically life simulator, emulator, I guess.", "tokens": [50590, 309, 311, 341, 1936, 993, 32974, 11, 846, 16381, 11, 286, 2041, 13, 50840], "temperature": 0.0, "avg_logprob": -0.1628437264021053, "compression_ratio": 1.517766497461929, "no_speech_prob": 0.0015238445485010743}, {"id": 598, "seek": 165506, "start": 1665.7, "end": 1666.82, "text": " And it's very simple.", "tokens": [50896, 400, 309, 311, 588, 2199, 13, 50952], "temperature": 0.0, "avg_logprob": -0.1628437264021053, "compression_ratio": 1.517766497461929, "no_speech_prob": 0.0015238445485010743}, {"id": 599, "seek": 165506, "start": 1666.82, "end": 1668.74, "text": " You have this grid of squares", "tokens": [50952, 509, 362, 341, 10748, 295, 19368, 51048], "temperature": 0.0, "avg_logprob": -0.1628437264021053, "compression_ratio": 1.517766497461929, "no_speech_prob": 0.0015238445485010743}, {"id": 600, "seek": 165506, "start": 1668.74, "end": 1673.74, "text": " and each square corresponds to a living thing", "tokens": [51048, 293, 1184, 3732, 23249, 281, 257, 2647, 551, 51298], "temperature": 0.0, "avg_logprob": -0.1628437264021053, "compression_ratio": 1.517766497461929, "no_speech_prob": 0.0015238445485010743}, {"id": 601, "seek": 165506, "start": 1673.98, "end": 1675.86, "text": " and it's either alive or dead.", "tokens": [51310, 293, 309, 311, 2139, 5465, 420, 3116, 13, 51404], "temperature": 0.0, "avg_logprob": -0.1628437264021053, "compression_ratio": 1.517766497461929, "no_speech_prob": 0.0015238445485010743}, {"id": 602, "seek": 165506, "start": 1675.86, "end": 1677.8999999999999, "text": " And at every step in time,", "tokens": [51404, 400, 412, 633, 1823, 294, 565, 11, 51506], "temperature": 0.0, "avg_logprob": -0.1628437264021053, "compression_ratio": 1.517766497461929, "no_speech_prob": 0.0015238445485010743}, {"id": 603, "seek": 165506, "start": 1677.8999999999999, "end": 1682.34, "text": " there's some certain rules for allowing", "tokens": [51506, 456, 311, 512, 1629, 4474, 337, 8293, 51728], "temperature": 0.0, "avg_logprob": -0.1628437264021053, "compression_ratio": 1.517766497461929, "no_speech_prob": 0.0015238445485010743}, {"id": 604, "seek": 168234, "start": 1682.34, "end": 1686.4599999999998, "text": " like whether in the next time step,", "tokens": [50364, 411, 1968, 294, 264, 958, 565, 1823, 11, 50570], "temperature": 0.0, "avg_logprob": -0.15911195174507473, "compression_ratio": 1.5984251968503937, "no_speech_prob": 0.000319913262501359}, {"id": 605, "seek": 168234, "start": 1686.4599999999998, "end": 1688.1799999999998, "text": " the cell is alive or dead.", "tokens": [50570, 264, 2815, 307, 5465, 420, 3116, 13, 50656], "temperature": 0.0, "avg_logprob": -0.15911195174507473, "compression_ratio": 1.5984251968503937, "no_speech_prob": 0.000319913262501359}, {"id": 606, "seek": 168234, "start": 1688.1799999999998, "end": 1690.58, "text": " And so it essentially, oops,", "tokens": [50656, 400, 370, 309, 4476, 11, 34166, 11, 50776], "temperature": 0.0, "avg_logprob": -0.15911195174507473, "compression_ratio": 1.5984251968503937, "no_speech_prob": 0.000319913262501359}, {"id": 607, "seek": 168234, "start": 1692.8999999999999, "end": 1695.3799999999999, "text": " let's see if we can get this to play.", "tokens": [50892, 718, 311, 536, 498, 321, 393, 483, 341, 281, 862, 13, 51016], "temperature": 0.0, "avg_logprob": -0.15911195174507473, "compression_ratio": 1.5984251968503937, "no_speech_prob": 0.000319913262501359}, {"id": 608, "seek": 168234, "start": 1695.3799999999999, "end": 1696.3, "text": " I won't get into the rules", "tokens": [51016, 286, 1582, 380, 483, 666, 264, 4474, 51062], "temperature": 0.0, "avg_logprob": -0.15911195174507473, "compression_ratio": 1.5984251968503937, "no_speech_prob": 0.000319913262501359}, {"id": 609, "seek": 168234, "start": 1696.3, "end": 1698.54, "text": " because they're not really relevant,", "tokens": [51062, 570, 436, 434, 406, 534, 7340, 11, 51174], "temperature": 0.0, "avg_logprob": -0.15911195174507473, "compression_ratio": 1.5984251968503937, "no_speech_prob": 0.000319913262501359}, {"id": 610, "seek": 168234, "start": 1698.54, "end": 1701.74, "text": " but every kind of step in this animation", "tokens": [51174, 457, 633, 733, 295, 1823, 294, 341, 9603, 51334], "temperature": 0.0, "avg_logprob": -0.15911195174507473, "compression_ratio": 1.5984251968503937, "no_speech_prob": 0.000319913262501359}, {"id": 611, "seek": 168234, "start": 1701.74, "end": 1703.78, "text": " is like the universe kind of unfolding", "tokens": [51334, 307, 411, 264, 6445, 733, 295, 44586, 51436], "temperature": 0.0, "avg_logprob": -0.15911195174507473, "compression_ratio": 1.5984251968503937, "no_speech_prob": 0.000319913262501359}, {"id": 612, "seek": 168234, "start": 1703.78, "end": 1706.06, "text": " according to the rules of Conway's Game of Life.", "tokens": [51436, 4650, 281, 264, 4474, 295, 2656, 676, 311, 7522, 295, 7720, 13, 51550], "temperature": 0.0, "avg_logprob": -0.15911195174507473, "compression_ratio": 1.5984251968503937, "no_speech_prob": 0.000319913262501359}, {"id": 613, "seek": 168234, "start": 1706.06, "end": 1708.54, "text": " And it turns out that the basic rules", "tokens": [51550, 400, 309, 4523, 484, 300, 264, 3875, 4474, 51674], "temperature": 0.0, "avg_logprob": -0.15911195174507473, "compression_ratio": 1.5984251968503937, "no_speech_prob": 0.000319913262501359}, {"id": 614, "seek": 168234, "start": 1708.54, "end": 1711.8999999999999, "text": " are sufficient to represent a Turing machine.", "tokens": [51674, 366, 11563, 281, 2906, 257, 314, 1345, 3479, 13, 51842], "temperature": 0.0, "avg_logprob": -0.15911195174507473, "compression_ratio": 1.5984251968503937, "no_speech_prob": 0.000319913262501359}, {"id": 615, "seek": 171190, "start": 1711.9, "end": 1714.14, "text": " And so Conway's Game of Life is Turing complete.", "tokens": [50364, 400, 370, 2656, 676, 311, 7522, 295, 7720, 307, 314, 1345, 3566, 13, 50476], "temperature": 0.0, "avg_logprob": -0.1207033176811374, "compression_ratio": 1.7089201877934272, "no_speech_prob": 6.106544606154785e-05}, {"id": 616, "seek": 171190, "start": 1714.14, "end": 1717.14, "text": " And so any algorithm that's computable", "tokens": [50476, 400, 370, 604, 9284, 300, 311, 2807, 712, 50626], "temperature": 0.0, "avg_logprob": -0.1207033176811374, "compression_ratio": 1.7089201877934272, "no_speech_prob": 6.106544606154785e-05}, {"id": 617, "seek": 171190, "start": 1717.14, "end": 1719.3000000000002, "text": " can be represented in Conway's Game of Life.", "tokens": [50626, 393, 312, 10379, 294, 2656, 676, 311, 7522, 295, 7720, 13, 50734], "temperature": 0.0, "avg_logprob": -0.1207033176811374, "compression_ratio": 1.7089201877934272, "no_speech_prob": 6.106544606154785e-05}, {"id": 618, "seek": 171190, "start": 1722.14, "end": 1724.6200000000001, "text": " Magic the Gathering is also Turing complete.", "tokens": [50876, 16154, 264, 39841, 278, 307, 611, 314, 1345, 3566, 13, 51000], "temperature": 0.0, "avg_logprob": -0.1207033176811374, "compression_ratio": 1.7089201877934272, "no_speech_prob": 6.106544606154785e-05}, {"id": 619, "seek": 171190, "start": 1724.6200000000001, "end": 1726.7800000000002, "text": " So some researchers got together", "tokens": [51000, 407, 512, 10309, 658, 1214, 51108], "temperature": 0.0, "avg_logprob": -0.1207033176811374, "compression_ratio": 1.7089201877934272, "no_speech_prob": 6.106544606154785e-05}, {"id": 620, "seek": 171190, "start": 1726.7800000000002, "end": 1731.66, "text": " and they looked at some specific cards", "tokens": [51108, 293, 436, 2956, 412, 512, 2685, 5632, 51352], "temperature": 0.0, "avg_logprob": -0.1207033176811374, "compression_ratio": 1.7089201877934272, "no_speech_prob": 6.106544606154785e-05}, {"id": 621, "seek": 171190, "start": 1731.66, "end": 1733.74, "text": " that allow you to place these like counters", "tokens": [51352, 300, 2089, 291, 281, 1081, 613, 411, 39338, 51456], "temperature": 0.0, "avg_logprob": -0.1207033176811374, "compression_ratio": 1.7089201877934272, "no_speech_prob": 6.106544606154785e-05}, {"id": 622, "seek": 171190, "start": 1733.74, "end": 1735.5, "text": " and they use the counters as a way", "tokens": [51456, 293, 436, 764, 264, 39338, 382, 257, 636, 51544], "temperature": 0.0, "avg_logprob": -0.1207033176811374, "compression_ratio": 1.7089201877934272, "no_speech_prob": 6.106544606154785e-05}, {"id": 623, "seek": 171190, "start": 1735.5, "end": 1738.94, "text": " to represent an actual Turing tape.", "tokens": [51544, 281, 2906, 364, 3539, 314, 1345, 7314, 13, 51716], "temperature": 0.0, "avg_logprob": -0.1207033176811374, "compression_ratio": 1.7089201877934272, "no_speech_prob": 6.106544606154785e-05}, {"id": 624, "seek": 173894, "start": 1738.94, "end": 1742.7, "text": " And so just following the rules of Magic the Gathering,", "tokens": [50364, 400, 370, 445, 3480, 264, 4474, 295, 16154, 264, 39841, 278, 11, 50552], "temperature": 0.0, "avg_logprob": -0.1625257582891555, "compression_ratio": 1.575091575091575, "no_speech_prob": 7.842549530323595e-05}, {"id": 625, "seek": 173894, "start": 1742.7, "end": 1744.18, "text": " they're sufficiently complex enough", "tokens": [50552, 436, 434, 31868, 3997, 1547, 50626], "temperature": 0.0, "avg_logprob": -0.1625257582891555, "compression_ratio": 1.575091575091575, "no_speech_prob": 7.842549530323595e-05}, {"id": 626, "seek": 173894, "start": 1744.18, "end": 1747.3400000000001, "text": " that you can compute all of the prime numbers in the game.", "tokens": [50626, 300, 291, 393, 14722, 439, 295, 264, 5835, 3547, 294, 264, 1216, 13, 50784], "temperature": 0.0, "avg_logprob": -0.1625257582891555, "compression_ratio": 1.575091575091575, "no_speech_prob": 7.842549530323595e-05}, {"id": 627, "seek": 173894, "start": 1750.1000000000001, "end": 1752.14, "text": " Microsoft PowerPoint is Turing complete.", "tokens": [50922, 8116, 25584, 307, 314, 1345, 3566, 13, 51024], "temperature": 0.0, "avg_logprob": -0.1625257582891555, "compression_ratio": 1.575091575091575, "no_speech_prob": 7.842549530323595e-05}, {"id": 628, "seek": 173894, "start": 1753.18, "end": 1755.26, "text": " Obviously it has like macros and stuff,", "tokens": [51076, 7580, 309, 575, 411, 7912, 2635, 293, 1507, 11, 51180], "temperature": 0.0, "avg_logprob": -0.1625257582891555, "compression_ratio": 1.575091575091575, "no_speech_prob": 7.842549530323595e-05}, {"id": 629, "seek": 173894, "start": 1755.26, "end": 1759.0, "text": " but here using only auto shape, hyperlink and transition.", "tokens": [51180, 457, 510, 1228, 787, 8399, 3909, 11, 9848, 22473, 293, 6034, 13, 51367], "temperature": 0.0, "avg_logprob": -0.1625257582891555, "compression_ratio": 1.575091575091575, "no_speech_prob": 7.842549530323595e-05}, {"id": 630, "seek": 173894, "start": 1759.0, "end": 1760.8200000000002, "text": " And this paper is hilarious.", "tokens": [51367, 400, 341, 3035, 307, 19796, 13, 51458], "temperature": 0.0, "avg_logprob": -0.1625257582891555, "compression_ratio": 1.575091575091575, "no_speech_prob": 7.842549530323595e-05}, {"id": 631, "seek": 173894, "start": 1760.8200000000002, "end": 1762.3, "text": " Given PowerPoint's versatility", "tokens": [51458, 18600, 25584, 311, 1774, 20758, 51532], "temperature": 0.0, "avg_logprob": -0.1625257582891555, "compression_ratio": 1.575091575091575, "no_speech_prob": 7.842549530323595e-05}, {"id": 632, "seek": 173894, "start": 1762.3, "end": 1764.3400000000001, "text": " and cross-platform compatibility,", "tokens": [51532, 293, 3278, 12, 39975, 837, 34237, 11, 51634], "temperature": 0.0, "avg_logprob": -0.1625257582891555, "compression_ratio": 1.575091575091575, "no_speech_prob": 7.842549530323595e-05}, {"id": 633, "seek": 173894, "start": 1764.3400000000001, "end": 1766.54, "text": " some have asked whether any other applications", "tokens": [51634, 512, 362, 2351, 1968, 604, 661, 5821, 51744], "temperature": 0.0, "avg_logprob": -0.1625257582891555, "compression_ratio": 1.575091575091575, "no_speech_prob": 7.842549530323595e-05}, {"id": 634, "seek": 176654, "start": 1766.54, "end": 1767.98, "text": " are necessary at all,", "tokens": [50364, 366, 4818, 412, 439, 11, 50436], "temperature": 0.0, "avg_logprob": -0.13197039749662756, "compression_ratio": 1.7179487179487178, "no_speech_prob": 0.0002415170456515625}, {"id": 635, "seek": 176654, "start": 1767.98, "end": 1769.98, "text": " or if all computational tasks", "tokens": [50436, 420, 498, 439, 28270, 9608, 50536], "temperature": 0.0, "avg_logprob": -0.13197039749662756, "compression_ratio": 1.7179487179487178, "no_speech_prob": 0.0002415170456515625}, {"id": 636, "seek": 176654, "start": 1769.98, "end": 1772.22, "text": " can be accomplished through PowerPoint.", "tokens": [50536, 393, 312, 15419, 807, 25584, 13, 50648], "temperature": 0.0, "avg_logprob": -0.13197039749662756, "compression_ratio": 1.7179487179487178, "no_speech_prob": 0.0002415170456515625}, {"id": 637, "seek": 176654, "start": 1772.22, "end": 1775.02, "text": " This research aims to definitively answer these questions", "tokens": [50648, 639, 2132, 24683, 281, 28152, 356, 1867, 613, 1651, 50788], "temperature": 0.0, "avg_logprob": -0.13197039749662756, "compression_ratio": 1.7179487179487178, "no_speech_prob": 0.0002415170456515625}, {"id": 638, "seek": 176654, "start": 1775.02, "end": 1776.86, "text": " in the affirmative through the creation", "tokens": [50788, 294, 264, 45270, 807, 264, 8016, 50880], "temperature": 0.0, "avg_logprob": -0.13197039749662756, "compression_ratio": 1.7179487179487178, "no_speech_prob": 0.0002415170456515625}, {"id": 639, "seek": 176654, "start": 1776.86, "end": 1778.3, "text": " of a PowerPoint Turing machine.", "tokens": [50880, 295, 257, 25584, 314, 1345, 3479, 13, 50952], "temperature": 0.0, "avg_logprob": -0.13197039749662756, "compression_ratio": 1.7179487179487178, "no_speech_prob": 0.0002415170456515625}, {"id": 640, "seek": 176654, "start": 1781.42, "end": 1783.94, "text": " Okay, we've talked about Turing machines.", "tokens": [51108, 1033, 11, 321, 600, 2825, 466, 314, 1345, 8379, 13, 51234], "temperature": 0.0, "avg_logprob": -0.13197039749662756, "compression_ratio": 1.7179487179487178, "no_speech_prob": 0.0002415170456515625}, {"id": 641, "seek": 176654, "start": 1783.94, "end": 1785.82, "text": " Now let's talk about Lambda calculus.", "tokens": [51234, 823, 718, 311, 751, 466, 45691, 33400, 13, 51328], "temperature": 0.0, "avg_logprob": -0.13197039749662756, "compression_ratio": 1.7179487179487178, "no_speech_prob": 0.0002415170456515625}, {"id": 642, "seek": 176654, "start": 1785.82, "end": 1788.02, "text": " So to me, when I first learned about Turing machines,", "tokens": [51328, 407, 281, 385, 11, 562, 286, 700, 3264, 466, 314, 1345, 8379, 11, 51438], "temperature": 0.0, "avg_logprob": -0.13197039749662756, "compression_ratio": 1.7179487179487178, "no_speech_prob": 0.0002415170456515625}, {"id": 643, "seek": 176654, "start": 1788.02, "end": 1791.1, "text": " I thought it was really kind of unintuitive", "tokens": [51438, 286, 1194, 309, 390, 534, 733, 295, 29466, 48314, 51592], "temperature": 0.0, "avg_logprob": -0.13197039749662756, "compression_ratio": 1.7179487179487178, "no_speech_prob": 0.0002415170456515625}, {"id": 644, "seek": 176654, "start": 1791.1, "end": 1793.86, "text": " that such a simple thing can be used", "tokens": [51592, 300, 1270, 257, 2199, 551, 393, 312, 1143, 51730], "temperature": 0.0, "avg_logprob": -0.13197039749662756, "compression_ratio": 1.7179487179487178, "no_speech_prob": 0.0002415170456515625}, {"id": 645, "seek": 176654, "start": 1793.86, "end": 1795.6599999999999, "text": " to represent so much complexity.", "tokens": [51730, 281, 2906, 370, 709, 14024, 13, 51820], "temperature": 0.0, "avg_logprob": -0.13197039749662756, "compression_ratio": 1.7179487179487178, "no_speech_prob": 0.0002415170456515625}, {"id": 646, "seek": 179566, "start": 1795.66, "end": 1797.0600000000002, "text": " But then after really thinking about it,", "tokens": [50364, 583, 550, 934, 534, 1953, 466, 309, 11, 50434], "temperature": 0.0, "avg_logprob": -0.11332297691932092, "compression_ratio": 1.7964912280701755, "no_speech_prob": 9.913465328281745e-05}, {"id": 647, "seek": 179566, "start": 1797.0600000000002, "end": 1800.26, "text": " I realized that wait, the piano axioms are also very simple", "tokens": [50434, 286, 5334, 300, 1699, 11, 264, 9211, 6360, 72, 4785, 366, 611, 588, 2199, 50594], "temperature": 0.0, "avg_logprob": -0.11332297691932092, "compression_ratio": 1.7964912280701755, "no_speech_prob": 9.913465328281745e-05}, {"id": 648, "seek": 179566, "start": 1800.26, "end": 1801.8600000000001, "text": " and we can get all of math from it.", "tokens": [50594, 293, 321, 393, 483, 439, 295, 5221, 490, 309, 13, 50674], "temperature": 0.0, "avg_logprob": -0.11332297691932092, "compression_ratio": 1.7964912280701755, "no_speech_prob": 9.913465328281745e-05}, {"id": 649, "seek": 179566, "start": 1801.8600000000001, "end": 1803.74, "text": " So it must follow that you can have", "tokens": [50674, 407, 309, 1633, 1524, 300, 291, 393, 362, 50768], "temperature": 0.0, "avg_logprob": -0.11332297691932092, "compression_ratio": 1.7964912280701755, "no_speech_prob": 9.913465328281745e-05}, {"id": 650, "seek": 179566, "start": 1803.74, "end": 1806.1000000000001, "text": " simple computing axioms and that's the case.", "tokens": [50768, 2199, 15866, 6360, 72, 4785, 293, 300, 311, 264, 1389, 13, 50886], "temperature": 0.0, "avg_logprob": -0.11332297691932092, "compression_ratio": 1.7964912280701755, "no_speech_prob": 9.913465328281745e-05}, {"id": 651, "seek": 179566, "start": 1806.1000000000001, "end": 1809.5400000000002, "text": " And I think for computer scientists and software engineers,", "tokens": [50886, 400, 286, 519, 337, 3820, 7708, 293, 4722, 11955, 11, 51058], "temperature": 0.0, "avg_logprob": -0.11332297691932092, "compression_ratio": 1.7964912280701755, "no_speech_prob": 9.913465328281745e-05}, {"id": 652, "seek": 179566, "start": 1809.5400000000002, "end": 1812.02, "text": " this is sort of what we're in the business of doing.", "tokens": [51058, 341, 307, 1333, 295, 437, 321, 434, 294, 264, 1606, 295, 884, 13, 51182], "temperature": 0.0, "avg_logprob": -0.11332297691932092, "compression_ratio": 1.7964912280701755, "no_speech_prob": 9.913465328281745e-05}, {"id": 653, "seek": 179566, "start": 1812.02, "end": 1815.38, "text": " Like we take like simple building blocks", "tokens": [51182, 1743, 321, 747, 411, 2199, 2390, 8474, 51350], "temperature": 0.0, "avg_logprob": -0.11332297691932092, "compression_ratio": 1.7964912280701755, "no_speech_prob": 9.913465328281745e-05}, {"id": 654, "seek": 179566, "start": 1815.38, "end": 1817.98, "text": " and we compose them together to build complexity.", "tokens": [51350, 293, 321, 35925, 552, 1214, 281, 1322, 14024, 13, 51480], "temperature": 0.0, "avg_logprob": -0.11332297691932092, "compression_ratio": 1.7964912280701755, "no_speech_prob": 9.913465328281745e-05}, {"id": 655, "seek": 179566, "start": 1817.98, "end": 1819.7, "text": " And we have ways of reasoning about", "tokens": [51480, 400, 321, 362, 2098, 295, 21577, 466, 51566], "temperature": 0.0, "avg_logprob": -0.11332297691932092, "compression_ratio": 1.7964912280701755, "no_speech_prob": 9.913465328281745e-05}, {"id": 656, "seek": 179566, "start": 1819.7, "end": 1822.94, "text": " how these things combine together to build complexity.", "tokens": [51566, 577, 613, 721, 10432, 1214, 281, 1322, 14024, 13, 51728], "temperature": 0.0, "avg_logprob": -0.11332297691932092, "compression_ratio": 1.7964912280701755, "no_speech_prob": 9.913465328281745e-05}, {"id": 657, "seek": 182294, "start": 1822.94, "end": 1826.3400000000001, "text": " And we, it's sort of our job to make sure", "tokens": [50364, 400, 321, 11, 309, 311, 1333, 295, 527, 1691, 281, 652, 988, 50534], "temperature": 0.0, "avg_logprob": -0.15178919330085675, "compression_ratio": 1.5803571428571428, "no_speech_prob": 6.399912672350183e-05}, {"id": 658, "seek": 182294, "start": 1826.3400000000001, "end": 1829.06, "text": " that the complexity that we build", "tokens": [50534, 300, 264, 14024, 300, 321, 1322, 50670], "temperature": 0.0, "avg_logprob": -0.15178919330085675, "compression_ratio": 1.5803571428571428, "no_speech_prob": 6.399912672350183e-05}, {"id": 659, "seek": 182294, "start": 1829.06, "end": 1832.14, "text": " is actually founded and not buggy, let's say.", "tokens": [50670, 307, 767, 13234, 293, 406, 7426, 1480, 11, 718, 311, 584, 13, 50824], "temperature": 0.0, "avg_logprob": -0.15178919330085675, "compression_ratio": 1.5803571428571428, "no_speech_prob": 6.399912672350183e-05}, {"id": 660, "seek": 182294, "start": 1833.46, "end": 1836.66, "text": " So it turns out that there's another flavor", "tokens": [50890, 407, 309, 4523, 484, 300, 456, 311, 1071, 6813, 51050], "temperature": 0.0, "avg_logprob": -0.15178919330085675, "compression_ratio": 1.5803571428571428, "no_speech_prob": 6.399912672350183e-05}, {"id": 661, "seek": 182294, "start": 1836.66, "end": 1838.28, "text": " or another axiom tower for computing", "tokens": [51050, 420, 1071, 6360, 72, 298, 10567, 337, 15866, 51131], "temperature": 0.0, "avg_logprob": -0.15178919330085675, "compression_ratio": 1.5803571428571428, "no_speech_prob": 6.399912672350183e-05}, {"id": 662, "seek": 182294, "start": 1838.28, "end": 1839.8600000000001, "text": " that was invented basically", "tokens": [51131, 300, 390, 14479, 1936, 51210], "temperature": 0.0, "avg_logprob": -0.15178919330085675, "compression_ratio": 1.5803571428571428, "no_speech_prob": 6.399912672350183e-05}, {"id": 663, "seek": 182294, "start": 1839.8600000000001, "end": 1842.94, "text": " or discovered exactly around the same time.", "tokens": [51210, 420, 6941, 2293, 926, 264, 912, 565, 13, 51364], "temperature": 0.0, "avg_logprob": -0.15178919330085675, "compression_ratio": 1.5803571428571428, "no_speech_prob": 6.399912672350183e-05}, {"id": 664, "seek": 182294, "start": 1842.94, "end": 1846.3, "text": " And it was discovered by Alonzo Church", "tokens": [51364, 400, 309, 390, 6941, 538, 967, 266, 4765, 7882, 51532], "temperature": 0.0, "avg_logprob": -0.15178919330085675, "compression_ratio": 1.5803571428571428, "no_speech_prob": 6.399912672350183e-05}, {"id": 665, "seek": 182294, "start": 1846.3, "end": 1849.78, "text": " and it's a thing called Lambda calculus.", "tokens": [51532, 293, 309, 311, 257, 551, 1219, 45691, 33400, 13, 51706], "temperature": 0.0, "avg_logprob": -0.15178919330085675, "compression_ratio": 1.5803571428571428, "no_speech_prob": 6.399912672350183e-05}, {"id": 666, "seek": 184978, "start": 1849.78, "end": 1854.66, "text": " And the way, basically in Alonzo Church's original paper,", "tokens": [50364, 400, 264, 636, 11, 1936, 294, 967, 266, 4765, 7882, 311, 3380, 3035, 11, 50608], "temperature": 0.0, "avg_logprob": -0.1411577321715274, "compression_ratio": 1.6654411764705883, "no_speech_prob": 0.00010387512156739831}, {"id": 667, "seek": 184978, "start": 1854.66, "end": 1859.54, "text": " he has a particular syntax for how he denotes Lambda calculus.", "tokens": [50608, 415, 575, 257, 1729, 28431, 337, 577, 415, 1441, 17251, 45691, 33400, 13, 50852], "temperature": 0.0, "avg_logprob": -0.1411577321715274, "compression_ratio": 1.6654411764705883, "no_speech_prob": 0.00010387512156739831}, {"id": 668, "seek": 184978, "start": 1859.54, "end": 1862.98, "text": " And JavaScript also has its own syntax", "tokens": [50852, 400, 15778, 611, 575, 1080, 1065, 28431, 51024], "temperature": 0.0, "avg_logprob": -0.1411577321715274, "compression_ratio": 1.6654411764705883, "no_speech_prob": 0.00010387512156739831}, {"id": 669, "seek": 184978, "start": 1862.98, "end": 1864.76, "text": " for declaring anonymous functions.", "tokens": [51024, 337, 40374, 24932, 6828, 13, 51113], "temperature": 0.0, "avg_logprob": -0.1411577321715274, "compression_ratio": 1.6654411764705883, "no_speech_prob": 0.00010387512156739831}, {"id": 670, "seek": 184978, "start": 1864.76, "end": 1866.8999999999999, "text": " And because most of us are more familiar with JavaScript,", "tokens": [51113, 400, 570, 881, 295, 505, 366, 544, 4963, 365, 15778, 11, 51220], "temperature": 0.0, "avg_logprob": -0.1411577321715274, "compression_ratio": 1.6654411764705883, "no_speech_prob": 0.00010387512156739831}, {"id": 671, "seek": 184978, "start": 1866.8999999999999, "end": 1869.3799999999999, "text": " I'm gonna write both Alonzo Church's notation", "tokens": [51220, 286, 478, 799, 2464, 1293, 967, 266, 4765, 7882, 311, 24657, 51344], "temperature": 0.0, "avg_logprob": -0.1411577321715274, "compression_ratio": 1.6654411764705883, "no_speech_prob": 0.00010387512156739831}, {"id": 672, "seek": 184978, "start": 1869.3799999999999, "end": 1871.02, "text": " as well as the JavaScript notation", "tokens": [51344, 382, 731, 382, 264, 15778, 24657, 51426], "temperature": 0.0, "avg_logprob": -0.1411577321715274, "compression_ratio": 1.6654411764705883, "no_speech_prob": 0.00010387512156739831}, {"id": 673, "seek": 184978, "start": 1871.02, "end": 1872.68, "text": " to represent the same ideas.", "tokens": [51426, 281, 2906, 264, 912, 3487, 13, 51509], "temperature": 0.0, "avg_logprob": -0.1411577321715274, "compression_ratio": 1.6654411764705883, "no_speech_prob": 0.00010387512156739831}, {"id": 674, "seek": 184978, "start": 1872.68, "end": 1876.18, "text": " So the first idea that he introduced was,", "tokens": [51509, 407, 264, 700, 1558, 300, 415, 7268, 390, 11, 51684], "temperature": 0.0, "avg_logprob": -0.1411577321715274, "compression_ratio": 1.6654411764705883, "no_speech_prob": 0.00010387512156739831}, {"id": 675, "seek": 184978, "start": 1876.18, "end": 1877.76, "text": " you can have variables.", "tokens": [51684, 291, 393, 362, 9102, 13, 51763], "temperature": 0.0, "avg_logprob": -0.1411577321715274, "compression_ratio": 1.6654411764705883, "no_speech_prob": 0.00010387512156739831}, {"id": 676, "seek": 184978, "start": 1877.76, "end": 1879.46, "text": " So here X is a variable.", "tokens": [51763, 407, 510, 1783, 307, 257, 7006, 13, 51848], "temperature": 0.0, "avg_logprob": -0.1411577321715274, "compression_ratio": 1.6654411764705883, "no_speech_prob": 0.00010387512156739831}, {"id": 677, "seek": 187946, "start": 1879.46, "end": 1881.1000000000001, "text": " It's like a placeholder for a value.", "tokens": [50364, 467, 311, 411, 257, 1081, 20480, 337, 257, 2158, 13, 50446], "temperature": 0.0, "avg_logprob": -0.18015941273082386, "compression_ratio": 1.6790123456790123, "no_speech_prob": 9.912680252455175e-05}, {"id": 678, "seek": 187946, "start": 1882.1000000000001, "end": 1886.22, "text": " Second idea is you can have functions.", "tokens": [50496, 5736, 1558, 307, 291, 393, 362, 6828, 13, 50702], "temperature": 0.0, "avg_logprob": -0.18015941273082386, "compression_ratio": 1.6790123456790123, "no_speech_prob": 9.912680252455175e-05}, {"id": 679, "seek": 187946, "start": 1886.22, "end": 1889.1000000000001, "text": " And a function, this is on the left,", "tokens": [50702, 400, 257, 2445, 11, 341, 307, 322, 264, 1411, 11, 50846], "temperature": 0.0, "avg_logprob": -0.18015941273082386, "compression_ratio": 1.6790123456790123, "no_speech_prob": 9.912680252455175e-05}, {"id": 680, "seek": 187946, "start": 1889.1000000000001, "end": 1892.18, "text": " Alonzo Church's definition or notation.", "tokens": [50846, 967, 266, 4765, 7882, 311, 7123, 420, 24657, 13, 51000], "temperature": 0.0, "avg_logprob": -0.18015941273082386, "compression_ratio": 1.6790123456790123, "no_speech_prob": 9.912680252455175e-05}, {"id": 681, "seek": 187946, "start": 1892.18, "end": 1894.94, "text": " And on the right, you have the ES6 equivalent syntax.", "tokens": [51000, 400, 322, 264, 558, 11, 291, 362, 264, 12564, 21, 10344, 28431, 13, 51138], "temperature": 0.0, "avg_logprob": -0.18015941273082386, "compression_ratio": 1.6790123456790123, "no_speech_prob": 9.912680252455175e-05}, {"id": 682, "seek": 187946, "start": 1894.94, "end": 1897.74, "text": " This is just a function that takes in one parameter Y", "tokens": [51138, 639, 307, 445, 257, 2445, 300, 2516, 294, 472, 13075, 398, 51278], "temperature": 0.0, "avg_logprob": -0.18015941273082386, "compression_ratio": 1.6790123456790123, "no_speech_prob": 9.912680252455175e-05}, {"id": 683, "seek": 187946, "start": 1897.74, "end": 1900.7, "text": " and has somebody M and M itself,", "tokens": [51278, 293, 575, 2618, 376, 293, 376, 2564, 11, 51426], "temperature": 0.0, "avg_logprob": -0.18015941273082386, "compression_ratio": 1.6790123456790123, "no_speech_prob": 9.912680252455175e-05}, {"id": 684, "seek": 187946, "start": 1900.7, "end": 1902.54, "text": " itself another Lambda expression.", "tokens": [51426, 2564, 1071, 45691, 6114, 13, 51518], "temperature": 0.0, "avg_logprob": -0.18015941273082386, "compression_ratio": 1.6790123456790123, "no_speech_prob": 9.912680252455175e-05}, {"id": 685, "seek": 187946, "start": 1903.46, "end": 1905.1000000000001, "text": " So you have function definition.", "tokens": [51564, 407, 291, 362, 2445, 7123, 13, 51646], "temperature": 0.0, "avg_logprob": -0.18015941273082386, "compression_ratio": 1.6790123456790123, "no_speech_prob": 9.912680252455175e-05}, {"id": 686, "seek": 187946, "start": 1906.06, "end": 1908.54, "text": " And then finally you have function application.", "tokens": [51694, 400, 550, 2721, 291, 362, 2445, 3861, 13, 51818], "temperature": 0.0, "avg_logprob": -0.18015941273082386, "compression_ratio": 1.6790123456790123, "no_speech_prob": 9.912680252455175e-05}, {"id": 687, "seek": 190854, "start": 1908.54, "end": 1910.1399999999999, "text": " So F of M, right?", "tokens": [50364, 407, 479, 295, 376, 11, 558, 30, 50444], "temperature": 0.0, "avg_logprob": -0.14863231394550588, "compression_ratio": 1.618421052631579, "no_speech_prob": 9.912018140312284e-05}, {"id": 688, "seek": 190854, "start": 1910.1399999999999, "end": 1912.3799999999999, "text": " So calling function F with a particular M.", "tokens": [50444, 407, 5141, 2445, 479, 365, 257, 1729, 376, 13, 50556], "temperature": 0.0, "avg_logprob": -0.14863231394550588, "compression_ratio": 1.618421052631579, "no_speech_prob": 9.912018140312284e-05}, {"id": 689, "seek": 190854, "start": 1912.3799999999999, "end": 1917.3799999999999, "text": " So if in this case we call Y with some value,", "tokens": [50556, 407, 498, 294, 341, 1389, 321, 818, 398, 365, 512, 2158, 11, 50806], "temperature": 0.0, "avg_logprob": -0.14863231394550588, "compression_ratio": 1.618421052631579, "no_speech_prob": 9.912018140312284e-05}, {"id": 690, "seek": 190854, "start": 1918.22, "end": 1920.46, "text": " like everything inside the body of M", "tokens": [50848, 411, 1203, 1854, 264, 1772, 295, 376, 50960], "temperature": 0.0, "avg_logprob": -0.14863231394550588, "compression_ratio": 1.618421052631579, "no_speech_prob": 9.912018140312284e-05}, {"id": 691, "seek": 190854, "start": 1920.46, "end": 1923.46, "text": " gets replaced with whatever value we call it.", "tokens": [50960, 2170, 10772, 365, 2035, 2158, 321, 818, 309, 13, 51110], "temperature": 0.0, "avg_logprob": -0.14863231394550588, "compression_ratio": 1.618421052631579, "no_speech_prob": 9.912018140312284e-05}, {"id": 692, "seek": 190854, "start": 1923.46, "end": 1927.06, "text": " You guys should be really familiar with this concept.", "tokens": [51110, 509, 1074, 820, 312, 534, 4963, 365, 341, 3410, 13, 51290], "temperature": 0.0, "avg_logprob": -0.14863231394550588, "compression_ratio": 1.618421052631579, "no_speech_prob": 9.912018140312284e-05}, {"id": 693, "seek": 190854, "start": 1927.06, "end": 1930.78, "text": " And it turns out that this is all you need.", "tokens": [51290, 400, 309, 4523, 484, 300, 341, 307, 439, 291, 643, 13, 51476], "temperature": 0.0, "avg_logprob": -0.14863231394550588, "compression_ratio": 1.618421052631579, "no_speech_prob": 9.912018140312284e-05}, {"id": 694, "seek": 190854, "start": 1930.78, "end": 1933.46, "text": " And with just these three concepts,", "tokens": [51476, 400, 365, 445, 613, 1045, 10392, 11, 51610], "temperature": 0.0, "avg_logprob": -0.14863231394550588, "compression_ratio": 1.618421052631579, "no_speech_prob": 9.912018140312284e-05}, {"id": 695, "seek": 190854, "start": 1933.46, "end": 1935.98, "text": " you can get something that's turned complete.", "tokens": [51610, 291, 393, 483, 746, 300, 311, 3574, 3566, 13, 51736], "temperature": 0.0, "avg_logprob": -0.14863231394550588, "compression_ratio": 1.618421052631579, "no_speech_prob": 9.912018140312284e-05}, {"id": 696, "seek": 193598, "start": 1936.98, "end": 1940.14, "text": " And so this is really, really unintuitive.", "tokens": [50414, 400, 370, 341, 307, 534, 11, 534, 29466, 48314, 13, 50572], "temperature": 0.0, "avg_logprob": -0.15649024578703552, "compression_ratio": 1.6934306569343065, "no_speech_prob": 6.604336522286758e-05}, {"id": 697, "seek": 193598, "start": 1940.14, "end": 1943.5, "text": " For me, it was way more unintuitive than the turning machine", "tokens": [50572, 1171, 385, 11, 309, 390, 636, 544, 29466, 48314, 813, 264, 6246, 3479, 50740], "temperature": 0.0, "avg_logprob": -0.15649024578703552, "compression_ratio": 1.6934306569343065, "no_speech_prob": 6.604336522286758e-05}, {"id": 698, "seek": 193598, "start": 1943.5, "end": 1945.1200000000001, "text": " which felt like this mechanical thing.", "tokens": [50740, 597, 2762, 411, 341, 12070, 551, 13, 50821], "temperature": 0.0, "avg_logprob": -0.15649024578703552, "compression_ratio": 1.6934306569343065, "no_speech_prob": 6.604336522286758e-05}, {"id": 699, "seek": 193598, "start": 1945.1200000000001, "end": 1947.42, "text": " And therefore because you can operate it mechanically,", "tokens": [50821, 400, 4412, 570, 291, 393, 9651, 309, 4236, 984, 11, 50936], "temperature": 0.0, "avg_logprob": -0.15649024578703552, "compression_ratio": 1.6934306569343065, "no_speech_prob": 6.604336522286758e-05}, {"id": 700, "seek": 193598, "start": 1947.42, "end": 1949.18, "text": " perhaps it can do some computation.", "tokens": [50936, 4317, 309, 393, 360, 512, 24903, 13, 51024], "temperature": 0.0, "avg_logprob": -0.15649024578703552, "compression_ratio": 1.6934306569343065, "no_speech_prob": 6.604336522286758e-05}, {"id": 701, "seek": 193598, "start": 1949.18, "end": 1952.74, "text": " Here there's no notion of mechanics.", "tokens": [51024, 1692, 456, 311, 572, 10710, 295, 12939, 13, 51202], "temperature": 0.0, "avg_logprob": -0.15649024578703552, "compression_ratio": 1.6934306569343065, "no_speech_prob": 6.604336522286758e-05}, {"id": 702, "seek": 193598, "start": 1952.74, "end": 1955.3, "text": " I mean, maybe you have function application.", "tokens": [51202, 286, 914, 11, 1310, 291, 362, 2445, 3861, 13, 51330], "temperature": 0.0, "avg_logprob": -0.15649024578703552, "compression_ratio": 1.6934306569343065, "no_speech_prob": 6.604336522286758e-05}, {"id": 703, "seek": 193598, "start": 1955.3, "end": 1956.46, "text": " And so we'll get into like,", "tokens": [51330, 400, 370, 321, 603, 483, 666, 411, 11, 51388], "temperature": 0.0, "avg_logprob": -0.15649024578703552, "compression_ratio": 1.6934306569343065, "no_speech_prob": 6.604336522286758e-05}, {"id": 704, "seek": 193598, "start": 1956.46, "end": 1959.4, "text": " how can this possibly do stuff?", "tokens": [51388, 577, 393, 341, 6264, 360, 1507, 30, 51535], "temperature": 0.0, "avg_logprob": -0.15649024578703552, "compression_ratio": 1.6934306569343065, "no_speech_prob": 6.604336522286758e-05}, {"id": 705, "seek": 193598, "start": 1961.98, "end": 1964.14, "text": " So the first thing is you have in Lambda calculus", "tokens": [51664, 407, 264, 700, 551, 307, 291, 362, 294, 45691, 33400, 51772], "temperature": 0.0, "avg_logprob": -0.15649024578703552, "compression_ratio": 1.6934306569343065, "no_speech_prob": 6.604336522286758e-05}, {"id": 706, "seek": 193598, "start": 1964.14, "end": 1965.94, "text": " this concept called identity function.", "tokens": [51772, 341, 3410, 1219, 6575, 2445, 13, 51862], "temperature": 0.0, "avg_logprob": -0.15649024578703552, "compression_ratio": 1.6934306569343065, "no_speech_prob": 6.604336522286758e-05}, {"id": 707, "seek": 196594, "start": 1965.94, "end": 1968.16, "text": " This is the Lambda definition on the left", "tokens": [50364, 639, 307, 264, 45691, 7123, 322, 264, 1411, 50475], "temperature": 0.0, "avg_logprob": -0.18559134110160497, "compression_ratio": 1.7096774193548387, "no_speech_prob": 7.720904250163585e-05}, {"id": 708, "seek": 196594, "start": 1968.16, "end": 1970.76, "text": " and the JavaScript definition on the right.", "tokens": [50475, 293, 264, 15778, 7123, 322, 264, 558, 13, 50605], "temperature": 0.0, "avg_logprob": -0.18559134110160497, "compression_ratio": 1.7096774193548387, "no_speech_prob": 7.720904250163585e-05}, {"id": 709, "seek": 196594, "start": 1970.76, "end": 1973.22, "text": " Obviously a very simple construct.", "tokens": [50605, 7580, 257, 588, 2199, 7690, 13, 50728], "temperature": 0.0, "avg_logprob": -0.18559134110160497, "compression_ratio": 1.7096774193548387, "no_speech_prob": 7.720904250163585e-05}, {"id": 710, "seek": 196594, "start": 1973.22, "end": 1977.1200000000001, "text": " In JavaScript we can have optional braces", "tokens": [50728, 682, 15778, 321, 393, 362, 17312, 41537, 50923], "temperature": 0.0, "avg_logprob": -0.18559134110160497, "compression_ratio": 1.7096774193548387, "no_speech_prob": 7.720904250163585e-05}, {"id": 711, "seek": 196594, "start": 1977.1200000000001, "end": 1978.48, "text": " for the input parameter, right?", "tokens": [50923, 337, 264, 4846, 13075, 11, 558, 30, 50991], "temperature": 0.0, "avg_logprob": -0.18559134110160497, "compression_ratio": 1.7096774193548387, "no_speech_prob": 7.720904250163585e-05}, {"id": 712, "seek": 196594, "start": 1978.48, "end": 1980.18, "text": " So these two forms are equivalent.", "tokens": [50991, 407, 613, 732, 6422, 366, 10344, 13, 51076], "temperature": 0.0, "avg_logprob": -0.18559134110160497, "compression_ratio": 1.7096774193548387, "no_speech_prob": 7.720904250163585e-05}, {"id": 713, "seek": 196594, "start": 1980.18, "end": 1981.6200000000001, "text": " So I'm gonna drop the braces.", "tokens": [51076, 407, 286, 478, 799, 3270, 264, 41537, 13, 51148], "temperature": 0.0, "avg_logprob": -0.18559134110160497, "compression_ratio": 1.7096774193548387, "no_speech_prob": 7.720904250163585e-05}, {"id": 714, "seek": 196594, "start": 1983.64, "end": 1985.3200000000002, "text": " And the names are just placeholders, right?", "tokens": [51249, 400, 264, 5288, 366, 445, 1081, 12916, 11, 558, 30, 51333], "temperature": 0.0, "avg_logprob": -0.18559134110160497, "compression_ratio": 1.7096774193548387, "no_speech_prob": 7.720904250163585e-05}, {"id": 715, "seek": 196594, "start": 1985.3200000000002, "end": 1989.26, "text": " So X and X and Z and Q that are,", "tokens": [51333, 407, 1783, 293, 1783, 293, 1176, 293, 1249, 300, 366, 11, 51530], "temperature": 0.0, "avg_logprob": -0.18559134110160497, "compression_ratio": 1.7096774193548387, "no_speech_prob": 7.720904250163585e-05}, {"id": 716, "seek": 196594, "start": 1989.26, "end": 1992.26, "text": " all of these constructs mean the same thing, right?", "tokens": [51530, 439, 295, 613, 7690, 82, 914, 264, 912, 551, 11, 558, 30, 51680], "temperature": 0.0, "avg_logprob": -0.18559134110160497, "compression_ratio": 1.7096774193548387, "no_speech_prob": 7.720904250163585e-05}, {"id": 717, "seek": 196594, "start": 1992.26, "end": 1994.76, "text": " So there's nothing special about X.", "tokens": [51680, 407, 456, 311, 1825, 2121, 466, 1783, 13, 51805], "temperature": 0.0, "avg_logprob": -0.18559134110160497, "compression_ratio": 1.7096774193548387, "no_speech_prob": 7.720904250163585e-05}, {"id": 718, "seek": 199594, "start": 1996.42, "end": 1997.74, "text": " So in Lambda calculus,", "tokens": [50388, 407, 294, 45691, 33400, 11, 50454], "temperature": 0.0, "avg_logprob": -0.11597326823643275, "compression_ratio": 1.88135593220339, "no_speech_prob": 0.00013979927462060004}, {"id": 719, "seek": 199594, "start": 1997.74, "end": 1999.54, "text": " you can call the identity function on itself.", "tokens": [50454, 291, 393, 818, 264, 6575, 2445, 322, 2564, 13, 50544], "temperature": 0.0, "avg_logprob": -0.11597326823643275, "compression_ratio": 1.88135593220339, "no_speech_prob": 0.00013979927462060004}, {"id": 720, "seek": 199594, "start": 1999.54, "end": 2001.74, "text": " And basically what this is doing is,", "tokens": [50544, 400, 1936, 437, 341, 307, 884, 307, 11, 50654], "temperature": 0.0, "avg_logprob": -0.11597326823643275, "compression_ratio": 1.88135593220339, "no_speech_prob": 0.00013979927462060004}, {"id": 721, "seek": 199594, "start": 2001.74, "end": 2003.8600000000001, "text": " this is the function, right?", "tokens": [50654, 341, 307, 264, 2445, 11, 558, 30, 50760], "temperature": 0.0, "avg_logprob": -0.11597326823643275, "compression_ratio": 1.88135593220339, "no_speech_prob": 0.00013979927462060004}, {"id": 722, "seek": 199594, "start": 2003.8600000000001, "end": 2006.8400000000001, "text": " And this is the thing that you're calling it with, right?", "tokens": [50760, 400, 341, 307, 264, 551, 300, 291, 434, 5141, 309, 365, 11, 558, 30, 50909], "temperature": 0.0, "avg_logprob": -0.11597326823643275, "compression_ratio": 1.88135593220339, "no_speech_prob": 0.00013979927462060004}, {"id": 723, "seek": 199594, "start": 2006.8400000000001, "end": 2009.02, "text": " This is a JavaScript equivalent, right?", "tokens": [50909, 639, 307, 257, 15778, 10344, 11, 558, 30, 51018], "temperature": 0.0, "avg_logprob": -0.11597326823643275, "compression_ratio": 1.88135593220339, "no_speech_prob": 0.00013979927462060004}, {"id": 724, "seek": 199594, "start": 2009.02, "end": 2012.06, "text": " So what you do is for,", "tokens": [51018, 407, 437, 291, 360, 307, 337, 11, 51170], "temperature": 0.0, "avg_logprob": -0.11597326823643275, "compression_ratio": 1.88135593220339, "no_speech_prob": 0.00013979927462060004}, {"id": 725, "seek": 199594, "start": 2012.06, "end": 2013.98, "text": " this is the input variable X", "tokens": [51170, 341, 307, 264, 4846, 7006, 1783, 51266], "temperature": 0.0, "avg_logprob": -0.11597326823643275, "compression_ratio": 1.88135593220339, "no_speech_prob": 0.00013979927462060004}, {"id": 726, "seek": 199594, "start": 2013.98, "end": 2016.5800000000002, "text": " and this is the body of the function M.", "tokens": [51266, 293, 341, 307, 264, 1772, 295, 264, 2445, 376, 13, 51396], "temperature": 0.0, "avg_logprob": -0.11597326823643275, "compression_ratio": 1.88135593220339, "no_speech_prob": 0.00013979927462060004}, {"id": 727, "seek": 199594, "start": 2016.5800000000002, "end": 2018.48, "text": " And inside the body,", "tokens": [51396, 400, 1854, 264, 1772, 11, 51491], "temperature": 0.0, "avg_logprob": -0.11597326823643275, "compression_ratio": 1.88135593220339, "no_speech_prob": 0.00013979927462060004}, {"id": 728, "seek": 199594, "start": 2018.48, "end": 2019.54, "text": " whenever you call this function,", "tokens": [51491, 5699, 291, 818, 341, 2445, 11, 51544], "temperature": 0.0, "avg_logprob": -0.11597326823643275, "compression_ratio": 1.88135593220339, "no_speech_prob": 0.00013979927462060004}, {"id": 729, "seek": 199594, "start": 2019.54, "end": 2022.22, "text": " you replace every occurrence of X", "tokens": [51544, 291, 7406, 633, 36122, 295, 1783, 51678], "temperature": 0.0, "avg_logprob": -0.11597326823643275, "compression_ratio": 1.88135593220339, "no_speech_prob": 0.00013979927462060004}, {"id": 730, "seek": 199594, "start": 2022.22, "end": 2024.14, "text": " with whatever you call it with.", "tokens": [51678, 365, 2035, 291, 818, 309, 365, 13, 51774], "temperature": 0.0, "avg_logprob": -0.11597326823643275, "compression_ratio": 1.88135593220339, "no_speech_prob": 0.00013979927462060004}, {"id": 731, "seek": 202414, "start": 2024.14, "end": 2026.8200000000002, "text": " So here every occurrence of X is replaced", "tokens": [50364, 407, 510, 633, 36122, 295, 1783, 307, 10772, 50498], "temperature": 0.0, "avg_logprob": -0.18151570437999254, "compression_ratio": 1.614678899082569, "no_speech_prob": 0.00011407178681110963}, {"id": 732, "seek": 202414, "start": 2026.8200000000002, "end": 2029.26, "text": " with this Lambda function with the purple Xs", "tokens": [50498, 365, 341, 45691, 2445, 365, 264, 9656, 1783, 82, 50620], "temperature": 0.0, "avg_logprob": -0.18151570437999254, "compression_ratio": 1.614678899082569, "no_speech_prob": 0.00011407178681110963}, {"id": 733, "seek": 202414, "start": 2029.26, "end": 2030.46, "text": " and you get this output.", "tokens": [50620, 293, 291, 483, 341, 5598, 13, 50680], "temperature": 0.0, "avg_logprob": -0.18151570437999254, "compression_ratio": 1.614678899082569, "no_speech_prob": 0.00011407178681110963}, {"id": 734, "seek": 202414, "start": 2031.6200000000001, "end": 2032.7, "text": " Not very interesting.", "tokens": [50738, 1726, 588, 1880, 13, 50792], "temperature": 0.0, "avg_logprob": -0.18151570437999254, "compression_ratio": 1.614678899082569, "no_speech_prob": 0.00011407178681110963}, {"id": 735, "seek": 202414, "start": 2035.8600000000001, "end": 2037.72, "text": " Next you have this concept called curing.", "tokens": [50950, 3087, 291, 362, 341, 3410, 1219, 1262, 278, 13, 51043], "temperature": 0.0, "avg_logprob": -0.18151570437999254, "compression_ratio": 1.614678899082569, "no_speech_prob": 0.00011407178681110963}, {"id": 736, "seek": 202414, "start": 2037.72, "end": 2040.0600000000002, "text": " So in modern programming languages,", "tokens": [51043, 407, 294, 4363, 9410, 8650, 11, 51160], "temperature": 0.0, "avg_logprob": -0.18151570437999254, "compression_ratio": 1.614678899082569, "no_speech_prob": 0.00011407178681110963}, {"id": 737, "seek": 202414, "start": 2040.0600000000002, "end": 2043.7, "text": " most of them have this notion of having functions", "tokens": [51160, 881, 295, 552, 362, 341, 10710, 295, 1419, 6828, 51342], "temperature": 0.0, "avg_logprob": -0.18151570437999254, "compression_ratio": 1.614678899082569, "no_speech_prob": 0.00011407178681110963}, {"id": 738, "seek": 202414, "start": 2043.7, "end": 2047.0, "text": " that accept multiple input parameters.", "tokens": [51342, 300, 3241, 3866, 4846, 9834, 13, 51507], "temperature": 0.0, "avg_logprob": -0.18151570437999254, "compression_ratio": 1.614678899082569, "no_speech_prob": 0.00011407178681110963}, {"id": 739, "seek": 202414, "start": 2047.0, "end": 2050.1400000000003, "text": " But it turns out that you don't actually need this.", "tokens": [51507, 583, 309, 4523, 484, 300, 291, 500, 380, 767, 643, 341, 13, 51664], "temperature": 0.0, "avg_logprob": -0.18151570437999254, "compression_ratio": 1.614678899082569, "no_speech_prob": 0.00011407178681110963}, {"id": 740, "seek": 205014, "start": 2050.14, "end": 2054.7, "text": " And the way Alonzo church got around this idea", "tokens": [50364, 400, 264, 636, 967, 266, 4765, 4128, 658, 926, 341, 1558, 50592], "temperature": 0.0, "avg_logprob": -0.18554867754925738, "compression_ratio": 1.7835051546391754, "no_speech_prob": 0.00015839689876884222}, {"id": 741, "seek": 205014, "start": 2054.7, "end": 2056.3799999999997, "text": " is that instead of a function taking in", "tokens": [50592, 307, 300, 2602, 295, 257, 2445, 1940, 294, 50676], "temperature": 0.0, "avg_logprob": -0.18554867754925738, "compression_ratio": 1.7835051546391754, "no_speech_prob": 0.00015839689876884222}, {"id": 742, "seek": 205014, "start": 2056.3799999999997, "end": 2058.1, "text": " two input parameters like this,", "tokens": [50676, 732, 4846, 9834, 411, 341, 11, 50762], "temperature": 0.0, "avg_logprob": -0.18554867754925738, "compression_ratio": 1.7835051546391754, "no_speech_prob": 0.00015839689876884222}, {"id": 743, "seek": 205014, "start": 2058.1, "end": 2062.1, "text": " we just have a function which returns another function", "tokens": [50762, 321, 445, 362, 257, 2445, 597, 11247, 1071, 2445, 50962], "temperature": 0.0, "avg_logprob": -0.18554867754925738, "compression_ratio": 1.7835051546391754, "no_speech_prob": 0.00015839689876884222}, {"id": 744, "seek": 205014, "start": 2062.1, "end": 2064.62, "text": " which takes in an input parameter.", "tokens": [50962, 597, 2516, 294, 364, 4846, 13075, 13, 51088], "temperature": 0.0, "avg_logprob": -0.18554867754925738, "compression_ratio": 1.7835051546391754, "no_speech_prob": 0.00015839689876884222}, {"id": 745, "seek": 205014, "start": 2064.62, "end": 2065.46, "text": " That make sense?", "tokens": [51088, 663, 652, 2020, 30, 51130], "temperature": 0.0, "avg_logprob": -0.18554867754925738, "compression_ratio": 1.7835051546391754, "no_speech_prob": 0.00015839689876884222}, {"id": 746, "seek": 205014, "start": 2066.94, "end": 2070.2999999999997, "text": " So this construct and this construct are equivalent.", "tokens": [51204, 407, 341, 7690, 293, 341, 7690, 366, 10344, 13, 51372], "temperature": 0.0, "avg_logprob": -0.18554867754925738, "compression_ratio": 1.7835051546391754, "no_speech_prob": 0.00015839689876884222}, {"id": 747, "seek": 205014, "start": 2071.3599999999997, "end": 2073.2999999999997, "text": " And Alonzo church said,", "tokens": [51425, 400, 967, 266, 4765, 4128, 848, 11, 51522], "temperature": 0.0, "avg_logprob": -0.18554867754925738, "compression_ratio": 1.7835051546391754, "no_speech_prob": 0.00015839689876884222}, {"id": 748, "seek": 205014, "start": 2073.2999999999997, "end": 2075.8599999999997, "text": " instead of kind of being verbose like this,", "tokens": [51522, 2602, 295, 733, 295, 885, 9595, 541, 411, 341, 11, 51650], "temperature": 0.0, "avg_logprob": -0.18554867754925738, "compression_ratio": 1.7835051546391754, "no_speech_prob": 0.00015839689876884222}, {"id": 749, "seek": 207586, "start": 2076.46, "end": 2080.5, "text": " I'm gonna denote Lambda XY.M as equivalent to this.", "tokens": [50394, 286, 478, 799, 45708, 45691, 48826, 13, 44, 382, 10344, 281, 341, 13, 50596], "temperature": 0.0, "avg_logprob": -0.16815280055140588, "compression_ratio": 1.7004048582995952, "no_speech_prob": 0.0006069352384656668}, {"id": 750, "seek": 207586, "start": 2082.26, "end": 2084.2200000000003, "text": " So it's not equivalent to this thing on the right", "tokens": [50684, 407, 309, 311, 406, 10344, 281, 341, 551, 322, 264, 558, 50782], "temperature": 0.0, "avg_logprob": -0.16815280055140588, "compression_ratio": 1.7004048582995952, "no_speech_prob": 0.0006069352384656668}, {"id": 751, "seek": 207586, "start": 2084.2200000000003, "end": 2085.2200000000003, "text": " because here in JavaScript,", "tokens": [50782, 570, 510, 294, 15778, 11, 50832], "temperature": 0.0, "avg_logprob": -0.16815280055140588, "compression_ratio": 1.7004048582995952, "no_speech_prob": 0.0006069352384656668}, {"id": 752, "seek": 207586, "start": 2085.2200000000003, "end": 2087.6600000000003, "text": " we have a function that takes in two input parameters.", "tokens": [50832, 321, 362, 257, 2445, 300, 2516, 294, 732, 4846, 9834, 13, 50954], "temperature": 0.0, "avg_logprob": -0.16815280055140588, "compression_ratio": 1.7004048582995952, "no_speech_prob": 0.0006069352384656668}, {"id": 753, "seek": 207586, "start": 2087.6600000000003, "end": 2090.38, "text": " It's instead equivalent to this thing on the top right.", "tokens": [50954, 467, 311, 2602, 10344, 281, 341, 551, 322, 264, 1192, 558, 13, 51090], "temperature": 0.0, "avg_logprob": -0.16815280055140588, "compression_ratio": 1.7004048582995952, "no_speech_prob": 0.0006069352384656668}, {"id": 754, "seek": 207586, "start": 2090.38, "end": 2092.02, "text": " Sorry for that's a little confusing.", "tokens": [51090, 4919, 337, 300, 311, 257, 707, 13181, 13, 51172], "temperature": 0.0, "avg_logprob": -0.16815280055140588, "compression_ratio": 1.7004048582995952, "no_speech_prob": 0.0006069352384656668}, {"id": 755, "seek": 207586, "start": 2092.02, "end": 2093.6200000000003, "text": " This concept is called curing.", "tokens": [51172, 639, 3410, 307, 1219, 1262, 278, 13, 51252], "temperature": 0.0, "avg_logprob": -0.16815280055140588, "compression_ratio": 1.7004048582995952, "no_speech_prob": 0.0006069352384656668}, {"id": 756, "seek": 207586, "start": 2098.1400000000003, "end": 2100.7000000000003, "text": " Next we're gonna define some true and false symbols.", "tokens": [51478, 3087, 321, 434, 799, 6964, 512, 2074, 293, 7908, 16944, 13, 51606], "temperature": 0.0, "avg_logprob": -0.16815280055140588, "compression_ratio": 1.7004048582995952, "no_speech_prob": 0.0006069352384656668}, {"id": 757, "seek": 207586, "start": 2100.7000000000003, "end": 2104.54, "text": " So you'll notice we didn't have any definition of numbers.", "tokens": [51606, 407, 291, 603, 3449, 321, 994, 380, 362, 604, 7123, 295, 3547, 13, 51798], "temperature": 0.0, "avg_logprob": -0.16815280055140588, "compression_ratio": 1.7004048582995952, "no_speech_prob": 0.0006069352384656668}, {"id": 758, "seek": 210454, "start": 2105.54, "end": 2108.3, "text": " And we didn't really have any definition of types", "tokens": [50414, 400, 321, 994, 380, 534, 362, 604, 7123, 295, 3467, 50552], "temperature": 0.0, "avg_logprob": -0.13149511466905908, "compression_ratio": 1.6788617886178863, "no_speech_prob": 0.00015352285117842257}, {"id": 759, "seek": 210454, "start": 2108.3, "end": 2109.5, "text": " or booleans or anything like that.", "tokens": [50552, 420, 748, 4812, 599, 420, 1340, 411, 300, 13, 50612], "temperature": 0.0, "avg_logprob": -0.13149511466905908, "compression_ratio": 1.6788617886178863, "no_speech_prob": 0.00015352285117842257}, {"id": 760, "seek": 210454, "start": 2109.5, "end": 2112.1, "text": " We just had variables, function definition", "tokens": [50612, 492, 445, 632, 9102, 11, 2445, 7123, 50742], "temperature": 0.0, "avg_logprob": -0.13149511466905908, "compression_ratio": 1.6788617886178863, "no_speech_prob": 0.00015352285117842257}, {"id": 761, "seek": 210454, "start": 2112.1, "end": 2113.5, "text": " and function application.", "tokens": [50742, 293, 2445, 3861, 13, 50812], "temperature": 0.0, "avg_logprob": -0.13149511466905908, "compression_ratio": 1.6788617886178863, "no_speech_prob": 0.00015352285117842257}, {"id": 762, "seek": 210454, "start": 2113.5, "end": 2116.7799999999997, "text": " And so now we're adding more semantics to our language", "tokens": [50812, 400, 370, 586, 321, 434, 5127, 544, 4361, 45298, 281, 527, 2856, 50976], "temperature": 0.0, "avg_logprob": -0.13149511466905908, "compression_ratio": 1.6788617886178863, "no_speech_prob": 0.00015352285117842257}, {"id": 763, "seek": 210454, "start": 2117.94, "end": 2121.3, "text": " by defining these symbols called true and false.", "tokens": [51034, 538, 17827, 613, 16944, 1219, 2074, 293, 7908, 13, 51202], "temperature": 0.0, "avg_logprob": -0.13149511466905908, "compression_ratio": 1.6788617886178863, "no_speech_prob": 0.00015352285117842257}, {"id": 764, "seek": 210454, "start": 2121.3, "end": 2125.1, "text": " So very similar to how the number seven as a symbol", "tokens": [51202, 407, 588, 2531, 281, 577, 264, 1230, 3407, 382, 257, 5986, 51392], "temperature": 0.0, "avg_logprob": -0.13149511466905908, "compression_ratio": 1.6788617886178863, "no_speech_prob": 0.00015352285117842257}, {"id": 765, "seek": 210454, "start": 2125.1, "end": 2127.54, "text": " is defined in terms of the successor function.", "tokens": [51392, 307, 7642, 294, 2115, 295, 264, 31864, 2445, 13, 51514], "temperature": 0.0, "avg_logprob": -0.13149511466905908, "compression_ratio": 1.6788617886178863, "no_speech_prob": 0.00015352285117842257}, {"id": 766, "seek": 210454, "start": 2127.54, "end": 2132.14, "text": " Here the symbol T is defined as this function over here.", "tokens": [51514, 1692, 264, 5986, 314, 307, 7642, 382, 341, 2445, 670, 510, 13, 51744], "temperature": 0.0, "avg_logprob": -0.13149511466905908, "compression_ratio": 1.6788617886178863, "no_speech_prob": 0.00015352285117842257}, {"id": 767, "seek": 213214, "start": 2132.2999999999997, "end": 2133.42, "text": " And what this function is,", "tokens": [50372, 400, 437, 341, 2445, 307, 11, 50428], "temperature": 0.0, "avg_logprob": -0.1974027951558431, "compression_ratio": 1.7939698492462313, "no_speech_prob": 0.00016860952018760145}, {"id": 768, "seek": 213214, "start": 2133.42, "end": 2135.9, "text": " is it's function that takes in two parameters", "tokens": [50428, 307, 309, 311, 2445, 300, 2516, 294, 732, 9834, 50552], "temperature": 0.0, "avg_logprob": -0.1974027951558431, "compression_ratio": 1.7939698492462313, "no_speech_prob": 0.00016860952018760145}, {"id": 769, "seek": 213214, "start": 2135.9, "end": 2138.94, "text": " and returns the first parameter.", "tokens": [50552, 293, 11247, 264, 700, 13075, 13, 50704], "temperature": 0.0, "avg_logprob": -0.1974027951558431, "compression_ratio": 1.7939698492462313, "no_speech_prob": 0.00016860952018760145}, {"id": 770, "seek": 213214, "start": 2140.2999999999997, "end": 2142.18, "text": " And the false symbol is the function", "tokens": [50772, 400, 264, 7908, 5986, 307, 264, 2445, 50866], "temperature": 0.0, "avg_logprob": -0.1974027951558431, "compression_ratio": 1.7939698492462313, "no_speech_prob": 0.00016860952018760145}, {"id": 771, "seek": 213214, "start": 2142.18, "end": 2143.66, "text": " that also takes in two parameters,", "tokens": [50866, 300, 611, 2516, 294, 732, 9834, 11, 50940], "temperature": 0.0, "avg_logprob": -0.1974027951558431, "compression_ratio": 1.7939698492462313, "no_speech_prob": 0.00016860952018760145}, {"id": 772, "seek": 213214, "start": 2143.66, "end": 2146.54, "text": " but it returns the second symbol or second parameter.", "tokens": [50940, 457, 309, 11247, 264, 1150, 5986, 420, 1150, 13075, 13, 51084], "temperature": 0.0, "avg_logprob": -0.1974027951558431, "compression_ratio": 1.7939698492462313, "no_speech_prob": 0.00016860952018760145}, {"id": 773, "seek": 213214, "start": 2147.7799999999997, "end": 2148.62, "text": " Is it following?", "tokens": [51146, 1119, 309, 3480, 30, 51188], "temperature": 0.0, "avg_logprob": -0.1974027951558431, "compression_ratio": 1.7939698492462313, "no_speech_prob": 0.00016860952018760145}, {"id": 774, "seek": 213214, "start": 2150.8199999999997, "end": 2151.9, "text": " Cool.", "tokens": [51298, 8561, 13, 51352], "temperature": 0.0, "avg_logprob": -0.1974027951558431, "compression_ratio": 1.7939698492462313, "no_speech_prob": 0.00016860952018760145}, {"id": 775, "seek": 213214, "start": 2151.9, "end": 2154.3399999999997, "text": " So this is similar to our definition of seven.", "tokens": [51352, 407, 341, 307, 2531, 281, 527, 7123, 295, 3407, 13, 51474], "temperature": 0.0, "avg_logprob": -0.1974027951558431, "compression_ratio": 1.7939698492462313, "no_speech_prob": 0.00016860952018760145}, {"id": 776, "seek": 213214, "start": 2157.06, "end": 2160.62, "text": " And from here, now we can sort of build an end function", "tokens": [51610, 400, 490, 510, 11, 586, 321, 393, 1333, 295, 1322, 364, 917, 2445, 51788], "temperature": 0.0, "avg_logprob": -0.1974027951558431, "compression_ratio": 1.7939698492462313, "no_speech_prob": 0.00016860952018760145}, {"id": 777, "seek": 216062, "start": 2160.62, "end": 2161.7799999999997, "text": " because we have boolean values.", "tokens": [50364, 570, 321, 362, 748, 4812, 282, 4190, 13, 50422], "temperature": 0.0, "avg_logprob": -0.1494658685499622, "compression_ratio": 1.6864406779661016, "no_speech_prob": 0.00028234647470526397}, {"id": 778, "seek": 216062, "start": 2161.7799999999997, "end": 2164.18, "text": " Let's see how we can build and.", "tokens": [50422, 961, 311, 536, 577, 321, 393, 1322, 293, 13, 50542], "temperature": 0.0, "avg_logprob": -0.1494658685499622, "compression_ratio": 1.6864406779661016, "no_speech_prob": 0.00028234647470526397}, {"id": 779, "seek": 216062, "start": 2164.18, "end": 2166.94, "text": " So this is actually the definition of and", "tokens": [50542, 407, 341, 307, 767, 264, 7123, 295, 293, 50680], "temperature": 0.0, "avg_logprob": -0.1494658685499622, "compression_ratio": 1.6864406779661016, "no_speech_prob": 0.00028234647470526397}, {"id": 780, "seek": 216062, "start": 2166.94, "end": 2168.98, "text": " and we can kind of try it together.", "tokens": [50680, 293, 321, 393, 733, 295, 853, 309, 1214, 13, 50782], "temperature": 0.0, "avg_logprob": -0.1494658685499622, "compression_ratio": 1.6864406779661016, "no_speech_prob": 0.00028234647470526397}, {"id": 781, "seek": 216062, "start": 2168.98, "end": 2171.8599999999997, "text": " So and apply to true and false.", "tokens": [50782, 407, 293, 3079, 281, 2074, 293, 7908, 13, 50926], "temperature": 0.0, "avg_logprob": -0.1494658685499622, "compression_ratio": 1.6864406779661016, "no_speech_prob": 0.00028234647470526397}, {"id": 782, "seek": 216062, "start": 2171.8599999999997, "end": 2175.22, "text": " Like logically we know that this should be false.", "tokens": [50926, 1743, 38887, 321, 458, 300, 341, 820, 312, 7908, 13, 51094], "temperature": 0.0, "avg_logprob": -0.1494658685499622, "compression_ratio": 1.6864406779661016, "no_speech_prob": 0.00028234647470526397}, {"id": 783, "seek": 216062, "start": 2175.22, "end": 2176.5, "text": " So if we step through it,", "tokens": [51094, 407, 498, 321, 1823, 807, 309, 11, 51158], "temperature": 0.0, "avg_logprob": -0.1494658685499622, "compression_ratio": 1.6864406779661016, "no_speech_prob": 0.00028234647470526397}, {"id": 784, "seek": 216062, "start": 2176.5, "end": 2178.98, "text": " the first thing that we do is we replace and", "tokens": [51158, 264, 700, 551, 300, 321, 360, 307, 321, 7406, 293, 51282], "temperature": 0.0, "avg_logprob": -0.1494658685499622, "compression_ratio": 1.6864406779661016, "no_speech_prob": 0.00028234647470526397}, {"id": 785, "seek": 216062, "start": 2178.98, "end": 2181.2999999999997, "text": " with this body over here.", "tokens": [51282, 365, 341, 1772, 670, 510, 13, 51398], "temperature": 0.0, "avg_logprob": -0.1494658685499622, "compression_ratio": 1.6864406779661016, "no_speech_prob": 0.00028234647470526397}, {"id": 786, "seek": 216062, "start": 2181.2999999999997, "end": 2184.46, "text": " So lambda x, y, x, y, f, T and f, right?", "tokens": [51398, 407, 13607, 2031, 11, 288, 11, 2031, 11, 288, 11, 283, 11, 314, 293, 283, 11, 558, 30, 51556], "temperature": 0.0, "avg_logprob": -0.1494658685499622, "compression_ratio": 1.6864406779661016, "no_speech_prob": 0.00028234647470526397}, {"id": 787, "seek": 216062, "start": 2184.46, "end": 2187.46, "text": " So here we have some lambda function", "tokens": [51556, 407, 510, 321, 362, 512, 13607, 2445, 51706], "temperature": 0.0, "avg_logprob": -0.1494658685499622, "compression_ratio": 1.6864406779661016, "no_speech_prob": 0.00028234647470526397}, {"id": 788, "seek": 218746, "start": 2187.46, "end": 2190.38, "text": " and here we're denoting that we want to apply", "tokens": [50364, 293, 510, 321, 434, 1441, 17001, 300, 321, 528, 281, 3079, 50510], "temperature": 0.0, "avg_logprob": -0.16728240966796876, "compression_ratio": 1.6824034334763949, "no_speech_prob": 0.00010390088573331013}, {"id": 789, "seek": 218746, "start": 2190.38, "end": 2192.58, "text": " T to this function.", "tokens": [50510, 314, 281, 341, 2445, 13, 50620], "temperature": 0.0, "avg_logprob": -0.16728240966796876, "compression_ratio": 1.6824034334763949, "no_speech_prob": 0.00010390088573331013}, {"id": 790, "seek": 218746, "start": 2192.58, "end": 2195.5, "text": " So what we do is the first parameter is x.", "tokens": [50620, 407, 437, 321, 360, 307, 264, 700, 13075, 307, 2031, 13, 50766], "temperature": 0.0, "avg_logprob": -0.16728240966796876, "compression_ratio": 1.6824034334763949, "no_speech_prob": 0.00010390088573331013}, {"id": 791, "seek": 218746, "start": 2195.5, "end": 2197.38, "text": " And so it's in this body.", "tokens": [50766, 400, 370, 309, 311, 294, 341, 1772, 13, 50860], "temperature": 0.0, "avg_logprob": -0.16728240966796876, "compression_ratio": 1.6824034334763949, "no_speech_prob": 0.00010390088573331013}, {"id": 792, "seek": 218746, "start": 2197.38, "end": 2200.38, "text": " Every single time this x appears,", "tokens": [50860, 2048, 2167, 565, 341, 2031, 7038, 11, 51010], "temperature": 0.0, "avg_logprob": -0.16728240966796876, "compression_ratio": 1.6824034334763949, "no_speech_prob": 0.00010390088573331013}, {"id": 793, "seek": 218746, "start": 2200.38, "end": 2201.94, "text": " we want to replace it with a T.", "tokens": [51010, 321, 528, 281, 7406, 309, 365, 257, 314, 13, 51088], "temperature": 0.0, "avg_logprob": -0.16728240966796876, "compression_ratio": 1.6824034334763949, "no_speech_prob": 0.00010390088573331013}, {"id": 794, "seek": 218746, "start": 2204.1, "end": 2206.46, "text": " And so what we're left with is lambda y, T, y, f.", "tokens": [51196, 400, 370, 437, 321, 434, 1411, 365, 307, 13607, 288, 11, 314, 11, 288, 11, 283, 13, 51314], "temperature": 0.0, "avg_logprob": -0.16728240966796876, "compression_ratio": 1.6824034334763949, "no_speech_prob": 0.00010390088573331013}, {"id": 795, "seek": 218746, "start": 2206.46, "end": 2208.3, "text": " So this x has now become a T", "tokens": [51314, 407, 341, 2031, 575, 586, 1813, 257, 314, 51406], "temperature": 0.0, "avg_logprob": -0.16728240966796876, "compression_ratio": 1.6824034334763949, "no_speech_prob": 0.00010390088573331013}, {"id": 796, "seek": 218746, "start": 2208.3, "end": 2210.54, "text": " and we have one more input parameter", "tokens": [51406, 293, 321, 362, 472, 544, 4846, 13075, 51518], "temperature": 0.0, "avg_logprob": -0.16728240966796876, "compression_ratio": 1.6824034334763949, "no_speech_prob": 0.00010390088573331013}, {"id": 797, "seek": 218746, "start": 2210.54, "end": 2211.86, "text": " that we need to resolve.", "tokens": [51518, 300, 321, 643, 281, 14151, 13, 51584], "temperature": 0.0, "avg_logprob": -0.16728240966796876, "compression_ratio": 1.6824034334763949, "no_speech_prob": 0.00010390088573331013}, {"id": 798, "seek": 218746, "start": 2212.7400000000002, "end": 2215.86, "text": " And then same sort of deal, every occurrence of y.", "tokens": [51628, 400, 550, 912, 1333, 295, 2028, 11, 633, 36122, 295, 288, 13, 51784], "temperature": 0.0, "avg_logprob": -0.16728240966796876, "compression_ratio": 1.6824034334763949, "no_speech_prob": 0.00010390088573331013}, {"id": 799, "seek": 221586, "start": 2216.1, "end": 2217.82, "text": " Now we're calling this function with f.", "tokens": [50376, 823, 321, 434, 5141, 341, 2445, 365, 283, 13, 50462], "temperature": 0.0, "avg_logprob": -0.15414749862801316, "compression_ratio": 1.7510917030567685, "no_speech_prob": 0.00017949707398656756}, {"id": 800, "seek": 221586, "start": 2217.82, "end": 2221.58, "text": " Every occurrence of y, we want to replace with an f.", "tokens": [50462, 2048, 36122, 295, 288, 11, 321, 528, 281, 7406, 365, 364, 283, 13, 50650], "temperature": 0.0, "avg_logprob": -0.15414749862801316, "compression_ratio": 1.7510917030567685, "no_speech_prob": 0.00017949707398656756}, {"id": 801, "seek": 221586, "start": 2222.98, "end": 2226.1, "text": " And so we get T, f, f, okay?", "tokens": [50720, 400, 370, 321, 483, 314, 11, 283, 11, 283, 11, 1392, 30, 50876], "temperature": 0.0, "avg_logprob": -0.15414749862801316, "compression_ratio": 1.7510917030567685, "no_speech_prob": 0.00017949707398656756}, {"id": 802, "seek": 221586, "start": 2226.1, "end": 2228.7000000000003, "text": " And so as you guys remember,", "tokens": [50876, 400, 370, 382, 291, 1074, 1604, 11, 51006], "temperature": 0.0, "avg_logprob": -0.15414749862801316, "compression_ratio": 1.7510917030567685, "no_speech_prob": 0.00017949707398656756}, {"id": 803, "seek": 221586, "start": 2228.7000000000003, "end": 2232.06, "text": " true is actually defined as a function", "tokens": [51006, 2074, 307, 767, 7642, 382, 257, 2445, 51174], "temperature": 0.0, "avg_logprob": -0.15414749862801316, "compression_ratio": 1.7510917030567685, "no_speech_prob": 0.00017949707398656756}, {"id": 804, "seek": 221586, "start": 2232.06, "end": 2234.06, "text": " that takes in two input parameters", "tokens": [51174, 300, 2516, 294, 732, 4846, 9834, 51274], "temperature": 0.0, "avg_logprob": -0.15414749862801316, "compression_ratio": 1.7510917030567685, "no_speech_prob": 0.00017949707398656756}, {"id": 805, "seek": 221586, "start": 2234.06, "end": 2235.42, "text": " and returns the first one.", "tokens": [51274, 293, 11247, 264, 700, 472, 13, 51342], "temperature": 0.0, "avg_logprob": -0.15414749862801316, "compression_ratio": 1.7510917030567685, "no_speech_prob": 0.00017949707398656756}, {"id": 806, "seek": 221586, "start": 2235.42, "end": 2237.6200000000003, "text": " So in this case, it takes in two input parameters", "tokens": [51342, 407, 294, 341, 1389, 11, 309, 2516, 294, 732, 4846, 9834, 51452], "temperature": 0.0, "avg_logprob": -0.15414749862801316, "compression_ratio": 1.7510917030567685, "no_speech_prob": 0.00017949707398656756}, {"id": 807, "seek": 221586, "start": 2237.6200000000003, "end": 2240.46, "text": " and then just returns the first one, which is f.", "tokens": [51452, 293, 550, 445, 11247, 264, 700, 472, 11, 597, 307, 283, 13, 51594], "temperature": 0.0, "avg_logprob": -0.15414749862801316, "compression_ratio": 1.7510917030567685, "no_speech_prob": 0.00017949707398656756}, {"id": 808, "seek": 221586, "start": 2240.46, "end": 2243.7000000000003, "text": " So now we have some way of doing the and function.", "tokens": [51594, 407, 586, 321, 362, 512, 636, 295, 884, 264, 293, 2445, 13, 51756], "temperature": 0.0, "avg_logprob": -0.15414749862801316, "compression_ratio": 1.7510917030567685, "no_speech_prob": 0.00017949707398656756}, {"id": 809, "seek": 224370, "start": 2244.7, "end": 2248.2999999999997, "text": " All right, let's try another example and T and T.", "tokens": [50414, 1057, 558, 11, 718, 311, 853, 1071, 1365, 293, 314, 293, 314, 13, 50594], "temperature": 0.0, "avg_logprob": -0.1324059716586409, "compression_ratio": 1.8446601941747574, "no_speech_prob": 0.0001823341299314052}, {"id": 810, "seek": 224370, "start": 2248.2999999999997, "end": 2251.58, "text": " Similarly, we expand and out to this thing", "tokens": [50594, 13157, 11, 321, 5268, 293, 484, 281, 341, 551, 50758], "temperature": 0.0, "avg_logprob": -0.1324059716586409, "compression_ratio": 1.8446601941747574, "no_speech_prob": 0.0001823341299314052}, {"id": 811, "seek": 224370, "start": 2251.58, "end": 2252.98, "text": " and then we apply T to this thing,", "tokens": [50758, 293, 550, 321, 3079, 314, 281, 341, 551, 11, 50828], "temperature": 0.0, "avg_logprob": -0.1324059716586409, "compression_ratio": 1.8446601941747574, "no_speech_prob": 0.0001823341299314052}, {"id": 812, "seek": 224370, "start": 2252.98, "end": 2256.54, "text": " replace all the x's with T's and we get T, y, f.", "tokens": [50828, 7406, 439, 264, 2031, 311, 365, 314, 311, 293, 321, 483, 314, 11, 288, 11, 283, 13, 51006], "temperature": 0.0, "avg_logprob": -0.1324059716586409, "compression_ratio": 1.8446601941747574, "no_speech_prob": 0.0001823341299314052}, {"id": 813, "seek": 224370, "start": 2256.54, "end": 2258.2599999999998, "text": " And then replace all the y's with T's", "tokens": [51006, 400, 550, 7406, 439, 264, 288, 311, 365, 314, 311, 51092], "temperature": 0.0, "avg_logprob": -0.1324059716586409, "compression_ratio": 1.8446601941747574, "no_speech_prob": 0.0001823341299314052}, {"id": 814, "seek": 224370, "start": 2258.2599999999998, "end": 2260.58, "text": " and then we get T, T, f.", "tokens": [51092, 293, 550, 321, 483, 314, 11, 314, 11, 283, 13, 51208], "temperature": 0.0, "avg_logprob": -0.1324059716586409, "compression_ratio": 1.8446601941747574, "no_speech_prob": 0.0001823341299314052}, {"id": 815, "seek": 224370, "start": 2260.58, "end": 2263.2599999999998, "text": " And very similarly, T resolves", "tokens": [51208, 400, 588, 14138, 11, 314, 7923, 977, 51342], "temperature": 0.0, "avg_logprob": -0.1324059716586409, "compression_ratio": 1.8446601941747574, "no_speech_prob": 0.0001823341299314052}, {"id": 816, "seek": 224370, "start": 2263.2599999999998, "end": 2266.4199999999996, "text": " to picking the first parameter and then we get T.", "tokens": [51342, 281, 8867, 264, 700, 13075, 293, 550, 321, 483, 314, 13, 51500], "temperature": 0.0, "avg_logprob": -0.1324059716586409, "compression_ratio": 1.8446601941747574, "no_speech_prob": 0.0001823341299314052}, {"id": 817, "seek": 224370, "start": 2267.3799999999997, "end": 2271.98, "text": " So with just variables, functions and function application,", "tokens": [51548, 407, 365, 445, 9102, 11, 6828, 293, 2445, 3861, 11, 51778], "temperature": 0.0, "avg_logprob": -0.1324059716586409, "compression_ratio": 1.8446601941747574, "no_speech_prob": 0.0001823341299314052}, {"id": 818, "seek": 227198, "start": 2271.98, "end": 2274.94, "text": " all of a sudden now we have like Boolean logic.", "tokens": [50364, 439, 295, 257, 3990, 586, 321, 362, 411, 23351, 28499, 9952, 13, 50512], "temperature": 0.0, "avg_logprob": -0.17262246675580462, "compression_ratio": 1.7356828193832599, "no_speech_prob": 0.00031008056248538196}, {"id": 819, "seek": 227198, "start": 2274.94, "end": 2276.7400000000002, "text": " You can imagine how we can implement", "tokens": [50512, 509, 393, 3811, 577, 321, 393, 4445, 50602], "temperature": 0.0, "avg_logprob": -0.17262246675580462, "compression_ratio": 1.7356828193832599, "no_speech_prob": 0.00031008056248538196}, {"id": 820, "seek": 227198, "start": 2277.82, "end": 2280.06, "text": " or an XOR and so on, right?", "tokens": [50656, 420, 364, 1783, 2483, 293, 370, 322, 11, 558, 30, 50768], "temperature": 0.0, "avg_logprob": -0.17262246675580462, "compression_ratio": 1.7356828193832599, "no_speech_prob": 0.00031008056248538196}, {"id": 821, "seek": 227198, "start": 2281.06, "end": 2283.26, "text": " So this is super unintuitive to me.", "tokens": [50818, 407, 341, 307, 1687, 29466, 48314, 281, 385, 13, 50928], "temperature": 0.0, "avg_logprob": -0.17262246675580462, "compression_ratio": 1.7356828193832599, "no_speech_prob": 0.00031008056248538196}, {"id": 822, "seek": 227198, "start": 2283.26, "end": 2288.26, "text": " Like the concept of defining true and false", "tokens": [50928, 1743, 264, 3410, 295, 17827, 2074, 293, 7908, 51178], "temperature": 0.0, "avg_logprob": -0.17262246675580462, "compression_ratio": 1.7356828193832599, "no_speech_prob": 0.00031008056248538196}, {"id": 823, "seek": 227198, "start": 2288.3, "end": 2291.46, "text": " as these functions, like a true is actually a function", "tokens": [51180, 382, 613, 6828, 11, 411, 257, 2074, 307, 767, 257, 2445, 51338], "temperature": 0.0, "avg_logprob": -0.17262246675580462, "compression_ratio": 1.7356828193832599, "no_speech_prob": 0.00031008056248538196}, {"id": 824, "seek": 227198, "start": 2291.46, "end": 2292.7400000000002, "text": " which takes in two parameters", "tokens": [51338, 597, 2516, 294, 732, 9834, 51402], "temperature": 0.0, "avg_logprob": -0.17262246675580462, "compression_ratio": 1.7356828193832599, "no_speech_prob": 0.00031008056248538196}, {"id": 825, "seek": 227198, "start": 2292.7400000000002, "end": 2294.06, "text": " and false is also a function", "tokens": [51402, 293, 7908, 307, 611, 257, 2445, 51468], "temperature": 0.0, "avg_logprob": -0.17262246675580462, "compression_ratio": 1.7356828193832599, "no_speech_prob": 0.00031008056248538196}, {"id": 826, "seek": 227198, "start": 2294.06, "end": 2296.06, "text": " which takes in two other parameters.", "tokens": [51468, 597, 2516, 294, 732, 661, 9834, 13, 51568], "temperature": 0.0, "avg_logprob": -0.17262246675580462, "compression_ratio": 1.7356828193832599, "no_speech_prob": 0.00031008056248538196}, {"id": 827, "seek": 227198, "start": 2296.06, "end": 2300.18, "text": " And from there, building other functions like and,", "tokens": [51568, 400, 490, 456, 11, 2390, 661, 6828, 411, 293, 11, 51774], "temperature": 0.0, "avg_logprob": -0.17262246675580462, "compression_ratio": 1.7356828193832599, "no_speech_prob": 0.00031008056248538196}, {"id": 828, "seek": 230018, "start": 2300.18, "end": 2305.18, "text": " we can now do logical, like all of Boolean logic, right?", "tokens": [50364, 321, 393, 586, 360, 14978, 11, 411, 439, 295, 23351, 28499, 9952, 11, 558, 30, 50614], "temperature": 0.0, "avg_logprob": -0.1423843502998352, "compression_ratio": 1.4768518518518519, "no_speech_prob": 0.00013131035666447133}, {"id": 829, "seek": 230018, "start": 2308.1, "end": 2308.94, "text": " Cool.", "tokens": [50760, 8561, 13, 50802], "temperature": 0.0, "avg_logprob": -0.1423843502998352, "compression_ratio": 1.4768518518518519, "no_speech_prob": 0.00013131035666447133}, {"id": 830, "seek": 230018, "start": 2310.46, "end": 2313.74, "text": " This is the hardest slide, so you'll have to deal with me.", "tokens": [50878, 639, 307, 264, 13158, 4137, 11, 370, 291, 603, 362, 281, 2028, 365, 385, 13, 51042], "temperature": 0.0, "avg_logprob": -0.1423843502998352, "compression_ratio": 1.4768518518518519, "no_speech_prob": 0.00013131035666447133}, {"id": 831, "seek": 230018, "start": 2315.3399999999997, "end": 2316.66, "text": " I'm gonna talk about the y-combinator.", "tokens": [51122, 286, 478, 799, 751, 466, 264, 288, 12, 1112, 13496, 1639, 13, 51188], "temperature": 0.0, "avg_logprob": -0.1423843502998352, "compression_ratio": 1.4768518518518519, "no_speech_prob": 0.00013131035666447133}, {"id": 832, "seek": 230018, "start": 2316.66, "end": 2320.2999999999997, "text": " So it turns out that many of you guys know about yc", "tokens": [51188, 407, 309, 4523, 484, 300, 867, 295, 291, 1074, 458, 466, 288, 66, 51370], "temperature": 0.0, "avg_logprob": -0.1423843502998352, "compression_ratio": 1.4768518518518519, "no_speech_prob": 0.00013131035666447133}, {"id": 833, "seek": 230018, "start": 2320.2999999999997, "end": 2324.62, "text": " up in the Bay and it was essentially founded", "tokens": [51370, 493, 294, 264, 7840, 293, 309, 390, 4476, 13234, 51586], "temperature": 0.0, "avg_logprob": -0.1423843502998352, "compression_ratio": 1.4768518518518519, "no_speech_prob": 0.00013131035666447133}, {"id": 834, "seek": 230018, "start": 2324.62, "end": 2328.58, "text": " by a computer scientist who got the name", "tokens": [51586, 538, 257, 3820, 12662, 567, 658, 264, 1315, 51784], "temperature": 0.0, "avg_logprob": -0.1423843502998352, "compression_ratio": 1.4768518518518519, "no_speech_prob": 0.00013131035666447133}, {"id": 835, "seek": 230018, "start": 2328.58, "end": 2329.4199999999996, "text": " from this principle.", "tokens": [51784, 490, 341, 8665, 13, 51826], "temperature": 0.0, "avg_logprob": -0.1423843502998352, "compression_ratio": 1.4768518518518519, "no_speech_prob": 0.00013131035666447133}, {"id": 836, "seek": 232942, "start": 2329.42, "end": 2332.54, "text": " It's actually a Lambda calculus construct", "tokens": [50364, 467, 311, 767, 257, 45691, 33400, 7690, 50520], "temperature": 0.0, "avg_logprob": -0.12965754458778783, "compression_ratio": 1.6425531914893616, "no_speech_prob": 0.00015353482740465552}, {"id": 837, "seek": 232942, "start": 2332.54, "end": 2333.98, "text": " and it looks like this.", "tokens": [50520, 293, 309, 1542, 411, 341, 13, 50592], "temperature": 0.0, "avg_logprob": -0.12965754458778783, "compression_ratio": 1.6425531914893616, "no_speech_prob": 0.00015353482740465552}, {"id": 838, "seek": 232942, "start": 2333.98, "end": 2335.2200000000003, "text": " And we're gonna go really slow", "tokens": [50592, 400, 321, 434, 799, 352, 534, 2964, 50654], "temperature": 0.0, "avg_logprob": -0.12965754458778783, "compression_ratio": 1.6425531914893616, "no_speech_prob": 0.00015353482740465552}, {"id": 839, "seek": 232942, "start": 2335.2200000000003, "end": 2337.66, "text": " and we'll go through it together, right?", "tokens": [50654, 293, 321, 603, 352, 807, 309, 1214, 11, 558, 30, 50776], "temperature": 0.0, "avg_logprob": -0.12965754458778783, "compression_ratio": 1.6425531914893616, "no_speech_prob": 0.00015353482740465552}, {"id": 840, "seek": 232942, "start": 2337.66, "end": 2340.82, "text": " The first thing to notice is that y is just a function", "tokens": [50776, 440, 700, 551, 281, 3449, 307, 300, 288, 307, 445, 257, 2445, 50934], "temperature": 0.0, "avg_logprob": -0.12965754458778783, "compression_ratio": 1.6425531914893616, "no_speech_prob": 0.00015353482740465552}, {"id": 841, "seek": 232942, "start": 2340.82, "end": 2343.78, "text": " that takes in some input parameter y", "tokens": [50934, 300, 2516, 294, 512, 4846, 13075, 288, 51082], "temperature": 0.0, "avg_logprob": -0.12965754458778783, "compression_ratio": 1.6425531914893616, "no_speech_prob": 0.00015353482740465552}, {"id": 842, "seek": 232942, "start": 2343.78, "end": 2346.06, "text": " and it returns something, right?", "tokens": [51082, 293, 309, 11247, 746, 11, 558, 30, 51196], "temperature": 0.0, "avg_logprob": -0.12965754458778783, "compression_ratio": 1.6425531914893616, "no_speech_prob": 0.00015353482740465552}, {"id": 843, "seek": 232942, "start": 2346.06, "end": 2347.5, "text": " So nothing too crazy.", "tokens": [51196, 407, 1825, 886, 3219, 13, 51268], "temperature": 0.0, "avg_logprob": -0.12965754458778783, "compression_ratio": 1.6425531914893616, "no_speech_prob": 0.00015353482740465552}, {"id": 844, "seek": 232942, "start": 2348.7400000000002, "end": 2351.42, "text": " What we can do is apply y,", "tokens": [51330, 708, 321, 393, 360, 307, 3079, 288, 11, 51464], "temperature": 0.0, "avg_logprob": -0.12965754458778783, "compression_ratio": 1.6425531914893616, "no_speech_prob": 0.00015353482740465552}, {"id": 845, "seek": 232942, "start": 2351.42, "end": 2354.02, "text": " so let's say we have this function r, right?", "tokens": [51464, 370, 718, 311, 584, 321, 362, 341, 2445, 367, 11, 558, 30, 51594], "temperature": 0.0, "avg_logprob": -0.12965754458778783, "compression_ratio": 1.6425531914893616, "no_speech_prob": 0.00015353482740465552}, {"id": 846, "seek": 232942, "start": 2354.02, "end": 2357.64, "text": " We wanna apply y to r, right?", "tokens": [51594, 492, 1948, 3079, 288, 281, 367, 11, 558, 30, 51775], "temperature": 0.0, "avg_logprob": -0.12965754458778783, "compression_ratio": 1.6425531914893616, "no_speech_prob": 0.00015353482740465552}, {"id": 847, "seek": 235764, "start": 2357.64, "end": 2359.64, "text": " So in order to apply y to r,", "tokens": [50364, 407, 294, 1668, 281, 3079, 288, 281, 367, 11, 50464], "temperature": 0.0, "avg_logprob": -0.12271395596590909, "compression_ratio": 1.5586854460093897, "no_speech_prob": 7.36709262127988e-05}, {"id": 848, "seek": 235764, "start": 2359.64, "end": 2363.7599999999998, "text": " what we need to do is every occurrence of this yellow y", "tokens": [50464, 437, 321, 643, 281, 360, 307, 633, 36122, 295, 341, 5566, 288, 50670], "temperature": 0.0, "avg_logprob": -0.12271395596590909, "compression_ratio": 1.5586854460093897, "no_speech_prob": 7.36709262127988e-05}, {"id": 849, "seek": 235764, "start": 2363.7599999999998, "end": 2366.52, "text": " inside this body, we need to replace", "tokens": [50670, 1854, 341, 1772, 11, 321, 643, 281, 7406, 50808], "temperature": 0.0, "avg_logprob": -0.12271395596590909, "compression_ratio": 1.5586854460093897, "no_speech_prob": 7.36709262127988e-05}, {"id": 850, "seek": 235764, "start": 2366.52, "end": 2370.12, "text": " with our input parameter r, okay?", "tokens": [50808, 365, 527, 4846, 13075, 367, 11, 1392, 30, 50988], "temperature": 0.0, "avg_logprob": -0.12271395596590909, "compression_ratio": 1.5586854460093897, "no_speech_prob": 7.36709262127988e-05}, {"id": 851, "seek": 235764, "start": 2370.12, "end": 2373.64, "text": " So all the yellow y's have now just become blue r's.", "tokens": [50988, 407, 439, 264, 5566, 288, 311, 362, 586, 445, 1813, 3344, 367, 311, 13, 51164], "temperature": 0.0, "avg_logprob": -0.12271395596590909, "compression_ratio": 1.5586854460093897, "no_speech_prob": 7.36709262127988e-05}, {"id": 852, "seek": 235764, "start": 2375.08, "end": 2376.7599999999998, "text": " Sound good?", "tokens": [51236, 14673, 665, 30, 51320], "temperature": 0.0, "avg_logprob": -0.12271395596590909, "compression_ratio": 1.5586854460093897, "no_speech_prob": 7.36709262127988e-05}, {"id": 853, "seek": 235764, "start": 2376.7599999999998, "end": 2379.2799999999997, "text": " Okay, now if you look at this body,", "tokens": [51320, 1033, 11, 586, 498, 291, 574, 412, 341, 1772, 11, 51446], "temperature": 0.0, "avg_logprob": -0.12271395596590909, "compression_ratio": 1.5586854460093897, "no_speech_prob": 7.36709262127988e-05}, {"id": 854, "seek": 235764, "start": 2379.2799999999997, "end": 2381.0, "text": " we can actually reduce it further.", "tokens": [51446, 321, 393, 767, 5407, 309, 3052, 13, 51532], "temperature": 0.0, "avg_logprob": -0.12271395596590909, "compression_ratio": 1.5586854460093897, "no_speech_prob": 7.36709262127988e-05}, {"id": 855, "seek": 235764, "start": 2381.0, "end": 2383.24, "text": " This first piece over here is a function", "tokens": [51532, 639, 700, 2522, 670, 510, 307, 257, 2445, 51644], "temperature": 0.0, "avg_logprob": -0.12271395596590909, "compression_ratio": 1.5586854460093897, "no_speech_prob": 7.36709262127988e-05}, {"id": 856, "seek": 238324, "start": 2384.2, "end": 2388.9199999999996, "text": " and the second piece over here is a value", "tokens": [50412, 293, 264, 1150, 2522, 670, 510, 307, 257, 2158, 50648], "temperature": 0.0, "avg_logprob": -0.1818959134296306, "compression_ratio": 1.7897435897435898, "no_speech_prob": 0.00016344441974069923}, {"id": 857, "seek": 238324, "start": 2388.9199999999996, "end": 2390.7599999999998, "text": " that we can bind to this function", "tokens": [50648, 300, 321, 393, 14786, 281, 341, 2445, 50740], "temperature": 0.0, "avg_logprob": -0.1818959134296306, "compression_ratio": 1.7897435897435898, "no_speech_prob": 0.00016344441974069923}, {"id": 858, "seek": 238324, "start": 2390.7599999999998, "end": 2394.2, "text": " or we can call this function with this value on the right.", "tokens": [50740, 420, 321, 393, 818, 341, 2445, 365, 341, 2158, 322, 264, 558, 13, 50912], "temperature": 0.0, "avg_logprob": -0.1818959134296306, "compression_ratio": 1.7897435897435898, "no_speech_prob": 0.00016344441974069923}, {"id": 859, "seek": 238324, "start": 2394.2, "end": 2395.12, "text": " Okay?", "tokens": [50912, 1033, 30, 50958], "temperature": 0.0, "avg_logprob": -0.1818959134296306, "compression_ratio": 1.7897435897435898, "no_speech_prob": 0.00016344441974069923}, {"id": 860, "seek": 238324, "start": 2395.12, "end": 2398.08, "text": " So what we're gonna do is this is the value on the right", "tokens": [50958, 407, 437, 321, 434, 799, 360, 307, 341, 307, 264, 2158, 322, 264, 558, 51106], "temperature": 0.0, "avg_logprob": -0.1818959134296306, "compression_ratio": 1.7897435897435898, "no_speech_prob": 0.00016344441974069923}, {"id": 861, "seek": 238324, "start": 2398.08, "end": 2401.52, "text": " and if you look at this body, r, open print, x, x,", "tokens": [51106, 293, 498, 291, 574, 412, 341, 1772, 11, 367, 11, 1269, 4482, 11, 2031, 11, 2031, 11, 51278], "temperature": 0.0, "avg_logprob": -0.1818959134296306, "compression_ratio": 1.7897435897435898, "no_speech_prob": 0.00016344441974069923}, {"id": 862, "seek": 238324, "start": 2401.52, "end": 2405.52, "text": " close print, every occurrence of this magenta x,", "tokens": [51278, 1998, 4482, 11, 633, 36122, 295, 341, 2258, 8938, 2031, 11, 51478], "temperature": 0.0, "avg_logprob": -0.1818959134296306, "compression_ratio": 1.7897435897435898, "no_speech_prob": 0.00016344441974069923}, {"id": 863, "seek": 238324, "start": 2405.52, "end": 2409.64, "text": " we're gonna replace with this body over here, okay?", "tokens": [51478, 321, 434, 799, 7406, 365, 341, 1772, 670, 510, 11, 1392, 30, 51684], "temperature": 0.0, "avg_logprob": -0.1818959134296306, "compression_ratio": 1.7897435897435898, "no_speech_prob": 0.00016344441974069923}, {"id": 864, "seek": 240964, "start": 2410.52, "end": 2414.64, "text": " So r, x, x, has now been replaced with r,", "tokens": [50408, 407, 367, 11, 2031, 11, 2031, 11, 575, 586, 668, 10772, 365, 367, 11, 50614], "temperature": 0.0, "avg_logprob": -0.38813920815785724, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.00010388928058091551}, {"id": 865, "seek": 240964, "start": 2414.64, "end": 2418.3199999999997, "text": " this body, this body, okay?", "tokens": [50614, 341, 1772, 11, 341, 1772, 11, 1392, 30, 50798], "temperature": 0.0, "avg_logprob": -0.38813920815785724, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.00010388928058091551}, {"id": 866, "seek": 240964, "start": 2418.3199999999997, "end": 2420.64, "text": " We haven't done anything like too crazy", "tokens": [50798, 492, 2378, 380, 1096, 1340, 411, 886, 3219, 50914], "temperature": 0.0, "avg_logprob": -0.38813920815785724, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.00010388928058091551}, {"id": 867, "seek": 240964, "start": 2421.64, "end": 2425.2, "text": " and now if you'll notice like this line over here", "tokens": [50964, 293, 586, 498, 291, 603, 3449, 411, 341, 1622, 670, 510, 51142], "temperature": 0.0, "avg_logprob": -0.38813920815785724, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.00010388928058091551}, {"id": 868, "seek": 240964, "start": 2425.2, "end": 2429.2, "text": " and the thing inside the parentheses of this r,", "tokens": [51142, 293, 264, 551, 1854, 264, 34153, 295, 341, 367, 11, 51342], "temperature": 0.0, "avg_logprob": -0.38813920815785724, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.00010388928058091551}, {"id": 869, "seek": 240964, "start": 2429.2, "end": 2431.04, "text": " they're actually the same thing.", "tokens": [51342, 436, 434, 767, 264, 912, 551, 13, 51434], "temperature": 0.0, "avg_logprob": -0.38813920815785724, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.00010388928058091551}, {"id": 870, "seek": 240964, "start": 2432.04, "end": 2433.3599999999997, "text": " You guys see it?", "tokens": [51484, 509, 1074, 536, 309, 30, 51550], "temperature": 0.0, "avg_logprob": -0.38813920815785724, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.00010388928058091551}, {"id": 871, "seek": 240964, "start": 2433.3599999999997, "end": 2435.7999999999997, "text": " Here you have magenta values", "tokens": [51550, 1692, 291, 362, 2258, 8938, 4190, 51672], "temperature": 0.0, "avg_logprob": -0.38813920815785724, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.00010388928058091551}, {"id": 872, "seek": 240964, "start": 2435.7999999999997, "end": 2437.64, "text": " and here you have purple values.", "tokens": [51672, 293, 510, 291, 362, 9656, 4190, 13, 51764], "temperature": 0.0, "avg_logprob": -0.38813920815785724, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.00010388928058091551}, {"id": 873, "seek": 243764, "start": 2438.56, "end": 2442.24, "text": " And the only difference is that this row", "tokens": [50410, 400, 264, 787, 2649, 307, 300, 341, 5386, 50594], "temperature": 0.0, "avg_logprob": -0.364703386679463, "compression_ratio": 1.5706521739130435, "no_speech_prob": 0.0001910655846586451}, {"id": 874, "seek": 243764, "start": 2442.24, "end": 2445.6, "text": " has like an enclosed r, do you guys see that?", "tokens": [50594, 575, 411, 364, 42089, 367, 11, 360, 291, 1074, 536, 300, 30, 50762], "temperature": 0.0, "avg_logprob": -0.364703386679463, "compression_ratio": 1.5706521739130435, "no_speech_prob": 0.0001910655846586451}, {"id": 875, "seek": 243764, "start": 2446.96, "end": 2450.6, "text": " Okay, so what we can do is take this yr", "tokens": [50830, 1033, 11, 370, 437, 321, 393, 360, 307, 747, 341, 288, 81, 51012], "temperature": 0.0, "avg_logprob": -0.364703386679463, "compression_ratio": 1.5706521739130435, "no_speech_prob": 0.0001910655846586451}, {"id": 876, "seek": 243764, "start": 2450.6, "end": 2453.12, "text": " because these yr and this thing on the right", "tokens": [51012, 570, 613, 288, 81, 293, 341, 551, 322, 264, 558, 51138], "temperature": 0.0, "avg_logprob": -0.364703386679463, "compression_ratio": 1.5706521739130435, "no_speech_prob": 0.0001910655846586451}, {"id": 877, "seek": 243764, "start": 2453.12, "end": 2455.4, "text": " are equal to each other, so we can say", "tokens": [51138, 366, 2681, 281, 1184, 661, 11, 370, 321, 393, 584, 51252], "temperature": 0.0, "avg_logprob": -0.364703386679463, "compression_ratio": 1.5706521739130435, "no_speech_prob": 0.0001910655846586451}, {"id": 878, "seek": 243764, "start": 2456.6, "end": 2461.6, "text": " yr is r of yr and it's not readily clear", "tokens": [51312, 288, 81, 307, 367, 295, 288, 81, 293, 309, 311, 406, 26336, 1850, 51562], "temperature": 0.0, "avg_logprob": -0.364703386679463, "compression_ratio": 1.5706521739130435, "no_speech_prob": 0.0001910655846586451}, {"id": 879, "seek": 243764, "start": 2463.8799999999997, "end": 2465.7599999999998, "text": " like why this is actually interesting", "tokens": [51676, 411, 983, 341, 307, 767, 1880, 51770], "temperature": 0.0, "avg_logprob": -0.364703386679463, "compression_ratio": 1.5706521739130435, "no_speech_prob": 0.0001910655846586451}, {"id": 880, "seek": 246576, "start": 2466.76, "end": 2471.5200000000004, "text": " or useful, but if you kind of sit down", "tokens": [50414, 420, 4420, 11, 457, 498, 291, 733, 295, 1394, 760, 50652], "temperature": 0.0, "avg_logprob": -0.17503609908254522, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.00024150550598278642}, {"id": 881, "seek": 246576, "start": 2471.5200000000004, "end": 2473.92, "text": " and think about it, what we've really done", "tokens": [50652, 293, 519, 466, 309, 11, 437, 321, 600, 534, 1096, 50772], "temperature": 0.0, "avg_logprob": -0.17503609908254522, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.00024150550598278642}, {"id": 882, "seek": 246576, "start": 2473.92, "end": 2477.92, "text": " is define yr in terms of itself.", "tokens": [50772, 307, 6964, 288, 81, 294, 2115, 295, 2564, 13, 50972], "temperature": 0.0, "avg_logprob": -0.17503609908254522, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.00024150550598278642}, {"id": 883, "seek": 246576, "start": 2478.84, "end": 2483.0800000000004, "text": " So we've created like a recursive definition right here.", "tokens": [51018, 407, 321, 600, 2942, 411, 257, 20560, 488, 7123, 558, 510, 13, 51230], "temperature": 0.0, "avg_logprob": -0.17503609908254522, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.00024150550598278642}, {"id": 884, "seek": 246576, "start": 2483.0800000000004, "end": 2486.4, "text": " And so what's actually happened is that this y-combinator", "tokens": [51230, 400, 370, 437, 311, 767, 2011, 307, 300, 341, 288, 12, 1112, 13496, 1639, 51396], "temperature": 0.0, "avg_logprob": -0.17503609908254522, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.00024150550598278642}, {"id": 885, "seek": 246576, "start": 2486.4, "end": 2489.4, "text": " is this thing over here allows you to take", "tokens": [51396, 307, 341, 551, 670, 510, 4045, 291, 281, 747, 51546], "temperature": 0.0, "avg_logprob": -0.17503609908254522, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.00024150550598278642}, {"id": 886, "seek": 246576, "start": 2489.4, "end": 2494.4, "text": " like a non-recursive concept and create recursion from nothing.", "tokens": [51546, 411, 257, 2107, 12, 13867, 2156, 488, 3410, 293, 1884, 20560, 313, 490, 1825, 13, 51796], "temperature": 0.0, "avg_logprob": -0.17503609908254522, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.00024150550598278642}, {"id": 887, "seek": 249440, "start": 2494.4, "end": 2497.08, "text": " So we just have variables, function definitions", "tokens": [50364, 407, 321, 445, 362, 9102, 11, 2445, 21988, 50498], "temperature": 0.0, "avg_logprob": -0.12251666675914417, "compression_ratio": 1.743801652892562, "no_speech_prob": 5.919915565755218e-05}, {"id": 888, "seek": 249440, "start": 2497.08, "end": 2498.76, "text": " and function application", "tokens": [50498, 293, 2445, 3861, 50582], "temperature": 0.0, "avg_logprob": -0.12251666675914417, "compression_ratio": 1.743801652892562, "no_speech_prob": 5.919915565755218e-05}, {"id": 889, "seek": 249440, "start": 2498.76, "end": 2501.48, "text": " and from those things we're able to create recursion.", "tokens": [50582, 293, 490, 729, 721, 321, 434, 1075, 281, 1884, 20560, 313, 13, 50718], "temperature": 0.0, "avg_logprob": -0.12251666675914417, "compression_ratio": 1.743801652892562, "no_speech_prob": 5.919915565755218e-05}, {"id": 890, "seek": 249440, "start": 2503.04, "end": 2506.1600000000003, "text": " So this is like a crazy construct to me.", "tokens": [50796, 407, 341, 307, 411, 257, 3219, 7690, 281, 385, 13, 50952], "temperature": 0.0, "avg_logprob": -0.12251666675914417, "compression_ratio": 1.743801652892562, "no_speech_prob": 5.919915565755218e-05}, {"id": 891, "seek": 249440, "start": 2506.1600000000003, "end": 2507.8, "text": " Like we've created booleans", "tokens": [50952, 1743, 321, 600, 2942, 748, 4812, 599, 51034], "temperature": 0.0, "avg_logprob": -0.12251666675914417, "compression_ratio": 1.743801652892562, "no_speech_prob": 5.919915565755218e-05}, {"id": 892, "seek": 249440, "start": 2507.8, "end": 2509.32, "text": " and therefore we've created conditionals", "tokens": [51034, 293, 4412, 321, 600, 2942, 4188, 1124, 51110], "temperature": 0.0, "avg_logprob": -0.12251666675914417, "compression_ratio": 1.743801652892562, "no_speech_prob": 5.919915565755218e-05}, {"id": 893, "seek": 249440, "start": 2509.32, "end": 2513.92, "text": " and from the same sort of raw axioms", "tokens": [51110, 293, 490, 264, 912, 1333, 295, 8936, 6360, 72, 4785, 51340], "temperature": 0.0, "avg_logprob": -0.12251666675914417, "compression_ratio": 1.743801652892562, "no_speech_prob": 5.919915565755218e-05}, {"id": 894, "seek": 249440, "start": 2513.92, "end": 2515.28, "text": " we've created recursion.", "tokens": [51340, 321, 600, 2942, 20560, 313, 13, 51408], "temperature": 0.0, "avg_logprob": -0.12251666675914417, "compression_ratio": 1.743801652892562, "no_speech_prob": 5.919915565755218e-05}, {"id": 895, "seek": 249440, "start": 2516.36, "end": 2518.88, "text": " Now, I encourage you guys to spend some time", "tokens": [51462, 823, 11, 286, 5373, 291, 1074, 281, 3496, 512, 565, 51588], "temperature": 0.0, "avg_logprob": -0.12251666675914417, "compression_ratio": 1.743801652892562, "no_speech_prob": 5.919915565755218e-05}, {"id": 896, "seek": 249440, "start": 2518.88, "end": 2520.8, "text": " if you're interested like really examining this", "tokens": [51588, 498, 291, 434, 3102, 411, 534, 34662, 341, 51684], "temperature": 0.0, "avg_logprob": -0.12251666675914417, "compression_ratio": 1.743801652892562, "no_speech_prob": 5.919915565755218e-05}, {"id": 897, "seek": 249440, "start": 2520.8, "end": 2523.08, "text": " and coming to an understanding", "tokens": [51684, 293, 1348, 281, 364, 3701, 51798], "temperature": 0.0, "avg_logprob": -0.12251666675914417, "compression_ratio": 1.743801652892562, "no_speech_prob": 5.919915565755218e-05}, {"id": 898, "seek": 252308, "start": 2523.08, "end": 2525.08, "text": " of why it's actually interesting and profound.", "tokens": [50364, 295, 983, 309, 311, 767, 1880, 293, 14382, 13, 50464], "temperature": 0.0, "avg_logprob": -0.12434022767203194, "compression_ratio": 1.6616541353383458, "no_speech_prob": 0.00033517321571707726}, {"id": 899, "seek": 252308, "start": 2525.08, "end": 2527.48, "text": " But for now just take it on faith", "tokens": [50464, 583, 337, 586, 445, 747, 309, 322, 4522, 50584], "temperature": 0.0, "avg_logprob": -0.12434022767203194, "compression_ratio": 1.6616541353383458, "no_speech_prob": 0.00033517321571707726}, {"id": 900, "seek": 252308, "start": 2527.48, "end": 2530.12, "text": " that we're able to create recursion from nothing", "tokens": [50584, 300, 321, 434, 1075, 281, 1884, 20560, 313, 490, 1825, 50716], "temperature": 0.0, "avg_logprob": -0.12434022767203194, "compression_ratio": 1.6616541353383458, "no_speech_prob": 0.00033517321571707726}, {"id": 901, "seek": 252308, "start": 2530.12, "end": 2531.88, "text": " and that's what the compelling aspect", "tokens": [50716, 293, 300, 311, 437, 264, 20050, 4171, 50804], "temperature": 0.0, "avg_logprob": -0.12434022767203194, "compression_ratio": 1.6616541353383458, "no_speech_prob": 0.00033517321571707726}, {"id": 902, "seek": 252308, "start": 2531.88, "end": 2533.2799999999997, "text": " of the y-combinator is.", "tokens": [50804, 295, 264, 288, 12, 1112, 13496, 1639, 307, 13, 50874], "temperature": 0.0, "avg_logprob": -0.12434022767203194, "compression_ratio": 1.6616541353383458, "no_speech_prob": 0.00033517321571707726}, {"id": 903, "seek": 252308, "start": 2535.68, "end": 2539.2799999999997, "text": " Okay, the church Turing thesis.", "tokens": [50994, 1033, 11, 264, 4128, 314, 1345, 22288, 13, 51174], "temperature": 0.0, "avg_logprob": -0.12434022767203194, "compression_ratio": 1.6616541353383458, "no_speech_prob": 0.00033517321571707726}, {"id": 904, "seek": 252308, "start": 2539.2799999999997, "end": 2543.04, "text": " So we have these two independent models of computation", "tokens": [51174, 407, 321, 362, 613, 732, 6695, 5245, 295, 24903, 51362], "temperature": 0.0, "avg_logprob": -0.12434022767203194, "compression_ratio": 1.6616541353383458, "no_speech_prob": 0.00033517321571707726}, {"id": 905, "seek": 252308, "start": 2543.04, "end": 2544.72, "text": " the Turing machine and Lambda calculus", "tokens": [51362, 264, 314, 1345, 3479, 293, 45691, 33400, 51446], "temperature": 0.0, "avg_logprob": -0.12434022767203194, "compression_ratio": 1.6616541353383458, "no_speech_prob": 0.00033517321571707726}, {"id": 906, "seek": 252308, "start": 2544.72, "end": 2546.72, "text": " invented at exactly the same time.", "tokens": [51446, 14479, 412, 2293, 264, 912, 565, 13, 51546], "temperature": 0.0, "avg_logprob": -0.12434022767203194, "compression_ratio": 1.6616541353383458, "no_speech_prob": 0.00033517321571707726}, {"id": 907, "seek": 252308, "start": 2546.72, "end": 2550.16, "text": " And eventually these guys got together", "tokens": [51546, 400, 4728, 613, 1074, 658, 1214, 51718], "temperature": 0.0, "avg_logprob": -0.12434022767203194, "compression_ratio": 1.6616541353383458, "no_speech_prob": 0.00033517321571707726}, {"id": 908, "seek": 252308, "start": 2550.16, "end": 2552.56, "text": " and they realized that their models of computation", "tokens": [51718, 293, 436, 5334, 300, 641, 5245, 295, 24903, 51838], "temperature": 0.0, "avg_logprob": -0.12434022767203194, "compression_ratio": 1.6616541353383458, "no_speech_prob": 0.00033517321571707726}, {"id": 909, "seek": 255256, "start": 2552.56, "end": 2554.04, "text": " were actually equivalent.", "tokens": [50364, 645, 767, 10344, 13, 50438], "temperature": 0.0, "avg_logprob": -0.0989710318075644, "compression_ratio": 1.8046875, "no_speech_prob": 0.00019704989972524345}, {"id": 910, "seek": 255256, "start": 2554.04, "end": 2557.04, "text": " So originally when church was defining Lambda calculus", "tokens": [50438, 407, 7993, 562, 4128, 390, 17827, 45691, 33400, 50588], "temperature": 0.0, "avg_logprob": -0.0989710318075644, "compression_ratio": 1.8046875, "no_speech_prob": 0.00019704989972524345}, {"id": 911, "seek": 255256, "start": 2557.04, "end": 2560.16, "text": " he didn't define it in terms of turning machines", "tokens": [50588, 415, 994, 380, 6964, 309, 294, 2115, 295, 6246, 8379, 50744], "temperature": 0.0, "avg_logprob": -0.0989710318075644, "compression_ratio": 1.8046875, "no_speech_prob": 0.00019704989972524345}, {"id": 912, "seek": 255256, "start": 2560.16, "end": 2562.24, "text": " and Turing when he was defining turning machines", "tokens": [50744, 293, 314, 1345, 562, 415, 390, 17827, 6246, 8379, 50848], "temperature": 0.0, "avg_logprob": -0.0989710318075644, "compression_ratio": 1.8046875, "no_speech_prob": 0.00019704989972524345}, {"id": 913, "seek": 255256, "start": 2562.24, "end": 2564.44, "text": " he didn't define it in terms of Lambda calculus", "tokens": [50848, 415, 994, 380, 6964, 309, 294, 2115, 295, 45691, 33400, 50958], "temperature": 0.0, "avg_logprob": -0.0989710318075644, "compression_ratio": 1.8046875, "no_speech_prob": 0.00019704989972524345}, {"id": 914, "seek": 255256, "start": 2564.44, "end": 2566.7599999999998, "text": " they were sort of separate axiom towers.", "tokens": [50958, 436, 645, 1333, 295, 4994, 6360, 72, 298, 25045, 13, 51074], "temperature": 0.0, "avg_logprob": -0.0989710318075644, "compression_ratio": 1.8046875, "no_speech_prob": 0.00019704989972524345}, {"id": 915, "seek": 255256, "start": 2566.7599999999998, "end": 2568.72, "text": " And so these guys got together and they said,", "tokens": [51074, 400, 370, 613, 1074, 658, 1214, 293, 436, 848, 11, 51172], "temperature": 0.0, "avg_logprob": -0.0989710318075644, "compression_ratio": 1.8046875, "no_speech_prob": 0.00019704989972524345}, {"id": 916, "seek": 255256, "start": 2568.72, "end": 2573.44, "text": " wait, we have two different models of computation", "tokens": [51172, 1699, 11, 321, 362, 732, 819, 5245, 295, 24903, 51408], "temperature": 0.0, "avg_logprob": -0.0989710318075644, "compression_ratio": 1.8046875, "no_speech_prob": 0.00019704989972524345}, {"id": 917, "seek": 255256, "start": 2573.44, "end": 2576.64, "text": " that we've proven independently to be sufficient", "tokens": [51408, 300, 321, 600, 12785, 21761, 281, 312, 11563, 51568], "temperature": 0.0, "avg_logprob": -0.0989710318075644, "compression_ratio": 1.8046875, "no_speech_prob": 0.00019704989972524345}, {"id": 918, "seek": 255256, "start": 2576.64, "end": 2579.6, "text": " to be able to compute anything that's computable.", "tokens": [51568, 281, 312, 1075, 281, 14722, 1340, 300, 311, 2807, 712, 13, 51716], "temperature": 0.0, "avg_logprob": -0.0989710318075644, "compression_ratio": 1.8046875, "no_speech_prob": 0.00019704989972524345}, {"id": 919, "seek": 257960, "start": 2579.68, "end": 2583.36, "text": " Is it true that our models are equivalent to each other?", "tokens": [50368, 1119, 309, 2074, 300, 527, 5245, 366, 10344, 281, 1184, 661, 30, 50552], "temperature": 0.0, "avg_logprob": -0.1810392899946733, "compression_ratio": 1.8576642335766422, "no_speech_prob": 0.00010717240365920588}, {"id": 920, "seek": 257960, "start": 2583.36, "end": 2584.3199999999997, "text": " Was the question.", "tokens": [50552, 3027, 264, 1168, 13, 50600], "temperature": 0.0, "avg_logprob": -0.1810392899946733, "compression_ratio": 1.8576642335766422, "no_speech_prob": 0.00010717240365920588}, {"id": 921, "seek": 257960, "start": 2584.3199999999997, "end": 2585.64, "text": " And so they published this paper", "tokens": [50600, 400, 370, 436, 6572, 341, 3035, 50666], "temperature": 0.0, "avg_logprob": -0.1810392899946733, "compression_ratio": 1.8576642335766422, "no_speech_prob": 0.00010717240365920588}, {"id": 922, "seek": 257960, "start": 2585.64, "end": 2587.44, "text": " called the church Turing thesis.", "tokens": [50666, 1219, 264, 4128, 314, 1345, 22288, 13, 50756], "temperature": 0.0, "avg_logprob": -0.1810392899946733, "compression_ratio": 1.8576642335766422, "no_speech_prob": 0.00010717240365920588}, {"id": 923, "seek": 257960, "start": 2587.44, "end": 2589.96, "text": " And it turns out that all Turing machines", "tokens": [50756, 400, 309, 4523, 484, 300, 439, 314, 1345, 8379, 50882], "temperature": 0.0, "avg_logprob": -0.1810392899946733, "compression_ratio": 1.8576642335766422, "no_speech_prob": 0.00010717240365920588}, {"id": 924, "seek": 257960, "start": 2589.96, "end": 2592.24, "text": " can be rewritten as Lambda expressions", "tokens": [50882, 393, 312, 319, 26859, 382, 45691, 15277, 50996], "temperature": 0.0, "avg_logprob": -0.1810392899946733, "compression_ratio": 1.8576642335766422, "no_speech_prob": 0.00010717240365920588}, {"id": 925, "seek": 257960, "start": 2592.24, "end": 2594.2799999999997, "text": " and all Lambda expressions can be rewritten", "tokens": [50996, 293, 439, 45691, 15277, 393, 312, 319, 26859, 51098], "temperature": 0.0, "avg_logprob": -0.1810392899946733, "compression_ratio": 1.8576642335766422, "no_speech_prob": 0.00010717240365920588}, {"id": 926, "seek": 257960, "start": 2594.2799999999997, "end": 2595.8399999999997, "text": " as Turing machines.", "tokens": [51098, 382, 314, 1345, 8379, 13, 51176], "temperature": 0.0, "avg_logprob": -0.1810392899946733, "compression_ratio": 1.8576642335766422, "no_speech_prob": 0.00010717240365920588}, {"id": 927, "seek": 257960, "start": 2595.8399999999997, "end": 2597.24, "text": " And we didn't really talk about", "tokens": [51176, 400, 321, 994, 380, 534, 751, 466, 51246], "temperature": 0.0, "avg_logprob": -0.1810392899946733, "compression_ratio": 1.8576642335766422, "no_speech_prob": 0.00010717240365920588}, {"id": 928, "seek": 257960, "start": 2597.24, "end": 2598.7599999999998, "text": " Godel's recursive functions", "tokens": [51246, 1265, 338, 311, 20560, 488, 6828, 51322], "temperature": 0.0, "avg_logprob": -0.1810392899946733, "compression_ratio": 1.8576642335766422, "no_speech_prob": 0.00010717240365920588}, {"id": 929, "seek": 257960, "start": 2598.7599999999998, "end": 2602.0, "text": " but it turns out that those are also equivalent.", "tokens": [51322, 457, 309, 4523, 484, 300, 729, 366, 611, 10344, 13, 51484], "temperature": 0.0, "avg_logprob": -0.1810392899946733, "compression_ratio": 1.8576642335766422, "no_speech_prob": 0.00010717240365920588}, {"id": 930, "seek": 257960, "start": 2602.0, "end": 2604.2799999999997, "text": " And so the conclusion here is that Lambda calculus", "tokens": [51484, 400, 370, 264, 10063, 510, 307, 300, 45691, 33400, 51598], "temperature": 0.0, "avg_logprob": -0.1810392899946733, "compression_ratio": 1.8576642335766422, "no_speech_prob": 0.00010717240365920588}, {"id": 931, "seek": 257960, "start": 2604.2799999999997, "end": 2605.16, "text": " is turning complete.", "tokens": [51598, 307, 6246, 3566, 13, 51642], "temperature": 0.0, "avg_logprob": -0.1810392899946733, "compression_ratio": 1.8576642335766422, "no_speech_prob": 0.00010717240365920588}, {"id": 932, "seek": 257960, "start": 2607.2, "end": 2609.08, "text": " Without any notions of explicit recursion,", "tokens": [51744, 9129, 604, 35799, 295, 13691, 20560, 313, 11, 51838], "temperature": 0.0, "avg_logprob": -0.1810392899946733, "compression_ratio": 1.8576642335766422, "no_speech_prob": 0.00010717240365920588}, {"id": 933, "seek": 260908, "start": 2609.08, "end": 2610.56, "text": " conditional state, et cetera.", "tokens": [50364, 27708, 1785, 11, 1030, 11458, 13, 50438], "temperature": 0.0, "avg_logprob": -0.15002235412597656, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.00011956836533499882}, {"id": 934, "seek": 260908, "start": 2612.2, "end": 2613.84, "text": " So all we need is variables, functions", "tokens": [50520, 407, 439, 321, 643, 307, 9102, 11, 6828, 50602], "temperature": 0.0, "avg_logprob": -0.15002235412597656, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.00011956836533499882}, {"id": 935, "seek": 260908, "start": 2613.84, "end": 2615.04, "text": " and function application.", "tokens": [50602, 293, 2445, 3861, 13, 50662], "temperature": 0.0, "avg_logprob": -0.15002235412597656, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.00011956836533499882}, {"id": 936, "seek": 260908, "start": 2615.04, "end": 2617.7599999999998, "text": " So let's go into the peculiarities of Lambda calculus", "tokens": [50662, 407, 718, 311, 352, 666, 264, 27149, 1088, 295, 45691, 33400, 50798], "temperature": 0.0, "avg_logprob": -0.15002235412597656, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.00011956836533499882}, {"id": 937, "seek": 260908, "start": 2617.7599999999998, "end": 2620.48, "text": " because as software engineers we're sort of,", "tokens": [50798, 570, 382, 4722, 11955, 321, 434, 1333, 295, 11, 50934], "temperature": 0.0, "avg_logprob": -0.15002235412597656, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.00011956836533499882}, {"id": 938, "seek": 260908, "start": 2622.48, "end": 2625.04, "text": " we can think of the Turing machine as this thing", "tokens": [51034, 321, 393, 519, 295, 264, 314, 1345, 3479, 382, 341, 551, 51162], "temperature": 0.0, "avg_logprob": -0.15002235412597656, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.00011956836533499882}, {"id": 939, "seek": 260908, "start": 2625.04, "end": 2626.52, "text": " that's very similar to a computer.", "tokens": [51162, 300, 311, 588, 2531, 281, 257, 3820, 13, 51236], "temperature": 0.0, "avg_logprob": -0.15002235412597656, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.00011956836533499882}, {"id": 940, "seek": 260908, "start": 2626.52, "end": 2628.3199999999997, "text": " And I'm gonna get to that in a moment", "tokens": [51236, 400, 286, 478, 799, 483, 281, 300, 294, 257, 1623, 51326], "temperature": 0.0, "avg_logprob": -0.15002235412597656, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.00011956836533499882}, {"id": 941, "seek": 260908, "start": 2628.3199999999997, "end": 2632.44, "text": " but it's not really clear what this Lambda calculus thing is", "tokens": [51326, 457, 309, 311, 406, 534, 1850, 437, 341, 45691, 33400, 551, 307, 51532], "temperature": 0.0, "avg_logprob": -0.15002235412597656, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.00011956836533499882}, {"id": 942, "seek": 260908, "start": 2632.44, "end": 2634.2, "text": " and how to do computation with it.", "tokens": [51532, 293, 577, 281, 360, 24903, 365, 309, 13, 51620], "temperature": 0.0, "avg_logprob": -0.15002235412597656, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.00011956836533499882}, {"id": 943, "seek": 260908, "start": 2635.1, "end": 2638.6, "text": " So the first idea is that there's no notion of global state.", "tokens": [51665, 407, 264, 700, 1558, 307, 300, 456, 311, 572, 10710, 295, 4338, 1785, 13, 51840], "temperature": 0.0, "avg_logprob": -0.15002235412597656, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.00011956836533499882}, {"id": 944, "seek": 263860, "start": 2638.6, "end": 2639.52, "text": " There's no tape.", "tokens": [50364, 821, 311, 572, 7314, 13, 50410], "temperature": 0.0, "avg_logprob": -0.1350618196570355, "compression_ratio": 1.7679324894514767, "no_speech_prob": 0.00014650022785644978}, {"id": 945, "seek": 263860, "start": 2641.4, "end": 2644.4, "text": " All you have is the input arguments to your functions.", "tokens": [50504, 1057, 291, 362, 307, 264, 4846, 12869, 281, 428, 6828, 13, 50654], "temperature": 0.0, "avg_logprob": -0.1350618196570355, "compression_ratio": 1.7679324894514767, "no_speech_prob": 0.00014650022785644978}, {"id": 946, "seek": 263860, "start": 2644.4, "end": 2647.56, "text": " That's the only semblance of state that you have.", "tokens": [50654, 663, 311, 264, 787, 20775, 37271, 295, 1785, 300, 291, 362, 13, 50812], "temperature": 0.0, "avg_logprob": -0.1350618196570355, "compression_ratio": 1.7679324894514767, "no_speech_prob": 0.00014650022785644978}, {"id": 947, "seek": 263860, "start": 2647.56, "end": 2650.0, "text": " The second idea is all functions are pure.", "tokens": [50812, 440, 1150, 1558, 307, 439, 6828, 366, 6075, 13, 50934], "temperature": 0.0, "avg_logprob": -0.1350618196570355, "compression_ratio": 1.7679324894514767, "no_speech_prob": 0.00014650022785644978}, {"id": 948, "seek": 263860, "start": 2650.0, "end": 2654.4, "text": " So purity is sort of this mathematical concept", "tokens": [50934, 407, 34382, 307, 1333, 295, 341, 18894, 3410, 51154], "temperature": 0.0, "avg_logprob": -0.1350618196570355, "compression_ratio": 1.7679324894514767, "no_speech_prob": 0.00014650022785644978}, {"id": 949, "seek": 263860, "start": 2654.4, "end": 2656.36, "text": " which is to say that it's a math function", "tokens": [51154, 597, 307, 281, 584, 300, 309, 311, 257, 5221, 2445, 51252], "temperature": 0.0, "avg_logprob": -0.1350618196570355, "compression_ratio": 1.7679324894514767, "no_speech_prob": 0.00014650022785644978}, {"id": 950, "seek": 263860, "start": 2656.36, "end": 2658.48, "text": " in that for any given input,", "tokens": [51252, 294, 300, 337, 604, 2212, 4846, 11, 51358], "temperature": 0.0, "avg_logprob": -0.1350618196570355, "compression_ratio": 1.7679324894514767, "no_speech_prob": 0.00014650022785644978}, {"id": 951, "seek": 263860, "start": 2658.48, "end": 2661.74, "text": " it always, a function always returns the same output.", "tokens": [51358, 309, 1009, 11, 257, 2445, 1009, 11247, 264, 912, 5598, 13, 51521], "temperature": 0.0, "avg_logprob": -0.1350618196570355, "compression_ratio": 1.7679324894514767, "no_speech_prob": 0.00014650022785644978}, {"id": 952, "seek": 263860, "start": 2661.74, "end": 2664.04, "text": " So if you have a function for example,", "tokens": [51521, 407, 498, 291, 362, 257, 2445, 337, 1365, 11, 51636], "temperature": 0.0, "avg_logprob": -0.1350618196570355, "compression_ratio": 1.7679324894514767, "no_speech_prob": 0.00014650022785644978}, {"id": 953, "seek": 263860, "start": 2664.04, "end": 2667.2799999999997, "text": " f of x equals x squared for an input three,", "tokens": [51636, 283, 295, 2031, 6915, 2031, 8889, 337, 364, 4846, 1045, 11, 51798], "temperature": 0.0, "avg_logprob": -0.1350618196570355, "compression_ratio": 1.7679324894514767, "no_speech_prob": 0.00014650022785644978}, {"id": 954, "seek": 266728, "start": 2667.28, "end": 2668.84, "text": " call it this function with three,", "tokens": [50364, 818, 309, 341, 2445, 365, 1045, 11, 50442], "temperature": 0.0, "avg_logprob": -0.13019351959228515, "compression_ratio": 1.6133333333333333, "no_speech_prob": 4.683482620748691e-05}, {"id": 955, "seek": 266728, "start": 2668.84, "end": 2671.7200000000003, "text": " it's always gonna return nine no matter what.", "tokens": [50442, 309, 311, 1009, 799, 2736, 4949, 572, 1871, 437, 13, 50586], "temperature": 0.0, "avg_logprob": -0.13019351959228515, "compression_ratio": 1.6133333333333333, "no_speech_prob": 4.683482620748691e-05}, {"id": 956, "seek": 266728, "start": 2671.7200000000003, "end": 2674.6400000000003, "text": " So all functions in Lambda calculus are pure.", "tokens": [50586, 407, 439, 6828, 294, 45691, 33400, 366, 6075, 13, 50732], "temperature": 0.0, "avg_logprob": -0.13019351959228515, "compression_ratio": 1.6133333333333333, "no_speech_prob": 4.683482620748691e-05}, {"id": 957, "seek": 266728, "start": 2676.48, "end": 2677.96, "text": " All values are immutable.", "tokens": [50824, 1057, 4190, 366, 3397, 32148, 13, 50898], "temperature": 0.0, "avg_logprob": -0.13019351959228515, "compression_ratio": 1.6133333333333333, "no_speech_prob": 4.683482620748691e-05}, {"id": 958, "seek": 266728, "start": 2677.96, "end": 2682.2200000000003, "text": " So you can't modify an input parameter.", "tokens": [50898, 407, 291, 393, 380, 16927, 364, 4846, 13075, 13, 51111], "temperature": 0.0, "avg_logprob": -0.13019351959228515, "compression_ratio": 1.6133333333333333, "no_speech_prob": 4.683482620748691e-05}, {"id": 959, "seek": 266728, "start": 2685.34, "end": 2687.2000000000003, "text": " But what you can do is generate a new value", "tokens": [51267, 583, 437, 291, 393, 360, 307, 8460, 257, 777, 2158, 51360], "temperature": 0.0, "avg_logprob": -0.13019351959228515, "compression_ratio": 1.6133333333333333, "no_speech_prob": 4.683482620748691e-05}, {"id": 960, "seek": 266728, "start": 2687.2000000000003, "end": 2688.28, "text": " from an existing one.", "tokens": [51360, 490, 364, 6741, 472, 13, 51414], "temperature": 0.0, "avg_logprob": -0.13019351959228515, "compression_ratio": 1.6133333333333333, "no_speech_prob": 4.683482620748691e-05}, {"id": 961, "seek": 266728, "start": 2689.92, "end": 2691.88, "text": " And there's also no loops.", "tokens": [51496, 400, 456, 311, 611, 572, 16121, 13, 51594], "temperature": 0.0, "avg_logprob": -0.13019351959228515, "compression_ratio": 1.6133333333333333, "no_speech_prob": 4.683482620748691e-05}, {"id": 962, "seek": 266728, "start": 2691.88, "end": 2693.6400000000003, "text": " So you can't really iterate on things", "tokens": [51594, 407, 291, 393, 380, 534, 44497, 322, 721, 51682], "temperature": 0.0, "avg_logprob": -0.13019351959228515, "compression_ratio": 1.6133333333333333, "no_speech_prob": 4.683482620748691e-05}, {"id": 963, "seek": 266728, "start": 2693.6400000000003, "end": 2695.36, "text": " but the way we actually handle iteration", "tokens": [51682, 457, 264, 636, 321, 767, 4813, 24784, 51768], "temperature": 0.0, "avg_logprob": -0.13019351959228515, "compression_ratio": 1.6133333333333333, "no_speech_prob": 4.683482620748691e-05}, {"id": 964, "seek": 269536, "start": 2695.4, "end": 2699.76, "text": " in Lambda calculus like structures is through recursion.", "tokens": [50366, 294, 45691, 33400, 411, 9227, 307, 807, 20560, 313, 13, 50584], "temperature": 0.0, "avg_logprob": -0.12106944636294717, "compression_ratio": 1.7210300429184548, "no_speech_prob": 0.0001535088667878881}, {"id": 965, "seek": 269536, "start": 2701.7200000000003, "end": 2704.6, "text": " And then functions are your unit of composition.", "tokens": [50682, 400, 550, 6828, 366, 428, 4985, 295, 12686, 13, 50826], "temperature": 0.0, "avg_logprob": -0.12106944636294717, "compression_ratio": 1.7210300429184548, "no_speech_prob": 0.0001535088667878881}, {"id": 966, "seek": 269536, "start": 2704.6, "end": 2707.3, "text": " And the way you compose functions", "tokens": [50826, 400, 264, 636, 291, 35925, 6828, 50961], "temperature": 0.0, "avg_logprob": -0.12106944636294717, "compression_ratio": 1.7210300429184548, "no_speech_prob": 0.0001535088667878881}, {"id": 967, "seek": 269536, "start": 2707.3, "end": 2710.7400000000002, "text": " is sort of passing them as parameters to each other.", "tokens": [50961, 307, 1333, 295, 8437, 552, 382, 9834, 281, 1184, 661, 13, 51133], "temperature": 0.0, "avg_logprob": -0.12106944636294717, "compression_ratio": 1.7210300429184548, "no_speech_prob": 0.0001535088667878881}, {"id": 968, "seek": 269536, "start": 2710.7400000000002, "end": 2714.6400000000003, "text": " And because of the nature of Lambda calculus,", "tokens": [51133, 400, 570, 295, 264, 3687, 295, 45691, 33400, 11, 51328], "temperature": 0.0, "avg_logprob": -0.12106944636294717, "compression_ratio": 1.7210300429184548, "no_speech_prob": 0.0001535088667878881}, {"id": 969, "seek": 269536, "start": 2714.6400000000003, "end": 2717.6400000000003, "text": " you don't have to reason about this global state.", "tokens": [51328, 291, 500, 380, 362, 281, 1778, 466, 341, 4338, 1785, 13, 51478], "temperature": 0.0, "avg_logprob": -0.12106944636294717, "compression_ratio": 1.7210300429184548, "no_speech_prob": 0.0001535088667878881}, {"id": 970, "seek": 269536, "start": 2717.6400000000003, "end": 2720.36, "text": " So when you're combining two simple functions together,", "tokens": [51478, 407, 562, 291, 434, 21928, 732, 2199, 6828, 1214, 11, 51614], "temperature": 0.0, "avg_logprob": -0.12106944636294717, "compression_ratio": 1.7210300429184548, "no_speech_prob": 0.0001535088667878881}, {"id": 971, "seek": 269536, "start": 2720.36, "end": 2725.28, "text": " all you need to know is what the consuming function does", "tokens": [51614, 439, 291, 643, 281, 458, 307, 437, 264, 19867, 2445, 775, 51860], "temperature": 0.0, "avg_logprob": -0.12106944636294717, "compression_ratio": 1.7210300429184548, "no_speech_prob": 0.0001535088667878881}, {"id": 972, "seek": 272528, "start": 2725.32, "end": 2726.44, "text": " with the input.", "tokens": [50366, 365, 264, 4846, 13, 50422], "temperature": 0.0, "avg_logprob": -0.15322137451171874, "compression_ratio": 1.6642335766423357, "no_speech_prob": 0.00015353775233961642}, {"id": 973, "seek": 272528, "start": 2726.44, "end": 2728.36, "text": " You don't have to reason about side effects", "tokens": [50422, 509, 500, 380, 362, 281, 1778, 466, 1252, 5065, 50518], "temperature": 0.0, "avg_logprob": -0.15322137451171874, "compression_ratio": 1.6642335766423357, "no_speech_prob": 0.00015353775233961642}, {"id": 974, "seek": 272528, "start": 2728.36, "end": 2729.88, "text": " or any other properties.", "tokens": [50518, 420, 604, 661, 7221, 13, 50594], "temperature": 0.0, "avg_logprob": -0.15322137451171874, "compression_ratio": 1.6642335766423357, "no_speech_prob": 0.00015353775233961642}, {"id": 975, "seek": 272528, "start": 2729.88, "end": 2733.48, "text": " So my claim over here is that because there's no global state,", "tokens": [50594, 407, 452, 3932, 670, 510, 307, 300, 570, 456, 311, 572, 4338, 1785, 11, 50774], "temperature": 0.0, "avg_logprob": -0.15322137451171874, "compression_ratio": 1.6642335766423357, "no_speech_prob": 0.00015353775233961642}, {"id": 976, "seek": 272528, "start": 2733.48, "end": 2735.52, "text": " when you compose two things together,", "tokens": [50774, 562, 291, 35925, 732, 721, 1214, 11, 50876], "temperature": 0.0, "avg_logprob": -0.15322137451171874, "compression_ratio": 1.6642335766423357, "no_speech_prob": 0.00015353775233961642}, {"id": 977, "seek": 272528, "start": 2735.52, "end": 2737.2400000000002, "text": " you can be sure that that composition", "tokens": [50876, 291, 393, 312, 988, 300, 300, 12686, 50962], "temperature": 0.0, "avg_logprob": -0.15322137451171874, "compression_ratio": 1.6642335766423357, "no_speech_prob": 0.00015353775233961642}, {"id": 978, "seek": 272528, "start": 2737.2400000000002, "end": 2738.48, "text": " is like really, really solid", "tokens": [50962, 307, 411, 534, 11, 534, 5100, 51024], "temperature": 0.0, "avg_logprob": -0.15322137451171874, "compression_ratio": 1.6642335766423357, "no_speech_prob": 0.00015353775233961642}, {"id": 979, "seek": 272528, "start": 2738.48, "end": 2740.2000000000003, "text": " and it's not gonna result in bugs.", "tokens": [51024, 293, 309, 311, 406, 799, 1874, 294, 15120, 13, 51110], "temperature": 0.0, "avg_logprob": -0.15322137451171874, "compression_ratio": 1.6642335766423357, "no_speech_prob": 0.00015353775233961642}, {"id": 980, "seek": 272528, "start": 2742.88, "end": 2744.6800000000003, "text": " Okay, the two towers.", "tokens": [51244, 1033, 11, 264, 732, 25045, 13, 51334], "temperature": 0.0, "avg_logprob": -0.15322137451171874, "compression_ratio": 1.6642335766423357, "no_speech_prob": 0.00015353775233961642}, {"id": 981, "seek": 272528, "start": 2745.92, "end": 2748.28, "text": " So we have turning machines on one hand", "tokens": [51396, 407, 321, 362, 6246, 8379, 322, 472, 1011, 51514], "temperature": 0.0, "avg_logprob": -0.15322137451171874, "compression_ratio": 1.6642335766423357, "no_speech_prob": 0.00015353775233961642}, {"id": 982, "seek": 272528, "start": 2748.28, "end": 2750.1200000000003, "text": " and Lambda calculus on the other hand.", "tokens": [51514, 293, 45691, 33400, 322, 264, 661, 1011, 13, 51606], "temperature": 0.0, "avg_logprob": -0.15322137451171874, "compression_ratio": 1.6642335766423357, "no_speech_prob": 0.00015353775233961642}, {"id": 983, "seek": 272528, "start": 2751.0800000000004, "end": 2752.36, "text": " And I've not so subtly drawn", "tokens": [51654, 400, 286, 600, 406, 370, 7257, 356, 10117, 51718], "temperature": 0.0, "avg_logprob": -0.15322137451171874, "compression_ratio": 1.6642335766423357, "no_speech_prob": 0.00015353775233961642}, {"id": 984, "seek": 272528, "start": 2752.36, "end": 2754.32, "text": " this Lambda calculus tower is perfect.", "tokens": [51718, 341, 45691, 33400, 10567, 307, 2176, 13, 51816], "temperature": 0.0, "avg_logprob": -0.15322137451171874, "compression_ratio": 1.6642335766423357, "no_speech_prob": 0.00015353775233961642}, {"id": 985, "seek": 275528, "start": 2756.28, "end": 2759.1200000000003, "text": " But first we need to make a brief aside.", "tokens": [50414, 583, 700, 321, 643, 281, 652, 257, 5353, 7359, 13, 50556], "temperature": 0.0, "avg_logprob": -0.16722804424809476, "compression_ratio": 1.5483870967741935, "no_speech_prob": 6.60334771964699e-05}, {"id": 986, "seek": 275528, "start": 2760.44, "end": 2762.96, "text": " In the 1940s, so less than a decade", "tokens": [50622, 682, 264, 24158, 82, 11, 370, 1570, 813, 257, 10378, 50748], "temperature": 0.0, "avg_logprob": -0.16722804424809476, "compression_ratio": 1.5483870967741935, "no_speech_prob": 6.60334771964699e-05}, {"id": 987, "seek": 275528, "start": 2762.96, "end": 2765.6000000000004, "text": " after turning machines came out,", "tokens": [50748, 934, 6246, 8379, 1361, 484, 11, 50880], "temperature": 0.0, "avg_logprob": -0.16722804424809476, "compression_ratio": 1.5483870967741935, "no_speech_prob": 6.60334771964699e-05}, {"id": 988, "seek": 275528, "start": 2766.6800000000003, "end": 2769.52, "text": " people started to ask the question of,", "tokens": [50934, 561, 1409, 281, 1029, 264, 1168, 295, 11, 51076], "temperature": 0.0, "avg_logprob": -0.16722804424809476, "compression_ratio": 1.5483870967741935, "no_speech_prob": 6.60334771964699e-05}, {"id": 989, "seek": 275528, "start": 2769.52, "end": 2772.1000000000004, "text": " okay, wait, this is great as a mathematical construct,", "tokens": [51076, 1392, 11, 1699, 11, 341, 307, 869, 382, 257, 18894, 7690, 11, 51205], "temperature": 0.0, "avg_logprob": -0.16722804424809476, "compression_ratio": 1.5483870967741935, "no_speech_prob": 6.60334771964699e-05}, {"id": 990, "seek": 275528, "start": 2772.1000000000004, "end": 2776.4, "text": " but ultimately like I need to compute real stuff for my job.", "tokens": [51205, 457, 6284, 411, 286, 643, 281, 14722, 957, 1507, 337, 452, 1691, 13, 51420], "temperature": 0.0, "avg_logprob": -0.16722804424809476, "compression_ratio": 1.5483870967741935, "no_speech_prob": 6.60334771964699e-05}, {"id": 991, "seek": 275528, "start": 2776.4, "end": 2779.1800000000003, "text": " And so can we actually build a physical machine", "tokens": [51420, 400, 370, 393, 321, 767, 1322, 257, 4001, 3479, 51559], "temperature": 0.0, "avg_logprob": -0.16722804424809476, "compression_ratio": 1.5483870967741935, "no_speech_prob": 6.60334771964699e-05}, {"id": 992, "seek": 275528, "start": 2779.1800000000003, "end": 2781.0400000000004, "text": " that does computation?", "tokens": [51559, 300, 775, 24903, 30, 51652], "temperature": 0.0, "avg_logprob": -0.16722804424809476, "compression_ratio": 1.5483870967741935, "no_speech_prob": 6.60334771964699e-05}, {"id": 993, "seek": 275528, "start": 2781.0400000000004, "end": 2784.0800000000004, "text": " And one of the core people involved in this work", "tokens": [51652, 400, 472, 295, 264, 4965, 561, 3288, 294, 341, 589, 51804], "temperature": 0.0, "avg_logprob": -0.16722804424809476, "compression_ratio": 1.5483870967741935, "no_speech_prob": 6.60334771964699e-05}, {"id": 994, "seek": 278408, "start": 2784.08, "end": 2785.7999999999997, "text": " was this guy named John Von Neumann.", "tokens": [50364, 390, 341, 2146, 4926, 2619, 20700, 1734, 449, 969, 13, 50450], "temperature": 0.0, "avg_logprob": -0.15892785336790966, "compression_ratio": 1.654275092936803, "no_speech_prob": 0.0008421746315434575}, {"id": 995, "seek": 278408, "start": 2785.7999999999997, "end": 2787.7999999999997, "text": " He was a computer scientist.", "tokens": [50450, 634, 390, 257, 3820, 12662, 13, 50550], "temperature": 0.0, "avg_logprob": -0.15892785336790966, "compression_ratio": 1.654275092936803, "no_speech_prob": 0.0008421746315434575}, {"id": 996, "seek": 278408, "start": 2787.7999999999997, "end": 2789.44, "text": " And he proposed this model", "tokens": [50550, 400, 415, 10348, 341, 2316, 50632], "temperature": 0.0, "avg_logprob": -0.15892785336790966, "compression_ratio": 1.654275092936803, "no_speech_prob": 0.0008421746315434575}, {"id": 997, "seek": 278408, "start": 2789.44, "end": 2791.72, "text": " for how we should build computing machines.", "tokens": [50632, 337, 577, 321, 820, 1322, 15866, 8379, 13, 50746], "temperature": 0.0, "avg_logprob": -0.15892785336790966, "compression_ratio": 1.654275092936803, "no_speech_prob": 0.0008421746315434575}, {"id": 998, "seek": 278408, "start": 2791.72, "end": 2795.16, "text": " And what he started with was this concept of memory,", "tokens": [50746, 400, 437, 415, 1409, 365, 390, 341, 3410, 295, 4675, 11, 50918], "temperature": 0.0, "avg_logprob": -0.15892785336790966, "compression_ratio": 1.654275092936803, "no_speech_prob": 0.0008421746315434575}, {"id": 999, "seek": 278408, "start": 2795.16, "end": 2798.68, "text": " the RAM, and memory is basically just like a Turing tape", "tokens": [50918, 264, 14561, 11, 293, 4675, 307, 1936, 445, 411, 257, 314, 1345, 7314, 51094], "temperature": 0.0, "avg_logprob": -0.15892785336790966, "compression_ratio": 1.654275092936803, "no_speech_prob": 0.0008421746315434575}, {"id": 1000, "seek": 278408, "start": 2798.68, "end": 2801.08, "text": " in that it's put up into these cells", "tokens": [51094, 294, 300, 309, 311, 829, 493, 666, 613, 5438, 51214], "temperature": 0.0, "avg_logprob": -0.15892785336790966, "compression_ratio": 1.654275092936803, "no_speech_prob": 0.0008421746315434575}, {"id": 1001, "seek": 278408, "start": 2801.08, "end": 2802.8199999999997, "text": " and the cells can contain values.", "tokens": [51214, 293, 264, 5438, 393, 5304, 4190, 13, 51301], "temperature": 0.0, "avg_logprob": -0.15892785336790966, "compression_ratio": 1.654275092936803, "no_speech_prob": 0.0008421746315434575}, {"id": 1002, "seek": 278408, "start": 2803.96, "end": 2807.0, "text": " And then he proposed this thing called a CPU,", "tokens": [51358, 400, 550, 415, 10348, 341, 551, 1219, 257, 13199, 11, 51510], "temperature": 0.0, "avg_logprob": -0.15892785336790966, "compression_ratio": 1.654275092936803, "no_speech_prob": 0.0008421746315434575}, {"id": 1003, "seek": 278408, "start": 2807.0, "end": 2809.36, "text": " which is composed of two components essentially,", "tokens": [51510, 597, 307, 18204, 295, 732, 6677, 4476, 11, 51628], "temperature": 0.0, "avg_logprob": -0.15892785336790966, "compression_ratio": 1.654275092936803, "no_speech_prob": 0.0008421746315434575}, {"id": 1004, "seek": 278408, "start": 2809.36, "end": 2811.84, "text": " a control unit and a logic unit.", "tokens": [51628, 257, 1969, 4985, 293, 257, 9952, 4985, 13, 51752], "temperature": 0.0, "avg_logprob": -0.15892785336790966, "compression_ratio": 1.654275092936803, "no_speech_prob": 0.0008421746315434575}, {"id": 1005, "seek": 281184, "start": 2812.1200000000003, "end": 2814.1800000000003, "text": " And the CPU interacts with the memory", "tokens": [50378, 400, 264, 13199, 43582, 365, 264, 4675, 50481], "temperature": 0.0, "avg_logprob": -0.11034759023915167, "compression_ratio": 1.75, "no_speech_prob": 0.0001739746512612328}, {"id": 1006, "seek": 281184, "start": 2814.1800000000003, "end": 2817.04, "text": " by reading stuff from it and writing stuff to it.", "tokens": [50481, 538, 3760, 1507, 490, 309, 293, 3579, 1507, 281, 309, 13, 50624], "temperature": 0.0, "avg_logprob": -0.11034759023915167, "compression_ratio": 1.75, "no_speech_prob": 0.0001739746512612328}, {"id": 1007, "seek": 281184, "start": 2818.08, "end": 2822.0, "text": " And Von Neumann proposed like a small set of instructions.", "tokens": [50676, 400, 20700, 1734, 449, 969, 10348, 411, 257, 1359, 992, 295, 9415, 13, 50872], "temperature": 0.0, "avg_logprob": -0.11034759023915167, "compression_ratio": 1.75, "no_speech_prob": 0.0001739746512612328}, {"id": 1008, "seek": 281184, "start": 2822.0, "end": 2825.4, "text": " You can load a value X from the memory cell", "tokens": [50872, 509, 393, 3677, 257, 2158, 1783, 490, 264, 4675, 2815, 51042], "temperature": 0.0, "avg_logprob": -0.11034759023915167, "compression_ratio": 1.75, "no_speech_prob": 0.0001739746512612328}, {"id": 1009, "seek": 281184, "start": 2825.4, "end": 2827.32, "text": " at the location P.", "tokens": [51042, 412, 264, 4914, 430, 13, 51138], "temperature": 0.0, "avg_logprob": -0.11034759023915167, "compression_ratio": 1.75, "no_speech_prob": 0.0001739746512612328}, {"id": 1010, "seek": 281184, "start": 2827.32, "end": 2832.1600000000003, "text": " You can store a value X into the memory cell location P.", "tokens": [51138, 509, 393, 3531, 257, 2158, 1783, 666, 264, 4675, 2815, 4914, 430, 13, 51380], "temperature": 0.0, "avg_logprob": -0.11034759023915167, "compression_ratio": 1.75, "no_speech_prob": 0.0001739746512612328}, {"id": 1011, "seek": 281184, "start": 2833.2000000000003, "end": 2835.4, "text": " You can add, subtract, and multiply.", "tokens": [51432, 509, 393, 909, 11, 16390, 11, 293, 12972, 13, 51542], "temperature": 0.0, "avg_logprob": -0.11034759023915167, "compression_ratio": 1.75, "no_speech_prob": 0.0001739746512612328}, {"id": 1012, "seek": 281184, "start": 2835.4, "end": 2837.7200000000003, "text": " And so here's sort of like a minor deviation", "tokens": [51542, 400, 370, 510, 311, 1333, 295, 411, 257, 6696, 25163, 51658], "temperature": 0.0, "avg_logprob": -0.11034759023915167, "compression_ratio": 1.75, "no_speech_prob": 0.0001739746512612328}, {"id": 1013, "seek": 281184, "start": 2837.7200000000003, "end": 2839.08, "text": " from Turing's model.", "tokens": [51658, 490, 314, 1345, 311, 2316, 13, 51726], "temperature": 0.0, "avg_logprob": -0.11034759023915167, "compression_ratio": 1.75, "no_speech_prob": 0.0001739746512612328}, {"id": 1014, "seek": 281184, "start": 2839.08, "end": 2841.6000000000004, "text": " Turing had no notion of numbers or addition", "tokens": [51726, 314, 1345, 632, 572, 10710, 295, 3547, 420, 4500, 51852], "temperature": 0.0, "avg_logprob": -0.11034759023915167, "compression_ratio": 1.75, "no_speech_prob": 0.0001739746512612328}, {"id": 1015, "seek": 284160, "start": 2841.6, "end": 2845.0, "text": " or so on and Turing as a mathematician just basically said,", "tokens": [50364, 420, 370, 322, 293, 314, 1345, 382, 257, 48281, 445, 1936, 848, 11, 50534], "temperature": 0.0, "avg_logprob": -0.14018648724223293, "compression_ratio": 1.6886446886446886, "no_speech_prob": 0.00037401344161480665}, {"id": 1016, "seek": 284160, "start": 2845.0, "end": 2847.24, "text": " those are levels of the axiom tower", "tokens": [50534, 729, 366, 4358, 295, 264, 6360, 72, 298, 10567, 50646], "temperature": 0.0, "avg_logprob": -0.14018648724223293, "compression_ratio": 1.6886446886446886, "no_speech_prob": 0.00037401344161480665}, {"id": 1017, "seek": 284160, "start": 2847.24, "end": 2849.3199999999997, "text": " that you can obviously derive for yourself.", "tokens": [50646, 300, 291, 393, 2745, 28446, 337, 1803, 13, 50750], "temperature": 0.0, "avg_logprob": -0.14018648724223293, "compression_ratio": 1.6886446886446886, "no_speech_prob": 0.00037401344161480665}, {"id": 1018, "seek": 284160, "start": 2849.3199999999997, "end": 2852.16, "text": " Like I don't need to embed those in my axioms.", "tokens": [50750, 1743, 286, 500, 380, 643, 281, 12240, 729, 294, 452, 6360, 72, 4785, 13, 50892], "temperature": 0.0, "avg_logprob": -0.14018648724223293, "compression_ratio": 1.6886446886446886, "no_speech_prob": 0.00037401344161480665}, {"id": 1019, "seek": 284160, "start": 2852.16, "end": 2854.12, "text": " But Von Neumann wanted to build something", "tokens": [50892, 583, 20700, 1734, 449, 969, 1415, 281, 1322, 746, 50990], "temperature": 0.0, "avg_logprob": -0.14018648724223293, "compression_ratio": 1.6886446886446886, "no_speech_prob": 0.00037401344161480665}, {"id": 1020, "seek": 284160, "start": 2854.12, "end": 2855.6, "text": " that actually computed stuff.", "tokens": [50990, 300, 767, 40610, 1507, 13, 51064], "temperature": 0.0, "avg_logprob": -0.14018648724223293, "compression_ratio": 1.6886446886446886, "no_speech_prob": 0.00037401344161480665}, {"id": 1021, "seek": 284160, "start": 2855.6, "end": 2857.52, "text": " So did the addition and so on.", "tokens": [51064, 407, 630, 264, 4500, 293, 370, 322, 13, 51160], "temperature": 0.0, "avg_logprob": -0.14018648724223293, "compression_ratio": 1.6886446886446886, "no_speech_prob": 0.00037401344161480665}, {"id": 1022, "seek": 284160, "start": 2857.52, "end": 2861.68, "text": " And so rather than having to do addition manually", "tokens": [51160, 400, 370, 2831, 813, 1419, 281, 360, 4500, 16945, 51368], "temperature": 0.0, "avg_logprob": -0.14018648724223293, "compression_ratio": 1.6886446886446886, "no_speech_prob": 0.00037401344161480665}, {"id": 1023, "seek": 284160, "start": 2861.68, "end": 2863.88, "text": " in the form of like incrementing", "tokens": [51368, 294, 264, 1254, 295, 411, 26200, 278, 51478], "temperature": 0.0, "avg_logprob": -0.14018648724223293, "compression_ratio": 1.6886446886446886, "no_speech_prob": 0.00037401344161480665}, {"id": 1024, "seek": 284160, "start": 2863.88, "end": 2866.12, "text": " or marking and unmarking cells,", "tokens": [51478, 420, 25482, 293, 517, 5638, 278, 5438, 11, 51590], "temperature": 0.0, "avg_logprob": -0.14018648724223293, "compression_ratio": 1.6886446886446886, "no_speech_prob": 0.00037401344161480665}, {"id": 1025, "seek": 284160, "start": 2866.12, "end": 2869.56, "text": " Von Neumann said, why don't we just build like circuitry", "tokens": [51590, 20700, 1734, 449, 969, 848, 11, 983, 500, 380, 321, 445, 1322, 411, 9048, 627, 51762], "temperature": 0.0, "avg_logprob": -0.14018648724223293, "compression_ratio": 1.6886446886446886, "no_speech_prob": 0.00037401344161480665}, {"id": 1026, "seek": 286956, "start": 2869.6, "end": 2871.84, "text": " that does the addition of two numbers", "tokens": [50366, 300, 775, 264, 4500, 295, 732, 3547, 50478], "temperature": 0.0, "avg_logprob": -0.10587452225765939, "compression_ratio": 1.7230769230769232, "no_speech_prob": 4.9856236728373915e-05}, {"id": 1027, "seek": 286956, "start": 2873.0, "end": 2874.4, "text": " and embed that into the CPU.", "tokens": [50536, 293, 12240, 300, 666, 264, 13199, 13, 50606], "temperature": 0.0, "avg_logprob": -0.10587452225765939, "compression_ratio": 1.7230769230769232, "no_speech_prob": 4.9856236728373915e-05}, {"id": 1028, "seek": 286956, "start": 2874.4, "end": 2876.7999999999997, "text": " So if I wanna take a value from cell A", "tokens": [50606, 407, 498, 286, 1948, 747, 257, 2158, 490, 2815, 316, 50726], "temperature": 0.0, "avg_logprob": -0.10587452225765939, "compression_ratio": 1.7230769230769232, "no_speech_prob": 4.9856236728373915e-05}, {"id": 1029, "seek": 286956, "start": 2876.7999999999997, "end": 2878.7599999999998, "text": " and a value from cell B and add them together", "tokens": [50726, 293, 257, 2158, 490, 2815, 363, 293, 909, 552, 1214, 50824], "temperature": 0.0, "avg_logprob": -0.10587452225765939, "compression_ratio": 1.7230769230769232, "no_speech_prob": 4.9856236728373915e-05}, {"id": 1030, "seek": 286956, "start": 2878.7599999999998, "end": 2880.88, "text": " and store them into cell C,", "tokens": [50824, 293, 3531, 552, 666, 2815, 383, 11, 50930], "temperature": 0.0, "avg_logprob": -0.10587452225765939, "compression_ratio": 1.7230769230769232, "no_speech_prob": 4.9856236728373915e-05}, {"id": 1031, "seek": 286956, "start": 2880.88, "end": 2883.92, "text": " instead of manually doing that computation", "tokens": [50930, 2602, 295, 16945, 884, 300, 24903, 51082], "temperature": 0.0, "avg_logprob": -0.10587452225765939, "compression_ratio": 1.7230769230769232, "no_speech_prob": 4.9856236728373915e-05}, {"id": 1032, "seek": 286956, "start": 2883.92, "end": 2885.84, "text": " like incrementing and decrementing,", "tokens": [51082, 411, 26200, 278, 293, 6853, 518, 278, 11, 51178], "temperature": 0.0, "avg_logprob": -0.10587452225765939, "compression_ratio": 1.7230769230769232, "no_speech_prob": 4.9856236728373915e-05}, {"id": 1033, "seek": 286956, "start": 2885.84, "end": 2887.88, "text": " let's create circuitry that does the addition", "tokens": [51178, 718, 311, 1884, 9048, 627, 300, 775, 264, 4500, 51280], "temperature": 0.0, "avg_logprob": -0.10587452225765939, "compression_ratio": 1.7230769230769232, "no_speech_prob": 4.9856236728373915e-05}, {"id": 1034, "seek": 286956, "start": 2887.88, "end": 2889.96, "text": " so that it's faster, okay?", "tokens": [51280, 370, 300, 309, 311, 4663, 11, 1392, 30, 51384], "temperature": 0.0, "avg_logprob": -0.10587452225765939, "compression_ratio": 1.7230769230769232, "no_speech_prob": 4.9856236728373915e-05}, {"id": 1035, "seek": 286956, "start": 2891.96, "end": 2893.12, "text": " And that's what the logic unit", "tokens": [51484, 400, 300, 311, 437, 264, 9952, 4985, 51542], "temperature": 0.0, "avg_logprob": -0.10587452225765939, "compression_ratio": 1.7230769230769232, "no_speech_prob": 4.9856236728373915e-05}, {"id": 1036, "seek": 286956, "start": 2893.12, "end": 2895.24, "text": " is essentially responsible for.", "tokens": [51542, 307, 4476, 6250, 337, 13, 51648], "temperature": 0.0, "avg_logprob": -0.10587452225765939, "compression_ratio": 1.7230769230769232, "no_speech_prob": 4.9856236728373915e-05}, {"id": 1037, "seek": 286956, "start": 2895.24, "end": 2898.52, "text": " Then you also have these instructions called branches", "tokens": [51648, 1396, 291, 611, 362, 613, 9415, 1219, 14770, 51812], "temperature": 0.0, "avg_logprob": -0.10587452225765939, "compression_ratio": 1.7230769230769232, "no_speech_prob": 4.9856236728373915e-05}, {"id": 1038, "seek": 289852, "start": 2898.56, "end": 2899.48, "text": " or jumps.", "tokens": [50366, 420, 16704, 13, 50412], "temperature": 0.0, "avg_logprob": -0.1417582748282669, "compression_ratio": 1.6104417670682731, "no_speech_prob": 0.00019712977518793195}, {"id": 1039, "seek": 289852, "start": 2899.48, "end": 2904.48, "text": " So if the memory cell at location P contains zero,", "tokens": [50412, 407, 498, 264, 4675, 2815, 412, 4914, 430, 8306, 4018, 11, 50662], "temperature": 0.0, "avg_logprob": -0.1417582748282669, "compression_ratio": 1.6104417670682731, "no_speech_prob": 0.00019712977518793195}, {"id": 1040, "seek": 289852, "start": 2904.72, "end": 2905.7599999999998, "text": " go to N.", "tokens": [50674, 352, 281, 426, 13, 50726], "temperature": 0.0, "avg_logprob": -0.1417582748282669, "compression_ratio": 1.6104417670682731, "no_speech_prob": 0.00019712977518793195}, {"id": 1041, "seek": 289852, "start": 2905.7599999999998, "end": 2907.32, "text": " And if it doesn't contain zero,", "tokens": [50726, 400, 498, 309, 1177, 380, 5304, 4018, 11, 50804], "temperature": 0.0, "avg_logprob": -0.1417582748282669, "compression_ratio": 1.6104417670682731, "no_speech_prob": 0.00019712977518793195}, {"id": 1042, "seek": 289852, "start": 2907.32, "end": 2909.2, "text": " go to N, it's another instruction.", "tokens": [50804, 352, 281, 426, 11, 309, 311, 1071, 10951, 13, 50898], "temperature": 0.0, "avg_logprob": -0.1417582748282669, "compression_ratio": 1.6104417670682731, "no_speech_prob": 0.00019712977518793195}, {"id": 1043, "seek": 289852, "start": 2909.2, "end": 2910.52, "text": " And what I'm trying to get at", "tokens": [50898, 400, 437, 286, 478, 1382, 281, 483, 412, 50964], "temperature": 0.0, "avg_logprob": -0.1417582748282669, "compression_ratio": 1.6104417670682731, "no_speech_prob": 0.00019712977518793195}, {"id": 1044, "seek": 289852, "start": 2910.52, "end": 2913.36, "text": " is that this looks very much like a Turing machine.", "tokens": [50964, 307, 300, 341, 1542, 588, 709, 411, 257, 314, 1345, 3479, 13, 51106], "temperature": 0.0, "avg_logprob": -0.1417582748282669, "compression_ratio": 1.6104417670682731, "no_speech_prob": 0.00019712977518793195}, {"id": 1045, "seek": 289852, "start": 2913.36, "end": 2916.84, "text": " And Von Neumann proposed the actual physical circuitry", "tokens": [51106, 400, 20700, 1734, 449, 969, 10348, 264, 3539, 4001, 9048, 627, 51280], "temperature": 0.0, "avg_logprob": -0.1417582748282669, "compression_ratio": 1.6104417670682731, "no_speech_prob": 0.00019712977518793195}, {"id": 1046, "seek": 289852, "start": 2916.84, "end": 2919.6, "text": " that could implement something like this.", "tokens": [51280, 300, 727, 4445, 746, 411, 341, 13, 51418], "temperature": 0.0, "avg_logprob": -0.1417582748282669, "compression_ratio": 1.6104417670682731, "no_speech_prob": 0.00019712977518793195}, {"id": 1047, "seek": 289852, "start": 2919.6, "end": 2921.08, "text": " And the first computers,", "tokens": [51418, 400, 264, 700, 10807, 11, 51492], "temperature": 0.0, "avg_logprob": -0.1417582748282669, "compression_ratio": 1.6104417670682731, "no_speech_prob": 0.00019712977518793195}, {"id": 1048, "seek": 289852, "start": 2922.2, "end": 2923.72, "text": " the very first general computer", "tokens": [51548, 264, 588, 700, 2674, 3820, 51624], "temperature": 0.0, "avg_logprob": -0.1417582748282669, "compression_ratio": 1.6104417670682731, "no_speech_prob": 0.00019712977518793195}, {"id": 1049, "seek": 289852, "start": 2923.72, "end": 2925.56, "text": " was this thing called ENIAC.", "tokens": [51624, 390, 341, 551, 1219, 15244, 40, 4378, 13, 51716], "temperature": 0.0, "avg_logprob": -0.1417582748282669, "compression_ratio": 1.6104417670682731, "no_speech_prob": 0.00019712977518793195}, {"id": 1050, "seek": 292556, "start": 2925.56, "end": 2927.44, "text": " And I think it popped up in the 40s,", "tokens": [50364, 400, 286, 519, 309, 21545, 493, 294, 264, 3356, 82, 11, 50458], "temperature": 0.0, "avg_logprob": -0.100596436068543, "compression_ratio": 1.6640316205533596, "no_speech_prob": 0.00044408353278413415}, {"id": 1051, "seek": 292556, "start": 2927.44, "end": 2929.7999999999997, "text": " like 47 or something like that.", "tokens": [50458, 411, 16953, 420, 746, 411, 300, 13, 50576], "temperature": 0.0, "avg_logprob": -0.100596436068543, "compression_ratio": 1.6640316205533596, "no_speech_prob": 0.00044408353278413415}, {"id": 1052, "seek": 292556, "start": 2929.7999999999997, "end": 2933.52, "text": " And basically it was like a room almost this size", "tokens": [50576, 400, 1936, 309, 390, 411, 257, 1808, 1920, 341, 2744, 50762], "temperature": 0.0, "avg_logprob": -0.100596436068543, "compression_ratio": 1.6640316205533596, "no_speech_prob": 0.00044408353278413415}, {"id": 1053, "seek": 292556, "start": 2933.52, "end": 2937.32, "text": " and there was no notion of like a program", "tokens": [50762, 293, 456, 390, 572, 10710, 295, 411, 257, 1461, 50952], "temperature": 0.0, "avg_logprob": -0.100596436068543, "compression_ratio": 1.6640316205533596, "no_speech_prob": 0.00044408353278413415}, {"id": 1054, "seek": 292556, "start": 2937.32, "end": 2938.36, "text": " that you give to it.", "tokens": [50952, 300, 291, 976, 281, 309, 13, 51004], "temperature": 0.0, "avg_logprob": -0.100596436068543, "compression_ratio": 1.6640316205533596, "no_speech_prob": 0.00044408353278413415}, {"id": 1055, "seek": 292556, "start": 2938.36, "end": 2940.52, "text": " All it had was like circuitry", "tokens": [51004, 1057, 309, 632, 390, 411, 9048, 627, 51112], "temperature": 0.0, "avg_logprob": -0.100596436068543, "compression_ratio": 1.6640316205533596, "no_speech_prob": 0.00044408353278413415}, {"id": 1056, "seek": 292556, "start": 2940.52, "end": 2943.08, "text": " and you had these like engineers that would go up", "tokens": [51112, 293, 291, 632, 613, 411, 11955, 300, 576, 352, 493, 51240], "temperature": 0.0, "avg_logprob": -0.100596436068543, "compression_ratio": 1.6640316205533596, "no_speech_prob": 0.00044408353278413415}, {"id": 1057, "seek": 292556, "start": 2943.08, "end": 2947.24, "text": " and unplug and replug stuff to program the ENIAC", "tokens": [51240, 293, 39456, 293, 3248, 697, 1507, 281, 1461, 264, 15244, 40, 4378, 51448], "temperature": 0.0, "avg_logprob": -0.100596436068543, "compression_ratio": 1.6640316205533596, "no_speech_prob": 0.00044408353278413415}, {"id": 1058, "seek": 292556, "start": 2947.24, "end": 2948.68, "text": " and then it would operate", "tokens": [51448, 293, 550, 309, 576, 9651, 51520], "temperature": 0.0, "avg_logprob": -0.100596436068543, "compression_ratio": 1.6640316205533596, "no_speech_prob": 0.00044408353278413415}, {"id": 1059, "seek": 292556, "start": 2948.68, "end": 2950.72, "text": " and turn through the computation, right?", "tokens": [51520, 293, 1261, 807, 264, 24903, 11, 558, 30, 51622], "temperature": 0.0, "avg_logprob": -0.100596436068543, "compression_ratio": 1.6640316205533596, "no_speech_prob": 0.00044408353278413415}, {"id": 1060, "seek": 292556, "start": 2950.72, "end": 2952.4, "text": " But ultimately it looked exactly like this.", "tokens": [51622, 583, 6284, 309, 2956, 2293, 411, 341, 13, 51706], "temperature": 0.0, "avg_logprob": -0.100596436068543, "compression_ratio": 1.6640316205533596, "no_speech_prob": 0.00044408353278413415}, {"id": 1061, "seek": 295240, "start": 2952.4, "end": 2956.2400000000002, "text": " It had some mechanism to store values in memory", "tokens": [50364, 467, 632, 512, 7513, 281, 3531, 4190, 294, 4675, 50556], "temperature": 0.0, "avg_logprob": -0.12214076302268288, "compression_ratio": 1.7663934426229508, "no_speech_prob": 0.00012338513624854386}, {"id": 1062, "seek": 295240, "start": 2956.2400000000002, "end": 2958.84, "text": " and then it had some mechanism to read", "tokens": [50556, 293, 550, 309, 632, 512, 7513, 281, 1401, 50686], "temperature": 0.0, "avg_logprob": -0.12214076302268288, "compression_ratio": 1.7663934426229508, "no_speech_prob": 0.00012338513624854386}, {"id": 1063, "seek": 295240, "start": 2958.84, "end": 2959.88, "text": " those values from memory,", "tokens": [50686, 729, 4190, 490, 4675, 11, 50738], "temperature": 0.0, "avg_logprob": -0.12214076302268288, "compression_ratio": 1.7663934426229508, "no_speech_prob": 0.00012338513624854386}, {"id": 1064, "seek": 295240, "start": 2959.88, "end": 2962.2000000000003, "text": " combine them together in useful mathematical ways", "tokens": [50738, 10432, 552, 1214, 294, 4420, 18894, 2098, 50854], "temperature": 0.0, "avg_logprob": -0.12214076302268288, "compression_ratio": 1.7663934426229508, "no_speech_prob": 0.00012338513624854386}, {"id": 1065, "seek": 295240, "start": 2962.2000000000003, "end": 2963.6, "text": " and store the results back.", "tokens": [50854, 293, 3531, 264, 3542, 646, 13, 50924], "temperature": 0.0, "avg_logprob": -0.12214076302268288, "compression_ratio": 1.7663934426229508, "no_speech_prob": 0.00012338513624854386}, {"id": 1066, "seek": 295240, "start": 2967.36, "end": 2970.96, "text": " Cool, so the Turing machine tower.", "tokens": [51112, 8561, 11, 370, 264, 314, 1345, 3479, 10567, 13, 51292], "temperature": 0.0, "avg_logprob": -0.12214076302268288, "compression_ratio": 1.7663934426229508, "no_speech_prob": 0.00012338513624854386}, {"id": 1067, "seek": 295240, "start": 2970.96, "end": 2972.04, "text": " Start off with Turing machines", "tokens": [51292, 6481, 766, 365, 314, 1345, 8379, 51346], "temperature": 0.0, "avg_logprob": -0.12214076302268288, "compression_ratio": 1.7663934426229508, "no_speech_prob": 0.00012338513624854386}, {"id": 1068, "seek": 295240, "start": 2972.04, "end": 2973.84, "text": " and then we have this Von Neumann model.", "tokens": [51346, 293, 550, 321, 362, 341, 20700, 1734, 449, 969, 2316, 13, 51436], "temperature": 0.0, "avg_logprob": -0.12214076302268288, "compression_ratio": 1.7663934426229508, "no_speech_prob": 0.00012338513624854386}, {"id": 1069, "seek": 295240, "start": 2973.84, "end": 2975.28, "text": " And the compelling aspect of this", "tokens": [51436, 400, 264, 20050, 4171, 295, 341, 51508], "temperature": 0.0, "avg_logprob": -0.12214076302268288, "compression_ratio": 1.7663934426229508, "no_speech_prob": 0.00012338513624854386}, {"id": 1070, "seek": 295240, "start": 2975.28, "end": 2977.6800000000003, "text": " is sort of like a deviation from Turing machines", "tokens": [51508, 307, 1333, 295, 411, 257, 25163, 490, 314, 1345, 8379, 51628], "temperature": 0.0, "avg_logprob": -0.12214076302268288, "compression_ratio": 1.7663934426229508, "no_speech_prob": 0.00012338513624854386}, {"id": 1071, "seek": 295240, "start": 2977.6800000000003, "end": 2980.84, "text": " in that it can be actually physically implemented.", "tokens": [51628, 294, 300, 309, 393, 312, 767, 9762, 12270, 13, 51786], "temperature": 0.0, "avg_logprob": -0.12214076302268288, "compression_ratio": 1.7663934426229508, "no_speech_prob": 0.00012338513624854386}, {"id": 1072, "seek": 298084, "start": 2980.84, "end": 2981.96, "text": " And one limitation here", "tokens": [50364, 400, 472, 27432, 510, 50420], "temperature": 0.0, "avg_logprob": -0.14473435313431257, "compression_ratio": 1.564102564102564, "no_speech_prob": 7.721059228060767e-05}, {"id": 1073, "seek": 298084, "start": 2981.96, "end": 2983.6000000000004, "text": " is that you don't have an infinite tape,", "tokens": [50420, 307, 300, 291, 500, 380, 362, 364, 13785, 7314, 11, 50502], "temperature": 0.0, "avg_logprob": -0.14473435313431257, "compression_ratio": 1.564102564102564, "no_speech_prob": 7.721059228060767e-05}, {"id": 1074, "seek": 298084, "start": 2983.6000000000004, "end": 2986.6400000000003, "text": " you just have a finite amount of memory, right?", "tokens": [50502, 291, 445, 362, 257, 19362, 2372, 295, 4675, 11, 558, 30, 50654], "temperature": 0.0, "avg_logprob": -0.14473435313431257, "compression_ratio": 1.564102564102564, "no_speech_prob": 7.721059228060767e-05}, {"id": 1075, "seek": 298084, "start": 2986.6400000000003, "end": 2988.76, "text": " But if you embrace that constraint,", "tokens": [50654, 583, 498, 291, 14038, 300, 25534, 11, 50760], "temperature": 0.0, "avg_logprob": -0.14473435313431257, "compression_ratio": 1.564102564102564, "no_speech_prob": 7.721059228060767e-05}, {"id": 1076, "seek": 298084, "start": 2988.76, "end": 2991.44, "text": " now all of a sudden you can actually compute things", "tokens": [50760, 586, 439, 295, 257, 3990, 291, 393, 767, 14722, 721, 50894], "temperature": 0.0, "avg_logprob": -0.14473435313431257, "compression_ratio": 1.564102564102564, "no_speech_prob": 7.721059228060767e-05}, {"id": 1077, "seek": 298084, "start": 2991.44, "end": 2995.6000000000004, "text": " instead of just leaving it up to a mathematician, okay?", "tokens": [50894, 2602, 295, 445, 5012, 309, 493, 281, 257, 48281, 11, 1392, 30, 51102], "temperature": 0.0, "avg_logprob": -0.14473435313431257, "compression_ratio": 1.564102564102564, "no_speech_prob": 7.721059228060767e-05}, {"id": 1078, "seek": 298084, "start": 2998.2400000000002, "end": 3003.1600000000003, "text": " In 1949, people got tired of manually plugging", "tokens": [51234, 682, 46476, 11, 561, 658, 5868, 295, 16945, 42975, 51480], "temperature": 0.0, "avg_logprob": -0.14473435313431257, "compression_ratio": 1.564102564102564, "no_speech_prob": 7.721059228060767e-05}, {"id": 1079, "seek": 298084, "start": 3003.1600000000003, "end": 3004.76, "text": " and replugging in wires", "tokens": [51480, 293, 3248, 697, 3249, 294, 15537, 51560], "temperature": 0.0, "avg_logprob": -0.14473435313431257, "compression_ratio": 1.564102564102564, "no_speech_prob": 7.721059228060767e-05}, {"id": 1080, "seek": 298084, "start": 3004.76, "end": 3008.92, "text": " and they wanted like a human level way", "tokens": [51560, 293, 436, 1415, 411, 257, 1952, 1496, 636, 51768], "temperature": 0.0, "avg_logprob": -0.14473435313431257, "compression_ratio": 1.564102564102564, "no_speech_prob": 7.721059228060767e-05}, {"id": 1081, "seek": 300892, "start": 3008.92, "end": 3011.64, "text": " to reason about what the instructions were.", "tokens": [50364, 281, 1778, 466, 437, 264, 9415, 645, 13, 50500], "temperature": 0.0, "avg_logprob": -0.12972864098505144, "compression_ratio": 1.8630705394190872, "no_speech_prob": 0.000755138520617038}, {"id": 1082, "seek": 300892, "start": 3011.64, "end": 3014.52, "text": " So they gave each of these instructions names,", "tokens": [50500, 407, 436, 2729, 1184, 295, 613, 9415, 5288, 11, 50644], "temperature": 0.0, "avg_logprob": -0.12972864098505144, "compression_ratio": 1.8630705394190872, "no_speech_prob": 0.000755138520617038}, {"id": 1083, "seek": 300892, "start": 3014.52, "end": 3017.6, "text": " like small names like add, store, mold, divide,", "tokens": [50644, 411, 1359, 5288, 411, 909, 11, 3531, 11, 11102, 11, 9845, 11, 50798], "temperature": 0.0, "avg_logprob": -0.12972864098505144, "compression_ratio": 1.8630705394190872, "no_speech_prob": 0.000755138520617038}, {"id": 1084, "seek": 300892, "start": 3017.6, "end": 3018.6800000000003, "text": " things like that.", "tokens": [50798, 721, 411, 300, 13, 50852], "temperature": 0.0, "avg_logprob": -0.12972864098505144, "compression_ratio": 1.8630705394190872, "no_speech_prob": 0.000755138520617038}, {"id": 1085, "seek": 300892, "start": 3018.6800000000003, "end": 3023.08, "text": " And programs were written like by hand first", "tokens": [50852, 400, 4268, 645, 3720, 411, 538, 1011, 700, 51072], "temperature": 0.0, "avg_logprob": -0.12972864098505144, "compression_ratio": 1.8630705394190872, "no_speech_prob": 0.000755138520617038}, {"id": 1086, "seek": 300892, "start": 3023.08, "end": 3026.2400000000002, "text": " in this sort of ways that humans could reason about.", "tokens": [51072, 294, 341, 1333, 295, 2098, 300, 6255, 727, 1778, 466, 13, 51230], "temperature": 0.0, "avg_logprob": -0.12972864098505144, "compression_ratio": 1.8630705394190872, "no_speech_prob": 0.000755138520617038}, {"id": 1087, "seek": 300892, "start": 3026.2400000000002, "end": 3028.48, "text": " And then later they were assembled down", "tokens": [51230, 400, 550, 1780, 436, 645, 24204, 760, 51342], "temperature": 0.0, "avg_logprob": -0.12972864098505144, "compression_ratio": 1.8630705394190872, "no_speech_prob": 0.000755138520617038}, {"id": 1088, "seek": 300892, "start": 3028.48, "end": 3032.6, "text": " to the actual programming of the computer,", "tokens": [51342, 281, 264, 3539, 9410, 295, 264, 3820, 11, 51548], "temperature": 0.0, "avg_logprob": -0.12972864098505144, "compression_ratio": 1.8630705394190872, "no_speech_prob": 0.000755138520617038}, {"id": 1089, "seek": 300892, "start": 3032.6, "end": 3034.48, "text": " like programming the instructions into the computer.", "tokens": [51548, 411, 9410, 264, 9415, 666, 264, 3820, 13, 51642], "temperature": 0.0, "avg_logprob": -0.12972864098505144, "compression_ratio": 1.8630705394190872, "no_speech_prob": 0.000755138520617038}, {"id": 1090, "seek": 300892, "start": 3034.48, "end": 3037.88, "text": " And so what we've done is created a higher level construct", "tokens": [51642, 400, 370, 437, 321, 600, 1096, 307, 2942, 257, 2946, 1496, 7690, 51812], "temperature": 0.0, "avg_logprob": -0.12972864098505144, "compression_ratio": 1.8630705394190872, "no_speech_prob": 0.000755138520617038}, {"id": 1091, "seek": 303788, "start": 3037.92, "end": 3040.0, "text": " called assembly that humans are able to reason about", "tokens": [50366, 1219, 12103, 300, 6255, 366, 1075, 281, 1778, 466, 50470], "temperature": 0.0, "avg_logprob": -0.13380132984911275, "compression_ratio": 1.6475095785440612, "no_speech_prob": 0.00013338016287889332}, {"id": 1092, "seek": 303788, "start": 3040.0, "end": 3044.44, "text": " more easily, which maps down to the Von Neumann model", "tokens": [50470, 544, 3612, 11, 597, 11317, 760, 281, 264, 20700, 1734, 449, 969, 2316, 50692], "temperature": 0.0, "avg_logprob": -0.13380132984911275, "compression_ratio": 1.6475095785440612, "no_speech_prob": 0.00013338016287889332}, {"id": 1093, "seek": 303788, "start": 3044.44, "end": 3047.04, "text": " in terms of actually programming the computer.", "tokens": [50692, 294, 2115, 295, 767, 9410, 264, 3820, 13, 50822], "temperature": 0.0, "avg_logprob": -0.13380132984911275, "compression_ratio": 1.6475095785440612, "no_speech_prob": 0.00013338016287889332}, {"id": 1094, "seek": 303788, "start": 3047.04, "end": 3048.48, "text": " Does that make sense?", "tokens": [50822, 4402, 300, 652, 2020, 30, 50894], "temperature": 0.0, "avg_logprob": -0.13380132984911275, "compression_ratio": 1.6475095785440612, "no_speech_prob": 0.00013338016287889332}, {"id": 1095, "seek": 303788, "start": 3048.48, "end": 3051.0, "text": " Ultimately, it's sort of like syntactic sugar", "tokens": [50894, 23921, 11, 309, 311, 1333, 295, 411, 23980, 19892, 5076, 51020], "temperature": 0.0, "avg_logprob": -0.13380132984911275, "compression_ratio": 1.6475095785440612, "no_speech_prob": 0.00013338016287889332}, {"id": 1096, "seek": 303788, "start": 3051.0, "end": 3055.36, "text": " or addition in that assembly doesn't add any more constructs.", "tokens": [51020, 420, 4500, 294, 300, 12103, 1177, 380, 909, 604, 544, 7690, 82, 13, 51238], "temperature": 0.0, "avg_logprob": -0.13380132984911275, "compression_ratio": 1.6475095785440612, "no_speech_prob": 0.00013338016287889332}, {"id": 1097, "seek": 303788, "start": 3055.36, "end": 3057.96, "text": " Like there, all of the rules of assembly are defined", "tokens": [51238, 1743, 456, 11, 439, 295, 264, 4474, 295, 12103, 366, 7642, 51368], "temperature": 0.0, "avg_logprob": -0.13380132984911275, "compression_ratio": 1.6475095785440612, "no_speech_prob": 0.00013338016287889332}, {"id": 1098, "seek": 303788, "start": 3057.96, "end": 3060.48, "text": " in terms of the Von Neumann axioms.", "tokens": [51368, 294, 2115, 295, 264, 20700, 1734, 449, 969, 6360, 72, 4785, 13, 51494], "temperature": 0.0, "avg_logprob": -0.13380132984911275, "compression_ratio": 1.6475095785440612, "no_speech_prob": 0.00013338016287889332}, {"id": 1099, "seek": 303788, "start": 3063.36, "end": 3065.4, "text": " And then we have Fortran.", "tokens": [51638, 400, 550, 321, 362, 11002, 4257, 13, 51740], "temperature": 0.0, "avg_logprob": -0.13380132984911275, "compression_ratio": 1.6475095785440612, "no_speech_prob": 0.00013338016287889332}, {"id": 1100, "seek": 303788, "start": 3065.4, "end": 3067.76, "text": " So Fortran is even higher level", "tokens": [51740, 407, 11002, 4257, 307, 754, 2946, 1496, 51858], "temperature": 0.0, "avg_logprob": -0.13380132984911275, "compression_ratio": 1.6475095785440612, "no_speech_prob": 0.00013338016287889332}, {"id": 1101, "seek": 306776, "start": 3067.76, "end": 3071.48, "text": " and here it adds constructs like if statements and loops.", "tokens": [50364, 293, 510, 309, 10860, 7690, 82, 411, 498, 12363, 293, 16121, 13, 50550], "temperature": 0.0, "avg_logprob": -0.1034166075966575, "compression_ratio": 1.627906976744186, "no_speech_prob": 0.00024143284827005118}, {"id": 1102, "seek": 306776, "start": 3071.48, "end": 3074.36, "text": " And you can imagine in 1957,", "tokens": [50550, 400, 291, 393, 3811, 294, 46256, 11, 50694], "temperature": 0.0, "avg_logprob": -0.1034166075966575, "compression_ratio": 1.627906976744186, "no_speech_prob": 0.00024143284827005118}, {"id": 1103, "seek": 306776, "start": 3074.36, "end": 3077.96, "text": " there really wasn't anyone who had conceived", "tokens": [50694, 456, 534, 2067, 380, 2878, 567, 632, 34898, 50874], "temperature": 0.0, "avg_logprob": -0.1034166075966575, "compression_ratio": 1.627906976744186, "no_speech_prob": 0.00024143284827005118}, {"id": 1104, "seek": 306776, "start": 3077.96, "end": 3081.4, "text": " of like a general notion of loops", "tokens": [50874, 295, 411, 257, 2674, 10710, 295, 16121, 51046], "temperature": 0.0, "avg_logprob": -0.1034166075966575, "compression_ratio": 1.627906976744186, "no_speech_prob": 0.00024143284827005118}, {"id": 1105, "seek": 306776, "start": 3081.4, "end": 3082.96, "text": " or even like conditionals, right?", "tokens": [51046, 420, 754, 411, 4188, 1124, 11, 558, 30, 51124], "temperature": 0.0, "avg_logprob": -0.1034166075966575, "compression_ratio": 1.627906976744186, "no_speech_prob": 0.00024143284827005118}, {"id": 1106, "seek": 306776, "start": 3082.96, "end": 3085.92, "text": " All we had were these like branch instructions", "tokens": [51124, 1057, 321, 632, 645, 613, 411, 9819, 9415, 51272], "temperature": 0.0, "avg_logprob": -0.1034166075966575, "compression_ratio": 1.627906976744186, "no_speech_prob": 0.00024143284827005118}, {"id": 1107, "seek": 306776, "start": 3085.92, "end": 3087.76, "text": " and maybe it was sort of implicitly defined", "tokens": [51272, 293, 1310, 309, 390, 1333, 295, 26947, 356, 7642, 51364], "temperature": 0.0, "avg_logprob": -0.1034166075966575, "compression_ratio": 1.627906976744186, "no_speech_prob": 0.00024143284827005118}, {"id": 1108, "seek": 306776, "start": 3087.76, "end": 3090.0400000000004, "text": " that you could make looping constructs from it.", "tokens": [51364, 300, 291, 727, 652, 6367, 278, 7690, 82, 490, 309, 13, 51478], "temperature": 0.0, "avg_logprob": -0.1034166075966575, "compression_ratio": 1.627906976744186, "no_speech_prob": 0.00024143284827005118}, {"id": 1109, "seek": 306776, "start": 3090.0400000000004, "end": 3091.44, "text": " But then people were like, wait,", "tokens": [51478, 583, 550, 561, 645, 411, 11, 1699, 11, 51548], "temperature": 0.0, "avg_logprob": -0.1034166075966575, "compression_ratio": 1.627906976744186, "no_speech_prob": 0.00024143284827005118}, {"id": 1110, "seek": 306776, "start": 3091.44, "end": 3094.28, "text": " why don't we just embrace this high level notion", "tokens": [51548, 983, 500, 380, 321, 445, 14038, 341, 1090, 1496, 10710, 51690], "temperature": 0.0, "avg_logprob": -0.1034166075966575, "compression_ratio": 1.627906976744186, "no_speech_prob": 0.00024143284827005118}, {"id": 1111, "seek": 309428, "start": 3094.28, "end": 3099.0800000000004, "text": " of a looping construct and embedded in our language?", "tokens": [50364, 295, 257, 6367, 278, 7690, 293, 16741, 294, 527, 2856, 30, 50604], "temperature": 0.0, "avg_logprob": -0.14291752085966222, "compression_ratio": 1.7234042553191489, "no_speech_prob": 0.00013978984497953206}, {"id": 1112, "seek": 309428, "start": 3099.0800000000004, "end": 3100.28, "text": " But just like assembly,", "tokens": [50604, 583, 445, 411, 12103, 11, 50664], "temperature": 0.0, "avg_logprob": -0.14291752085966222, "compression_ratio": 1.7234042553191489, "no_speech_prob": 0.00013978984497953206}, {"id": 1113, "seek": 309428, "start": 3100.28, "end": 3103.48, "text": " looping doesn't actually give you any more expressivity.", "tokens": [50664, 6367, 278, 1177, 380, 767, 976, 291, 604, 544, 5109, 4253, 13, 50824], "temperature": 0.0, "avg_logprob": -0.14291752085966222, "compression_ratio": 1.7234042553191489, "no_speech_prob": 0.00013978984497953206}, {"id": 1114, "seek": 309428, "start": 3103.48, "end": 3105.1200000000003, "text": " Every single loop can be defined", "tokens": [50824, 2048, 2167, 6367, 393, 312, 7642, 50906], "temperature": 0.0, "avg_logprob": -0.14291752085966222, "compression_ratio": 1.7234042553191489, "no_speech_prob": 0.00013978984497953206}, {"id": 1115, "seek": 309428, "start": 3105.1200000000003, "end": 3107.7200000000003, "text": " in terms of the lower level constructs.", "tokens": [50906, 294, 2115, 295, 264, 3126, 1496, 7690, 82, 13, 51036], "temperature": 0.0, "avg_logprob": -0.14291752085966222, "compression_ratio": 1.7234042553191489, "no_speech_prob": 0.00013978984497953206}, {"id": 1116, "seek": 309428, "start": 3109.1600000000003, "end": 3110.32, "text": " Then we have C.", "tokens": [51108, 1396, 321, 362, 383, 13, 51166], "temperature": 0.0, "avg_logprob": -0.14291752085966222, "compression_ratio": 1.7234042553191489, "no_speech_prob": 0.00013978984497953206}, {"id": 1117, "seek": 309428, "start": 3111.44, "end": 3113.32, "text": " C introduces these things called functions", "tokens": [51222, 383, 31472, 613, 721, 1219, 6828, 51316], "temperature": 0.0, "avg_logprob": -0.14291752085966222, "compression_ratio": 1.7234042553191489, "no_speech_prob": 0.00013978984497953206}, {"id": 1118, "seek": 309428, "start": 3113.32, "end": 3116.88, "text": " and then we have the ability to create more complex", "tokens": [51316, 293, 550, 321, 362, 264, 3485, 281, 1884, 544, 3997, 51494], "temperature": 0.0, "avg_logprob": -0.14291752085966222, "compression_ratio": 1.7234042553191489, "no_speech_prob": 0.00013978984497953206}, {"id": 1119, "seek": 309428, "start": 3116.88, "end": 3119.0800000000004, "text": " structures of data called structs.", "tokens": [51494, 9227, 295, 1412, 1219, 6594, 82, 13, 51604], "temperature": 0.0, "avg_logprob": -0.14291752085966222, "compression_ratio": 1.7234042553191489, "no_speech_prob": 0.00013978984497953206}, {"id": 1120, "seek": 309428, "start": 3119.0800000000004, "end": 3122.0, "text": " And then we have the ability to dynamically allocate", "tokens": [51604, 400, 550, 321, 362, 264, 3485, 281, 43492, 35713, 51750], "temperature": 0.0, "avg_logprob": -0.14291752085966222, "compression_ratio": 1.7234042553191489, "no_speech_prob": 0.00013978984497953206}, {"id": 1121, "seek": 312200, "start": 3122.0, "end": 3126.36, "text": " in free memory as opposed to just using,", "tokens": [50364, 294, 1737, 4675, 382, 8851, 281, 445, 1228, 11, 50582], "temperature": 0.0, "avg_logprob": -0.16911911241935962, "compression_ratio": 1.6016260162601625, "no_speech_prob": 0.00028679484967142344}, {"id": 1122, "seek": 312200, "start": 3126.36, "end": 3129.64, "text": " you can imagine kind of manually dealing with", "tokens": [50582, 291, 393, 3811, 733, 295, 16945, 6260, 365, 50746], "temperature": 0.0, "avg_logprob": -0.16911911241935962, "compression_ratio": 1.6016260162601625, "no_speech_prob": 0.00028679484967142344}, {"id": 1123, "seek": 312200, "start": 3129.64, "end": 3131.56, "text": " all of the memory on your physical hardware", "tokens": [50746, 439, 295, 264, 4675, 322, 428, 4001, 8837, 50842], "temperature": 0.0, "avg_logprob": -0.16911911241935962, "compression_ratio": 1.6016260162601625, "no_speech_prob": 0.00028679484967142344}, {"id": 1124, "seek": 312200, "start": 3131.56, "end": 3134.92, "text": " as opposed to some other memory manager, right?", "tokens": [50842, 382, 8851, 281, 512, 661, 4675, 6598, 11, 558, 30, 51010], "temperature": 0.0, "avg_logprob": -0.16911911241935962, "compression_ratio": 1.6016260162601625, "no_speech_prob": 0.00028679484967142344}, {"id": 1125, "seek": 312200, "start": 3137.04, "end": 3140.24, "text": " And then finally, we have C++ in 1985,", "tokens": [51116, 400, 550, 2721, 11, 321, 362, 383, 25472, 294, 28962, 11, 51276], "temperature": 0.0, "avg_logprob": -0.16911911241935962, "compression_ratio": 1.6016260162601625, "no_speech_prob": 0.00028679484967142344}, {"id": 1126, "seek": 312200, "start": 3140.24, "end": 3143.28, "text": " introduces this concept called classes and objects.", "tokens": [51276, 31472, 341, 3410, 1219, 5359, 293, 6565, 13, 51428], "temperature": 0.0, "avg_logprob": -0.16911911241935962, "compression_ratio": 1.6016260162601625, "no_speech_prob": 0.00028679484967142344}, {"id": 1127, "seek": 312200, "start": 3143.28, "end": 3146.32, "text": " I'm not sure if like these concepts on the right", "tokens": [51428, 286, 478, 406, 988, 498, 411, 613, 10392, 322, 264, 558, 51580], "temperature": 0.0, "avg_logprob": -0.16911911241935962, "compression_ratio": 1.6016260162601625, "no_speech_prob": 0.00028679484967142344}, {"id": 1128, "seek": 312200, "start": 3146.32, "end": 3149.04, "text": " were introduced solely by the languages.", "tokens": [51580, 645, 7268, 23309, 538, 264, 8650, 13, 51716], "temperature": 0.0, "avg_logprob": -0.16911911241935962, "compression_ratio": 1.6016260162601625, "no_speech_prob": 0.00028679484967142344}, {"id": 1129, "seek": 312200, "start": 3149.04, "end": 3150.8, "text": " I probably not, they probably came", "tokens": [51716, 286, 1391, 406, 11, 436, 1391, 1361, 51804], "temperature": 0.0, "avg_logprob": -0.16911911241935962, "compression_ratio": 1.6016260162601625, "no_speech_prob": 0.00028679484967142344}, {"id": 1130, "seek": 315080, "start": 3150.8, "end": 3153.5600000000004, "text": " in some other flavor,", "tokens": [50364, 294, 512, 661, 6813, 11, 50502], "temperature": 0.0, "avg_logprob": -0.14064929641295817, "compression_ratio": 1.5657370517928286, "no_speech_prob": 0.0005881034303456545}, {"id": 1131, "seek": 315080, "start": 3153.5600000000004, "end": 3155.6800000000003, "text": " but I think these languages over here", "tokens": [50502, 457, 286, 519, 613, 8650, 670, 510, 50608], "temperature": 0.0, "avg_logprob": -0.14064929641295817, "compression_ratio": 1.5657370517928286, "no_speech_prob": 0.0005881034303456545}, {"id": 1132, "seek": 315080, "start": 3155.6800000000003, "end": 3159.2000000000003, "text": " are the most significant in terms of widespread use.", "tokens": [50608, 366, 264, 881, 4776, 294, 2115, 295, 22679, 764, 13, 50784], "temperature": 0.0, "avg_logprob": -0.14064929641295817, "compression_ratio": 1.5657370517928286, "no_speech_prob": 0.0005881034303456545}, {"id": 1133, "seek": 315080, "start": 3159.2000000000003, "end": 3160.5600000000004, "text": " So that's really what I'm trying to get at.", "tokens": [50784, 407, 300, 311, 534, 437, 286, 478, 1382, 281, 483, 412, 13, 50852], "temperature": 0.0, "avg_logprob": -0.14064929641295817, "compression_ratio": 1.5657370517928286, "no_speech_prob": 0.0005881034303456545}, {"id": 1134, "seek": 315080, "start": 3160.5600000000004, "end": 3163.04, "text": " It's not as much attribution as it much", "tokens": [50852, 467, 311, 406, 382, 709, 9080, 1448, 382, 309, 709, 50976], "temperature": 0.0, "avg_logprob": -0.14064929641295817, "compression_ratio": 1.5657370517928286, "no_speech_prob": 0.0005881034303456545}, {"id": 1135, "seek": 315080, "start": 3163.04, "end": 3165.52, "text": " as it is sort of relatively speaking", "tokens": [50976, 382, 309, 307, 1333, 295, 7226, 4124, 51100], "temperature": 0.0, "avg_logprob": -0.14064929641295817, "compression_ratio": 1.5657370517928286, "no_speech_prob": 0.0005881034303456545}, {"id": 1136, "seek": 315080, "start": 3165.52, "end": 3168.4, "text": " when these ideas popped up into existence.", "tokens": [51100, 562, 613, 3487, 21545, 493, 666, 9123, 13, 51244], "temperature": 0.0, "avg_logprob": -0.14064929641295817, "compression_ratio": 1.5657370517928286, "no_speech_prob": 0.0005881034303456545}, {"id": 1137, "seek": 315080, "start": 3168.4, "end": 3171.8, "text": " But just like pianos axiom towers,", "tokens": [51244, 583, 445, 411, 32198, 329, 6360, 72, 298, 25045, 11, 51414], "temperature": 0.0, "avg_logprob": -0.14064929641295817, "compression_ratio": 1.5657370517928286, "no_speech_prob": 0.0005881034303456545}, {"id": 1138, "seek": 315080, "start": 3171.8, "end": 3173.46, "text": " where you have kind of irrational numbers", "tokens": [51414, 689, 291, 362, 733, 295, 39914, 3547, 51497], "temperature": 0.0, "avg_logprob": -0.14064929641295817, "compression_ratio": 1.5657370517928286, "no_speech_prob": 0.0005881034303456545}, {"id": 1139, "seek": 315080, "start": 3173.46, "end": 3176.32, "text": " like up at the top, classes and objects", "tokens": [51497, 411, 493, 412, 264, 1192, 11, 5359, 293, 6565, 51640], "temperature": 0.0, "avg_logprob": -0.14064929641295817, "compression_ratio": 1.5657370517928286, "no_speech_prob": 0.0005881034303456545}, {"id": 1140, "seek": 317632, "start": 3176.32, "end": 3179.28, "text": " are really just defined in relation", "tokens": [50364, 366, 534, 445, 7642, 294, 9721, 50512], "temperature": 0.0, "avg_logprob": -0.19531423568725587, "compression_ratio": 1.660633484162896, "no_speech_prob": 0.0002033792989095673}, {"id": 1141, "seek": 317632, "start": 3179.28, "end": 3181.96, "text": " to von Neumann instructions.", "tokens": [50512, 281, 2957, 1734, 449, 969, 9415, 13, 50646], "temperature": 0.0, "avg_logprob": -0.19531423568725587, "compression_ratio": 1.660633484162896, "no_speech_prob": 0.0002033792989095673}, {"id": 1142, "seek": 317632, "start": 3181.96, "end": 3183.8, "text": " Everything boils down to those things.", "tokens": [50646, 5471, 35049, 760, 281, 729, 721, 13, 50738], "temperature": 0.0, "avg_logprob": -0.19531423568725587, "compression_ratio": 1.660633484162896, "no_speech_prob": 0.0002033792989095673}, {"id": 1143, "seek": 317632, "start": 3186.4, "end": 3188.8, "text": " So we can think of the von Neumann machine instructions", "tokens": [50868, 407, 321, 393, 519, 295, 264, 2957, 1734, 449, 969, 3479, 9415, 50988], "temperature": 0.0, "avg_logprob": -0.19531423568725587, "compression_ratio": 1.660633484162896, "no_speech_prob": 0.0002033792989095673}, {"id": 1144, "seek": 317632, "start": 3188.8, "end": 3192.2400000000002, "text": " almost like the axioms for computing,", "tokens": [50988, 1920, 411, 264, 6360, 72, 4785, 337, 15866, 11, 51160], "temperature": 0.0, "avg_logprob": -0.19531423568725587, "compression_ratio": 1.660633484162896, "no_speech_prob": 0.0002033792989095673}, {"id": 1145, "seek": 317632, "start": 3192.2400000000002, "end": 3193.6800000000003, "text": " for modern computing really.", "tokens": [51160, 337, 4363, 15866, 534, 13, 51232], "temperature": 0.0, "avg_logprob": -0.19531423568725587, "compression_ratio": 1.660633484162896, "no_speech_prob": 0.0002033792989095673}, {"id": 1146, "seek": 317632, "start": 3194.8, "end": 3198.04, "text": " And the Turing, so this claim is my own.", "tokens": [51288, 400, 264, 314, 1345, 11, 370, 341, 3932, 307, 452, 1065, 13, 51450], "temperature": 0.0, "avg_logprob": -0.19531423568725587, "compression_ratio": 1.660633484162896, "no_speech_prob": 0.0002033792989095673}, {"id": 1147, "seek": 317632, "start": 3198.04, "end": 3201.8, "text": " Like after studying like the history of this,", "tokens": [51450, 1743, 934, 7601, 411, 264, 2503, 295, 341, 11, 51638], "temperature": 0.0, "avg_logprob": -0.19531423568725587, "compression_ratio": 1.660633484162896, "no_speech_prob": 0.0002033792989095673}, {"id": 1148, "seek": 317632, "start": 3201.8, "end": 3205.5800000000004, "text": " I asked myself the question, like, why is this tower,", "tokens": [51638, 286, 2351, 2059, 264, 1168, 11, 411, 11, 983, 307, 341, 10567, 11, 51827], "temperature": 0.0, "avg_logprob": -0.19531423568725587, "compression_ratio": 1.660633484162896, "no_speech_prob": 0.0002033792989095673}, {"id": 1149, "seek": 320558, "start": 3205.62, "end": 3208.74, "text": " like these languages specifically so much more popular", "tokens": [50366, 411, 613, 8650, 4682, 370, 709, 544, 3743, 50522], "temperature": 0.0, "avg_logprob": -0.11155134547840465, "compression_ratio": 1.7374517374517375, "no_speech_prob": 0.00023043726105242968}, {"id": 1150, "seek": 320558, "start": 3208.74, "end": 3211.06, "text": " compared to the corresponding languages", "tokens": [50522, 5347, 281, 264, 11760, 8650, 50638], "temperature": 0.0, "avg_logprob": -0.11155134547840465, "compression_ratio": 1.7374517374517375, "no_speech_prob": 0.00023043726105242968}, {"id": 1151, "seek": 320558, "start": 3211.06, "end": 3213.84, "text": " and ideas in the Lambda calculus tower.", "tokens": [50638, 293, 3487, 294, 264, 45691, 33400, 10567, 13, 50777], "temperature": 0.0, "avg_logprob": -0.11155134547840465, "compression_ratio": 1.7374517374517375, "no_speech_prob": 0.00023043726105242968}, {"id": 1152, "seek": 320558, "start": 3213.84, "end": 3218.22, "text": " And my belief is that the Turing machine axiom tower", "tokens": [50777, 400, 452, 7107, 307, 300, 264, 314, 1345, 3479, 6360, 72, 298, 10567, 50996], "temperature": 0.0, "avg_logprob": -0.11155134547840465, "compression_ratio": 1.7374517374517375, "no_speech_prob": 0.00023043726105242968}, {"id": 1153, "seek": 320558, "start": 3218.22, "end": 3220.62, "text": " is actually easily implementable in hardware", "tokens": [50996, 307, 767, 3612, 4445, 712, 294, 8837, 51116], "temperature": 0.0, "avg_logprob": -0.11155134547840465, "compression_ratio": 1.7374517374517375, "no_speech_prob": 0.00023043726105242968}, {"id": 1154, "seek": 320558, "start": 3220.62, "end": 3223.02, "text": " because it's sort of like a physical device.", "tokens": [51116, 570, 309, 311, 1333, 295, 411, 257, 4001, 4302, 13, 51236], "temperature": 0.0, "avg_logprob": -0.11155134547840465, "compression_ratio": 1.7374517374517375, "no_speech_prob": 0.00023043726105242968}, {"id": 1155, "seek": 320558, "start": 3223.02, "end": 3224.58, "text": " And because you can implement it in hardware,", "tokens": [51236, 400, 570, 291, 393, 4445, 309, 294, 8837, 11, 51314], "temperature": 0.0, "avg_logprob": -0.11155134547840465, "compression_ratio": 1.7374517374517375, "no_speech_prob": 0.00023043726105242968}, {"id": 1156, "seek": 320558, "start": 3224.58, "end": 3227.2599999999998, "text": " you can actually compute stuff with it", "tokens": [51314, 291, 393, 767, 14722, 1507, 365, 309, 51448], "temperature": 0.0, "avg_logprob": -0.11155134547840465, "compression_ratio": 1.7374517374517375, "no_speech_prob": 0.00023043726105242968}, {"id": 1157, "seek": 320558, "start": 3227.2599999999998, "end": 3229.98, "text": " as opposed to it being relegated to pure math, right?", "tokens": [51448, 382, 8851, 281, 309, 885, 2951, 70, 770, 281, 6075, 5221, 11, 558, 30, 51584], "temperature": 0.0, "avg_logprob": -0.11155134547840465, "compression_ratio": 1.7374517374517375, "no_speech_prob": 0.00023043726105242968}, {"id": 1158, "seek": 320558, "start": 3231.2999999999997, "end": 3233.66, "text": " The final idea is that a compiler", "tokens": [51650, 440, 2572, 1558, 307, 300, 257, 31958, 51768], "temperature": 0.0, "avg_logprob": -0.11155134547840465, "compression_ratio": 1.7374517374517375, "no_speech_prob": 0.00023043726105242968}, {"id": 1159, "seek": 323366, "start": 3233.66, "end": 3237.02, "text": " is just something that takes like a higher level construct", "tokens": [50364, 307, 445, 746, 300, 2516, 411, 257, 2946, 1496, 7690, 50532], "temperature": 0.0, "avg_logprob": -0.12617342095626027, "compression_ratio": 1.5291666666666666, "no_speech_prob": 6.400903657777235e-05}, {"id": 1160, "seek": 323366, "start": 3237.02, "end": 3241.5, "text": " and reduces it down to its axiomatic von Neumann definition.", "tokens": [50532, 293, 18081, 309, 760, 281, 1080, 6360, 72, 13143, 2957, 1734, 449, 969, 7123, 13, 50756], "temperature": 0.0, "avg_logprob": -0.12617342095626027, "compression_ratio": 1.5291666666666666, "no_speech_prob": 6.400903657777235e-05}, {"id": 1161, "seek": 323366, "start": 3241.5, "end": 3243.18, "text": " That's all what a compiler is.", "tokens": [50756, 663, 311, 439, 437, 257, 31958, 307, 13, 50840], "temperature": 0.0, "avg_logprob": -0.12617342095626027, "compression_ratio": 1.5291666666666666, "no_speech_prob": 6.400903657777235e-05}, {"id": 1162, "seek": 323366, "start": 3245.7, "end": 3246.54, "text": " Sound good?", "tokens": [50966, 14673, 665, 30, 51008], "temperature": 0.0, "avg_logprob": -0.12617342095626027, "compression_ratio": 1.5291666666666666, "no_speech_prob": 6.400903657777235e-05}, {"id": 1163, "seek": 323366, "start": 3249.94, "end": 3252.14, "text": " Okay, the Lambda calculus tower.", "tokens": [51178, 1033, 11, 264, 45691, 33400, 10567, 13, 51288], "temperature": 0.0, "avg_logprob": -0.12617342095626027, "compression_ratio": 1.5291666666666666, "no_speech_prob": 6.400903657777235e-05}, {"id": 1164, "seek": 323366, "start": 3252.14, "end": 3253.98, "text": " So this one looks very different", "tokens": [51288, 407, 341, 472, 1542, 588, 819, 51380], "temperature": 0.0, "avg_logprob": -0.12617342095626027, "compression_ratio": 1.5291666666666666, "no_speech_prob": 6.400903657777235e-05}, {"id": 1165, "seek": 323366, "start": 3253.98, "end": 3256.8999999999996, "text": " because the first thing that we have", "tokens": [51380, 570, 264, 700, 551, 300, 321, 362, 51526], "temperature": 0.0, "avg_logprob": -0.12617342095626027, "compression_ratio": 1.5291666666666666, "no_speech_prob": 6.400903657777235e-05}, {"id": 1166, "seek": 323366, "start": 3256.8999999999996, "end": 3260.42, "text": " is just variables, functions and function application.", "tokens": [51526, 307, 445, 9102, 11, 6828, 293, 2445, 3861, 13, 51702], "temperature": 0.0, "avg_logprob": -0.12617342095626027, "compression_ratio": 1.5291666666666666, "no_speech_prob": 6.400903657777235e-05}, {"id": 1167, "seek": 323366, "start": 3260.42, "end": 3262.14, "text": " And we've already kind of seen some constructs", "tokens": [51702, 400, 321, 600, 1217, 733, 295, 1612, 512, 7690, 82, 51788], "temperature": 0.0, "avg_logprob": -0.12617342095626027, "compression_ratio": 1.5291666666666666, "no_speech_prob": 6.400903657777235e-05}, {"id": 1168, "seek": 326214, "start": 3262.14, "end": 3264.1, "text": " that you can build on top of that.", "tokens": [50364, 300, 291, 393, 1322, 322, 1192, 295, 300, 13, 50462], "temperature": 0.0, "avg_logprob": -0.11424210866292318, "compression_ratio": 1.6106194690265487, "no_speech_prob": 0.0004440670891199261}, {"id": 1169, "seek": 326214, "start": 3264.1, "end": 3265.8599999999997, "text": " But one of the most interesting ones", "tokens": [50462, 583, 472, 295, 264, 881, 1880, 2306, 50550], "temperature": 0.0, "avg_logprob": -0.11424210866292318, "compression_ratio": 1.6106194690265487, "no_speech_prob": 0.0004440670891199261}, {"id": 1170, "seek": 326214, "start": 3265.8599999999997, "end": 3268.1, "text": " is this idea called Lisp,", "tokens": [50550, 307, 341, 1558, 1219, 441, 7631, 11, 50662], "temperature": 0.0, "avg_logprob": -0.11424210866292318, "compression_ratio": 1.6106194690265487, "no_speech_prob": 0.0004440670891199261}, {"id": 1171, "seek": 326214, "start": 3268.1, "end": 3271.66, "text": " which came about in the 1950s.", "tokens": [50662, 597, 1361, 466, 294, 264, 18141, 82, 13, 50840], "temperature": 0.0, "avg_logprob": -0.11424210866292318, "compression_ratio": 1.6106194690265487, "no_speech_prob": 0.0004440670891199261}, {"id": 1172, "seek": 326214, "start": 3271.66, "end": 3274.58, "text": " And it came about also by a mathematician,", "tokens": [50840, 400, 309, 1361, 466, 611, 538, 257, 48281, 11, 50986], "temperature": 0.0, "avg_logprob": -0.11424210866292318, "compression_ratio": 1.6106194690265487, "no_speech_prob": 0.0004440670891199261}, {"id": 1173, "seek": 326214, "start": 3274.58, "end": 3276.46, "text": " his name was John McCarthy.", "tokens": [50986, 702, 1315, 390, 2619, 44085, 13, 51080], "temperature": 0.0, "avg_logprob": -0.11424210866292318, "compression_ratio": 1.6106194690265487, "no_speech_prob": 0.0004440670891199261}, {"id": 1174, "seek": 326214, "start": 3276.46, "end": 3279.98, "text": " And what McCarthy did was,", "tokens": [51080, 400, 437, 44085, 630, 390, 11, 51256], "temperature": 0.0, "avg_logprob": -0.11424210866292318, "compression_ratio": 1.6106194690265487, "no_speech_prob": 0.0004440670891199261}, {"id": 1175, "seek": 326214, "start": 3279.98, "end": 3282.7799999999997, "text": " if you look at piano's axioms,", "tokens": [51256, 498, 291, 574, 412, 9211, 311, 6360, 72, 4785, 11, 51396], "temperature": 0.0, "avg_logprob": -0.11424210866292318, "compression_ratio": 1.6106194690265487, "no_speech_prob": 0.0004440670891199261}, {"id": 1176, "seek": 326214, "start": 3282.7799999999997, "end": 3285.74, "text": " the definitions of those axioms were sort of defined", "tokens": [51396, 264, 21988, 295, 729, 6360, 72, 4785, 645, 1333, 295, 7642, 51544], "temperature": 0.0, "avg_logprob": -0.11424210866292318, "compression_ratio": 1.6106194690265487, "no_speech_prob": 0.0004440670891199261}, {"id": 1177, "seek": 326214, "start": 3285.74, "end": 3289.2999999999997, "text": " in terms of English and mathematical notation, right?", "tokens": [51544, 294, 2115, 295, 3669, 293, 18894, 24657, 11, 558, 30, 51722], "temperature": 0.0, "avg_logprob": -0.11424210866292318, "compression_ratio": 1.6106194690265487, "no_speech_prob": 0.0004440670891199261}, {"id": 1178, "seek": 328930, "start": 3289.3, "end": 3293.5, "text": " McCarthy said, what if we could take Lambda calculus", "tokens": [50364, 44085, 848, 11, 437, 498, 321, 727, 747, 45691, 33400, 50574], "temperature": 0.0, "avg_logprob": -0.08596646532099297, "compression_ratio": 1.6396396396396395, "no_speech_prob": 3.8822188798803836e-05}, {"id": 1179, "seek": 328930, "start": 3293.5, "end": 3295.5, "text": " or structures like that", "tokens": [50574, 420, 9227, 411, 300, 50674], "temperature": 0.0, "avg_logprob": -0.08596646532099297, "compression_ratio": 1.6396396396396395, "no_speech_prob": 3.8822188798803836e-05}, {"id": 1180, "seek": 328930, "start": 3295.5, "end": 3300.5, "text": " and define those axioms in the language itself?", "tokens": [50674, 293, 6964, 729, 6360, 72, 4785, 294, 264, 2856, 2564, 30, 50924], "temperature": 0.0, "avg_logprob": -0.08596646532099297, "compression_ratio": 1.6396396396396395, "no_speech_prob": 3.8822188798803836e-05}, {"id": 1181, "seek": 328930, "start": 3301.98, "end": 3304.82, "text": " And he created this language called Lisp.", "tokens": [50998, 400, 415, 2942, 341, 2856, 1219, 441, 7631, 13, 51140], "temperature": 0.0, "avg_logprob": -0.08596646532099297, "compression_ratio": 1.6396396396396395, "no_speech_prob": 3.8822188798803836e-05}, {"id": 1182, "seek": 328930, "start": 3304.82, "end": 3309.82, "text": " And basically the implementation of Lisp is in Lisp itself.", "tokens": [51140, 400, 1936, 264, 11420, 295, 441, 7631, 307, 294, 441, 7631, 2564, 13, 51390], "temperature": 0.0, "avg_logprob": -0.08596646532099297, "compression_ratio": 1.6396396396396395, "no_speech_prob": 3.8822188798803836e-05}, {"id": 1183, "seek": 328930, "start": 3310.5, "end": 3312.7000000000003, "text": " And because he was a mathematician,", "tokens": [51424, 400, 570, 415, 390, 257, 48281, 11, 51534], "temperature": 0.0, "avg_logprob": -0.08596646532099297, "compression_ratio": 1.6396396396396395, "no_speech_prob": 3.8822188798803836e-05}, {"id": 1184, "seek": 328930, "start": 3312.7000000000003, "end": 3315.94, "text": " he had no need to actually implement it on a real computer.", "tokens": [51534, 415, 632, 572, 643, 281, 767, 4445, 309, 322, 257, 957, 3820, 13, 51696], "temperature": 0.0, "avg_logprob": -0.08596646532099297, "compression_ratio": 1.6396396396396395, "no_speech_prob": 3.8822188798803836e-05}, {"id": 1185, "seek": 328930, "start": 3315.94, "end": 3318.6600000000003, "text": " And so this was sort of the first example", "tokens": [51696, 400, 370, 341, 390, 1333, 295, 264, 700, 1365, 51832], "temperature": 0.0, "avg_logprob": -0.08596646532099297, "compression_ratio": 1.6396396396396395, "no_speech_prob": 3.8822188798803836e-05}, {"id": 1186, "seek": 331866, "start": 3318.8199999999997, "end": 3321.02, "text": " of what we call like a meta-circular construct.", "tokens": [50372, 295, 437, 321, 818, 411, 257, 19616, 12, 23568, 17792, 7690, 13, 50482], "temperature": 0.0, "avg_logprob": -0.1389398228038441, "compression_ratio": 1.5708812260536398, "no_speech_prob": 0.0003797347017098218}, {"id": 1187, "seek": 331866, "start": 3321.02, "end": 3323.62, "text": " So the construct is defined in terms of itself", "tokens": [50482, 407, 264, 7690, 307, 7642, 294, 2115, 295, 2564, 50612], "temperature": 0.0, "avg_logprob": -0.1389398228038441, "compression_ratio": 1.5708812260536398, "no_speech_prob": 0.0003797347017098218}, {"id": 1188, "seek": 331866, "start": 3323.62, "end": 3325.3799999999997, "text": " and it's fully self-containing.", "tokens": [50612, 293, 309, 311, 4498, 2698, 12, 9000, 3686, 13, 50700], "temperature": 0.0, "avg_logprob": -0.1389398228038441, "compression_ratio": 1.5708812260536398, "no_speech_prob": 0.0003797347017098218}, {"id": 1189, "seek": 331866, "start": 3325.3799999999997, "end": 3326.8599999999997, "text": " And I think a rite of passage", "tokens": [50700, 400, 286, 519, 257, 367, 642, 295, 11497, 50774], "temperature": 0.0, "avg_logprob": -0.1389398228038441, "compression_ratio": 1.5708812260536398, "no_speech_prob": 0.0003797347017098218}, {"id": 1190, "seek": 331866, "start": 3326.8599999999997, "end": 3329.1, "text": " for like every single computer scientist", "tokens": [50774, 337, 411, 633, 2167, 3820, 12662, 50886], "temperature": 0.0, "avg_logprob": -0.1389398228038441, "compression_ratio": 1.5708812260536398, "no_speech_prob": 0.0003797347017098218}, {"id": 1191, "seek": 331866, "start": 3329.1, "end": 3332.18, "text": " is to build your own Lisp interpreter.", "tokens": [50886, 307, 281, 1322, 428, 1065, 441, 7631, 34132, 13, 51040], "temperature": 0.0, "avg_logprob": -0.1389398228038441, "compression_ratio": 1.5708812260536398, "no_speech_prob": 0.0003797347017098218}, {"id": 1192, "seek": 331866, "start": 3332.18, "end": 3336.94, "text": " And so McCarthy kind of proposed this idea in 1958", "tokens": [51040, 400, 370, 44085, 733, 295, 10348, 341, 1558, 294, 45868, 51278], "temperature": 0.0, "avg_logprob": -0.1389398228038441, "compression_ratio": 1.5708812260536398, "no_speech_prob": 0.0003797347017098218}, {"id": 1193, "seek": 331866, "start": 3336.94, "end": 3338.94, "text": " and then his students went along", "tokens": [51278, 293, 550, 702, 1731, 1437, 2051, 51378], "temperature": 0.0, "avg_logprob": -0.1389398228038441, "compression_ratio": 1.5708812260536398, "no_speech_prob": 0.0003797347017098218}, {"id": 1194, "seek": 331866, "start": 3338.94, "end": 3341.14, "text": " and actually implemented Lisp", "tokens": [51378, 293, 767, 12270, 441, 7631, 51488], "temperature": 0.0, "avg_logprob": -0.1389398228038441, "compression_ratio": 1.5708812260536398, "no_speech_prob": 0.0003797347017098218}, {"id": 1195, "seek": 331866, "start": 3341.14, "end": 3346.14, "text": " as on top of one Neumann machine to actually compute stuff.", "tokens": [51488, 382, 322, 1192, 295, 472, 1734, 449, 969, 3479, 281, 767, 14722, 1507, 13, 51738], "temperature": 0.0, "avg_logprob": -0.1389398228038441, "compression_ratio": 1.5708812260536398, "no_speech_prob": 0.0003797347017098218}, {"id": 1196, "seek": 334614, "start": 3346.8199999999997, "end": 3349.94, "text": " The next idea is System F.", "tokens": [50398, 440, 958, 1558, 307, 8910, 479, 13, 50554], "temperature": 0.0, "avg_logprob": -0.1716398759321733, "compression_ratio": 1.706896551724138, "no_speech_prob": 0.0001420048502041027}, {"id": 1197, "seek": 334614, "start": 3349.94, "end": 3352.7799999999997, "text": " So this popped up in 1972", "tokens": [50554, 407, 341, 21545, 493, 294, 32952, 50696], "temperature": 0.0, "avg_logprob": -0.1716398759321733, "compression_ratio": 1.706896551724138, "no_speech_prob": 0.0001420048502041027}, {"id": 1198, "seek": 334614, "start": 3352.7799999999997, "end": 3355.74, "text": " and you can think of System F as like Lambda calculus", "tokens": [50696, 293, 291, 393, 519, 295, 8910, 479, 382, 411, 45691, 33400, 50844], "temperature": 0.0, "avg_logprob": -0.1716398759321733, "compression_ratio": 1.706896551724138, "no_speech_prob": 0.0001420048502041027}, {"id": 1199, "seek": 334614, "start": 3355.74, "end": 3358.02, "text": " except it has support for types.", "tokens": [50844, 3993, 309, 575, 1406, 337, 3467, 13, 50958], "temperature": 0.0, "avg_logprob": -0.1716398759321733, "compression_ratio": 1.706896551724138, "no_speech_prob": 0.0001420048502041027}, {"id": 1200, "seek": 334614, "start": 3358.02, "end": 3361.94, "text": " So the Lambda calculus that I kind of showed you before", "tokens": [50958, 407, 264, 45691, 33400, 300, 286, 733, 295, 4712, 291, 949, 51154], "temperature": 0.0, "avg_logprob": -0.1716398759321733, "compression_ratio": 1.706896551724138, "no_speech_prob": 0.0001420048502041027}, {"id": 1201, "seek": 334614, "start": 3361.94, "end": 3363.02, "text": " didn't really have any types.", "tokens": [51154, 994, 380, 534, 362, 604, 3467, 13, 51208], "temperature": 0.0, "avg_logprob": -0.1716398759321733, "compression_ratio": 1.706896551724138, "no_speech_prob": 0.0001420048502041027}, {"id": 1202, "seek": 334614, "start": 3363.02, "end": 3364.62, "text": " So it's kind of like JavaScript.", "tokens": [51208, 407, 309, 311, 733, 295, 411, 15778, 13, 51288], "temperature": 0.0, "avg_logprob": -0.1716398759321733, "compression_ratio": 1.706896551724138, "no_speech_prob": 0.0001420048502041027}, {"id": 1203, "seek": 334614, "start": 3364.62, "end": 3368.22, "text": " System F is kind of the typescript equivalent", "tokens": [51288, 8910, 479, 307, 733, 295, 264, 3467, 5944, 10344, 51468], "temperature": 0.0, "avg_logprob": -0.1716398759321733, "compression_ratio": 1.706896551724138, "no_speech_prob": 0.0001420048502041027}, {"id": 1204, "seek": 334614, "start": 3368.22, "end": 3369.5, "text": " of Lambda calculus.", "tokens": [51468, 295, 45691, 33400, 13, 51532], "temperature": 0.0, "avg_logprob": -0.1716398759321733, "compression_ratio": 1.706896551724138, "no_speech_prob": 0.0001420048502041027}, {"id": 1205, "seek": 334614, "start": 3370.8199999999997, "end": 3372.9, "text": " But a lot more sophisticated for reasons", "tokens": [51598, 583, 257, 688, 544, 16950, 337, 4112, 51702], "temperature": 0.0, "avg_logprob": -0.1716398759321733, "compression_ratio": 1.706896551724138, "no_speech_prob": 0.0001420048502041027}, {"id": 1206, "seek": 334614, "start": 3372.9, "end": 3374.14, "text": " that I don't want to get into.", "tokens": [51702, 300, 286, 500, 380, 528, 281, 483, 666, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1716398759321733, "compression_ratio": 1.706896551724138, "no_speech_prob": 0.0001420048502041027}, {"id": 1207, "seek": 337414, "start": 3374.14, "end": 3377.3399999999997, "text": " But really every single System F construct", "tokens": [50364, 583, 534, 633, 2167, 8910, 479, 7690, 50524], "temperature": 0.0, "avg_logprob": -0.1523442491192684, "compression_ratio": 1.6307692307692307, "no_speech_prob": 3.1197298085317016e-05}, {"id": 1208, "seek": 337414, "start": 3377.3399999999997, "end": 3378.7799999999997, "text": " can be boiled down", "tokens": [50524, 393, 312, 21058, 760, 50596], "temperature": 0.0, "avg_logprob": -0.1523442491192684, "compression_ratio": 1.6307692307692307, "no_speech_prob": 3.1197298085317016e-05}, {"id": 1209, "seek": 337414, "start": 3378.7799999999997, "end": 3381.42, "text": " into its corresponding Lambda calculus construct.", "tokens": [50596, 666, 1080, 11760, 45691, 33400, 7690, 13, 50728], "temperature": 0.0, "avg_logprob": -0.1523442491192684, "compression_ratio": 1.6307692307692307, "no_speech_prob": 3.1197298085317016e-05}, {"id": 1210, "seek": 337414, "start": 3381.42, "end": 3385.06, "text": " So very similar to how Fortran didn't add any expressivity.", "tokens": [50728, 407, 588, 2531, 281, 577, 11002, 4257, 994, 380, 909, 604, 5109, 4253, 13, 50910], "temperature": 0.0, "avg_logprob": -0.1523442491192684, "compression_ratio": 1.6307692307692307, "no_speech_prob": 3.1197298085317016e-05}, {"id": 1211, "seek": 337414, "start": 3385.06, "end": 3387.74, "text": " System F didn't really add any expressivity either.", "tokens": [50910, 8910, 479, 994, 380, 534, 909, 604, 5109, 4253, 2139, 13, 51044], "temperature": 0.0, "avg_logprob": -0.1523442491192684, "compression_ratio": 1.6307692307692307, "no_speech_prob": 3.1197298085317016e-05}, {"id": 1212, "seek": 337414, "start": 3389.02, "end": 3393.18, "text": " Then on top of this, we have these languages called ML.", "tokens": [51108, 1396, 322, 1192, 295, 341, 11, 321, 362, 613, 8650, 1219, 21601, 13, 51316], "temperature": 0.0, "avg_logprob": -0.1523442491192684, "compression_ratio": 1.6307692307692307, "no_speech_prob": 3.1197298085317016e-05}, {"id": 1213, "seek": 337414, "start": 3393.18, "end": 3396.22, "text": " I think ML stands for meta language and OCaml", "tokens": [51316, 286, 519, 21601, 7382, 337, 19616, 2856, 293, 422, 31030, 75, 51468], "temperature": 0.0, "avg_logprob": -0.1523442491192684, "compression_ratio": 1.6307692307692307, "no_speech_prob": 3.1197298085317016e-05}, {"id": 1214, "seek": 337414, "start": 3396.22, "end": 3400.42, "text": " which is the sort of most widely used flavor of ML.", "tokens": [51468, 597, 307, 264, 1333, 295, 881, 13371, 1143, 6813, 295, 21601, 13, 51678], "temperature": 0.0, "avg_logprob": -0.1523442491192684, "compression_ratio": 1.6307692307692307, "no_speech_prob": 3.1197298085317016e-05}, {"id": 1215, "seek": 337414, "start": 3401.2999999999997, "end": 3403.98, "text": " And it introduced like higher level constructs", "tokens": [51722, 400, 309, 7268, 411, 2946, 1496, 7690, 82, 51856], "temperature": 0.0, "avg_logprob": -0.1523442491192684, "compression_ratio": 1.6307692307692307, "no_speech_prob": 3.1197298085317016e-05}, {"id": 1216, "seek": 340398, "start": 3403.98, "end": 3405.18, "text": " like pattern matching.", "tokens": [50364, 411, 5102, 14324, 13, 50424], "temperature": 0.0, "avg_logprob": -0.18259152826273217, "compression_ratio": 1.5037593984962405, "no_speech_prob": 0.0003458568826317787}, {"id": 1217, "seek": 340398, "start": 3405.18, "end": 3407.58, "text": " You guys haven't spent much time in functional programming.", "tokens": [50424, 509, 1074, 2378, 380, 4418, 709, 565, 294, 11745, 9410, 13, 50544], "temperature": 0.0, "avg_logprob": -0.18259152826273217, "compression_ratio": 1.5037593984962405, "no_speech_prob": 0.0003458568826317787}, {"id": 1218, "seek": 340398, "start": 3407.58, "end": 3410.7400000000002, "text": " Like it's, this whole tower is super weird", "tokens": [50544, 1743, 309, 311, 11, 341, 1379, 10567, 307, 1687, 3657, 50702], "temperature": 0.0, "avg_logprob": -0.18259152826273217, "compression_ratio": 1.5037593984962405, "no_speech_prob": 0.0003458568826317787}, {"id": 1219, "seek": 340398, "start": 3410.7400000000002, "end": 3414.66, "text": " because these constructs don't actually carry over cleanly", "tokens": [50702, 570, 613, 7690, 82, 500, 380, 767, 3985, 670, 2541, 356, 50898], "temperature": 0.0, "avg_logprob": -0.18259152826273217, "compression_ratio": 1.5037593984962405, "no_speech_prob": 0.0003458568826317787}, {"id": 1220, "seek": 340398, "start": 3414.66, "end": 3418.38, "text": " to the imperative tower.", "tokens": [50898, 281, 264, 32490, 10567, 13, 51084], "temperature": 0.0, "avg_logprob": -0.18259152826273217, "compression_ratio": 1.5037593984962405, "no_speech_prob": 0.0003458568826317787}, {"id": 1221, "seek": 340398, "start": 3418.38, "end": 3421.06, "text": " Sorry, the Von Neumann tower, the Turing tower.", "tokens": [51084, 4919, 11, 264, 20700, 1734, 449, 969, 10567, 11, 264, 314, 1345, 10567, 13, 51218], "temperature": 0.0, "avg_logprob": -0.18259152826273217, "compression_ratio": 1.5037593984962405, "no_speech_prob": 0.0003458568826317787}, {"id": 1222, "seek": 340398, "start": 3422.06, "end": 3426.02, "text": " On top of this, we have this language called Haskell", "tokens": [51268, 1282, 1192, 295, 341, 11, 321, 362, 341, 2856, 1219, 8646, 43723, 51466], "temperature": 0.0, "avg_logprob": -0.18259152826273217, "compression_ratio": 1.5037593984962405, "no_speech_prob": 0.0003458568826317787}, {"id": 1223, "seek": 340398, "start": 3426.02, "end": 3429.18, "text": " which earliest roots of it popped up in 1985.", "tokens": [51466, 597, 20573, 10669, 295, 309, 21545, 493, 294, 28962, 13, 51624], "temperature": 0.0, "avg_logprob": -0.18259152826273217, "compression_ratio": 1.5037593984962405, "no_speech_prob": 0.0003458568826317787}, {"id": 1224, "seek": 340398, "start": 3430.46, "end": 3433.22, "text": " Basically the same year that C++ came about", "tokens": [51688, 8537, 264, 912, 1064, 300, 383, 25472, 1361, 466, 51826], "temperature": 0.0, "avg_logprob": -0.18259152826273217, "compression_ratio": 1.5037593984962405, "no_speech_prob": 0.0003458568826317787}, {"id": 1225, "seek": 343322, "start": 3433.22, "end": 3435.2999999999997, "text": " was when Haskell came about", "tokens": [50364, 390, 562, 8646, 43723, 1361, 466, 50468], "temperature": 0.0, "avg_logprob": -0.12188984098888579, "compression_ratio": 1.8053097345132743, "no_speech_prob": 0.00016860812320373952}, {"id": 1226, "seek": 343322, "start": 3435.2999999999997, "end": 3438.14, "text": " or the predecessor to Haskell came about.", "tokens": [50468, 420, 264, 34991, 281, 8646, 43723, 1361, 466, 13, 50610], "temperature": 0.0, "avg_logprob": -0.12188984098888579, "compression_ratio": 1.8053097345132743, "no_speech_prob": 0.00016860812320373952}, {"id": 1227, "seek": 343322, "start": 3438.14, "end": 3439.8199999999997, "text": " And the cool thing about Haskell", "tokens": [50610, 400, 264, 1627, 551, 466, 8646, 43723, 50694], "temperature": 0.0, "avg_logprob": -0.12188984098888579, "compression_ratio": 1.8053097345132743, "no_speech_prob": 0.00016860812320373952}, {"id": 1228, "seek": 343322, "start": 3439.8199999999997, "end": 3442.8599999999997, "text": " is that it is a general purpose programming language", "tokens": [50694, 307, 300, 309, 307, 257, 2674, 4334, 9410, 2856, 50846], "temperature": 0.0, "avg_logprob": -0.12188984098888579, "compression_ratio": 1.8053097345132743, "no_speech_prob": 0.00016860812320373952}, {"id": 1229, "seek": 343322, "start": 3442.8599999999997, "end": 3445.54, "text": " that can do IO and things like that.", "tokens": [50846, 300, 393, 360, 39839, 293, 721, 411, 300, 13, 50980], "temperature": 0.0, "avg_logprob": -0.12188984098888579, "compression_ratio": 1.8053097345132743, "no_speech_prob": 0.00016860812320373952}, {"id": 1230, "seek": 343322, "start": 3445.54, "end": 3449.14, "text": " But its constructs are still pure.", "tokens": [50980, 583, 1080, 7690, 82, 366, 920, 6075, 13, 51160], "temperature": 0.0, "avg_logprob": -0.12188984098888579, "compression_ratio": 1.8053097345132743, "no_speech_prob": 0.00016860812320373952}, {"id": 1231, "seek": 343322, "start": 3449.14, "end": 3452.58, "text": " So it still has pure math functions like everywhere.", "tokens": [51160, 407, 309, 920, 575, 6075, 5221, 6828, 411, 5315, 13, 51332], "temperature": 0.0, "avg_logprob": -0.12188984098888579, "compression_ratio": 1.8053097345132743, "no_speech_prob": 0.00016860812320373952}, {"id": 1232, "seek": 343322, "start": 3452.58, "end": 3454.8199999999997, "text": " And today Haskell is sort of like the king", "tokens": [51332, 400, 965, 8646, 43723, 307, 1333, 295, 411, 264, 4867, 51444], "temperature": 0.0, "avg_logprob": -0.12188984098888579, "compression_ratio": 1.8053097345132743, "no_speech_prob": 0.00016860812320373952}, {"id": 1233, "seek": 343322, "start": 3454.8199999999997, "end": 3457.62, "text": " of statically typed functional programming languages.", "tokens": [51444, 295, 2219, 984, 33941, 11745, 9410, 8650, 13, 51584], "temperature": 0.0, "avg_logprob": -0.12188984098888579, "compression_ratio": 1.8053097345132743, "no_speech_prob": 0.00016860812320373952}, {"id": 1234, "seek": 343322, "start": 3459.5, "end": 3460.8199999999997, "text": " But now we get into some stuff", "tokens": [51678, 583, 586, 321, 483, 666, 512, 1507, 51744], "temperature": 0.0, "avg_logprob": -0.12188984098888579, "compression_ratio": 1.8053097345132743, "no_speech_prob": 0.00016860812320373952}, {"id": 1235, "seek": 346082, "start": 3460.82, "end": 3464.7000000000003, "text": " which might be more relevant to your guys' experience.", "tokens": [50364, 597, 1062, 312, 544, 7340, 281, 428, 1074, 6, 1752, 13, 50558], "temperature": 0.0, "avg_logprob": -0.12249815567680027, "compression_ratio": 1.564102564102564, "no_speech_prob": 0.0004171585605945438}, {"id": 1236, "seek": 346082, "start": 3464.7000000000003, "end": 3467.26, "text": " In 2012, Elm kind of popped up", "tokens": [50558, 682, 9125, 11, 2699, 76, 733, 295, 21545, 493, 50686], "temperature": 0.0, "avg_logprob": -0.12249815567680027, "compression_ratio": 1.564102564102564, "no_speech_prob": 0.0004171585605945438}, {"id": 1237, "seek": 346082, "start": 3467.26, "end": 3470.1400000000003, "text": " and Elm is very much a functional programming language", "tokens": [50686, 293, 2699, 76, 307, 588, 709, 257, 11745, 9410, 2856, 50830], "temperature": 0.0, "avg_logprob": -0.12249815567680027, "compression_ratio": 1.564102564102564, "no_speech_prob": 0.0004171585605945438}, {"id": 1238, "seek": 346082, "start": 3470.1400000000003, "end": 3472.5800000000004, "text": " even though it compiles down into JavaScript.", "tokens": [50830, 754, 1673, 309, 715, 4680, 760, 666, 15778, 13, 50952], "temperature": 0.0, "avg_logprob": -0.12249815567680027, "compression_ratio": 1.564102564102564, "no_speech_prob": 0.0004171585605945438}, {"id": 1239, "seek": 346082, "start": 3472.5800000000004, "end": 3477.1400000000003, "text": " And the Elm people essentially pioneered", "tokens": [50952, 400, 264, 2699, 76, 561, 4476, 19761, 4073, 51180], "temperature": 0.0, "avg_logprob": -0.12249815567680027, "compression_ratio": 1.564102564102564, "no_speech_prob": 0.0004171585605945438}, {"id": 1240, "seek": 346082, "start": 3477.1400000000003, "end": 3479.42, "text": " the flux-redex pattern.", "tokens": [51180, 264, 19298, 12, 986, 3121, 5102, 13, 51294], "temperature": 0.0, "avg_logprob": -0.12249815567680027, "compression_ratio": 1.564102564102564, "no_speech_prob": 0.0004171585605945438}, {"id": 1241, "seek": 346082, "start": 3479.42, "end": 3482.78, "text": " So this idea that actions result in", "tokens": [51294, 407, 341, 1558, 300, 5909, 1874, 294, 51462], "temperature": 0.0, "avg_logprob": -0.12249815567680027, "compression_ratio": 1.564102564102564, "no_speech_prob": 0.0004171585605945438}, {"id": 1242, "seek": 346082, "start": 3483.98, "end": 3485.7400000000002, "text": " essentially the production of a new state", "tokens": [51522, 4476, 264, 4265, 295, 257, 777, 1785, 51610], "temperature": 0.0, "avg_logprob": -0.12249815567680027, "compression_ratio": 1.564102564102564, "no_speech_prob": 0.0004171585605945438}, {"id": 1243, "seek": 346082, "start": 3485.7400000000002, "end": 3488.2200000000003, "text": " and that new state can be used to render a new view", "tokens": [51610, 293, 300, 777, 1785, 393, 312, 1143, 281, 15529, 257, 777, 1910, 51734], "temperature": 0.0, "avg_logprob": -0.12249815567680027, "compression_ratio": 1.564102564102564, "no_speech_prob": 0.0004171585605945438}, {"id": 1244, "seek": 346082, "start": 3488.2200000000003, "end": 3490.42, "text": " and there's a sort of like one-way data flow.", "tokens": [51734, 293, 456, 311, 257, 1333, 295, 411, 472, 12, 676, 1412, 3095, 13, 51844], "temperature": 0.0, "avg_logprob": -0.12249815567680027, "compression_ratio": 1.564102564102564, "no_speech_prob": 0.0004171585605945438}, {"id": 1245, "seek": 349042, "start": 3490.46, "end": 3493.3, "text": " This idea popped up in 2012.", "tokens": [50366, 639, 1558, 21545, 493, 294, 9125, 13, 50508], "temperature": 0.0, "avg_logprob": -0.14571009096891985, "compression_ratio": 1.62890625, "no_speech_prob": 4.005429218523204e-05}, {"id": 1246, "seek": 349042, "start": 3493.3, "end": 3495.66, "text": " But if you're kind of thinking about the world", "tokens": [50508, 583, 498, 291, 434, 733, 295, 1953, 466, 264, 1002, 50626], "temperature": 0.0, "avg_logprob": -0.14571009096891985, "compression_ratio": 1.62890625, "no_speech_prob": 4.005429218523204e-05}, {"id": 1247, "seek": 349042, "start": 3495.66, "end": 3497.66, "text": " in terms of the Lambda calculus tower,", "tokens": [50626, 294, 2115, 295, 264, 45691, 33400, 10567, 11, 50726], "temperature": 0.0, "avg_logprob": -0.14571009096891985, "compression_ratio": 1.62890625, "no_speech_prob": 4.005429218523204e-05}, {"id": 1248, "seek": 349042, "start": 3497.66, "end": 3500.26, "text": " this idea is actually not that novel.", "tokens": [50726, 341, 1558, 307, 767, 406, 300, 7613, 13, 50856], "temperature": 0.0, "avg_logprob": -0.14571009096891985, "compression_ratio": 1.62890625, "no_speech_prob": 4.005429218523204e-05}, {"id": 1249, "seek": 349042, "start": 3500.26, "end": 3503.42, "text": " It's sort of a very obvious outcome", "tokens": [50856, 467, 311, 1333, 295, 257, 588, 6322, 9700, 51014], "temperature": 0.0, "avg_logprob": -0.14571009096891985, "compression_ratio": 1.62890625, "no_speech_prob": 4.005429218523204e-05}, {"id": 1250, "seek": 349042, "start": 3503.42, "end": 3505.82, "text": " of dealing with the constraints of the Lambda tower.", "tokens": [51014, 295, 6260, 365, 264, 18491, 295, 264, 45691, 10567, 13, 51134], "temperature": 0.0, "avg_logprob": -0.14571009096891985, "compression_ratio": 1.62890625, "no_speech_prob": 4.005429218523204e-05}, {"id": 1251, "seek": 349042, "start": 3507.58, "end": 3510.9, "text": " Then from here in 2013, we have React.", "tokens": [51222, 1396, 490, 510, 294, 9012, 11, 321, 362, 30644, 13, 51388], "temperature": 0.0, "avg_logprob": -0.14571009096891985, "compression_ratio": 1.62890625, "no_speech_prob": 4.005429218523204e-05}, {"id": 1252, "seek": 349042, "start": 3510.9, "end": 3513.7400000000002, "text": " React kind of makes a claim that the view", "tokens": [51388, 30644, 733, 295, 1669, 257, 3932, 300, 264, 1910, 51530], "temperature": 0.0, "avg_logprob": -0.14571009096891985, "compression_ratio": 1.62890625, "no_speech_prob": 4.005429218523204e-05}, {"id": 1253, "seek": 349042, "start": 3513.7400000000002, "end": 3517.54, "text": " needs to be a pure function of the state or your props.", "tokens": [51530, 2203, 281, 312, 257, 6075, 2445, 295, 264, 1785, 420, 428, 26173, 13, 51720], "temperature": 0.0, "avg_logprob": -0.14571009096891985, "compression_ratio": 1.62890625, "no_speech_prob": 4.005429218523204e-05}, {"id": 1254, "seek": 349042, "start": 3518.58, "end": 3519.78, "text": " But really it's kind of just the same.", "tokens": [51772, 583, 534, 309, 311, 733, 295, 445, 264, 912, 13, 51832], "temperature": 0.0, "avg_logprob": -0.14571009096891985, "compression_ratio": 1.62890625, "no_speech_prob": 4.005429218523204e-05}, {"id": 1255, "seek": 351978, "start": 3519.78, "end": 3523.3, "text": " So given a state, we can always render the same view", "tokens": [50364, 407, 2212, 257, 1785, 11, 321, 393, 1009, 15529, 264, 912, 1910, 50540], "temperature": 0.0, "avg_logprob": -0.18573143135788095, "compression_ratio": 1.6036363636363635, "no_speech_prob": 5.30679062649142e-05}, {"id": 1256, "seek": 351978, "start": 3523.3, "end": 3525.82, "text": " like deterministically as a pure function.", "tokens": [50540, 411, 15957, 20458, 382, 257, 6075, 2445, 13, 50666], "temperature": 0.0, "avg_logprob": -0.18573143135788095, "compression_ratio": 1.6036363636363635, "no_speech_prob": 5.30679062649142e-05}, {"id": 1257, "seek": 351978, "start": 3525.82, "end": 3528.94, "text": " And at first, like if you're coming from jQuery,", "tokens": [50666, 400, 412, 700, 11, 411, 498, 291, 434, 1348, 490, 361, 35550, 11, 50822], "temperature": 0.0, "avg_logprob": -0.18573143135788095, "compression_ratio": 1.6036363636363635, "no_speech_prob": 5.30679062649142e-05}, {"id": 1258, "seek": 351978, "start": 3528.94, "end": 3530.86, "text": " adopting the React pattern was probably", "tokens": [50822, 32328, 264, 30644, 5102, 390, 1391, 50918], "temperature": 0.0, "avg_logprob": -0.18573143135788095, "compression_ratio": 1.6036363636363635, "no_speech_prob": 5.30679062649142e-05}, {"id": 1259, "seek": 351978, "start": 3530.86, "end": 3533.3, "text": " like extremely frustrating.", "tokens": [50918, 411, 4664, 16522, 13, 51040], "temperature": 0.0, "avg_logprob": -0.18573143135788095, "compression_ratio": 1.6036363636363635, "no_speech_prob": 5.30679062649142e-05}, {"id": 1260, "seek": 351978, "start": 3533.3, "end": 3536.98, "text": " And for those of you, if you kind of recall back", "tokens": [51040, 400, 337, 729, 295, 291, 11, 498, 291, 733, 295, 9901, 646, 51224], "temperature": 0.0, "avg_logprob": -0.18573143135788095, "compression_ratio": 1.6036363636363635, "no_speech_prob": 5.30679062649142e-05}, {"id": 1261, "seek": 351978, "start": 3536.98, "end": 3538.9, "text": " to your first experiences with React,", "tokens": [51224, 281, 428, 700, 5235, 365, 30644, 11, 51320], "temperature": 0.0, "avg_logprob": -0.18573143135788095, "compression_ratio": 1.6036363636363635, "no_speech_prob": 5.30679062649142e-05}, {"id": 1262, "seek": 351978, "start": 3539.9, "end": 3542.38, "text": " you kind of felt like there was these artificial constraints", "tokens": [51370, 291, 733, 295, 2762, 411, 456, 390, 613, 11677, 18491, 51494], "temperature": 0.0, "avg_logprob": -0.18573143135788095, "compression_ratio": 1.6036363636363635, "no_speech_prob": 5.30679062649142e-05}, {"id": 1263, "seek": 351978, "start": 3542.38, "end": 3543.46, "text": " being imposed upon you.", "tokens": [51494, 885, 26491, 3564, 291, 13, 51548], "temperature": 0.0, "avg_logprob": -0.18573143135788095, "compression_ratio": 1.6036363636363635, "no_speech_prob": 5.30679062649142e-05}, {"id": 1264, "seek": 351978, "start": 3543.46, "end": 3545.6200000000003, "text": " Like I just want to hide the modal.", "tokens": [51548, 1743, 286, 445, 528, 281, 6479, 264, 39745, 13, 51656], "temperature": 0.0, "avg_logprob": -0.18573143135788095, "compression_ratio": 1.6036363636363635, "no_speech_prob": 5.30679062649142e-05}, {"id": 1265, "seek": 351978, "start": 3545.6200000000003, "end": 3547.1800000000003, "text": " Why can't I do that?", "tokens": [51656, 1545, 393, 380, 286, 360, 300, 30, 51734], "temperature": 0.0, "avg_logprob": -0.18573143135788095, "compression_ratio": 1.6036363636363635, "no_speech_prob": 5.30679062649142e-05}, {"id": 1266, "seek": 354718, "start": 3547.3799999999997, "end": 3548.22, "text": " Right?", "tokens": [50374, 1779, 30, 50416], "temperature": 0.0, "avg_logprob": -0.16999601203704548, "compression_ratio": 1.5719844357976653, "no_speech_prob": 7.72135317674838e-05}, {"id": 1267, "seek": 354718, "start": 3549.62, "end": 3551.1, "text": " But then eventually as you start to build", "tokens": [50486, 583, 550, 4728, 382, 291, 722, 281, 1322, 50560], "temperature": 0.0, "avg_logprob": -0.16999601203704548, "compression_ratio": 1.5719844357976653, "no_speech_prob": 7.72135317674838e-05}, {"id": 1268, "seek": 354718, "start": 3551.1, "end": 3554.2599999999998, "text": " larger and larger apps, you realize", "tokens": [50560, 4833, 293, 4833, 7733, 11, 291, 4325, 50718], "temperature": 0.0, "avg_logprob": -0.16999601203704548, "compression_ratio": 1.5719844357976653, "no_speech_prob": 7.72135317674838e-05}, {"id": 1269, "seek": 354718, "start": 3554.2599999999998, "end": 3557.02, "text": " that like this sort of one-way data flow constraint", "tokens": [50718, 300, 411, 341, 1333, 295, 472, 12, 676, 1412, 3095, 25534, 50856], "temperature": 0.0, "avg_logprob": -0.16999601203704548, "compression_ratio": 1.5719844357976653, "no_speech_prob": 7.72135317674838e-05}, {"id": 1270, "seek": 354718, "start": 3557.02, "end": 3559.7, "text": " makes it way more easy to reason about", "tokens": [50856, 1669, 309, 636, 544, 1858, 281, 1778, 466, 50990], "temperature": 0.0, "avg_logprob": -0.16999601203704548, "compression_ratio": 1.5719844357976653, "no_speech_prob": 7.72135317674838e-05}, {"id": 1271, "seek": 354718, "start": 3559.7, "end": 3562.5, "text": " what your view is going to look like given a state.", "tokens": [50990, 437, 428, 1910, 307, 516, 281, 574, 411, 2212, 257, 1785, 13, 51130], "temperature": 0.0, "avg_logprob": -0.16999601203704548, "compression_ratio": 1.5719844357976653, "no_speech_prob": 7.72135317674838e-05}, {"id": 1272, "seek": 354718, "start": 3562.5, "end": 3565.02, "text": " And the point I'm trying to make over here", "tokens": [51130, 400, 264, 935, 286, 478, 1382, 281, 652, 670, 510, 51256], "temperature": 0.0, "avg_logprob": -0.16999601203704548, "compression_ratio": 1.5719844357976653, "no_speech_prob": 7.72135317674838e-05}, {"id": 1273, "seek": 354718, "start": 3565.02, "end": 3569.2599999999998, "text": " is that one, these ideas are not new.", "tokens": [51256, 307, 300, 472, 11, 613, 3487, 366, 406, 777, 13, 51468], "temperature": 0.0, "avg_logprob": -0.16999601203704548, "compression_ratio": 1.5719844357976653, "no_speech_prob": 7.72135317674838e-05}, {"id": 1274, "seek": 354718, "start": 3570.14, "end": 3573.18, "text": " Like Lambda calculus kind of forces us", "tokens": [51512, 1743, 45691, 33400, 733, 295, 5874, 505, 51664], "temperature": 0.0, "avg_logprob": -0.16999601203704548, "compression_ratio": 1.5719844357976653, "no_speech_prob": 7.72135317674838e-05}, {"id": 1275, "seek": 354718, "start": 3573.18, "end": 3576.2599999999998, "text": " to embody this perspective that the output of a function", "tokens": [51664, 281, 42575, 341, 4585, 300, 264, 5598, 295, 257, 2445, 51818], "temperature": 0.0, "avg_logprob": -0.16999601203704548, "compression_ratio": 1.5719844357976653, "no_speech_prob": 7.72135317674838e-05}, {"id": 1276, "seek": 357626, "start": 3576.3, "end": 3580.26, "text": " is a pure outcome of its inputs, right?", "tokens": [50366, 307, 257, 6075, 9700, 295, 1080, 15743, 11, 558, 30, 50564], "temperature": 0.0, "avg_logprob": -0.11121356712197358, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.00024527727509848773}, {"id": 1277, "seek": 357626, "start": 3580.26, "end": 3583.78, "text": " And it's just now in like 2012, 2013", "tokens": [50564, 400, 309, 311, 445, 586, 294, 411, 9125, 11, 9012, 50740], "temperature": 0.0, "avg_logprob": -0.11121356712197358, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.00024527727509848773}, {"id": 1278, "seek": 357626, "start": 3583.78, "end": 3586.5, "text": " that we're starting to re-embrace these ideas.", "tokens": [50740, 300, 321, 434, 2891, 281, 319, 12, 443, 1443, 617, 613, 3487, 13, 50876], "temperature": 0.0, "avg_logprob": -0.11121356712197358, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.00024527727509848773}, {"id": 1279, "seek": 357626, "start": 3586.5, "end": 3589.26, "text": " And I guess most of us believe", "tokens": [50876, 400, 286, 2041, 881, 295, 505, 1697, 51014], "temperature": 0.0, "avg_logprob": -0.11121356712197358, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.00024527727509848773}, {"id": 1280, "seek": 357626, "start": 3589.26, "end": 3592.34, "text": " that I can't even imagine building a UI", "tokens": [51014, 300, 286, 393, 380, 754, 3811, 2390, 257, 15682, 51168], "temperature": 0.0, "avg_logprob": -0.11121356712197358, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.00024527727509848773}, {"id": 1281, "seek": 357626, "start": 3592.34, "end": 3594.46, "text": " in a non-reactive way.", "tokens": [51168, 294, 257, 2107, 12, 265, 12596, 636, 13, 51274], "temperature": 0.0, "avg_logprob": -0.11121356712197358, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.00024527727509848773}, {"id": 1282, "seek": 357626, "start": 3594.46, "end": 3596.0600000000004, "text": " It's sort of like taken as given.", "tokens": [51274, 467, 311, 1333, 295, 411, 2726, 382, 2212, 13, 51354], "temperature": 0.0, "avg_logprob": -0.11121356712197358, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.00024527727509848773}, {"id": 1283, "seek": 357626, "start": 3596.0600000000004, "end": 3599.7000000000003, "text": " And so I think that if more engineers spend time", "tokens": [51354, 400, 370, 286, 519, 300, 498, 544, 11955, 3496, 565, 51536], "temperature": 0.0, "avg_logprob": -0.11121356712197358, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.00024527727509848773}, {"id": 1284, "seek": 357626, "start": 3599.7000000000003, "end": 3603.1800000000003, "text": " kind of thinking about the history of this thing,", "tokens": [51536, 733, 295, 1953, 466, 264, 2503, 295, 341, 551, 11, 51710], "temperature": 0.0, "avg_logprob": -0.11121356712197358, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.00024527727509848773}, {"id": 1285, "seek": 360318, "start": 3603.22, "end": 3605.1, "text": " it becomes a lot more like,", "tokens": [50366, 309, 3643, 257, 688, 544, 411, 11, 50460], "temperature": 0.0, "avg_logprob": -0.1458646697227401, "compression_ratio": 1.75, "no_speech_prob": 0.00011233715486014262}, {"id": 1286, "seek": 360318, "start": 3606.22, "end": 3609.8599999999997, "text": " you can understand more like why React looks the way it does", "tokens": [50516, 291, 393, 1223, 544, 411, 983, 30644, 1542, 264, 636, 309, 775, 50698], "temperature": 0.0, "avg_logprob": -0.1458646697227401, "compression_ratio": 1.75, "no_speech_prob": 0.00011233715486014262}, {"id": 1287, "seek": 360318, "start": 3609.8599999999997, "end": 3611.98, "text": " or why Elm looks the way it does.", "tokens": [50698, 420, 983, 2699, 76, 1542, 264, 636, 309, 775, 13, 50804], "temperature": 0.0, "avg_logprob": -0.1458646697227401, "compression_ratio": 1.75, "no_speech_prob": 0.00011233715486014262}, {"id": 1288, "seek": 360318, "start": 3611.98, "end": 3616.18, "text": " And rather than trying to apply your like Turing machine", "tokens": [50804, 400, 2831, 813, 1382, 281, 3079, 428, 411, 314, 1345, 3479, 51014], "temperature": 0.0, "avg_logprob": -0.1458646697227401, "compression_ratio": 1.75, "no_speech_prob": 0.00011233715486014262}, {"id": 1289, "seek": 360318, "start": 3616.18, "end": 3619.18, "text": " imperative programming mindset to functional programming,", "tokens": [51014, 32490, 9410, 12543, 281, 11745, 9410, 11, 51164], "temperature": 0.0, "avg_logprob": -0.1458646697227401, "compression_ratio": 1.75, "no_speech_prob": 0.00011233715486014262}, {"id": 1290, "seek": 360318, "start": 3619.18, "end": 3621.4199999999996, "text": " you can kind of build your way up", "tokens": [51164, 291, 393, 733, 295, 1322, 428, 636, 493, 51276], "temperature": 0.0, "avg_logprob": -0.1458646697227401, "compression_ratio": 1.75, "no_speech_prob": 0.00011233715486014262}, {"id": 1291, "seek": 360318, "start": 3621.4199999999996, "end": 3623.22, "text": " starting with Lambda calculus going up.", "tokens": [51276, 2891, 365, 45691, 33400, 516, 493, 13, 51366], "temperature": 0.0, "avg_logprob": -0.1458646697227401, "compression_ratio": 1.75, "no_speech_prob": 0.00011233715486014262}, {"id": 1292, "seek": 360318, "start": 3623.22, "end": 3626.7, "text": " And I think that path actually makes it much more easy", "tokens": [51366, 400, 286, 519, 300, 3100, 767, 1669, 309, 709, 544, 1858, 51540], "temperature": 0.0, "avg_logprob": -0.1458646697227401, "compression_ratio": 1.75, "no_speech_prob": 0.00011233715486014262}, {"id": 1293, "seek": 360318, "start": 3626.7, "end": 3628.54, "text": " to reason about functional programming.", "tokens": [51540, 281, 1778, 466, 11745, 9410, 13, 51632], "temperature": 0.0, "avg_logprob": -0.1458646697227401, "compression_ratio": 1.75, "no_speech_prob": 0.00011233715486014262}, {"id": 1294, "seek": 362854, "start": 3628.66, "end": 3633.66, "text": " As a fun side effect or a fun anecdote,", "tokens": [50370, 1018, 257, 1019, 1252, 1802, 420, 257, 1019, 49845, 11, 50620], "temperature": 0.0, "avg_logprob": -0.2826362766631662, "compression_ratio": 1.446808510638298, "no_speech_prob": 9.168560791295022e-05}, {"id": 1295, "seek": 362854, "start": 3637.94, "end": 3640.18, "text": " the original compiler for React", "tokens": [50834, 264, 3380, 31958, 337, 30644, 50946], "temperature": 0.0, "avg_logprob": -0.2826362766631662, "compression_ratio": 1.446808510638298, "no_speech_prob": 9.168560791295022e-05}, {"id": 1296, "seek": 362854, "start": 3640.18, "end": 3643.86, "text": " when it was still like an experimental project at Facebook", "tokens": [50946, 562, 309, 390, 920, 411, 364, 17069, 1716, 412, 4384, 51130], "temperature": 0.0, "avg_logprob": -0.2826362766631662, "compression_ratio": 1.446808510638298, "no_speech_prob": 9.168560791295022e-05}, {"id": 1297, "seek": 362854, "start": 3643.86, "end": 3645.14, "text": " was written in OCaml.", "tokens": [51130, 390, 3720, 294, 422, 31030, 75, 13, 51194], "temperature": 0.0, "avg_logprob": -0.2826362766631662, "compression_ratio": 1.446808510638298, "no_speech_prob": 9.168560791295022e-05}, {"id": 1298, "seek": 362854, "start": 3648.06, "end": 3650.74, "text": " All right, so the final like concession that I'll make", "tokens": [51340, 1057, 558, 11, 370, 264, 2572, 411, 416, 29881, 300, 286, 603, 652, 51474], "temperature": 0.0, "avg_logprob": -0.2826362766631662, "compression_ratio": 1.446808510638298, "no_speech_prob": 9.168560791295022e-05}, {"id": 1299, "seek": 362854, "start": 3650.74, "end": 3653.74, "text": " is that Lambda calculus is really hard", "tokens": [51474, 307, 300, 45691, 33400, 307, 534, 1152, 51624], "temperature": 0.0, "avg_logprob": -0.2826362766631662, "compression_ratio": 1.446808510638298, "no_speech_prob": 9.168560791295022e-05}, {"id": 1300, "seek": 362854, "start": 3653.74, "end": 3655.9, "text": " to implement in hardware.", "tokens": [51624, 281, 4445, 294, 8837, 13, 51732], "temperature": 0.0, "avg_logprob": -0.2826362766631662, "compression_ratio": 1.446808510638298, "no_speech_prob": 9.168560791295022e-05}, {"id": 1301, "seek": 365590, "start": 3655.9, "end": 3659.7000000000003, "text": " And whereas the Turing machine von Neumann model", "tokens": [50364, 400, 9735, 264, 314, 1345, 3479, 2957, 1734, 449, 969, 2316, 50554], "temperature": 0.0, "avg_logprob": -0.16605545492733226, "compression_ratio": 1.5887445887445888, "no_speech_prob": 1.3211270015744958e-05}, {"id": 1302, "seek": 365590, "start": 3659.7000000000003, "end": 3661.98, "text": " is obviously very easy to implement in hardware.", "tokens": [50554, 307, 2745, 588, 1858, 281, 4445, 294, 8837, 13, 50668], "temperature": 0.0, "avg_logprob": -0.16605545492733226, "compression_ratio": 1.5887445887445888, "no_speech_prob": 1.3211270015744958e-05}, {"id": 1303, "seek": 365590, "start": 3665.42, "end": 3667.86, "text": " Okay, final slide.", "tokens": [50840, 1033, 11, 2572, 4137, 13, 50962], "temperature": 0.0, "avg_logprob": -0.16605545492733226, "compression_ratio": 1.5887445887445888, "no_speech_prob": 1.3211270015744958e-05}, {"id": 1304, "seek": 365590, "start": 3667.86, "end": 3669.78, "text": " React is to jQuery as Lambda calculus", "tokens": [50962, 30644, 307, 281, 361, 35550, 382, 45691, 33400, 51058], "temperature": 0.0, "avg_logprob": -0.16605545492733226, "compression_ratio": 1.5887445887445888, "no_speech_prob": 1.3211270015744958e-05}, {"id": 1305, "seek": 365590, "start": 3669.78, "end": 3670.98, "text": " is to the Turing machine.", "tokens": [51058, 307, 281, 264, 314, 1345, 3479, 13, 51118], "temperature": 0.0, "avg_logprob": -0.16605545492733226, "compression_ratio": 1.5887445887445888, "no_speech_prob": 1.3211270015744958e-05}, {"id": 1306, "seek": 365590, "start": 3672.14, "end": 3675.3, "text": " So in jQuery, you have this concept called", "tokens": [51176, 407, 294, 361, 35550, 11, 291, 362, 341, 3410, 1219, 51334], "temperature": 0.0, "avg_logprob": -0.16605545492733226, "compression_ratio": 1.5887445887445888, "no_speech_prob": 1.3211270015744958e-05}, {"id": 1307, "seek": 365590, "start": 3675.3, "end": 3677.3, "text": " like the DOM is your state.", "tokens": [51334, 411, 264, 35727, 307, 428, 1785, 13, 51434], "temperature": 0.0, "avg_logprob": -0.16605545492733226, "compression_ratio": 1.5887445887445888, "no_speech_prob": 1.3211270015744958e-05}, {"id": 1308, "seek": 365590, "start": 3677.3, "end": 3681.06, "text": " So all of the HTML elements that are there is your state.", "tokens": [51434, 407, 439, 295, 264, 17995, 4959, 300, 366, 456, 307, 428, 1785, 13, 51622], "temperature": 0.0, "avg_logprob": -0.16605545492733226, "compression_ratio": 1.5887445887445888, "no_speech_prob": 1.3211270015744958e-05}, {"id": 1309, "seek": 365590, "start": 3681.06, "end": 3684.38, "text": " You've probably written jQuery code that looks like this.", "tokens": [51622, 509, 600, 1391, 3720, 361, 35550, 3089, 300, 1542, 411, 341, 13, 51788], "temperature": 0.0, "avg_logprob": -0.16605545492733226, "compression_ratio": 1.5887445887445888, "no_speech_prob": 1.3211270015744958e-05}, {"id": 1310, "seek": 368438, "start": 3684.38, "end": 3687.3, "text": " jQuery.model.show and shows the modal.", "tokens": [50364, 361, 35550, 13, 8014, 338, 13, 34436, 293, 3110, 264, 39745, 13, 50510], "temperature": 0.0, "avg_logprob": -0.147562310247138, "compression_ratio": 1.6196581196581197, "no_speech_prob": 0.0004172234330326319}, {"id": 1311, "seek": 368438, "start": 3687.3, "end": 3689.1, "text": " And basically what I'm trying to get at here", "tokens": [50510, 400, 1936, 437, 286, 478, 1382, 281, 483, 412, 510, 50600], "temperature": 0.0, "avg_logprob": -0.147562310247138, "compression_ratio": 1.6196581196581197, "no_speech_prob": 0.0004172234330326319}, {"id": 1312, "seek": 368438, "start": 3689.1, "end": 3692.2200000000003, "text": " is that whether the modal is being shown", "tokens": [50600, 307, 300, 1968, 264, 39745, 307, 885, 4898, 50756], "temperature": 0.0, "avg_logprob": -0.147562310247138, "compression_ratio": 1.6196581196581197, "no_speech_prob": 0.0004172234330326319}, {"id": 1313, "seek": 368438, "start": 3693.1, "end": 3697.3, "text": " is encoded in the DOM itself.", "tokens": [50800, 307, 2058, 12340, 294, 264, 35727, 2564, 13, 51010], "temperature": 0.0, "avg_logprob": -0.147562310247138, "compression_ratio": 1.6196581196581197, "no_speech_prob": 0.0004172234330326319}, {"id": 1314, "seek": 368438, "start": 3699.26, "end": 3701.58, "text": " Anything can make modifications to the DOM", "tokens": [51108, 11998, 393, 652, 26881, 281, 264, 35727, 51224], "temperature": 0.0, "avg_logprob": -0.147562310247138, "compression_ratio": 1.6196581196581197, "no_speech_prob": 0.0004172234330326319}, {"id": 1315, "seek": 368438, "start": 3701.58, "end": 3704.38, "text": " and the DOM as a result ends up", "tokens": [51224, 293, 264, 35727, 382, 257, 1874, 5314, 493, 51364], "temperature": 0.0, "avg_logprob": -0.147562310247138, "compression_ratio": 1.6196581196581197, "no_speech_prob": 0.0004172234330326319}, {"id": 1316, "seek": 368438, "start": 3704.38, "end": 3706.6600000000003, "text": " in these weird unexpected states", "tokens": [51364, 294, 613, 3657, 13106, 4368, 51478], "temperature": 0.0, "avg_logprob": -0.147562310247138, "compression_ratio": 1.6196581196581197, "no_speech_prob": 0.0004172234330326319}, {"id": 1317, "seek": 368438, "start": 3706.6600000000003, "end": 3708.98, "text": " because you didn't precisely reason", "tokens": [51478, 570, 291, 994, 380, 13402, 1778, 51594], "temperature": 0.0, "avg_logprob": -0.147562310247138, "compression_ratio": 1.6196581196581197, "no_speech_prob": 0.0004172234330326319}, {"id": 1318, "seek": 368438, "start": 3708.98, "end": 3710.82, "text": " about state modifications,", "tokens": [51594, 466, 1785, 26881, 11, 51686], "temperature": 0.0, "avg_logprob": -0.147562310247138, "compression_ratio": 1.6196581196581197, "no_speech_prob": 0.0004172234330326319}, {"id": 1319, "seek": 368438, "start": 3710.82, "end": 3714.08, "text": " kind of just wrote code like this over and over again", "tokens": [51686, 733, 295, 445, 4114, 3089, 411, 341, 670, 293, 670, 797, 51849], "temperature": 0.0, "avg_logprob": -0.147562310247138, "compression_ratio": 1.6196581196581197, "no_speech_prob": 0.0004172234330326319}, {"id": 1320, "seek": 371408, "start": 3714.08, "end": 3716.52, "text": " until it essentially resulted", "tokens": [50364, 1826, 309, 4476, 18753, 50486], "temperature": 0.0, "avg_logprob": -0.1316707572158502, "compression_ratio": 1.645021645021645, "no_speech_prob": 0.0001333696418441832}, {"id": 1321, "seek": 371408, "start": 3716.52, "end": 3718.88, "text": " in a Turing machine like construct", "tokens": [50486, 294, 257, 314, 1345, 3479, 411, 7690, 50604], "temperature": 0.0, "avg_logprob": -0.1316707572158502, "compression_ratio": 1.645021645021645, "no_speech_prob": 0.0001333696418441832}, {"id": 1322, "seek": 371408, "start": 3718.88, "end": 3723.44, "text": " where it's difficult to reason about the tape.", "tokens": [50604, 689, 309, 311, 2252, 281, 1778, 466, 264, 7314, 13, 50832], "temperature": 0.0, "avg_logprob": -0.1316707572158502, "compression_ratio": 1.645021645021645, "no_speech_prob": 0.0001333696418441832}, {"id": 1323, "seek": 371408, "start": 3723.44, "end": 3727.52, "text": " And so in React, the state is explicitly defined, right?", "tokens": [50832, 400, 370, 294, 30644, 11, 264, 1785, 307, 20803, 7642, 11, 558, 30, 51036], "temperature": 0.0, "avg_logprob": -0.1316707572158502, "compression_ratio": 1.645021645021645, "no_speech_prob": 0.0001333696418441832}, {"id": 1324, "seek": 371408, "start": 3727.52, "end": 3731.1, "text": " It's an input to your render function kind of implicitly", "tokens": [51036, 467, 311, 364, 4846, 281, 428, 15529, 2445, 733, 295, 26947, 356, 51215], "temperature": 0.0, "avg_logprob": -0.1316707572158502, "compression_ratio": 1.645021645021645, "no_speech_prob": 0.0001333696418441832}, {"id": 1325, "seek": 371408, "start": 3731.1, "end": 3733.4, "text": " and your view is a pure function of the state.", "tokens": [51215, 293, 428, 1910, 307, 257, 6075, 2445, 295, 264, 1785, 13, 51330], "temperature": 0.0, "avg_logprob": -0.1316707572158502, "compression_ratio": 1.645021645021645, "no_speech_prob": 0.0001333696418441832}, {"id": 1326, "seek": 371408, "start": 3734.3199999999997, "end": 3737.94, "text": " And you don't modify the state, you produce a new state.", "tokens": [51376, 400, 291, 500, 380, 16927, 264, 1785, 11, 291, 5258, 257, 777, 1785, 13, 51557], "temperature": 0.0, "avg_logprob": -0.1316707572158502, "compression_ratio": 1.645021645021645, "no_speech_prob": 0.0001333696418441832}, {"id": 1327, "seek": 371408, "start": 3739.24, "end": 3741.96, "text": " And so React's constraints actually make it easier", "tokens": [51622, 400, 370, 30644, 311, 18491, 767, 652, 309, 3571, 51758], "temperature": 0.0, "avg_logprob": -0.1316707572158502, "compression_ratio": 1.645021645021645, "no_speech_prob": 0.0001333696418441832}, {"id": 1328, "seek": 374196, "start": 3742.0, "end": 3744.88, "text": " to reason about the state and the DOM.", "tokens": [50366, 281, 1778, 466, 264, 1785, 293, 264, 35727, 13, 50510], "temperature": 0.0, "avg_logprob": -0.16285730116438157, "compression_ratio": 1.5806451612903225, "no_speech_prob": 7.966379780555144e-05}, {"id": 1329, "seek": 374196, "start": 3744.88, "end": 3748.2400000000002, "text": " And by analogy, functional programming's constraints", "tokens": [50510, 400, 538, 21663, 11, 11745, 9410, 311, 18491, 50678], "temperature": 0.0, "avg_logprob": -0.16285730116438157, "compression_ratio": 1.5806451612903225, "no_speech_prob": 7.966379780555144e-05}, {"id": 1330, "seek": 374196, "start": 3748.2400000000002, "end": 3750.6, "text": " make it easier to reason about programs.", "tokens": [50678, 652, 309, 3571, 281, 1778, 466, 4268, 13, 50796], "temperature": 0.0, "avg_logprob": -0.16285730116438157, "compression_ratio": 1.5806451612903225, "no_speech_prob": 7.966379780555144e-05}, {"id": 1331, "seek": 374196, "start": 3752.64, "end": 3754.32, "text": " And so if you're intrigued", "tokens": [50898, 400, 370, 498, 291, 434, 35140, 50982], "temperature": 0.0, "avg_logprob": -0.16285730116438157, "compression_ratio": 1.5806451612903225, "no_speech_prob": 7.966379780555144e-05}, {"id": 1332, "seek": 374196, "start": 3756.44, "end": 3758.64, "text": " and wanna learn more about the Lambda Tower,", "tokens": [51088, 293, 1948, 1466, 544, 466, 264, 45691, 17877, 11, 51198], "temperature": 0.0, "avg_logprob": -0.16285730116438157, "compression_ratio": 1.5806451612903225, "no_speech_prob": 7.966379780555144e-05}, {"id": 1333, "seek": 374196, "start": 3758.64, "end": 3761.7400000000002, "text": " I highly recommend taking this approach.", "tokens": [51198, 286, 5405, 2748, 1940, 341, 3109, 13, 51353], "temperature": 0.0, "avg_logprob": -0.16285730116438157, "compression_ratio": 1.5806451612903225, "no_speech_prob": 7.966379780555144e-05}, {"id": 1334, "seek": 374196, "start": 3761.7400000000002, "end": 3763.2400000000002, "text": " If you guys haven't done Advent of Code,", "tokens": [51353, 759, 291, 1074, 2378, 380, 1096, 17856, 295, 15549, 11, 51428], "temperature": 0.0, "avg_logprob": -0.16285730116438157, "compression_ratio": 1.5806451612903225, "no_speech_prob": 7.966379780555144e-05}, {"id": 1335, "seek": 374196, "start": 3763.2400000000002, "end": 3765.98, "text": " it's essentially this wonderful set of problems", "tokens": [51428, 309, 311, 4476, 341, 3715, 992, 295, 2740, 51565], "temperature": 0.0, "avg_logprob": -0.16285730116438157, "compression_ratio": 1.5806451612903225, "no_speech_prob": 7.966379780555144e-05}, {"id": 1336, "seek": 374196, "start": 3765.98, "end": 3767.96, "text": " that show up every December.", "tokens": [51565, 300, 855, 493, 633, 7687, 13, 51664], "temperature": 0.0, "avg_logprob": -0.16285730116438157, "compression_ratio": 1.5806451612903225, "no_speech_prob": 7.966379780555144e-05}, {"id": 1337, "seek": 374196, "start": 3767.96, "end": 3769.7200000000003, "text": " Solve those problems in Elm.", "tokens": [51664, 7026, 303, 729, 2740, 294, 2699, 76, 13, 51752], "temperature": 0.0, "avg_logprob": -0.16285730116438157, "compression_ratio": 1.5806451612903225, "no_speech_prob": 7.966379780555144e-05}, {"id": 1338, "seek": 376972, "start": 3770.3999999999996, "end": 3772.9599999999996, "text": " Elm is a really good intro to functional programming", "tokens": [50398, 2699, 76, 307, 257, 534, 665, 12897, 281, 11745, 9410, 50526], "temperature": 0.0, "avg_logprob": -0.18651966057201425, "compression_ratio": 1.5274261603375527, "no_speech_prob": 0.00132434768602252}, {"id": 1339, "seek": 376972, "start": 3772.9599999999996, "end": 3777.9599999999996, "text": " because the compiler messages were meant for humans", "tokens": [50526, 570, 264, 31958, 7897, 645, 4140, 337, 6255, 50776], "temperature": 0.0, "avg_logprob": -0.18651966057201425, "compression_ratio": 1.5274261603375527, "no_speech_prob": 0.00132434768602252}, {"id": 1340, "seek": 376972, "start": 3779.72, "end": 3781.8799999999997, "text": " and the whole ecosystem is built", "tokens": [50864, 293, 264, 1379, 11311, 307, 3094, 50972], "temperature": 0.0, "avg_logprob": -0.18651966057201425, "compression_ratio": 1.5274261603375527, "no_speech_prob": 0.00132434768602252}, {"id": 1341, "seek": 376972, "start": 3781.8799999999997, "end": 3783.9199999999996, "text": " so that it's easy to pick up and learn.", "tokens": [50972, 370, 300, 309, 311, 1858, 281, 1888, 493, 293, 1466, 13, 51074], "temperature": 0.0, "avg_logprob": -0.18651966057201425, "compression_ratio": 1.5274261603375527, "no_speech_prob": 0.00132434768602252}, {"id": 1342, "seek": 376972, "start": 3784.9399999999996, "end": 3787.8799999999997, "text": " And if you're familiar with the React-Redux pattern,", "tokens": [51125, 400, 498, 291, 434, 4963, 365, 264, 30644, 12, 20544, 2449, 5102, 11, 51272], "temperature": 0.0, "avg_logprob": -0.18651966057201425, "compression_ratio": 1.5274261603375527, "no_speech_prob": 0.00132434768602252}, {"id": 1343, "seek": 376972, "start": 3787.8799999999997, "end": 3791.8399999999997, "text": " that kind of came from Elm and it becomes like,", "tokens": [51272, 300, 733, 295, 1361, 490, 2699, 76, 293, 309, 3643, 411, 11, 51470], "temperature": 0.0, "avg_logprob": -0.18651966057201425, "compression_ratio": 1.5274261603375527, "no_speech_prob": 0.00132434768602252}, {"id": 1344, "seek": 376972, "start": 3791.8399999999997, "end": 3794.72, "text": " you can build some cool stuff right out of the get-go.", "tokens": [51470, 291, 393, 1322, 512, 1627, 1507, 558, 484, 295, 264, 483, 12, 1571, 13, 51614], "temperature": 0.0, "avg_logprob": -0.18651966057201425, "compression_ratio": 1.5274261603375527, "no_speech_prob": 0.00132434768602252}, {"id": 1345, "seek": 376972, "start": 3796.9599999999996, "end": 3798.9599999999996, "text": " All right, that's all I got.", "tokens": [51726, 1057, 558, 11, 300, 311, 439, 286, 658, 13, 51826], "temperature": 0.0, "avg_logprob": -0.18651966057201425, "compression_ratio": 1.5274261603375527, "no_speech_prob": 0.00132434768602252}, {"id": 1346, "seek": 379896, "start": 3798.98, "end": 3800.32, "text": " Thanks.", "tokens": [50365, 2561, 13, 50432], "temperature": 0.0, "avg_logprob": -0.6462805271148682, "compression_ratio": 1.1898734177215189, "no_speech_prob": 0.0004953514435328543}, {"id": 1347, "seek": 379896, "start": 3800.32, "end": 3801.16, "text": " Thank you.", "tokens": [50432, 1044, 291, 13, 50474], "temperature": 0.0, "avg_logprob": -0.6462805271148682, "compression_ratio": 1.1898734177215189, "no_speech_prob": 0.0004953514435328543}, {"id": 1348, "seek": 379896, "start": 3801.16, "end": 3802.0, "text": " Thank you.", "tokens": [50474, 1044, 291, 13, 50516], "temperature": 0.0, "avg_logprob": -0.6462805271148682, "compression_ratio": 1.1898734177215189, "no_speech_prob": 0.0004953514435328543}, {"id": 1349, "seek": 379896, "start": 3802.0, "end": 3802.84, "text": " Thanks.", "tokens": [50516, 2561, 13, 50558], "temperature": 0.0, "avg_logprob": -0.6462805271148682, "compression_ratio": 1.1898734177215189, "no_speech_prob": 0.0004953514435328543}, {"id": 1350, "seek": 379896, "start": 3806.84, "end": 3807.68, "text": " Yes.", "tokens": [50758, 1079, 13, 50800], "temperature": 0.0, "avg_logprob": -0.6462805271148682, "compression_ratio": 1.1898734177215189, "no_speech_prob": 0.0004953514435328543}, {"id": 1351, "seek": 379896, "start": 3821.88, "end": 3825.44, "text": " It's tough for me to say it because I wasn't there.", "tokens": [51510, 467, 311, 4930, 337, 385, 281, 584, 309, 570, 286, 2067, 380, 456, 13, 51688], "temperature": 0.0, "avg_logprob": -0.6462805271148682, "compression_ratio": 1.1898734177215189, "no_speech_prob": 0.0004953514435328543}, {"id": 1352, "seek": 382544, "start": 3825.44, "end": 3828.96, "text": " But I think it's sort of like a chicken and egg situation,", "tokens": [50364, 583, 286, 519, 309, 311, 1333, 295, 411, 257, 4662, 293, 3777, 2590, 11, 50540], "temperature": 0.0, "avg_logprob": -0.11063711678803857, "compression_ratio": 1.7847682119205297, "no_speech_prob": 0.015884028747677803}, {"id": 1353, "seek": 382544, "start": 3828.96, "end": 3832.0, "text": " because we didn't have machines that could compute stuff.", "tokens": [50540, 570, 321, 994, 380, 362, 8379, 300, 727, 14722, 1507, 13, 50692], "temperature": 0.0, "avg_logprob": -0.11063711678803857, "compression_ratio": 1.7847682119205297, "no_speech_prob": 0.015884028747677803}, {"id": 1354, "seek": 382544, "start": 3832.0, "end": 3834.88, "text": " We didn't rely on those machines to compute the stuff.", "tokens": [50692, 492, 994, 380, 10687, 322, 729, 8379, 281, 14722, 264, 1507, 13, 50836], "temperature": 0.0, "avg_logprob": -0.11063711678803857, "compression_ratio": 1.7847682119205297, "no_speech_prob": 0.015884028747677803}, {"id": 1355, "seek": 382544, "start": 3834.88, "end": 3835.84, "text": " But then all of a sudden,", "tokens": [50836, 583, 550, 439, 295, 257, 3990, 11, 50884], "temperature": 0.0, "avg_logprob": -0.11063711678803857, "compression_ratio": 1.7847682119205297, "no_speech_prob": 0.015884028747677803}, {"id": 1356, "seek": 382544, "start": 3835.84, "end": 3837.8, "text": " the machine to compute stuff popped up", "tokens": [50884, 264, 3479, 281, 14722, 1507, 21545, 493, 50982], "temperature": 0.0, "avg_logprob": -0.11063711678803857, "compression_ratio": 1.7847682119205297, "no_speech_prob": 0.015884028747677803}, {"id": 1357, "seek": 382544, "start": 3837.8, "end": 3840.12, "text": " and I got to imagine the first sets of calculations", "tokens": [50982, 293, 286, 658, 281, 3811, 264, 700, 6352, 295, 20448, 51098], "temperature": 0.0, "avg_logprob": -0.11063711678803857, "compression_ratio": 1.7847682119205297, "no_speech_prob": 0.015884028747677803}, {"id": 1358, "seek": 382544, "start": 3840.12, "end": 3843.44, "text": " were just silly, solving linear equations.", "tokens": [51098, 645, 445, 11774, 11, 12606, 8213, 11787, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11063711678803857, "compression_ratio": 1.7847682119205297, "no_speech_prob": 0.015884028747677803}, {"id": 1359, "seek": 382544, "start": 3843.44, "end": 3845.4, "text": " But then eventually people started to realize", "tokens": [51264, 583, 550, 4728, 561, 1409, 281, 4325, 51362], "temperature": 0.0, "avg_logprob": -0.11063711678803857, "compression_ratio": 1.7847682119205297, "no_speech_prob": 0.015884028747677803}, {"id": 1360, "seek": 382544, "start": 3845.4, "end": 3847.52, "text": " we could do compelling things with this.", "tokens": [51362, 321, 727, 360, 20050, 721, 365, 341, 13, 51468], "temperature": 0.0, "avg_logprob": -0.11063711678803857, "compression_ratio": 1.7847682119205297, "no_speech_prob": 0.015884028747677803}, {"id": 1361, "seek": 382544, "start": 3847.52, "end": 3851.12, "text": " I'm sure the military was one of the first users of it.", "tokens": [51468, 286, 478, 988, 264, 4632, 390, 472, 295, 264, 700, 5022, 295, 309, 13, 51648], "temperature": 0.0, "avg_logprob": -0.11063711678803857, "compression_ratio": 1.7847682119205297, "no_speech_prob": 0.015884028747677803}, {"id": 1362, "seek": 382544, "start": 3851.12, "end": 3853.44, "text": " We can do ballistic missile trajectory calculations", "tokens": [51648, 492, 393, 360, 44478, 19321, 21512, 20448, 51764], "temperature": 0.0, "avg_logprob": -0.11063711678803857, "compression_ratio": 1.7847682119205297, "no_speech_prob": 0.015884028747677803}, {"id": 1363, "seek": 382544, "start": 3853.44, "end": 3854.48, "text": " very easily.", "tokens": [51764, 588, 3612, 13, 51816], "temperature": 0.0, "avg_logprob": -0.11063711678803857, "compression_ratio": 1.7847682119205297, "no_speech_prob": 0.015884028747677803}, {"id": 1364, "seek": 385448, "start": 3854.48, "end": 3857.08, "text": " And then, obviously, computing is now universal.", "tokens": [50364, 400, 550, 11, 2745, 11, 15866, 307, 586, 11455, 13, 50494], "temperature": 0.0, "avg_logprob": -0.5151260624761167, "compression_ratio": 1.0, "no_speech_prob": 0.00035135901998728514}, {"id": 1365, "seek": 385448, "start": 3876.92, "end": 3878.44, "text": " Questions, questions.", "tokens": [51486, 27738, 11, 1651, 13, 51562], "temperature": 0.0, "avg_logprob": -0.5151260624761167, "compression_ratio": 1.0, "no_speech_prob": 0.00035135901998728514}, {"id": 1366, "seek": 385448, "start": 3878.44, "end": 3879.28, "text": " Yeah.", "tokens": [51562, 865, 13, 51604], "temperature": 0.0, "avg_logprob": -0.5151260624761167, "compression_ratio": 1.0, "no_speech_prob": 0.00035135901998728514}, {"id": 1367, "seek": 388448, "start": 3885.48, "end": 3888.48, "text": " Have you heard of ReasonML?", "tokens": [50414, 3560, 291, 2198, 295, 39693, 12683, 30, 50564], "temperature": 0.0, "avg_logprob": -0.21028934334808924, "compression_ratio": 1.5855855855855856, "no_speech_prob": 0.0014318199828267097}, {"id": 1368, "seek": 388448, "start": 3888.48, "end": 3892.48, "text": " Okay, so ReasonML is a rewrite of the OCaml syntax", "tokens": [50564, 1033, 11, 370, 39693, 12683, 307, 257, 28132, 295, 264, 422, 31030, 75, 28431, 50764], "temperature": 0.0, "avg_logprob": -0.21028934334808924, "compression_ratio": 1.5855855855855856, "no_speech_prob": 0.0014318199828267097}, {"id": 1369, "seek": 388448, "start": 3892.48, "end": 3897.48, "text": " to make it more comfortable for JavaScript developers.", "tokens": [50764, 281, 652, 309, 544, 4619, 337, 15778, 8849, 13, 51014], "temperature": 0.0, "avg_logprob": -0.21028934334808924, "compression_ratio": 1.5855855855855856, "no_speech_prob": 0.0014318199828267097}, {"id": 1370, "seek": 388448, "start": 3897.48, "end": 3900.48, "text": " Because the OCaml syntax is kind of stodgy", "tokens": [51014, 1436, 264, 422, 31030, 75, 28431, 307, 733, 295, 342, 378, 1480, 51164], "temperature": 0.0, "avg_logprob": -0.21028934334808924, "compression_ratio": 1.5855855855855856, "no_speech_prob": 0.0014318199828267097}, {"id": 1371, "seek": 388448, "start": 3900.48, "end": 3902.48, "text": " if you first look at it.", "tokens": [51164, 498, 291, 700, 574, 412, 309, 13, 51264], "temperature": 0.0, "avg_logprob": -0.21028934334808924, "compression_ratio": 1.5855855855855856, "no_speech_prob": 0.0014318199828267097}, {"id": 1372, "seek": 388448, "start": 3902.48, "end": 3904.48, "text": " Whereas ReasonML, if you're coming from JavaScript,", "tokens": [51264, 13813, 39693, 12683, 11, 498, 291, 434, 1348, 490, 15778, 11, 51364], "temperature": 0.0, "avg_logprob": -0.21028934334808924, "compression_ratio": 1.5855855855855856, "no_speech_prob": 0.0014318199828267097}, {"id": 1373, "seek": 388448, "start": 3904.48, "end": 3905.48, "text": " it looks very similar.", "tokens": [51364, 309, 1542, 588, 2531, 13, 51414], "temperature": 0.0, "avg_logprob": -0.21028934334808924, "compression_ratio": 1.5855855855855856, "no_speech_prob": 0.0014318199828267097}, {"id": 1374, "seek": 388448, "start": 3905.48, "end": 3910.48, "text": " But ReasonML is not a new language.", "tokens": [51414, 583, 39693, 12683, 307, 406, 257, 777, 2856, 13, 51664], "temperature": 0.0, "avg_logprob": -0.21028934334808924, "compression_ratio": 1.5855855855855856, "no_speech_prob": 0.0014318199828267097}, {"id": 1375, "seek": 388448, "start": 3910.48, "end": 3912.48, "text": " All it does is transpile down to OCaml.", "tokens": [51664, 1057, 309, 775, 307, 7132, 794, 760, 281, 422, 31030, 75, 13, 51764], "temperature": 0.0, "avg_logprob": -0.21028934334808924, "compression_ratio": 1.5855855855855856, "no_speech_prob": 0.0014318199828267097}, {"id": 1376, "seek": 391248, "start": 3913.48, "end": 3916.48, "text": " And so if you want to get started with OCaml,", "tokens": [50414, 400, 370, 498, 291, 528, 281, 483, 1409, 365, 422, 31030, 75, 11, 50564], "temperature": 0.0, "avg_logprob": -0.12611165831360635, "compression_ratio": 1.4705882352941178, "no_speech_prob": 0.007931371219456196}, {"id": 1377, "seek": 391248, "start": 3916.48, "end": 3918.48, "text": " I wouldn't necessarily recommend it.", "tokens": [50564, 286, 2759, 380, 4725, 2748, 309, 13, 50664], "temperature": 0.0, "avg_logprob": -0.12611165831360635, "compression_ratio": 1.4705882352941178, "no_speech_prob": 0.007931371219456196}, {"id": 1378, "seek": 391248, "start": 3918.48, "end": 3920.48, "text": " I would recommend starting with Elm first.", "tokens": [50664, 286, 576, 2748, 2891, 365, 2699, 76, 700, 13, 50764], "temperature": 0.0, "avg_logprob": -0.12611165831360635, "compression_ratio": 1.4705882352941178, "no_speech_prob": 0.007931371219456196}, {"id": 1379, "seek": 391248, "start": 3920.48, "end": 3924.48, "text": " But then from there, if you want to build programs", "tokens": [50764, 583, 550, 490, 456, 11, 498, 291, 528, 281, 1322, 4268, 50964], "temperature": 0.0, "avg_logprob": -0.12611165831360635, "compression_ratio": 1.4705882352941178, "no_speech_prob": 0.007931371219456196}, {"id": 1380, "seek": 391248, "start": 3924.48, "end": 3927.48, "text": " that can interoperate with JavaScript really easily,", "tokens": [50964, 300, 393, 728, 7192, 473, 365, 15778, 534, 3612, 11, 51114], "temperature": 0.0, "avg_logprob": -0.12611165831360635, "compression_ratio": 1.4705882352941178, "no_speech_prob": 0.007931371219456196}, {"id": 1381, "seek": 391248, "start": 3927.48, "end": 3931.48, "text": " I think ReasonML is the best way to go.", "tokens": [51114, 286, 519, 39693, 12683, 307, 264, 1151, 636, 281, 352, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12611165831360635, "compression_ratio": 1.4705882352941178, "no_speech_prob": 0.007931371219456196}, {"id": 1382, "seek": 391248, "start": 3931.48, "end": 3932.48, "text": " Yeah.", "tokens": [51314, 865, 13, 51364], "temperature": 0.0, "avg_logprob": -0.12611165831360635, "compression_ratio": 1.4705882352941178, "no_speech_prob": 0.007931371219456196}, {"id": 1383, "seek": 393248, "start": 3932.48, "end": 3933.48, "text": " Yeah.", "tokens": [50364, 865, 13, 50414], "temperature": 0.0, "avg_logprob": -0.14621888940984554, "compression_ratio": 1.3537414965986394, "no_speech_prob": 0.0040682218968868256}, {"id": 1384, "seek": 393248, "start": 3949.48, "end": 3952.48, "text": " Yeah, there was a lot of researchers in the 1980s", "tokens": [51214, 865, 11, 456, 390, 257, 688, 295, 10309, 294, 264, 13626, 82, 51364], "temperature": 0.0, "avg_logprob": -0.14621888940984554, "compression_ratio": 1.3537414965986394, "no_speech_prob": 0.0040682218968868256}, {"id": 1385, "seek": 393248, "start": 3952.48, "end": 3954.48, "text": " that actually tried this.", "tokens": [51364, 300, 767, 3031, 341, 13, 51464], "temperature": 0.0, "avg_logprob": -0.14621888940984554, "compression_ratio": 1.3537414965986394, "no_speech_prob": 0.0040682218968868256}, {"id": 1386, "seek": 393248, "start": 3954.48, "end": 3956.48, "text": " I think they built some prototypes.", "tokens": [51464, 286, 519, 436, 3094, 512, 42197, 13, 51564], "temperature": 0.0, "avg_logprob": -0.14621888940984554, "compression_ratio": 1.3537414965986394, "no_speech_prob": 0.0040682218968868256}, {"id": 1387, "seek": 393248, "start": 3956.48, "end": 3960.48, "text": " The problem is that you have these sort of positive feedback", "tokens": [51564, 440, 1154, 307, 300, 291, 362, 613, 1333, 295, 3353, 5824, 51764], "temperature": 0.0, "avg_logprob": -0.14621888940984554, "compression_ratio": 1.3537414965986394, "no_speech_prob": 0.0040682218968868256}, {"id": 1388, "seek": 393248, "start": 3960.48, "end": 3961.48, "text": " loops in ecosystems.", "tokens": [51764, 16121, 294, 32647, 13, 51814], "temperature": 0.0, "avg_logprob": -0.14621888940984554, "compression_ratio": 1.3537414965986394, "no_speech_prob": 0.0040682218968868256}, {"id": 1389, "seek": 396148, "start": 3961.48, "end": 3964.48, "text": " And so the Turing model and the Von Neumann model", "tokens": [50364, 400, 370, 264, 314, 1345, 2316, 293, 264, 20700, 1734, 449, 969, 2316, 50514], "temperature": 0.0, "avg_logprob": -0.10239723493468086, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.0022841417230665684}, {"id": 1390, "seek": 396148, "start": 3964.48, "end": 3971.48, "text": " essentially caught on so well that even though in theory", "tokens": [50514, 4476, 5415, 322, 370, 731, 300, 754, 1673, 294, 5261, 50864], "temperature": 0.0, "avg_logprob": -0.10239723493468086, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.0022841417230665684}, {"id": 1391, "seek": 396148, "start": 3971.48, "end": 3974.48, "text": " the Lambda Tower might allow for more expressivity,", "tokens": [50864, 264, 45691, 17877, 1062, 2089, 337, 544, 5109, 4253, 11, 51014], "temperature": 0.0, "avg_logprob": -0.10239723493468086, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.0022841417230665684}, {"id": 1392, "seek": 396148, "start": 3974.48, "end": 3978.48, "text": " practically speaking, the best computers are in the Turing model.", "tokens": [51014, 15667, 4124, 11, 264, 1151, 10807, 366, 294, 264, 314, 1345, 2316, 13, 51214], "temperature": 0.0, "avg_logprob": -0.10239723493468086, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.0022841417230665684}, {"id": 1393, "seek": 396148, "start": 3978.48, "end": 3981.48, "text": " And therefore, more attention kind of gravitates towards there.", "tokens": [51214, 400, 4412, 11, 544, 3202, 733, 295, 26048, 1024, 3030, 456, 13, 51364], "temperature": 0.0, "avg_logprob": -0.10239723493468086, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.0022841417230665684}, {"id": 1394, "seek": 396148, "start": 3981.48, "end": 3983.48, "text": " People build more stuff for it.", "tokens": [51364, 3432, 1322, 544, 1507, 337, 309, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10239723493468086, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.0022841417230665684}, {"id": 1395, "seek": 396148, "start": 3983.48, "end": 3986.48, "text": " And now, I don't know, 90% plus of all languages", "tokens": [51464, 400, 586, 11, 286, 500, 380, 458, 11, 4289, 4, 1804, 295, 439, 8650, 51614], "temperature": 0.0, "avg_logprob": -0.10239723493468086, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.0022841417230665684}, {"id": 1396, "seek": 396148, "start": 3986.48, "end": 3988.48, "text": " are kind of all Turing-based.", "tokens": [51614, 366, 733, 295, 439, 314, 1345, 12, 6032, 13, 51714], "temperature": 0.0, "avg_logprob": -0.10239723493468086, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.0022841417230665684}, {"id": 1397, "seek": 398848, "start": 3988.48, "end": 3992.48, "text": " So in the 80s, they did build functional programming computers.", "tokens": [50364, 407, 294, 264, 4688, 82, 11, 436, 630, 1322, 11745, 9410, 10807, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09027653846187868, "compression_ratio": 1.5602094240837696, "no_speech_prob": 0.00016087679250631481}, {"id": 1398, "seek": 398848, "start": 3992.48, "end": 3997.48, "text": " But because most of investment into these technologies", "tokens": [50564, 583, 570, 881, 295, 6078, 666, 613, 7943, 50814], "temperature": 0.0, "avg_logprob": -0.09027653846187868, "compression_ratio": 1.5602094240837696, "no_speech_prob": 0.00016087679250631481}, {"id": 1399, "seek": 398848, "start": 3997.48, "end": 4001.48, "text": " comes as a function of industry, like businesses,", "tokens": [50814, 1487, 382, 257, 2445, 295, 3518, 11, 411, 6011, 11, 51014], "temperature": 0.0, "avg_logprob": -0.09027653846187868, "compression_ratio": 1.5602094240837696, "no_speech_prob": 0.00016087679250631481}, {"id": 1400, "seek": 398848, "start": 4001.48, "end": 4003.48, "text": " like needing to solve business problems,", "tokens": [51014, 411, 18006, 281, 5039, 1606, 2740, 11, 51114], "temperature": 0.0, "avg_logprob": -0.09027653846187868, "compression_ratio": 1.5602094240837696, "no_speech_prob": 0.00016087679250631481}, {"id": 1401, "seek": 398848, "start": 4003.48, "end": 4008.48, "text": " then the positive feedback loop of the Turing Tower", "tokens": [51114, 550, 264, 3353, 5824, 6367, 295, 264, 314, 1345, 17877, 51364], "temperature": 0.0, "avg_logprob": -0.09027653846187868, "compression_ratio": 1.5602094240837696, "no_speech_prob": 0.00016087679250631481}, {"id": 1402, "seek": 398848, "start": 4008.48, "end": 4012.48, "text": " kind of diminished the Lambda Tower.", "tokens": [51364, 733, 295, 40206, 264, 45691, 17877, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09027653846187868, "compression_ratio": 1.5602094240837696, "no_speech_prob": 0.00016087679250631481}, {"id": 1403, "seek": 401248, "start": 4012.48, "end": 4031.48, "text": " Yeah, so I would probably boil it down to just the three", "tokens": [50364, 865, 11, 370, 286, 576, 1391, 13329, 309, 760, 281, 445, 264, 1045, 51314], "temperature": 0.0, "avg_logprob": -0.17035824397824845, "compression_ratio": 1.3900709219858156, "no_speech_prob": 0.003221004270017147}, {"id": 1404, "seek": 401248, "start": 4031.48, "end": 4032.48, "text": " constructs, right?", "tokens": [51314, 7690, 82, 11, 558, 30, 51364], "temperature": 0.0, "avg_logprob": -0.17035824397824845, "compression_ratio": 1.3900709219858156, "no_speech_prob": 0.003221004270017147}, {"id": 1405, "seek": 401248, "start": 4032.48, "end": 4034.48, "text": " You have variables.", "tokens": [51364, 509, 362, 9102, 13, 51464], "temperature": 0.0, "avg_logprob": -0.17035824397824845, "compression_ratio": 1.3900709219858156, "no_speech_prob": 0.003221004270017147}, {"id": 1406, "seek": 401248, "start": 4034.48, "end": 4037.48, "text": " You have functions and function applications.", "tokens": [51464, 509, 362, 6828, 293, 2445, 5821, 13, 51614], "temperature": 0.0, "avg_logprob": -0.17035824397824845, "compression_ratio": 1.3900709219858156, "no_speech_prob": 0.003221004270017147}, {"id": 1407, "seek": 401248, "start": 4037.48, "end": 4041.48, "text": " So is there a way to represent a variable in some sort", "tokens": [51614, 407, 307, 456, 257, 636, 281, 2906, 257, 7006, 294, 512, 1333, 51814], "temperature": 0.0, "avg_logprob": -0.17035824397824845, "compression_ratio": 1.3900709219858156, "no_speech_prob": 0.003221004270017147}, {"id": 1408, "seek": 404148, "start": 4041.48, "end": 4042.48, "text": " of circuitry?", "tokens": [50364, 295, 9048, 627, 30, 50414], "temperature": 0.0, "avg_logprob": -0.0647811848541786, "compression_ratio": 1.591760299625468, "no_speech_prob": 0.0023953127674758434}, {"id": 1409, "seek": 404148, "start": 4042.48, "end": 4045.48, "text": " Is there a way to represent a function in circuitry", "tokens": [50414, 1119, 456, 257, 636, 281, 2906, 257, 2445, 294, 9048, 627, 50564], "temperature": 0.0, "avg_logprob": -0.0647811848541786, "compression_ratio": 1.591760299625468, "no_speech_prob": 0.0023953127674758434}, {"id": 1410, "seek": 404148, "start": 4045.48, "end": 4047.48, "text": " as well as function application?", "tokens": [50564, 382, 731, 382, 2445, 3861, 30, 50664], "temperature": 0.0, "avg_logprob": -0.0647811848541786, "compression_ratio": 1.591760299625468, "no_speech_prob": 0.0023953127674758434}, {"id": 1411, "seek": 404148, "start": 4047.48, "end": 4049.48, "text": " I think the answer to all those is you probably", "tokens": [50664, 286, 519, 264, 1867, 281, 439, 729, 307, 291, 1391, 50764], "temperature": 0.0, "avg_logprob": -0.0647811848541786, "compression_ratio": 1.591760299625468, "no_speech_prob": 0.0023953127674758434}, {"id": 1412, "seek": 404148, "start": 4049.48, "end": 4050.48, "text": " conceive of some way.", "tokens": [50764, 48605, 295, 512, 636, 13, 50814], "temperature": 0.0, "avg_logprob": -0.0647811848541786, "compression_ratio": 1.591760299625468, "no_speech_prob": 0.0023953127674758434}, {"id": 1413, "seek": 404148, "start": 4050.48, "end": 4055.48, "text": " I don't know the details of how the actual Lambda computers", "tokens": [50814, 286, 500, 380, 458, 264, 4365, 295, 577, 264, 3539, 45691, 10807, 51064], "temperature": 0.0, "avg_logprob": -0.0647811848541786, "compression_ratio": 1.591760299625468, "no_speech_prob": 0.0023953127674758434}, {"id": 1414, "seek": 404148, "start": 4055.48, "end": 4058.48, "text": " were built, but it might be an interesting thing to look into.", "tokens": [51064, 645, 3094, 11, 457, 309, 1062, 312, 364, 1880, 551, 281, 574, 666, 13, 51214], "temperature": 0.0, "avg_logprob": -0.0647811848541786, "compression_ratio": 1.591760299625468, "no_speech_prob": 0.0023953127674758434}, {"id": 1415, "seek": 404148, "start": 4058.48, "end": 4060.48, "text": " But they obviously fizzled out.", "tokens": [51214, 583, 436, 2745, 283, 8072, 1493, 484, 13, 51314], "temperature": 0.0, "avg_logprob": -0.0647811848541786, "compression_ratio": 1.591760299625468, "no_speech_prob": 0.0023953127674758434}, {"id": 1416, "seek": 404148, "start": 4060.48, "end": 4063.48, "text": " The nature of the Von Neumann model in Turing machines", "tokens": [51314, 440, 3687, 295, 264, 20700, 1734, 449, 969, 2316, 294, 314, 1345, 8379, 51464], "temperature": 0.0, "avg_logprob": -0.0647811848541786, "compression_ratio": 1.591760299625468, "no_speech_prob": 0.0023953127674758434}, {"id": 1417, "seek": 404148, "start": 4063.48, "end": 4067.48, "text": " is that it maps so cleanly to binary circuitry", "tokens": [51464, 307, 300, 309, 11317, 370, 2541, 356, 281, 17434, 9048, 627, 51664], "temperature": 0.0, "avg_logprob": -0.0647811848541786, "compression_ratio": 1.591760299625468, "no_speech_prob": 0.0023953127674758434}, {"id": 1418, "seek": 406748, "start": 4067.48, "end": 4071.48, "text": " and originally vacuum tubes, but now transistors", "tokens": [50364, 293, 7993, 14224, 21458, 11, 457, 586, 1145, 46976, 50564], "temperature": 0.0, "avg_logprob": -0.15519444147745767, "compression_ratio": 1.3486842105263157, "no_speech_prob": 0.01204175129532814}, {"id": 1419, "seek": 406748, "start": 4071.48, "end": 4074.48, "text": " map so perfectly down to that model,", "tokens": [50564, 4471, 370, 6239, 760, 281, 300, 2316, 11, 50714], "temperature": 0.0, "avg_logprob": -0.15519444147745767, "compression_ratio": 1.3486842105263157, "no_speech_prob": 0.01204175129532814}, {"id": 1420, "seek": 406748, "start": 4074.48, "end": 4076.48, "text": " whereas the concept of a function doesn't", "tokens": [50714, 9735, 264, 3410, 295, 257, 2445, 1177, 380, 50814], "temperature": 0.0, "avg_logprob": -0.15519444147745767, "compression_ratio": 1.3486842105263157, "no_speech_prob": 0.01204175129532814}, {"id": 1421, "seek": 406748, "start": 4076.48, "end": 4092.48, "text": " map to logic gates cleanly.", "tokens": [50814, 4471, 281, 9952, 19792, 2541, 356, 13, 51614], "temperature": 0.0, "avg_logprob": -0.15519444147745767, "compression_ratio": 1.3486842105263157, "no_speech_prob": 0.01204175129532814}, {"id": 1422, "seek": 406748, "start": 4092.48, "end": 4094.48, "text": " All right.", "tokens": [51614, 1057, 558, 13, 51714], "temperature": 0.0, "avg_logprob": -0.15519444147745767, "compression_ratio": 1.3486842105263157, "no_speech_prob": 0.01204175129532814}, {"id": 1423, "seek": 406748, "start": 4094.48, "end": 4096.48, "text": " Well, I guess with that we'll wrap up.", "tokens": [51714, 1042, 11, 286, 2041, 365, 300, 321, 603, 7019, 493, 13, 51814], "temperature": 0.0, "avg_logprob": -0.15519444147745767, "compression_ratio": 1.3486842105263157, "no_speech_prob": 0.01204175129532814}, {"id": 1424, "seek": 409648, "start": 4096.48, "end": 4097.48, "text": " Thank you everyone.", "tokens": [50364, 1044, 291, 1518, 13, 50414], "temperature": 0.0, "avg_logprob": -0.3590335505349295, "compression_ratio": 0.7037037037037037, "no_speech_prob": 0.296294242143631}], "language": "en"}