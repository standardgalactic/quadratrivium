Processing Overview for Freya Holmér
============================
Checking Freya Holmér/Vectors & Dot Product • Math for Game Devs [Part 1].txt
1. **Transform Point from World Space to Local Space**: You need to write a function that takes a point in world space and converts it to the local space of an object, considering its position, rotation, and ignoring scale. You cannot use matrices or the `transform.dot` functions for space transformation, but you can use `transform.forward`, `transform.up`, and `transform.right`.

2. **Rotate Point Around Local Space Origin**: Given a point in local space, rotate it around the origin of that local space by a specified angle without using matrices or the `transform.dot` functions for space transformation. You can use `transform.forward`, `transform.up`, and `transform.right` to get the axes for rotation.

3. **Move Child Object to Match Parent's Position and Rotation**: Position a child object in a way that it matches the position and rotation of its parent in local space, ignoring scale. This is about manually applying the transformations of the parent to the child without using direct parenting or the `transform.dot` functions for space transformation.

Additionally:

- You can join the discord server for more support and community interaction if you're interested.
- Remember that this exercise is purely 2D, so you don't need to consider 3D space transformations yet.
- The goal is to demonstrate understanding of vector math, dot products, and how to manually apply transformations in a 2D context using the tools provided by Blender's API.

Checking Freya Holmér/Why can't you multiply vectors？.txt
1. **Geometric Algebra**: The speaker mentioned that they have a math library on GitHub with some components for geometric algebra, such as bi-vector 3 and rotor 3 types (quaternions). They encourage anyone interested to check out their code on GitHub.

2. **Engine Compatibility**: The speaker has considered making their tools compatible with other game engines like Unreal Engine and Godot, but they find Unity more suitable for their current business model as it provides the largest user base for their plugins.

3. **Future Plans**: The speaker is contemplating developing standalone tools or returning to game development itself. They are uncertain about whether the Godot community is large enough to support the kind of revenue they currently earn from Unity plugin sales.

4. **Closing**: The session has ended, and the speaker thanks the audience for their participation and questions. They are now ready for lunch.

The speaker also noted that they are open to further questions after the talk and encourages attendees to approach them later for discussion.

