start	end	text
0	5840	My name is Freya. I have been in the industry professionally for about like nine years at
5840	14400	this point, maybe 10 years. I also used to be part of Future Games. I was in the class of 2010.
14400	18720	I've been teaching a Future Games since like after two years after that, I started teaching a Future
18720	25200	Games as well. I did mostly like C sharp courses and math courses, as well as some guest lectures.
25200	30080	Otherwise, like professionally, I made a plugin a long time ago for Unity called Shader Forge.
30960	37760	So it was basically a node-based shader editor for Unity, which didn't exist at the time.
37760	41520	There was one that was like outdated, but it wasn't maintained. And the person who
41520	44960	worked on it was hired by Unity. And then they kind of started working on, you know,
44960	50560	Shader Graph internally, which took a very long time, luckily for me, because then I could make
50560	56960	Shader Forge. So I sold Shader Forge on the Asset Store, which made like enough money to be
56960	62800	two full-time salaries pretty much. So me and another student at Future Games, we started a studio.
62800	68400	So we started an indie game studio called Neat Corporation. So at Neat Corporation, we kind of
68400	74000	started out wanting to make our own like very specific indie game. But then at GDC, we were
74000	80160	sort of, we sort of like bumped into Valve right as they were releasing their HTC Vive headset.
80160	87920	So we got kind of inspired by VR as soon as that kind of happened. So as that exploded, the whole
87920	93600	VR scene, we got to be there like at the very, very beginning when everything started like growing,
93600	100960	which was really cool. And also made us realize how like going to GDC and just talking to industry
100960	106640	people can lead you down so many paths. And like just that connection with people is so important
106640	111120	if you want to like make connections in the industry, start new opportunities and whatnot.
111120	115280	And all it takes is kind of like, you have to try to be available for all of these things.
115280	121760	Anyway, that was the story of Necorp, how we sort of started Necorp and started working on the game
121760	126560	called Budget Cuts. So that was our first kind of flagship release title. One thing that I just
126560	132720	need to mention before we get started in terms of like my approach to teaching, like my goal is
132800	140320	that I'm here to help you learn, right? That's kind of it. So you usually get a lot of questions
140320	145920	along the lines of like, you know, do I have to do this assignment? And so forth. The short answer
145920	152080	is yes, because you're going to have Chris there do all the grading and all that stuff.
153200	159760	But the long answer is that I personally, I don't care what assignments you do or don't do or
159760	164400	anything like that. My goal is that you should learn the things that you want to learn, right?
164400	170080	And I'm here to help you do that. But I do want to stress that it is important though,
170080	175840	like what kind of standard you're setting, not only for yourself in terms of like what goals
175840	182080	you have and what you want to learn and how you learn, but also how that reflects on you in the
182080	188400	eyes of your fellow students, right? Or even in the eyes of me, right? If people around you notice
188400	195440	that you are someone who is like doesn't do any assignments or like show up late for every lecture,
195440	199600	then I think a lot of people like are going to think of you as that person that's always late
199600	204960	and doesn't like deliver or whatever. And you're all going to be in the industry soon, right?
205680	209920	Like if you think about my classmates, pretty much all of them are in the industry now. So,
210560	216800	you know, I will remember people who were kind of like not great. So like, it's important to kind
216880	223920	of like be a good person and be like kind of project the image of you that you want others to see
223920	230240	once you're in the industry, right? So I think it's important for like from that, from that point of
230240	235600	view to actually do do assignments and whatnot to at least be the person who did the assignments,
235600	240640	right? But then again, personally, I don't care that much. I just want you to be able to learn
240640	244800	the things you want to learn, right? If you hate math, you don't think it's going to be useful,
244800	250400	then sure, feel free to not do anything, right? But I think it would be detrimental for you,
251280	256000	especially if you want to do a lot of coding. What will the assignments look like? The assignments
256000	263120	will be mostly to do some mathematical thing in Unity. It's not going to be very Unity-centric.
263120	268240	Unity is mostly going to be there as our like platform and rendering engine. So it could be
268240	273680	things like I would do the math for the spread of bullets in a shotgun or whatever, like that kind
273680	279120	of stuff. So they're going to be pretty short. I intend to do like more than like one assignment
279120	285360	per day. So you can have like three tier assignments, like one easy, one medium, one harder task. And
285360	291520	then you can sort of do however many you want, I think, depending on how Krister wants to grade
291520	296000	this. I'm just going to send the like answers to Krister and he's going to work on the grading
296000	301040	and stuff. I usually like having a tiered like assignment thing, because it tends to be more
301040	307280	flexible. And you can sort of do things step by step, which I like. All right. Another very important
307280	314080	thing, please ask questions. There are no stupid questions. I think it's like one of the most
314080	319680	detrimental things for you to do is to like you have a question in your head or something I said
319680	326960	was unclear. Please ask that question that you have in your mind. It's so important. Because like
327040	333440	usually when people like almost every time someone says, this might be a stupid question, but
333440	339280	they ask a really good question. So please keep that in mind. Ask questions. Don't be afraid to ask
339280	344720	questions. Asking questions doesn't mean that you're stupid. It means that you're actually smart,
344720	349280	because you actually want to learn the thing and want to understand the thing that you are
349840	354000	observing and trying to pick up, right? But of course, try to stay on topic like don't go like
354000	358560	too far off. We're gonna have a lot of breaks. So we're probably we can do like, you know,
358560	363360	random Q&A stuff during breaks if you want. Okay. Oh, obviously, sometimes like some people can get
363360	368240	very stuck on one thing. In that case, if like one person gets very stuck on something, then we can
368240	373040	probably like talk about that after the lecture to like clarify any anything. In case it like takes
373040	378640	too long to like try to hash that out. All right. Any questions so far? Sorry, we haven't like started
378640	383840	the actual lecture. I've just been rambling about random stuff. Will there be any linear algebra?
383840	389120	I believe so. Yes. I mean, yes, we're going to talk a lot about vectors, dot products,
389120	393280	crotch products, all that stuff, and matrices too. All right. So
396400	401280	let's see shuffling around my notes. Oh, if you want to, we could look over some of the things
401280	408240	you're going to see in math papers. I don't know if you want to like have some tool sets for like
408240	414080	being able to parse papers. I could plan that plan that in probably not for today, but some of the
414080	418400	other days, because we do have I do have a bunch of like time that I haven't like planned in because
418400	425040	usually things take longer than you expect. Sometimes they're way shorter and so forth.
425040	430880	All right. So I first want to talk a little bit about like why I think math is cool. I think math
430880	436960	sort of has this bad reputation because I think a lot of in a lot of cases it's taught as kind of
436960	441680	just the boring thing you have to do in school that has to do with numbers. And you have to like,
443200	448160	I don't know, it seems very esoteric. And the most common question that students ask is like,
448160	453440	when am I ever going to use this in my life? Right? Like, when do I need the cosine? You know,
454320	460000	like that that is extremely common for people to to feel like that and when it comes to math.
460000	466720	But I feel like game development is sort of one of the like one of these strongest cases where
466720	474080	math is just like extremely useful, like absolutely everywhere in in doing game development, not
474080	479360	only like in terms of gameplay code, but also like a lot of it is in like rendering and all of that
479360	485360	stuff, right? But I think the the problem with teaching math in general is that I feel like
486400	491200	people who teach math are sometimes like excited about math, but they don't really they kind of
491200	496080	presume that other people are already excited about math. And then they don't really like show it in
496080	500880	an exciting or interesting or visual way. So then it just becomes this esoteric thing where
500880	505200	you have to charge through a bunch of numbers. And it's just boring, right? So I think that's
505200	512000	a that's a shame. I feel like mathematics is incredibly fundamental. It's like one of the
512000	518080	most fundamental fields of study that we have. And like, they're like, it kind of doesn't matter
518080	524640	where you are in space, like you could be an alien species somewhere, you could be like,
524720	529440	absolutely anywhere, it doesn't matter, doesn't have to be on earth doesn't have to be this society,
529440	535840	you can have other numbers of dimensions, but math is still gonna exist, right? It's gonna be called
535840	539280	something else numbers are gonna be presented in a different way, people are gonna use different
539280	547280	symbols, but math in and of itself is gonna exist. Because math is like, it's the like the study of
547280	553760	quantity. It's a study of space, it's study of structure, it's a study of change. And it's kind
553760	559920	of hard to imagine a universe where any of these things just don't exist. Like, what does it even
559920	566800	mean to have a like, what does it even mean to have a universe that doesn't have quantity as a
566800	572480	concept, right? And I think that's really cool. It's gets kind of this like field of study where
572480	577840	you can sort of co discover things, like, you know, the the circle constants, like pi and tau,
578800	584400	e, the golden ratio, like all of these things are probably discovered in other societies,
584400	589680	presuming they exist, even though we're entirely disconnected from each other, just because it's
589680	594960	this study of the very fundamentals of kind of structure and change and that type of stuff.
596640	604800	Yeah. And so, so for me, I feel like the, it kind of underpins like physics, it underpins chemistry,
604800	610480	biology, none of these things would really exist without math working as well as it does and being
610480	616240	applied to these fields, right? It's similar to philosophy. I feel like philosophy underpins
616240	623280	everything in like social sciences, it underpins morality, ethics, politics, philosophy sort of
623280	628720	the groundwork for all of those things. And that's kind of why I also like philosophy. But I think
628720	634480	it's really cool that this is so fundamental. And that's why I think math is cool. They're also
634560	640480	like, you of course can't like apply it to absolutely everything. Because usually people
640480	646960	say stuff like math is universal language. But you know, it's kind of not universally applicable
646960	651520	to every situation out there. Anyway, so that's all well and good. But I'm already,
652160	658000	I'm already interested in math, and you might not be. So I feel like we should go into the like
658720	668640	practicalities of what it actually means to use math in, in games. And how everything works.
668640	672320	Also think people overestimate how much math you need to know to do cool shit. You can get so far
672320	678480	with a few basic principles in some time. Yes. I keep saying that you don't need to know that
678480	685520	much math to do game development. If you want to like make an engine, you need more. But if you
685520	690160	just want to do gameplay coding, or even shader coding to some extent, you don't need that much
690160	697040	math. So I'm going to go through most of the like, the very essentials of game development math.
697840	705120	Like, even things like derivatives or integrals, they are kind of rare in game development.
705120	709840	Even though they're very fundamental in teaching math in game dev, you don't have them very often.
710480	717440	Like, mostly if you're doing some very like, very math heavy rendering stuff, that's when you
717440	723840	start running into, especially integrals. But otherwise, like generally, like linear algebra
723840	729520	is like most of, most of game dev math, understanding derivatives and integrals is really useful for
729520	736880	anything related to implementing physics. Yeah. So there's the idea of what a derivative is,
736960	743520	is really important. But you don't really need to know how to derive equations, right? So like,
743520	748240	generally in game dev, unless again, you're coding a game engine, you're going to be using
748240	754480	existing physics packages, you're generally going to do things on a per frame basis. So like,
754480	758800	the understanding of it is really important. But to actually derive equations, isn't that
758800	763360	important? Sometimes you will run into it. But I don't think I think I might have run into it
763360	768480	like once or twice throughout my career. But yeah, understanding it in terms of like, yeah,
768480	772320	like you mentioned, like time dot delta time, that we're going to go through because that's
772320	778480	really important. But in terms of like actually deriving equations, they don't really do that
778480	784400	much. So I feel like there, there is a concept that is talked about very early on in your math
784400	790080	course. And usually it's referred to as the number line. So you can imagine this, like one
790080	795600	dimensional space, we can just move along this one line, right? And in the center, we can put
795600	802480	the number zero, right? And then you can sort of imagine a space where these numbers are
805040	813200	kind of put along this whole line, right? All right, so we have one, two, three, so all integers
813200	818640	are on these little notches. All right, cool. So this is the number line. It's like, I think it was
818720	823520	like usually this is mentioned very early on in your math courses. And then it's kind of like
823520	828880	forgotten. But I think it's an extremely useful place to be. Because it very like beautifully
828880	835280	illustrates kind of the continuity of numbers and like where the integers are and so forth, right?
836720	842320	I hope I got these numbers right. I feel like I'm going to make so many weird mistakes. So
843040	849040	all right, this is correct, right? Okay, cool. So we have zero in the center. And then one, two,
849040	854320	three, four, five. So we have our positive numbers on this side and negative numbers on this side.
854320	859360	And this continues to positive infinity. This continues to negative infinity, right? So this
859360	862880	is a useful way of thinking about it, because you can have numbers that are between the integers,
862880	868560	right? So these whole numbers are integers. And then between those, you can have decimal numbers,
868560	874560	right? So you have 0.5 here. So that's halfway between zero and one and so forth, right? Okay,
874560	879680	so, so now one thing that's very important, whenever you're working with math, especially in
879680	885760	game dev is not to really think about numbers in terms of just being in numbers. Because numbers
886560	893280	is only there to represent something else, right? So, so then you can ask like, okay, what is this
893280	898400	number? What is it like? What is it? What is it a substitute for, right? And what is it representing?
899280	905280	So usually, if we have a number, let's say we have number two, and we can mark it with a dot there.
905280	911440	So, so what does two mean here? Well, we could interpret it in many different ways. Two could be,
912160	917280	it could be a position, right? Maybe this is the position along this line, in which case,
917280	922240	this is going to be a coordinate system, right? Where every number says the position
922240	929440	on this one dimension, right? So we could call this the one x axis, right? So this could be
929440	936640	interpreted as a position. We could also interpret it as a vector, right? It could be an arrow,
936640	942000	usually going from zero, because vectors don't really have your roots of quote unquote, the arrow,
942000	948160	they only have a single point, right? So this is a vector, it just has the value two, right?
948160	952560	And because it's one dimensional, we can only, we can only have vectors that point either to the
952560	959360	right or to the left, right? So we can interpret two as a vector, we can can do another number,
959360	966160	let's put three here. And then this is another vector, we can do another vector for negative one,
966160	973040	right? So this is sort of a one dimensional interpretation of vectors. But then we can ask
973040	979520	like a lot of questions about these, right? We can ask how, let's do another vector actually,
979520	985600	let's do negative three. Okay, so usually when you work with vectors, you work with a lot of concepts
986960	992800	in terms of like length and direction and that kind of stuff. And usually you kind of start doing
992800	998080	that once you go to two dimensions. But all of these things exist in one dimension two,
998080	1003280	this is not exclusive to like two dimensions and above, right? So if you look at these vectors
1003280	1011200	right here, what is the length of these vectors? Well, this one that's pointing to two,
1013120	1018880	this one has a length of two, right? The this one has a length of three. But if you go to these,
1019440	1024240	these also have a positive length, because the lengths are always positive, right? This has
1024240	1034160	a length of one. This one has a length of three as well. So yeah, so this is basically a just a
1034160	1038560	one dimensional interpretation of what vector length is, right? Also, I didn't draw these
1038560	1042880	exactly the same size. But you know what, that's okay, you get the idea, I hope. All right, so
1042880	1051040	what about direction? What is the direction of these vectors? Well, if you think about direction in
1051040	1057600	one dimension, usually directions have a length of one. So in one dimension, you can only have
1057600	1063920	directions that are either negative one or one. Sometimes that's usually called a sine. When
1063920	1075120	you're working in one dimension, usually it's called a sine, sine of x. So usually this is the
1075120	1081280	like one dimensional direction, right? Basically, it's only positive one or negative one. There are
1081280	1087840	some like exceptions if x is zero. If x is zero, then it kind of depends on the implementation.
1088800	1093840	In some cases, it's going to throw an error. In some cases, it's just going to return one
1093840	1101120	and so forth. But usually it'll either return zero, one or an error when you pass in a zero.
1101120	1108080	Anyway, so the sine of these numbers is the direction it's pointing pretty much. And if you
1108080	1114480	want to get the length of these, actually, maybe I should keep the sine of x is basically the direction.
1115440	1126080	So this is either negative one or one. Mostly random rambles in the student chat.
1126880	1132880	No questions yet. So zero vector has no direction. Yes, it's sort of like depends on your implement
1132880	1138960	or like implementation and interpretation of like what it's used for. Like in some cases,
1138960	1145120	it is useful to interpret the sine of x to be one. Because quite often the you use the direction
1145120	1150080	to multiply something to like sort of change the direction and the scale it by some value.
1150080	1156320	And sometimes when the value you're checking the sine of is zero, sometimes you want it to be one.
1156320	1161920	But generally, it depends on generally depends on like the case, right? But again,
1162880	1168000	the like purely mathematically, a zero vector doesn't have a direction, as far as I'm concerned.
1168720	1172640	Alright, so so this is kind of the direction of a one dimensional vector. It's usually called
1172640	1178560	sine. Again, for one dimensions, these are sometimes called scalar, scalar values and so
1178560	1183280	forth. Then again, the the length we talked about, like the length of these vectors, because the
1183280	1189280	actual values of the vectors, like the value of this one is negative three, right? But the length
1189280	1195200	of it is three. So so to get the length of a number, you basically just you get what's called
1195200	1201040	the absolute value, which is just a fancy way of saying, if it's negative, make it positive,
1201040	1211200	like that's it. So so the absolute value usually abs in your math libraries. That's the that's the
1211200	1219760	length. Sometimes called magnitude, but I feel like I'm the only person in the world that calls
1219760	1224240	abs for scalars magnitude. But I think it's funny, if sine x can only return one number when it
1224240	1228800	is a float, it does return a float, we are not talking about two dimensional vectors yet,
1228800	1234720	we're only talking about one dimensional values, which is floats or a scalar or a single value.
1235360	1239280	So we're not we haven't gone into two dimensional or three dimensional vectors yet.
1239280	1244160	Can you sign a 2d vector? What if the vector has one negative value and one positive? So
1244880	1251040	so generally, the the general case of a sine is that it gets the direction of the vector.
1252000	1257280	The the sign of a two dimensional vector would would would be itself a vector, right,
1257280	1261440	because it's a it's a two dimensional direction. What we're going to get into 2d vectors,
1261440	1266240	I just want to start out with one dimensional stuff. But I think it's kind of neat that you
1266240	1272640	can have a one dimensional interpretation that is still vector based. So so we're still just on
1272640	1276720	the number line, we we don't have any two dimensional vectors here. Right, so then we can
1276720	1283280	ask a lot of questions, like what does it mean to let's say we'll ask some question like,
1284560	1292400	what is the what is the distance between what's the distance between one and three? Like,
1292400	1298800	what does that question mean? Well, generally, a distance would be we want to get this length
1298800	1302880	here between these two numbers. So that would be a way to get the distance, right?
1303600	1310560	So so if you want to do if you want to get the distance between these two numbers, then
1311360	1316160	generally, you would, you would have the two numbers represented as like, well, we could
1316160	1322160	represent them as just letters, right? So in this case, we want to do three minus one.
1323520	1328880	And then that gives us two, right? So then we get the distance between these two numbers. So so
1328960	1336080	usually, doing like subtracting is usually it can be interpreted as getting the difference
1336080	1341680	between two values, right? So so if we want to get the the distance between these two values,
1342720	1349520	generally, you do one minus the other. But if you like flip the order of these, if you do one
1349520	1354880	minus three, you're going to get negative two, right? So so in this case, we actually want to
1355840	1360000	we want to make sure that we get the length and the magnitude of this, right?
1361440	1367680	Because if we do three minus one, what that gives us is that we basically take this vector,
1367680	1373440	this is three, right? Because it lines up here, this is the one dimensional vector representing
1373440	1380160	the value three. And then we want to subtract the vector one, and the vector one is this vector,
1380160	1387280	right? And the way to kind of interpret subtraction is that you can sort of take this arrow,
1388240	1394960	and you can subtract it as in you flip the direction of the arrow, and then you get a new
1394960	1401600	value that stops here, right? And that's going to be an arrow that goes here. And this is the
1401600	1407120	value two, right? All right. So but then again, this is order dependent, this presumes we have
1407120	1412480	the three before the one, otherwise, we're going to get negative two. So if you ask the question,
1412480	1416640	what is the distance between these two values? If you say negative two, that's going to be
1416640	1422560	a bit of a weird answer. Depending on the implementation, there are some cases where
1422560	1428720	you want to get what's called a signed distance. And again, signed distance is referring to the
1428720	1434240	fact that it can be either negative or positive. But generally, distance values are always positive.
1434560	1439920	Same thing with area, if you want to get like the the area of some polygon, then the area is
1439920	1446720	considered to also always be positive, except if you want a signed area. So a signed area just
1446720	1452080	means that it can be either negative or positive. So you're probably going to hear a lot about
1452080	1458000	like stuff like signed distance fields, which is a term that has kind of exploded for the past
1458640	1466640	few months. It's just a fancy way of saying you have a field of distance values that can also
1466640	1472320	be negative. All right, so if we want to get the actual true distance between these two things,
1473040	1477280	as in the positive distance, we would need to get the magnitude of this, right? So
1477920	1483520	that would be the absolute value, right? So so generally, this is the way to get the distance
1483520	1489520	between two values, or more generally, if we want to generalize this, we can say that the
1491680	1492080	let's see,
1499200	1506480	the distance between, let's say we have values a and b, we're still only talking about float values
1506480	1514800	or scalars, one dimensional numbers. So if we want to get the distance between a and b,
1515520	1523760	all we need to do is do the absolute value, as in the length of the difference between a and b.
1526480	1529840	So now we have the difference between a and b, and then we get the length of that.
1530160	1537440	And then we got the distance value. Okay, everything clear so far,
1537440	1540480	also realized I haven't talked about addition, that might be a good thing.
1540480	1546960	Addition is probably good to know. So if we want to do three plus one,
1548800	1551840	let me just erase things, it's a little messy.
1552160	1562160	Let's say we want to do three plus one, then in a one dimensional interpretation of vectors,
1562720	1569200	then this is three, right? And then we can have a another vector, this is one.
1570160	1574960	So if you want to do three plus one, one way of interpreting that is that
1574960	1578720	it's kind of like taking the vector and kind of just adding it on top of the other vector.
1578720	1585600	So now we have three and then plus one. And the final vector we get out of this as sort of the
1585600	1591440	result of this equation is this vector going all the way here, which is the value of four.
1591440	1595920	So that's kind of like how addition works. Previously we did subtraction when we wanted
1595920	1601120	to know the difference between these two, in which case instead of adding this to the top,
1601120	1606400	we negated and then add it, right? Or just subtract it, right?
1608880	1615680	Yeah, so then doing that we ended up with a vector adds two, right? Because three minus one is two.
1616960	1620720	As far as I know, I'm bad at doing math like I mentioned before, I might be wrong.
1622880	1628640	Okay, cool. Any questions so far? Sorry for the like weird one dimensional vectors,
1628640	1632640	but right now we're only talking about scalars. We haven't gone two dimensional yet.
1632640	1639520	Yeah, so so far we've learned that three minus one is two. That's how well this math course is going.
1644000	1646240	What's the difference between length and magnitude? Nothing.
1647120	1651040	It's the same thing. Three plus one equals four. That's true, we did learn that too.
1651040	1656000	Yeah. This is Thor, the void, how?
1658800	1661120	Buddy, you don't have to use your claws.
1663280	1667040	Oh, I missed a question. Will we go deeper into quaternions later on in this course? No,
1667040	1671440	we're, I'm going to talk about how to use rotations, but I'm not going to talk about
1671440	1675440	how quaternions work internally, because that's not relevant. You don't need to know that in
1675440	1680640	order to make games, because we're not going to be engine coders. We're going to make games,
1680640	1685600	right? So I'm not going to go into like how to write a quaternion class, but I'm going to talk
1685600	1690640	about how to use Unity's quaternion class, how to apply rotation, how to think about rotations,
1690640	1694560	what they are, and so forth. What's the difference between quaternions and rotors?
1694560	1700720	Mostly an interpretation difference, as far as I know. So let's see. There are a few things we
1700720	1706000	haven't talked about yet. So we've talked about some of the operators you can do. You can do the
1706560	1712160	sign will get you the quote-unquote direction of a one-dimensional vector or a value,
1712160	1717360	which is either just negative one or one. Abs will get you the magnitude of a vector,
1717360	1723280	which means that if you have a vector or a value of negative four, abs of that abs of negative four
1723280	1729760	is four, right? It just makes negative values positive. In terms of one-dimensional vectors
1729760	1734720	or floating point values or scalars, right? It's a little different for two-dimensional
1734720	1739520	vectors, and we're going to get to that. And then we have the distance. As you get the difference
1739520	1745520	between two values, it could be like we had before, three minus one or yeah, three minus one. So that
1745520	1749600	will be two. If it's negative two or whatever, then abs will make sure that it's positive,
1749600	1754000	and that's the way to get the distance between two values. So if we want to get the distance
1754000	1759760	between negative two and two, like we want to get this distance, then we can just do that
1759760	1765280	formula up there, right? And then it will work out. We talked a little bit about adding and
1765280	1770640	subtracting as well. But the next thing that we should talk about is like what does it mean to
1770640	1779040	multiply a value, right? So usually the way that I like to think about it is that when you're adding
1779040	1786080	something, addition is an offset. Addition is to move something or increase something by some
1786080	1794080	amount, right? So I usually think of addition as an offset and multiplying as a scale. So we can
1794080	1801120	scale something by multiplying something by some other value, right? So let's say we have the number
1801120	1807600	two, right? We have the number two, and then we want to multiply it by some other value. Let's
1807600	1815120	say we multiply it by two. So if we multiply that by two, what this means is that it's going to be
1815200	1821760	twice as long. So that's going to go from being on two to being on four. So the result of that is four,
1821760	1828720	right? So what that means is that because we have multiplied by two, the length of this vector is
1828720	1835680	going to be twice as long, right? Because again, if you do abs of this one and like check the length
1835680	1842160	or the magnitude, it's now going to be twice as long as I was before. And this relationship holds
1842160	1847920	for any other vectors too. It's not just for scale our values or one dimensional values. Okay.
1848800	1858080	So and then we can do, we can do other examples. So we can do two multiplied by 0.5. So this is
1858720	1868000	basically half a length, right? So 0.5 is 50%. So what we're going to do if we multiply two by
1868000	1872880	0.5 is that it's going to be half as long, right? So that's going to have a value of one,
1874000	1881280	because two multiplied by 0.5 gives us one. And the same thing is, it's the same thing when it
1881280	1890640	comes to dividing, right? So this is the same thing as doing two, two divided by two. So multiplying
1890640	1898960	and divide are kind of the two sides of the same coin, just like, so for instance, let's say we have
1903040	1916400	a plus b. And then we have a minus b. So if you think about these, these two situations,
1917280	1926640	like having a like subtraction, all that is, is kind of like you're adding a negative number.
1927360	1932800	So so another way of interpreting this is that instead of looking at it like this,
1933600	1942480	we could just say that this is the same thing as a plus a negated version of b, right? And negation
1942720	1948560	is not the same thing as subtraction, right? So this flips the sign of it. A negation means that
1948560	1952960	if it's positive, it's going to be negative. If it's negative, it's going to be positive. So
1953760	1959840	like addition is generally kind of like, or subtraction is sort of a special case of addition,
1959840	1967280	right? Actually, let's do, no, let's do multiply. So a multiplied by b, and then we have a divided
1967280	1978720	by b, right? So, so in this case, this is sort of also a special case of multiply, right? So
1980320	1991200	in this case, it's actually a multiplied by the reciprocal of b. As a reciprocal is basically
1991200	1999920	one divided by, by the value. So these two are the same thing, right? So so you can sort of think
1999920	2006400	of addition and multiplication as the core things that you do, where when you're doing subtraction
2006400	2012400	or division, it's kind of like a special case, where you're kind of multiplying by the reciprocal
2012400	2020560	of something. Or in this case, you are adding the, the inverse of something, right? Anyway,
2020560	2025200	sorry, that was a bit of a tangent. Anyway, I just think that's kind of cool. Probably not
2025200	2031360	super relevant to know. But usually the point is, you can kind of convert between these two,
2031360	2036720	you can, you can translate a multiply to a divide if you want to, or divide into a multiply.
2039760	2047520	Yeah. Okay. That's a big word. What's a big word? A lot of this meowing in the background,
2047520	2052880	had to bless our chat for their authority mode. That's a great emote. Thank you so much, Marcus.
2057120	2062880	Oh, reciprocal. Yeah. Oh, sometimes it's called one over as well. But yeah, like sometimes there
2062880	2068080	are actually cases where instead of dividing multiplying can be like slightly faster in
2068080	2072720	terms of like computationally, but usually that goes into the category like unnecessary
2072720	2079040	micro optimization. I guess it depends on what you're doing. But yeah. Okay.
2082480	2087280	Cool. Let's see. Are we, I think we think we might be ready to move into two dimensions.
2089840	2096080	So let's erase a bunch of things. Don't need that. These are kind of weird.
2097440	2102320	Why are these numbers marks? Why do those numbers matter? It's a little unfair, actually.
2102720	2105440	Can you explain Quake Engine's inverse square root at some point?
2107280	2110480	What part of it? I don't, I'm not super familiar with the actual maths of it.
2111760	2117440	But as far as I know, it was like, it was an approximation of doing the inverse square root
2118320	2124320	of something. And we used like kind of weird bit shenanigans that sort of only works with
2124320	2130000	certain representations of numbers in binary. But yeah, I don't, I don't know too much of
2130000	2132720	the history behind it, except what I just said, basically.
2136560	2140240	But I'm sure there's a Wikipedia article or something you can go to.
2142560	2147040	Okay. We've talked about one dimensional numbers. One dimensional or one dimensional
2147040	2152720	vectors are usually not called one dimensional vectors. Usually people just call them scalars.
2152720	2156880	People call them floating point values and programming or decimal values.
2157840	2162080	So I've sort of approached this in a non-conventional way. So don't call things one
2162080	2165600	dimensional vectors because you're going to confuse people. But the only reason I approach
2165600	2172640	it this way is because all of these functions have direct analogies to the higher dimension
2172640	2180240	vectors. So let's go to two dimensions. Let's just enter another world or something like that.
2180720	2188400	So usually when we talk about, when we talk about dimensions, usually we have axes, right?
2189040	2194720	Currently, we've only had one axis, like it's the x axis. Usually this is the number line.
2194720	2199360	We only have the one axis where we have all the numbers, right? And if we want to represent
2199360	2208320	a position here, all we need is one number, right? And we also need to not lock alpha on the layers.
2208320	2213840	Anyway, okay. So basically if you want to represent a position on the number line, all you need is
2213840	2218480	one number because there's only one dimension. So what we're now going to do is that we are
2218480	2229600	going to add a dimension to this. So first off, when we work in multiple dimensions,
2229600	2236640	it's really useful to use colors. So usually when working in 2D or 3D space,
2236720	2246640	usually we use the colors red, green and blue. So the x axis is, I'm using the eraser. There we go.
2246640	2253680	x axis is usually red. And there's a neat little, little shorthand if you want to like remember
2253680	2264480	which one is which. So usually you have x and y and z. So these directly correspond to, you know,
2265440	2272240	RGB, right? So if you want to remember like what axis is what color, then they follow RGB.
2272240	2277280	Like RGB is usually the color, color space we use and they directly correspond to the colors of the
2278080	2284560	axes that we have in our, or the each dimension axes, basis vectors, whatever like term you want to
2284560	2291520	use, they correspond to this. So like if you open up Unity, the colors of the gizmo is going to
2291520	2296560	match this, right? If you see a red axis, you know that that's going to be the x axis, right?
2297440	2306960	So it'll look something like this. There we go. It's something that like, I don't know,
2306960	2312240	it's weird how many people have not realized that. It's like, it's one of those things that's
2312240	2317040	obvious once you learn it. But before that, it's like really not obvious for some reason.
2317520	2324080	But yeah, someone in Twitch chat said left handed. The reason it's left handed is because we
2324080	2330800	are going to talk about Unity. And Unity is left handed. And Unreal is also left handed,
2330800	2336400	although Unreal is z up. But yeah, anyway, so that's why it's left handed. So I'm sorry for any like
2336400	2343120	actual professional mathematicians, because math is usually right handed, which is kind of kind of
2343120	2353600	not great. But whatever, it's okay. I'm also left handed. I'm glad you figured out your chirality,
2353600	2357520	right? All right, so we're going to add another dimension. So so far, we've just had one dimension.
2358720	2364480	And we also need to close this document because Photoshop decided to lock the document, which
2364480	2370240	it sometimes does when I'm using the tablet. Right. So we're just going to we're just going to
2370240	2377840	take this axis and copy it and rotate it. There we go. Oh, if you're like very familiar with math,
2377840	2383040	this is probably painfully slow. And I apologize, but I do want to make sure that everybody feels
2383040	2387280	very covered and know what we're talking about throughout this entire course.
2389840	2395680	So sorry if it's a little a little too basic, but that's okay. I hope that's okay. All right.
2395680	2400560	So let's see. The number line still works the same way. We still have not like,
2400560	2404640	it's still a number line, we just have two of them, right? So now we have one,
2406560	2419120	two, three, four, five, negative one, negative two. Okay. So now, instead of a one dimensional space,
2419120	2424720	which was the number line, we now have a two dimensional space. So generally, when you add
2424800	2432000	a dimension to something, the dimension is always perpendicular to the the other dimensions.
2433280	2438960	So or the other axes. So so whenever you're looking at something like this, then actually,
2438960	2443600	it's not always perpendicular. But if you want to have like an orthographic space, which you usually
2443600	2449600	work in, then all of the axes will be orthographic to each other. So they're they always meet at a
2449600	2455840	right angle. Again, there are exceptions. If you're working with like projection matrices or
2455840	2461440	whatever, then but whatever, that's irrelevant now. Sorry, I'm going into unnecessarily weird details.
2463520	2467120	All right. So now we have a two dimensional space. So you know how we previously
2468240	2475840	marked a point where, you know, we would say that some place is three, right, in terms of position,
2475840	2481200	right? When we are working in two dimensions, instead of every point on the number line,
2481200	2487920	being a single number, a point in two dimensional space is two numbers. So there are a lot of like
2487920	2494880	different ways you can like write vector notation. Usually in mathematics, their notation is really
2494880	2500080	garbage and terrible. So I'm just going to sort of do whatever because math hasn't hasn't worked this
2500080	2508400	out yet. So usually I just do parentheses when I want to like mark a vector. So so let's say we
2508400	2514320	have we want to get a position in this 2d space. Let's say we mark this point right here. Just like
2514320	2520320	we did before, we could draw an arrow representing the position. And if you want to draw a position
2520320	2528960	or a vector vectors, vectors kind of always originate from zero, because vectors don't have a
2528960	2535520	root and a tip, they only have a tip. So like where you put the vector is only for like visualization
2535520	2539840	purposes or interpretation purposes. This is really important if you want to like,
2540640	2544560	know the distinction between like a vector and a point in a direction, which we're going to get
2544560	2552320	into. So now we have a point. So this is a point we can represent as a vector to. And now if we
2552320	2559520	want to like type the coordinates of this one, it would be two on the x axis. And it would be one
2559520	2566720	on the y axis. So so basically what this means is that each of these are called components. And
2566720	2574880	these components of this vector correspond to each of these two number lines. So this is the x
2574880	2581920	component. And this is the y component of this vector, right? In unity, this type would be called a
2581920	2596880	vector to because it's a two dimensional vector. There we go vector to. So so this is how you
2596880	2600480	would sort of write it in code, you would do new vector to and then you have a two dimensional
2600480	2609120	vector, right? Okay, so this, these are the coordinates for this point, right? All right.
2610080	2613200	So so now if we look back at everything we talked about before,
2614080	2619440	we can start doing a lot of operations with these that works exactly the same way in two dimensions.
2620720	2623600	So so let's start with addition. Let's see you want to add something, right?
2625920	2632720	So let's say we want to lock the Photoshop document again, and then reopen it.
2633360	2639280	All right, so let's say we want to add something to this.
2642560	2645280	Let's call this something. Let's call it a
2648000	2652240	or maybe I don't know if we should do a lowercase. Let's do a lowercase. Why not?
2653440	2656960	Oh, discord just said 170 new messages in the student chat.
2657600	2660480	Hope not. No, we're fine. Okay, thanks discord.
2662880	2666320	All right, so we have the vector a the vector a has these values, right?
2667200	2673840	And then we want to add to this. So again, when we were adding numbers, we we sort of had one,
2675280	2680720	a one dimensional vector plus another one dimensional vector, right? If we want to add two
2680720	2687200	dimensional vectors, you would kind of get some number here, some number here, plus some number
2687200	2693600	here, some number here, right? Because you have x and y coordinates, right? So you would have x, y,
2694160	2703680	x, y, if you want to add two two dimensional vectors together, right? Okay, so let's let's
2703680	2714160	pick another vector. Let's say we want to do the vector here. So what are the coordinates of this
2714160	2719840	vector? There we go a question for class. How would we write the coordinates of this vector? It's
2719840	2724880	always really awkward when you ask the class for like questions, because it's usually obvious. And
2724880	2731520	then like, some people don't really want to answer anyway. And it's like, it's we are not going to
2731520	2737760	do this again, this was a mistake. Okay, negative one one, exactly. Because it's it's if we look at
2737760	2745680	the x axis here, this position on the x axis, lands on negative one, just like this position on the
2745680	2752320	x axis, landed at two, right? So now we're the coordinates of this one, it's going to be negative
2752320	2760720	one on the x axis. And then on the the y axis, it's going to land at one, just like the other one,
2760720	2767120	this one was also at one on the y axis, right? Cool. So this is the vector that we're working with.
2767120	2772800	So let's say we want to add these together. Adding vectors together is you kind of do it
2772800	2778960	exactly the same way as you would do with scalars or one dimensional vectors, but you do it for
2778960	2784560	each component separately. And Jesus Christ Photoshop does not want to cooperate today.
2784880	2792480	So one way to think about this visually is that, you know, how we sort of imagine taking an arrow
2792480	2798000	and putting it on the tip of the other arrow when adding? Well, we can do the same thing with this
2798000	2804560	one. And we can kind of take this arrow and put it on the tip over here. So that will give us this
2804560	2813200	arrow, right? I don't know how to draw straight lines. There we go. So we're going to draw straight
2813200	2819680	lines. There we go. So now we've moved this one over here, right? And what we end up with is that,
2819680	2828800	oh, this is called B, by the way. There we go, vector B. So we have a here, and then we're adding B
2828800	2834560	here. So where do we end up? Well, this is the point where we end up, right? Because we add this
2834560	2842400	vector, add this vector, this is where we end up. So what we what we get in the end is this vector
2842400	2845440	right here. Let's do it in different color, because I got a little confusing.
2846800	2854160	We end up with this vector. So this vector, the yellow one is a plus B, right?
2856080	2861840	And you can sort of one thing that's nice about looking at it this way, is that if you have some
2861840	2873440	value like a plus B, this is actually equal to B plus a. This might seem like it's kind of trivial
2873440	2880880	that well, of course, that's the case, right? Well, why would it not be? But remember that that's
2880880	2888800	not the case for like, if you have a minus B, that's not equal to B minus a, right? So it's not
2888800	2896720	always the case that if you flip the values, you get the same result, right? So it's really
2896720	2902880	important to keep in mind when things are, I always forget if it's commutative or which one is which.
2903840	2910800	There are terms for this. Anyway, so if we look at this, if we think about what we did here,
2910800	2918240	we have the vector a at the bottom, and then we added B to a, right? Because we added B here.
2919440	2925040	So if we just look at the geometric interpretation of this, we should get the same point if we do
2926000	2935360	B plus a, right? So if we try that, then we have the vector B. So now instead of moving B over here,
2935360	2941120	we can move a over here, right? So if we put a here, we end up at the same point.
2942000	2946720	It's the it's the same result, regardless of what order we do this in, right? Commutative. Okay,
2946720	2951680	people are confirming that it's called commutative. Good. Okay. Anyway, sometimes that's a useful term
2951680	2957840	to know. Like, it's the same thing for for scalars, a multiplied by B, it's the same thing as B
2957840	2964640	multiplied by a, but that doesn't always apply. In some cases, multiplication is not commutative.
2965360	2971120	So for instance, if you're working with matrices or quaternions, then multiplying those
2972160	2977440	is different depending on the order that you do it in. I think matrices are non commutative.
2977440	2983120	All right. Any questions so far? Is this clear how things work with something a little weird,
2983120	2988480	wonky? Then I guess you just ask questions at any time. I'm always up for answering questions.
2989680	2994240	So that's sort of how addition works, right? If we talk about, let's say subtraction,
2994880	3000800	let's see, I should probably undo a bunch of arrows.
3003760	3008400	All right. So as Steve is saying in the chat that I'm not supposed to read,
3009280	3011120	subtraction is addition in the wrong direction.
3014160	3019280	So just like we took one arrow, put it at the tip of the other arrow, subtraction is,
3019920	3026720	again, like we talked about before, subtraction is the same thing as addition, but we negate
3026720	3032640	one of them, right? And negate in this case, well, we were thinking about like one-dimensional
3032640	3038880	numbers before, right? We have a value of two, and then when negated, we're going to get negative two,
3038880	3043680	right? And if we have negative two and negate that, we're going to get two.
3044480	3049440	So negation is basically, we flip the arrow to the other side around the origin.
3050480	3057440	So in two dimensions, it's exactly the same thing. We could do it like per component,
3057440	3062800	we could think about like, what does it mean to negate the x-axis? Well, if we negate the,
3063760	3069520	or we've negated the y-component of this one, we're going to get this vector, and then we negate
3069520	3075040	the x-component, which used to be two, and then it's going to flip to negative two, right?
3075040	3080080	But an easier way of thinking about it is you just flip the arrow to point in the opposite
3080080	3087680	direction, right? So if we negate this vector, then we're going to get this vector, right?
3087680	3093440	Which is the same thing as just negating these individually. So we could just copy those,
3094160	3102000	move them over, and then there are negative one and negative two, right?
3104160	3109120	So now, if we want to, if we want to subtract something, if we wanted to b minus a,
3110240	3117760	then then we add these two vectors, or we do this one minus this one, right? So if we do
3118560	3125920	b minus a, then we basically take this vector, and we add this vector,
3126880	3133360	and then that's going to land us over here, right? And then if we did this in the opposite
3133360	3140080	direction, if we flipped it, because remember, when we did addition, flipping them had the,
3140080	3147040	gave the same result, right? But in this case, it won't, right? If we do, so this point right here,
3148400	3158720	this is b minus a, right? If we do a minus b, then we would, we can imagine a, and then we
3158720	3167760	subtract this vector, and that would get us over here, right? So over here, we have a minus b.
3169600	3174800	So here we can see that subtracting is not commutative. If we flip the order,
3174800	3179920	we're going to get different results, right? Okay, so if we do b minus a, in this case,
3180720	3188080	we're going to get this vector right here. So this yellow line going all the way here.
3189040	3194960	So one thing that is, that is really, really important and crucial to know about doing
3194960	3202080	subtraction between vectors is that this vector right here is the difference between,
3202880	3210000	between the two points, right? So, so this yellow vector is the same vector
3210000	3215680	as this yellow vector, right? We've just moved it to a different place. So if we want to know,
3215680	3222320	like, what is the, again, the difference between the points a and the point b, then
3223120	3228000	that gives us this result, which in this case, this would be a 2D vector still,
3228720	3235760	but the y component happens to be zero, right? So on the x-axis, we have negative 3,
3235760	3241760	and on the y-axis, we have zero. So that's what, that's the, that's the difference between,
3242560	3248480	that's b minus a, right? And if you want, you can still do, do this component wise. If you want
3248480	3257440	to do b minus a, you could do negative 1 minus 2 gives us 3, right? You can do 1 minus 1,
3258240	3264160	gives us zero. So you could do it component wise as well. Okay. So with subtraction, they become
3264160	3270080	each other's inverse values then. Not really, I guess it depends on what you mean by the inverse
3270080	3275600	values. And they also don't become the distance from one to the other. The distance is a separate
3275600	3280960	concept because the distance is a scalar. But if you subtract two vectors, you're going to get
3280960	3289440	another vector, right? So the vector is a difference between a and b, right? So this is b minus a,
3289440	3295600	and this again is a vector, right? We're going to talk about distance soon, right? So all we're
3295600	3301600	doing here is we're doing b minus a, right? Better described as an offset. Technically,
3301600	3306000	it's called a displacement, or usually a displacement is used when it's like over time,
3306560	3314080	I think. But yeah, anyway, so it's important to remember that this vector, the way we want
3314080	3321840	to interpret this, if this is the difference between b and a, is that this is not a position,
3321840	3328560	right? Now, vectors don't inherently have a property that makes them a position or makes
3328640	3335920	them a direction or makes them a quote unquote vector. But we need to interpret things, right?
3335920	3342320	And that is super important to know what each vector represents, right? So if we have this
3342320	3348720	vector, negative three and zero, it's more helpful to visualize it as an arrow between a and b.
3349600	3357440	But the actual values is negative three and zero on the y-axis, right? So it's really important to
3358240	3362560	interpret this in the correct way. And also, when you're writing code,
3362560	3369360	make sure that you're actually clear about what this is, right? If you want to keep this vector
3369360	3376880	for something, call it b to a, or call it the difference between something or the delta or
3376880	3383520	whatever. But if you just have a vector, then you're not entirely sure, like, should we interpret
3383520	3389600	this as a position? Should we interpret it as a position relative to a, which we are in this case?
3390720	3395200	And so forth, right? Yeah, so this is like a very crucial concept. It's very important.
3395760	3401200	Once we're getting into using different spaces. So when you're doing a lot of things in GameDive,
3401920	3407040	the difference between local space, world space, and all of that stuff is really important.
3408000	3414080	So you need to keep track of like, you know, if you have a vector like this on its own,
3414080	3421040	this one doesn't say if this is in local space, if it's in world space, if it's relative to some
3421040	3426160	other point, or like how this is used, right? So always be like very careful, like how you
3426880	3434000	name your variables when it comes to this. So like the, so this is something that I hate math for.
3434000	3440160	Math is so bad at this math notation, generally is really garbage, because they like, there's
3440160	3445600	so much stuff that's very implicit and like notationally ambiguous. But in code, we can
3445600	3450480	actually name variables, we can make functions that are very clear what they're doing. So in code,
3450480	3454720	you can be very explicit. And I think that's really good, because math is unreadable sometimes.
3456000	3459200	Yeah, in math, you would have things like, well, if you have V,
3460160	3465440	then you need to restart document again and Photoshop. Thanks Photoshop.
3467280	3472480	So sometimes you will have papers. This is an actual case, by the way, where like,
3474320	3482160	V means one thing. This is bold, but then you have a non bold V, that means a different thing.
3482160	3488240	And then you have a cursive V, that means something else, like, this is bad, like,
3488320	3495120	don't do this. I hate it, that like math papers actually do this kind of garbage. So like,
3495120	3499760	you will run into this, especially if you're like, reading shader papers or whatever,
3499760	3506160	that kind of stuff is really frustrating. Yeah, so so math notation usually rely on these types
3506160	3513280	of things. And it's really annoying. But in code, be explicit, be very like clear with what everything
3513280	3519920	is. Have variable names that make sense and so forth, right? Yeah, and then you would have
3519920	3525680	things like, Oh, if it's bold, this is a vector. But we don't draw the vector arrow, because we're
3525680	3530960	just going to presume that people are know, know that this is a vector now. And if it's cursive,
3530960	3535680	it's a scalar value, this is a component of the vector, whatever, it's frustrating. Anyway,
3535680	3539280	stuff like this is why I don't call myself a mathematician, because I kind of hate math
3539280	3544320	notation. And I also don't know much math outside of GameDive. Oh, speaking of which,
3544320	3550320	if there's ever something where you are like, when is this going to be useful? Or what is the
3550320	3557840	point of this? Ask, just ask. Everything I'm going to talk about is useful for game development.
3557840	3564160	None of this is going to be like esoteric, unusual, just bad things, right? So don't be afraid to ask,
3564160	3570160	like, when am I going to use this? Or can I order fries with trigonometry or that type of stuff,
3570160	3574640	right? Just feel free to ask questions. In my experience, vector math is probably 50% of
3574640	3580800	gameplay programming. Yes, pretty much. Like it's like, again, people ask me many times, like,
3580800	3585360	do I need to know a lot of math to do game development? I'm just like, no, not really,
3585360	3591280	you need like vector math, trigonometry, matrices help. And then you need to know how to manipulate
3591280	3598400	values, like remapping ranges, doing oscillation, that kind of stuff. But usually, it's, you don't
3598400	3604160	need that much. Anyway, I'm going to take a picture of this and send it to the students in case people
3604160	3609600	want to keep this beautiful piece of art. What does orthogonal mean? That they are 90 degrees
3609600	3612960	off of each other. Have you ever worked in non Euclidean geometry or altered space in
3612960	3618640	any of the games that you've made? Not really. No, I guess there are like, there are matters
3618640	3624400	of like, interpretation, right? I mean, if you want to call polar coordinates non Euclidean,
3624400	3629360	then yes. But usually outside of that, no, I haven't done a lot of that. Mostly because I like,
3629360	3632720	I don't know, it's like, seems like it might be fun, like experimentally, but I don't think I'm
3632720	3637120	going to actually like, make a game out of it. But it seems like it might be fun to like, try those
3637120	3640960	things.
3653280	3656720	The most interesting math problem I had in Game Dev is trying to forecast the path of certain
3656720	3662320	projectiles. That is a thing we're going to talk about, like ballistic trajectories for
3662400	3666320	a game dev math course. This is a vector. It's like two numbers stacked together,
3666320	3671200	twitch at Lawrence transform. Yeah. Yeah. Last time I did a math course on Twitch,
3671200	3675760	there was someone who was like an actual mathematician. And every time I brought up a concept,
3675760	3682080	they would like bring up the incredibly esoteric, like really complicated, generalized concept in
3682080	3689120	math with like really complicated words. And I'm like, this is not the time. I don't even know
3689120	3694560	what those things are. Jill, I'm not going to be able to explain, I don't know, lie groups and
3694560	3700800	algebraic rings to students. It's amazing how people can understand esoteric concepts in math
3700800	3708240	but not regular social norms kind of yet. Well, but they are separate skills. So, you know,
3708240	3713440	that's how it goes. Okay, so we talked about these things, right? We talked about the sign
3713440	3718960	of a value, talked about the, the length or the magnitude of a value, talked about the
3718960	3724720	distance between two values. All of these concepts also generalize to 2d and any other
3724720	3730000	numbers of dimensions you want to use. So it works for 2d, 3d, 45d, however many dimensions
3730000	3736320	your game is in, right? Okay, so, so let's, let's, let's see what these would mean in 2d, right?
3737120	3745520	So let's bring back some vector. Let's see. See we do this one, you know, drawing straight lines
3745520	3752240	is one of the hardest things in art. There we go, nailed it. All right, so now we have a vector.
3752240	3758800	Cool. So the components of this vector, again, we can look at the the axes here for the x and the
3758800	3766480	y components. And then we can see that the x component is three. So this would be three.
3768480	3774720	And the y component is two. Cool. So now we have our vector. Also didn't really
3775680	3780240	want to draw all of this. All right, so now we have a two dimensional vector again,
3780240	3786880	two values, one for the x axis, and one for the y axis. All right, so we talked about the,
3789200	3795840	the, the sign of the, of the value, right? So if we have, if we have a negative five,
3796320	3805520	for instance, the sign of this is going to be a negative one. The sign of a value like two is
3805520	3814160	going to be one. So, so basically, what this kind of represents is, because again, we are on the
3814160	3823920	number line, right? And we have zero somewhere. So what the sign kind of is, is that it can only
3824640	3831360	be either one or negative one. So turn to think of if I should call these these unit vectors,
3831360	3839280	one dimensional unit vectors, which is a little bit of a curse term. But if you talk about unit
3839280	3844000	vectors, that means that you have a vector that has a length of one, and both of these have a
3844000	3853280	length of one, right? So, so what this means is that the, when we do the sign of something,
3853280	3859200	we get the direction, right? We get the direction for if it's, if it's going on the negative
3859200	3864720	direction on the axis, or we get the direction pointing in the positive direction of this axis,
3864720	3871600	right? So what, what the sign kind of what it really does is that it gives us a direction,
3872720	3879280	usually direction vector. Okay, so what does that mean? In this case, well, we talked about,
3879280	3884800	I mentioned unit vectors. So a unit vector is a vector that has a length of one,
3884800	3888400	which both of these have, right? Even though they're one dimensional vectors,
3888400	3897040	they do both have a length of one, because this distance right here is one. This distance right
3897040	3905120	here is also one, right? So one way of representing something that has the same distance is usually
3905200	3909200	using circles. But in one dimension, we can't really do circles. So let's go to two dimensions.
3910160	3917600	So now that we have two dimensions, basically, oh God, I need to draw a circle.
3920080	3926480	Drawing circles is hard. You know what? There are tools for this. Let's do a, let's cheat.
3927040	3935440	There we go. What a beautiful circle. Okay, is that visible on stream or is it too faint?
3935440	3944480	I think it's, it's good, right? Okay, so so all the, all the vectors that are pointing towards
3944480	3951440	the boundary of the circle. So if you have a vector pointing here, then this has a length of one,
3951440	3958320	right? This vector also has a length of one. If you just measure the length along this arrow,
3958320	3962560	it's one. So what this means is that all the vectors that end up on the
3963440	3969440	boundary of the circles are all unit vectors, right? So when we talk about unit vectors,
3970480	3976000	quite often they're referred to as directions. So directions are always unit vectors.
3976320	3985120	So, so if we want to know the direction of this one, all we were doing is that we're kind of
3985120	3993120	making it the length of one. So, so this vector right here is the direction of this vector,
3993120	3999040	right? And what, what this is called the process of making a vector the length of one is called
3999040	4006080	normalization. So normalization.
4009600	4015360	Eyes were inconsistent. There we go. So the process of making a vector normalized or the
4015360	4021920	length of one is normalization. So this vector right here is the normalized version of this
4021920	4029600	vector. And this concept is also very important. Like this is super, super useful in so many
4029600	4034320	different ways. Yeah, this is, this is like ubiquitous whenever you're dealing with,
4035680	4040560	you know, dealing with vector math in terms of positions of objects, the relation to each other,
4041120	4048960	the direction to some other objects and so forth, right? All right, so let's erase this confusing
4048960	4057440	arrow. So, so this is a normalized vector, right? So, so that is the direction, right?
4057440	4065280	In one dimension, the vector could only have two states, right? It could either be negative one,
4065280	4071360	or it could be one, right? These are the only two states that are valid for a normalized one
4071360	4077040	dimensional vector, right? But for a two dimensional vector, we have an infinite number of points,
4077040	4084960	right? This circle can can fit so many points, the slaps roof of circle, there's something.
4085600	4091360	So like any of these vectors would be a normalized vector and all of them have a length of one,
4091360	4096880	right? Yeah, so so normalized vectors means that it has a length of one, that that's kind of it.
4097600	4102000	So when you talk about normalizing vectors, so let's say this whole vector is called V.
4102000	4108640	If you want to normalize it and math notation, you will usually see it with two vertical bars
4108640	4116560	like this. So this usually means the, well, actually, this could be the length of it. Sorry,
4116560	4122480	if you have V, and then a little hat on top of it, this is a normalized vector. If you have bars on
4122480	4127200	the side, that's usually the length of it. Sometimes you'll see two bars on the side because
4127200	4134720	nothing is consistent and everything is garbage. But yeah, so usually, this would be the direction
4136160	4143040	and this would be the length or magnitude, same word. All right, so this is just the math
4143040	4148160	notation garbage. I'm pretty sure this is correct. I don't, I feel like I have to relearn it every
4148160	4154960	time I read a math paper. So so we might wonder like how do you get a normalized vector, right?
4155920	4162800	How do you go from V to the normalized version of V or the direction of V? Kind of use those
4162800	4169760	like interchangeably, right? So this little vector down here would be the normalized version of V
4169760	4176480	with a little hat on top. But basically the direction of V. Okay, so we're going to talk
4176480	4183600	about how to normalize a vector. So I didn't quite get the normalization. So basically,
4183600	4190240	if you have any vector, pick up any points on over here, then you're just going to be a line
4190240	4197200	from zero, right? And if you want to normalize this vector, what that means is that you make
4197200	4202480	the length of one. So what you get out of it is a vector pointing in the same direction,
4202480	4207760	but it's got a length of one, right? So it used to be this old vector. But if you normalize it,
4207760	4214560	it's going to shrink down into a length of one. Or if you pick a vector that is that is a length
4214560	4220320	that's smaller than one, this vector is going to normalize into being longer all the way out here.
4221040	4228880	So so basically, you can sort of consider it to be a way from going from a point to an arrow that
4228880	4235360	represents the direction to that point. Yeah, when do you usually need to normalize a vector?
4235440	4243440	So the concept of a direction is really important. So so say you have say you have an object that is
4243440	4250000	over here. Let's say maybe this is an enemy, like at this location. And then you want to know that
4250000	4255360	maybe the player is at zero. And you want to know what is the direction that you need to move in
4255360	4260960	order to move towards the enemy. So if you are dealing with like physics or something, and you
4260960	4269200	want to add the vector to move toward the enemy, then usually you want to move at it like a fixed
4269200	4276960	rate in terms of speed, right? So what you usually do then is you normalize the vector between the
4276960	4282240	player and the enemy. And then you have a normalized vector, which again, that's a direction usually
4282240	4289840	in terms of terminology. And then once you have a normalized vector, if you multiply that by
4289920	4294800	your speed, or some value that represents how much you want to move in that direction,
4294800	4299840	you can guarantee that that's going to be in, you know, meters per second, or that that distance
4299840	4306480	is going to be in meters, because the length is one, right? So that means that you get consistent
4306480	4312160	movement in in space. And what's the difference between you do is normalize method and normalized.
4312880	4320880	Yeah, the dot normalize will modify the original one, whereas the other one returns a vector.
4321600	4328560	Okay, did that make sense? So basically, pick any point normalizing it means you get the direction
4328560	4334560	to that point. And a direction in this case, I'm using the word direction to be interchangeable
4334560	4340240	with a vector with a length of one, right? But it's still pointing towards that point, right?
4340960	4346160	Like I mentioned before, one of one of the powers, the powerful things about having normalized
4346160	4355440	vectors is that, let's see if I can undo a bunch of things. So so if you have a direction like this,
4356480	4362880	you can multiply a vector with a scalar as in a a single value. So if you have a vector, again,
4363840	4369360	usually when people say vector that mean multiple components rather than one. But if you have a
4369360	4376320	two dimensional vector, you can multiply that by two, for instance, or like some some number.
4377200	4382880	But if you have the normalized vector, so let's say we have our our vector that's normalized,
4382880	4391760	it's the same thing as this one. And then we we multiply that by a value of two, let's pick two.
4391760	4398800	What that means is that the new vector we are getting out of this, that is going to be
4399680	4409200	the direction along V right here. But the length of it is going to be two. So this is kind of what
4409200	4415120	is absolutely like extremely useful about normalized vectors. Because if you want to move
4415200	4423120	like you like two units towards something, then having a normalized vector means that you can get
4423120	4429920	a position that's exactly like some number away from some point. So if you normalize a vector
4429920	4435920	multiplied by a distance, then you're going to make the length of that vector the value you're
4435920	4442800	multiplying it with. And it might seem like that's not that's kind of trivial. But that's not the case
4442800	4449440	with this vector, right? If you multiply this by two, then at the length of it is going to be
4449440	4455920	like all the way over here, right? So the length of this is definitely not two, right? It's way
4455920	4462640	longer. So so this is why normalized vectors are extremely useful. Because of the fact that the
4462640	4469440	length is one, if we multiply it by some scalar, the length is going to be that scalar, right?
4469440	4476880	Yeah. So that's something that's useful when it comes to this. So like I mentioned before,
4476880	4482400	it's useful in physics, for instance. So if you have the normalized vector, then if you want to
4482400	4489360	move something along this vector, then well, what you can do then is that you could have a time
4490400	4498080	multiplied by your speed, for instance. So time multiplied by speed. So now we're just
4498080	4503440	multiplying all of these together. So what that means that if time is a value that is ticking
4503440	4508320	in seconds, when you start the game, time goes from zero to whatever the current second is,
4509520	4514960	then you're going to have an object that moves along this vector at the speed you give here.
4515680	4520560	We're going to go into more physics stuff later. But so this is just one of the really,
4520560	4524880	really powerful things about having normalized vectors, right? Can you show an example in Unity?
4524880	4531600	Yeah, sure. Do people want to see examples of this? Show examples in Unreal? Nope. I think showing
4531600	4535440	it in practice is really, really good because you're going to work in Unity. So why not?
4536480	4546400	All right, let's nuke some objects. There we go. Let's go 2D because we're not into 3D yet.
4546400	4560000	That's great. Will the game crash if it runs for more seconds than the float 32-bit limit?
4560000	4564960	You're going to have to run the game a very long time. It's not going to crash. It's just
4564960	4569120	that your equations are going to get a hitch and a weird thing that's going to happen once it goes
4569120	4575200	over the limit. I don't think it's going to crash. You're just going to have very weird behavior
4575200	4581760	as soon as you hit that point. Okay, let's see.
4591440	4592480	All right.
4596480	4600480	I probably should have done code examples earlier actually because, again, I like keeping things
4600480	4610000	very pragmatic and practical. Okay, let's just do some of the things we've done here,
4610000	4616160	just to show how it works. I usually really like using onDragismos because you can see it in the
4616160	4622000	editor. You can very easily draw lines and whatnot. So onDragismos is a special function
4622000	4627200	in Unity that is called in the editor, and you could optionally enable it in the game view as
4627200	4633680	well, where you can draw lines and whatever. So you can do stuff like gismos, draw line,
4633680	4638560	and then you can supply some positions, right? So we do
4642000	4649920	something like that. Then we go back to Unity. We now draw a beautiful tiny little white line,
4649920	4657120	right? Cool. Oh, wow. I wonder if there's a vector
4657200	4670720	graphics package you can get. Okay, so draw line, just a very simple one. But we probably want to
4670720	4677200	be able to supply some other points. I do have to wrap onDragismos and if Unity Editor. I'm pretty
4677200	4682320	sure that's going to get stripped for our builds, but I could be wrong. Sometimes you use methods in
4682400	4687840	there that are only in the editor namespaces and whatnot. But if you use handles, for instance,
4687840	4692080	but gismos, it ignores that, I'm pretty sure. Yeah, I'm pretty sure you don't need to strip it.
4692080	4698320	It's not going to, maybe the code in here will be part of the assembly. I'm not sure,
4698320	4701680	but at the very least, it's not going to get called regardless.
4702240	4712720	Okay. All right, so we probably want to be able to pass a vector into this or a
4712720	4719920	point or whatever, right? So instead of just hard coding in here, we can add a property.
4719920	4723920	Or in my case, I'm just going to pass in a transform because it's easier to move it around.
4724800	4731280	Let's call it point transform. Let's make a new game object.
4733920	4737440	Actually, because since we're drawing all of this in world space, we can just use this transform.
4744240	4746960	All right, let's pass point into there.
4747440	4758560	All right. So now we were drawing a line between zero and this transform, right?
4759280	4763600	So now we're basically just taking the position of this transform and we're drawing a line to it,
4763600	4769440	right? So again, we can think of this as the two normal lines we had where this is the origin,
4769440	4772080	and then we have the x-axis and the y-axis right here.
4772800	4778000	Oh, you couldn't hear the discord?
4780880	4783280	You should have been. It might have been a lower volume.
4786320	4792640	All right. So now we have the points, right? So now let's say we want to get the direction
4792640	4798480	to this point because we have been talking a lot about directions, right? So let's get that.
4798560	4805520	So direction to points. So in this case, because it's originating from zero,
4805520	4812480	and we just want the direction to this arrow, then all we need to do is normalize that point,
4812480	4817040	right? And Unity has a bunch of built-in functions. You can do point dot normalized,
4817920	4820800	and that's going to return a normalized version of this point, right?
4821360	4829200	So, yeah. So now we have the direction to the point. And again, I'm using the word direction to
4829200	4835600	mean a vector of length one, which is sometimes also called unit vector, normalized vector.
4835600	4841440	Like it has a bunch of terms, but usually when I use the word direction, I mean a normalized vector,
4841440	4847920	just to clarify. Okay. So if we draw that instead, and then go back to Unity,
4848880	4856480	now this line always has a length of one, right? It doesn't matter how far away the transform is,
4856480	4862240	but the length of it is also one, even if it's shorter or longer, it's going to normalize it to
4862240	4869040	always be unit length. So now it's sort of tracing the outline of what's called the unit circle.
4869760	4875600	So the unit circle is just all the points of the vectors that have a length of one. So it's
4875680	4880960	this circle right here, right? So now we have a direction, right? What have you said that transformed
4880960	4887920	to zero? So probably now it gets very sad because the, I'm pretty sure normalized, it looks like
4887920	4892880	it's just returning a zero vector. So now that the quote-unquote direction that this returns is
4892880	4900640	going to be zero. So it's trying to draw a point from, or a line from zero to zero. So speaking
4900640	4908960	about that, this is a very good case where when you have something like this, this is actually
4908960	4913440	division by zero, like technically, we're going to get into how to calculate the length or how
4913440	4919920	to calculate the normalized vector it's later. But this is actually division by zero. And something
4919920	4927360	that is kind of beautiful in mathematics is that anytime you are dividing by zero, I think this
4927360	4935280	is like so mind-blowing, but like every time you're dividing by zero in some equation, that is kind
4935280	4942640	of the math talking back to you, saying that like, hey, this is a weird case, you need to handle this
4942640	4949040	case, something is happening here, and you need to think about what do you actually want to happen
4949040	4956560	in this case? Because it's kind of telling you that there is a degenerate case or a case that
4956640	4963680	you cannot calculate, because division by zero is undefined. So whenever you have an equation
4963680	4971040	where there is a divide line, think about if the denominator can ever be zero. If it can be zero,
4971600	4978560	figure out what that means, right? Like when would this be zero? Anyway, okay, so now we're
4978560	4983840	just drawing the normalized version of this vector. Do you have a course that you don't need? No, but
4983840	4992320	I have my YouTube channel, which is free, so you don't have to be afraid. Right, cool. Okay, so let's
4992320	4997280	talk about the length, because we've sort of mentioned the length a lot when it comes to
4997280	5000880	normalizing things. We probably should have talked about length before normalization, but you know
5000880	5006240	what, that's okay. All right, so let's talk about length. How do you get the length of the vector,
5006240	5010880	right? I might be skipping ahead, but when you say the vector two dot normalized divides by zero,
5010880	5015920	where does it do that? You're sort of skipping ahead, I'll get to that. But technically,
5016560	5021200	unity's vector two dot normalized handles that case and just returns a zero vector,
5021200	5027440	instead of, you know, crapping out and not knowing what to do. You could sort of make a
5027440	5035120	normalized function that just throws an exception, which might be useful. But unity's normalized
5035120	5040720	just kind of just returns a zero vector. Oh, a zero vector is just a vector with components at zero.
5040720	5048160	So all of the components are zero, sometimes called a zero vector. Yeah, okay. So we talked
5048160	5053440	about normalization, but not how to calculate it, like how do you normalize the vector? Like,
5053440	5058400	how do you go from this to whatever the heck these coordinates are, right?
5060800	5066640	All right, so if there is, I don't know if we should use this vector, let's do another vector.
5066880	5068800	Let's do this one.
5074560	5080400	What a vector, it's a little curved, but pretend it's not. All right, so let's see, what is this,
5081120	5088720	what is this vector? So we have x coordinate, we have negative two, y coordinate, we have three,
5088720	5096240	right? So this is our vector. So now I want to know the length of this, like how do we do that?
5097200	5105760	So now this is going to get into the hacking Pythagorean theorem, right? Because if you think
5105760	5111520	about it, if you want to get the length of this, you can sort of imagine a triangle here. And this
5111520	5117440	is a right angle triangle. And this is something that is taught in math class. So if you remember
5117440	5123520	how to get the length of the hypotenuse, then you know how to get the length of a vector, right?
5124400	5132800	So so basically what we need to do then is we take the x component, square that,
5134320	5143840	and then we add the y component and square that. And then we take the square root of all of this.
5144480	5149680	There we go. That's the Pythagorean theorem. That's how you get the the hypotenuse of a right
5149680	5154720	angle triangle, right? But this is this is how you get the length of a vector, right? Is that
5154720	5158960	clear by the way? We haven't talked about like exponents or what it means for something to be
5158960	5162720	squared or talked about square roots, but I'm guessing we don't need to talk about that or
5163920	5167840	but if not, let me know we can talk about it. Okay, so so this is basically how you get the
5167840	5173120	length of a vector. All right, that's it, I think. So now we've been talking about we talked about
5173120	5179200	for one dimensional numbers, and we had abs instead of something else. But the generalized
5179200	5187040	concepts, you usually write it like this for any other vectors, you can add more components inside
5187040	5193360	of the square root, you can add, you know, z q or z squared, and then you have the length of a
5193360	5198480	three dimensional vector. So, so it's the same thing, like regardless of how many dimensions
5198480	5204560	we have, right? And this actually holds even for one dimensional vector. So, you know, we talked
5204560	5210000	about one dimensional vectors, where you can use the abs function, which is basically just if it's
5210000	5216400	negative, make it positive. But you can do this for one dimensional vectors too. So if you have
5216400	5223200	the square root, and let's say we have the the the one component of negative five, for instance.
5224080	5234320	So, all right, so let's just do the equation for that, right? We do the square root of five
5234320	5243360	squared. So that's five, five times five, right? Which is 25, I think, I don't know, pretty sure.
5243360	5250720	So that's 25, right? Oh, actually, sorry, not five times five, a negative five times negative five.
5251600	5257520	If you multiply two negative numbers, then it's going to be positive in the end, because the
5257520	5265040	sign sort of cancel out, right? So we get positive 25. And then when we do the square root of that,
5266240	5272240	by convention, square roots technically have two results, but we're not going to get into that.
5272240	5279920	So technically, this then returns five, because the square root of 25 is five, the equal sign
5279920	5287680	is incorrect. Yes, because this is the length of that, sorry, length of negative five, then just
5287680	5295840	ends up being five, because that's what the square root then returns, right? So yeah. So it's just
5295840	5301360	kind of like the same equation works for any vectors. Now in practice, when you want to get the
5301360	5306960	length of, you know, want to get the length of a weight, are you getting notification sounds?
5306960	5311520	I think I'm just getting it locally. So so when you want to get the length of a vector for one
5311520	5316720	dimensional vectors or just scalar values, usually use abs, you don't actually do the
5316720	5321920	full equation. But for anything, like any dimensions about that, you generally use the
5321920	5326080	Pythagorean theorem. Okay. So this works for for two dimensional vectors too.
5328160	5334720	Oh, actually didn't. Sorry, legs. You know, I actually have a cold right now. So this is like
5334720	5342400	canonically kind of more accurate, but sorry. Sometimes my backwards writing doesn't work.
5343840	5349440	Okay, cool. So now we have that, right? Now we can actually do that math. So
5350080	5354720	so if we want to get the length of this one, we can just just do that, right? So that's negative
5354720	5363680	two times negative two, plus three times three. And then we do the square root of that.
5366640	5372800	This is not a good looking square. Where's my good color? There we go. So then we can just run
5372800	5378960	these numbers, right? So all right, we do square negative two times negative two, pretty sure that's
5378960	5386400	four. So it's going to be four plus three times three, that would be nine. So four plus nine,
5388640	5397440	which is, oh, God, that's 13, I think. Look, again, I'm really bad at doing math in my head.
5397440	5403600	Pretty sure that's 13. All right, so it's no longer really tied to the x or y axis. I guess
5403600	5412560	we can make it blue or something. So that becomes 13. And then we want to calculate that. So that's
5412560	5420000	when you pull out the calculator. And you type 13, and then you do the square root of that. And it
5420000	5430640	turns out it's 3.6 something, right? So this is approximately equal to 3.6. Sorry, maybe we will
5430640	5437600	do it in blue. Why not? Cool. So that's how you get the length. So now what this value represents
5438720	5448560	is the length of this right here, right? The full length of this vector turns out to be
5449360	5456960	3.6 something something, right? So now we know the length of it, right? Cool. That's how we do it.
5456960	5462320	If you want to get the, like, if you want to do this in practice, you almost never write this
5462320	5467680	formula yourself. And so if you go to Unity, if you want to get the length of the points or the
5467680	5475520	vector, again, length is a scalar, it's just a single value. So the length of this one would be
5475520	5479680	point dot magnitude, because again, magnitude and length, same thing.
5479840	5486560	Yeah. So this is how you get the length. Sometimes it can be useful to calculate the
5486560	5494480	length manually, because sometimes you want both the length and the normalized vector,
5494480	5500000	and in that case, calculating things manually can be really useful. Cool. Everything clear so far.
5500720	5505840	How to get the length of a vector. So now we've just talked about how to get the length,
5505840	5510720	but not how to get the direction or sign and not how to get the distance. Okay, let's do the
5510720	5518560	distance. So the distance, now that we know how to get the length of something. Now, if we get the
5519520	5525920	difference vector or the displacement between two vectors, let's say we want to get this vector
5525920	5534880	between these two right here, then this vector, this would be, we don't have names for these,
5534960	5544160	let's call it A and V, there we go. So in this case, this vector right here would be A minus V,
5546000	5555360	A minus V. So now we have the difference between these two points. So if we want to get the length
5555360	5561040	or the distance between these two vectors, all we need to do is get the length of this vector,
5561840	5567120	because if we know how to get the length of this, then we now know the distance between
5567120	5572480	these two points. And in this case, it also doesn't actually matter if we do V minus A or
5572480	5578320	A minus V, because if we're just interested in the distance, the distance is always positive,
5578320	5583200	so it doesn't matter which order we do this in. So if you want to get the distance between
5584000	5589600	two points, previously we did the absolute value because that's how we did the distance in
5590320	5597120	one dimension. Actually, we didn't, we never call it length. Anyway, so this is how you do the length,
5597120	5600480	so we can basically just replace this by calling it length instead, right?
5611600	5616160	So now we have the, now we can get the length of this one, and the way to get the length
5616480	5620560	is this one right here, right? There we go.
5624640	5633840	Cool. All right, so basically, this is how you get the length. If you want to get the
5635760	5642320	distance between two points, then you subtract the points, one subtracted by the other,
5642320	5645600	and then you get the length of that vector, and then you get a distance.
5646880	5651520	So there is a slight difference in terms of interpretation between distance and length.
5651520	5658640	As a distance, usually is between two points, and length is usually the length of one point,
5658640	5664240	or the length of the vector that represents that one point. So when we want to get the
5664240	5669280	distance between this point and this point, we first subtract them from each other to get
5669280	5673840	the difference vector, and then we check the length of that difference vector. All right, so now
5674800	5680160	we have a way of getting the length, we have a way of getting the distance,
5680160	5683920	have we clarified that the resulting blue vector is still centered on the origin?
5683920	5690160	We talked about that, yeah, like vectors don't have a root and a tip, it's only the vector data
5690160	5695200	itself, right? So we talked about that when we talked about subtraction, that if you want to
5695280	5700160	draw it at its origin, it would be this vector, right? Length, magnitude is of the vector,
5700160	5703760	distance is between two vectors, generally, yeah. So when you talk about distance,
5703760	5710640	that's a special case where you want to know how long is the vector that is the displacement
5710640	5716400	between these two points, basically. So when you talk about distance, again, distance has an input
5716400	5722400	of two points usually, and then you get the difference of those two points and get the
5722400	5728240	length of that. If you want to know the length of something, it's just one input, right? So that's
5728240	5734480	just the length of one vector. Yeah, of course, there are built-in helpers for this, you don't
5734480	5739360	have to do it manually. So if you want to know the distance between two points, you can use vector
5739360	5746240	two dot distance from A to B, or DB null, I guess. So this would give you the distance,
5747040	5749920	but you can do it the other way around, too. You could do
5753120	5757680	A minus B dot magnitude, for instance. This would also give you the distance,
5757680	5763440	it's the same thing, right? Or you could do the manual way, if you want to,
5764400	5773440	of doing A minus B, like A dot X minus B dot X, and then you square that,
5774640	5777520	and then you add the same thing, but for the white component,
5778960	5786960	and then you do the square root of all of that. So this is the same thing. This is also a way you
5787040	5793840	can get the magnitude, or the distance between two points, right? Yeah, just different levels
5793840	5806480	of abstraction, I guess. How to apply it in practice? Well, we could make two points.
5817040	5828080	All right, let's make A green, B red.
5832320	5837360	Now we have two points, right? What a good pair of points.
5841920	5845680	Okay, let's say you want to know the distance between these two, right? First,
5845680	5849760	we need the actual points, because we only have transforms here. So it would be, oh, I need to
5849760	5857840	probably assign them in the inspector. Dude, there we go. So now we have, let's say we just
5857840	5862800	just call them A, so that's going to be A, transform dot position, then we do the same thing for
5863680	5868960	B. So now we have the two points, A and B, and again, we can draw lines to make sure that this
5868960	5877360	is working. Right, I'm not using my library. Gizmos, draw line from A to B. There we go,
5877360	5882320	cool. So now there should be a line between these two points, so we can move them around. We now have,
5882320	5887520	yeah, what a good line, right? But we want to know the distance of that. So if we want to know
5887520	5897440	the distance, I guess we can print it in the inspector or something. So if we want to know
5897440	5903680	the distance, then again, we can use everything we typed here, right? So we can do vector two dot
5903680	5911040	distance. And now we should set this value right here. It might be hard to see it in the inspector,
5911760	5919360	but there's a little value there. There's updating. Now it's 0.45. Now it's 1.9 and so far. So now we
5919360	5926400	actually have the distance right there. Yeah, so that's how you use it in practice. And again,
5927040	5931760	the distance value is going to be exactly the same thing if we do A minus V dot magnitude.
5931760	5938160	So we can compile this. It's going to work. And yeah, still have the same distance. Any other
5938160	5945840	questions before lunch? Any thoughts? How to make a game like Angry Birds? I can't answer that. That's
5945840	5952400	a very long question and a whole production pipeline. Start doing things. That's how we make
5952400	5956400	games. Generally speaking, no one's going to get mad at you for doing A minus V dot magnitude
5956400	5961840	instead of vector two dot distance. I don't think so. I mean, the first one might be slightly more
5961840	5967680	esoteric because you sort of need to know the underlying math for that to be readable. But I
5967680	5973440	think the, I mean, most people should know about that. It's a very important concept. Like vector
5973440	5978720	two dot distance, the nice thing about using that one is that you're being very explicit that you
5978720	5984080	literally want the distance between two points. If you use the A minus V dot magnitude, it's a
5984080	5989040	little unclear, like you get the length of the difference between these two. But like, are we
5989040	5994240	going to, is that interpreted as a distance? Maybe these aren't points. Maybe this is something else.
5994240	5998240	So, you know, sometimes it's useful to like use the one that literally says distance,
5998960	6005040	because it's very clear that you kind of want a distance, right? And conversely, if you don't want,
6005040	6010560	if you want to do the same math as this, but it's not a distance value, then using vector two dot
6010560	6014800	distance is likely going to be more confusing than useful, right? So it kind of depends on the
6014800	6022400	context. I personally really like doing, like being explicit and clear with my code. Hugo,
6022400	6032080	you're spoiling it. I haven't gotten to that yet. But yeah, actually, let's use, let's use, we can
6032080	6037120	just talk about that. But that's the last thing before lunch. Okay, so we talked about the,
6038480	6044880	we have this line right here, right? The, the one that's pointing in the direction of the,
6045680	6051520	this transform, right? So what this one is that is the normalized version of that point,
6051520	6057920	like this is, this is the only thing we've done there. So, so the way to calculate a normalized
6057920	6065200	point. So instead of just doing dot normalized, we can do the point, and then we divide it by the
6065200	6073360	length of that point, right? So point dot magnitude. So this is how you normalize a vector. So by
6073360	6082720	dividing it by the length, the, the length becomes one, right? Yeah. So, so that's how you normalize
6082720	6088320	a vector. I previously talked about the fact that there was a degenerate case, where you're
6088320	6095600	dividing by zero. And if you look at this equation, you can probably tell what the, what the degenerate
6095600	6103600	case is, right? Because point stop magnitude can be zero. So what that means is that point is at zero.
6104400	6111920	So if you have a point that's at zero, and your goal is that you want to get the direction
6111920	6119840	that this point has from the origin. But if the magnitude is zero, then you're dividing by zero.
6119840	6125280	So now, again, math is telling you that something is messed up, and you need to think about what you
6125280	6131600	actually want to do here. So what this means is that you're trying to figure out a direction
6132240	6137600	of a vector that doesn't have a direction, it's zero, it doesn't point anywhere, right?
6138560	6144640	So, so usually in these cases, you need to figure out, okay, what do I do to handle this
6144640	6151040	special case? If it's at zero, do we want to fall back to just using zero? Do we want to check if
6151040	6156480	the length is zero and then not draw it or not execute some piece of code? Usually it's, it's
6156480	6163760	really like, every time you see a division operator, really useful to think about if the
6163840	6169600	denominator can ever be zero, if it can, then that means that you have an interesting case to solve.
6171200	6176720	Yeah. All right, I think that's it for lunch. Yeah, we're going to talk about the square
6176720	6184640	magnitude stuff that you're talking about in the, like after the break. And yes, doing square
6184640	6191680	magnitude is faster. Yes. I think there are some intricacies of like, the property call itself has
6191680	6196800	some weird overhead. But if you manually do the square magnitude, it's like way faster than
6196800	6202640	actually doing magnitude. So I've heard. But that's not for mathematical reasons. That's for silly
6202640	6208320	overhead reasons. Actually, we should do a, we should do a lunch break. Okay, I'm just,
6208320	6214400	there's no audio in the lunch break room. So, so yeah, I'm just going to place an image here.
6214400	6220640	See you soon. See you after lunch. Look at that little boy sleeping in the goblet. These are
6220640	6228240	peaceful little cat now. Where were we? Oh, we just covered how to actually normalize vectors,
6228240	6233840	how to do that, right? Not just in terms of what it is, how to do it using Unity's helper,
6233840	6241200	but how to actually do it yourself, right? Okay. What's the state of things?
6241760	6255840	So we have our code and we were just showing directions, right? Okay. All right. So, so here's,
6255840	6262720	here's a short little exercise that we can think about together. So, so for instance,
6262720	6267040	now we have these two points, right? Previously, when we looked at direction here,
6268000	6273200	this is the direction of the point itself in world space, right? Like this one is,
6274240	6280080	it's just a line drawn from zero in the world, and then out to one distance away from the center
6280080	6285680	in the direction of this point that we move around, right? So,
6288000	6294240	but yeah, so let's say we wanted to draw the direction between these two points. Let's say
6294320	6301280	we want to do direction from, from A to B. So, so let's do that. Let's just figure out how to do
6301280	6309280	that, right? So, we're going to ignore the center points. Let's just hide those. Let's forget all
6309280	6317200	about this. Let's, let's forget about this too. Forget about everything. You have learned nothing
6317200	6326640	so far. Okay. So now we are drawing a line between A and B, right? So now should just keep this line.
6327680	6334080	So now the goal is that we want the direction from A, the green point to B, the red point.
6335040	6342160	So, so we want that arrow, right? So, so how do we get a direction between two points? Well,
6342800	6346800	the first thing we need to do is to get the difference between these two points, right?
6347200	6353200	So if we take one point and subtract it by the other, we get the vector going from one to the
6353200	6360480	other, right? So that's something we talked about earlier. Like the, we have the two points here,
6360480	6368160	both of these, sorry, my desk layout is not in tablet mode. So we have this point and we have
6368160	6373920	this point. And then we want to get the direction between these two points. But first, in order
6373920	6379200	to get the direction, we need this blue vector right here, right? So all we need to do is subtract
6379200	6384880	one from the other. The order in which we do the subtraction will change the direction that the
6384880	6391040	arrow is pointing, right? So usually, you can go either way, depending on how you do the subtraction.
6392400	6400320	So, so generally, it's kind of annoying that if you have, if you have two points, like you have
6400320	6408000	A and you have B, and you want to get the direction from A to B, the way you do that is B minus A.
6408960	6413920	And it's kind of annoying that this is the order that you do it, because it feels like you kind
6413920	6419200	of want to have the A first. But I kind of just have this mental model of you always have to like
6419200	6426960	flip them if you want to get from A to B. So, yeah, so it's always like the, the two points
6427840	6433920	minus the from points. So then from this to this in terms of like direction.
6435520	6441520	Okay, so that's all we need to do to get that vector, right? So let's let's do that vector. So
6441520	6449760	that's going to be called A to B. And that's going to be B minus A. So now we have the vector going
6449760	6459360	from A to B, right? All right. So now that we have that vector, what happens if we draw that one?
6460000	6464320	Well, we can try it out, right, draw it from zero to that vector. So now we're just going to
6464320	6472880	visualize the raw vector, right? So if we do that, it's now going to draw at the origin,
6472880	6481440	right? Because the vector itself doesn't have a root of the arrow, right? So it doesn't really care
6481440	6486960	about the location where we did this calculation. But it is getting the correct vector, like this
6486960	6493520	is the vector going from, from A to B, right? So so what we need to do now is that we just need
6493520	6499200	the direction, right? So we don't want the actual full vector, we want this to have a length of one.
6499200	6505440	So if we want a direction vector, we would need to normalize this, right? So so let's make the
6505440	6516480	direction. So A to B direction. So then we can do A to B dot normalized. And then we can draw
6516480	6521760	the direction. So now this one is always going to have a length of one. So it doesn't matter
6521760	6526800	how far apart they are. But we do have the direction, right? We can move either of these
6526800	6534000	points and the direction is still going to be correct. Okay, so far so good. But now we, we
6534000	6537760	probably want to draw this one at the correct location, because it's kind of confusing that it's
6537760	6543520	down here, like the direction is correct. But the visualization of this vector is kind of offset.
6543520	6549040	We kind of want to see it here, right? Like we want to see it go from the green point to the red
6549040	6555120	point. Okay, so, so we need to move this vector, we also need to hide this line, because that line
6555120	6560160	is going to be covering up a bunch of stuff that we want to see. So let's first hide that line.
6561840	6568880	And then we want to move this vector. So draw line is you supply two points in it, right?
6568880	6574400	And the first point is A, because we want to originate this line from A. So we can just pass the
6574400	6581200	point A into that one. And then in order to make the this be relative to A, all we have to do is
6581200	6587760	add A, because then we're going to move it up by this vector going from zero to A, right? Because
6587760	6596320	that's what A is. The coordinate of A is a vector going from zero to A. So, so then we can do A plus
6596320	6605280	that direction. And then we recompile. It's not going to point toward the red point, right? And
6605280	6611120	so now you can start to see like, you can imagine these being units in a game, right? And you
6611200	6617120	need to point towards some target or whatever. And you need that direction somehow, then this is,
6617120	6626240	this is a way you can do that, right? Yeah. Although the this part is only for drawing purposes,
6626240	6630960	you already have the direction here. The only reason we had to do the A and A plus the direction
6630960	6636240	is to draw it at that location, right? But the direction itself is already done, because directions,
6637200	6643360	in terms of interpretation, direct directions should not be like, they don't really have a
6643360	6651360	position. It's just a direction, right? Yeah. Okay, did that make sense so far? If it didn't
6651360	6658000	have A plus, it would point to the location based on zero. Yeah, if this is just zero, or the, sorry,
6658640	6665200	a zero vector. Oh, it didn't. It was sad about that. If we just set this to vector two dot zero,
6665920	6669680	we remove that one, then it's going to be positioned at the origin, but it's going to have
6669680	6674240	the correct direction, right? So, so the direction is correct here.
6678080	6682560	Yeah, so, so kind of usually the, you only need this direction usually don't have to move it there,
6682560	6685760	we're only doing that for visualizing what's going on.
6686160	6700560	Okay, why are you doing A plus? Because we want to draw at that location, right?
6702160	6707680	So, so if we don't do a plus, it's going to draw the vector going from zero in the origin of the
6707680	6713840	world to the direction that the vector is pointing, right? But in our case, we want to draw it at the
6713920	6720480	location where it's relevant, right? So again, if we just do this, vector three dot zero,
6722320	6728880	recompile. So now it's going to be at the origin of the world, just at zero. So now we're kind of
6728880	6734320	showing the raw data of this vector. But in terms of like visualizing it, it's kind of like
6734960	6738320	annoying that it's at the origin, because if these things are very far away,
6738960	6743360	then we don't even see the origin, even though the direction here is correct. This is the direction
6744080	6750640	going from A to B, right? So, so the direction is correct. But just visualizing it, we need to
6750640	6757280	supply two points to draw it, right? With when we're using draw line. So, yeah. Oh, yeah, there is
6757280	6763440	also a draw ray one, if you want to use it, although I tend to not use that one. But yeah, so, so the,
6764320	6771920	the A here is just to offset everything so that it's positioned here instead, right? So, yeah.
6772000	6779760	So, so all we need to do to make this one positioned at A is that we add A. So zero plus A and A plus
6779760	6784880	A to B direction. And this is unnecessary. So we can just remove that. And then we have A
6786240	6794080	to A plus A to B direction. And then we get the, the two points, right? So what A plus A to B
6794080	6801040	direction is, is the point here. It's the end of this line right here. So that's what the second
6801040	6807280	point is. And this is where the first point is. So what this gives us is this point, which again,
6807280	6812080	goes from the origin all the way out to this tip, because depending on if we want to interpret it
6812080	6816880	as a vector or as a point, we can visualize it in different ways, right? But that's what that
6816880	6822960	returns. It gives us that point right there. What happens if you do draw line A, A to B direction?
6822960	6827680	I mean, it's just going to be confusing. There's no like, interpretation that that makes it,
6827680	6833920	that makes it useful sort of. Yeah, so there's not really much point of doing that. Although,
6833920	6839520	it is very common to sometimes forget to do things correctly. So sometimes you will see issues like
6839520	6844800	this, where you're kind of just confused about what's happening, right? Because this doesn't,
6845360	6849280	this doesn't look like a direction at all. This is, this does not have a length of one, right?
6849680	6859520	Yeah. Because then what we're doing is essentially, this point is originating at the correct location.
6859520	6864400	But this one would still be, if we didn't have A plus, it would still draw the end point at the
6864400	6872080	origin. So we need to move both the origin of the line and the endpoint of the line by A, right?
6872080	6879040	So that it's relative to A. Yeah, you're offsetting both end points or the starting point and the
6879040	6885680	endpoint with A. All right. So now, now we have a way of getting the direction between these two,
6885680	6891840	right? Let's see, there have been a few more things we talked about. So one of the more
6891840	6897600	useful things about directions is that we can very explicitly position things a fixed
6897600	6903520	distance along that line that is very easy to write. So, so let's say you have some, some float
6903520	6918160	value. Let's make it a range, actually, from zero to four. Let's call it offset. It's fine.
6920640	6925920	All right. So now we have a value called offset. Don't need AB distance anymore.
6926880	6935520	Okay. So let's say we want to draw a point between these two points. We want to want to draw it
6935520	6942000	along the line that goes here, right? And we want to set the distance away from the player.
6942880	6950480	So now we're going to call that offset. And we can do xmas.drawSphere. So just drawing little points.
6951440	6957280	So we want to draw that one at the location. So just to make sure that this works, we can try,
6957840	6964560	let's draw at the midpoint between these two. So if you want to get the midpoint or the average
6964560	6970640	of two points, as you would do with any other numbers, you do the same thing with vectors.
6970640	6975120	You add them together, and then you divide by the number of entries you have. So A plus B
6975760	6982880	divided by two gives you the average point of these two coordinates, right?
6985040	6988880	All right. So then we also need a radius. You can just make something pretty small.
6992560	7000320	Actually, that's being a bit more explicit. So midpoints equals that. There we go.
7001280	7004720	So now we want to draw a sphere at the midpoint between these two points.
7004720	7009360	All right. So we've got this gray little sphere, and it is right between these two points. Okay.
7009360	7013840	So now we've got this thing that we can draw. But we don't want to draw it at the midpoint.
7014400	7019920	So we want to draw it a fixed distance from the starting point toward the end point.
7021120	7027600	So if we want to do that, like I mentioned before, the fact that this direction is normalized
7027600	7034640	means that if we multiply it by some value, we know that the length of the resulting vector
7034640	7040480	is going to be that value. That's not true if it's not normalized. So this is kind of the
7040480	7046160	really, really powerful things about direction vectors, or unit vectors, normalized vectors,
7046160	7050400	same thing. It's the same word. Wait, different words, same concept.
7052080	7056560	So we have the direction here, and then we want to get a point along that, right?
7057120	7063360	So we can do atb direction, multiply that by our offset. So offset is the parameter that we can
7063360	7076080	tweak for the distance along this line. So let's call it offset vector. So now,
7080240	7085920	there we go. Sorry. So now we have the vector that is offset that it's going to move from this one
7086000	7094320	toward the red one. Now, same thing as before. If we just draw this one, it's again, this offset
7094320	7100560	vector is relative to the starting point. So if we just draw this vector, it's going to be drawn
7100560	7106400	at zero in world space, right? So we probably want to move that one. So we want to make sure
7106400	7113600	that it's relative to a, just for drawing purposes, right? So we add a to offset vector,
7114240	7121200	and then we can go back to unity. And now we can see that we have this sphere, and it's exactly one
7122160	7126800	one unit away from the starting point. And we can change this offset. So we set it to zero,
7126800	7133040	it's zero units. And we set it to two, it's exactly two units away. And unlike the midpoint
7133040	7138800	that we got before, this one doesn't like squash and stretch, it's always the exact same distance
7138800	7143360	away from the player, right? So what is the point of this? What's the use of this? Well,
7143360	7150400	if you imagine this offset being a time value, then we just created a projectile, right? This
7150400	7157840	thing is just moving at a fixed velocity, right? So now all of a sudden, we just have a very simple
7157840	7164560	formula, where if we increase offset over time, we have the flight path of, you know, an object in
7164560	7171600	motion. And all we've done is basically take the direction, multiply by the distance. And that's
7171600	7177440	it. If you increase the distance over time, then you have a moving object that's moving along that
7177440	7184240	direction vector, right? Okay, did that make sense? Anything that any questions or things that were
7184240	7188480	not very clear? Such a good way of explaining it. I wish I had this lecture three years ago,
7188480	7191680	you should be a teacher or something. I should be a teacher, you know,
7192640	7203840	if only I was a teacher. Yeah, okay. So yeah, so now that this is very much a,
7203840	7210400	like, this is very, very central and very core to working with vectors in in games. And the concept
7210400	7215760	of a normalized vector or a direction is super crucial to have a have a good understanding of.
7216720	7219680	I'm probably going to make that a very central part of all of the,
7221120	7226000	like, all of the assignments that you're getting, because this is extremely core.
7228800	7232800	Okay, let's see, where are we in the schedule? Oh, right.
7235360	7238400	Okay, maybe we should make more than one script, just to make sure that we're not
7238400	7245440	like cluttering this whole thing. I forgot my hotkey for disabling objects. There we go.
7246720	7251120	Let's make another script, just to like show more examples of like, why is this useful?
7252240	7260880	So let's say we want to make a radial trigger, like we have a trigger, and we want something
7260880	7267280	to happen by the distance to that thing, right? So let's create it there.
7276480	7290240	And then some objects, we can test the code.
7299840	7303360	Maybe this is a player. Maybe it's an enemy. Who knows?
7306640	7316240	All right. So we have an object now, and we have our trigger that is just nothing right now.
7317680	7323360	So let's go back to on drug is most again, because it's useful for just testing things very quickly.
7325360	7325920	There we go.
7326480	7336400	Okay. So let's see, well, what do we want to do in this trigger? For instance,
7336400	7342400	we might want to set a radius on this one, right? Like what is the threshold at which we want to
7342400	7348800	want this trigger to activate, right? So let's make another range from zero to four.
7350160	7354000	And then this is going to be the radius, and we default to one.
7356320	7360960	And then we probably want to draw this so that we can actually see what the radius is.
7361840	7367360	This is, by the way, something I talk about a lot when I have my tool dev courses on draw gizmos
7367360	7372000	to just visualize things like radius and whatnot. Super important and really good for level
7372000	7376480	designers so that they can actually see what the range is of everything, right? Otherwise,
7376480	7383040	everything is kind of like difficult to parse. All right, so let's draw this. We can do that with
7383120	7390000	gizmos, dot draw. Let's see, there are many functions here. We can do a draw wire sphere,
7390000	7399920	for instance. So wire is wireframe. Okay, I don't know. I think handles has a wire disk.
7399920	7407760	Maybe we should use that one instead. Okay. One thing to note, though, whenever you're using
7407760	7415120	handles, handles is in the editor namespace. So if you want to ship a game and you're using
7415120	7422240	handles in on draw gizmos, you have to make sure that you compile that out, right? So in this case,
7422240	7426880	if you're so soon as you're using handles, always make sure that you compile out the
7429680	7433440	code, right? Otherwise, you're going to get builders and that makes people sad.
7434080	7441200	Okay, so we're doing handles. Let's draw a disk. We want to draw this at the location of this trigger,
7441200	7451200	right? That's the wrong using. That is true. There we go. Unity editor is the one that should be
7451200	7460240	wrapped. All right, so we want to draw this wire disk. And let's see. We need a center point. So
7460240	7464800	the center point is going to be the location of this trigger, right? So it's going to be a transformed
7464800	7474000	opposition. Actually, let's abstract this a little bit more. So we have the origin of the trigger.
7475520	7480640	So that is just transformed opposition. So we're going to draw that there.
7483840	7489200	Normal. Okay, we need to supply a normal for the disk. We haven't really talked about 3D
7489200	7494400	vectors yet. We're going to get to that later and what normals are in general. But quickly,
7494400	7500240	if you imagine you have a plane, like not an airplane, just the physical plane,
7501600	7507600	then the normal is the direction that is pointing out from that plane. So my finger right now is
7507600	7513760	the normal of the plane of my hand, right? So that's the normal direction.
7514240	7520800	Or it's, there we go. Now we have a better, better normal direction, although
7522080	7528080	usually Z is the normal for surface. So the blue vector there is the normal of my hand.
7528880	7535040	So in order to draw a disk, what that means is that the normal of a disk makes the disk lie in
7535040	7541440	the plane of my hand if we supply the blue vector as the normal to this, right? But we're in 2D,
7541520	7544640	right? So in our case, our coordinate system
7547920	7554240	kind of looks like this, right? So we just need to supply the blue vector, which is the Z axis in
7554240	7566960	world space. So in this case, we're in 2D, we can just tip over our water bottles. So we can just
7567040	7574880	do vector three dot forward. This is equivalent to doing new vector three zero zero one. So this
7574880	7584240	is just a direction vector that is pointing in the Z axis, right? All right. And then then we have
7584240	7591840	the radius. So we want this radius to be the same as the radius of this trigger, right? Jesus Christ,
7591840	7599120	all of you want to have that my gizmo. I only have two and I hand made them. So I don't know how to
7599120	7608320	like sell them. Yeah. Anyway, so now now we've supplied a normal to this disk, we have a radius
7608320	7614960	and an origin. So now we should be able to see a wireframe ring around this trigger. Cool.
7615280	7622800	So now we, we cannot tweak the radius, right? We can change the radius and the ring will change
7622800	7636320	size. We can move this around and everything is working as expected, right? Okay, I 3D printed my gizmos
7637120	7646640	and then I painted them. That was my process. That's about it. Yeah, these, I have two.
7648080	7653040	They're very useful, especially when you get to talking about cross products. It's super good.
7653040	7657760	Do you have the schematics? I just made the 3D model at some point. I don't know.
7658960	7663840	It might actually be at my work computer at Necorp, but I could just remake the model or
7663840	7668880	whatever. It's not a very complicated model to make. All right. So now the question is,
7668880	7674720	how do we actually get the, like how do we know if we are inside of this trigger or outside of
7674720	7681360	this trigger, right? So now all of a sudden we have a math problem that goes through all of the
7681360	7687280	concepts we've been talking about, right? So we have, we have a point, this is going to be a player
7687280	7693680	or an enemy or anything else, right? And then we have the point that is the center of the
7694320	7702000	circular trigger. All right. So how do we solve this? Does anyone have any ideas in chat about
7702000	7707680	how to, how to do this? What are we going to do? Move it? All we need to, all we want to know
7707680	7713280	is whether or not this point is inside or outside the trigger. How do we know that? It's a Boolean
7713280	7720960	state, something we can put in an if statement, right? Check the distance between the two objects.
7720960	7725840	Yes. Okay. We have the distance. What do we then do? If it's greater than the radius, it's outside.
7725840	7730800	Yeah. Exactly. Physics dot overlap, that works for physics objects, but right now we're not using
7730800	7739040	any physics objects or colliders. All right. Cool. So let's do this again. How do we check
7739040	7744640	the distance between these two points? Well, we have the origin and then we have the object
7744640	7754560	position. Let's call it object position. That's object transform dot position. Okay. So now we
7754560	7761440	need to know the distance between these two. So distance equals, we can do vector two dot distance
7762160	7771680	between object position and the origin. So now we have a value for how far away is this object
7771680	7777760	from the trigger, right? But now we also need to know the state of whether or not it's inside or
7777760	7781520	outside the radius of the trigger, right? That's kind of what we're interested in.
7783600	7788960	Okay. So we'll have the distance and the radius. So all we need to do then is to, we can make a
7788960	7798560	Boolean state. So let's call it is inside. And the only case where this is inside is if the distance
7798560	7807760	is less than the radius of the trigger, right? So if the distance is less than the radius,
7808800	7813680	then it's inside. You can do less than or equal to implementation dependence depends on how you
7813680	7820320	want to do this. Yeah. So now we have a state for whether or not it's inside. And let's set the color
7820320	7825600	of the ring to be red if it's outside and green if it's inside. So handle stock color
7826560	7830880	is inside. And if it's inside, we want to do color dot green, green,
7832320	7835280	otherwise call it a red. So red outside, green inside.
7840960	7844720	And transform has not been assigned. So now we have a bunch of null refs,
7845920	7848560	because this is not serialized. So let's serialize it.
7848560	7858000	All right. Still null. There we go. Cool.
7860080	7866240	All right. So it's green. Move it outside. It's red. And it seems to be able to check this distance,
7866240	7873280	right? So as usual, you need to test things, make sure you can change the radius and it still works.
7874000	7880560	It seems like this. This is working. Was everything clear how this was set up?
7880560	7886080	Why it works and everything? Oh, what's the vector 001 needed for? Yeah, that's just because the
7886080	7894240	disk function is meant to be able to draw in 3D space. So this is just our way of telling it to,
7894240	7901040	we just want to draw on the xy plane, right? Because we set the normal of the disk to be on
7901120	7908160	the z axis, which means that the disk is going to traverse on the xy plane, right?
7908160	7914160	Why not use vector three forward? I mean, if I were to write this code, when I'm working on
7914160	7920240	something, I would write vector three forward, just for like, educational purposes, talking about
7920240	7925680	what like what this is, what it means, vector three forward is a little bit unclear, when I'm
7925680	7932560	teaching what vector threes are. So in this case, I just type vector three, because it's made things
7932560	7939360	a bit more clear in terms of what the underlying data is, right? But yeah, that's that was the only
7939360	7944560	reason. Yeah, but otherwise, this is equivalent to vector three forward, it's the same value, right?
7944560	7950160	The only reason that I that I sometimes don't do it is because transform dot forward is very much
7950160	7955840	not the same thing as vector three dot forward. So you need to like, keep in mind, what you mean
7955840	7961520	when you type the dot forward, and sometimes you can like, confuse the two. So yeah, so sometimes,
7961520	7966080	I think it's good to just, you know, write the whole vector out to clarify that this is just a
7966080	7973520	just a vector on its own, one more thing. So we talked about, we talked about how to get the
7973520	7981280	length of a vector, right? And if you recall, this is how you get the length of a vector, right?
7982160	7987200	So you have an x component of a vector, you square that, and then you add the y component
7987200	7992000	squared, and you take the square root out of that. It was the Pythagorean theorem that we
7992000	7997280	talked about earlier, that whenever you have a right angle triangle, you can get the length of
7997280	8002720	the hypotenuse using that formula, right, which is equivalent to asking what the length of a vector
8002720	8010880	is, right? Okay, so we got this, this formula, and we can use this to calculate the exact length
8010880	8019040	of a vector. If you're doing like, if this is in some sort of for loop, and also this person
8019040	8026320	Twitch chat is really annoying, can we just time out this person? There we go. Great. So, okay, so
8026400	8031840	if we can, we can use this distance value to check a threshold, just like we did here, right?
8032640	8037280	So if we, we can check if it's less than some value or greater than some value, right?
8038640	8045680	So if you are doing some code that is like iterating over 600 objects or whatever.
8047200	8052800	So in that case, then you might want to optimize this, because if you're doing a distance check,
8052800	8060000	like every frame across 600 objects, or maybe even more. So, so in that case, you might want to,
8061200	8065280	you might want to optimize it, right? And there is a very nice way you can optimize
8065280	8072400	distance checks when you're doing stuff like this. So, so one thing that is probably good to know is
8072400	8078800	that square roots are not like super expensive, but they're a little bit more expensive than like
8078880	8083680	multiplying. They're a little bit more expensive than adding or subtracting. So it's sometimes
8083680	8090080	good to keep in mind that the square root itself has a cost to it. So again, when you're doing
8090080	8095600	four loops over many objects in an update loop or something, that's when it really matters, right?
8095600	8099280	Otherwise, don't micro optimize this all the time, because it's going to make your code unreadable. So
8099280	8103760	don't do this all the time. I'm just like bringing this up as an optimization tip when you have like
8103760	8110640	very heavy, many distance checks and whatnot, right? So, so if we want to make this cheaper,
8110640	8116720	we could actually get rid of the square root, we could just nuke it, just remove it, and then we
8116720	8122560	can see what happens, right? Okay, so previously we were checking the distance, right? This distance
8122560	8127600	in and of itself contains the square root. So this one is doing the whole square root check, right?
8128480	8138160	But we can do this manually. So, so let's first get the displacement difference vector.
8139840	8148480	We can call it trigger. Actually, let's call it displacement. There we go. Now we're going to
8148480	8154960	use esoteric terms. So the displacement here is that we subtract one from the other, right? So
8155040	8163600	this is the vector going from the origin of the trigger to the, to the object that we're checking
8163600	8168560	the distance to, right? So that's the vector going from the center to this one, right?
8173040	8178240	All right, so that gives us the displacement vector. Now, now we want to calculate the
8178240	8184240	length of this, right? So we want to get the length of this, we could do displacement of magnitude.
8185200	8188960	But if we want to do this manually, just to like clarify the math involved in this.
8191280	8195760	So, so the length or this technically the distance, maybe we could call it this distance.
8196480	8201120	There we go, comment that out. Or just dist, there we go. All right, so we're going to get the
8201120	8206320	distance between these two points, right? And the way we do that is get the length of the
8206320	8214240	displacement vector, right? So we do the x components. And we square that as in multiplied by
8214240	8220720	itself. Usually, if you want to square something, multiplying it by itself like this is usually
8220720	8226640	faster than using like a floating point power function. So if you do like displacement dot x
8226640	8233200	to the power of two, in some cases, this is going to be way slower than just multiplying it by itself,
8233200	8240240	right? So that's a useful thing to know. So, so displacement dot x times displacement dot x.
8240240	8247200	What did we just type? Well, we just did this part, right? The x squared. All right. So now we
8247200	8252880	do the same thing for y squared. So we add displacement dot y multiplied by displacement
8252880	8258080	dot y. So now we did this part right here with the y components. And then finally,
8258080	8266720	we do the square root of the whole thing. All right, so math dot square root of all of this.
8267760	8272720	So we got the distance. And now I'm pretty sure everything should work the same way it did before,
8273440	8281440	unless all of my math is wrong. All right, seems to work. So nothing's changed so far. So now all
8281440	8288000	we've done is basically replace unity's distance function with the math underlying all of that.
8288080	8297040	Stuff, right? Okay, so what we're now going to do is the, the optimization part. So we talked about
8297040	8301920	how you can actually remove the square root and still make the math work out so that we can do a
8301920	8308160	threshold check. Because again, we're only checking a threshold. All we're interested in is, is it
8308160	8315520	less than or greater than some value, right? So in that case, we can remove the square root.
8316400	8322160	So what does this mean then? Well, now this is not the actual distance. But this is the
8322160	8327440	distance squared, as in the distance multiplied by itself. So usually it's good to like,
8328320	8332960	note that with like sq is usually what I use whenever something is squared, right?
8334400	8339680	But now the, the distance squared is not the actual distance, right?
8340560	8347680	Oh, if you want the like actual algebra involved in this, sorry, should probably,
8349600	8357600	should probably write that down. So x squared, if you want to get x out of this,
8358320	8364160	then if you take the square root, if you take square root of x squared, these are going to
8364160	8370560	cancel out and you just get x in the end. So like the, the square root and reason something
8370560	8376640	to the power of two, they're kind of like opposites of each other, right? So technically,
8377440	8384720	square roots are, it's just x to the power of 0.5. We just, we just usually write it out as the
8384720	8392320	square root symbol. Anyway, so basically they can cancel out and whatnot. So if we take the square
8392320	8398640	root of x and raise that to the power of two, then we get x. So same thing between these two.
8399440	8407280	Okay. So, so basically, when we get the distance here, where we remove this square root, we actually
8407280	8412400	have the, the squared distance, not the actual distance. Because if we want to get the actual
8412400	8419680	distance, we need to do the square root on it first. All right. So so now we have this weird,
8420560	8426000	weird squared distance value. So now this one is going to be incorrect, right? Because we just
8426000	8436800	removed a piece of the math, where we just removed a piece of the math that happens to work in this
8436800	8443360	case. And this is again, important to check for or to test your code, right? The reason it works
8443360	8450800	here is because our radius is one. If we set radius to 0.5, then now you can see that the
8450800	8458880	threshold is incorrect. It marks it as inside here. And the same thing if we make the, if we make this
8458880	8465920	larger than one, then it's, it's counts as outside already here, but I really shouldn't do that,
8465920	8472800	right? So the way to do this is that we're using the squared value here. But the radius we're
8472800	8478960	comparing to is the actual distance. But what we can do is that we can take the radius and square
8478960	8485680	that. So now both of these are squared. So if we square the radius, we're comparing the square
8485680	8492240	distance with a squared radius. And now if we go back to unity and recompile, this is now correct.
8492240	8500080	And everything is like working exactly the way we want to. But we managed to optimize away the
8500160	8504560	square root. Like we're not actually using a square root anymore. All we're doing is one more
8504560	8510480	multiply instead of the square root, which is much faster in many, many cases. So if you, again,
8510480	8515840	if you're doing very performant sensitive code, you can get rid of that square root.
8517440	8521920	Now it's a little annoying to have to type all of this. So there are built-in functions for this.
8521920	8528000	So instead of like typing all of this manually, you can get the displacement vector and do squared
8528000	8534880	magnitude. So this is built into unity. So you can just do square magnitude. And now you have the,
8534880	8542720	well, the squared magnitude of the distance between these two. And there is also, actually,
8542720	8549440	is there, is there a, there's no square distance. Okay, well, anyway, this is sort of the square
8549440	8553520	distance, then we were just doing the displacement vector manually, and then we'll get the square
8553520	8559200	magnitude of that displacement vector, right? Anyway, so this is a neat little optimization you
8559200	8568000	can do. But one thing that's very important, this only works if you're only checking a threshold.
8568640	8574160	If you need the exact distance, you have to do the square root, because we are no longer calculating
8574160	8582400	the distance over working with this is wonky space that is not linear, right? Actually, let's
8583120	8589840	okay, I can show you the quick little example. Oh, decimals.com slash calculator. This is an
8589840	8594400	incredibly useful tool. We're going to use this a few times throughout the course. It's good,
8594400	8601200	you should use it. Anytime you want to graph something. All right, so, so let's say we have
8601200	8607360	our distance, let's say that's x. So if we interpret this along the x axis, so now we have
8607360	8611440	a value representing the distance as we go further away, right? And obviously,
8611440	8615040	it's just going to be, it's just going to be one, it's a diagonal that just goes up there.
8616560	8623680	But if you do x squared, then you can see that, but wait, are you? What?
8628320	8630320	Oh, no. I'm sorry.
8633040	8638240	Okay. All right. So like I mentioned, this only works for thresholds. If you want to know the
8638240	8643920	exact distance, then you want the red value here, not the blue value, because this is not a distance
8643920	8654000	value. But if you take any points, like if you, if you say at here, we have one coordinate, and
8654000	8661120	then we have another one here. We want to know if you're to the left or to the right of this value,
8661120	8666000	that's going to be true, regardless of which of these two curves you're using. This is a little
8666000	8672640	esoteric if you're not like accustomed to reading curves. But basically, if you want to check if
8672640	8676960	something is less than or greater than something else, which is exactly what we're doing here,
8676960	8682720	we're only checking if it's less than or greater than something. In that case, you can just use
8682720	8689680	the squared versions, because the comparison is true, regardless of if you have the square root
8689680	8695280	or not. That's why we can do this optimization, but only when checking thresholds, because the
8695280	8704320	blue line is not an actual distance, it's a square distance. That was a long thing. Any,
8704320	8708400	any questions so far? How do you calculate the normal of the plane? Is it the rotation then?
8709840	8718080	So the, it depends on how the plane is defined. It really depends. If it's a two dimensional plane,
8718960	8721040	then if you want to calculate the normal of that plane,
8721280	8730960	like say the, say your plane is defined by the red arrow here, and this is 2D, then the normal is
8730960	8738000	just going to be, it's just going to be the red arrow rotated 90 degrees, right? And that's it.
8738000	8743360	And then if you imagine the plane extending it to infinity along the red axis, right? Then you can
8743360	8750160	just rotate the direction of that plane to get the normal. But then again, the thing is whenever
8750160	8755200	you have a mathematical plane, the normal is usually built in to the plane itself. So you can
8755200	8760400	usually get that normal out of just the representation of the plane that you have. But it really depends
8760400	8767680	on like, what is your plane defined by? Like a mathematical plane works in one way. If you have
8767680	8772880	an actual 3D mesh, then things work in different ways, right? Because now you have triangles and
8772880	8777920	maybe colliders that you need to like, I don't know, raycast against or whatever. Now, so that
8777920	8782480	works differently than like purely mathematical planes. Okay, so the last thing we're going to
8782480	8792080	talk about now, before we end today's thing, we are going to talk about the dot product. So,
8794640	8801040	swoosh, I think we might need to clean up this whole thing. Okay, there we go. What a good,
8801040	8808960	good circle. Let's make a new layer. Let's draw some lines.
8815680	8822000	Now, okay, so this is, this is going to get very close to trigonometry, but we're not going to
8822000	8827360	have time to talk about trigonometry today. So instead, we're just going to talk about the dot
8827360	8834480	product. So the dot product, when you're talking about multiplying vectors together,
8835920	8842240	generally, that is an ambiguous statement. So when you talk about multiplying two vectors,
8842880	8846960	there are many, many different ways that we can like approach that, like what do you mean by
8846960	8852480	multiplying kind of the most straightforward one is that, let's say you have two vectors, you have
8852480	8862320	vector a, and again, the vectors are their components, you have the x component, and then
8862320	8866480	you have the y component of a vector, right? Or if it's a 3D vector, you also have a z component.
8867280	8872320	All right, so what does it mean to multiply two vectors? So if we do a multiplied by b,
8873120	8880400	if you just write this sign here, just this little dot, usually that means that you're doing the dot
8880400	8887280	product between vector a and vector b. And the dot product is actually a very specific type of
8887280	8893600	multiplication. When you talk about multiplying vectors, there are like, there's the dot products,
8894320	8901200	there's the cross products. And I do believe the wedge product, where the wedge product is very
8901200	8907600	close to what the cross product does. But anyway, so there are different ways of multiplying them,
8907600	8912560	and knowing which one you want to do is really important. There's also component wise multiplication,
8913360	8919840	where you kind of take, so there is, there's the component wise multiplication, where
8920880	8925440	you kind of multiply these numbers together. And then you get a third vector out of that,
8925440	8932000	that is the, you know, this x multiplied by this x gives you some value here. And the same thing
8932000	8937920	with the y component, but then it gets some value here. This is actually one of the least common
8937920	8946320	multiplication methods. This is almost only used when you want to scale things on like a non uniform
8946320	8954560	scale or whatever. So, so this is usually called component wise multiplication. Unity has it in
8954560	8959440	the form of vector two dot scale or vector three dot scale. Yeah, so so this is usually a very
8959440	8964880	specialized form of multiplication. That's that's not always very this is not used very much actually,
8966000	8973440	except for scaling. Okay, anyway, so let's talk about the dot products. Now, the way that I usually
8973440	8977120	like to approach the dot product, like there are many approaches, some people like to go
8977120	8982000	through trigonometry to talk about it. But I like to think about things geometrically,
8982000	8987040	because that makes sense to me in many, many ways. All right, so we have our unit circle.
8987840	8994320	So by unit circle, I mean that the radius of the circle is one. So any vectors
8994320	9000720	that is pointing to, to the edge here has a length of one, right? So
9002800	9010480	if you have, let's see, let's put two vectors here, we have one vector there,
9011440	9016880	and another vector here. Actually, let's use separate colors, because that's going to be useful.
9018400	9020400	So we have a vector here, let's call it a,
9022480	9030320	and another vector. Actually, let's do, let's do this one. There we go. Perfect. And B.
9030800	9042480	So now if you have, now we have two vectors, right? We have vector A, and we have vector B.
9044480	9050880	And then we can ask what happens if we take the dot product of these two vectors,
9050880	9054800	because the dot product has two inputs that has two vectors as input.
9055520	9059040	Usually in math libraries and whatnot, it's just called dot.
9062400	9073600	So let's write that down. The dot product between A and B.
9075920	9080640	There we go. Okay, so the dot product, what is the dot product?
9081600	9090160	Geometrically, you can think of the dot product as projecting one vector onto another vector.
9091440	9096960	So if you look at, if you look at B here, for instance, if we do the dot product between A
9096960	9104400	and B, what we're going to get is actually, if you can think of B flattening onto A,
9105040	9114480	perpendicularly, what the dot product gives you is this length right here. So sometimes,
9115440	9121440	sometimes the dot product is referred to as a scalar projection because of this reason. It's
9121440	9126800	called scalar because the result of the dot product is not a vector. The result is just a
9126800	9134080	numerical value. So the dot product between B and A here would be, well, the whole thing is one,
9134560	9140160	so this is less than half. So I guess this is like 0.4 or something. So it's approximately
9140160	9147280	0.4 in this case. Okay, so you can sort of think of it as projecting one vector onto another.
9147280	9155120	Now, there are some caveats. For this to work, A has to be normalized. This one has to be a length
9155120	9164240	of one. You can, you can change the length of B. So if you say make B this vector, now the length
9164240	9173040	of B is not one, but the scalar projection is still going to be the projected distance along here.
9174080	9179360	Right? So in this case, it's going to be like 0.8 or whatever. Okay, so that's what the, that's a
9179360	9185440	very like simple way of like visualizing what the dot product does. It projects vectors onto each
9185440	9193440	other. And in this case, if you reverse the order of A and B, you actually get the same results. So
9193440	9200640	this one, it doesn't matter what direction you do this in. Because again, if you do this the other
9200640	9207600	way around, then we're going to do a 90 degree projection onto B. And that gives us this distance
9207600	9212960	right here. And that is also 0.4, right? So it doesn't matter what direction we do this in.
9212960	9218240	All right, so you can swap those. It doesn't matter. We still get like a valid value out of that,
9218240	9225680	right? All right. So that's what the, that's what the dot product does. One thing to note, though,
9225680	9232080	is that the dot product can be negative. So it's a little bit misleading to call it a distance.
9233040	9240000	So for instance, if we have this vector as our B, then what's going to happen is that it's going
9240000	9247680	to project against the kind of the infinite line here, right? So in this case, it will be the same
9247680	9255840	thing. It would project against the the other vector like this 90 degree angle. And then you
9255840	9260720	would get again, you would get this distance, but in this case, it's going to be negative.
9261520	9267760	So you can sort of think of this as a signed distance in this case, right? So this is a negative
9268320	9278720	0.4. So here's a very useful way of thinking about this. Now, if you look at A here, and you look at
9278720	9285040	the values we have, we have 0.4, we have negative 0.4, it's one over here. And if we were to do the
9285120	9291600	dot product where they're completely opposite of each other, we would get a value of negative one,
9291600	9299680	right? And you know how we've talked about the number line before, right? If you think about it,
9300720	9310160	B projected onto A is kind of a way of getting a number on the number line of A, right? So you can
9310160	9316640	sort of extend A and consider that to be a number line, right? Sort of like this. So when you project
9316640	9323760	it onto that, you kind of get the coordinate along the direction of the axis of A. So this is kind of
9323760	9329840	a very nice way of just converting something to some other coordinate system. And this is actually
9329840	9333440	used if you want to do space transformation, which we're going to talk about next time.
9334400	9344000	This is used for that, for instance. Okay, where do you use dot? I'll get into that very soon.
9344880	9348720	First, I'm just going to talk about how you do the dot product, like how do you calculate the
9348720	9354560	dot product between two vectors? It is very simple. It's like surprisingly simple for something that
9354560	9363040	is incredibly useful. So the dot product between vector A and vector B, this looks like it's not
9363120	9369600	equals. So the way to get the dot products, well, the actual practical way is that you
9369600	9375040	use the dot product function in your vector library. But if you want to do it manually,
9375040	9384720	you would do A dot x as in the x component of the A vector. And then you multiply that by
9385040	9399680	B dot x. And then you add a dot y, and then multiply that by B dot y. That's it. It's very
9399680	9406800	straightforward. Multiply the x components, and then add the multiplied y components. There's not
9406800	9412880	much more to it. So that's how you get the dot product between two vectors. Now, again, this
9412880	9420000	projection example is only valid if one or both of your vectors are normalized. It doesn't quite
9420000	9425920	work out if none of them are normalized, because then it doesn't really project, because then it
9425920	9431840	projects and scales that distance. So it's good to keep in mind that the projection interpretation
9431840	9440320	mostly holds if you're doing, if one of them is normalized. So again, the number line example
9440960	9447280	kind of presumes that A is normalized, because then you're kind of getting the B coordinate
9447280	9456320	along the vector of A. Okay, another useful way of looking at it is that, let me erase some things.
9457200	9464560	I'm erasing too much. Why did I draw these on the same layer? It's fine. Everything's fine. Oh,
9464560	9470560	yeah, like someone is mentioning the square magnitude. This also happens to be the way that
9470560	9484400	you get the square magnitude of something. So if you do the dot product between A and A,
9487360	9491840	and then you do the square root of this, you have a distance function. This is mathematically
9491920	9497440	equivalent to getting the distance or the length of vector A. So it's kind of a shorthand to do
9497440	9509360	that. And if you use the same vectors for both inputs for the dot product. Okay. So here's another
9509360	9515680	way to interpret the dot product. So the dot product can also be used to kind of figure out
9515680	9522400	how close are these vectors to each other. So if you think about A here,
9525520	9531760	and you have your vector B, when you project this one, you're going to get a value that is very
9531760	9539920	close to one. This is going to be like 0.999, whatever. If they are exactly equal, as in the
9539920	9544640	vectors are the same, and they're both normalized, the dot product is going to give you one.
9546000	9550080	So if we can kind of think about what happens when you rotate this vector around,
9550960	9556320	if B is pointing here, we're going to get a lower value in the projection, right? Because it's moving
9556320	9562880	toward the center now. So this is going to be 0.6 or something. And then when you kind of imagine
9562880	9568560	keep rotating this one, if it's perfectly perpendicular, like this, as in it's 90 degrees
9568560	9576320	off of A, then the dot product is going to be zero. And this is really, really crucial. So this
9576320	9582560	is important to know. So if we track what the values are, then it's going to be one over here.
9583280	9588720	Let's do one. Somewhere here, it's going to be 0.5, right?
9589040	9602400	Somewhere here, it's going to be like 0.8 or whatever, and so forth. And because we're projecting
9602400	9607680	this onto A, there's also symmetry in this, where we would have 0.8 over here as well.
9608800	9616960	And if we go perpendicular in the other direction, this would also be zero. This also projects to
9616960	9621680	zero. It's 90 degrees off. It's going to project towards this, and it's zero again. So we get back
9621680	9627520	to zero. And then we can continue to the other side. If they're completely opposite, then you get
9627520	9633920	a value of negative one. And then you have values in between here. So you know, you would have 0.5
9634000	9646800	here, and 0.5 somewhere here, right? So what does this mean? This means that if you have two
9646800	9654640	normalized vectors, and these are, and you're comparing two vectors, what you are getting
9654640	9660480	is kind of an approximation for how close they are to pointing in the same direction, right?
9661440	9667040	So in this case, I'm just talking about normalized vectors. Both of these are normalized. So if one
9667040	9671600	of them is not normalized, then these values are not going to be interpreted exactly the same way.
9671600	9679280	But the sign of this still holds. So what you can notice now is that all of the values on this side
9679920	9687200	are negative. All of the values on this side are positive, right? So one thing that the dot
9687200	9694240	product is very useful for is, is this vector pointing towards something? Or is it pointing
9694240	9701520	away from something, right? Because now if we consider the green arrow to be the direction
9701520	9705680	a player is looking, and the red arrow is the direction to an enemy or something,
9706880	9711520	then we can tell if the player is looking away from the enemy by doing the dot product, right?
9712480	9717600	If the, if the player is looking in this direction, well, oh, this should be negative, sorry.
9717600	9722560	Then this is a negative value, right? Because all of these are negative. Sorry, I forgot to do
9722560	9728800	negative for these. Yeah, so all of these are negative values, all of these are positive values.
9728800	9733840	So now if we do the dot product between the player direction, and the enemy direction,
9733840	9738320	it's going to be negative here, because it's projecting here, got the distance here,
9738320	9745200	and that's negative. So this is super, super useful. I do have an animation for this too.
9751600	9755120	Not that animation. It's the wrong one.
9761200	9764560	So here's an example. This is basically what I've just been talking about now.
9765280	9769680	You have two vectors, if they point in the same direction, you have a value of one.
9769680	9775360	If they point directly perpendicular to each other, it's a value of zero. If they point completely
9775360	9782960	in opposite direction, it's a value of negative one. And that's kind of it. So again, this is only
9782960	9790560	when you have two normalized vectors. If one of them is not normalized, the positive and negative
9791040	9796320	those rules still apply. In that case, they don't have to be normalized. But for these values to
9796320	9804080	be exactly one and negative one when pointing in opposite directions, they have to be normalized.
9804720	9808240	Can I calculate the second vector if I only have the first vector on a dot product?
9809680	9814080	Well, it would be ambiguous, because you would have two results, not one. But I believe it's
9814080	9820080	possible. Is there any point having one vector larger? Yes, if you don't want to check the,
9820080	9825280	if you're not interested in checking, like, are they facing the same direction or some other
9825280	9832720	direction? Sometimes you want or very often, actually, the vector is shorter or longer than
9832720	9839280	a normalized vector. So this vector projected onto this one. Sometimes this distance is still
9839280	9845520	interesting. And it's very often interesting as well. So let me be a bit more practical,
9845520	9850160	because we've been talking about like esoteric things. And let's let's think about
9851040	9853840	what this can be useful for, right? Let's see, maybe I should
9856160	9861920	move. Do I move that? Or do I keep it? Angle is implied by the dot product? No,
9861920	9866960	angle is we're not talking about angles, angles of spoilers. We're gonna get into angles as soon
9866960	9873120	as we talk about trigonometry. But right now, we're just doing vectors. Okay, here's an actual
9873120	9880480	example from the game that I'm working on. So let's see, you you happen to have a game that
9880480	9889040	has a surface of all things. So let's see, guess we can give it some some direction. There we go,
9889040	9897120	three is soft and good. I don't know how to make this continuous. There we go. Cool. Okay, so we
9897120	9902960	have a surface. We have a point on the surface. It's solid underneath here. So you can just
9902960	9909760	pretend that this is solid. And you have air here. Now we quickly mentioned, or we briefly
9909760	9916960	mentioned the normals, or what a normal is of a surface. And again, a normal is a something that
9916960	9925200	is pointing directly out from some surface. So like the blue vector here is normal to the palm of
9925200	9932880	my hand, right? The other two vectors are tangent to my hand, they're not normal, right? So pointing
9932880	9941760	directly out from some surface, that's the normal. So let's let's let's visualize some normals. So if
9941760	9948080	you have this surface, again, the normals point directly out from the surface. So the normals
9948080	9952960	along this surface would like kind of continue like this, right? And then you get a vector like
9952960	9959680	that, and so forth, you imagine these have a length of one. So these are the normals of the surface.
9960400	9970000	So let's think about this point in particular. And let's draw the normal. The normal is going
9970000	9976560	to be very large, because our circle is very large. So this is the normal.
9979200	9986480	Let's call that N. Now we have the normal of the surface. So here was a problem that I had.
9987440	9997360	When I was working on a game, back in the days, if you have a surface, and then you have an object
9997360	10003280	for some simplicity sake, let's say we have a have a sphere or a ball or whatever. And this
10003280	10010320	object is moving at some speed, and it's going to hit the this ground and then bounce off of it,
10010320	10018400	right? Okay, cool. It can bounce off of this surface. Now you want to play an audio clip.
10019360	10026400	So let's say you you want to play some audio clip. There we go. That's my audio clip symbol.
10027040	10031200	Because you have an impact sound, you want to make a clunk sound when the ball hits the ground
10031280	10041040	or something. And now the question is, what is the volume of this sound? Like how loud should this be?
10043120	10050240	How would you solve this problem? So now we're getting into like, trying to figure out, okay,
10050240	10057280	if we are moving very quickly, then obviously we want it to be louder than if it's not moving
10057280	10064560	quickly, right? If it's moving very slowly hits the surface, then we might not even want to play
10064560	10071680	a sound, right? Okay, so let's just think about this some more. So so maybe volume
10074400	10080880	is just the speed of the object, right? Cool. All right, we got the volume equal speed.
10081680	10089600	But consider this case, if you erase these, all right, so we have this ball,
10089600	10099520	let's say we throw this one down, straight down at some speed, let's say it's 10 meters per second.
10100640	10107360	And then we have another ball that's at a very low angle, and it's going to hit the ground
10107440	10115920	at the same speed. So we want this one to be louder than this one, right? Because obviously,
10115920	10121040	this one is going to make a very hard impact on the surface. Whereas this one, it's not going to
10121040	10124800	make a very hard impact. Like it's going to mostly going to grace the ground and then do a little
10124800	10132720	bounce, right? So now we have this issue of like, well, it's not just based on speed, we have to do
10132720	10140000	something else, right? Okay, so what can we do? So what we can do is that we can use the normal
10140000	10147920	of the surface to figure out how quickly is it moving toward the surface? Because that's the
10147920	10154400	key thing that we need to know, right? So so let's let's bring out the normal again.
10154720	10164640	So the normal represents the direction of the surface, right? And what can we then do? Well,
10165360	10169760	we can think of these arrows here as our velocity vectors, we're going to get into more physics
10169760	10178320	later. But you can sort of represent velocity as a vector. So basically, each component like x says
10178320	10184240	how quickly you're moving along the x axis, and y is how quickly you're moving along the y axis.
10184240	10189760	So okay, so how do so how does the dot product come into this? Well, what we can do then is that
10190880	10197760	if you imagine this normal here, we have the velocity vector here, and then we can project this
10198800	10204560	onto this line, right? And again, the dot product gives us the projected distance here.
10206000	10211120	And then we can do the same thing here, right? We take this one, do the dot products,
10211120	10217360	and now we get this distance right here. So even though I guess pretend this arrow is as long as
10217360	10225840	this one. But the point is that now, using this normal, we can get speed in this direction,
10226720	10233680	rather than speed overall, right, like getting the getting the length of the velocity vector
10233680	10239280	is your overall speed. But it doesn't say what the speed is in the direction of the surface,
10239280	10243200	right? But that's what we're interested in. If you're moving directly toward the surface,
10243200	10249040	it should be really loud. If you're moving really fast, but you're not really hitting the surface
10249040	10255120	fast, you're kind of moving fast just tangentially, then we don't want it to be loud. So in this case,
10255120	10262640	every time you have some object that is hitting some surface, you know, this object is flying
10262640	10269840	onto the surface, then we can just do the math. If the if this is the velocity, we project this onto
10272800	10279280	onto the normal vector. And then we get a magnitude here for how loud this should be,
10279280	10286480	right? Okay, so let's try a different direction. Another ball that's flying in this direction.
10287200	10293120	Well, if we do that, then we're going to get a vector like this. And when we project this one,
10293840	10299680	it's not as loud, right? Because now we're only using this span right here. And this is much
10299680	10308320	shorter and a much smaller volume. So, so what we're getting is the direct or the the the speed
10308320	10315440	along a specific axis. So we get the speed along the normal, that's what we're getting
10315440	10320400	when we do the dot product between, you know, the velocity vector of the object and the normal of
10320400	10328400	the surface. Yeah, so long story short, you need the dot product, basically. Yeah, so so that's
10328400	10333120	that's one use case. So that's what I've used dot product for. For instance, there are millions of
10333120	10339840	use cases for the product. But this is just one of them. Yeah, do both of these vector need to
10339840	10346720	be normalized before using the dot product? No. So specifically here, it's very important that the
10346720	10353360	normal is normalized, and that the velocity vector is not normalized. Because we do want to
10354560	10360080	the longer the velocity vector is, the faster this object is moving, right? So if you imagine the one
10360080	10365920	that's moving downwards, that's this velocity vector, if it's moving faster, we want it to be
10365920	10373120	louder, right? So that would still project onto this line here. And then we get this value here.
10373760	10379680	So we still want it to be louder. So we don't want to normalize the velocity vector. We do want to
10379680	10386480	normalize the the normal vector, though. Otherwise, we're not going to get things that are in meters
10386480	10393520	per second anymore. And it's not going to be a correctly projected speed along an axis, right?
10394480	10402080	Can you post that image here? Yes. All right, let me just complete this because I kind of left
10402080	10415280	this incomplete. Okay, so so better way is something along lines of volume equals the dot product
10415280	10426320	between the velocity and the normal. There's some caveats here. So if you remember how the
10426320	10431040	dot product works, these values are going to be negative. So you have to like make sure that
10431040	10436080	they're positive, you might want to multiply them to change the overall loudness or whatever.
10437360	10443200	Yeah, but if but but again, the dot product product is a scalar. If it's negative and you
10443200	10448000	don't want it to be negative, then you can just do the do the absolute value of that, right?
10449200	10454960	So getting the absolute value of this would get you get you some volume.
10456960	10463120	But the core concept is that with the with the dot product, you get a projected
10465360	10470720	projected velocity along some axis. In this case, the axis was the normal of the surface, right?
10471360	10476480	Um, was that clear, by the way? Yes, I can post that image in the discard.
10477200	10486640	Actually, let me write some notes to make sure.
10487280	10501840	It's a little misleading to say speed, because speed is generally not signed,
10501840	10505680	it's pretty much always positive. So I'm going to put that in quotation marks.
10510720	10516400	Oh, people are talking about the cosine. Yes, the dot product has a very intimate relationship
10516400	10520080	with the cosine, but we haven't done trigonometry yet. So we're going to do trigonometry later.
10524960	10529760	Um, okay. Yeah, let's let's post this in your discard.
10533760	10537600	Geez, when people are skipping ahead of your math class and spoiling the
10538240	10543120	what's going to happen in the next chapter. Yeah, I can just show you another example of the dot
10543120	10550720	product. If you want to see in game this time. So here's another use case for the dot product.
10550720	10556560	So I'm working on this game. This is called flowstorm. So right now, the another thing that I
10556560	10564400	used the dot product for was the pitch of the thruster of this rocket, right? So if you listen
10564400	10569200	to the rocket here, you can hear that the pitch is changing depending on what's happening.
10569760	10578640	Right? You can hear that it increases in pitch. Okay, so so far, no dot products, right? If you
10578640	10584080	move fast, we increase the pitch. If you move slowly, the pitch is lower. It's sort of the same
10584080	10594880	thing with sliding. Like you can hear the pitch change depending on if you're moving quickly or
10594880	10601920	slowly. All right. So the thing that I'm using the dot product for is that if you are accelerating
10601920	10608800	and you're turning the rocket left and right, actually, let me zoom in. Then the pitch is
10608800	10614000	going to be different. It's not just based on speed. So if you listen to this while watching the rocket.
10614400	10628960	Like even if I'm moving, sometimes when I turn the rocket, the acceleration or the pitch goes down
10628960	10638720	again, even though I'm moving fast, right? Yeah. So basically, what I have done is that
10639520	10642000	actually, let's go to the level editor instead, because there's more space.
10644240	10650960	No, level editor is currently broken. That's okay. We can have no little reps in the console.
10652720	10657360	So if you listen to the rocket now, we're moving faster and faster sideways, but then I look up.
10663440	10668480	You can hear that every time I turn, where the rocket is not perpendicular to the velocity vector,
10669440	10676160	the audio will now change pitch. Because what I'm really interested in is
10676800	10682560	how quickly is the rocket moving in the direction you're pointing? That's the crucial thing here.
10683120	10690240	So in this case, what I'm doing is that instead of a normal direction, I have the direction of my
10690240	10700800	rocket, right? So I have this vector right here. This is the direction. And then I have the velocity,
10700800	10707360	right? The actual velocity vector for how quickly you're moving in that direction, right?
10708240	10713280	So the actual velocity could go in either direction, right? It could be in this direction.
10713280	10717280	It could be along this. It could be opposite towards it, right?
10719840	10725200	Yeah. So that way, I can get the speed in the direction of the rocket, and then I can use
10725200	10729440	that to change the pitch of the rocket. So that's kind of it. That's basically,
10729440	10733600	like, just depends on how you're moving and then project that along the direction of the rocket.
10734720	10741280	And then what I get is, what is the, how much are you moving along this direction? And that's it.
10741280	10745760	That's how I got the pitch there. Sounds like it's the absolute value of the dot product? Yes.
10746320	10752320	So that's, that's kind of it. Do I use the dot product for something else? I do use it for the
10752320	10756800	impact sounds. Just like I mentioned before, this is the game where I did the impact sounds.
10756800	10762000	So when you hit the surface, there are little sounds that play. That one is based on the dot
10762000	10768320	product, just like we talked about. Yeah. Otherwise, there are many, like, placeholder sounds,
10768320	10773200	like when you crash, that's a placeholder sound. So there's a lot, a lot of stuff that I haven't
10773200	10776560	done in this game. But, but yeah, otherwise that's how it works.
10782720	10783200	Peter.
10791440	10795040	Oh, someone asked about the lighting in this? No, the, the lighting is not the
10795040	10801520	Unity's built-in one. I wrote my own custom lighting system. Here's some lighting buffers,
10801520	10806880	if you're curious about how my lighting system works. The first lighting buffer is kind of
10806880	10812560	self-explanatory. The, the other three are a little less altering. Oh, I also use a dot product for
10812560	10818720	the water physics. So underwater, I kind of want you to be able to turn the rocket and that would
10818720	10822560	also change the direction of the rocket. Again, you do stuff with the dot product
10823520	10827200	and the direction you're moving versus the direction you're pointing. And that way,
10827200	10830960	you can make the rocket sort of behave as if you have drag underwater, right?
10832400	10837120	Yeah. Otherwise, I think that's it, unless you have more questions. Now I'm going to try to
10837120	10842160	figure out what assignments to give you. Yeah, I'm just going to, I'm just going to have a
10842240	10852560	slow Q&A thing while I figure out the assignments. All right, I got two out of
10853280	10857520	maybe three, four assignments. I haven't decided on how many yet. Be gentle. I mean,
10857520	10861600	we've mostly gone through a lot of like fundamentals right now. So I'm not going to do
10861600	10868000	something like super advanced. What do these assignments do? I have no idea. I think
10868000	10872960	Krister is going to do all of the, all of the assignment stuff. He's also going to be correcting
10872960	10877200	them. So I'm just going to do the, I'm just going to make assignments and then Krister can decide
10877200	10881760	that everything else. And also Krister is going to be doing the, he's going to do the grading
10881760	10889840	and whatnot. Okay, there we go. Assignment one is now ready. I'm going to reveal all the assignments
10889840	10894480	as soon as I'm done writing them. Oh, I just, assignment two has a thing we didn't talk about
10894560	10903360	today. Isn't that spicy? I presume all of you know what transform.forward means or transform.write
10906880	10910880	because those are going to be irrelevant. But I presume you've done that already because
10910880	10914560	you've been using Unity for a while. You don't have to be a student to see them. I will show
10914560	10918080	them as soon as I'm done writing them. I'm just jotting down notes now for the assignments. I'm
10918080	10922960	going to draw more specifically. I know you can't see right now. I'm going to draw what the assignments
10922960	10927680	are going to be. A lot of these concepts are probably going to be very easy if you like rewatch
10927680	10934080	the stream and whatnot. So like, it's mostly about I want you to get some practice in actually doing
10934080	10938800	the assignments and practically writing code that does the things we've been talking about,
10938800	10943760	because that usually helps you like solidify what we've been talking about. So like, try not to
10943760	10948320	copy code from each other unless you really, really have to. So like, try to see if you can do it on
10948320	10952640	your own at first, because that's kind of a better way to make sure that you've learned the things
10952640	10957600	you need to learn. Otherwise, of course, look things up if you need to. But it's always good to
10957600	10963200	make sure that you actually know what you're typing. If you're not sure what you are doing when you
10963200	10970000	type vector to dot dot, like you should know what is happening when you do that, which you might not
10970000	10974800	if you just copy someone else's code, right? Because again, my goal is for you to learn what
10974800	10980480	these things are. I don't care if you do the assignment, or don't do the assignment or copy
10980480	10984400	code. I don't care. But I want you to learn. I want you to learn the things that are important to
10984400	10989840	you. But then again, I'm not going to do the grades Krista probably carries if you copy
10989840	10996800	or cheat or whatever. And if you do them at all. Okay, all right, I got the assignments. I'm here.
10996800	11003280	Here we go. I'm going to draw these so that it's like very clear what they're doing. And I'm going
11003360	11009600	to post both the pictures and the text for it. Assignment
11012560	11017200	number one. Yeah, I don't I think the the assigned the date for these assignments
11017200	11022480	is probably going to be much later. As in, you don't have to do them tomorrow. If you do them
11022480	11027920	tomorrow, that's going to be good because then I'm going to cover these assignments at some
11027920	11032160	points. And so it's probably good if you done them before that. If you want to like maximize
11032160	11037200	your learning. But if you're stressed, then this is I mean, don't don't stress yourself out. Okay.
11040240	11041840	Cool. First assignment.
11041840	11048800	And create
11054800	11066560	the radial trigger. So this is the thing we made on stream. We had a trigger that had some radius,
11066560	11075520	right? There we go. It's got a radius. And then we want to detect whether or not a point
11076240	11082400	is inside or outside, right, based on this trigger. And the trigger should be able to be
11082400	11086960	anywhere. You need to be able to move the trigger around, you need to be able to change the radius.
11086960	11091920	And it should still be able to detect whether or not this point is inside or outside, right?
11092160	11096160	So, so that's all you need to do really, like it's
11101200	11106560	inside versus outside. And you can do all of this is on drug in on drug gizmos,
11106560	11111120	you don't have to make like an actual update loop or whatever, just do the dude and on drug gizmos.
11111120	11115760	The point is, I want you to like, try this out yourself and make sure that you've actually like,
11116800	11121360	you can do the concepts that we've been talking about, right? So recreate the radial trigger is
11121440	11125600	the first assignment. Can it be moved and seen only? Yes, you don't have to animate anything. It
11125600	11130160	doesn't have to be in play mode, just the same way we did it on stream, just like make sure that
11130160	11134720	you know the mathematical concepts. But like, you don't have to involve like physics or rigid
11134720	11140480	bodies or gameplay or anything like that, just to make sure that like, you have the idea of
11140480	11143920	detecting whether or not something is closer to something or not, right?
11144240	11150720	Yeah. So that's one way of doing it. Or that's the first assignment. So assignment number two.
11152400	11159600	So previously, we, the radial trigger, kind of check like, you know, are you inside of a trigger
11159600	11167200	or outside of a trigger, right? And that is based on the radius. But now I want you to make another
11167200	11178400	trigger. I feel like I had a name for this. Actually, I just renamed it. There we go. That's
11178400	11191040	rebellious I am. So the next one is that I want you to make a look at trigger. Okay. So basically,
11191040	11197520	you have a similar thing here, you have a, actually, let's name this player. There we go.
11198160	11208640	Player objects. Another player. Cool. So then we want a look at trigger. So in this case,
11209840	11215680	if you have the trigger at some point, and then the player is looking in some direction,
11216080	11222640	we want to be able to detect if you are looking toward this trigger or not, right?
11224640	11230320	So that's what this one is for. So if you are looking at this trigger, you want it to be true.
11230320	11235360	If you're looking away from it, you want it to be false, right? So this one should also,
11235920	11239840	you know, this one has a radius that you can modify to set the threshold of this.
11240560	11243920	The look at trigger should also have a threshold
11248320	11254320	from zero to one. So let me move this down because I need to clarify a few things.
11256320	11265760	All right. So threshold from zero to one. And if the threshold is one, that means
11265920	11273440	it's going to be very strict. Probably impossibly so, because you're probably never in practice
11273440	11285360	because of like floating point imposition. All right. So one is super strict. And this is a
11285360	11292880	floating point value. You can set it to 0.5 and everything. All right. And then we, if it's set
11292960	11315760	to zero, that means that, so perpendicular or closer means you're at it. There we go.
11316640	11320800	So this is the threshold. So you should be able to, if this is set to one,
11321520	11326720	you have to look like exactly at the thing. And it's going to count as triggered only if you
11326720	11331760	look exactly at it. Because of floating point precision, that's going to be like pretty much
11331760	11338080	impossible, never going to happen. But if you set it to like 0.5, it should allow you to look a little
11338080	11344240	bit away and still count as looking at this thing. But then as soon as you are looking away from it,
11344320	11351600	like this, that should not count as looking at it. So basically, this threshold should set how
11351600	11357200	sensitive it is. If it's a one, it's hypersensitive, you need to look exactly at the point. If it's
11357200	11362240	zero, it's not very sensitive at all. If you look in this direction, it's going to count as looking
11362240	11371600	at the thing. Yeah, that's about it for number two. Oh, and to clarify, we haven't talked about
11371600	11377520	angles yet. So this doesn't involve angles. None of this is angle bakes. This is still just vectors.
11380640	11389360	All right. And let's do the third one. Still just vectors. Yeah, angles don't exist.
11390240	11398320	You've never heard of angles. This one is smaller. Okay, heck, I'm trying to figure out how to draw
11398320	11403760	this one without spoiling the solution, because this is kind of difficult. So this is the one
11403760	11409760	we're going sort of toward concepts we haven't talked about yet. But that's a little teaser
11409760	11416400	thing or something. So let's say this is the origin of the world, like this is 0, 0.
11418160	11426800	And then you have an object in Unity that has some, some orientation, right? So usually Unity,
11426800	11432240	you would have this gizmo that looks something like this. And then you would have the z axis
11432240	11438320	pointing sort of toward the camera. And then let's say you have a point. There we go.
11442240	11448800	Okay, and then you have this object. Let's call it object. So this one is I want you
11449120	11471120	to make a transform function to transform world to local and local to world. Cool. Okay. So the
11471120	11477680	goal is I want you to have a transform in the scene that has some rotation and a position.
11478320	11485440	And I want you to write a function that can transform this point either into local space of
11485440	11493840	this object, or from local space of this object to world space. We haven't talked about spaces yet.
11493840	11499120	So that's why this one is a little bit of a curveball. But I'm sure you sort of understand
11499120	11505040	the concept of what it means for something to be local space and world space. So that's what I
11505040	11511600	want you to do. And you're not allowed to use Unity's transform functions in order to transform
11511600	11517280	this point. You're not allowed to use matrices, you're not allowed to use transform dot transform
11517280	11523600	points, not allowed to use those, those don't exist anymore. So, so you need to do this using
11523600	11529280	vector math and dot products. That's what you need to do, right? Yeah, you can still use transform
11529840	11535840	writes transform dot up to just get vectors and whatnot. But you're not allowed to use
11535840	11542000	the transform functions. No, you don't need to use quaternions. This is possible using only the
11542000	11547040	things that we have talked about. Oh, yeah, this is 2d only, we don't need to care about 3d yet.
11547040	11553360	So yeah, 2d only. I don't know where to fit that in. I don't think I get the goal of this. You need
11553360	11559040	to be able to transform a point from world space to local space, which means that you need to
11559120	11565280	figure out where a point is. So if you look at this point, for instance, I'm good, this is really
11565280	11570240	hard to explain what that's spoiling the whole thing. If you look at this point here, if you
11570240	11576000	consider the coordinate of this one in world space, well, it's this vector, right? And then you have
11576000	11582800	an x coordinate, you have a y coordinate and so forth. But making a transform function means
11582800	11589280	that you should be able to take this point in world space and transform it to this space.
11589840	11596240	As in, I want it to be relative to this object. So now I want the x coordinate and the vector and
11596240	11603440	everything to be based on the local space of this thing right here, right? Yeah, and it should
11603440	11608960	take rotation into account. So it's not just position, you can ignore scale. Scale doesn't
11609040	11614800	matter. But it has to take rotation into account. And you can do this using only the concepts that
11614800	11619440	we've been talking about. You don't have to do anything outside of that. In fact, you're not
11619440	11624400	allowed to use matrices or the transform dot transform point functions. You need to do this
11624400	11628560	with vector math and dot products. And if I move the point to the position, it would be under the
11628560	11634720	new parents facility, move point being world space, you mostly just need to get the coordinates.
11634720	11638480	How you like make it in the scene or how you move them around doesn't really matter.
11639040	11644720	You just need to be able to get those coordinates. But how you visualize that or whatever is a
11644720	11650160	separate thing, you need to be able to get a point relative to a different space.
11651520	11657680	Yeah. So what I mean by that is that if you ignore these lines that I used to draw,
11658640	11664800	you just need the coordinates of this one. If you like pretend that, whoops, pretend that the
11665760	11669680	this right here is world space or whatever, because that's kind of what you do, right?
11672160	11677920	But yeah, basically, you want to get this point relative to this space. That's it. And also the
11677920	11684240	other way around. Oh, and just parenting objects and getting their location kind of like defeats the
11684240	11689200	purpose of it. And the reason I call this a curveball is because we haven't talked about
11689200	11694560	space transformation yet. That's the only reason otherwise the the ways to do this only talks
11694560	11700480	about everything we've been that you only need stuff we've been talking about earlier. Yeah.
11704400	11708960	You can use transform dot forward, transform dot forward, transform dot right, transform dot up,
11708960	11713120	you're allowed to use those. You're just not allowed to use the space transformation functions.
11713840	11718400	Because the whole idea is that you need to like, do the space transformation yourself.
11718400	11724080	Okay, all right. I think that's it. Those are the three assignments. Oh, yeah. If you want to join
11724080	11730000	like my discord for my streaming shenanigans, feel free to hop into discord. We're like a
11730000	11735440	bunch of game developers, a lot of us are under the LGBT umbrella. So it's sort of like a Venn
11735440	11741360	diagram overlapping those two things. So feel free to feel free to join discord. Let's see,
11741360	11747600	I'll post this in the math channel that seems appropriate for the transform from world to
11747600	11753120	local. Is it okay to use a child object for output? Oh, if you just wanted to like test
11753120	11759120	your code to see if it works, sure. But like you could do it. If you want just like using gizmos,
11759120	11765760	so you don't have to like use actual objects or whatever. Okay, my voice is dead. I need to stop
11765760	11771120	talking. And I need to stop streaming. But thank you all so much for joining. I hope this was
11771120	11777440	useful and that this has helped you learn something or get a refresher on things or I don't know,
11777440	11785760	hope it was useful.
