start	end	text
0	7920	All right. So, math and cats. Enough said, right? A little bit first sight.
7920	14160	So, just kidding. Freya is an independent game developer and educator, and today she's
14160	19560	going to talk about a topic that to some is the stuff of nightmares and to others, like
19560	25200	myself, is perhaps a little bit more the stuff of dreams and all the squiggly lines in between.
25200	30520	So in her talk, she's going to hopefully inspire you all to consider the math underlying
30520	34840	our games a little bit more magical. Thank you.
34840	44880	Okay. Hello, everyone, to probably the most technical talk. I'm going to teach you all
44880	54520	about set theory and quaternions. This talk is called, why can't you multiply vectors?
54520	59720	And so, I've been doing a lot of things within game development and math for a long time
59720	65800	now. I started out as an environment artist, and then I moved into level design, and then
65800	69360	I eventually learned programming, and I got really excited about that, and then I got
69400	77320	into math, like, very heavily the past, like, two years or so. And now I've sort of, like,
77320	82280	dived so deep into math that sometimes the stuff that I talk about, game developers
82280	86640	are like, oh, this just seems like useless abstract nonsense. Like, why are you even
86640	90280	doing this? Like, I just want to make a game. I just want to copy-paste my math from the
90280	93520	internet and just, like, paste it into my game so that it works. I don't care about
93520	98680	the underlying stuff. But today I want to talk about that underlying stuff anyway, so you're
98720	106400	going to have to suffer through that. So, there's a bit of a schism sometimes between math and
106400	114800	programming. So, I sent this tweet at some point on 9-11 of all days, so this is my personal
114800	121360	9-11, because this started a war between programmers and math people, which was really
121360	126040	weird, but, like, all the math people were like, what are those for loops? That makes
126120	130520	no sense. Like, all of these symbols that look so complicated and weird, and then you had all of
130520	135400	these programmers that were like, what are those weird symbols? Like, there's no context for
135400	141640	this. There's nothing describing what that does. You just have to know what that does, right? But
141640	145240	so all I really wanted to do was kind of, like, draw this, like, simple analogy for people who
145240	150440	might not know that much math to just be like, okay, so these summation symbols is just adding
150440	155960	things up in a for loop, and the capital pi is just a product. You're just multiplying
155960	162040	things together. So, those interesting, because it kind of illuminated to me that there's this
162040	167880	big schism, or like, big divide, that I kind of want to merge, and I see that as sort of my job
167880	174840	in a way of trying to bridge that gap. A little bit about me. I probably don't care that much.
174840	179000	Co-founder of the studio called Neat Corp, made a game called Budget Cuts and Budget Cuts 2,
179000	186520	where a studio of like, seven, very awkward size, made some plugins for Unity, one called Shader Forge,
186520	191960	and one called Shapes. I want to say shader, editor, and the other one is a vector graphics
191960	195960	plugin that I'm also working on a spline plugin right now that is not released yet.
197560	203160	I also make YouTube videos, so I made some videos about tech art, math, and tool development,
203160	208600	mostly within Unity, and then I also made some YouTube videos about Bezia curves and splines.
209480	215800	All right. So, I'm a tech artist. That's kind of the center of what I do. It's kind of the
215800	221160	intersection of art, and programming, and math kind of comes in there to do all of these kinds of
221160	226920	weird funky, techy visual solutions to problems in games. So, a lot of the stuff I do is just
226920	231800	like trying to work out things like, how do you render lines in a way that looks nice?
231800	235400	Because, you know, you have like a naive implementation, might look like garbage,
235400	239480	but if you spend some time thinking about it, you can make something that looks much, much prettier.
241480	245800	And so, a lot of the work I'm doing as of late has to do with splines. This is an excerpt from my
245800	253000	video. It's just a lot of splines. I've just had splines in my head for the past three years,
253000	258040	and I can't get them out, and so here I am. Recently, I've been getting into like quaternionic
258120	262600	splines, or just like splines in quaternion space to interpolate orientations,
263800	270200	and some torsion visualizations. I don't know. I have a bunch of things related to this that I do.
271400	278280	That's a dodecahedron. Anyway, so, in this talk, we're going to explore, why can't you multiply
278280	285080	vectors? And I think, as with any other talk, I think you should always start on the second slide
285080	290520	with some common criticisms of the title of the talk. And so, some common criticisms might be,
291080	295720	yes, you can. It's called a dot product. Like, what are you talking about? Or you might say,
295720	299960	well, yes, you can. It's called a cross product. Like, why do you mean you can't multiply vectors?
300840	307720	Or you might say, what do you mean? I multiply vectors all the time. This could be early signs
307720	314840	that you might be a shader programmer, and no, you're actually not really multiplying vectors.
314920	321880	You're going to find out why. So, the anatomy of a vector, just to go through what we're actually
321880	328200	talking about. We usually write it in bold letters, and that's a vector v, and it has three components
328200	335080	if it's a 3D vector. Realizing I'm forgetting to breathe, because I have so much to talk about.
337480	341320	So, we have three components, x component, the y component, and the z component, usually written
341320	346360	in parenthesis, right? And you can also write it as a column matrix if you want to, which can be
346360	350920	useful sometimes, because you can write longer lines for each component. It's kind of useful.
352280	357960	And this kind of presumes a basis, as in the basis vectors of our coordinate system, right?
357960	363400	We have an x-axis, we have a y-axis, and a z-axis, and they're all orthogonal to each other,
363400	368600	and they have a length of one. So, they're orthonormal, is what we call it in the industry.
369400	374600	All right. So, products. We obviously know about the dot product. Everybody's heard about that,
374600	380840	and it's some kind of multiplication, right? You have your vector a, your vector b, and then you
380840	385400	write little dot in between, and then the dot product is basically multiplying each of the
385400	389800	components, and then adding them all up into a single scalar value. So, it's sometimes called
389800	395320	a scalar product. You can also write it using these summation notations. So, it's like dimension
395320	398840	independent. So, if you want to do the dot product in any dimension, you can use that formula.
399800	405480	I hope it's readable and not too small. And then we have the cross products. The cross products
405480	411000	does not return a scalar, it returns a vector. So, the cross products, we have this kind of
411000	416280	complicated formula. We've just taken out very specific components for each of the x, y, and z
416280	421880	components of the final output vector. That's the cross products. And then we have the 2D
422600	426920	cross products, which is illegal. Don't tell your math teacher that you've been using a 2D cross
426920	432440	product, because it doesn't really exist, but it's a very useful thing in games to have. And
432440	438280	that's basically a cross product where you just set z to zero, and then whatever is left is your
438280	444600	2D cross product. It's also sometimes known as the perpendicular dot product, or the exterior
444600	449640	product, or the determinant, or the wedge product, or the anti-symmetric product. It has many names.
450200	455960	It's annoying. And then finally, we have the Hadamard product, which is the shader programmer
455960	463640	product, where you just say, well, just multiply the components. Like, just do that. Like, why not?
463640	469480	Just take every component, multiply them together, that's your new vector. So, that's a component-wise
469480	476920	product. Okay. So, we have the dot product, we have the cross product, and we have the Hadamard
477000	485240	product. But what about the product? Like, just smash them together. No goddamn symbols in between,
485240	491000	just a canonical product, right? Because usually, you don't write anything in between. If you want
491000	497320	to write 5x, you don't have to write a symbol there. In math, you just have no symbol, because
497320	503720	multiplication is kind of the canonical main operation, right? So, I think a lot of people,
503800	509400	me included a few years ago, I was just like, just do it component-wise. Why are you overthinking
509400	516040	this? Like, if you multiply a vector by a scalar, like a vector, like two times a vector A, you just
516040	521560	multiply each component by two, right? So, that's component-wise. If you divide it by two, that's
521560	528040	also component-wise. If you add two vectors, that's also component-wise. We add the x-axis together,
528040	532680	we add the y-components together, and the z-components together, also component-wise.
533560	540200	Subtraction works exactly the same way. So, why would multiply not just be the Hadamard product?
540200	544920	You just take each component and multiply them together, right? Just don't worry about it. Just
544920	549160	go ham. Just multiply all of your vectors and don't care about the rest. It's going to be fine.
551640	557320	But it's not that simple, unfortunately. So, I'm going to take you all back to elementary school.
558120	564040	We're going to talk about the natural numbers. So, the integers starting from zero and up,
564040	569480	so all of the positive integers and usually zero as well. That's when you count things.
570600	578680	So, we're going to count snail cats. So, here's a snail cat. So, let's say you have two snail cats,
579640	586360	and then you add three snail cats. How many do we get? We get five snail cats. Isn't that amazing?
587320	594200	So, two, three, and five are all natural numbers. We can count items using natural numbers, right?
595640	601480	So, let's try multiplying. So, two snail cats multiplied by three snail cats is six snail cats.
601480	608680	Great. That's perfectly fine. Just one more. So, we have two snail cats, minus three snail cats,
608680	615320	and then we get... Well, that's not actually a natural number anymore, right? Like, two minus three.
616040	621560	Now, we get something negative, and that's not within the realm of natural numbers. Like, negative
621560	627880	is not a natural number, right? And so, in a very technical sense in math, we usually say that
628520	635080	natural numbers are closed under addition and multiplication, but it's not closed under subtraction,
635080	641640	because it's possible to leave the realm of natural numbers if you subtract, right? Because two minus
642280	648920	three, not a natural number. Okay. So, we can talk about numbers of different kinds, right?
649560	654360	Natural numbers, we can add them, but it's closed under addition. We get a natural number if we
654360	659560	add two natural numbers, same with multiplication, but not subtraction, because then we need the
659560	666680	integers. The integers, they have these technical symbols, the blackboard bold. So, natural numbers
666760	673400	are n, integers are z, for some German reasons, I think. I don't know what it is. So, then we
673400	679000	need integers, and that includes the negative numbers, right? The negative integers. Okay. So,
679000	683080	integers are closed... Right. So, subtraction of natural numbers gives you integers.
684440	691160	Integers are closed under addition, multiplication, and subtraction, but not under division, right?
691160	697400	Because if you do one divided by three, that's not an integer. Again, we've left the realm of
697400	703000	integers, and we've gone into the realm of rational numbers. So, rational numbers is an integer
703000	709880	divided by another integer. So, with division, with natural numbers and integers, we get a
709880	716120	rational number. We can also do exponentiation. So, if you take like a natural number, like two
716120	721080	to the power of three, that is also a natural number. So, we stay with the natural numbers
721080	727960	there. So, it's also closed under exponentiation. But integers are... Again, if you do integers,
727960	733240	and you do powers on those, so, like three to the power of negative one would also give you a
733240	739480	rational number. All right. Rational numbers, closed under addition, multiplication, subtraction,
739480	743320	division, you get a rational number out of that. You don't change the kind of number.
744280	751240	Exponentiation gets a little bit more complicated. Because you could do to the power of 0.5,
751240	757560	which is a square root, because 0.5 is just one over two. And then we need the real numbers.
758120	763480	So, the square root of five can't be expressed as an integer divided by an integer. But the
763480	768760	real numbers are closed under all of these four operations. But then we might want to go to the
768760	775160	next step. Like, what about exponentiation? And here's where we enter complex numbers. Because
775160	780520	now it's getting a little bit weird here. Because that's just an entirely different type. Because
780520	786840	a real number is just all the usual numbers we're familiar with. But the complex numbers can express
786840	792440	things like the square root of negative five. In real numbers, we usually say that you just
792440	797480	can't do the square root of a real number. But with complex numbers, we have a way to express that.
798360	805480	And complex numbers are algebraically... Sorry. So, complex numbers. How many of you
805480	810680	know what complex numbers are? Raise your hand. Quite a few. Okay. So, I can sort of speed around
810680	819080	this one. Okay. So, let's say we have a thing called i. And if you square i, you get negative one.
820600	824840	It's just an algebraic symbol. It's a variable like any other. But the only thing we know about
824840	829320	it, we don't know its contents or its value. The only thing we know is that it squares to negative
829320	835640	one. In other words, if you multiply it by itself, we get negative one. And this is called the imaginary
835640	843080	unit. And this is just axiomatically true. Which is math speak for, because I told you so, it is true.
843080	848680	And we just have to accept that, right? Okay. So, how do we do math with this? Well, if we have three
849240	856520	i times two i, that would be six i squared. And since i squared is negative one, this is equal,
857160	862680	because we can apply this rule of i squared equals negative one, then this becomes negative six.
864600	870200	Okay. Another example, two i times four i minus three. We just distribute that. And then we get
870200	876360	eight i squared minus six i. Again, i squared is negative one. So, we get negative eight minus six i.
877240	884280	And we can sort of think of these numbers as having two parts to them. The first part here is the real
884280	890600	number. This is just a regularized number that we use all the time. And then we have a coefficient
890600	896200	of i. So, this is called the imaginary part. And you can kind of divide these up into these two
896200	901160	separate categories. And that's what's called a complex number. So, that's when you have a
902120	905800	regular number, a real number, and then some coefficient of i.
908120	915080	Okay. So, let's say we have a complex number z. Then we can interpret it similar to a vector,
915080	920200	because a vector also has two parts, right? If you have a 2D vector, you have an x component
920200	926120	and a y component. Similarly, we can write complex numbers the way we write vectors, just in
926120	932760	parentheses, right? Where we have the real part and the imaginary part. And now, the basis is just
932760	938600	the value one and i. Because those are the things we multiply each of the components by
938600	943800	in order to get the final results, right? So, you can kind of see the similarity between complex
943800	951080	numbers and vectors. Like, they both have two components, well, for 2D vectors. And so, you
951080	955640	can define a coordinate space using vectors. You have an x-axis and a y-axis. You can also just
955720	961320	do the same with imaginary units. So, you can have a real axis for the real numbers and a vertical
961320	966360	axis that's the imaginary axis. And then, for writing coordinates, we just do exactly the same
966360	971480	thing we do for vectors. So, for 2D vectors, we have maybe this coordinate would be one and two.
971480	977800	So, one on the x-axis, two on the y-axis. Can do the same for the complex numbers. So, this is
977800	983320	called a complex plane. And it's just the same. It's just one and two. It's just that we're using
983320	988840	a different basis. The cool thing about complex numbers is that we can actually just write them
988840	995080	as a formula, like the way we did before, just one plus two i. That's what this represents, right?
997480	1005400	And so, this is really useful. What's useful about this one is that we can do algebra with this.
1005400	1010840	We can, if we have this formula, we can just add them together or multiply them and just see what
1010840	1016760	happens, right? And so, if we wanted to find out, like, okay, what happens when you multiply two
1016760	1023000	vectors? Well, if complex numbers are vector-like, we can figure out what happens when you multiply
1023000	1027800	two complex numbers. And maybe that's going to give us, like, some answers along the way for how to
1027800	1034280	multiply vectors together. So, we can just try to go through that process. So, like, let's say we have
1034280	1039800	two complex numbers, a complex number a and b. We multiply those together. So, we just write them
1039800	1046440	out as equations. And as usual, we just distribute or, like, expand the whole thing, and then we
1046440	1053000	might notice that, oh, this part has two i's in it, right? So, it's i squared, which means that it's
1053000	1058600	equal to negative one. So, we multiply that whole thing by negative one. And so, now, we can see
1058600	1063800	that this part, they share a common factor of i, so we can factor that out. And now, we get a complex
1063800	1069240	number in the end. So, we have two complex numbers. We multiply them together, just regular
1069240	1073640	multiplying, no dot products or cross products or anything. We're just multiplying them together.
1073640	1078440	And in the end, we get another complex number, because we can express this as a coefficient of
1078440	1084440	just a real number and a coefficient of i. So, what we can say is, again, complex numbers are
1084440	1089560	closed under multiplication, because we give two complex numbers and we get a complex numbers out
1089560	1095800	of it. So, if you want to implement this in code, like, this is how you would write that. The actual
1095800	1102760	symbol of i is never in your code. It's just completely not there. The i is only there to, like,
1102760	1109960	help us define the algebraic operations that we do using this. And so, we had our formula here,
1109960	1115800	right? So, we're calculating some sort of real part from two complex numbers. And then, we get
1115800	1120600	the real part here. And then, we calculate the imaginary part. We get the imaginary part. And
1120600	1126760	then, we'll return a complex number. So, we only ever store the coefficients. We don't ever store,
1126760	1135720	like, the weird i symbol, right? So, the reason we can do this is because it's closed under
1135720	1141160	multiplication. That's why it returns a complex number. Okay. So, what does this look like? Because
1141160	1146760	now, if we interpret this as a vector, we should be able to visualize this, because we can interpret
1146760	1152920	complex numbers as 2D vectors. And this is what it would look like. So, here we have two vectors,
1152920	1157880	the red one and the blue one. And we multiply them as complex numbers in the complex plane.
1157880	1163640	And the green vector is the result. And you might be able to tell that it has something to do with,
1163640	1169560	like, sort of adding the angles up, right? It's kind of like taking the angle of one of the vectors,
1169560	1173640	adding it to the other angle. And when it's normalized, you can see that the vectors
1173640	1177960	have the same length. Like, the green one doesn't get longer or shorter than the red one or the blue
1177960	1184360	one. And so, this one, while it's not a vector multiplication, it's still complex number
1184360	1188360	multiplication, we might be able to apply some of the same strategies for figuring out, like,
1188360	1194600	what happens when you multiply vectors? Okay. So, now, we figured out that complex numbers
1194680	1200520	are closed under multiplication. And, in fact, they are closed under all of these operations.
1201080	1206280	And it's the only, I think it's called a complete algebra. I think it's actually the only complete
1206280	1210680	algebra within math, which I think is kind of cool, that it's closed under all of these operations.
1212280	1215880	All right. But what we really want to figure out is vectors, right? That was the whole point
1215880	1220520	of this talk. Like, why can't we multiply vectors? Like, this should be possible. I really want to
1220520	1227080	try to do it, you know? So, if we go back to this, we could write our complex numbers as a real part
1227080	1236040	plus an imaginary part times i. So, why can't we do that with vectors? We have an x component,
1236040	1243400	we multiply it by a symbol representing our x axis, and then we add the y component multiplied by
1243480	1251000	a symbol representing the y axis. So, now, if we use this, again, we can do algebra with this,
1251000	1255560	right? Like, now we can actually just do it ourselves. Instead of just listening to
1255560	1259240	our math teacher or me, you can just, like, actually do it yourself, right?
1260600	1265480	So, now we have another way of writing vectors. In other words, like this, if we have a 3D vector,
1265480	1270680	we just take each of the components and multiply them by the symbol representing
1270680	1277960	each of the three basis vectors of our coordinate system. Okay. So, if we have two vectors, A and B,
1277960	1283000	these are 3D vectors, we can write them like this. So, these, again, we have the components,
1283000	1288920	we have the axes, and then we can do some algebra with this. So, let's do something simple, like,
1288920	1294280	multiplying a scalar by a vector, just a number times a vector. Well, we have a number s, we
1294280	1299960	multiply that by our vector, and that just distributes to all the terms in there, and we
1299960	1305560	can see that that's a component-wise multiplication, which is what we would expect, right? Because we've
1305560	1311160	been told that that's component-wise. And it seems to be, right? All right. Let's try one more. So,
1311160	1315240	addition. So, we want to add these two vectors together, and we can remove the parentheses,
1315240	1320280	because they're useless. And then we can find some common factors here. There's a common factor of
1320280	1327320	the x-axis. Again, the red x is just referring to the abstract concept of the x-axis. And so,
1327320	1333160	we just factor out those axes, and we end up with this. And now, again, we have a clean, like,
1333160	1340280	factor of x, y, and z separately. And so, we can say that addition is component-wise, which is what
1340280	1346040	we were told before, too. So, I guess they were right. So, that's component-wise. Fine. And if we
1346040	1350760	do this with all of these operations, we can find that both addition and subtraction is component-wise.
1350760	1356120	But we haven't multiplied two separate vectors yet, right? We've only done a scalar times the
1356120	1359960	vector, but not a vector times a vector. And so, what's that going to be? Like, are we going to
1359960	1364200	stay within the realm of 3D vectors? Like, kind of like the cross product. The cross product,
1364200	1369320	you know, has a stay in there, right? Or maybe we're kind of like the dot product, where we just
1369320	1376520	get a real number out of it, instead of a vector, right? Okay. So, let's find out. We have the tools,
1376520	1381880	right? We can just have our two vectors, a and b, multiplying them together. No goddamn symbols
1381880	1387960	in between. Just a pure multiplication. We write it out. This is the equation we just have to solve
1387960	1393080	for, right? Like a straight-up multiplication. There's a lot of terms here, because you need to
1393080	1398760	multiply these together. And you get this, which is ax, bx, xx, which is a little bit abstract.
1398760	1404360	We don't quite know what that is yet. And then we just keep on doing this. And we end up with
1404360	1411560	a lot of terms. And so, there we go. There we have it. So, this is what happens when you multiply
1412360	1419800	two vectors, I guess. But now we have a little bit of a problem. Like, it's like, this is not a
1419800	1425720	vector anymore. Like, we can't write this as a factor of x plus a factor of y plus a factor of z.
1425720	1432120	Like, this is just a pile of nonsense, right? And so, we can see that vectors are just not
1432120	1439240	closed under multiplication. We don't get a vector out of this, it seems. And so, that's why you can't
1439240	1449800	multiply vectors. And so, thanks for coming to my talk. I hope this was useful. And so, obviously,
1450840	1456120	that doesn't feel enough, right? Like, okay, we found out that it had this weird solution,
1456120	1461880	but like, but what is it? Like, I need to find out. Like, we have to solve this. We haven't
1461880	1466760	solved it yet. Like, it obviously gave us some sort of algebraic structure, and we need to investigate
1466760	1471240	this and actually, like, decode this whole thing, because there has to be answers in there, right?
1471240	1475240	Like, I'm willing to go to the ends of the earth to just, like, approach this whole problem and
1475240	1481720	just figure out everything. And maybe we need to take a little bit of a leap of faith as a treat.
1483320	1489000	And so, we're going to ask an oracle, a divine being of incomprehensible wisdom.
1489720	1497320	Oh, great oracle, Salad. His name is Salad. We made a feeble attempt at multiplying vectors,
1497320	1503800	and we seem to have reached an impasse. Can you illuminate us? The divine being contemplates for
1503800	1511240	a second and says, I see. A tricky conundrum indeed, but fear not. The answers you seek are
1511240	1518840	closer than you think. Don't worry. You are safe now, my child. I bestow upon you a key to
1518840	1525480	understanding. Venture forth, and the answers you seek will be revealed to you. Now, I must nap.
1526040	1530360	Leave me be. And the divine being turns into a non-Euclidean manifold.
1533960	1539240	Okay. So, this is some sort of divine axiomatic truth we were given.
1539960	1545400	And so, what does this say? So, it's a vector. It's in bold. So, if you multiply a vector by
1545400	1551640	itself, in other words, square it, you get the length squared. Like, the length of that vector
1551640	1556120	multiplied by itself. But this is not the full answer, right? This is just what happens when
1556120	1560280	you multiply a vector by itself, but we want to know what happens when you multiply two arbitrary
1560280	1566200	vectors. Okay. But let's experiment with this. So, let's say we have a vector with the values
1566200	1570040	one, two, and three, and we want to square this. In other words, multiply it by itself.
1570680	1577080	According to our divine axiom, it is the length squared. And the length, we can just use the
1577080	1582840	Pythagorean theorem, right? We've learned that in school. And then we square that. The square root
1582840	1587720	and the square cancel out. And so, we're left with one squared plus two squared plus three squared.
1587720	1595080	And we get 14. Okay. So, if we square a vector, we get just a real number. And in this case,
1595160	1603320	it's 14. Okay. So, let's explore this some more. So, what about our basis vectors? Because we have
1603320	1610920	an x-axis, a y-axis, and a z-axis. They all have a length of one, right? So, what happens when
1610920	1615800	you multiply those two together? Well, following our axiom, that should be equal to the length
1615800	1623320	squared, which is just one squared, right? And so, that's just one. So, if you take our x-axis
1623320	1631000	and multiply it by the x-axis, we get one out of that. And all of a sudden, we've gotten one key
1631000	1636600	to the solution here. Because all of these terms that are crossed out, they just evaluate to one.
1636600	1642600	So, those three terms are just multiplied by one, right? Okay. So, now we've started to unravel
1642600	1648760	this a little bit. So, now we can separate out those terms. We have, like, that's just a real
1648760	1654200	number, because those are no longer multiplied by a vector, right? All right. But we still have a
1654200	1660360	bit of a mess on the lower part. Like, what the heck is yz and xz and yx? That's still nonsense
1660360	1667160	to us, right? There's actually one more thing that our divine axiomatic rule gives us. So,
1667160	1670600	if you consider the basis vectors, again, mutually orthogonal, they have a length of one,
1671880	1677640	if you consider the diagonal between x and y, just x plus y gives you this white vector,
1677640	1682840	right? And we know that the length of that one is a square root of two, because we can use the
1682840	1688360	Pythagorean theorem for that, right? And so, then we can actually make use of our axiom to
1688360	1692760	find out some more about this, because we can plug in the length that is the square root of two.
1694120	1698840	So, if we take our vector, the white vector is just x plus y, and we square that, we should get
1698840	1704200	something that is the square root of two squared. So, the left-hand side, we can expand. The right
1704200	1709720	hand side, we can just cancel out the square root. And so, we get the expanded form of xx plus xy
1709720	1716200	plus yx plus yy, and that's equal to two. All right, but we know that x times x is one, and y
1716200	1722840	times y is one, right? We already figured that out. So, now we have this. We can subtract two
1722840	1729480	from both sides. So, we end up with xy plus yx equals zero. And if we subtract yx from both sides,
1729480	1737240	we get this. And this might seem kind of innocent. Like, okay, sure. Like, we have xy equals negative
1737240	1744120	yx. So, the components are swapped and negated. But it means that they're equal. So, we can swap
1744120	1750520	components at will, because if they're basis vectors, then we can do this. Okay, so, going back
1750520	1756040	to our equation here, we can see that in the top one, we have yz on the first term, but then we have
1756040	1761640	zy on the other one. So, what we can do is that we can swap these two terms and then negate that term.
1762600	1768840	Because we now have this rule of xy equals negative yx. So, we swap them, and now we have
1768840	1774120	subtraction symbols there instead of addition. And then we can factor those out.
1776440	1782920	Do any of you recognize these? Do these formulas seem familiar? Like, something seems to have kind
1783000	1790280	of jumped out at us, right? Like, this is the dot product. And we never set out to define the dot
1790280	1795480	product. We just followed the divine command we were given of, like, the square of a vector is the
1795480	1801160	magnitude squared. And somehow we got the dot product out of it as a complete, like, side effect.
1801160	1807240	And this is the cross product. The cross product somehow also jumped out of us. So, we just somehow
1807240	1811480	invented both the dot product and the cross product without ever intending to do so. We just
1811480	1817480	wanted to know what happens when you multiply two vectors, right? And so, everything stems from this
1817480	1824200	one rule. But we still have a mystery of, like, what the heck are these, anyway? Like, yz, zx, xy
1824200	1830200	are just kind of confusing constructs. We know nothing about them, right? So, let's explore
1830200	1834680	those a little further and see what happens with those. So, for example, maybe we can try seeing
1834680	1842920	what happens if we square them. We take xy squared. That equals xy, xy. And we know that we can swap
1842920	1847080	two of these and negate, and that's going to be the same thing. So, if we swap the middle two
1847080	1855240	components, we get negative xxyy. We know what xx is. We know what yy is, right? So, we get negative
1855240	1863160	one times one. So, we know that that's equal to negative one. So, we have a thing that we can
1863160	1871960	square that gives us a negative one. That's the imaginary unit. We didn't set out to invent the
1871960	1878360	imaginary unit either. This is all just still stemming from that one axiomatic rule. And this
1878360	1885160	actually applies to the other combinations as well of zx and yz. And so, if you mash them together
1885240	1893960	like this, all of that equals negative one. And you might have seen this in a different form before.
1895240	1902200	So, i squared equals j squared equals k squared equals ijk equals negative one is the definition
1902200	1910360	of quaternions. That's the way quaternions are defined right now. And so, what seems to have
1910360	1917320	happened is that when we multiply two vectors together, two 3D vectors together, we get a
1917320	1924840	quaternion which is written with an h for Hamilton. And so, that's kind of weird, isn't it?
1926520	1935160	And so, this thing that we have here has a basis of one, yz, zx and xy. And that has the exact
1935240	1940920	algebraic behavior of quaternions. And each component, obviously, it's a factor of each of
1940920	1948200	these. So, it's a multiple of each of those bases. And so, that's our quaternions. And so,
1948200	1953400	what about 2D? Like, we haven't looked at 2D vectors now. So, we should try 2D as well. That's
1953400	1961000	just setting z to zero. And if we multiply two 2D vectors together, we get this. And this has a basis
1961240	1968840	of one and xy, which that's the complex numbers. That still just has the same algebraic behavior
1968840	1976280	as complex numbers. But so, this is fascinating and kind of weird that we just went through
1976280	1980840	this algebraic journey and somehow, like, multiplying vectors gives us quaternions and complex
1980840	1989240	numbers. But again, like, what are these things? Like, what is yz and zx and xy? And like,
1989240	1996520	we still don't know. Like, we kind of want to find that out, too. So, if we consider the basis
1996520	2004440	vectors of a coordinate system, our xy axes, or in 3D, our xyz axes, they all have a length of one.
2005000	2010600	And they're all mutually orthogonal. So, that's our basis vectors. The things we're trying to
2010600	2016360	figure out now are these, like, yz and zx and all of that, right? And these look suspiciously
2016360	2021480	similar to the cross product, don't they? And the cross product has this behavior of, if you have
2021480	2026840	two vectors, a and b, and you do the cross product, you get something that's perpendicular to both of
2026840	2032760	them. In other words, it's normal to the plane formed by those two vectors. And it also just so
2032760	2039080	happens that the magnitude, the length of this green vector, is the area formed by the parallelogram
2039080	2045960	between those two vectors, both in 2D and in 3D. So, maybe this has something to do with planes.
2046440	2057240	Rather than, like, points in space, right? All right. So, if we have our xy component,
2057240	2061320	that's the only one we have in 2D. That was the one that was equal to the imaginary unit.
2061960	2071160	And in 3D, we have yz, zx and xy. So, what if we conceptualize these bases as planes? So, maybe our
2072120	2079080	xy refers to the plane formed by x and y, and specifically the unit plane, like a plane with
2079080	2085640	an area of 1. And if we extend this to 3D, there's obviously three planes now that are the basis
2085640	2093320	planes of our coordinate system. And so, maybe we can call these bases bi-vectors. So, that's what
2093320	2098280	we're going to name these. They're not quite vectors, but they're sort of like two vectors
2098360	2105240	forming a plane. So, let's call them bi-vectors. They have an area of 1, and they are mutually
2105240	2110760	orthogonal. So, the way to think about this is that if you have a regular vector, like a point
2110760	2117880	in space, then it's kind of like casting a shadow onto each of the axes, right? The three components
2117880	2126760	of a vector is just how far along each axis is this point. And so, for bi-vectors, it's the same
2127400	2133080	thing, but instead of points along axes, maybe we can interpret this as an oriented area,
2133640	2139960	casting shadows on each of those three bases bi-vectors, the three bases planes. And so,
2139960	2144840	a bi-vector has those three numbers. It looks very similar to a vector if you just look at those
2144840	2151800	numbers, right? But we interpret it as a bi-vector. So, it's an oriented plane with an area, and
2151800	2156360	that's it. It has no position or anything like that. And if we manipulate it, you can see that
2156440	2163080	the numbers change as well. So, this is just me turning it around in unity. And so, again, we get
2163080	2169160	kind of the shadow on each of those three planes. And it can be negative. So, we get a signed area
2169160	2175880	on each of those three planes. And obviously, it has an area, so we can scale it up as well. It can
2175880	2183160	be larger, and it can be smaller, and so forth. And so, this is what a bi-vector would look like
2183160	2187720	if you just write it in code. You have, like, just three components. It looks awfully similar to a
2187720	2196440	vector, but algebraically, it's entirely different because the basis is YZ, ZX, and XY. It's not XYZ.
2197480	2204040	And in fact, these bi-vectors, they represent the minimum information required in any given
2204040	2213000	dimension to store both a plane and a magnitude. And this is why it shows up quite a lot when
2213000	2218920	dealing with rotations, because rotations happen in a plane, right? Like, they don't really happen
2218920	2225000	around an axis. Like, if you have rotations in 2D, there's no third axis to speak of, but there is a
2225000	2233560	plane you can rotate in, right? And so, if we look back at the cross product, the cross product,
2233560	2240280	again, gave us a vector. So, it has an XYZ component, which is a regular vector. But the thing about
2240280	2244440	the cross product is that in math and physics, we talk about something called a pseudo vector,
2245400	2250360	which is it has, like, these weird transformation rules. Like, if you mirror the result of a cross
2250360	2259240	product, it doesn't have the expected behavior. And it only works in 3D and 70. Don't ask me why.
2259240	2264920	It's just the way it is. And it has all of these hidden transformation rules. The thing we were
2264920	2271560	doing now, where we returned a bi-vector instead, is called a wedge product. And usually, you write it
2271560	2279000	with this little hat thing. And so, algebraically, it's exactly the same in terms of the coefficients,
2279000	2284360	but the bases we use are completely different, because we have YZ, ZX, and XY instead. So,
2284360	2289560	this returns a bi-vector. It generalizes to any dimension. It doesn't have to be only 3D and 70
2289640	2295800	or whatever. And it's a little harder to understand, though, because we were never really taught about
2295800	2305640	bi-vectors in school, right? Or at least I wasn't. And so, here we have the 3D and the 2D vector
2305640	2310680	multiplication. We can write it a little bit more generalized by saying that multiplying two vectors
2310680	2316440	together is the dot product plus the wedge product of those two vectors together. Because the wedge
2316520	2323880	product gives us the bi-vector part of that multiplication. Let's see. Does this work? Oh,
2323880	2327960	shit, it works. Hell yeah. I thought internet wouldn't work. And another place where this
2327960	2334840	actually shows up that I ran into is when talking about a thing called curvature. So, here you can
2334840	2340840	see something called the oscillating circle. So, this is kind of the circle that matches the curvature
2340920	2348600	of this spline that it's moving along. And the radius of that is 1 divided by the curvature.
2349480	2354840	So, if instead of thinking about the radius, you think about the inverse of the radius,
2354840	2360840	and that's curvature. So, a curvature of 0 is a straight line, a curvature of 1 turns in one
2360840	2365560	direction, a curvature of negative 1 turns in the other direction. Anyway, it's a useful concept.
2366280	2372040	And so, if we want to measure curvature of a parametric function, say, this is how you would
2372040	2376440	do curvature in 2D. This is straight up from Wikipedia. If you want to see how to measure
2376440	2383000	curvature. This is a scalar, and it's signed. In other words, it can be both negative and positive.
2384200	2390440	And then we have curvature in 3D. And here, we have the magnitude of the cross-products
2390440	2398840	between the velocity and the acceleration divided by the speed cubed. And so, these look very
2398840	2404760	different if you're not familiar with everything that we just talked about. But this one is always
2404760	2408760	positive because we're getting the magnitude of a vector. So, all of a sudden, it's no longer
2408760	2414920	signed. There's no negative curvature or positive curvature. And what about the axis? If curvature
2414920	2421960	turns kind of around an axis in 3D, right? And so, these two, that's looking a little sus.
2421960	2428920	Like, now we can kind of recognize these patterns, right? And so, this is just a wedge product. So,
2428920	2433560	we've kind of been mistaken in thinking about the curvature and thinking of them as either a scalar
2433560	2437960	or the cross-product or the magnitude of the cross-product. But if we just do the wedge product
2437960	2444120	instead, that is much more simple. And it generalizes to any dimension again. And so, instead of
2444120	2450760	returning to the scalar or a vector, we get a bi-vector out of that. Yes, I'm going to go a
2450760	2456760	little bit over time. Are you all okay with that? Okay. I'm almost done. So, this is kind of a
2456760	2462280	generalized curvature. Anyway, so, what I think is cool about this is that throughout math, we've
2462280	2469400	had this thing of, like, mental gymnastics of, like, you can't really multiply vectors, but here's
2469400	2473400	eight different products. Just use those instead. And also, the cross-product doesn't work at all
2473480	2478520	in all dimension, but it works in 3D and, like, 5D or 7D, maybe, like, one of those,
2478520	2482600	one of those. And also, cross-product returns a pseudo-vector with, like, special transformation
2482600	2487960	rules. So, it's not really a vector. And complex numbers, they're, like, 2D vectors, but also,
2487960	2492040	not at all, but they can, like, rotate. And quaternions are, like, an extension of complex
2492040	2497000	numbers with rules i squared equals j squared equals k squared equals ijk equals negative one.
2497000	2506040	It's just, like, Jesus Christ, right? Or we can just say that if you square a vector, you get the
2506040	2511480	length squared. That seems a little bit more simple. And then everything else, all of those things we
2511480	2517160	talked about, just naturally emerge from that definition. What we've been talking about is
2517160	2522040	called geometric algebra. More specifically, it's a Clifford algebra. And if you take all of these
2522040	2527240	components and, like, combine them into a big multi-vector, and 2D, they will look like this.
2527240	2533080	We have a scalar. We have a real number. We have a vector and a bi-vector. Vector has two components.
2533080	2540360	Bi-vector only has one component. That's a full 2D VGA multi-vector. So, VGA is either vanilla
2540360	2545960	geometric algebra or vector geometric algebra. People haven't agreed on this. Then the 3D
2545960	2551560	multi-vector looks like this. So, the vector has three components now, and the bi-vector also has
2551560	2557880	three components. This is why we probably mixed up vectors, pseudo-vectors together, because they
2557880	2563640	both have three components in 3D. But it's actually much better to express the results of the cross
2563640	2569080	product as a bi-vector instead. There's also a thing called a tri-vector, which is the unit
2569080	2575880	volume formed by the three basis vectors. We're not going to get into that. So, basically, all of
2575880	2580760	these concepts that we've kind of juggled around with all these special rules, they can actually
2580760	2587880	generalize in a really clean way using this framework. So, instead of separating complex
2587880	2594120	numbers and quaternions as separate things, we can just call them rotors, and that's a real number
2594120	2602280	plus a bi-vector of that given dimension. And so, finally, after this whole journey,
2603000	2609320	you might be wondering, well, if multiplying two 3D vectors gives us a quaternion
2610040	2616600	and in games, we use quaternions for rotations. What rotation does that represent? Like, what
2616600	2622440	happens when we do that? And this is what it represents. So, we're multiplying these two
2622440	2627560	vectors together, and the orientation that we get, we're orienting this cube based on it,
2627560	2633480	is twice the angle between those two vectors in the plane formed by those two vectors.
2634360	2638600	And so, that applies to 3D as well. So, if we, like, separate these two vectors out, you can
2638600	2643960	see that the cube rotates after that. And it's, like, twice the angle between those two. If you
2643960	2649000	want to read up more on that, look up quaternions and double cover that talks about why it's twice
2649000	2657080	the angle. And so, why couldn't you multiply vectors? Well, probably because your teacher
2657080	2666200	didn't explain geometric algebra to you, right? But, now you can. And that's my talk. Thank you
2666200	2679240	very much for coming. All right. Thank you so much. So, if anything, your talk was both a question
2679240	2684360	and an answer to the multiplication of kath, maths, and rainbows. So, there's that. You have
2684360	2690520	produced at least an answer to that very tricky multiplication. And with that, I would love to
2690520	2697000	open it up for a couple of questions. Has any? Yeah, there's a really weird cube that they pass
2697000	2702360	around. It's very strange. I probably should have mentioned that there was going to be questions
2702360	2708920	at the end. I forgot. What are you exploring next while people think of questions? Sorry,
2708920	2714440	what? What area are you exploring next that you want to break your brain over? I'm still stuck
2714440	2722600	in quaternions. So, I've been making a spline library where, like, a spline library for unity
2722600	2727880	that has, like, quaternionic splines. And I want to, like, implement a bunch of different types of
2727880	2732440	splines in quaternion space, which is really fascinating and weird. So, that's been kind of a
2732440	2741560	recent obsession. Yes? Is it working? Yeah. All right. There we go. First of all, I want to say I
2741560	2745400	love the talk that you've been giving and also your YouTube channel that you have. Oh, can you
2745400	2749800	talk a little closer? Yeah. That I really like your YouTube channel and the talk that you've just
2749800	2755880	been giving. Oh, thank you. What type of, what different type of problems could,
2757160	2764680	do you have that could help with where you would have a benefit for using the wedge
2765000	2772280	factor or these operations in? So, most of it is useless. Like, this whole talk,
2772280	2779800	waste of time. But, it's like, again, this is kind of more, like, reframing things you already knew.
2779800	2783160	Like, if you looked up how quaternions worked or how complex numbers worked,
2783160	2786920	they would just be separate systems, kind of, but now they're kind of unified in a way that
2786920	2792040	makes more sense. Like, for example, one thing that, like, I think a lot of people, if you want to
2792040	2797080	implement quaternions, most people, even engine developers, probably just, like, copy some code,
2797080	2801560	paste it into their engine and then call it a day, and now you have quaternion for rotations, right?
2802360	2807080	But, one thing that I learned after, like, reading up on how they actually work is, like,
2807080	2811320	you can learn all sorts of, like, tricks with them. So, for example, I had a use case of,
2812200	2816040	I wanted to, like, interpolate and, I don't know which cordon system we should use,
2816040	2820600	I wanted to interpolate an orientation along a spline, and then I wanted to add a feature of
2820680	2825880	reversing that spline. So, this should turn 180 degrees in order to reverse that whole spline.
2826760	2832760	And when I did the math for that, like, did you know that, like, reversing a quaternion
2832760	2839480	is a swizzle? You just shuffle the components. Like, you can just, and in any of these three axes,
2839480	2845080	or the world space axes, it's literally just shuffling the components. It's a free operation
2845080	2850040	in terms of, like, computational power. You don't have to do a full, like, 180-degree angle axis
2850040	2854840	multiplication, right? And stuff like that is, like, all of these little, like, mathematical
2854840	2860200	tricks that kind of pop out. But if you don't really care that much about that, you don't have
2860200	2865320	to learn all of this. It's just a useful framework to me, at least. And also, if you want to make
2865320	2871560	a game in any other dimension than 2D or 3D, this is also very useful. Then you really need this.
2874040	2875960	All right. Any other questions?
2876280	2885480	People are really hungry. I'm sorry I kept you all this long. Oh, over there.
2888680	2895000	You get a cube. Thank you. And does your math library support geometric algebra?
2896680	2902680	So, yeah, I do have a math library on GitHub. I have some geometric algebra components. It's not,
2902760	2908040	like, fully fleshed out. So, I've only been, like, adding things there as I need them. I haven't,
2908040	2912840	like, made it into a library that has literally everything. But I do have a library on my GitHub
2912840	2920600	with, like, there's a bi-vector 3 type there. And there's a, like, rotor 3 type, which is just a
2920600	2925560	quaternion, right? But I do have that in my math library. So, if you do want to look into the code
2925560	2930680	of, like, how this might look, my website is up there. These days, there are too many social
2930680	2935160	media. So, just everything's there. Just go there. And then you can find all of the links to that.
2935800	2939960	Thanks. Oh, actually, I don't think I have a link to my GitHub there. That's the only link I don't
2939960	2947720	have on my website. You can probably find it if you Google, I think. All right. Any other questions?
2948360	2953080	And also, you can, if you have other questions, like, later, you can just come up to me and talk
2953080	2957880	to me. That makes me feel important and happy that I could provide value to all of you. So,
2957880	2964200	please validate my feelings by talking to me later. Hi. I was just wondering, do you still plan to
2965480	2970680	do, like, your tools on other engines, too? Like, on Unreal Engine, for example, your Spline
2970680	2975480	upcoming tool? I've considered it, like, obviously, with all of the Unity disaster.
2976680	2981000	I've considered it. Although I looked into Godot and I looked into Unreal, but they're just,
2981000	2986120	they're very different tools. Like, Unreal is, like, it's a level designer and level artist tool
2986120	2992120	that turned into a game engine. And Godot is, like, it's just engineers making an engine for
2992120	2998280	engineers, and it's very engineer. And I feel it's not very artist-focused. And then any time I try to
2998280	3002520	do something that I do in Unity of, like, making, like, quick editor scripts and just, like, have
3002520	3007880	that really fast iteration, that is just destroyed in Unreal. And Godot, I think it's a bit more
3007880	3011560	balanced because they have, like, a more, like, easy-to-use scripting language and whatnot.
3012520	3020680	But I don't know. Like, if I, like, I make, like, 70% of my income is from selling plugins in Unity.
3021720	3025720	And so, like, could I really support that in Godot, which is, like, very, like, open-source,
3025720	3030280	free software-driven? And I'm, like, I don't know. I think that community is not, like, quite,
3030280	3035160	like, big enough yet to, like, support something like the tools that I do. And so, like, if anything,
3035160	3040840	I might, like, transition to doing, like, standalone tools, just separate EXEs that you open,
3040920	3046120	rather than, like, tying it to any specific engine. Or I'm just going to go back to making games
3046120	3056200	again. Because, yeah, I kind of want to do that. But, yeah. Yep. All right. I think we got a sign
3056200	3061080	that we should cut. Yes. A stoic nod of, like, all right. Thank you all so much for coming.
3061080	3063320	Or did you want to close out? Or... No, we're good. Oh, okay.
3067720	3069880	All right. Thank you all. Time for lunch.
