WEBVTT

00:00.000 --> 00:05.840
My name is Freya. I have been in the industry professionally for about like nine years at

00:05.840 --> 00:14.400
this point, maybe 10 years. I also used to be part of Future Games. I was in the class of 2010.

00:14.400 --> 00:18.720
I've been teaching a Future Games since like after two years after that, I started teaching a Future

00:18.720 --> 00:25.200
Games as well. I did mostly like C sharp courses and math courses, as well as some guest lectures.

00:25.200 --> 00:30.080
Otherwise, like professionally, I made a plugin a long time ago for Unity called Shader Forge.

00:30.960 --> 00:37.760
So it was basically a node-based shader editor for Unity, which didn't exist at the time.

00:37.760 --> 00:41.520
There was one that was like outdated, but it wasn't maintained. And the person who

00:41.520 --> 00:44.960
worked on it was hired by Unity. And then they kind of started working on, you know,

00:44.960 --> 00:50.560
Shader Graph internally, which took a very long time, luckily for me, because then I could make

00:50.560 --> 00:56.960
Shader Forge. So I sold Shader Forge on the Asset Store, which made like enough money to be

00:56.960 --> 01:02.800
two full-time salaries pretty much. So me and another student at Future Games, we started a studio.

01:02.800 --> 01:08.400
So we started an indie game studio called Neat Corporation. So at Neat Corporation, we kind of

01:08.400 --> 01:14.000
started out wanting to make our own like very specific indie game. But then at GDC, we were

01:14.000 --> 01:20.160
sort of, we sort of like bumped into Valve right as they were releasing their HTC Vive headset.

01:20.160 --> 01:27.920
So we got kind of inspired by VR as soon as that kind of happened. So as that exploded, the whole

01:27.920 --> 01:33.600
VR scene, we got to be there like at the very, very beginning when everything started like growing,

01:33.600 --> 01:40.960
which was really cool. And also made us realize how like going to GDC and just talking to industry

01:40.960 --> 01:46.640
people can lead you down so many paths. And like just that connection with people is so important

01:46.640 --> 01:51.120
if you want to like make connections in the industry, start new opportunities and whatnot.

01:51.120 --> 01:55.280
And all it takes is kind of like, you have to try to be available for all of these things.

01:55.280 --> 02:01.760
Anyway, that was the story of Necorp, how we sort of started Necorp and started working on the game

02:01.760 --> 02:06.560
called Budget Cuts. So that was our first kind of flagship release title. One thing that I just

02:06.560 --> 02:12.720
need to mention before we get started in terms of like my approach to teaching, like my goal is

02:12.800 --> 02:20.320
that I'm here to help you learn, right? That's kind of it. So you usually get a lot of questions

02:20.320 --> 02:25.920
along the lines of like, you know, do I have to do this assignment? And so forth. The short answer

02:25.920 --> 02:32.080
is yes, because you're going to have Chris there do all the grading and all that stuff.

02:33.200 --> 02:39.760
But the long answer is that I personally, I don't care what assignments you do or don't do or

02:39.760 --> 02:44.400
anything like that. My goal is that you should learn the things that you want to learn, right?

02:44.400 --> 02:50.080
And I'm here to help you do that. But I do want to stress that it is important though,

02:50.080 --> 02:55.840
like what kind of standard you're setting, not only for yourself in terms of like what goals

02:55.840 --> 03:02.080
you have and what you want to learn and how you learn, but also how that reflects on you in the

03:02.080 --> 03:08.400
eyes of your fellow students, right? Or even in the eyes of me, right? If people around you notice

03:08.400 --> 03:15.440
that you are someone who is like doesn't do any assignments or like show up late for every lecture,

03:15.440 --> 03:19.600
then I think a lot of people like are going to think of you as that person that's always late

03:19.600 --> 03:24.960
and doesn't like deliver or whatever. And you're all going to be in the industry soon, right?

03:25.680 --> 03:29.920
Like if you think about my classmates, pretty much all of them are in the industry now. So,

03:30.560 --> 03:36.800
you know, I will remember people who were kind of like not great. So like, it's important to kind

03:36.880 --> 03:43.920
of like be a good person and be like kind of project the image of you that you want others to see

03:43.920 --> 03:50.240
once you're in the industry, right? So I think it's important for like from that, from that point of

03:50.240 --> 03:55.600
view to actually do do assignments and whatnot to at least be the person who did the assignments,

03:55.600 --> 04:00.640
right? But then again, personally, I don't care that much. I just want you to be able to learn

04:00.640 --> 04:04.800
the things you want to learn, right? If you hate math, you don't think it's going to be useful,

04:04.800 --> 04:10.400
then sure, feel free to not do anything, right? But I think it would be detrimental for you,

04:11.280 --> 04:16.000
especially if you want to do a lot of coding. What will the assignments look like? The assignments

04:16.000 --> 04:23.120
will be mostly to do some mathematical thing in Unity. It's not going to be very Unity-centric.

04:23.120 --> 04:28.240
Unity is mostly going to be there as our like platform and rendering engine. So it could be

04:28.240 --> 04:33.680
things like I would do the math for the spread of bullets in a shotgun or whatever, like that kind

04:33.680 --> 04:39.120
of stuff. So they're going to be pretty short. I intend to do like more than like one assignment

04:39.120 --> 04:45.360
per day. So you can have like three tier assignments, like one easy, one medium, one harder task. And

04:45.360 --> 04:51.520
then you can sort of do however many you want, I think, depending on how Krister wants to grade

04:51.520 --> 04:56.000
this. I'm just going to send the like answers to Krister and he's going to work on the grading

04:56.000 --> 05:01.040
and stuff. I usually like having a tiered like assignment thing, because it tends to be more

05:01.040 --> 05:07.280
flexible. And you can sort of do things step by step, which I like. All right. Another very important

05:07.280 --> 05:14.080
thing, please ask questions. There are no stupid questions. I think it's like one of the most

05:14.080 --> 05:19.680
detrimental things for you to do is to like you have a question in your head or something I said

05:19.680 --> 05:26.960
was unclear. Please ask that question that you have in your mind. It's so important. Because like

05:27.040 --> 05:33.440
usually when people like almost every time someone says, this might be a stupid question, but

05:33.440 --> 05:39.280
they ask a really good question. So please keep that in mind. Ask questions. Don't be afraid to ask

05:39.280 --> 05:44.720
questions. Asking questions doesn't mean that you're stupid. It means that you're actually smart,

05:44.720 --> 05:49.280
because you actually want to learn the thing and want to understand the thing that you are

05:49.840 --> 05:54.000
observing and trying to pick up, right? But of course, try to stay on topic like don't go like

05:54.000 --> 05:58.560
too far off. We're gonna have a lot of breaks. So we're probably we can do like, you know,

05:58.560 --> 06:03.360
random Q&A stuff during breaks if you want. Okay. Oh, obviously, sometimes like some people can get

06:03.360 --> 06:08.240
very stuck on one thing. In that case, if like one person gets very stuck on something, then we can

06:08.240 --> 06:13.040
probably like talk about that after the lecture to like clarify any anything. In case it like takes

06:13.040 --> 06:18.640
too long to like try to hash that out. All right. Any questions so far? Sorry, we haven't like started

06:18.640 --> 06:23.840
the actual lecture. I've just been rambling about random stuff. Will there be any linear algebra?

06:23.840 --> 06:29.120
I believe so. Yes. I mean, yes, we're going to talk a lot about vectors, dot products,

06:29.120 --> 06:33.280
crotch products, all that stuff, and matrices too. All right. So

06:36.400 --> 06:41.280
let's see shuffling around my notes. Oh, if you want to, we could look over some of the things

06:41.280 --> 06:48.240
you're going to see in math papers. I don't know if you want to like have some tool sets for like

06:48.240 --> 06:54.080
being able to parse papers. I could plan that plan that in probably not for today, but some of the

06:54.080 --> 06:58.400
other days, because we do have I do have a bunch of like time that I haven't like planned in because

06:58.400 --> 07:05.040
usually things take longer than you expect. Sometimes they're way shorter and so forth.

07:05.040 --> 07:10.880
All right. So I first want to talk a little bit about like why I think math is cool. I think math

07:10.880 --> 07:16.960
sort of has this bad reputation because I think a lot of in a lot of cases it's taught as kind of

07:16.960 --> 07:21.680
just the boring thing you have to do in school that has to do with numbers. And you have to like,

07:23.200 --> 07:28.160
I don't know, it seems very esoteric. And the most common question that students ask is like,

07:28.160 --> 07:33.440
when am I ever going to use this in my life? Right? Like, when do I need the cosine? You know,

07:34.320 --> 07:40.000
like that that is extremely common for people to to feel like that and when it comes to math.

07:40.000 --> 07:46.720
But I feel like game development is sort of one of the like one of these strongest cases where

07:46.720 --> 07:54.080
math is just like extremely useful, like absolutely everywhere in in doing game development, not

07:54.080 --> 07:59.360
only like in terms of gameplay code, but also like a lot of it is in like rendering and all of that

07:59.360 --> 08:05.360
stuff, right? But I think the the problem with teaching math in general is that I feel like

08:06.400 --> 08:11.200
people who teach math are sometimes like excited about math, but they don't really they kind of

08:11.200 --> 08:16.080
presume that other people are already excited about math. And then they don't really like show it in

08:16.080 --> 08:20.880
an exciting or interesting or visual way. So then it just becomes this esoteric thing where

08:20.880 --> 08:25.200
you have to charge through a bunch of numbers. And it's just boring, right? So I think that's

08:25.200 --> 08:32.000
a that's a shame. I feel like mathematics is incredibly fundamental. It's like one of the

08:32.000 --> 08:38.080
most fundamental fields of study that we have. And like, they're like, it kind of doesn't matter

08:38.080 --> 08:44.640
where you are in space, like you could be an alien species somewhere, you could be like,

08:44.720 --> 08:49.440
absolutely anywhere, it doesn't matter, doesn't have to be on earth doesn't have to be this society,

08:49.440 --> 08:55.840
you can have other numbers of dimensions, but math is still gonna exist, right? It's gonna be called

08:55.840 --> 08:59.280
something else numbers are gonna be presented in a different way, people are gonna use different

08:59.280 --> 09:07.280
symbols, but math in and of itself is gonna exist. Because math is like, it's the like the study of

09:07.280 --> 09:13.760
quantity. It's a study of space, it's study of structure, it's a study of change. And it's kind

09:13.760 --> 09:19.920
of hard to imagine a universe where any of these things just don't exist. Like, what does it even

09:19.920 --> 09:26.800
mean to have a like, what does it even mean to have a universe that doesn't have quantity as a

09:26.800 --> 09:32.480
concept, right? And I think that's really cool. It's gets kind of this like field of study where

09:32.480 --> 09:37.840
you can sort of co discover things, like, you know, the the circle constants, like pi and tau,

09:38.800 --> 09:44.400
e, the golden ratio, like all of these things are probably discovered in other societies,

09:44.400 --> 09:49.680
presuming they exist, even though we're entirely disconnected from each other, just because it's

09:49.680 --> 09:54.960
this study of the very fundamentals of kind of structure and change and that type of stuff.

09:56.640 --> 10:04.800
Yeah. And so, so for me, I feel like the, it kind of underpins like physics, it underpins chemistry,

10:04.800 --> 10:10.480
biology, none of these things would really exist without math working as well as it does and being

10:10.480 --> 10:16.240
applied to these fields, right? It's similar to philosophy. I feel like philosophy underpins

10:16.240 --> 10:23.280
everything in like social sciences, it underpins morality, ethics, politics, philosophy sort of

10:23.280 --> 10:28.720
the groundwork for all of those things. And that's kind of why I also like philosophy. But I think

10:28.720 --> 10:34.480
it's really cool that this is so fundamental. And that's why I think math is cool. They're also

10:34.560 --> 10:40.480
like, you of course can't like apply it to absolutely everything. Because usually people

10:40.480 --> 10:46.960
say stuff like math is universal language. But you know, it's kind of not universally applicable

10:46.960 --> 10:51.520
to every situation out there. Anyway, so that's all well and good. But I'm already,

10:52.160 --> 10:58.000
I'm already interested in math, and you might not be. So I feel like we should go into the like

10:58.720 --> 11:08.640
practicalities of what it actually means to use math in, in games. And how everything works.

11:08.640 --> 11:12.320
Also think people overestimate how much math you need to know to do cool shit. You can get so far

11:12.320 --> 11:18.480
with a few basic principles in some time. Yes. I keep saying that you don't need to know that

11:18.480 --> 11:25.520
much math to do game development. If you want to like make an engine, you need more. But if you

11:25.520 --> 11:30.160
just want to do gameplay coding, or even shader coding to some extent, you don't need that much

11:30.160 --> 11:37.040
math. So I'm going to go through most of the like, the very essentials of game development math.

11:37.840 --> 11:45.120
Like, even things like derivatives or integrals, they are kind of rare in game development.

11:45.120 --> 11:49.840
Even though they're very fundamental in teaching math in game dev, you don't have them very often.

11:50.480 --> 11:57.440
Like, mostly if you're doing some very like, very math heavy rendering stuff, that's when you

11:57.440 --> 12:03.840
start running into, especially integrals. But otherwise, like generally, like linear algebra

12:03.840 --> 12:09.520
is like most of, most of game dev math, understanding derivatives and integrals is really useful for

12:09.520 --> 12:16.880
anything related to implementing physics. Yeah. So there's the idea of what a derivative is,

12:16.960 --> 12:23.520
is really important. But you don't really need to know how to derive equations, right? So like,

12:23.520 --> 12:28.240
generally in game dev, unless again, you're coding a game engine, you're going to be using

12:28.240 --> 12:34.480
existing physics packages, you're generally going to do things on a per frame basis. So like,

12:34.480 --> 12:38.800
the understanding of it is really important. But to actually derive equations, isn't that

12:38.800 --> 12:43.360
important? Sometimes you will run into it. But I don't think I think I might have run into it

12:43.360 --> 12:48.480
like once or twice throughout my career. But yeah, understanding it in terms of like, yeah,

12:48.480 --> 12:52.320
like you mentioned, like time dot delta time, that we're going to go through because that's

12:52.320 --> 12:58.480
really important. But in terms of like actually deriving equations, they don't really do that

12:58.480 --> 13:04.400
much. So I feel like there, there is a concept that is talked about very early on in your math

13:04.400 --> 13:10.080
course. And usually it's referred to as the number line. So you can imagine this, like one

13:10.080 --> 13:15.600
dimensional space, we can just move along this one line, right? And in the center, we can put

13:15.600 --> 13:22.480
the number zero, right? And then you can sort of imagine a space where these numbers are

13:25.040 --> 13:33.200
kind of put along this whole line, right? All right, so we have one, two, three, so all integers

13:33.200 --> 13:38.640
are on these little notches. All right, cool. So this is the number line. It's like, I think it was

13:38.720 --> 13:43.520
like usually this is mentioned very early on in your math courses. And then it's kind of like

13:43.520 --> 13:48.880
forgotten. But I think it's an extremely useful place to be. Because it very like beautifully

13:48.880 --> 13:55.280
illustrates kind of the continuity of numbers and like where the integers are and so forth, right?

13:56.720 --> 14:02.320
I hope I got these numbers right. I feel like I'm going to make so many weird mistakes. So

14:03.040 --> 14:09.040
all right, this is correct, right? Okay, cool. So we have zero in the center. And then one, two,

14:09.040 --> 14:14.320
three, four, five. So we have our positive numbers on this side and negative numbers on this side.

14:14.320 --> 14:19.360
And this continues to positive infinity. This continues to negative infinity, right? So this

14:19.360 --> 14:22.880
is a useful way of thinking about it, because you can have numbers that are between the integers,

14:22.880 --> 14:28.560
right? So these whole numbers are integers. And then between those, you can have decimal numbers,

14:28.560 --> 14:34.560
right? So you have 0.5 here. So that's halfway between zero and one and so forth, right? Okay,

14:34.560 --> 14:39.680
so, so now one thing that's very important, whenever you're working with math, especially in

14:39.680 --> 14:45.760
game dev is not to really think about numbers in terms of just being in numbers. Because numbers

14:46.560 --> 14:53.280
is only there to represent something else, right? So, so then you can ask like, okay, what is this

14:53.280 --> 14:58.400
number? What is it like? What is it? What is it a substitute for, right? And what is it representing?

14:59.280 --> 15:05.280
So usually, if we have a number, let's say we have number two, and we can mark it with a dot there.

15:05.280 --> 15:11.440
So, so what does two mean here? Well, we could interpret it in many different ways. Two could be,

15:12.160 --> 15:17.280
it could be a position, right? Maybe this is the position along this line, in which case,

15:17.280 --> 15:22.240
this is going to be a coordinate system, right? Where every number says the position

15:22.240 --> 15:29.440
on this one dimension, right? So we could call this the one x axis, right? So this could be

15:29.440 --> 15:36.640
interpreted as a position. We could also interpret it as a vector, right? It could be an arrow,

15:36.640 --> 15:42.000
usually going from zero, because vectors don't really have your roots of quote unquote, the arrow,

15:42.000 --> 15:48.160
they only have a single point, right? So this is a vector, it just has the value two, right?

15:48.160 --> 15:52.560
And because it's one dimensional, we can only, we can only have vectors that point either to the

15:52.560 --> 15:59.360
right or to the left, right? So we can interpret two as a vector, we can can do another number,

15:59.360 --> 16:06.160
let's put three here. And then this is another vector, we can do another vector for negative one,

16:06.160 --> 16:13.040
right? So this is sort of a one dimensional interpretation of vectors. But then we can ask

16:13.040 --> 16:19.520
like a lot of questions about these, right? We can ask how, let's do another vector actually,

16:19.520 --> 16:25.600
let's do negative three. Okay, so usually when you work with vectors, you work with a lot of concepts

16:26.960 --> 16:32.800
in terms of like length and direction and that kind of stuff. And usually you kind of start doing

16:32.800 --> 16:38.080
that once you go to two dimensions. But all of these things exist in one dimension two,

16:38.080 --> 16:43.280
this is not exclusive to like two dimensions and above, right? So if you look at these vectors

16:43.280 --> 16:51.200
right here, what is the length of these vectors? Well, this one that's pointing to two,

16:53.120 --> 16:58.880
this one has a length of two, right? The this one has a length of three. But if you go to these,

16:59.440 --> 17:04.240
these also have a positive length, because the lengths are always positive, right? This has

17:04.240 --> 17:14.160
a length of one. This one has a length of three as well. So yeah, so this is basically a just a

17:14.160 --> 17:18.560
one dimensional interpretation of what vector length is, right? Also, I didn't draw these

17:18.560 --> 17:22.880
exactly the same size. But you know what, that's okay, you get the idea, I hope. All right, so

17:22.880 --> 17:31.040
what about direction? What is the direction of these vectors? Well, if you think about direction in

17:31.040 --> 17:37.600
one dimension, usually directions have a length of one. So in one dimension, you can only have

17:37.600 --> 17:43.920
directions that are either negative one or one. Sometimes that's usually called a sine. When

17:43.920 --> 17:55.120
you're working in one dimension, usually it's called a sine, sine of x. So usually this is the

17:55.120 --> 18:01.280
like one dimensional direction, right? Basically, it's only positive one or negative one. There are

18:01.280 --> 18:07.840
some like exceptions if x is zero. If x is zero, then it kind of depends on the implementation.

18:08.800 --> 18:13.840
In some cases, it's going to throw an error. In some cases, it's just going to return one

18:13.840 --> 18:21.120
and so forth. But usually it'll either return zero, one or an error when you pass in a zero.

18:21.120 --> 18:28.080
Anyway, so the sine of these numbers is the direction it's pointing pretty much. And if you

18:28.080 --> 18:34.480
want to get the length of these, actually, maybe I should keep the sine of x is basically the direction.

18:35.440 --> 18:46.080
So this is either negative one or one. Mostly random rambles in the student chat.

18:46.880 --> 18:52.880
No questions yet. So zero vector has no direction. Yes, it's sort of like depends on your implement

18:52.880 --> 18:58.960
or like implementation and interpretation of like what it's used for. Like in some cases,

18:58.960 --> 19:05.120
it is useful to interpret the sine of x to be one. Because quite often the you use the direction

19:05.120 --> 19:10.080
to multiply something to like sort of change the direction and the scale it by some value.

19:10.080 --> 19:16.320
And sometimes when the value you're checking the sine of is zero, sometimes you want it to be one.

19:16.320 --> 19:21.920
But generally, it depends on generally depends on like the case, right? But again,

19:22.880 --> 19:28.000
the like purely mathematically, a zero vector doesn't have a direction, as far as I'm concerned.

19:28.720 --> 19:32.640
Alright, so so this is kind of the direction of a one dimensional vector. It's usually called

19:32.640 --> 19:38.560
sine. Again, for one dimensions, these are sometimes called scalar, scalar values and so

19:38.560 --> 19:43.280
forth. Then again, the the length we talked about, like the length of these vectors, because the

19:43.280 --> 19:49.280
actual values of the vectors, like the value of this one is negative three, right? But the length

19:49.280 --> 19:55.200
of it is three. So so to get the length of a number, you basically just you get what's called

19:55.200 --> 20:01.040
the absolute value, which is just a fancy way of saying, if it's negative, make it positive,

20:01.040 --> 20:11.200
like that's it. So so the absolute value usually abs in your math libraries. That's the that's the

20:11.200 --> 20:19.760
length. Sometimes called magnitude, but I feel like I'm the only person in the world that calls

20:19.760 --> 20:24.240
abs for scalars magnitude. But I think it's funny, if sine x can only return one number when it

20:24.240 --> 20:28.800
is a float, it does return a float, we are not talking about two dimensional vectors yet,

20:28.800 --> 20:34.720
we're only talking about one dimensional values, which is floats or a scalar or a single value.

20:35.360 --> 20:39.280
So we're not we haven't gone into two dimensional or three dimensional vectors yet.

20:39.280 --> 20:44.160
Can you sign a 2d vector? What if the vector has one negative value and one positive? So

20:44.880 --> 20:51.040
so generally, the the general case of a sine is that it gets the direction of the vector.

20:52.000 --> 20:57.280
The the sign of a two dimensional vector would would would be itself a vector, right,

20:57.280 --> 21:01.440
because it's a it's a two dimensional direction. What we're going to get into 2d vectors,

21:01.440 --> 21:06.240
I just want to start out with one dimensional stuff. But I think it's kind of neat that you

21:06.240 --> 21:12.640
can have a one dimensional interpretation that is still vector based. So so we're still just on

21:12.640 --> 21:16.720
the number line, we we don't have any two dimensional vectors here. Right, so then we can

21:16.720 --> 21:23.280
ask a lot of questions, like what does it mean to let's say we'll ask some question like,

21:24.560 --> 21:32.400
what is the what is the distance between what's the distance between one and three? Like,

21:32.400 --> 21:38.800
what does that question mean? Well, generally, a distance would be we want to get this length

21:38.800 --> 21:42.880
here between these two numbers. So that would be a way to get the distance, right?

21:43.600 --> 21:50.560
So so if you want to do if you want to get the distance between these two numbers, then

21:51.360 --> 21:56.160
generally, you would, you would have the two numbers represented as like, well, we could

21:56.160 --> 22:02.160
represent them as just letters, right? So in this case, we want to do three minus one.

22:03.520 --> 22:08.880
And then that gives us two, right? So then we get the distance between these two numbers. So so

22:08.960 --> 22:16.080
usually, doing like subtracting is usually it can be interpreted as getting the difference

22:16.080 --> 22:21.680
between two values, right? So so if we want to get the the distance between these two values,

22:22.720 --> 22:29.520
generally, you do one minus the other. But if you like flip the order of these, if you do one

22:29.520 --> 22:34.880
minus three, you're going to get negative two, right? So so in this case, we actually want to

22:35.840 --> 22:40.000
we want to make sure that we get the length and the magnitude of this, right?

22:41.440 --> 22:47.680
Because if we do three minus one, what that gives us is that we basically take this vector,

22:47.680 --> 22:53.440
this is three, right? Because it lines up here, this is the one dimensional vector representing

22:53.440 --> 23:00.160
the value three. And then we want to subtract the vector one, and the vector one is this vector,

23:00.160 --> 23:07.280
right? And the way to kind of interpret subtraction is that you can sort of take this arrow,

23:08.240 --> 23:14.960
and you can subtract it as in you flip the direction of the arrow, and then you get a new

23:14.960 --> 23:21.600
value that stops here, right? And that's going to be an arrow that goes here. And this is the

23:21.600 --> 23:27.120
value two, right? All right. So but then again, this is order dependent, this presumes we have

23:27.120 --> 23:32.480
the three before the one, otherwise, we're going to get negative two. So if you ask the question,

23:32.480 --> 23:36.640
what is the distance between these two values? If you say negative two, that's going to be

23:36.640 --> 23:42.560
a bit of a weird answer. Depending on the implementation, there are some cases where

23:42.560 --> 23:48.720
you want to get what's called a signed distance. And again, signed distance is referring to the

23:48.720 --> 23:54.240
fact that it can be either negative or positive. But generally, distance values are always positive.

23:54.560 --> 23:59.920
Same thing with area, if you want to get like the the area of some polygon, then the area is

23:59.920 --> 24:06.720
considered to also always be positive, except if you want a signed area. So a signed area just

24:06.720 --> 24:12.080
means that it can be either negative or positive. So you're probably going to hear a lot about

24:12.080 --> 24:18.000
like stuff like signed distance fields, which is a term that has kind of exploded for the past

24:18.640 --> 24:26.640
few months. It's just a fancy way of saying you have a field of distance values that can also

24:26.640 --> 24:32.320
be negative. All right, so if we want to get the actual true distance between these two things,

24:33.040 --> 24:37.280
as in the positive distance, we would need to get the magnitude of this, right? So

24:37.920 --> 24:43.520
that would be the absolute value, right? So so generally, this is the way to get the distance

24:43.520 --> 24:49.520
between two values, or more generally, if we want to generalize this, we can say that the

24:51.680 --> 24:52.080
let's see,

24:59.200 --> 25:06.480
the distance between, let's say we have values a and b, we're still only talking about float values

25:06.480 --> 25:14.800
or scalars, one dimensional numbers. So if we want to get the distance between a and b,

25:15.520 --> 25:23.760
all we need to do is do the absolute value, as in the length of the difference between a and b.

25:26.480 --> 25:29.840
So now we have the difference between a and b, and then we get the length of that.

25:30.160 --> 25:37.440
And then we got the distance value. Okay, everything clear so far,

25:37.440 --> 25:40.480
also realized I haven't talked about addition, that might be a good thing.

25:40.480 --> 25:46.960
Addition is probably good to know. So if we want to do three plus one,

25:48.800 --> 25:51.840
let me just erase things, it's a little messy.

25:52.160 --> 26:02.160
Let's say we want to do three plus one, then in a one dimensional interpretation of vectors,

26:02.720 --> 26:09.200
then this is three, right? And then we can have a another vector, this is one.

26:10.160 --> 26:14.960
So if you want to do three plus one, one way of interpreting that is that

26:14.960 --> 26:18.720
it's kind of like taking the vector and kind of just adding it on top of the other vector.

26:18.720 --> 26:25.600
So now we have three and then plus one. And the final vector we get out of this as sort of the

26:25.600 --> 26:31.440
result of this equation is this vector going all the way here, which is the value of four.

26:31.440 --> 26:35.920
So that's kind of like how addition works. Previously we did subtraction when we wanted

26:35.920 --> 26:41.120
to know the difference between these two, in which case instead of adding this to the top,

26:41.120 --> 26:46.400
we negated and then add it, right? Or just subtract it, right?

26:48.880 --> 26:55.680
Yeah, so then doing that we ended up with a vector adds two, right? Because three minus one is two.

26:56.960 --> 27:00.720
As far as I know, I'm bad at doing math like I mentioned before, I might be wrong.

27:02.880 --> 27:08.640
Okay, cool. Any questions so far? Sorry for the like weird one dimensional vectors,

27:08.640 --> 27:12.640
but right now we're only talking about scalars. We haven't gone two dimensional yet.

27:12.640 --> 27:19.520
Yeah, so so far we've learned that three minus one is two. That's how well this math course is going.

27:24.000 --> 27:26.240
What's the difference between length and magnitude? Nothing.

27:27.120 --> 27:31.040
It's the same thing. Three plus one equals four. That's true, we did learn that too.

27:31.040 --> 27:36.000
Yeah. This is Thor, the void, how?

27:38.800 --> 27:41.120
Buddy, you don't have to use your claws.

27:43.280 --> 27:47.040
Oh, I missed a question. Will we go deeper into quaternions later on in this course? No,

27:47.040 --> 27:51.440
we're, I'm going to talk about how to use rotations, but I'm not going to talk about

27:51.440 --> 27:55.440
how quaternions work internally, because that's not relevant. You don't need to know that in

27:55.440 --> 28:00.640
order to make games, because we're not going to be engine coders. We're going to make games,

28:00.640 --> 28:05.600
right? So I'm not going to go into like how to write a quaternion class, but I'm going to talk

28:05.600 --> 28:10.640
about how to use Unity's quaternion class, how to apply rotation, how to think about rotations,

28:10.640 --> 28:14.560
what they are, and so forth. What's the difference between quaternions and rotors?

28:14.560 --> 28:20.720
Mostly an interpretation difference, as far as I know. So let's see. There are a few things we

28:20.720 --> 28:26.000
haven't talked about yet. So we've talked about some of the operators you can do. You can do the

28:26.560 --> 28:32.160
sign will get you the quote-unquote direction of a one-dimensional vector or a value,

28:32.160 --> 28:37.360
which is either just negative one or one. Abs will get you the magnitude of a vector,

28:37.360 --> 28:43.280
which means that if you have a vector or a value of negative four, abs of that abs of negative four

28:43.280 --> 28:49.760
is four, right? It just makes negative values positive. In terms of one-dimensional vectors

28:49.760 --> 28:54.720
or floating point values or scalars, right? It's a little different for two-dimensional

28:54.720 --> 28:59.520
vectors, and we're going to get to that. And then we have the distance. As you get the difference

28:59.520 --> 29:05.520
between two values, it could be like we had before, three minus one or yeah, three minus one. So that

29:05.520 --> 29:09.600
will be two. If it's negative two or whatever, then abs will make sure that it's positive,

29:09.600 --> 29:14.000
and that's the way to get the distance between two values. So if we want to get the distance

29:14.000 --> 29:19.760
between negative two and two, like we want to get this distance, then we can just do that

29:19.760 --> 29:25.280
formula up there, right? And then it will work out. We talked a little bit about adding and

29:25.280 --> 29:30.640
subtracting as well. But the next thing that we should talk about is like what does it mean to

29:30.640 --> 29:39.040
multiply a value, right? So usually the way that I like to think about it is that when you're adding

29:39.040 --> 29:46.080
something, addition is an offset. Addition is to move something or increase something by some

29:46.080 --> 29:54.080
amount, right? So I usually think of addition as an offset and multiplying as a scale. So we can

29:54.080 --> 30:01.120
scale something by multiplying something by some other value, right? So let's say we have the number

30:01.120 --> 30:07.600
two, right? We have the number two, and then we want to multiply it by some other value. Let's

30:07.600 --> 30:15.120
say we multiply it by two. So if we multiply that by two, what this means is that it's going to be

30:15.200 --> 30:21.760
twice as long. So that's going to go from being on two to being on four. So the result of that is four,

30:21.760 --> 30:28.720
right? So what that means is that because we have multiplied by two, the length of this vector is

30:28.720 --> 30:35.680
going to be twice as long, right? Because again, if you do abs of this one and like check the length

30:35.680 --> 30:42.160
or the magnitude, it's now going to be twice as long as I was before. And this relationship holds

30:42.160 --> 30:47.920
for any other vectors too. It's not just for scale our values or one dimensional values. Okay.

30:48.800 --> 30:58.080
So and then we can do, we can do other examples. So we can do two multiplied by 0.5. So this is

30:58.720 --> 31:08.000
basically half a length, right? So 0.5 is 50%. So what we're going to do if we multiply two by

31:08.000 --> 31:12.880
0.5 is that it's going to be half as long, right? So that's going to have a value of one,

31:14.000 --> 31:21.280
because two multiplied by 0.5 gives us one. And the same thing is, it's the same thing when it

31:21.280 --> 31:30.640
comes to dividing, right? So this is the same thing as doing two, two divided by two. So multiplying

31:30.640 --> 31:38.960
and divide are kind of the two sides of the same coin, just like, so for instance, let's say we have

31:43.040 --> 31:56.400
a plus b. And then we have a minus b. So if you think about these, these two situations,

31:57.280 --> 32:06.640
like having a like subtraction, all that is, is kind of like you're adding a negative number.

32:07.360 --> 32:12.800
So so another way of interpreting this is that instead of looking at it like this,

32:13.600 --> 32:22.480
we could just say that this is the same thing as a plus a negated version of b, right? And negation

32:22.720 --> 32:28.560
is not the same thing as subtraction, right? So this flips the sign of it. A negation means that

32:28.560 --> 32:32.960
if it's positive, it's going to be negative. If it's negative, it's going to be positive. So

32:33.760 --> 32:39.840
like addition is generally kind of like, or subtraction is sort of a special case of addition,

32:39.840 --> 32:47.280
right? Actually, let's do, no, let's do multiply. So a multiplied by b, and then we have a divided

32:47.280 --> 32:58.720
by b, right? So, so in this case, this is sort of also a special case of multiply, right? So

33:00.320 --> 33:11.200
in this case, it's actually a multiplied by the reciprocal of b. As a reciprocal is basically

33:11.200 --> 33:19.920
one divided by, by the value. So these two are the same thing, right? So so you can sort of think

33:19.920 --> 33:26.400
of addition and multiplication as the core things that you do, where when you're doing subtraction

33:26.400 --> 33:32.400
or division, it's kind of like a special case, where you're kind of multiplying by the reciprocal

33:32.400 --> 33:40.560
of something. Or in this case, you are adding the, the inverse of something, right? Anyway,

33:40.560 --> 33:45.200
sorry, that was a bit of a tangent. Anyway, I just think that's kind of cool. Probably not

33:45.200 --> 33:51.360
super relevant to know. But usually the point is, you can kind of convert between these two,

33:51.360 --> 33:56.720
you can, you can translate a multiply to a divide if you want to, or divide into a multiply.

33:59.760 --> 34:07.520
Yeah. Okay. That's a big word. What's a big word? A lot of this meowing in the background,

34:07.520 --> 34:12.880
had to bless our chat for their authority mode. That's a great emote. Thank you so much, Marcus.

34:17.120 --> 34:22.880
Oh, reciprocal. Yeah. Oh, sometimes it's called one over as well. But yeah, like sometimes there

34:22.880 --> 34:28.080
are actually cases where instead of dividing multiplying can be like slightly faster in

34:28.080 --> 34:32.720
terms of like computationally, but usually that goes into the category like unnecessary

34:32.720 --> 34:39.040
micro optimization. I guess it depends on what you're doing. But yeah. Okay.

34:42.480 --> 34:47.280
Cool. Let's see. Are we, I think we think we might be ready to move into two dimensions.

34:49.840 --> 34:56.080
So let's erase a bunch of things. Don't need that. These are kind of weird.

34:57.440 --> 35:02.320
Why are these numbers marks? Why do those numbers matter? It's a little unfair, actually.

35:02.720 --> 35:05.440
Can you explain Quake Engine's inverse square root at some point?

35:07.280 --> 35:10.480
What part of it? I don't, I'm not super familiar with the actual maths of it.

35:11.760 --> 35:17.440
But as far as I know, it was like, it was an approximation of doing the inverse square root

35:18.320 --> 35:24.320
of something. And we used like kind of weird bit shenanigans that sort of only works with

35:24.320 --> 35:30.000
certain representations of numbers in binary. But yeah, I don't, I don't know too much of

35:30.000 --> 35:32.720
the history behind it, except what I just said, basically.

35:36.560 --> 35:40.240
But I'm sure there's a Wikipedia article or something you can go to.

35:42.560 --> 35:47.040
Okay. We've talked about one dimensional numbers. One dimensional or one dimensional

35:47.040 --> 35:52.720
vectors are usually not called one dimensional vectors. Usually people just call them scalars.

35:52.720 --> 35:56.880
People call them floating point values and programming or decimal values.

35:57.840 --> 36:02.080
So I've sort of approached this in a non-conventional way. So don't call things one

36:02.080 --> 36:05.600
dimensional vectors because you're going to confuse people. But the only reason I approach

36:05.600 --> 36:12.640
it this way is because all of these functions have direct analogies to the higher dimension

36:12.640 --> 36:20.240
vectors. So let's go to two dimensions. Let's just enter another world or something like that.

36:20.720 --> 36:28.400
So usually when we talk about, when we talk about dimensions, usually we have axes, right?

36:29.040 --> 36:34.720
Currently, we've only had one axis, like it's the x axis. Usually this is the number line.

36:34.720 --> 36:39.360
We only have the one axis where we have all the numbers, right? And if we want to represent

36:39.360 --> 36:48.320
a position here, all we need is one number, right? And we also need to not lock alpha on the layers.

36:48.320 --> 36:53.840
Anyway, okay. So basically if you want to represent a position on the number line, all you need is

36:53.840 --> 36:58.480
one number because there's only one dimension. So what we're now going to do is that we are

36:58.480 --> 37:09.600
going to add a dimension to this. So first off, when we work in multiple dimensions,

37:09.600 --> 37:16.640
it's really useful to use colors. So usually when working in 2D or 3D space,

37:16.720 --> 37:26.640
usually we use the colors red, green and blue. So the x axis is, I'm using the eraser. There we go.

37:26.640 --> 37:33.680
x axis is usually red. And there's a neat little, little shorthand if you want to like remember

37:33.680 --> 37:44.480
which one is which. So usually you have x and y and z. So these directly correspond to, you know,

37:45.440 --> 37:52.240
RGB, right? So if you want to remember like what axis is what color, then they follow RGB.

37:52.240 --> 37:57.280
Like RGB is usually the color, color space we use and they directly correspond to the colors of the

37:58.080 --> 38:04.560
axes that we have in our, or the each dimension axes, basis vectors, whatever like term you want to

38:04.560 --> 38:11.520
use, they correspond to this. So like if you open up Unity, the colors of the gizmo is going to

38:11.520 --> 38:16.560
match this, right? If you see a red axis, you know that that's going to be the x axis, right?

38:17.440 --> 38:26.960
So it'll look something like this. There we go. It's something that like, I don't know,

38:26.960 --> 38:32.240
it's weird how many people have not realized that. It's like, it's one of those things that's

38:32.240 --> 38:37.040
obvious once you learn it. But before that, it's like really not obvious for some reason.

38:37.520 --> 38:44.080
But yeah, someone in Twitch chat said left handed. The reason it's left handed is because we

38:44.080 --> 38:50.800
are going to talk about Unity. And Unity is left handed. And Unreal is also left handed,

38:50.800 --> 38:56.400
although Unreal is z up. But yeah, anyway, so that's why it's left handed. So I'm sorry for any like

38:56.400 --> 39:03.120
actual professional mathematicians, because math is usually right handed, which is kind of kind of

39:03.120 --> 39:13.600
not great. But whatever, it's okay. I'm also left handed. I'm glad you figured out your chirality,

39:13.600 --> 39:17.520
right? All right, so we're going to add another dimension. So so far, we've just had one dimension.

39:18.720 --> 39:24.480
And we also need to close this document because Photoshop decided to lock the document, which

39:24.480 --> 39:30.240
it sometimes does when I'm using the tablet. Right. So we're just going to we're just going to

39:30.240 --> 39:37.840
take this axis and copy it and rotate it. There we go. Oh, if you're like very familiar with math,

39:37.840 --> 39:43.040
this is probably painfully slow. And I apologize, but I do want to make sure that everybody feels

39:43.040 --> 39:47.280
very covered and know what we're talking about throughout this entire course.

39:49.840 --> 39:55.680
So sorry if it's a little a little too basic, but that's okay. I hope that's okay. All right.

39:55.680 --> 40:00.560
So let's see. The number line still works the same way. We still have not like,

40:00.560 --> 40:04.640
it's still a number line, we just have two of them, right? So now we have one,

40:06.560 --> 40:19.120
two, three, four, five, negative one, negative two. Okay. So now, instead of a one dimensional space,

40:19.120 --> 40:24.720
which was the number line, we now have a two dimensional space. So generally, when you add

40:24.800 --> 40:32.000
a dimension to something, the dimension is always perpendicular to the the other dimensions.

40:33.280 --> 40:38.960
So or the other axes. So so whenever you're looking at something like this, then actually,

40:38.960 --> 40:43.600
it's not always perpendicular. But if you want to have like an orthographic space, which you usually

40:43.600 --> 40:49.600
work in, then all of the axes will be orthographic to each other. So they're they always meet at a

40:49.600 --> 40:55.840
right angle. Again, there are exceptions. If you're working with like projection matrices or

40:55.840 --> 41:01.440
whatever, then but whatever, that's irrelevant now. Sorry, I'm going into unnecessarily weird details.

41:03.520 --> 41:07.120
All right. So now we have a two dimensional space. So you know how we previously

41:08.240 --> 41:15.840
marked a point where, you know, we would say that some place is three, right, in terms of position,

41:15.840 --> 41:21.200
right? When we are working in two dimensions, instead of every point on the number line,

41:21.200 --> 41:27.920
being a single number, a point in two dimensional space is two numbers. So there are a lot of like

41:27.920 --> 41:34.880
different ways you can like write vector notation. Usually in mathematics, their notation is really

41:34.880 --> 41:40.080
garbage and terrible. So I'm just going to sort of do whatever because math hasn't hasn't worked this

41:40.080 --> 41:48.400
out yet. So usually I just do parentheses when I want to like mark a vector. So so let's say we

41:48.400 --> 41:54.320
have we want to get a position in this 2d space. Let's say we mark this point right here. Just like

41:54.320 --> 42:00.320
we did before, we could draw an arrow representing the position. And if you want to draw a position

42:00.320 --> 42:08.960
or a vector vectors, vectors kind of always originate from zero, because vectors don't have a

42:08.960 --> 42:15.520
root and a tip, they only have a tip. So like where you put the vector is only for like visualization

42:15.520 --> 42:19.840
purposes or interpretation purposes. This is really important if you want to like,

42:20.640 --> 42:24.560
know the distinction between like a vector and a point in a direction, which we're going to get

42:24.560 --> 42:32.320
into. So now we have a point. So this is a point we can represent as a vector to. And now if we

42:32.320 --> 42:39.520
want to like type the coordinates of this one, it would be two on the x axis. And it would be one

42:39.520 --> 42:46.720
on the y axis. So so basically what this means is that each of these are called components. And

42:46.720 --> 42:54.880
these components of this vector correspond to each of these two number lines. So this is the x

42:54.880 --> 43:01.920
component. And this is the y component of this vector, right? In unity, this type would be called a

43:01.920 --> 43:16.880
vector to because it's a two dimensional vector. There we go vector to. So so this is how you

43:16.880 --> 43:20.480
would sort of write it in code, you would do new vector to and then you have a two dimensional

43:20.480 --> 43:29.120
vector, right? Okay, so this, these are the coordinates for this point, right? All right.

43:30.080 --> 43:33.200
So so now if we look back at everything we talked about before,

43:34.080 --> 43:39.440
we can start doing a lot of operations with these that works exactly the same way in two dimensions.

43:40.720 --> 43:43.600
So so let's start with addition. Let's see you want to add something, right?

43:45.920 --> 43:52.720
So let's say we want to lock the Photoshop document again, and then reopen it.

43:53.360 --> 43:59.280
All right, so let's say we want to add something to this.

44:02.560 --> 44:05.280
Let's call this something. Let's call it a

44:08.000 --> 44:12.240
or maybe I don't know if we should do a lowercase. Let's do a lowercase. Why not?

44:13.440 --> 44:16.960
Oh, discord just said 170 new messages in the student chat.

44:17.600 --> 44:20.480
Hope not. No, we're fine. Okay, thanks discord.

44:22.880 --> 44:26.320
All right, so we have the vector a the vector a has these values, right?

44:27.200 --> 44:33.840
And then we want to add to this. So again, when we were adding numbers, we we sort of had one,

44:35.280 --> 44:40.720
a one dimensional vector plus another one dimensional vector, right? If we want to add two

44:40.720 --> 44:47.200
dimensional vectors, you would kind of get some number here, some number here, plus some number

44:47.200 --> 44:53.600
here, some number here, right? Because you have x and y coordinates, right? So you would have x, y,

44:54.160 --> 45:03.680
x, y, if you want to add two two dimensional vectors together, right? Okay, so let's let's

45:03.680 --> 45:14.160
pick another vector. Let's say we want to do the vector here. So what are the coordinates of this

45:14.160 --> 45:19.840
vector? There we go a question for class. How would we write the coordinates of this vector? It's

45:19.840 --> 45:24.880
always really awkward when you ask the class for like questions, because it's usually obvious. And

45:24.880 --> 45:31.520
then like, some people don't really want to answer anyway. And it's like, it's we are not going to

45:31.520 --> 45:37.760
do this again, this was a mistake. Okay, negative one one, exactly. Because it's it's if we look at

45:37.760 --> 45:45.680
the x axis here, this position on the x axis, lands on negative one, just like this position on the

45:45.680 --> 45:52.320
x axis, landed at two, right? So now we're the coordinates of this one, it's going to be negative

45:52.320 --> 46:00.720
one on the x axis. And then on the the y axis, it's going to land at one, just like the other one,

46:00.720 --> 46:07.120
this one was also at one on the y axis, right? Cool. So this is the vector that we're working with.

46:07.120 --> 46:12.800
So let's say we want to add these together. Adding vectors together is you kind of do it

46:12.800 --> 46:18.960
exactly the same way as you would do with scalars or one dimensional vectors, but you do it for

46:18.960 --> 46:24.560
each component separately. And Jesus Christ Photoshop does not want to cooperate today.

46:24.880 --> 46:32.480
So one way to think about this visually is that, you know, how we sort of imagine taking an arrow

46:32.480 --> 46:38.000
and putting it on the tip of the other arrow when adding? Well, we can do the same thing with this

46:38.000 --> 46:44.560
one. And we can kind of take this arrow and put it on the tip over here. So that will give us this

46:44.560 --> 46:53.200
arrow, right? I don't know how to draw straight lines. There we go. So we're going to draw straight

46:53.200 --> 46:59.680
lines. There we go. So now we've moved this one over here, right? And what we end up with is that,

46:59.680 --> 47:08.800
oh, this is called B, by the way. There we go, vector B. So we have a here, and then we're adding B

47:08.800 --> 47:14.560
here. So where do we end up? Well, this is the point where we end up, right? Because we add this

47:14.560 --> 47:22.400
vector, add this vector, this is where we end up. So what we what we get in the end is this vector

47:22.400 --> 47:25.440
right here. Let's do it in different color, because I got a little confusing.

47:26.800 --> 47:34.160
We end up with this vector. So this vector, the yellow one is a plus B, right?

47:36.080 --> 47:41.840
And you can sort of one thing that's nice about looking at it this way, is that if you have some

47:41.840 --> 47:53.440
value like a plus B, this is actually equal to B plus a. This might seem like it's kind of trivial

47:53.440 --> 48:00.880
that well, of course, that's the case, right? Well, why would it not be? But remember that that's

48:00.880 --> 48:08.800
not the case for like, if you have a minus B, that's not equal to B minus a, right? So it's not

48:08.800 --> 48:16.720
always the case that if you flip the values, you get the same result, right? So it's really

48:16.720 --> 48:22.880
important to keep in mind when things are, I always forget if it's commutative or which one is which.

48:23.840 --> 48:30.800
There are terms for this. Anyway, so if we look at this, if we think about what we did here,

48:30.800 --> 48:38.240
we have the vector a at the bottom, and then we added B to a, right? Because we added B here.

48:39.440 --> 48:45.040
So if we just look at the geometric interpretation of this, we should get the same point if we do

48:46.000 --> 48:55.360
B plus a, right? So if we try that, then we have the vector B. So now instead of moving B over here,

48:55.360 --> 49:01.120
we can move a over here, right? So if we put a here, we end up at the same point.

49:02.000 --> 49:06.720
It's the it's the same result, regardless of what order we do this in, right? Commutative. Okay,

49:06.720 --> 49:11.680
people are confirming that it's called commutative. Good. Okay. Anyway, sometimes that's a useful term

49:11.680 --> 49:17.840
to know. Like, it's the same thing for for scalars, a multiplied by B, it's the same thing as B

49:17.840 --> 49:24.640
multiplied by a, but that doesn't always apply. In some cases, multiplication is not commutative.

49:25.360 --> 49:31.120
So for instance, if you're working with matrices or quaternions, then multiplying those

49:32.160 --> 49:37.440
is different depending on the order that you do it in. I think matrices are non commutative.

49:37.440 --> 49:43.120
All right. Any questions so far? Is this clear how things work with something a little weird,

49:43.120 --> 49:48.480
wonky? Then I guess you just ask questions at any time. I'm always up for answering questions.

49:49.680 --> 49:54.240
So that's sort of how addition works, right? If we talk about, let's say subtraction,

49:54.880 --> 50:00.800
let's see, I should probably undo a bunch of arrows.

50:03.760 --> 50:08.400
All right. So as Steve is saying in the chat that I'm not supposed to read,

50:09.280 --> 50:11.120
subtraction is addition in the wrong direction.

50:14.160 --> 50:19.280
So just like we took one arrow, put it at the tip of the other arrow, subtraction is,

50:19.920 --> 50:26.720
again, like we talked about before, subtraction is the same thing as addition, but we negate

50:26.720 --> 50:32.640
one of them, right? And negate in this case, well, we were thinking about like one-dimensional

50:32.640 --> 50:38.880
numbers before, right? We have a value of two, and then when negated, we're going to get negative two,

50:38.880 --> 50:43.680
right? And if we have negative two and negate that, we're going to get two.

50:44.480 --> 50:49.440
So negation is basically, we flip the arrow to the other side around the origin.

50:50.480 --> 50:57.440
So in two dimensions, it's exactly the same thing. We could do it like per component,

50:57.440 --> 51:02.800
we could think about like, what does it mean to negate the x-axis? Well, if we negate the,

51:03.760 --> 51:09.520
or we've negated the y-component of this one, we're going to get this vector, and then we negate

51:09.520 --> 51:15.040
the x-component, which used to be two, and then it's going to flip to negative two, right?

51:15.040 --> 51:20.080
But an easier way of thinking about it is you just flip the arrow to point in the opposite

51:20.080 --> 51:27.680
direction, right? So if we negate this vector, then we're going to get this vector, right?

51:27.680 --> 51:33.440
Which is the same thing as just negating these individually. So we could just copy those,

51:34.160 --> 51:42.000
move them over, and then there are negative one and negative two, right?

51:44.160 --> 51:49.120
So now, if we want to, if we want to subtract something, if we wanted to b minus a,

51:50.240 --> 51:57.760
then then we add these two vectors, or we do this one minus this one, right? So if we do

51:58.560 --> 52:05.920
b minus a, then we basically take this vector, and we add this vector,

52:06.880 --> 52:13.360
and then that's going to land us over here, right? And then if we did this in the opposite

52:13.360 --> 52:20.080
direction, if we flipped it, because remember, when we did addition, flipping them had the,

52:20.080 --> 52:27.040
gave the same result, right? But in this case, it won't, right? If we do, so this point right here,

52:28.400 --> 52:38.720
this is b minus a, right? If we do a minus b, then we would, we can imagine a, and then we

52:38.720 --> 52:47.760
subtract this vector, and that would get us over here, right? So over here, we have a minus b.

52:49.600 --> 52:54.800
So here we can see that subtracting is not commutative. If we flip the order,

52:54.800 --> 52:59.920
we're going to get different results, right? Okay, so if we do b minus a, in this case,

53:00.720 --> 53:08.080
we're going to get this vector right here. So this yellow line going all the way here.

53:09.040 --> 53:14.960
So one thing that is, that is really, really important and crucial to know about doing

53:14.960 --> 53:22.080
subtraction between vectors is that this vector right here is the difference between,

53:22.880 --> 53:30.000
between the two points, right? So, so this yellow vector is the same vector

53:30.000 --> 53:35.680
as this yellow vector, right? We've just moved it to a different place. So if we want to know,

53:35.680 --> 53:42.320
like, what is the, again, the difference between the points a and the point b, then

53:43.120 --> 53:48.000
that gives us this result, which in this case, this would be a 2D vector still,

53:48.720 --> 53:55.760
but the y component happens to be zero, right? So on the x-axis, we have negative 3,

53:55.760 --> 54:01.760
and on the y-axis, we have zero. So that's what, that's the, that's the difference between,

54:02.560 --> 54:08.480
that's b minus a, right? And if you want, you can still do, do this component wise. If you want

54:08.480 --> 54:17.440
to do b minus a, you could do negative 1 minus 2 gives us 3, right? You can do 1 minus 1,

54:18.240 --> 54:24.160
gives us zero. So you could do it component wise as well. Okay. So with subtraction, they become

54:24.160 --> 54:30.080
each other's inverse values then. Not really, I guess it depends on what you mean by the inverse

54:30.080 --> 54:35.600
values. And they also don't become the distance from one to the other. The distance is a separate

54:35.600 --> 54:40.960
concept because the distance is a scalar. But if you subtract two vectors, you're going to get

54:40.960 --> 54:49.440
another vector, right? So the vector is a difference between a and b, right? So this is b minus a,

54:49.440 --> 54:55.600
and this again is a vector, right? We're going to talk about distance soon, right? So all we're

54:55.600 --> 55:01.600
doing here is we're doing b minus a, right? Better described as an offset. Technically,

55:01.600 --> 55:06.000
it's called a displacement, or usually a displacement is used when it's like over time,

55:06.560 --> 55:14.080
I think. But yeah, anyway, so it's important to remember that this vector, the way we want

55:14.080 --> 55:21.840
to interpret this, if this is the difference between b and a, is that this is not a position,

55:21.840 --> 55:28.560
right? Now, vectors don't inherently have a property that makes them a position or makes

55:28.640 --> 55:35.920
them a direction or makes them a quote unquote vector. But we need to interpret things, right?

55:35.920 --> 55:42.320
And that is super important to know what each vector represents, right? So if we have this

55:42.320 --> 55:48.720
vector, negative three and zero, it's more helpful to visualize it as an arrow between a and b.

55:49.600 --> 55:57.440
But the actual values is negative three and zero on the y-axis, right? So it's really important to

55:58.240 --> 56:02.560
interpret this in the correct way. And also, when you're writing code,

56:02.560 --> 56:09.360
make sure that you're actually clear about what this is, right? If you want to keep this vector

56:09.360 --> 56:16.880
for something, call it b to a, or call it the difference between something or the delta or

56:16.880 --> 56:23.520
whatever. But if you just have a vector, then you're not entirely sure, like, should we interpret

56:23.520 --> 56:29.600
this as a position? Should we interpret it as a position relative to a, which we are in this case?

56:30.720 --> 56:35.200
And so forth, right? Yeah, so this is like a very crucial concept. It's very important.

56:35.760 --> 56:41.200
Once we're getting into using different spaces. So when you're doing a lot of things in GameDive,

56:41.920 --> 56:47.040
the difference between local space, world space, and all of that stuff is really important.

56:48.000 --> 56:54.080
So you need to keep track of like, you know, if you have a vector like this on its own,

56:54.080 --> 57:01.040
this one doesn't say if this is in local space, if it's in world space, if it's relative to some

57:01.040 --> 57:06.160
other point, or like how this is used, right? So always be like very careful, like how you

57:06.880 --> 57:14.000
name your variables when it comes to this. So like the, so this is something that I hate math for.

57:14.000 --> 57:20.160
Math is so bad at this math notation, generally is really garbage, because they like, there's

57:20.160 --> 57:25.600
so much stuff that's very implicit and like notationally ambiguous. But in code, we can

57:25.600 --> 57:30.480
actually name variables, we can make functions that are very clear what they're doing. So in code,

57:30.480 --> 57:34.720
you can be very explicit. And I think that's really good, because math is unreadable sometimes.

57:36.000 --> 57:39.200
Yeah, in math, you would have things like, well, if you have V,

57:40.160 --> 57:45.440
then you need to restart document again and Photoshop. Thanks Photoshop.

57:47.280 --> 57:52.480
So sometimes you will have papers. This is an actual case, by the way, where like,

57:54.320 --> 58:02.160
V means one thing. This is bold, but then you have a non bold V, that means a different thing.

58:02.160 --> 58:08.240
And then you have a cursive V, that means something else, like, this is bad, like,

58:08.320 --> 58:15.120
don't do this. I hate it, that like math papers actually do this kind of garbage. So like,

58:15.120 --> 58:19.760
you will run into this, especially if you're like, reading shader papers or whatever,

58:19.760 --> 58:26.160
that kind of stuff is really frustrating. Yeah, so so math notation usually rely on these types

58:26.160 --> 58:33.280
of things. And it's really annoying. But in code, be explicit, be very like clear with what everything

58:33.280 --> 58:39.920
is. Have variable names that make sense and so forth, right? Yeah, and then you would have

58:39.920 --> 58:45.680
things like, Oh, if it's bold, this is a vector. But we don't draw the vector arrow, because we're

58:45.680 --> 58:50.960
just going to presume that people are know, know that this is a vector now. And if it's cursive,

58:50.960 --> 58:55.680
it's a scalar value, this is a component of the vector, whatever, it's frustrating. Anyway,

58:55.680 --> 58:59.280
stuff like this is why I don't call myself a mathematician, because I kind of hate math

58:59.280 --> 59:04.320
notation. And I also don't know much math outside of GameDive. Oh, speaking of which,

59:04.320 --> 59:10.320
if there's ever something where you are like, when is this going to be useful? Or what is the

59:10.320 --> 59:17.840
point of this? Ask, just ask. Everything I'm going to talk about is useful for game development.

59:17.840 --> 59:24.160
None of this is going to be like esoteric, unusual, just bad things, right? So don't be afraid to ask,

59:24.160 --> 59:30.160
like, when am I going to use this? Or can I order fries with trigonometry or that type of stuff,

59:30.160 --> 59:34.640
right? Just feel free to ask questions. In my experience, vector math is probably 50% of

59:34.640 --> 59:40.800
gameplay programming. Yes, pretty much. Like it's like, again, people ask me many times, like,

59:40.800 --> 59:45.360
do I need to know a lot of math to do game development? I'm just like, no, not really,

59:45.360 --> 59:51.280
you need like vector math, trigonometry, matrices help. And then you need to know how to manipulate

59:51.280 --> 59:58.400
values, like remapping ranges, doing oscillation, that kind of stuff. But usually, it's, you don't

59:58.400 --> 01:00:04.160
need that much. Anyway, I'm going to take a picture of this and send it to the students in case people

01:00:04.160 --> 01:00:09.600
want to keep this beautiful piece of art. What does orthogonal mean? That they are 90 degrees

01:00:09.600 --> 01:00:12.960
off of each other. Have you ever worked in non Euclidean geometry or altered space in

01:00:12.960 --> 01:00:18.640
any of the games that you've made? Not really. No, I guess there are like, there are matters

01:00:18.640 --> 01:00:24.400
of like, interpretation, right? I mean, if you want to call polar coordinates non Euclidean,

01:00:24.400 --> 01:00:29.360
then yes. But usually outside of that, no, I haven't done a lot of that. Mostly because I like,

01:00:29.360 --> 01:00:32.720
I don't know, it's like, seems like it might be fun, like experimentally, but I don't think I'm

01:00:32.720 --> 01:00:37.120
going to actually like, make a game out of it. But it seems like it might be fun to like, try those

01:00:37.120 --> 01:00:40.960
things.

01:00:53.280 --> 01:00:56.720
The most interesting math problem I had in Game Dev is trying to forecast the path of certain

01:00:56.720 --> 01:01:02.320
projectiles. That is a thing we're going to talk about, like ballistic trajectories for

01:01:02.400 --> 01:01:06.320
a game dev math course. This is a vector. It's like two numbers stacked together,

01:01:06.320 --> 01:01:11.200
twitch at Lawrence transform. Yeah. Yeah. Last time I did a math course on Twitch,

01:01:11.200 --> 01:01:15.760
there was someone who was like an actual mathematician. And every time I brought up a concept,

01:01:15.760 --> 01:01:22.080
they would like bring up the incredibly esoteric, like really complicated, generalized concept in

01:01:22.080 --> 01:01:29.120
math with like really complicated words. And I'm like, this is not the time. I don't even know

01:01:29.120 --> 01:01:34.560
what those things are. Jill, I'm not going to be able to explain, I don't know, lie groups and

01:01:34.560 --> 01:01:40.800
algebraic rings to students. It's amazing how people can understand esoteric concepts in math

01:01:40.800 --> 01:01:48.240
but not regular social norms kind of yet. Well, but they are separate skills. So, you know,

01:01:48.240 --> 01:01:53.440
that's how it goes. Okay, so we talked about these things, right? We talked about the sign

01:01:53.440 --> 01:01:58.960
of a value, talked about the, the length or the magnitude of a value, talked about the

01:01:58.960 --> 01:02:04.720
distance between two values. All of these concepts also generalize to 2d and any other

01:02:04.720 --> 01:02:10.000
numbers of dimensions you want to use. So it works for 2d, 3d, 45d, however many dimensions

01:02:10.000 --> 01:02:16.320
your game is in, right? Okay, so, so let's, let's, let's see what these would mean in 2d, right?

01:02:17.120 --> 01:02:25.520
So let's bring back some vector. Let's see. See we do this one, you know, drawing straight lines

01:02:25.520 --> 01:02:32.240
is one of the hardest things in art. There we go, nailed it. All right, so now we have a vector.

01:02:32.240 --> 01:02:38.800
Cool. So the components of this vector, again, we can look at the the axes here for the x and the

01:02:38.800 --> 01:02:46.480
y components. And then we can see that the x component is three. So this would be three.

01:02:48.480 --> 01:02:54.720
And the y component is two. Cool. So now we have our vector. Also didn't really

01:02:55.680 --> 01:03:00.240
want to draw all of this. All right, so now we have a two dimensional vector again,

01:03:00.240 --> 01:03:06.880
two values, one for the x axis, and one for the y axis. All right, so we talked about the,

01:03:09.200 --> 01:03:15.840
the, the sign of the, of the value, right? So if we have, if we have a negative five,

01:03:16.320 --> 01:03:25.520
for instance, the sign of this is going to be a negative one. The sign of a value like two is

01:03:25.520 --> 01:03:34.160
going to be one. So, so basically, what this kind of represents is, because again, we are on the

01:03:34.160 --> 01:03:43.920
number line, right? And we have zero somewhere. So what the sign kind of is, is that it can only

01:03:44.640 --> 01:03:51.360
be either one or negative one. So turn to think of if I should call these these unit vectors,

01:03:51.360 --> 01:03:59.280
one dimensional unit vectors, which is a little bit of a curse term. But if you talk about unit

01:03:59.280 --> 01:04:04.000
vectors, that means that you have a vector that has a length of one, and both of these have a

01:04:04.000 --> 01:04:13.280
length of one, right? So, so what this means is that the, when we do the sign of something,

01:04:13.280 --> 01:04:19.200
we get the direction, right? We get the direction for if it's, if it's going on the negative

01:04:19.200 --> 01:04:24.720
direction on the axis, or we get the direction pointing in the positive direction of this axis,

01:04:24.720 --> 01:04:31.600
right? So what, what the sign kind of what it really does is that it gives us a direction,

01:04:32.720 --> 01:04:39.280
usually direction vector. Okay, so what does that mean? In this case, well, we talked about,

01:04:39.280 --> 01:04:44.800
I mentioned unit vectors. So a unit vector is a vector that has a length of one,

01:04:44.800 --> 01:04:48.400
which both of these have, right? Even though they're one dimensional vectors,

01:04:48.400 --> 01:04:57.040
they do both have a length of one, because this distance right here is one. This distance right

01:04:57.040 --> 01:05:05.120
here is also one, right? So one way of representing something that has the same distance is usually

01:05:05.200 --> 01:05:09.200
using circles. But in one dimension, we can't really do circles. So let's go to two dimensions.

01:05:10.160 --> 01:05:17.600
So now that we have two dimensions, basically, oh God, I need to draw a circle.

01:05:20.080 --> 01:05:26.480
Drawing circles is hard. You know what? There are tools for this. Let's do a, let's cheat.

01:05:27.040 --> 01:05:35.440
There we go. What a beautiful circle. Okay, is that visible on stream or is it too faint?

01:05:35.440 --> 01:05:44.480
I think it's, it's good, right? Okay, so so all the, all the vectors that are pointing towards

01:05:44.480 --> 01:05:51.440
the boundary of the circle. So if you have a vector pointing here, then this has a length of one,

01:05:51.440 --> 01:05:58.320
right? This vector also has a length of one. If you just measure the length along this arrow,

01:05:58.320 --> 01:06:02.560
it's one. So what this means is that all the vectors that end up on the

01:06:03.440 --> 01:06:09.440
boundary of the circles are all unit vectors, right? So when we talk about unit vectors,

01:06:10.480 --> 01:06:16.000
quite often they're referred to as directions. So directions are always unit vectors.

01:06:16.320 --> 01:06:25.120
So, so if we want to know the direction of this one, all we were doing is that we're kind of

01:06:25.120 --> 01:06:33.120
making it the length of one. So, so this vector right here is the direction of this vector,

01:06:33.120 --> 01:06:39.040
right? And what, what this is called the process of making a vector the length of one is called

01:06:39.040 --> 01:06:46.080
normalization. So normalization.

01:06:49.600 --> 01:06:55.360
Eyes were inconsistent. There we go. So the process of making a vector normalized or the

01:06:55.360 --> 01:07:01.920
length of one is normalization. So this vector right here is the normalized version of this

01:07:01.920 --> 01:07:09.600
vector. And this concept is also very important. Like this is super, super useful in so many

01:07:09.600 --> 01:07:14.320
different ways. Yeah, this is, this is like ubiquitous whenever you're dealing with,

01:07:15.680 --> 01:07:20.560
you know, dealing with vector math in terms of positions of objects, the relation to each other,

01:07:21.120 --> 01:07:28.960
the direction to some other objects and so forth, right? All right, so let's erase this confusing

01:07:28.960 --> 01:07:37.440
arrow. So, so this is a normalized vector, right? So, so that is the direction, right?

01:07:37.440 --> 01:07:45.280
In one dimension, the vector could only have two states, right? It could either be negative one,

01:07:45.280 --> 01:07:51.360
or it could be one, right? These are the only two states that are valid for a normalized one

01:07:51.360 --> 01:07:57.040
dimensional vector, right? But for a two dimensional vector, we have an infinite number of points,

01:07:57.040 --> 01:08:04.960
right? This circle can can fit so many points, the slaps roof of circle, there's something.

01:08:05.600 --> 01:08:11.360
So like any of these vectors would be a normalized vector and all of them have a length of one,

01:08:11.360 --> 01:08:16.880
right? Yeah, so so normalized vectors means that it has a length of one, that that's kind of it.

01:08:17.600 --> 01:08:22.000
So when you talk about normalizing vectors, so let's say this whole vector is called V.

01:08:22.000 --> 01:08:28.640
If you want to normalize it and math notation, you will usually see it with two vertical bars

01:08:28.640 --> 01:08:36.560
like this. So this usually means the, well, actually, this could be the length of it. Sorry,

01:08:36.560 --> 01:08:42.480
if you have V, and then a little hat on top of it, this is a normalized vector. If you have bars on

01:08:42.480 --> 01:08:47.200
the side, that's usually the length of it. Sometimes you'll see two bars on the side because

01:08:47.200 --> 01:08:54.720
nothing is consistent and everything is garbage. But yeah, so usually, this would be the direction

01:08:56.160 --> 01:09:03.040
and this would be the length or magnitude, same word. All right, so this is just the math

01:09:03.040 --> 01:09:08.160
notation garbage. I'm pretty sure this is correct. I don't, I feel like I have to relearn it every

01:09:08.160 --> 01:09:14.960
time I read a math paper. So so we might wonder like how do you get a normalized vector, right?

01:09:15.920 --> 01:09:22.800
How do you go from V to the normalized version of V or the direction of V? Kind of use those

01:09:22.800 --> 01:09:29.760
like interchangeably, right? So this little vector down here would be the normalized version of V

01:09:29.760 --> 01:09:36.480
with a little hat on top. But basically the direction of V. Okay, so we're going to talk

01:09:36.480 --> 01:09:43.600
about how to normalize a vector. So I didn't quite get the normalization. So basically,

01:09:43.600 --> 01:09:50.240
if you have any vector, pick up any points on over here, then you're just going to be a line

01:09:50.240 --> 01:09:57.200
from zero, right? And if you want to normalize this vector, what that means is that you make

01:09:57.200 --> 01:10:02.480
the length of one. So what you get out of it is a vector pointing in the same direction,

01:10:02.480 --> 01:10:07.760
but it's got a length of one, right? So it used to be this old vector. But if you normalize it,

01:10:07.760 --> 01:10:14.560
it's going to shrink down into a length of one. Or if you pick a vector that is that is a length

01:10:14.560 --> 01:10:20.320
that's smaller than one, this vector is going to normalize into being longer all the way out here.

01:10:21.040 --> 01:10:28.880
So so basically, you can sort of consider it to be a way from going from a point to an arrow that

01:10:28.880 --> 01:10:35.360
represents the direction to that point. Yeah, when do you usually need to normalize a vector?

01:10:35.440 --> 01:10:43.440
So the concept of a direction is really important. So so say you have say you have an object that is

01:10:43.440 --> 01:10:50.000
over here. Let's say maybe this is an enemy, like at this location. And then you want to know that

01:10:50.000 --> 01:10:55.360
maybe the player is at zero. And you want to know what is the direction that you need to move in

01:10:55.360 --> 01:11:00.960
order to move towards the enemy. So if you are dealing with like physics or something, and you

01:11:00.960 --> 01:11:09.200
want to add the vector to move toward the enemy, then usually you want to move at it like a fixed

01:11:09.200 --> 01:11:16.960
rate in terms of speed, right? So what you usually do then is you normalize the vector between the

01:11:16.960 --> 01:11:22.240
player and the enemy. And then you have a normalized vector, which again, that's a direction usually

01:11:22.240 --> 01:11:29.840
in terms of terminology. And then once you have a normalized vector, if you multiply that by

01:11:29.920 --> 01:11:34.800
your speed, or some value that represents how much you want to move in that direction,

01:11:34.800 --> 01:11:39.840
you can guarantee that that's going to be in, you know, meters per second, or that that distance

01:11:39.840 --> 01:11:46.480
is going to be in meters, because the length is one, right? So that means that you get consistent

01:11:46.480 --> 01:11:52.160
movement in in space. And what's the difference between you do is normalize method and normalized.

01:11:52.880 --> 01:12:00.880
Yeah, the dot normalize will modify the original one, whereas the other one returns a vector.

01:12:01.600 --> 01:12:08.560
Okay, did that make sense? So basically, pick any point normalizing it means you get the direction

01:12:08.560 --> 01:12:14.560
to that point. And a direction in this case, I'm using the word direction to be interchangeable

01:12:14.560 --> 01:12:20.240
with a vector with a length of one, right? But it's still pointing towards that point, right?

01:12:20.960 --> 01:12:26.160
Like I mentioned before, one of one of the powers, the powerful things about having normalized

01:12:26.160 --> 01:12:35.440
vectors is that, let's see if I can undo a bunch of things. So so if you have a direction like this,

01:12:36.480 --> 01:12:42.880
you can multiply a vector with a scalar as in a a single value. So if you have a vector, again,

01:12:43.840 --> 01:12:49.360
usually when people say vector that mean multiple components rather than one. But if you have a

01:12:49.360 --> 01:12:56.320
two dimensional vector, you can multiply that by two, for instance, or like some some number.

01:12:57.200 --> 01:13:02.880
But if you have the normalized vector, so let's say we have our our vector that's normalized,

01:13:02.880 --> 01:13:11.760
it's the same thing as this one. And then we we multiply that by a value of two, let's pick two.

01:13:11.760 --> 01:13:18.800
What that means is that the new vector we are getting out of this, that is going to be

01:13:19.680 --> 01:13:29.200
the direction along V right here. But the length of it is going to be two. So this is kind of what

01:13:29.200 --> 01:13:35.120
is absolutely like extremely useful about normalized vectors. Because if you want to move

01:13:35.200 --> 01:13:43.120
like you like two units towards something, then having a normalized vector means that you can get

01:13:43.120 --> 01:13:49.920
a position that's exactly like some number away from some point. So if you normalize a vector

01:13:49.920 --> 01:13:55.920
multiplied by a distance, then you're going to make the length of that vector the value you're

01:13:55.920 --> 01:14:02.800
multiplying it with. And it might seem like that's not that's kind of trivial. But that's not the case

01:14:02.800 --> 01:14:09.440
with this vector, right? If you multiply this by two, then at the length of it is going to be

01:14:09.440 --> 01:14:15.920
like all the way over here, right? So the length of this is definitely not two, right? It's way

01:14:15.920 --> 01:14:22.640
longer. So so this is why normalized vectors are extremely useful. Because of the fact that the

01:14:22.640 --> 01:14:29.440
length is one, if we multiply it by some scalar, the length is going to be that scalar, right?

01:14:29.440 --> 01:14:36.880
Yeah. So that's something that's useful when it comes to this. So like I mentioned before,

01:14:36.880 --> 01:14:42.400
it's useful in physics, for instance. So if you have the normalized vector, then if you want to

01:14:42.400 --> 01:14:49.360
move something along this vector, then well, what you can do then is that you could have a time

01:14:50.400 --> 01:14:58.080
multiplied by your speed, for instance. So time multiplied by speed. So now we're just

01:14:58.080 --> 01:15:03.440
multiplying all of these together. So what that means that if time is a value that is ticking

01:15:03.440 --> 01:15:08.320
in seconds, when you start the game, time goes from zero to whatever the current second is,

01:15:09.520 --> 01:15:14.960
then you're going to have an object that moves along this vector at the speed you give here.

01:15:15.680 --> 01:15:20.560
We're going to go into more physics stuff later. But so this is just one of the really,

01:15:20.560 --> 01:15:24.880
really powerful things about having normalized vectors, right? Can you show an example in Unity?

01:15:24.880 --> 01:15:31.600
Yeah, sure. Do people want to see examples of this? Show examples in Unreal? Nope. I think showing

01:15:31.600 --> 01:15:35.440
it in practice is really, really good because you're going to work in Unity. So why not?

01:15:36.480 --> 01:15:46.400
All right, let's nuke some objects. There we go. Let's go 2D because we're not into 3D yet.

01:15:46.400 --> 01:16:00.000
That's great. Will the game crash if it runs for more seconds than the float 32-bit limit?

01:16:00.000 --> 01:16:04.960
You're going to have to run the game a very long time. It's not going to crash. It's just

01:16:04.960 --> 01:16:09.120
that your equations are going to get a hitch and a weird thing that's going to happen once it goes

01:16:09.120 --> 01:16:15.200
over the limit. I don't think it's going to crash. You're just going to have very weird behavior

01:16:15.200 --> 01:16:21.760
as soon as you hit that point. Okay, let's see.

01:16:31.440 --> 01:16:32.480
All right.

01:16:36.480 --> 01:16:40.480
I probably should have done code examples earlier actually because, again, I like keeping things

01:16:40.480 --> 01:16:50.000
very pragmatic and practical. Okay, let's just do some of the things we've done here,

01:16:50.000 --> 01:16:56.160
just to show how it works. I usually really like using onDragismos because you can see it in the

01:16:56.160 --> 01:17:02.000
editor. You can very easily draw lines and whatnot. So onDragismos is a special function

01:17:02.000 --> 01:17:07.200
in Unity that is called in the editor, and you could optionally enable it in the game view as

01:17:07.200 --> 01:17:13.680
well, where you can draw lines and whatever. So you can do stuff like gismos, draw line,

01:17:13.680 --> 01:17:18.560
and then you can supply some positions, right? So we do

01:17:22.000 --> 01:17:29.920
something like that. Then we go back to Unity. We now draw a beautiful tiny little white line,

01:17:29.920 --> 01:17:37.120
right? Cool. Oh, wow. I wonder if there's a vector

01:17:37.200 --> 01:17:50.720
graphics package you can get. Okay, so draw line, just a very simple one. But we probably want to

01:17:50.720 --> 01:17:57.200
be able to supply some other points. I do have to wrap onDragismos and if Unity Editor. I'm pretty

01:17:57.200 --> 01:18:02.320
sure that's going to get stripped for our builds, but I could be wrong. Sometimes you use methods in

01:18:02.400 --> 01:18:07.840
there that are only in the editor namespaces and whatnot. But if you use handles, for instance,

01:18:07.840 --> 01:18:12.080
but gismos, it ignores that, I'm pretty sure. Yeah, I'm pretty sure you don't need to strip it.

01:18:12.080 --> 01:18:18.320
It's not going to, maybe the code in here will be part of the assembly. I'm not sure,

01:18:18.320 --> 01:18:21.680
but at the very least, it's not going to get called regardless.

01:18:22.240 --> 01:18:32.720
Okay. All right, so we probably want to be able to pass a vector into this or a

01:18:32.720 --> 01:18:39.920
point or whatever, right? So instead of just hard coding in here, we can add a property.

01:18:39.920 --> 01:18:43.920
Or in my case, I'm just going to pass in a transform because it's easier to move it around.

01:18:44.800 --> 01:18:51.280
Let's call it point transform. Let's make a new game object.

01:18:53.920 --> 01:18:57.440
Actually, because since we're drawing all of this in world space, we can just use this transform.

01:19:04.240 --> 01:19:06.960
All right, let's pass point into there.

01:19:07.440 --> 01:19:18.560
All right. So now we were drawing a line between zero and this transform, right?

01:19:19.280 --> 01:19:23.600
So now we're basically just taking the position of this transform and we're drawing a line to it,

01:19:23.600 --> 01:19:29.440
right? So again, we can think of this as the two normal lines we had where this is the origin,

01:19:29.440 --> 01:19:32.080
and then we have the x-axis and the y-axis right here.

01:19:32.800 --> 01:19:38.000
Oh, you couldn't hear the discord?

01:19:40.880 --> 01:19:43.280
You should have been. It might have been a lower volume.

01:19:46.320 --> 01:19:52.640
All right. So now we have the points, right? So now let's say we want to get the direction

01:19:52.640 --> 01:19:58.480
to this point because we have been talking a lot about directions, right? So let's get that.

01:19:58.560 --> 01:20:05.520
So direction to points. So in this case, because it's originating from zero,

01:20:05.520 --> 01:20:12.480
and we just want the direction to this arrow, then all we need to do is normalize that point,

01:20:12.480 --> 01:20:17.040
right? And Unity has a bunch of built-in functions. You can do point dot normalized,

01:20:17.920 --> 01:20:20.800
and that's going to return a normalized version of this point, right?

01:20:21.360 --> 01:20:29.200
So, yeah. So now we have the direction to the point. And again, I'm using the word direction to

01:20:29.200 --> 01:20:35.600
mean a vector of length one, which is sometimes also called unit vector, normalized vector.

01:20:35.600 --> 01:20:41.440
Like it has a bunch of terms, but usually when I use the word direction, I mean a normalized vector,

01:20:41.440 --> 01:20:47.920
just to clarify. Okay. So if we draw that instead, and then go back to Unity,

01:20:48.880 --> 01:20:56.480
now this line always has a length of one, right? It doesn't matter how far away the transform is,

01:20:56.480 --> 01:21:02.240
but the length of it is also one, even if it's shorter or longer, it's going to normalize it to

01:21:02.240 --> 01:21:09.040
always be unit length. So now it's sort of tracing the outline of what's called the unit circle.

01:21:09.760 --> 01:21:15.600
So the unit circle is just all the points of the vectors that have a length of one. So it's

01:21:15.680 --> 01:21:20.960
this circle right here, right? So now we have a direction, right? What have you said that transformed

01:21:20.960 --> 01:21:27.920
to zero? So probably now it gets very sad because the, I'm pretty sure normalized, it looks like

01:21:27.920 --> 01:21:32.880
it's just returning a zero vector. So now that the quote-unquote direction that this returns is

01:21:32.880 --> 01:21:40.640
going to be zero. So it's trying to draw a point from, or a line from zero to zero. So speaking

01:21:40.640 --> 01:21:48.960
about that, this is a very good case where when you have something like this, this is actually

01:21:48.960 --> 01:21:53.440
division by zero, like technically, we're going to get into how to calculate the length or how

01:21:53.440 --> 01:21:59.920
to calculate the normalized vector it's later. But this is actually division by zero. And something

01:21:59.920 --> 01:22:07.360
that is kind of beautiful in mathematics is that anytime you are dividing by zero, I think this

01:22:07.360 --> 01:22:15.280
is like so mind-blowing, but like every time you're dividing by zero in some equation, that is kind

01:22:15.280 --> 01:22:22.640
of the math talking back to you, saying that like, hey, this is a weird case, you need to handle this

01:22:22.640 --> 01:22:29.040
case, something is happening here, and you need to think about what do you actually want to happen

01:22:29.040 --> 01:22:36.560
in this case? Because it's kind of telling you that there is a degenerate case or a case that

01:22:36.640 --> 01:22:43.680
you cannot calculate, because division by zero is undefined. So whenever you have an equation

01:22:43.680 --> 01:22:51.040
where there is a divide line, think about if the denominator can ever be zero. If it can be zero,

01:22:51.600 --> 01:22:58.560
figure out what that means, right? Like when would this be zero? Anyway, okay, so now we're

01:22:58.560 --> 01:23:03.840
just drawing the normalized version of this vector. Do you have a course that you don't need? No, but

01:23:03.840 --> 01:23:12.320
I have my YouTube channel, which is free, so you don't have to be afraid. Right, cool. Okay, so let's

01:23:12.320 --> 01:23:17.280
talk about the length, because we've sort of mentioned the length a lot when it comes to

01:23:17.280 --> 01:23:20.880
normalizing things. We probably should have talked about length before normalization, but you know

01:23:20.880 --> 01:23:26.240
what, that's okay. All right, so let's talk about length. How do you get the length of the vector,

01:23:26.240 --> 01:23:30.880
right? I might be skipping ahead, but when you say the vector two dot normalized divides by zero,

01:23:30.880 --> 01:23:35.920
where does it do that? You're sort of skipping ahead, I'll get to that. But technically,

01:23:36.560 --> 01:23:41.200
unity's vector two dot normalized handles that case and just returns a zero vector,

01:23:41.200 --> 01:23:47.440
instead of, you know, crapping out and not knowing what to do. You could sort of make a

01:23:47.440 --> 01:23:55.120
normalized function that just throws an exception, which might be useful. But unity's normalized

01:23:55.120 --> 01:24:00.720
just kind of just returns a zero vector. Oh, a zero vector is just a vector with components at zero.

01:24:00.720 --> 01:24:08.160
So all of the components are zero, sometimes called a zero vector. Yeah, okay. So we talked

01:24:08.160 --> 01:24:13.440
about normalization, but not how to calculate it, like how do you normalize the vector? Like,

01:24:13.440 --> 01:24:18.400
how do you go from this to whatever the heck these coordinates are, right?

01:24:20.800 --> 01:24:26.640
All right, so if there is, I don't know if we should use this vector, let's do another vector.

01:24:26.880 --> 01:24:28.800
Let's do this one.

01:24:34.560 --> 01:24:40.400
What a vector, it's a little curved, but pretend it's not. All right, so let's see, what is this,

01:24:41.120 --> 01:24:48.720
what is this vector? So we have x coordinate, we have negative two, y coordinate, we have three,

01:24:48.720 --> 01:24:56.240
right? So this is our vector. So now I want to know the length of this, like how do we do that?

01:24:57.200 --> 01:25:05.760
So now this is going to get into the hacking Pythagorean theorem, right? Because if you think

01:25:05.760 --> 01:25:11.520
about it, if you want to get the length of this, you can sort of imagine a triangle here. And this

01:25:11.520 --> 01:25:17.440
is a right angle triangle. And this is something that is taught in math class. So if you remember

01:25:17.440 --> 01:25:23.520
how to get the length of the hypotenuse, then you know how to get the length of a vector, right?

01:25:24.400 --> 01:25:32.800
So so basically what we need to do then is we take the x component, square that,

01:25:34.320 --> 01:25:43.840
and then we add the y component and square that. And then we take the square root of all of this.

01:25:44.480 --> 01:25:49.680
There we go. That's the Pythagorean theorem. That's how you get the the hypotenuse of a right

01:25:49.680 --> 01:25:54.720
angle triangle, right? But this is this is how you get the length of a vector, right? Is that

01:25:54.720 --> 01:25:58.960
clear by the way? We haven't talked about like exponents or what it means for something to be

01:25:58.960 --> 01:26:02.720
squared or talked about square roots, but I'm guessing we don't need to talk about that or

01:26:03.920 --> 01:26:07.840
but if not, let me know we can talk about it. Okay, so so this is basically how you get the

01:26:07.840 --> 01:26:13.120
length of a vector. All right, that's it, I think. So now we've been talking about we talked about

01:26:13.120 --> 01:26:19.200
for one dimensional numbers, and we had abs instead of something else. But the generalized

01:26:19.200 --> 01:26:27.040
concepts, you usually write it like this for any other vectors, you can add more components inside

01:26:27.040 --> 01:26:33.360
of the square root, you can add, you know, z q or z squared, and then you have the length of a

01:26:33.360 --> 01:26:38.480
three dimensional vector. So, so it's the same thing, like regardless of how many dimensions

01:26:38.480 --> 01:26:44.560
we have, right? And this actually holds even for one dimensional vector. So, you know, we talked

01:26:44.560 --> 01:26:50.000
about one dimensional vectors, where you can use the abs function, which is basically just if it's

01:26:50.000 --> 01:26:56.400
negative, make it positive. But you can do this for one dimensional vectors too. So if you have

01:26:56.400 --> 01:27:03.200
the square root, and let's say we have the the the one component of negative five, for instance.

01:27:04.080 --> 01:27:14.320
So, all right, so let's just do the equation for that, right? We do the square root of five

01:27:14.320 --> 01:27:23.360
squared. So that's five, five times five, right? Which is 25, I think, I don't know, pretty sure.

01:27:23.360 --> 01:27:30.720
So that's 25, right? Oh, actually, sorry, not five times five, a negative five times negative five.

01:27:31.600 --> 01:27:37.520
If you multiply two negative numbers, then it's going to be positive in the end, because the

01:27:37.520 --> 01:27:45.040
sign sort of cancel out, right? So we get positive 25. And then when we do the square root of that,

01:27:46.240 --> 01:27:52.240
by convention, square roots technically have two results, but we're not going to get into that.

01:27:52.240 --> 01:27:59.920
So technically, this then returns five, because the square root of 25 is five, the equal sign

01:27:59.920 --> 01:28:07.680
is incorrect. Yes, because this is the length of that, sorry, length of negative five, then just

01:28:07.680 --> 01:28:15.840
ends up being five, because that's what the square root then returns, right? So yeah. So it's just

01:28:15.840 --> 01:28:21.360
kind of like the same equation works for any vectors. Now in practice, when you want to get the

01:28:21.360 --> 01:28:26.960
length of, you know, want to get the length of a weight, are you getting notification sounds?

01:28:26.960 --> 01:28:31.520
I think I'm just getting it locally. So so when you want to get the length of a vector for one

01:28:31.520 --> 01:28:36.720
dimensional vectors or just scalar values, usually use abs, you don't actually do the

01:28:36.720 --> 01:28:41.920
full equation. But for anything, like any dimensions about that, you generally use the

01:28:41.920 --> 01:28:46.080
Pythagorean theorem. Okay. So this works for for two dimensional vectors too.

01:28:48.160 --> 01:28:54.720
Oh, actually didn't. Sorry, legs. You know, I actually have a cold right now. So this is like

01:28:54.720 --> 01:29:02.400
canonically kind of more accurate, but sorry. Sometimes my backwards writing doesn't work.

01:29:03.840 --> 01:29:09.440
Okay, cool. So now we have that, right? Now we can actually do that math. So

01:29:10.080 --> 01:29:14.720
so if we want to get the length of this one, we can just just do that, right? So that's negative

01:29:14.720 --> 01:29:23.680
two times negative two, plus three times three. And then we do the square root of that.

01:29:26.640 --> 01:29:32.800
This is not a good looking square. Where's my good color? There we go. So then we can just run

01:29:32.800 --> 01:29:38.960
these numbers, right? So all right, we do square negative two times negative two, pretty sure that's

01:29:38.960 --> 01:29:46.400
four. So it's going to be four plus three times three, that would be nine. So four plus nine,

01:29:48.640 --> 01:29:57.440
which is, oh, God, that's 13, I think. Look, again, I'm really bad at doing math in my head.

01:29:57.440 --> 01:30:03.600
Pretty sure that's 13. All right, so it's no longer really tied to the x or y axis. I guess

01:30:03.600 --> 01:30:12.560
we can make it blue or something. So that becomes 13. And then we want to calculate that. So that's

01:30:12.560 --> 01:30:20.000
when you pull out the calculator. And you type 13, and then you do the square root of that. And it

01:30:20.000 --> 01:30:30.640
turns out it's 3.6 something, right? So this is approximately equal to 3.6. Sorry, maybe we will

01:30:30.640 --> 01:30:37.600
do it in blue. Why not? Cool. So that's how you get the length. So now what this value represents

01:30:38.720 --> 01:30:48.560
is the length of this right here, right? The full length of this vector turns out to be

01:30:49.360 --> 01:30:56.960
3.6 something something, right? So now we know the length of it, right? Cool. That's how we do it.

01:30:56.960 --> 01:31:02.320
If you want to get the, like, if you want to do this in practice, you almost never write this

01:31:02.320 --> 01:31:07.680
formula yourself. And so if you go to Unity, if you want to get the length of the points or the

01:31:07.680 --> 01:31:15.520
vector, again, length is a scalar, it's just a single value. So the length of this one would be

01:31:15.520 --> 01:31:19.680
point dot magnitude, because again, magnitude and length, same thing.

01:31:19.840 --> 01:31:26.560
Yeah. So this is how you get the length. Sometimes it can be useful to calculate the

01:31:26.560 --> 01:31:34.480
length manually, because sometimes you want both the length and the normalized vector,

01:31:34.480 --> 01:31:40.000
and in that case, calculating things manually can be really useful. Cool. Everything clear so far.

01:31:40.720 --> 01:31:45.840
How to get the length of a vector. So now we've just talked about how to get the length,

01:31:45.840 --> 01:31:50.720
but not how to get the direction or sign and not how to get the distance. Okay, let's do the

01:31:50.720 --> 01:31:58.560
distance. So the distance, now that we know how to get the length of something. Now, if we get the

01:31:59.520 --> 01:32:05.920
difference vector or the displacement between two vectors, let's say we want to get this vector

01:32:05.920 --> 01:32:14.880
between these two right here, then this vector, this would be, we don't have names for these,

01:32:14.960 --> 01:32:24.160
let's call it A and V, there we go. So in this case, this vector right here would be A minus V,

01:32:26.000 --> 01:32:35.360
A minus V. So now we have the difference between these two points. So if we want to get the length

01:32:35.360 --> 01:32:41.040
or the distance between these two vectors, all we need to do is get the length of this vector,

01:32:41.840 --> 01:32:47.120
because if we know how to get the length of this, then we now know the distance between

01:32:47.120 --> 01:32:52.480
these two points. And in this case, it also doesn't actually matter if we do V minus A or

01:32:52.480 --> 01:32:58.320
A minus V, because if we're just interested in the distance, the distance is always positive,

01:32:58.320 --> 01:33:03.200
so it doesn't matter which order we do this in. So if you want to get the distance between

01:33:04.000 --> 01:33:09.600
two points, previously we did the absolute value because that's how we did the distance in

01:33:10.320 --> 01:33:17.120
one dimension. Actually, we didn't, we never call it length. Anyway, so this is how you do the length,

01:33:17.120 --> 01:33:20.480
so we can basically just replace this by calling it length instead, right?

01:33:31.600 --> 01:33:36.160
So now we have the, now we can get the length of this one, and the way to get the length

01:33:36.480 --> 01:33:40.560
is this one right here, right? There we go.

01:33:44.640 --> 01:33:53.840
Cool. All right, so basically, this is how you get the length. If you want to get the

01:33:55.760 --> 01:34:02.320
distance between two points, then you subtract the points, one subtracted by the other,

01:34:02.320 --> 01:34:05.600
and then you get the length of that vector, and then you get a distance.

01:34:06.880 --> 01:34:11.520
So there is a slight difference in terms of interpretation between distance and length.

01:34:11.520 --> 01:34:18.640
As a distance, usually is between two points, and length is usually the length of one point,

01:34:18.640 --> 01:34:24.240
or the length of the vector that represents that one point. So when we want to get the

01:34:24.240 --> 01:34:29.280
distance between this point and this point, we first subtract them from each other to get

01:34:29.280 --> 01:34:33.840
the difference vector, and then we check the length of that difference vector. All right, so now

01:34:34.800 --> 01:34:40.160
we have a way of getting the length, we have a way of getting the distance,

01:34:40.160 --> 01:34:43.920
have we clarified that the resulting blue vector is still centered on the origin?

01:34:43.920 --> 01:34:50.160
We talked about that, yeah, like vectors don't have a root and a tip, it's only the vector data

01:34:50.160 --> 01:34:55.200
itself, right? So we talked about that when we talked about subtraction, that if you want to

01:34:55.280 --> 01:35:00.160
draw it at its origin, it would be this vector, right? Length, magnitude is of the vector,

01:35:00.160 --> 01:35:03.760
distance is between two vectors, generally, yeah. So when you talk about distance,

01:35:03.760 --> 01:35:10.640
that's a special case where you want to know how long is the vector that is the displacement

01:35:10.640 --> 01:35:16.400
between these two points, basically. So when you talk about distance, again, distance has an input

01:35:16.400 --> 01:35:22.400
of two points usually, and then you get the difference of those two points and get the

01:35:22.400 --> 01:35:28.240
length of that. If you want to know the length of something, it's just one input, right? So that's

01:35:28.240 --> 01:35:34.480
just the length of one vector. Yeah, of course, there are built-in helpers for this, you don't

01:35:34.480 --> 01:35:39.360
have to do it manually. So if you want to know the distance between two points, you can use vector

01:35:39.360 --> 01:35:46.240
two dot distance from A to B, or DB null, I guess. So this would give you the distance,

01:35:47.040 --> 01:35:49.920
but you can do it the other way around, too. You could do

01:35:53.120 --> 01:35:57.680
A minus B dot magnitude, for instance. This would also give you the distance,

01:35:57.680 --> 01:36:03.440
it's the same thing, right? Or you could do the manual way, if you want to,

01:36:04.400 --> 01:36:13.440
of doing A minus B, like A dot X minus B dot X, and then you square that,

01:36:14.640 --> 01:36:17.520
and then you add the same thing, but for the white component,

01:36:18.960 --> 01:36:26.960
and then you do the square root of all of that. So this is the same thing. This is also a way you

01:36:27.040 --> 01:36:33.840
can get the magnitude, or the distance between two points, right? Yeah, just different levels

01:36:33.840 --> 01:36:46.480
of abstraction, I guess. How to apply it in practice? Well, we could make two points.

01:36:57.040 --> 01:37:08.080
All right, let's make A green, B red.

01:37:12.320 --> 01:37:17.360
Now we have two points, right? What a good pair of points.

01:37:21.920 --> 01:37:25.680
Okay, let's say you want to know the distance between these two, right? First,

01:37:25.680 --> 01:37:29.760
we need the actual points, because we only have transforms here. So it would be, oh, I need to

01:37:29.760 --> 01:37:37.840
probably assign them in the inspector. Dude, there we go. So now we have, let's say we just

01:37:37.840 --> 01:37:42.800
just call them A, so that's going to be A, transform dot position, then we do the same thing for

01:37:43.680 --> 01:37:48.960
B. So now we have the two points, A and B, and again, we can draw lines to make sure that this

01:37:48.960 --> 01:37:57.360
is working. Right, I'm not using my library. Gizmos, draw line from A to B. There we go,

01:37:57.360 --> 01:38:02.320
cool. So now there should be a line between these two points, so we can move them around. We now have,

01:38:02.320 --> 01:38:07.520
yeah, what a good line, right? But we want to know the distance of that. So if we want to know

01:38:07.520 --> 01:38:17.440
the distance, I guess we can print it in the inspector or something. So if we want to know

01:38:17.440 --> 01:38:23.680
the distance, then again, we can use everything we typed here, right? So we can do vector two dot

01:38:23.680 --> 01:38:31.040
distance. And now we should set this value right here. It might be hard to see it in the inspector,

01:38:31.760 --> 01:38:39.360
but there's a little value there. There's updating. Now it's 0.45. Now it's 1.9 and so far. So now we

01:38:39.360 --> 01:38:46.400
actually have the distance right there. Yeah, so that's how you use it in practice. And again,

01:38:47.040 --> 01:38:51.760
the distance value is going to be exactly the same thing if we do A minus V dot magnitude.

01:38:51.760 --> 01:38:58.160
So we can compile this. It's going to work. And yeah, still have the same distance. Any other

01:38:58.160 --> 01:39:05.840
questions before lunch? Any thoughts? How to make a game like Angry Birds? I can't answer that. That's

01:39:05.840 --> 01:39:12.400
a very long question and a whole production pipeline. Start doing things. That's how we make

01:39:12.400 --> 01:39:16.400
games. Generally speaking, no one's going to get mad at you for doing A minus V dot magnitude

01:39:16.400 --> 01:39:21.840
instead of vector two dot distance. I don't think so. I mean, the first one might be slightly more

01:39:21.840 --> 01:39:27.680
esoteric because you sort of need to know the underlying math for that to be readable. But I

01:39:27.680 --> 01:39:33.440
think the, I mean, most people should know about that. It's a very important concept. Like vector

01:39:33.440 --> 01:39:38.720
two dot distance, the nice thing about using that one is that you're being very explicit that you

01:39:38.720 --> 01:39:44.080
literally want the distance between two points. If you use the A minus V dot magnitude, it's a

01:39:44.080 --> 01:39:49.040
little unclear, like you get the length of the difference between these two. But like, are we

01:39:49.040 --> 01:39:54.240
going to, is that interpreted as a distance? Maybe these aren't points. Maybe this is something else.

01:39:54.240 --> 01:39:58.240
So, you know, sometimes it's useful to like use the one that literally says distance,

01:39:58.960 --> 01:40:05.040
because it's very clear that you kind of want a distance, right? And conversely, if you don't want,

01:40:05.040 --> 01:40:10.560
if you want to do the same math as this, but it's not a distance value, then using vector two dot

01:40:10.560 --> 01:40:14.800
distance is likely going to be more confusing than useful, right? So it kind of depends on the

01:40:14.800 --> 01:40:22.400
context. I personally really like doing, like being explicit and clear with my code. Hugo,

01:40:22.400 --> 01:40:32.080
you're spoiling it. I haven't gotten to that yet. But yeah, actually, let's use, let's use, we can

01:40:32.080 --> 01:40:37.120
just talk about that. But that's the last thing before lunch. Okay, so we talked about the,

01:40:38.480 --> 01:40:44.880
we have this line right here, right? The, the one that's pointing in the direction of the,

01:40:45.680 --> 01:40:51.520
this transform, right? So what this one is that is the normalized version of that point,

01:40:51.520 --> 01:40:57.920
like this is, this is the only thing we've done there. So, so the way to calculate a normalized

01:40:57.920 --> 01:41:05.200
point. So instead of just doing dot normalized, we can do the point, and then we divide it by the

01:41:05.200 --> 01:41:13.360
length of that point, right? So point dot magnitude. So this is how you normalize a vector. So by

01:41:13.360 --> 01:41:22.720
dividing it by the length, the, the length becomes one, right? Yeah. So, so that's how you normalize

01:41:22.720 --> 01:41:28.320
a vector. I previously talked about the fact that there was a degenerate case, where you're

01:41:28.320 --> 01:41:35.600
dividing by zero. And if you look at this equation, you can probably tell what the, what the degenerate

01:41:35.600 --> 01:41:43.600
case is, right? Because point stop magnitude can be zero. So what that means is that point is at zero.

01:41:44.400 --> 01:41:51.920
So if you have a point that's at zero, and your goal is that you want to get the direction

01:41:51.920 --> 01:41:59.840
that this point has from the origin. But if the magnitude is zero, then you're dividing by zero.

01:41:59.840 --> 01:42:05.280
So now, again, math is telling you that something is messed up, and you need to think about what you

01:42:05.280 --> 01:42:11.600
actually want to do here. So what this means is that you're trying to figure out a direction

01:42:12.240 --> 01:42:17.600
of a vector that doesn't have a direction, it's zero, it doesn't point anywhere, right?

01:42:18.560 --> 01:42:24.640
So, so usually in these cases, you need to figure out, okay, what do I do to handle this

01:42:24.640 --> 01:42:31.040
special case? If it's at zero, do we want to fall back to just using zero? Do we want to check if

01:42:31.040 --> 01:42:36.480
the length is zero and then not draw it or not execute some piece of code? Usually it's, it's

01:42:36.480 --> 01:42:43.760
really like, every time you see a division operator, really useful to think about if the

01:42:43.840 --> 01:42:49.600
denominator can ever be zero, if it can, then that means that you have an interesting case to solve.

01:42:51.200 --> 01:42:56.720
Yeah. All right, I think that's it for lunch. Yeah, we're going to talk about the square

01:42:56.720 --> 01:43:04.640
magnitude stuff that you're talking about in the, like after the break. And yes, doing square

01:43:04.640 --> 01:43:11.680
magnitude is faster. Yes. I think there are some intricacies of like, the property call itself has

01:43:11.680 --> 01:43:16.800
some weird overhead. But if you manually do the square magnitude, it's like way faster than

01:43:16.800 --> 01:43:22.640
actually doing magnitude. So I've heard. But that's not for mathematical reasons. That's for silly

01:43:22.640 --> 01:43:28.320
overhead reasons. Actually, we should do a, we should do a lunch break. Okay, I'm just,

01:43:28.320 --> 01:43:34.400
there's no audio in the lunch break room. So, so yeah, I'm just going to place an image here.

01:43:34.400 --> 01:43:40.640
See you soon. See you after lunch. Look at that little boy sleeping in the goblet. These are

01:43:40.640 --> 01:43:48.240
peaceful little cat now. Where were we? Oh, we just covered how to actually normalize vectors,

01:43:48.240 --> 01:43:53.840
how to do that, right? Not just in terms of what it is, how to do it using Unity's helper,

01:43:53.840 --> 01:44:01.200
but how to actually do it yourself, right? Okay. What's the state of things?

01:44:01.760 --> 01:44:15.840
So we have our code and we were just showing directions, right? Okay. All right. So, so here's,

01:44:15.840 --> 01:44:22.720
here's a short little exercise that we can think about together. So, so for instance,

01:44:22.720 --> 01:44:27.040
now we have these two points, right? Previously, when we looked at direction here,

01:44:28.000 --> 01:44:33.200
this is the direction of the point itself in world space, right? Like this one is,

01:44:34.240 --> 01:44:40.080
it's just a line drawn from zero in the world, and then out to one distance away from the center

01:44:40.080 --> 01:44:45.680
in the direction of this point that we move around, right? So,

01:44:48.000 --> 01:44:54.240
but yeah, so let's say we wanted to draw the direction between these two points. Let's say

01:44:54.320 --> 01:45:01.280
we want to do direction from, from A to B. So, so let's do that. Let's just figure out how to do

01:45:01.280 --> 01:45:09.280
that, right? So, we're going to ignore the center points. Let's just hide those. Let's forget all

01:45:09.280 --> 01:45:17.200
about this. Let's, let's forget about this too. Forget about everything. You have learned nothing

01:45:17.200 --> 01:45:26.640
so far. Okay. So now we are drawing a line between A and B, right? So now should just keep this line.

01:45:27.680 --> 01:45:34.080
So now the goal is that we want the direction from A, the green point to B, the red point.

01:45:35.040 --> 01:45:42.160
So, so we want that arrow, right? So, so how do we get a direction between two points? Well,

01:45:42.800 --> 01:45:46.800
the first thing we need to do is to get the difference between these two points, right?

01:45:47.200 --> 01:45:53.200
So if we take one point and subtract it by the other, we get the vector going from one to the

01:45:53.200 --> 01:46:00.480
other, right? So that's something we talked about earlier. Like the, we have the two points here,

01:46:00.480 --> 01:46:08.160
both of these, sorry, my desk layout is not in tablet mode. So we have this point and we have

01:46:08.160 --> 01:46:13.920
this point. And then we want to get the direction between these two points. But first, in order

01:46:13.920 --> 01:46:19.200
to get the direction, we need this blue vector right here, right? So all we need to do is subtract

01:46:19.200 --> 01:46:24.880
one from the other. The order in which we do the subtraction will change the direction that the

01:46:24.880 --> 01:46:31.040
arrow is pointing, right? So usually, you can go either way, depending on how you do the subtraction.

01:46:32.400 --> 01:46:40.320
So, so generally, it's kind of annoying that if you have, if you have two points, like you have

01:46:40.320 --> 01:46:48.000
A and you have B, and you want to get the direction from A to B, the way you do that is B minus A.

01:46:48.960 --> 01:46:53.920
And it's kind of annoying that this is the order that you do it, because it feels like you kind

01:46:53.920 --> 01:46:59.200
of want to have the A first. But I kind of just have this mental model of you always have to like

01:46:59.200 --> 01:47:06.960
flip them if you want to get from A to B. So, yeah, so it's always like the, the two points

01:47:07.840 --> 01:47:13.920
minus the from points. So then from this to this in terms of like direction.

01:47:15.520 --> 01:47:21.520
Okay, so that's all we need to do to get that vector, right? So let's let's do that vector. So

01:47:21.520 --> 01:47:29.760
that's going to be called A to B. And that's going to be B minus A. So now we have the vector going

01:47:29.760 --> 01:47:39.360
from A to B, right? All right. So now that we have that vector, what happens if we draw that one?

01:47:40.000 --> 01:47:44.320
Well, we can try it out, right, draw it from zero to that vector. So now we're just going to

01:47:44.320 --> 01:47:52.880
visualize the raw vector, right? So if we do that, it's now going to draw at the origin,

01:47:52.880 --> 01:48:01.440
right? Because the vector itself doesn't have a root of the arrow, right? So it doesn't really care

01:48:01.440 --> 01:48:06.960
about the location where we did this calculation. But it is getting the correct vector, like this

01:48:06.960 --> 01:48:13.520
is the vector going from, from A to B, right? So so what we need to do now is that we just need

01:48:13.520 --> 01:48:19.200
the direction, right? So we don't want the actual full vector, we want this to have a length of one.

01:48:19.200 --> 01:48:25.440
So if we want a direction vector, we would need to normalize this, right? So so let's make the

01:48:25.440 --> 01:48:36.480
direction. So A to B direction. So then we can do A to B dot normalized. And then we can draw

01:48:36.480 --> 01:48:41.760
the direction. So now this one is always going to have a length of one. So it doesn't matter

01:48:41.760 --> 01:48:46.800
how far apart they are. But we do have the direction, right? We can move either of these

01:48:46.800 --> 01:48:54.000
points and the direction is still going to be correct. Okay, so far so good. But now we, we

01:48:54.000 --> 01:48:57.760
probably want to draw this one at the correct location, because it's kind of confusing that it's

01:48:57.760 --> 01:49:03.520
down here, like the direction is correct. But the visualization of this vector is kind of offset.

01:49:03.520 --> 01:49:09.040
We kind of want to see it here, right? Like we want to see it go from the green point to the red

01:49:09.040 --> 01:49:15.120
point. Okay, so, so we need to move this vector, we also need to hide this line, because that line

01:49:15.120 --> 01:49:20.160
is going to be covering up a bunch of stuff that we want to see. So let's first hide that line.

01:49:21.840 --> 01:49:28.880
And then we want to move this vector. So draw line is you supply two points in it, right?

01:49:28.880 --> 01:49:34.400
And the first point is A, because we want to originate this line from A. So we can just pass the

01:49:34.400 --> 01:49:41.200
point A into that one. And then in order to make the this be relative to A, all we have to do is

01:49:41.200 --> 01:49:47.760
add A, because then we're going to move it up by this vector going from zero to A, right? Because

01:49:47.760 --> 01:49:56.320
that's what A is. The coordinate of A is a vector going from zero to A. So, so then we can do A plus

01:49:56.320 --> 01:50:05.280
that direction. And then we recompile. It's not going to point toward the red point, right? And

01:50:05.280 --> 01:50:11.120
so now you can start to see like, you can imagine these being units in a game, right? And you

01:50:11.200 --> 01:50:17.120
need to point towards some target or whatever. And you need that direction somehow, then this is,

01:50:17.120 --> 01:50:26.240
this is a way you can do that, right? Yeah. Although the this part is only for drawing purposes,

01:50:26.240 --> 01:50:30.960
you already have the direction here. The only reason we had to do the A and A plus the direction

01:50:30.960 --> 01:50:36.240
is to draw it at that location, right? But the direction itself is already done, because directions,

01:50:37.200 --> 01:50:43.360
in terms of interpretation, direct directions should not be like, they don't really have a

01:50:43.360 --> 01:50:51.360
position. It's just a direction, right? Yeah. Okay, did that make sense so far? If it didn't

01:50:51.360 --> 01:50:58.000
have A plus, it would point to the location based on zero. Yeah, if this is just zero, or the, sorry,

01:50:58.640 --> 01:51:05.200
a zero vector. Oh, it didn't. It was sad about that. If we just set this to vector two dot zero,

01:51:05.920 --> 01:51:09.680
we remove that one, then it's going to be positioned at the origin, but it's going to have

01:51:09.680 --> 01:51:14.240
the correct direction, right? So, so the direction is correct here.

01:51:18.080 --> 01:51:22.560
Yeah, so, so kind of usually the, you only need this direction usually don't have to move it there,

01:51:22.560 --> 01:51:25.760
we're only doing that for visualizing what's going on.

01:51:26.160 --> 01:51:40.560
Okay, why are you doing A plus? Because we want to draw at that location, right?

01:51:42.160 --> 01:51:47.680
So, so if we don't do a plus, it's going to draw the vector going from zero in the origin of the

01:51:47.680 --> 01:51:53.840
world to the direction that the vector is pointing, right? But in our case, we want to draw it at the

01:51:53.920 --> 01:52:00.480
location where it's relevant, right? So again, if we just do this, vector three dot zero,

01:52:02.320 --> 01:52:08.880
recompile. So now it's going to be at the origin of the world, just at zero. So now we're kind of

01:52:08.880 --> 01:52:14.320
showing the raw data of this vector. But in terms of like visualizing it, it's kind of like

01:52:14.960 --> 01:52:18.320
annoying that it's at the origin, because if these things are very far away,

01:52:18.960 --> 01:52:23.360
then we don't even see the origin, even though the direction here is correct. This is the direction

01:52:24.080 --> 01:52:30.640
going from A to B, right? So, so the direction is correct. But just visualizing it, we need to

01:52:30.640 --> 01:52:37.280
supply two points to draw it, right? With when we're using draw line. So, yeah. Oh, yeah, there is

01:52:37.280 --> 01:52:43.440
also a draw ray one, if you want to use it, although I tend to not use that one. But yeah, so, so the,

01:52:44.320 --> 01:52:51.920
the A here is just to offset everything so that it's positioned here instead, right? So, yeah.

01:52:52.000 --> 01:52:59.760
So, so all we need to do to make this one positioned at A is that we add A. So zero plus A and A plus

01:52:59.760 --> 01:53:04.880
A to B direction. And this is unnecessary. So we can just remove that. And then we have A

01:53:06.240 --> 01:53:14.080
to A plus A to B direction. And then we get the, the two points, right? So what A plus A to B

01:53:14.080 --> 01:53:21.040
direction is, is the point here. It's the end of this line right here. So that's what the second

01:53:21.040 --> 01:53:27.280
point is. And this is where the first point is. So what this gives us is this point, which again,

01:53:27.280 --> 01:53:32.080
goes from the origin all the way out to this tip, because depending on if we want to interpret it

01:53:32.080 --> 01:53:36.880
as a vector or as a point, we can visualize it in different ways, right? But that's what that

01:53:36.880 --> 01:53:42.960
returns. It gives us that point right there. What happens if you do draw line A, A to B direction?

01:53:42.960 --> 01:53:47.680
I mean, it's just going to be confusing. There's no like, interpretation that that makes it,

01:53:47.680 --> 01:53:53.920
that makes it useful sort of. Yeah, so there's not really much point of doing that. Although,

01:53:53.920 --> 01:53:59.520
it is very common to sometimes forget to do things correctly. So sometimes you will see issues like

01:53:59.520 --> 01:54:04.800
this, where you're kind of just confused about what's happening, right? Because this doesn't,

01:54:05.360 --> 01:54:09.280
this doesn't look like a direction at all. This is, this does not have a length of one, right?

01:54:09.680 --> 01:54:19.520
Yeah. Because then what we're doing is essentially, this point is originating at the correct location.

01:54:19.520 --> 01:54:24.400
But this one would still be, if we didn't have A plus, it would still draw the end point at the

01:54:24.400 --> 01:54:32.080
origin. So we need to move both the origin of the line and the endpoint of the line by A, right?

01:54:32.080 --> 01:54:39.040
So that it's relative to A. Yeah, you're offsetting both end points or the starting point and the

01:54:39.040 --> 01:54:45.680
endpoint with A. All right. So now, now we have a way of getting the direction between these two,

01:54:45.680 --> 01:54:51.840
right? Let's see, there have been a few more things we talked about. So one of the more

01:54:51.840 --> 01:54:57.600
useful things about directions is that we can very explicitly position things a fixed

01:54:57.600 --> 01:55:03.520
distance along that line that is very easy to write. So, so let's say you have some, some float

01:55:03.520 --> 01:55:18.160
value. Let's make it a range, actually, from zero to four. Let's call it offset. It's fine.

01:55:20.640 --> 01:55:25.920
All right. So now we have a value called offset. Don't need AB distance anymore.

01:55:26.880 --> 01:55:35.520
Okay. So let's say we want to draw a point between these two points. We want to want to draw it

01:55:35.520 --> 01:55:42.000
along the line that goes here, right? And we want to set the distance away from the player.

01:55:42.880 --> 01:55:50.480
So now we're going to call that offset. And we can do xmas.drawSphere. So just drawing little points.

01:55:51.440 --> 01:55:57.280
So we want to draw that one at the location. So just to make sure that this works, we can try,

01:55:57.840 --> 01:56:04.560
let's draw at the midpoint between these two. So if you want to get the midpoint or the average

01:56:04.560 --> 01:56:10.640
of two points, as you would do with any other numbers, you do the same thing with vectors.

01:56:10.640 --> 01:56:15.120
You add them together, and then you divide by the number of entries you have. So A plus B

01:56:15.760 --> 01:56:22.880
divided by two gives you the average point of these two coordinates, right?

01:56:25.040 --> 01:56:28.880
All right. So then we also need a radius. You can just make something pretty small.

01:56:32.560 --> 01:56:40.320
Actually, that's being a bit more explicit. So midpoints equals that. There we go.

01:56:41.280 --> 01:56:44.720
So now we want to draw a sphere at the midpoint between these two points.

01:56:44.720 --> 01:56:49.360
All right. So we've got this gray little sphere, and it is right between these two points. Okay.

01:56:49.360 --> 01:56:53.840
So now we've got this thing that we can draw. But we don't want to draw it at the midpoint.

01:56:54.400 --> 01:56:59.920
So we want to draw it a fixed distance from the starting point toward the end point.

01:57:01.120 --> 01:57:07.600
So if we want to do that, like I mentioned before, the fact that this direction is normalized

01:57:07.600 --> 01:57:14.640
means that if we multiply it by some value, we know that the length of the resulting vector

01:57:14.640 --> 01:57:20.480
is going to be that value. That's not true if it's not normalized. So this is kind of the

01:57:20.480 --> 01:57:26.160
really, really powerful things about direction vectors, or unit vectors, normalized vectors,

01:57:26.160 --> 01:57:30.400
same thing. It's the same word. Wait, different words, same concept.

01:57:32.080 --> 01:57:36.560
So we have the direction here, and then we want to get a point along that, right?

01:57:37.120 --> 01:57:43.360
So we can do atb direction, multiply that by our offset. So offset is the parameter that we can

01:57:43.360 --> 01:57:56.080
tweak for the distance along this line. So let's call it offset vector. So now,

01:58:00.240 --> 01:58:05.920
there we go. Sorry. So now we have the vector that is offset that it's going to move from this one

01:58:06.000 --> 01:58:14.320
toward the red one. Now, same thing as before. If we just draw this one, it's again, this offset

01:58:14.320 --> 01:58:20.560
vector is relative to the starting point. So if we just draw this vector, it's going to be drawn

01:58:20.560 --> 01:58:26.400
at zero in world space, right? So we probably want to move that one. So we want to make sure

01:58:26.400 --> 01:58:33.600
that it's relative to a, just for drawing purposes, right? So we add a to offset vector,

01:58:34.240 --> 01:58:41.200
and then we can go back to unity. And now we can see that we have this sphere, and it's exactly one

01:58:42.160 --> 01:58:46.800
one unit away from the starting point. And we can change this offset. So we set it to zero,

01:58:46.800 --> 01:58:53.040
it's zero units. And we set it to two, it's exactly two units away. And unlike the midpoint

01:58:53.040 --> 01:58:58.800
that we got before, this one doesn't like squash and stretch, it's always the exact same distance

01:58:58.800 --> 01:59:03.360
away from the player, right? So what is the point of this? What's the use of this? Well,

01:59:03.360 --> 01:59:10.400
if you imagine this offset being a time value, then we just created a projectile, right? This

01:59:10.400 --> 01:59:17.840
thing is just moving at a fixed velocity, right? So now all of a sudden, we just have a very simple

01:59:17.840 --> 01:59:24.560
formula, where if we increase offset over time, we have the flight path of, you know, an object in

01:59:24.560 --> 01:59:31.600
motion. And all we've done is basically take the direction, multiply by the distance. And that's

01:59:31.600 --> 01:59:37.440
it. If you increase the distance over time, then you have a moving object that's moving along that

01:59:37.440 --> 01:59:44.240
direction vector, right? Okay, did that make sense? Anything that any questions or things that were

01:59:44.240 --> 01:59:48.480
not very clear? Such a good way of explaining it. I wish I had this lecture three years ago,

01:59:48.480 --> 01:59:51.680
you should be a teacher or something. I should be a teacher, you know,

01:59:52.640 --> 02:00:03.840
if only I was a teacher. Yeah, okay. So yeah, so now that this is very much a,

02:00:03.840 --> 02:00:10.400
like, this is very, very central and very core to working with vectors in in games. And the concept

02:00:10.400 --> 02:00:15.760
of a normalized vector or a direction is super crucial to have a have a good understanding of.

02:00:16.720 --> 02:00:19.680
I'm probably going to make that a very central part of all of the,

02:00:21.120 --> 02:00:26.000
like, all of the assignments that you're getting, because this is extremely core.

02:00:28.800 --> 02:00:32.800
Okay, let's see, where are we in the schedule? Oh, right.

02:00:35.360 --> 02:00:38.400
Okay, maybe we should make more than one script, just to make sure that we're not

02:00:38.400 --> 02:00:45.440
like cluttering this whole thing. I forgot my hotkey for disabling objects. There we go.

02:00:46.720 --> 02:00:51.120
Let's make another script, just to like show more examples of like, why is this useful?

02:00:52.240 --> 02:01:00.880
So let's say we want to make a radial trigger, like we have a trigger, and we want something

02:01:00.880 --> 02:01:07.280
to happen by the distance to that thing, right? So let's create it there.

02:01:16.480 --> 02:01:30.240
And then some objects, we can test the code.

02:01:39.840 --> 02:01:43.360
Maybe this is a player. Maybe it's an enemy. Who knows?

02:01:46.640 --> 02:01:56.240
All right. So we have an object now, and we have our trigger that is just nothing right now.

02:01:57.680 --> 02:02:03.360
So let's go back to on drug is most again, because it's useful for just testing things very quickly.

02:02:05.360 --> 02:02:05.920
There we go.

02:02:06.480 --> 02:02:16.400
Okay. So let's see, well, what do we want to do in this trigger? For instance,

02:02:16.400 --> 02:02:22.400
we might want to set a radius on this one, right? Like what is the threshold at which we want to

02:02:22.400 --> 02:02:28.800
want this trigger to activate, right? So let's make another range from zero to four.

02:02:30.160 --> 02:02:34.000
And then this is going to be the radius, and we default to one.

02:02:36.320 --> 02:02:40.960
And then we probably want to draw this so that we can actually see what the radius is.

02:02:41.840 --> 02:02:47.360
This is, by the way, something I talk about a lot when I have my tool dev courses on draw gizmos

02:02:47.360 --> 02:02:52.000
to just visualize things like radius and whatnot. Super important and really good for level

02:02:52.000 --> 02:02:56.480
designers so that they can actually see what the range is of everything, right? Otherwise,

02:02:56.480 --> 02:03:03.040
everything is kind of like difficult to parse. All right, so let's draw this. We can do that with

02:03:03.120 --> 02:03:10.000
gizmos, dot draw. Let's see, there are many functions here. We can do a draw wire sphere,

02:03:10.000 --> 02:03:19.920
for instance. So wire is wireframe. Okay, I don't know. I think handles has a wire disk.

02:03:19.920 --> 02:03:27.760
Maybe we should use that one instead. Okay. One thing to note, though, whenever you're using

02:03:27.760 --> 02:03:35.120
handles, handles is in the editor namespace. So if you want to ship a game and you're using

02:03:35.120 --> 02:03:42.240
handles in on draw gizmos, you have to make sure that you compile that out, right? So in this case,

02:03:42.240 --> 02:03:46.880
if you're so soon as you're using handles, always make sure that you compile out the

02:03:49.680 --> 02:03:53.440
code, right? Otherwise, you're going to get builders and that makes people sad.

02:03:54.080 --> 02:04:01.200
Okay, so we're doing handles. Let's draw a disk. We want to draw this at the location of this trigger,

02:04:01.200 --> 02:04:11.200
right? That's the wrong using. That is true. There we go. Unity editor is the one that should be

02:04:11.200 --> 02:04:20.240
wrapped. All right, so we want to draw this wire disk. And let's see. We need a center point. So

02:04:20.240 --> 02:04:24.800
the center point is going to be the location of this trigger, right? So it's going to be a transformed

02:04:24.800 --> 02:04:34.000
opposition. Actually, let's abstract this a little bit more. So we have the origin of the trigger.

02:04:35.520 --> 02:04:40.640
So that is just transformed opposition. So we're going to draw that there.

02:04:43.840 --> 02:04:49.200
Normal. Okay, we need to supply a normal for the disk. We haven't really talked about 3D

02:04:49.200 --> 02:04:54.400
vectors yet. We're going to get to that later and what normals are in general. But quickly,

02:04:54.400 --> 02:05:00.240
if you imagine you have a plane, like not an airplane, just the physical plane,

02:05:01.600 --> 02:05:07.600
then the normal is the direction that is pointing out from that plane. So my finger right now is

02:05:07.600 --> 02:05:13.760
the normal of the plane of my hand, right? So that's the normal direction.

02:05:14.240 --> 02:05:20.800
Or it's, there we go. Now we have a better, better normal direction, although

02:05:22.080 --> 02:05:28.080
usually Z is the normal for surface. So the blue vector there is the normal of my hand.

02:05:28.880 --> 02:05:35.040
So in order to draw a disk, what that means is that the normal of a disk makes the disk lie in

02:05:35.040 --> 02:05:41.440
the plane of my hand if we supply the blue vector as the normal to this, right? But we're in 2D,

02:05:41.520 --> 02:05:44.640
right? So in our case, our coordinate system

02:05:47.920 --> 02:05:54.240
kind of looks like this, right? So we just need to supply the blue vector, which is the Z axis in

02:05:54.240 --> 02:06:06.960
world space. So in this case, we're in 2D, we can just tip over our water bottles. So we can just

02:06:07.040 --> 02:06:14.880
do vector three dot forward. This is equivalent to doing new vector three zero zero one. So this

02:06:14.880 --> 02:06:24.240
is just a direction vector that is pointing in the Z axis, right? All right. And then then we have

02:06:24.240 --> 02:06:31.840
the radius. So we want this radius to be the same as the radius of this trigger, right? Jesus Christ,

02:06:31.840 --> 02:06:39.120
all of you want to have that my gizmo. I only have two and I hand made them. So I don't know how to

02:06:39.120 --> 02:06:48.320
like sell them. Yeah. Anyway, so now now we've supplied a normal to this disk, we have a radius

02:06:48.320 --> 02:06:54.960
and an origin. So now we should be able to see a wireframe ring around this trigger. Cool.

02:06:55.280 --> 02:07:02.800
So now we, we cannot tweak the radius, right? We can change the radius and the ring will change

02:07:02.800 --> 02:07:16.320
size. We can move this around and everything is working as expected, right? Okay, I 3D printed my gizmos

02:07:17.120 --> 02:07:26.640
and then I painted them. That was my process. That's about it. Yeah, these, I have two.

02:07:28.080 --> 02:07:33.040
They're very useful, especially when you get to talking about cross products. It's super good.

02:07:33.040 --> 02:07:37.760
Do you have the schematics? I just made the 3D model at some point. I don't know.

02:07:38.960 --> 02:07:43.840
It might actually be at my work computer at Necorp, but I could just remake the model or

02:07:43.840 --> 02:07:48.880
whatever. It's not a very complicated model to make. All right. So now the question is,

02:07:48.880 --> 02:07:54.720
how do we actually get the, like how do we know if we are inside of this trigger or outside of

02:07:54.720 --> 02:08:01.360
this trigger, right? So now all of a sudden we have a math problem that goes through all of the

02:08:01.360 --> 02:08:07.280
concepts we've been talking about, right? So we have, we have a point, this is going to be a player

02:08:07.280 --> 02:08:13.680
or an enemy or anything else, right? And then we have the point that is the center of the

02:08:14.320 --> 02:08:22.000
circular trigger. All right. So how do we solve this? Does anyone have any ideas in chat about

02:08:22.000 --> 02:08:27.680
how to, how to do this? What are we going to do? Move it? All we need to, all we want to know

02:08:27.680 --> 02:08:33.280
is whether or not this point is inside or outside the trigger. How do we know that? It's a Boolean

02:08:33.280 --> 02:08:40.960
state, something we can put in an if statement, right? Check the distance between the two objects.

02:08:40.960 --> 02:08:45.840
Yes. Okay. We have the distance. What do we then do? If it's greater than the radius, it's outside.

02:08:45.840 --> 02:08:50.800
Yeah. Exactly. Physics dot overlap, that works for physics objects, but right now we're not using

02:08:50.800 --> 02:08:59.040
any physics objects or colliders. All right. Cool. So let's do this again. How do we check

02:08:59.040 --> 02:09:04.640
the distance between these two points? Well, we have the origin and then we have the object

02:09:04.640 --> 02:09:14.560
position. Let's call it object position. That's object transform dot position. Okay. So now we

02:09:14.560 --> 02:09:21.440
need to know the distance between these two. So distance equals, we can do vector two dot distance

02:09:22.160 --> 02:09:31.680
between object position and the origin. So now we have a value for how far away is this object

02:09:31.680 --> 02:09:37.760
from the trigger, right? But now we also need to know the state of whether or not it's inside or

02:09:37.760 --> 02:09:41.520
outside the radius of the trigger, right? That's kind of what we're interested in.

02:09:43.600 --> 02:09:48.960
Okay. So we'll have the distance and the radius. So all we need to do then is to, we can make a

02:09:48.960 --> 02:09:58.560
Boolean state. So let's call it is inside. And the only case where this is inside is if the distance

02:09:58.560 --> 02:10:07.760
is less than the radius of the trigger, right? So if the distance is less than the radius,

02:10:08.800 --> 02:10:13.680
then it's inside. You can do less than or equal to implementation dependence depends on how you

02:10:13.680 --> 02:10:20.320
want to do this. Yeah. So now we have a state for whether or not it's inside. And let's set the color

02:10:20.320 --> 02:10:25.600
of the ring to be red if it's outside and green if it's inside. So handle stock color

02:10:26.560 --> 02:10:30.880
is inside. And if it's inside, we want to do color dot green, green,

02:10:32.320 --> 02:10:35.280
otherwise call it a red. So red outside, green inside.

02:10:40.960 --> 02:10:44.720
And transform has not been assigned. So now we have a bunch of null refs,

02:10:45.920 --> 02:10:48.560
because this is not serialized. So let's serialize it.

02:10:48.560 --> 02:10:58.000
All right. Still null. There we go. Cool.

02:11:00.080 --> 02:11:06.240
All right. So it's green. Move it outside. It's red. And it seems to be able to check this distance,

02:11:06.240 --> 02:11:13.280
right? So as usual, you need to test things, make sure you can change the radius and it still works.

02:11:14.000 --> 02:11:20.560
It seems like this. This is working. Was everything clear how this was set up?

02:11:20.560 --> 02:11:26.080
Why it works and everything? Oh, what's the vector 001 needed for? Yeah, that's just because the

02:11:26.080 --> 02:11:34.240
disk function is meant to be able to draw in 3D space. So this is just our way of telling it to,

02:11:34.240 --> 02:11:41.040
we just want to draw on the xy plane, right? Because we set the normal of the disk to be on

02:11:41.120 --> 02:11:48.160
the z axis, which means that the disk is going to traverse on the xy plane, right?

02:11:48.160 --> 02:11:54.160
Why not use vector three forward? I mean, if I were to write this code, when I'm working on

02:11:54.160 --> 02:12:00.240
something, I would write vector three forward, just for like, educational purposes, talking about

02:12:00.240 --> 02:12:05.680
what like what this is, what it means, vector three forward is a little bit unclear, when I'm

02:12:05.680 --> 02:12:12.560
teaching what vector threes are. So in this case, I just type vector three, because it's made things

02:12:12.560 --> 02:12:19.360
a bit more clear in terms of what the underlying data is, right? But yeah, that's that was the only

02:12:19.360 --> 02:12:24.560
reason. Yeah, but otherwise, this is equivalent to vector three forward, it's the same value, right?

02:12:24.560 --> 02:12:30.160
The only reason that I that I sometimes don't do it is because transform dot forward is very much

02:12:30.160 --> 02:12:35.840
not the same thing as vector three dot forward. So you need to like, keep in mind, what you mean

02:12:35.840 --> 02:12:41.520
when you type the dot forward, and sometimes you can like, confuse the two. So yeah, so sometimes,

02:12:41.520 --> 02:12:46.080
I think it's good to just, you know, write the whole vector out to clarify that this is just a

02:12:46.080 --> 02:12:53.520
just a vector on its own, one more thing. So we talked about, we talked about how to get the

02:12:53.520 --> 02:13:01.280
length of a vector, right? And if you recall, this is how you get the length of a vector, right?

02:13:02.160 --> 02:13:07.200
So you have an x component of a vector, you square that, and then you add the y component

02:13:07.200 --> 02:13:12.000
squared, and you take the square root out of that. It was the Pythagorean theorem that we

02:13:12.000 --> 02:13:17.280
talked about earlier, that whenever you have a right angle triangle, you can get the length of

02:13:17.280 --> 02:13:22.720
the hypotenuse using that formula, right, which is equivalent to asking what the length of a vector

02:13:22.720 --> 02:13:30.880
is, right? Okay, so we got this, this formula, and we can use this to calculate the exact length

02:13:30.880 --> 02:13:39.040
of a vector. If you're doing like, if this is in some sort of for loop, and also this person

02:13:39.040 --> 02:13:46.320
Twitch chat is really annoying, can we just time out this person? There we go. Great. So, okay, so

02:13:46.400 --> 02:13:51.840
if we can, we can use this distance value to check a threshold, just like we did here, right?

02:13:52.640 --> 02:13:57.280
So if we, we can check if it's less than some value or greater than some value, right?

02:13:58.640 --> 02:14:05.680
So if you are doing some code that is like iterating over 600 objects or whatever.

02:14:07.200 --> 02:14:12.800
So in that case, then you might want to optimize this, because if you're doing a distance check,

02:14:12.800 --> 02:14:20.000
like every frame across 600 objects, or maybe even more. So, so in that case, you might want to,

02:14:21.200 --> 02:14:25.280
you might want to optimize it, right? And there is a very nice way you can optimize

02:14:25.280 --> 02:14:32.400
distance checks when you're doing stuff like this. So, so one thing that is probably good to know is

02:14:32.400 --> 02:14:38.800
that square roots are not like super expensive, but they're a little bit more expensive than like

02:14:38.880 --> 02:14:43.680
multiplying. They're a little bit more expensive than adding or subtracting. So it's sometimes

02:14:43.680 --> 02:14:50.080
good to keep in mind that the square root itself has a cost to it. So again, when you're doing

02:14:50.080 --> 02:14:55.600
four loops over many objects in an update loop or something, that's when it really matters, right?

02:14:55.600 --> 02:14:59.280
Otherwise, don't micro optimize this all the time, because it's going to make your code unreadable. So

02:14:59.280 --> 02:15:03.760
don't do this all the time. I'm just like bringing this up as an optimization tip when you have like

02:15:03.760 --> 02:15:10.640
very heavy, many distance checks and whatnot, right? So, so if we want to make this cheaper,

02:15:10.640 --> 02:15:16.720
we could actually get rid of the square root, we could just nuke it, just remove it, and then we

02:15:16.720 --> 02:15:22.560
can see what happens, right? Okay, so previously we were checking the distance, right? This distance

02:15:22.560 --> 02:15:27.600
in and of itself contains the square root. So this one is doing the whole square root check, right?

02:15:28.480 --> 02:15:38.160
But we can do this manually. So, so let's first get the displacement difference vector.

02:15:39.840 --> 02:15:48.480
We can call it trigger. Actually, let's call it displacement. There we go. Now we're going to

02:15:48.480 --> 02:15:54.960
use esoteric terms. So the displacement here is that we subtract one from the other, right? So

02:15:55.040 --> 02:16:03.600
this is the vector going from the origin of the trigger to the, to the object that we're checking

02:16:03.600 --> 02:16:08.560
the distance to, right? So that's the vector going from the center to this one, right?

02:16:13.040 --> 02:16:18.240
All right, so that gives us the displacement vector. Now, now we want to calculate the

02:16:18.240 --> 02:16:24.240
length of this, right? So we want to get the length of this, we could do displacement of magnitude.

02:16:25.200 --> 02:16:28.960
But if we want to do this manually, just to like clarify the math involved in this.

02:16:31.280 --> 02:16:35.760
So, so the length or this technically the distance, maybe we could call it this distance.

02:16:36.480 --> 02:16:41.120
There we go, comment that out. Or just dist, there we go. All right, so we're going to get the

02:16:41.120 --> 02:16:46.320
distance between these two points, right? And the way we do that is get the length of the

02:16:46.320 --> 02:16:54.240
displacement vector, right? So we do the x components. And we square that as in multiplied by

02:16:54.240 --> 02:17:00.720
itself. Usually, if you want to square something, multiplying it by itself like this is usually

02:17:00.720 --> 02:17:06.640
faster than using like a floating point power function. So if you do like displacement dot x

02:17:06.640 --> 02:17:13.200
to the power of two, in some cases, this is going to be way slower than just multiplying it by itself,

02:17:13.200 --> 02:17:20.240
right? So that's a useful thing to know. So, so displacement dot x times displacement dot x.

02:17:20.240 --> 02:17:27.200
What did we just type? Well, we just did this part, right? The x squared. All right. So now we

02:17:27.200 --> 02:17:32.880
do the same thing for y squared. So we add displacement dot y multiplied by displacement

02:17:32.880 --> 02:17:38.080
dot y. So now we did this part right here with the y components. And then finally,

02:17:38.080 --> 02:17:46.720
we do the square root of the whole thing. All right, so math dot square root of all of this.

02:17:47.760 --> 02:17:52.720
So we got the distance. And now I'm pretty sure everything should work the same way it did before,

02:17:53.440 --> 02:18:01.440
unless all of my math is wrong. All right, seems to work. So nothing's changed so far. So now all

02:18:01.440 --> 02:18:08.000
we've done is basically replace unity's distance function with the math underlying all of that.

02:18:08.080 --> 02:18:17.040
Stuff, right? Okay, so what we're now going to do is the, the optimization part. So we talked about

02:18:17.040 --> 02:18:21.920
how you can actually remove the square root and still make the math work out so that we can do a

02:18:21.920 --> 02:18:28.160
threshold check. Because again, we're only checking a threshold. All we're interested in is, is it

02:18:28.160 --> 02:18:35.520
less than or greater than some value, right? So in that case, we can remove the square root.

02:18:36.400 --> 02:18:42.160
So what does this mean then? Well, now this is not the actual distance. But this is the

02:18:42.160 --> 02:18:47.440
distance squared, as in the distance multiplied by itself. So usually it's good to like,

02:18:48.320 --> 02:18:52.960
note that with like sq is usually what I use whenever something is squared, right?

02:18:54.400 --> 02:18:59.680
But now the, the distance squared is not the actual distance, right?

02:19:00.560 --> 02:19:07.680
Oh, if you want the like actual algebra involved in this, sorry, should probably,

02:19:09.600 --> 02:19:17.600
should probably write that down. So x squared, if you want to get x out of this,

02:19:18.320 --> 02:19:24.160
then if you take the square root, if you take square root of x squared, these are going to

02:19:24.160 --> 02:19:30.560
cancel out and you just get x in the end. So like the, the square root and reason something

02:19:30.560 --> 02:19:36.640
to the power of two, they're kind of like opposites of each other, right? So technically,

02:19:37.440 --> 02:19:44.720
square roots are, it's just x to the power of 0.5. We just, we just usually write it out as the

02:19:44.720 --> 02:19:52.320
square root symbol. Anyway, so basically they can cancel out and whatnot. So if we take the square

02:19:52.320 --> 02:19:58.640
root of x and raise that to the power of two, then we get x. So same thing between these two.

02:19:59.440 --> 02:20:07.280
Okay. So, so basically, when we get the distance here, where we remove this square root, we actually

02:20:07.280 --> 02:20:12.400
have the, the squared distance, not the actual distance. Because if we want to get the actual

02:20:12.400 --> 02:20:19.680
distance, we need to do the square root on it first. All right. So so now we have this weird,

02:20:20.560 --> 02:20:26.000
weird squared distance value. So now this one is going to be incorrect, right? Because we just

02:20:26.000 --> 02:20:36.800
removed a piece of the math, where we just removed a piece of the math that happens to work in this

02:20:36.800 --> 02:20:43.360
case. And this is again, important to check for or to test your code, right? The reason it works

02:20:43.360 --> 02:20:50.800
here is because our radius is one. If we set radius to 0.5, then now you can see that the

02:20:50.800 --> 02:20:58.880
threshold is incorrect. It marks it as inside here. And the same thing if we make the, if we make this

02:20:58.880 --> 02:21:05.920
larger than one, then it's, it's counts as outside already here, but I really shouldn't do that,

02:21:05.920 --> 02:21:12.800
right? So the way to do this is that we're using the squared value here. But the radius we're

02:21:12.800 --> 02:21:18.960
comparing to is the actual distance. But what we can do is that we can take the radius and square

02:21:18.960 --> 02:21:25.680
that. So now both of these are squared. So if we square the radius, we're comparing the square

02:21:25.680 --> 02:21:32.240
distance with a squared radius. And now if we go back to unity and recompile, this is now correct.

02:21:32.240 --> 02:21:40.080
And everything is like working exactly the way we want to. But we managed to optimize away the

02:21:40.160 --> 02:21:44.560
square root. Like we're not actually using a square root anymore. All we're doing is one more

02:21:44.560 --> 02:21:50.480
multiply instead of the square root, which is much faster in many, many cases. So if you, again,

02:21:50.480 --> 02:21:55.840
if you're doing very performant sensitive code, you can get rid of that square root.

02:21:57.440 --> 02:22:01.920
Now it's a little annoying to have to type all of this. So there are built-in functions for this.

02:22:01.920 --> 02:22:08.000
So instead of like typing all of this manually, you can get the displacement vector and do squared

02:22:08.000 --> 02:22:14.880
magnitude. So this is built into unity. So you can just do square magnitude. And now you have the,

02:22:14.880 --> 02:22:22.720
well, the squared magnitude of the distance between these two. And there is also, actually,

02:22:22.720 --> 02:22:29.440
is there, is there a, there's no square distance. Okay, well, anyway, this is sort of the square

02:22:29.440 --> 02:22:33.520
distance, then we were just doing the displacement vector manually, and then we'll get the square

02:22:33.520 --> 02:22:39.200
magnitude of that displacement vector, right? Anyway, so this is a neat little optimization you

02:22:39.200 --> 02:22:48.000
can do. But one thing that's very important, this only works if you're only checking a threshold.

02:22:48.640 --> 02:22:54.160
If you need the exact distance, you have to do the square root, because we are no longer calculating

02:22:54.160 --> 02:23:02.400
the distance over working with this is wonky space that is not linear, right? Actually, let's

02:23:03.120 --> 02:23:09.840
okay, I can show you the quick little example. Oh, decimals.com slash calculator. This is an

02:23:09.840 --> 02:23:14.400
incredibly useful tool. We're going to use this a few times throughout the course. It's good,

02:23:14.400 --> 02:23:21.200
you should use it. Anytime you want to graph something. All right, so, so let's say we have

02:23:21.200 --> 02:23:27.360
our distance, let's say that's x. So if we interpret this along the x axis, so now we have

02:23:27.360 --> 02:23:31.440
a value representing the distance as we go further away, right? And obviously,

02:23:31.440 --> 02:23:35.040
it's just going to be, it's just going to be one, it's a diagonal that just goes up there.

02:23:36.560 --> 02:23:43.680
But if you do x squared, then you can see that, but wait, are you? What?

02:23:48.320 --> 02:23:50.320
Oh, no. I'm sorry.

02:23:53.040 --> 02:23:58.240
Okay. All right. So like I mentioned, this only works for thresholds. If you want to know the

02:23:58.240 --> 02:24:03.920
exact distance, then you want the red value here, not the blue value, because this is not a distance

02:24:03.920 --> 02:24:14.000
value. But if you take any points, like if you, if you say at here, we have one coordinate, and

02:24:14.000 --> 02:24:21.120
then we have another one here. We want to know if you're to the left or to the right of this value,

02:24:21.120 --> 02:24:26.000
that's going to be true, regardless of which of these two curves you're using. This is a little

02:24:26.000 --> 02:24:32.640
esoteric if you're not like accustomed to reading curves. But basically, if you want to check if

02:24:32.640 --> 02:24:36.960
something is less than or greater than something else, which is exactly what we're doing here,

02:24:36.960 --> 02:24:42.720
we're only checking if it's less than or greater than something. In that case, you can just use

02:24:42.720 --> 02:24:49.680
the squared versions, because the comparison is true, regardless of if you have the square root

02:24:49.680 --> 02:24:55.280
or not. That's why we can do this optimization, but only when checking thresholds, because the

02:24:55.280 --> 02:25:04.320
blue line is not an actual distance, it's a square distance. That was a long thing. Any,

02:25:04.320 --> 02:25:08.400
any questions so far? How do you calculate the normal of the plane? Is it the rotation then?

02:25:09.840 --> 02:25:18.080
So the, it depends on how the plane is defined. It really depends. If it's a two dimensional plane,

02:25:18.960 --> 02:25:21.040
then if you want to calculate the normal of that plane,

02:25:21.280 --> 02:25:30.960
like say the, say your plane is defined by the red arrow here, and this is 2D, then the normal is

02:25:30.960 --> 02:25:38.000
just going to be, it's just going to be the red arrow rotated 90 degrees, right? And that's it.

02:25:38.000 --> 02:25:43.360
And then if you imagine the plane extending it to infinity along the red axis, right? Then you can

02:25:43.360 --> 02:25:50.160
just rotate the direction of that plane to get the normal. But then again, the thing is whenever

02:25:50.160 --> 02:25:55.200
you have a mathematical plane, the normal is usually built in to the plane itself. So you can

02:25:55.200 --> 02:26:00.400
usually get that normal out of just the representation of the plane that you have. But it really depends

02:26:00.400 --> 02:26:07.680
on like, what is your plane defined by? Like a mathematical plane works in one way. If you have

02:26:07.680 --> 02:26:12.880
an actual 3D mesh, then things work in different ways, right? Because now you have triangles and

02:26:12.880 --> 02:26:17.920
maybe colliders that you need to like, I don't know, raycast against or whatever. Now, so that

02:26:17.920 --> 02:26:22.480
works differently than like purely mathematical planes. Okay, so the last thing we're going to

02:26:22.480 --> 02:26:32.080
talk about now, before we end today's thing, we are going to talk about the dot product. So,

02:26:34.640 --> 02:26:41.040
swoosh, I think we might need to clean up this whole thing. Okay, there we go. What a good,

02:26:41.040 --> 02:26:48.960
good circle. Let's make a new layer. Let's draw some lines.

02:26:55.680 --> 02:27:02.000
Now, okay, so this is, this is going to get very close to trigonometry, but we're not going to

02:27:02.000 --> 02:27:07.360
have time to talk about trigonometry today. So instead, we're just going to talk about the dot

02:27:07.360 --> 02:27:14.480
product. So the dot product, when you're talking about multiplying vectors together,

02:27:15.920 --> 02:27:22.240
generally, that is an ambiguous statement. So when you talk about multiplying two vectors,

02:27:22.880 --> 02:27:26.960
there are many, many different ways that we can like approach that, like what do you mean by

02:27:26.960 --> 02:27:32.480
multiplying kind of the most straightforward one is that, let's say you have two vectors, you have

02:27:32.480 --> 02:27:42.320
vector a, and again, the vectors are their components, you have the x component, and then

02:27:42.320 --> 02:27:46.480
you have the y component of a vector, right? Or if it's a 3D vector, you also have a z component.

02:27:47.280 --> 02:27:52.320
All right, so what does it mean to multiply two vectors? So if we do a multiplied by b,

02:27:53.120 --> 02:28:00.400
if you just write this sign here, just this little dot, usually that means that you're doing the dot

02:28:00.400 --> 02:28:07.280
product between vector a and vector b. And the dot product is actually a very specific type of

02:28:07.280 --> 02:28:13.600
multiplication. When you talk about multiplying vectors, there are like, there's the dot products,

02:28:14.320 --> 02:28:21.200
there's the cross products. And I do believe the wedge product, where the wedge product is very

02:28:21.200 --> 02:28:27.600
close to what the cross product does. But anyway, so there are different ways of multiplying them,

02:28:27.600 --> 02:28:32.560
and knowing which one you want to do is really important. There's also component wise multiplication,

02:28:33.360 --> 02:28:39.840
where you kind of take, so there is, there's the component wise multiplication, where

02:28:40.880 --> 02:28:45.440
you kind of multiply these numbers together. And then you get a third vector out of that,

02:28:45.440 --> 02:28:52.000
that is the, you know, this x multiplied by this x gives you some value here. And the same thing

02:28:52.000 --> 02:28:57.920
with the y component, but then it gets some value here. This is actually one of the least common

02:28:57.920 --> 02:29:06.320
multiplication methods. This is almost only used when you want to scale things on like a non uniform

02:29:06.320 --> 02:29:14.560
scale or whatever. So, so this is usually called component wise multiplication. Unity has it in

02:29:14.560 --> 02:29:19.440
the form of vector two dot scale or vector three dot scale. Yeah, so so this is usually a very

02:29:19.440 --> 02:29:24.880
specialized form of multiplication. That's that's not always very this is not used very much actually,

02:29:26.000 --> 02:29:33.440
except for scaling. Okay, anyway, so let's talk about the dot products. Now, the way that I usually

02:29:33.440 --> 02:29:37.120
like to approach the dot product, like there are many approaches, some people like to go

02:29:37.120 --> 02:29:42.000
through trigonometry to talk about it. But I like to think about things geometrically,

02:29:42.000 --> 02:29:47.040
because that makes sense to me in many, many ways. All right, so we have our unit circle.

02:29:47.840 --> 02:29:54.320
So by unit circle, I mean that the radius of the circle is one. So any vectors

02:29:54.320 --> 02:30:00.720
that is pointing to, to the edge here has a length of one, right? So

02:30:02.800 --> 02:30:10.480
if you have, let's see, let's put two vectors here, we have one vector there,

02:30:11.440 --> 02:30:16.880
and another vector here. Actually, let's use separate colors, because that's going to be useful.

02:30:18.400 --> 02:30:20.400
So we have a vector here, let's call it a,

02:30:22.480 --> 02:30:30.320
and another vector. Actually, let's do, let's do this one. There we go. Perfect. And B.

02:30:30.800 --> 02:30:42.480
So now if you have, now we have two vectors, right? We have vector A, and we have vector B.

02:30:44.480 --> 02:30:50.880
And then we can ask what happens if we take the dot product of these two vectors,

02:30:50.880 --> 02:30:54.800
because the dot product has two inputs that has two vectors as input.

02:30:55.520 --> 02:30:59.040
Usually in math libraries and whatnot, it's just called dot.

02:31:02.400 --> 02:31:13.600
So let's write that down. The dot product between A and B.

02:31:15.920 --> 02:31:20.640
There we go. Okay, so the dot product, what is the dot product?

02:31:21.600 --> 02:31:30.160
Geometrically, you can think of the dot product as projecting one vector onto another vector.

02:31:31.440 --> 02:31:36.960
So if you look at, if you look at B here, for instance, if we do the dot product between A

02:31:36.960 --> 02:31:44.400
and B, what we're going to get is actually, if you can think of B flattening onto A,

02:31:45.040 --> 02:31:54.480
perpendicularly, what the dot product gives you is this length right here. So sometimes,

02:31:55.440 --> 02:32:01.440
sometimes the dot product is referred to as a scalar projection because of this reason. It's

02:32:01.440 --> 02:32:06.800
called scalar because the result of the dot product is not a vector. The result is just a

02:32:06.800 --> 02:32:14.080
numerical value. So the dot product between B and A here would be, well, the whole thing is one,

02:32:14.560 --> 02:32:20.160
so this is less than half. So I guess this is like 0.4 or something. So it's approximately

02:32:20.160 --> 02:32:27.280
0.4 in this case. Okay, so you can sort of think of it as projecting one vector onto another.

02:32:27.280 --> 02:32:35.120
Now, there are some caveats. For this to work, A has to be normalized. This one has to be a length

02:32:35.120 --> 02:32:44.240
of one. You can, you can change the length of B. So if you say make B this vector, now the length

02:32:44.240 --> 02:32:53.040
of B is not one, but the scalar projection is still going to be the projected distance along here.

02:32:54.080 --> 02:32:59.360
Right? So in this case, it's going to be like 0.8 or whatever. Okay, so that's what the, that's a

02:32:59.360 --> 02:33:05.440
very like simple way of like visualizing what the dot product does. It projects vectors onto each

02:33:05.440 --> 02:33:13.440
other. And in this case, if you reverse the order of A and B, you actually get the same results. So

02:33:13.440 --> 02:33:20.640
this one, it doesn't matter what direction you do this in. Because again, if you do this the other

02:33:20.640 --> 02:33:27.600
way around, then we're going to do a 90 degree projection onto B. And that gives us this distance

02:33:27.600 --> 02:33:32.960
right here. And that is also 0.4, right? So it doesn't matter what direction we do this in.

02:33:32.960 --> 02:33:38.240
All right, so you can swap those. It doesn't matter. We still get like a valid value out of that,

02:33:38.240 --> 02:33:45.680
right? All right. So that's what the, that's what the dot product does. One thing to note, though,

02:33:45.680 --> 02:33:52.080
is that the dot product can be negative. So it's a little bit misleading to call it a distance.

02:33:53.040 --> 02:34:00.000
So for instance, if we have this vector as our B, then what's going to happen is that it's going

02:34:00.000 --> 02:34:07.680
to project against the kind of the infinite line here, right? So in this case, it will be the same

02:34:07.680 --> 02:34:15.840
thing. It would project against the the other vector like this 90 degree angle. And then you

02:34:15.840 --> 02:34:20.720
would get again, you would get this distance, but in this case, it's going to be negative.

02:34:21.520 --> 02:34:27.760
So you can sort of think of this as a signed distance in this case, right? So this is a negative

02:34:28.320 --> 02:34:38.720
0.4. So here's a very useful way of thinking about this. Now, if you look at A here, and you look at

02:34:38.720 --> 02:34:45.040
the values we have, we have 0.4, we have negative 0.4, it's one over here. And if we were to do the

02:34:45.120 --> 02:34:51.600
dot product where they're completely opposite of each other, we would get a value of negative one,

02:34:51.600 --> 02:34:59.680
right? And you know how we've talked about the number line before, right? If you think about it,

02:35:00.720 --> 02:35:10.160
B projected onto A is kind of a way of getting a number on the number line of A, right? So you can

02:35:10.160 --> 02:35:16.640
sort of extend A and consider that to be a number line, right? Sort of like this. So when you project

02:35:16.640 --> 02:35:23.760
it onto that, you kind of get the coordinate along the direction of the axis of A. So this is kind of

02:35:23.760 --> 02:35:29.840
a very nice way of just converting something to some other coordinate system. And this is actually

02:35:29.840 --> 02:35:33.440
used if you want to do space transformation, which we're going to talk about next time.

02:35:34.400 --> 02:35:44.000
This is used for that, for instance. Okay, where do you use dot? I'll get into that very soon.

02:35:44.880 --> 02:35:48.720
First, I'm just going to talk about how you do the dot product, like how do you calculate the

02:35:48.720 --> 02:35:54.560
dot product between two vectors? It is very simple. It's like surprisingly simple for something that

02:35:54.560 --> 02:36:03.040
is incredibly useful. So the dot product between vector A and vector B, this looks like it's not

02:36:03.120 --> 02:36:09.600
equals. So the way to get the dot products, well, the actual practical way is that you

02:36:09.600 --> 02:36:15.040
use the dot product function in your vector library. But if you want to do it manually,

02:36:15.040 --> 02:36:24.720
you would do A dot x as in the x component of the A vector. And then you multiply that by

02:36:25.040 --> 02:36:39.680
B dot x. And then you add a dot y, and then multiply that by B dot y. That's it. It's very

02:36:39.680 --> 02:36:46.800
straightforward. Multiply the x components, and then add the multiplied y components. There's not

02:36:46.800 --> 02:36:52.880
much more to it. So that's how you get the dot product between two vectors. Now, again, this

02:36:52.880 --> 02:37:00.000
projection example is only valid if one or both of your vectors are normalized. It doesn't quite

02:37:00.000 --> 02:37:05.920
work out if none of them are normalized, because then it doesn't really project, because then it

02:37:05.920 --> 02:37:11.840
projects and scales that distance. So it's good to keep in mind that the projection interpretation

02:37:11.840 --> 02:37:20.320
mostly holds if you're doing, if one of them is normalized. So again, the number line example

02:37:20.960 --> 02:37:27.280
kind of presumes that A is normalized, because then you're kind of getting the B coordinate

02:37:27.280 --> 02:37:36.320
along the vector of A. Okay, another useful way of looking at it is that, let me erase some things.

02:37:37.200 --> 02:37:44.560
I'm erasing too much. Why did I draw these on the same layer? It's fine. Everything's fine. Oh,

02:37:44.560 --> 02:37:50.560
yeah, like someone is mentioning the square magnitude. This also happens to be the way that

02:37:50.560 --> 02:38:04.400
you get the square magnitude of something. So if you do the dot product between A and A,

02:38:07.360 --> 02:38:11.840
and then you do the square root of this, you have a distance function. This is mathematically

02:38:11.920 --> 02:38:17.440
equivalent to getting the distance or the length of vector A. So it's kind of a shorthand to do

02:38:17.440 --> 02:38:29.360
that. And if you use the same vectors for both inputs for the dot product. Okay. So here's another

02:38:29.360 --> 02:38:35.680
way to interpret the dot product. So the dot product can also be used to kind of figure out

02:38:35.680 --> 02:38:42.400
how close are these vectors to each other. So if you think about A here,

02:38:45.520 --> 02:38:51.760
and you have your vector B, when you project this one, you're going to get a value that is very

02:38:51.760 --> 02:38:59.920
close to one. This is going to be like 0.999, whatever. If they are exactly equal, as in the

02:38:59.920 --> 02:39:04.640
vectors are the same, and they're both normalized, the dot product is going to give you one.

02:39:06.000 --> 02:39:10.080
So if we can kind of think about what happens when you rotate this vector around,

02:39:10.960 --> 02:39:16.320
if B is pointing here, we're going to get a lower value in the projection, right? Because it's moving

02:39:16.320 --> 02:39:22.880
toward the center now. So this is going to be 0.6 or something. And then when you kind of imagine

02:39:22.880 --> 02:39:28.560
keep rotating this one, if it's perfectly perpendicular, like this, as in it's 90 degrees

02:39:28.560 --> 02:39:36.320
off of A, then the dot product is going to be zero. And this is really, really crucial. So this

02:39:36.320 --> 02:39:42.560
is important to know. So if we track what the values are, then it's going to be one over here.

02:39:43.280 --> 02:39:48.720
Let's do one. Somewhere here, it's going to be 0.5, right?

02:39:49.040 --> 02:40:02.400
Somewhere here, it's going to be like 0.8 or whatever, and so forth. And because we're projecting

02:40:02.400 --> 02:40:07.680
this onto A, there's also symmetry in this, where we would have 0.8 over here as well.

02:40:08.800 --> 02:40:16.960
And if we go perpendicular in the other direction, this would also be zero. This also projects to

02:40:16.960 --> 02:40:21.680
zero. It's 90 degrees off. It's going to project towards this, and it's zero again. So we get back

02:40:21.680 --> 02:40:27.520
to zero. And then we can continue to the other side. If they're completely opposite, then you get

02:40:27.520 --> 02:40:33.920
a value of negative one. And then you have values in between here. So you know, you would have 0.5

02:40:34.000 --> 02:40:46.800
here, and 0.5 somewhere here, right? So what does this mean? This means that if you have two

02:40:46.800 --> 02:40:54.640
normalized vectors, and these are, and you're comparing two vectors, what you are getting

02:40:54.640 --> 02:41:00.480
is kind of an approximation for how close they are to pointing in the same direction, right?

02:41:01.440 --> 02:41:07.040
So in this case, I'm just talking about normalized vectors. Both of these are normalized. So if one

02:41:07.040 --> 02:41:11.600
of them is not normalized, then these values are not going to be interpreted exactly the same way.

02:41:11.600 --> 02:41:19.280
But the sign of this still holds. So what you can notice now is that all of the values on this side

02:41:19.920 --> 02:41:27.200
are negative. All of the values on this side are positive, right? So one thing that the dot

02:41:27.200 --> 02:41:34.240
product is very useful for is, is this vector pointing towards something? Or is it pointing

02:41:34.240 --> 02:41:41.520
away from something, right? Because now if we consider the green arrow to be the direction

02:41:41.520 --> 02:41:45.680
a player is looking, and the red arrow is the direction to an enemy or something,

02:41:46.880 --> 02:41:51.520
then we can tell if the player is looking away from the enemy by doing the dot product, right?

02:41:52.480 --> 02:41:57.600
If the, if the player is looking in this direction, well, oh, this should be negative, sorry.

02:41:57.600 --> 02:42:02.560
Then this is a negative value, right? Because all of these are negative. Sorry, I forgot to do

02:42:02.560 --> 02:42:08.800
negative for these. Yeah, so all of these are negative values, all of these are positive values.

02:42:08.800 --> 02:42:13.840
So now if we do the dot product between the player direction, and the enemy direction,

02:42:13.840 --> 02:42:18.320
it's going to be negative here, because it's projecting here, got the distance here,

02:42:18.320 --> 02:42:25.200
and that's negative. So this is super, super useful. I do have an animation for this too.

02:42:31.600 --> 02:42:35.120
Not that animation. It's the wrong one.

02:42:41.200 --> 02:42:44.560
So here's an example. This is basically what I've just been talking about now.

02:42:45.280 --> 02:42:49.680
You have two vectors, if they point in the same direction, you have a value of one.

02:42:49.680 --> 02:42:55.360
If they point directly perpendicular to each other, it's a value of zero. If they point completely

02:42:55.360 --> 02:43:02.960
in opposite direction, it's a value of negative one. And that's kind of it. So again, this is only

02:43:02.960 --> 02:43:10.560
when you have two normalized vectors. If one of them is not normalized, the positive and negative

02:43:11.040 --> 02:43:16.320
those rules still apply. In that case, they don't have to be normalized. But for these values to

02:43:16.320 --> 02:43:24.080
be exactly one and negative one when pointing in opposite directions, they have to be normalized.

02:43:24.720 --> 02:43:28.240
Can I calculate the second vector if I only have the first vector on a dot product?

02:43:29.680 --> 02:43:34.080
Well, it would be ambiguous, because you would have two results, not one. But I believe it's

02:43:34.080 --> 02:43:40.080
possible. Is there any point having one vector larger? Yes, if you don't want to check the,

02:43:40.080 --> 02:43:45.280
if you're not interested in checking, like, are they facing the same direction or some other

02:43:45.280 --> 02:43:52.720
direction? Sometimes you want or very often, actually, the vector is shorter or longer than

02:43:52.720 --> 02:43:59.280
a normalized vector. So this vector projected onto this one. Sometimes this distance is still

02:43:59.280 --> 02:44:05.520
interesting. And it's very often interesting as well. So let me be a bit more practical,

02:44:05.520 --> 02:44:10.160
because we've been talking about like esoteric things. And let's let's think about

02:44:11.040 --> 02:44:13.840
what this can be useful for, right? Let's see, maybe I should

02:44:16.160 --> 02:44:21.920
move. Do I move that? Or do I keep it? Angle is implied by the dot product? No,

02:44:21.920 --> 02:44:26.960
angle is we're not talking about angles, angles of spoilers. We're gonna get into angles as soon

02:44:26.960 --> 02:44:33.120
as we talk about trigonometry. But right now, we're just doing vectors. Okay, here's an actual

02:44:33.120 --> 02:44:40.480
example from the game that I'm working on. So let's see, you you happen to have a game that

02:44:40.480 --> 02:44:49.040
has a surface of all things. So let's see, guess we can give it some some direction. There we go,

02:44:49.040 --> 02:44:57.120
three is soft and good. I don't know how to make this continuous. There we go. Cool. Okay, so we

02:44:57.120 --> 02:45:02.960
have a surface. We have a point on the surface. It's solid underneath here. So you can just

02:45:02.960 --> 02:45:09.760
pretend that this is solid. And you have air here. Now we quickly mentioned, or we briefly

02:45:09.760 --> 02:45:16.960
mentioned the normals, or what a normal is of a surface. And again, a normal is a something that

02:45:16.960 --> 02:45:25.200
is pointing directly out from some surface. So like the blue vector here is normal to the palm of

02:45:25.200 --> 02:45:32.880
my hand, right? The other two vectors are tangent to my hand, they're not normal, right? So pointing

02:45:32.880 --> 02:45:41.760
directly out from some surface, that's the normal. So let's let's let's visualize some normals. So if

02:45:41.760 --> 02:45:48.080
you have this surface, again, the normals point directly out from the surface. So the normals

02:45:48.080 --> 02:45:52.960
along this surface would like kind of continue like this, right? And then you get a vector like

02:45:52.960 --> 02:45:59.680
that, and so forth, you imagine these have a length of one. So these are the normals of the surface.

02:46:00.400 --> 02:46:10.000
So let's think about this point in particular. And let's draw the normal. The normal is going

02:46:10.000 --> 02:46:16.560
to be very large, because our circle is very large. So this is the normal.

02:46:19.200 --> 02:46:26.480
Let's call that N. Now we have the normal of the surface. So here was a problem that I had.

02:46:27.440 --> 02:46:37.360
When I was working on a game, back in the days, if you have a surface, and then you have an object

02:46:37.360 --> 02:46:43.280
for some simplicity sake, let's say we have a have a sphere or a ball or whatever. And this

02:46:43.280 --> 02:46:50.320
object is moving at some speed, and it's going to hit the this ground and then bounce off of it,

02:46:50.320 --> 02:46:58.400
right? Okay, cool. It can bounce off of this surface. Now you want to play an audio clip.

02:46:59.360 --> 02:47:06.400
So let's say you you want to play some audio clip. There we go. That's my audio clip symbol.

02:47:07.040 --> 02:47:11.200
Because you have an impact sound, you want to make a clunk sound when the ball hits the ground

02:47:11.280 --> 02:47:21.040
or something. And now the question is, what is the volume of this sound? Like how loud should this be?

02:47:23.120 --> 02:47:30.240
How would you solve this problem? So now we're getting into like, trying to figure out, okay,

02:47:30.240 --> 02:47:37.280
if we are moving very quickly, then obviously we want it to be louder than if it's not moving

02:47:37.280 --> 02:47:44.560
quickly, right? If it's moving very slowly hits the surface, then we might not even want to play

02:47:44.560 --> 02:47:51.680
a sound, right? Okay, so let's just think about this some more. So so maybe volume

02:47:54.400 --> 02:48:00.880
is just the speed of the object, right? Cool. All right, we got the volume equal speed.

02:48:01.680 --> 02:48:09.600
But consider this case, if you erase these, all right, so we have this ball,

02:48:09.600 --> 02:48:19.520
let's say we throw this one down, straight down at some speed, let's say it's 10 meters per second.

02:48:20.640 --> 02:48:27.360
And then we have another ball that's at a very low angle, and it's going to hit the ground

02:48:27.440 --> 02:48:35.920
at the same speed. So we want this one to be louder than this one, right? Because obviously,

02:48:35.920 --> 02:48:41.040
this one is going to make a very hard impact on the surface. Whereas this one, it's not going to

02:48:41.040 --> 02:48:44.800
make a very hard impact. Like it's going to mostly going to grace the ground and then do a little

02:48:44.800 --> 02:48:52.720
bounce, right? So now we have this issue of like, well, it's not just based on speed, we have to do

02:48:52.720 --> 02:49:00.000
something else, right? Okay, so what can we do? So what we can do is that we can use the normal

02:49:00.000 --> 02:49:07.920
of the surface to figure out how quickly is it moving toward the surface? Because that's the

02:49:07.920 --> 02:49:14.400
key thing that we need to know, right? So so let's let's bring out the normal again.

02:49:14.720 --> 02:49:24.640
So the normal represents the direction of the surface, right? And what can we then do? Well,

02:49:25.360 --> 02:49:29.760
we can think of these arrows here as our velocity vectors, we're going to get into more physics

02:49:29.760 --> 02:49:38.320
later. But you can sort of represent velocity as a vector. So basically, each component like x says

02:49:38.320 --> 02:49:44.240
how quickly you're moving along the x axis, and y is how quickly you're moving along the y axis.

02:49:44.240 --> 02:49:49.760
So okay, so how do so how does the dot product come into this? Well, what we can do then is that

02:49:50.880 --> 02:49:57.760
if you imagine this normal here, we have the velocity vector here, and then we can project this

02:49:58.800 --> 02:50:04.560
onto this line, right? And again, the dot product gives us the projected distance here.

02:50:06.000 --> 02:50:11.120
And then we can do the same thing here, right? We take this one, do the dot products,

02:50:11.120 --> 02:50:17.360
and now we get this distance right here. So even though I guess pretend this arrow is as long as

02:50:17.360 --> 02:50:25.840
this one. But the point is that now, using this normal, we can get speed in this direction,

02:50:26.720 --> 02:50:33.680
rather than speed overall, right, like getting the getting the length of the velocity vector

02:50:33.680 --> 02:50:39.280
is your overall speed. But it doesn't say what the speed is in the direction of the surface,

02:50:39.280 --> 02:50:43.200
right? But that's what we're interested in. If you're moving directly toward the surface,

02:50:43.200 --> 02:50:49.040
it should be really loud. If you're moving really fast, but you're not really hitting the surface

02:50:49.040 --> 02:50:55.120
fast, you're kind of moving fast just tangentially, then we don't want it to be loud. So in this case,

02:50:55.120 --> 02:51:02.640
every time you have some object that is hitting some surface, you know, this object is flying

02:51:02.640 --> 02:51:09.840
onto the surface, then we can just do the math. If the if this is the velocity, we project this onto

02:51:12.800 --> 02:51:19.280
onto the normal vector. And then we get a magnitude here for how loud this should be,

02:51:19.280 --> 02:51:26.480
right? Okay, so let's try a different direction. Another ball that's flying in this direction.

02:51:27.200 --> 02:51:33.120
Well, if we do that, then we're going to get a vector like this. And when we project this one,

02:51:33.840 --> 02:51:39.680
it's not as loud, right? Because now we're only using this span right here. And this is much

02:51:39.680 --> 02:51:48.320
shorter and a much smaller volume. So, so what we're getting is the direct or the the the speed

02:51:48.320 --> 02:51:55.440
along a specific axis. So we get the speed along the normal, that's what we're getting

02:51:55.440 --> 02:52:00.400
when we do the dot product between, you know, the velocity vector of the object and the normal of

02:52:00.400 --> 02:52:08.400
the surface. Yeah, so long story short, you need the dot product, basically. Yeah, so so that's

02:52:08.400 --> 02:52:13.120
that's one use case. So that's what I've used dot product for. For instance, there are millions of

02:52:13.120 --> 02:52:19.840
use cases for the product. But this is just one of them. Yeah, do both of these vector need to

02:52:19.840 --> 02:52:26.720
be normalized before using the dot product? No. So specifically here, it's very important that the

02:52:26.720 --> 02:52:33.360
normal is normalized, and that the velocity vector is not normalized. Because we do want to

02:52:34.560 --> 02:52:40.080
the longer the velocity vector is, the faster this object is moving, right? So if you imagine the one

02:52:40.080 --> 02:52:45.920
that's moving downwards, that's this velocity vector, if it's moving faster, we want it to be

02:52:45.920 --> 02:52:53.120
louder, right? So that would still project onto this line here. And then we get this value here.

02:52:53.760 --> 02:52:59.680
So we still want it to be louder. So we don't want to normalize the velocity vector. We do want to

02:52:59.680 --> 02:53:06.480
normalize the the normal vector, though. Otherwise, we're not going to get things that are in meters

02:53:06.480 --> 02:53:13.520
per second anymore. And it's not going to be a correctly projected speed along an axis, right?

02:53:14.480 --> 02:53:22.080
Can you post that image here? Yes. All right, let me just complete this because I kind of left

02:53:22.080 --> 02:53:35.280
this incomplete. Okay, so so better way is something along lines of volume equals the dot product

02:53:35.280 --> 02:53:46.320
between the velocity and the normal. There's some caveats here. So if you remember how the

02:53:46.320 --> 02:53:51.040
dot product works, these values are going to be negative. So you have to like make sure that

02:53:51.040 --> 02:53:56.080
they're positive, you might want to multiply them to change the overall loudness or whatever.

02:53:57.360 --> 02:54:03.200
Yeah, but if but but again, the dot product product is a scalar. If it's negative and you

02:54:03.200 --> 02:54:08.000
don't want it to be negative, then you can just do the do the absolute value of that, right?

02:54:09.200 --> 02:54:14.960
So getting the absolute value of this would get you get you some volume.

02:54:16.960 --> 02:54:23.120
But the core concept is that with the with the dot product, you get a projected

02:54:25.360 --> 02:54:30.720
projected velocity along some axis. In this case, the axis was the normal of the surface, right?

02:54:31.360 --> 02:54:36.480
Um, was that clear, by the way? Yes, I can post that image in the discard.

02:54:37.200 --> 02:54:46.640
Actually, let me write some notes to make sure.

02:54:47.280 --> 02:55:01.840
It's a little misleading to say speed, because speed is generally not signed,

02:55:01.840 --> 02:55:05.680
it's pretty much always positive. So I'm going to put that in quotation marks.

02:55:10.720 --> 02:55:16.400
Oh, people are talking about the cosine. Yes, the dot product has a very intimate relationship

02:55:16.400 --> 02:55:20.080
with the cosine, but we haven't done trigonometry yet. So we're going to do trigonometry later.

02:55:24.960 --> 02:55:29.760
Um, okay. Yeah, let's let's post this in your discard.

02:55:33.760 --> 02:55:37.600
Geez, when people are skipping ahead of your math class and spoiling the

02:55:38.240 --> 02:55:43.120
what's going to happen in the next chapter. Yeah, I can just show you another example of the dot

02:55:43.120 --> 02:55:50.720
product. If you want to see in game this time. So here's another use case for the dot product.

02:55:50.720 --> 02:55:56.560
So I'm working on this game. This is called flowstorm. So right now, the another thing that I

02:55:56.560 --> 02:56:04.400
used the dot product for was the pitch of the thruster of this rocket, right? So if you listen

02:56:04.400 --> 02:56:09.200
to the rocket here, you can hear that the pitch is changing depending on what's happening.

02:56:09.760 --> 02:56:18.640
Right? You can hear that it increases in pitch. Okay, so so far, no dot products, right? If you

02:56:18.640 --> 02:56:24.080
move fast, we increase the pitch. If you move slowly, the pitch is lower. It's sort of the same

02:56:24.080 --> 02:56:34.880
thing with sliding. Like you can hear the pitch change depending on if you're moving quickly or

02:56:34.880 --> 02:56:41.920
slowly. All right. So the thing that I'm using the dot product for is that if you are accelerating

02:56:41.920 --> 02:56:48.800
and you're turning the rocket left and right, actually, let me zoom in. Then the pitch is

02:56:48.800 --> 02:56:54.000
going to be different. It's not just based on speed. So if you listen to this while watching the rocket.

02:56:54.400 --> 02:57:08.960
Like even if I'm moving, sometimes when I turn the rocket, the acceleration or the pitch goes down

02:57:08.960 --> 02:57:18.720
again, even though I'm moving fast, right? Yeah. So basically, what I have done is that

02:57:19.520 --> 02:57:22.000
actually, let's go to the level editor instead, because there's more space.

02:57:24.240 --> 02:57:30.960
No, level editor is currently broken. That's okay. We can have no little reps in the console.

02:57:32.720 --> 02:57:37.360
So if you listen to the rocket now, we're moving faster and faster sideways, but then I look up.

02:57:43.440 --> 02:57:48.480
You can hear that every time I turn, where the rocket is not perpendicular to the velocity vector,

02:57:49.440 --> 02:57:56.160
the audio will now change pitch. Because what I'm really interested in is

02:57:56.800 --> 02:58:02.560
how quickly is the rocket moving in the direction you're pointing? That's the crucial thing here.

02:58:03.120 --> 02:58:10.240
So in this case, what I'm doing is that instead of a normal direction, I have the direction of my

02:58:10.240 --> 02:58:20.800
rocket, right? So I have this vector right here. This is the direction. And then I have the velocity,

02:58:20.800 --> 02:58:27.360
right? The actual velocity vector for how quickly you're moving in that direction, right?

02:58:28.240 --> 02:58:33.280
So the actual velocity could go in either direction, right? It could be in this direction.

02:58:33.280 --> 02:58:37.280
It could be along this. It could be opposite towards it, right?

02:58:39.840 --> 02:58:45.200
Yeah. So that way, I can get the speed in the direction of the rocket, and then I can use

02:58:45.200 --> 02:58:49.440
that to change the pitch of the rocket. So that's kind of it. That's basically,

02:58:49.440 --> 02:58:53.600
like, just depends on how you're moving and then project that along the direction of the rocket.

02:58:54.720 --> 02:59:01.280
And then what I get is, what is the, how much are you moving along this direction? And that's it.

02:59:01.280 --> 02:59:05.760
That's how I got the pitch there. Sounds like it's the absolute value of the dot product? Yes.

02:59:06.320 --> 02:59:12.320
So that's, that's kind of it. Do I use the dot product for something else? I do use it for the

02:59:12.320 --> 02:59:16.800
impact sounds. Just like I mentioned before, this is the game where I did the impact sounds.

02:59:16.800 --> 02:59:22.000
So when you hit the surface, there are little sounds that play. That one is based on the dot

02:59:22.000 --> 02:59:28.320
product, just like we talked about. Yeah. Otherwise, there are many, like, placeholder sounds,

02:59:28.320 --> 02:59:33.200
like when you crash, that's a placeholder sound. So there's a lot, a lot of stuff that I haven't

02:59:33.200 --> 02:59:36.560
done in this game. But, but yeah, otherwise that's how it works.

02:59:42.720 --> 02:59:43.200
Peter.

02:59:51.440 --> 02:59:55.040
Oh, someone asked about the lighting in this? No, the, the lighting is not the

02:59:55.040 --> 03:00:01.520
Unity's built-in one. I wrote my own custom lighting system. Here's some lighting buffers,

03:00:01.520 --> 03:00:06.880
if you're curious about how my lighting system works. The first lighting buffer is kind of

03:00:06.880 --> 03:00:12.560
self-explanatory. The, the other three are a little less altering. Oh, I also use a dot product for

03:00:12.560 --> 03:00:18.720
the water physics. So underwater, I kind of want you to be able to turn the rocket and that would

03:00:18.720 --> 03:00:22.560
also change the direction of the rocket. Again, you do stuff with the dot product

03:00:23.520 --> 03:00:27.200
and the direction you're moving versus the direction you're pointing. And that way,

03:00:27.200 --> 03:00:30.960
you can make the rocket sort of behave as if you have drag underwater, right?

03:00:32.400 --> 03:00:37.120
Yeah. Otherwise, I think that's it, unless you have more questions. Now I'm going to try to

03:00:37.120 --> 03:00:42.160
figure out what assignments to give you. Yeah, I'm just going to, I'm just going to have a

03:00:42.240 --> 03:00:52.560
slow Q&A thing while I figure out the assignments. All right, I got two out of

03:00:53.280 --> 03:00:57.520
maybe three, four assignments. I haven't decided on how many yet. Be gentle. I mean,

03:00:57.520 --> 03:01:01.600
we've mostly gone through a lot of like fundamentals right now. So I'm not going to do

03:01:01.600 --> 03:01:08.000
something like super advanced. What do these assignments do? I have no idea. I think

03:01:08.000 --> 03:01:12.960
Krister is going to do all of the, all of the assignment stuff. He's also going to be correcting

03:01:12.960 --> 03:01:17.200
them. So I'm just going to do the, I'm just going to make assignments and then Krister can decide

03:01:17.200 --> 03:01:21.760
that everything else. And also Krister is going to be doing the, he's going to do the grading

03:01:21.760 --> 03:01:29.840
and whatnot. Okay, there we go. Assignment one is now ready. I'm going to reveal all the assignments

03:01:29.840 --> 03:01:34.480
as soon as I'm done writing them. Oh, I just, assignment two has a thing we didn't talk about

03:01:34.560 --> 03:01:43.360
today. Isn't that spicy? I presume all of you know what transform.forward means or transform.write

03:01:46.880 --> 03:01:50.880
because those are going to be irrelevant. But I presume you've done that already because

03:01:50.880 --> 03:01:54.560
you've been using Unity for a while. You don't have to be a student to see them. I will show

03:01:54.560 --> 03:01:58.080
them as soon as I'm done writing them. I'm just jotting down notes now for the assignments. I'm

03:01:58.080 --> 03:02:02.960
going to draw more specifically. I know you can't see right now. I'm going to draw what the assignments

03:02:02.960 --> 03:02:07.680
are going to be. A lot of these concepts are probably going to be very easy if you like rewatch

03:02:07.680 --> 03:02:14.080
the stream and whatnot. So like, it's mostly about I want you to get some practice in actually doing

03:02:14.080 --> 03:02:18.800
the assignments and practically writing code that does the things we've been talking about,

03:02:18.800 --> 03:02:23.760
because that usually helps you like solidify what we've been talking about. So like, try not to

03:02:23.760 --> 03:02:28.320
copy code from each other unless you really, really have to. So like, try to see if you can do it on

03:02:28.320 --> 03:02:32.640
your own at first, because that's kind of a better way to make sure that you've learned the things

03:02:32.640 --> 03:02:37.600
you need to learn. Otherwise, of course, look things up if you need to. But it's always good to

03:02:37.600 --> 03:02:43.200
make sure that you actually know what you're typing. If you're not sure what you are doing when you

03:02:43.200 --> 03:02:50.000
type vector to dot dot, like you should know what is happening when you do that, which you might not

03:02:50.000 --> 03:02:54.800
if you just copy someone else's code, right? Because again, my goal is for you to learn what

03:02:54.800 --> 03:03:00.480
these things are. I don't care if you do the assignment, or don't do the assignment or copy

03:03:00.480 --> 03:03:04.400
code. I don't care. But I want you to learn. I want you to learn the things that are important to

03:03:04.400 --> 03:03:09.840
you. But then again, I'm not going to do the grades Krista probably carries if you copy

03:03:09.840 --> 03:03:16.800
or cheat or whatever. And if you do them at all. Okay, all right, I got the assignments. I'm here.

03:03:16.800 --> 03:03:23.280
Here we go. I'm going to draw these so that it's like very clear what they're doing. And I'm going

03:03:23.360 --> 03:03:29.600
to post both the pictures and the text for it. Assignment

03:03:32.560 --> 03:03:37.200
number one. Yeah, I don't I think the the assigned the date for these assignments

03:03:37.200 --> 03:03:42.480
is probably going to be much later. As in, you don't have to do them tomorrow. If you do them

03:03:42.480 --> 03:03:47.920
tomorrow, that's going to be good because then I'm going to cover these assignments at some

03:03:47.920 --> 03:03:52.160
points. And so it's probably good if you done them before that. If you want to like maximize

03:03:52.160 --> 03:03:57.200
your learning. But if you're stressed, then this is I mean, don't don't stress yourself out. Okay.

03:04:00.240 --> 03:04:01.840
Cool. First assignment.

03:04:01.840 --> 03:04:08.800
And create

03:04:14.800 --> 03:04:26.560
the radial trigger. So this is the thing we made on stream. We had a trigger that had some radius,

03:04:26.560 --> 03:04:35.520
right? There we go. It's got a radius. And then we want to detect whether or not a point

03:04:36.240 --> 03:04:42.400
is inside or outside, right, based on this trigger. And the trigger should be able to be

03:04:42.400 --> 03:04:46.960
anywhere. You need to be able to move the trigger around, you need to be able to change the radius.

03:04:46.960 --> 03:04:51.920
And it should still be able to detect whether or not this point is inside or outside, right?

03:04:52.160 --> 03:04:56.160
So, so that's all you need to do really, like it's

03:05:01.200 --> 03:05:06.560
inside versus outside. And you can do all of this is on drug in on drug gizmos,

03:05:06.560 --> 03:05:11.120
you don't have to make like an actual update loop or whatever, just do the dude and on drug gizmos.

03:05:11.120 --> 03:05:15.760
The point is, I want you to like, try this out yourself and make sure that you've actually like,

03:05:16.800 --> 03:05:21.360
you can do the concepts that we've been talking about, right? So recreate the radial trigger is

03:05:21.440 --> 03:05:25.600
the first assignment. Can it be moved and seen only? Yes, you don't have to animate anything. It

03:05:25.600 --> 03:05:30.160
doesn't have to be in play mode, just the same way we did it on stream, just like make sure that

03:05:30.160 --> 03:05:34.720
you know the mathematical concepts. But like, you don't have to involve like physics or rigid

03:05:34.720 --> 03:05:40.480
bodies or gameplay or anything like that, just to make sure that like, you have the idea of

03:05:40.480 --> 03:05:43.920
detecting whether or not something is closer to something or not, right?

03:05:44.240 --> 03:05:50.720
Yeah. So that's one way of doing it. Or that's the first assignment. So assignment number two.

03:05:52.400 --> 03:05:59.600
So previously, we, the radial trigger, kind of check like, you know, are you inside of a trigger

03:05:59.600 --> 03:06:07.200
or outside of a trigger, right? And that is based on the radius. But now I want you to make another

03:06:07.200 --> 03:06:18.400
trigger. I feel like I had a name for this. Actually, I just renamed it. There we go. That's

03:06:18.400 --> 03:06:31.040
rebellious I am. So the next one is that I want you to make a look at trigger. Okay. So basically,

03:06:31.040 --> 03:06:37.520
you have a similar thing here, you have a, actually, let's name this player. There we go.

03:06:38.160 --> 03:06:48.640
Player objects. Another player. Cool. So then we want a look at trigger. So in this case,

03:06:49.840 --> 03:06:55.680
if you have the trigger at some point, and then the player is looking in some direction,

03:06:56.080 --> 03:07:02.640
we want to be able to detect if you are looking toward this trigger or not, right?

03:07:04.640 --> 03:07:10.320
So that's what this one is for. So if you are looking at this trigger, you want it to be true.

03:07:10.320 --> 03:07:15.360
If you're looking away from it, you want it to be false, right? So this one should also,

03:07:15.920 --> 03:07:19.840
you know, this one has a radius that you can modify to set the threshold of this.

03:07:20.560 --> 03:07:23.920
The look at trigger should also have a threshold

03:07:28.320 --> 03:07:34.320
from zero to one. So let me move this down because I need to clarify a few things.

03:07:36.320 --> 03:07:45.760
All right. So threshold from zero to one. And if the threshold is one, that means

03:07:45.920 --> 03:07:53.440
it's going to be very strict. Probably impossibly so, because you're probably never in practice

03:07:53.440 --> 03:08:05.360
because of like floating point imposition. All right. So one is super strict. And this is a

03:08:05.360 --> 03:08:12.880
floating point value. You can set it to 0.5 and everything. All right. And then we, if it's set

03:08:12.960 --> 03:08:35.760
to zero, that means that, so perpendicular or closer means you're at it. There we go.

03:08:36.640 --> 03:08:40.800
So this is the threshold. So you should be able to, if this is set to one,

03:08:41.520 --> 03:08:46.720
you have to look like exactly at the thing. And it's going to count as triggered only if you

03:08:46.720 --> 03:08:51.760
look exactly at it. Because of floating point precision, that's going to be like pretty much

03:08:51.760 --> 03:08:58.080
impossible, never going to happen. But if you set it to like 0.5, it should allow you to look a little

03:08:58.080 --> 03:09:04.240
bit away and still count as looking at this thing. But then as soon as you are looking away from it,

03:09:04.320 --> 03:09:11.600
like this, that should not count as looking at it. So basically, this threshold should set how

03:09:11.600 --> 03:09:17.200
sensitive it is. If it's a one, it's hypersensitive, you need to look exactly at the point. If it's

03:09:17.200 --> 03:09:22.240
zero, it's not very sensitive at all. If you look in this direction, it's going to count as looking

03:09:22.240 --> 03:09:31.600
at the thing. Yeah, that's about it for number two. Oh, and to clarify, we haven't talked about

03:09:31.600 --> 03:09:37.520
angles yet. So this doesn't involve angles. None of this is angle bakes. This is still just vectors.

03:09:40.640 --> 03:09:49.360
All right. And let's do the third one. Still just vectors. Yeah, angles don't exist.

03:09:50.240 --> 03:09:58.320
You've never heard of angles. This one is smaller. Okay, heck, I'm trying to figure out how to draw

03:09:58.320 --> 03:10:03.760
this one without spoiling the solution, because this is kind of difficult. So this is the one

03:10:03.760 --> 03:10:09.760
we're going sort of toward concepts we haven't talked about yet. But that's a little teaser

03:10:09.760 --> 03:10:16.400
thing or something. So let's say this is the origin of the world, like this is 0, 0.

03:10:18.160 --> 03:10:26.800
And then you have an object in Unity that has some, some orientation, right? So usually Unity,

03:10:26.800 --> 03:10:32.240
you would have this gizmo that looks something like this. And then you would have the z axis

03:10:32.240 --> 03:10:38.320
pointing sort of toward the camera. And then let's say you have a point. There we go.

03:10:42.240 --> 03:10:48.800
Okay, and then you have this object. Let's call it object. So this one is I want you

03:10:49.120 --> 03:11:11.120
to make a transform function to transform world to local and local to world. Cool. Okay. So the

03:11:11.120 --> 03:11:17.680
goal is I want you to have a transform in the scene that has some rotation and a position.

03:11:18.320 --> 03:11:25.440
And I want you to write a function that can transform this point either into local space of

03:11:25.440 --> 03:11:33.840
this object, or from local space of this object to world space. We haven't talked about spaces yet.

03:11:33.840 --> 03:11:39.120
So that's why this one is a little bit of a curveball. But I'm sure you sort of understand

03:11:39.120 --> 03:11:45.040
the concept of what it means for something to be local space and world space. So that's what I

03:11:45.040 --> 03:11:51.600
want you to do. And you're not allowed to use Unity's transform functions in order to transform

03:11:51.600 --> 03:11:57.280
this point. You're not allowed to use matrices, you're not allowed to use transform dot transform

03:11:57.280 --> 03:12:03.600
points, not allowed to use those, those don't exist anymore. So, so you need to do this using

03:12:03.600 --> 03:12:09.280
vector math and dot products. That's what you need to do, right? Yeah, you can still use transform

03:12:09.840 --> 03:12:15.840
writes transform dot up to just get vectors and whatnot. But you're not allowed to use

03:12:15.840 --> 03:12:22.000
the transform functions. No, you don't need to use quaternions. This is possible using only the

03:12:22.000 --> 03:12:27.040
things that we have talked about. Oh, yeah, this is 2d only, we don't need to care about 3d yet.

03:12:27.040 --> 03:12:33.360
So yeah, 2d only. I don't know where to fit that in. I don't think I get the goal of this. You need

03:12:33.360 --> 03:12:39.040
to be able to transform a point from world space to local space, which means that you need to

03:12:39.120 --> 03:12:45.280
figure out where a point is. So if you look at this point, for instance, I'm good, this is really

03:12:45.280 --> 03:12:50.240
hard to explain what that's spoiling the whole thing. If you look at this point here, if you

03:12:50.240 --> 03:12:56.000
consider the coordinate of this one in world space, well, it's this vector, right? And then you have

03:12:56.000 --> 03:13:02.800
an x coordinate, you have a y coordinate and so forth. But making a transform function means

03:13:02.800 --> 03:13:09.280
that you should be able to take this point in world space and transform it to this space.

03:13:09.840 --> 03:13:16.240
As in, I want it to be relative to this object. So now I want the x coordinate and the vector and

03:13:16.240 --> 03:13:23.440
everything to be based on the local space of this thing right here, right? Yeah, and it should

03:13:23.440 --> 03:13:28.960
take rotation into account. So it's not just position, you can ignore scale. Scale doesn't

03:13:29.040 --> 03:13:34.800
matter. But it has to take rotation into account. And you can do this using only the concepts that

03:13:34.800 --> 03:13:39.440
we've been talking about. You don't have to do anything outside of that. In fact, you're not

03:13:39.440 --> 03:13:44.400
allowed to use matrices or the transform dot transform point functions. You need to do this

03:13:44.400 --> 03:13:48.560
with vector math and dot products. And if I move the point to the position, it would be under the

03:13:48.560 --> 03:13:54.720
new parents facility, move point being world space, you mostly just need to get the coordinates.

03:13:54.720 --> 03:13:58.480
How you like make it in the scene or how you move them around doesn't really matter.

03:13:59.040 --> 03:14:04.720
You just need to be able to get those coordinates. But how you visualize that or whatever is a

03:14:04.720 --> 03:14:10.160
separate thing, you need to be able to get a point relative to a different space.

03:14:11.520 --> 03:14:17.680
Yeah. So what I mean by that is that if you ignore these lines that I used to draw,

03:14:18.640 --> 03:14:24.800
you just need the coordinates of this one. If you like pretend that, whoops, pretend that the

03:14:25.760 --> 03:14:29.680
this right here is world space or whatever, because that's kind of what you do, right?

03:14:32.160 --> 03:14:37.920
But yeah, basically, you want to get this point relative to this space. That's it. And also the

03:14:37.920 --> 03:14:44.240
other way around. Oh, and just parenting objects and getting their location kind of like defeats the

03:14:44.240 --> 03:14:49.200
purpose of it. And the reason I call this a curveball is because we haven't talked about

03:14:49.200 --> 03:14:54.560
space transformation yet. That's the only reason otherwise the the ways to do this only talks

03:14:54.560 --> 03:15:00.480
about everything we've been that you only need stuff we've been talking about earlier. Yeah.

03:15:04.400 --> 03:15:08.960
You can use transform dot forward, transform dot forward, transform dot right, transform dot up,

03:15:08.960 --> 03:15:13.120
you're allowed to use those. You're just not allowed to use the space transformation functions.

03:15:13.840 --> 03:15:18.400
Because the whole idea is that you need to like, do the space transformation yourself.

03:15:18.400 --> 03:15:24.080
Okay, all right. I think that's it. Those are the three assignments. Oh, yeah. If you want to join

03:15:24.080 --> 03:15:30.000
like my discord for my streaming shenanigans, feel free to hop into discord. We're like a

03:15:30.000 --> 03:15:35.440
bunch of game developers, a lot of us are under the LGBT umbrella. So it's sort of like a Venn

03:15:35.440 --> 03:15:41.360
diagram overlapping those two things. So feel free to feel free to join discord. Let's see,

03:15:41.360 --> 03:15:47.600
I'll post this in the math channel that seems appropriate for the transform from world to

03:15:47.600 --> 03:15:53.120
local. Is it okay to use a child object for output? Oh, if you just wanted to like test

03:15:53.120 --> 03:15:59.120
your code to see if it works, sure. But like you could do it. If you want just like using gizmos,

03:15:59.120 --> 03:16:05.760
so you don't have to like use actual objects or whatever. Okay, my voice is dead. I need to stop

03:16:05.760 --> 03:16:11.120
talking. And I need to stop streaming. But thank you all so much for joining. I hope this was

03:16:11.120 --> 03:16:17.440
useful and that this has helped you learn something or get a refresher on things or I don't know,

03:16:17.440 --> 03:16:25.760
hope it was useful.

