start	end	text
0	4640	Hey guys, welcome to a new Python tutorial. Today I want to show you how we can work with
4640	11600	regular expressions in Python. Regular expressions or short RE or REGX is a powerful method that is
11600	17520	used to search for matching text patterns. For example, typical patterns that can be extracted
17520	24000	from large text files with regular expressions are emails or domain names. So at the end of this
24000	30720	tutorial, you will be able to understand what this regular expression here does. And there's a lot
30720	36240	to cover in this tutorial. Don't be overwhelmed. I promise that once you have understood the concepts,
36240	42160	it's not so hard anymore. And it can simplify and speed up your search tasks a lot. So if you
42160	46960	watch the whole tutorial, then you will be able to understand any pattern that you want to look up.
47840	53440	So now let me quickly show you what we will cover in this video. So of course,
53440	59520	we will see how we work with the RE module in Python. Then I will show you what methods we
59520	66320	have to search for matches, what we can do with a match object. Then we will talk about matter
66320	74160	characters and more special sequences that can be used in patterns. Then we talk about sets,
74160	84320	quantifiers, conditions, and then grouping, then modifications, so how we can modify strings with
84320	93360	REs. And at the end, I show you some different compilation flags. So let's start. So as I already
93360	101440	said, Python has a built in module that is called RE, which we can use to work with regular expressions.
101440	108560	So we have to import RE. And then we can start working with regular expressions. So let me show
108560	117440	you a very simple example first. So let's say here I have some test strings already. So let me copy
117440	124960	and paste this here. So this is our test strings. And now let's say for example, we want to search
125040	134000	for the pattern ABC. So we see we have this three times here. And now let's say we want to look
134000	142400	for ABC, then we create a pattern. So let's say pattern equals and then we use the RE module
142400	151360	and the compile method. And then here we say R and then the string ABC. So I will explain what
151360	160000	R means in a second. And then we can use this pattern to find matches. So we say matches equals
160800	170800	pattern dot find iter. And then we want to find the matches from the test string. And now this will
170800	181760	be a object that we can iterate over. So we can say for match in matches. And then we simply print
181760	193040	the match. So now let's run this. And then we see we have two matches. So this is a match object.
193040	199520	And we can see more details. So for example, we can see the span. So this is the start
200080	209360	and the end position. So this is three, four and five. And this is our match ABC and a second
209360	217040	match at position 12. So this is position or index 12 in our string. So we see that we have
217040	224720	two matches here. And what we also see here that our regular expression is case sensitive. So it
224720	234400	doesn't include the uppercase ABC into our matches. So this is one thing that we must know. So one
234400	242080	thing that I want to mention here is that instead of compiling our pattern explicitly, we can use
242080	252320	the find iter method directly on the RE module. So we could also just write that our matches
253120	263520	equals RE dot find iter. And then we want to look for our let's say string,
264320	275040	our ABC, and then from our test string. So you can use it directly on the RE module. And then we
275040	283040	will if we run this, we will see that we get the same results. So there is not much of a difference
283040	293280	here. But I prefer to do it this way to explicitly compile them pattern and bind it to this object
293360	301200	here. So this improves readability. And it's also a little bit more flexible. So I prefer it this
301200	310320	way, but you should know that you can use both ways. And now let's talk about why I'm using this
310320	321280	R here briefly. So this means that this is a raw string. So for example, if I have a string A,
322080	330000	and this includes some special characters like a tap, so a backslash T that this is a tap or a
330000	340000	backslash N for new line. And then I have a string. So now if I print this, then you will see that we
340000	348240	have the tap here at the beginning. So it didn't print the backslash T. And in a pattern, I usually
348240	356320	want to look for the actual characters in my pattern. So then I can write an R here. And then
356320	363040	this means that this this is a raw string. So Python will print this the same way as it is
363040	370800	specified here. And yeah, so I recommend to always use a raw string for your patterns, you can use
370800	378480	just a normal string. But remember that you should use a raw string. And yeah, so this is a short
378480	384800	example how a regular expression is used. So typically, we come up with our pattern, then we
384800	393440	compile it. And then we use the pattern to find our matches. And I will show you the different
393440	402240	methods that we have on the matches now. So now let's go over the methods to search for matches.
402960	412160	So we already have seen the find iter method. And this will give us a match object. And I
412160	418880	will show you what we can do with a match object in a second. So now let's talk about the other
418880	427920	methods. So there are three other methods. So we can use the dot match method. So here dot match,
427920	441120	then we have search. And then we also have find all. So now let's look about the find all method
441120	448960	first. So if we can say pattern dot find all, then we will simply get the string. So if you see
448960	456960	here, I'm printing the whole match object. So now if I want just a string, then I can use find all.
456960	462560	And now if I run this, then it will just print the two strings that I'm looking for.
463520	473520	So this is the find all method. Now the match method determines if the expression matches at
473520	484240	the beginning of the string. So this will only return one match. So here I can say match equals
484240	496240	pattern, and then match. And now if I print the match, so let's print the match and run this,
496240	503120	then we will see this is none, because the match looks only for patterns at the beginning of our
503120	512960	string. So ABC is not at the beginning. So now if I use 123 as a pattern, then we will see this is
514240	522000	at the beginning. So this will return one match. And we also have the pattern here again. But again,
522960	530240	the match does only return the first match if it is at the beginning of the string.
531360	539280	And now we also have the search method. So the search method scans through the string
539280	548000	and looks for any location where the RE matches. So if you use, for example, let's look for the match
548560	556320	ABC again, then we will see this will return none because ABC has to be at the beginning.
556320	563280	And now if we use this search method, then it will find the match object again, and
563280	574160	it will simply return the first match. So we have search match find all and find iter. And this is my
574160	580960	preferred method. So from now on, I will only use this one. And then we also have some
581680	591040	functions that can be used to modify an object. So we also have split and sub. So I will come to them
591040	600240	later. So now let's continue using the find iter method. And let's have a look at what we can do
600240	608960	with the match object. So again, let's say our matches equals pattern, and then find iter.
609600	617920	And then let's iterate over this. So for match in matches, and then we want to print the match.
618880	629840	Then again, we see we have the whole match object here. And we can use four different methods on
629840	639440	this. So we can use the group method, we can use the start and the end method. And we can get the
639760	652480	span. So let's start with the span. So this will give me the start and the stop index, where this
652480	662960	pattern is located. So let's print the match dot span. So then we simply get this as a tuple here.
663920	671120	So we get three and six. So this is a tuple. And we can also get the
672400	683680	just the start and the end right away by saying print match dot start and print match dot end.
683680	695120	Oh, sorry, here is a dot match dot start. So then we get the start in the stop index. And now let's
695120	703280	talk about the group method. So now if we call match dot group, then we will get or print the
704160	712160	actual string of the match. And we can also give this group method arguments to find the group
712160	720800	zero or one and or two. And we will talk about this grouping later. But for now on, if you
720800	728080	just want the string then from the match, then just call match dot group or group zero. So this
728080	735840	is the same. And yeah, so these are the four different methods that we can use on a match
735840	745600	object. And now let's come to the matter characters. So in regular expressions,
745600	754080	there are these method characters that have a special meaning. So these are all the method
754080	760320	characters we must know. And you don't have to know them by heart. So I recommend that you
760320	766640	keep a cheat sheet somewhere with all this stuff. And I will also provide a cheat sheet on
766640	772880	my website. So you can check that out on Python minus engineer dot com. And this is all you need
772880	780560	to know. So now let's talk about these method characters one by one. And then I will show
780560	789040	you what this means. So the first one is the dot. So the dot means that we want to look for any
789040	795760	character. So any character except a new line character, then the carrot means that we want
795760	802320	to look for a pattern that starts with that starts with the pattern we are looking for. So that
802320	807840	starts with the string hello, for example, then the dollar sign is the opposite. If you want to
807840	818080	look for a string at the end of our text, then we have some quantifiers. So the asterisk, the plus
818080	826160	and square brackets. And I will talk about them later in more detail. Then we have the set operator,
826800	835680	which I will also cover later. Then we have conditions and grouping with parentheses. So I
835680	841680	will also talk about this later. And of course, we have to look, we have the backslash. So with
841680	849760	the backslash, we can get more special sequences, or we can escape characters. So for example,
849760	856720	if you actually want to search for the dot, then we have to escape this in our pattern.
857680	865440	So now let's talk about the first three and show you some examples. And then later we will cover
865440	874000	the other meta characters in more detail. So now first let's say we want to look for the dot and
874000	883920	then print all the matches, then we see we get all all the characters in our string,
884480	892000	because the dot is looking for any character except new line. So this is the dot.
892000	900880	And now let's say we have a dot here at the end, and we actually want to get this dot. So then we
900880	908880	escape it with a backslash. And now if we run this, then we just get the dot. So now let's print the
908880	918000	whole match object. Then we get the dot and we see that it is at this position. So this is the
918000	925200	dot. And then let's have a look at the carrot. So this is the carrot. So let's say we want to look
925200	936240	for 123 if it starts with this. And then we get one match object. And for example, now if we look
936240	944400	for ABC, then it will return nothing, because it's not at the beginning. And the opposite if you
944400	951920	want to have a look, if we want to look if this is at the end, so then we can say dollar here.
952480	958880	And now if you run this, and this will find nothing because I'm sorry, we have the
960000	967840	colon here, this will find nothing, because as I said, it is case sensitive. Now if I'm looking
967920	975760	for uppercase ABC, and dollar at the end, so then it found the match at the end.
976640	984080	All right, so now we will talk about the other meta characters later. And now let's look at
984080	990400	some more special characters. So there are more special characters that start with a backslash.
990400	1000480	So there is the backslash and small D. This looks for any digit, so zero until nine.
1001120	1007040	Then there's the capital backslash capital D. So this matches any non digit character.
1007760	1014880	Then there's backslash, small s, this matches any white space character, for example, space,
1014880	1023040	tap or new line. Then we have backslash capital is s, this matches any non white space character.
1023040	1027040	So for all these patterns, all these special characters, the capital
1028400	1037520	pattern is kind of the opposite of the small character here. So then we have backslash,
1037520	1047600	small w, this matches any word character. So we have characters from A to C. We also have
1047600	1058080	all the capital characters, and also digits and the underscore. Then the capital w is the
1058080	1064800	opposite. So any non word character, non alphanumeric character. Then we have the
1065280	1074560	backslash b. So this matches where the specified characters are at the beginning or at the end
1074560	1081760	of a word. And again, we have the opposite. So where this is not at the beginning. So let's
1081760	1090320	have a look at them in detail. So let's use another test string here. So let's, for example,
1090320	1102000	use this one. And now if we want to look for any digit here, we can simply say we want to look for
1102000	1110560	backslash d. And now if you run this, then we will see we have three matches, the digits one,
1110560	1120080	two and three. Now if we use the opposite, so capital D, so any non digit, then it will find
1120080	1129360	all the characters except one, two and three. Then let's have a look at the white space. So
1130080	1140080	backslash s finds any white space character. So here we see we have a space here, a space here,
1140080	1148880	and a space here. And then again, the opposite, so any non white space character is any other
1148880	1160960	character. So this is the s special character. Then let's have a look at the w characters. So any
1160960	1170640	alphanumeric character. So if I put in a w here, then it finds all the word characters.
1172320	1181280	And again, the opposite capital D, this will just find the spaces in this example. And now
1181280	1193120	let's have a look at the backslash B. So now if I am looking for hello, then it will find it because
1193120	1202400	it is at the beginning of a block. And a block is not only the beginning of a string, but the
1202400	1213600	beginning of any block that follows a white space character. So for example, if we look for
1214800	1226800	hay, then it will also find the hay, but it will only find this pattern and not this one because
1226800	1235280	it's looking for matches that are at the beginning of a block. So for example, if we put this
1236640	1245520	before a space, then it will find and then it will find this pattern or this match to
1246720	1251760	and again, the opposite. Now if we are looking for this, and we put
1252080	1260080	ho hay here again, then it will find this hay because it is not at the beginning of a block
1260080	1268800	where this is at the beginning of a block. So these are the special sequence, special characters
1269760	1283920	that we should know. And now let's continue with sets. So we can use square brackets to look for
1284640	1292560	sets. And let me show you what this means. So let's say we only have this string now.
1293120	1300560	But now let's say we only want to look for a non-numeric character. So only for these ones,
1301120	1312880	then we can use a set for this. So a set is a pattern between square brackets. And now here
1312880	1322320	in this set, we can use multiple characters that we want to look up. For example, we want to look
1322400	1334800	for a L and a O. And now if we run this, then it will find all these characters. And you must be
1334800	1344240	careful here because it doesn't look for L O, but for any single character that we put into this set.
1344640	1354400	And we can also specify ranges here. So we can instead of, let's say we also want to have the
1355200	1366640	H and the E, then it will find any character here that is not a number and also not the
1367360	1375120	not the underscore. So we can also specify a range here. And this is a very typical,
1375120	1386720	very common example in regular expressions to use A dash C, so A to C. So all the lowercase
1386720	1394640	characters, now if you run this, sometimes it's not saving this file automatically. So now if
1394640	1406640	you run this, then we see that we will find all the letters here. And we can also look for digits.
1406640	1414720	So let's say we want only the digits two and three. And again, here we can have a range. So we can
1414720	1424800	say one to nine. So this is or let's say zero to nine. And this will find all the digits. So this
1424800	1436960	is the same as using backslash D to find a digit. And so yeah, so if you want to specify a
1437920	1448880	range, then that the dash can be used to declare to define the range. And now if you use it after a
1448880	1455600	range, then it's looking for the actual dash. So now if you also want to look up a dash,
1456160	1464000	then we can find it here. And if you put it between two things, then it is a range. So be
1464000	1476560	careful here. And we can also write our different ranges back to back. So for example, if we have
1477600	1485520	hello here in uppercase letters, and first of all, let's say we only want the lowercase letters.
1486080	1493280	And then we also want to have all the uppercase characters from A to C, then we can write this
1493280	1504240	back to back. So we can say small a to C or a dash C, then capital A dash C. Then this will also
1504240	1512480	include all the uppercase characters. And again, we can use back to back and also include numbers.
1513280	1523760	So yeah, then it also finds the numbers here. So the digits. So yeah, so this is how we can use
1523760	1537920	sets with this brackets. And now let's talk about quantifier. So we have these quantifier, the
1538880	1550000	meta meta characters. So we have a an asterisk. So a the multiplication sign, this means zero or
1550000	1557200	more. Then we have the plus this means one or more, then we have the question mark. So this
1557200	1565440	means zero or one. And this means or this can be used when we want to look for an optional
1565520	1572560	character. So it may be there, but it may also be not there. Then if we want to look for a specific
1572560	1580080	exact number, we can use curly braces and then a number here will look for the exact number.
1581600	1589680	And then we can also specify a range with minimum and maximum. So if we put two numbers between
1589680	1597360	the curly braces, then it's looking for a range. Okay, so let's have a look at them in detail. So
1598560	1608160	let's say we have a string, let's say hello underscore 123. And now let's say we want to have
1608720	1615920	or we want to find digits. And remember, we can do this with with backslash D. And then it will
1615920	1626160	find all the digits. And let's say we want to look if we have zero or more. So then we use an
1626160	1635280	asterisk. And then it will also find all the other characters here. Because here there is no
1636560	1644560	digit, but it was looking for zero or more. And in this case, our match is just an empty string.
1645440	1652400	And then again, an empty string, empty string, empty string. And then here we have digits. And
1652400	1661760	then it will combine them into one match. So now if we just use the and use it without a quantifier,
1661760	1670320	then it puts any every single digit as one match. And if we want to look for zero or more, we can
1670320	1678160	use this with an asterisk. And now in this case, a plus is better. So we want to look for one or
1678160	1688640	more. And then we will see it has only one match. And it combined all the digits into one match.
1688640	1694640	And let's say we want to look for a digit that has an underscore in front of it. So let's say we
1694640	1704400	want to look for underscore and then the digit, then it will find the one. And but now let's say
1704400	1710320	we don't know if there is an underscore or not. So now if the string looks like this,
1711120	1717920	and then if we run it, then it doesn't find a string, a match. And then we can say that the
1718000	1727680	underscore is optional by using the question mark. And now if we run it, it finds all the matches,
1728720	1735840	because it doesn't has an underscore. And now if we do it like this, then it will
1737520	1746400	find the same matches because it can also have an underscore here. So this is the question mark.
1747120	1755680	And now let's talk about specific ranges or a specific number of
1757760	1766240	characters. So now if you want to look for three digits, then we can say a digit and then curly
1766240	1773920	raise and then three, then it will find our match. So now if we are looking for four of the digits
1773920	1780560	and run it, then we don't have a match. And we can also use a range here. So this can be between
1780560	1790640	can be between one and three. And then it will also find the match. So these are the quantifiers.
1791280	1797040	Now let's stop for a second with all the concepts and just make or just do an example.
1797600	1805600	So let me copy this string here. And now let's use some of the concepts that we already know.
1808240	1816800	So let's say our string is now the date string. So this is dates in different formats. So for
1816800	1825120	example, here, we have the day and the month and then the year and this is separated by a colon.
1825120	1833440	Then here it's the year first, then a colon, then here we have year, month and day separated by a
1833440	1842960	dash and here by a slash and also by an underscore. And now let's say we only want to extract
1844080	1853200	the dates with this format. So year, month and day, and only with a dash in between. So
1853200	1862960	let's do this. So the first thing we can do is now here is to look for
1865520	1874400	this pattern. So four, two and again two digits. So we can write this up. So backslash d backslash
1875280	1886880	d. And then let's say first of all, we want to look for any character between. So remember,
1886880	1893920	the point is a meta character. So this is looking, if you have a look at this here,
1893920	1902320	this is looking for any character except new line. Then we have two digits. So backslash d,
1902320	1910400	then again, we can have any character and then d and backslash d. So for example,
1910400	1916800	if our string has also some text in it. And now if we run this,
1919440	1927520	now it's called dates, the string. Now if we run this, then it will find all the
1928320	1939200	all the states with with the numbers, but only in this format. So four, two, two. So for example,
1939760	1946880	it didn't put the text here, the hello text in here. And it didn't put this date in here because
1946960	1962000	it has a different format. So now this is our first try. And now what we can do here is, for
1962000	1970240	example, the next thing we want to do is to find only these in this format. So now let's have a
1970240	1979760	look at, so let's exchange the dot by a dash. So this is looking for an actual dash. And then we
1979760	1990640	have only the dates in this format. So four, two and two numbers separated by a dash. And let's say
1990720	2002080	we this may also be a valid date. So we can also looking for a slash as a separator here. So then
2002080	2012320	we can use a set. So remember a set is defined in square brackets. And then we can define the
2012320	2020240	characters that may be at this position. So for example, we have a dash. And we have also or may
2020400	2030800	have a slash. And again, here we are using a set. So then we have dash slash and are closing our set.
2030800	2040720	And now if we run this again, then we see, sorry, we see that this is also included in the matches.
2040720	2051520	And now let's say, for example, we are looking only for dates in May or June. So how do we do
2051520	2062720	that? So the month here. So what we do here is now this is not any digit. So here we are only
2062720	2074400	looking for month 05 and 06. So we always have a zero here. And then we can again use a set.
2075120	2083440	And here we can use, let's say only five and six. And now if we run this, then we only have the
2083440	2091440	dates in May or June. And remember, we can also use a range here. So let's say we want to have
2092080	2102160	May, June and July, then we can say five to seven. And then we have all the dates from May to July.
2103040	2113280	And now let's use a quantifier here. So instead of writing for these here, backslash D, we can say
2113280	2123440	D and then curly braces and use the quantifier for so we want to have exactly four digits here.
2123440	2132880	And here we want to have exactly two digits. So then we can do it like this. So this finds all
2132880	2141920	the dates in May, June or July in this format. So this is one typical example how regular
2141920	2150720	expressions are useful. And yeah, so now let's continue. So we already covered a lot here.
2150720	2161840	So let's talk about conditions next. So let me copy another string and do another example.
2162480	2171520	So here I have another string with some names. So let me copy and paste this here. So this is
2171520	2179840	my new string. So here we have a Mr. Simpson, a Mrs. Simpson, a Mr. Brown, a Miss Smith,
2179840	2195120	and a Mr. T. And sometimes we have a dot between Mr. And sometimes not. And now let's just extract
2195120	2203760	all the different names here. So for example, there's some more in our files. So for example,
2203840	2220480	we have Hello World 123 date. And now we only we want to extract only the names and we want to
2220480	2232480	have the whole name. So let's build up our pattern here. So let's look for Mr. First. So first we
2232480	2245760	want to look for a Mr. So Mr. And then we have a white space. So backslash s. And then we have one
2245760	2256560	or more characters, so word characters. So here we use a backslash w. And then we say plus. So this
2256640	2267440	remember this is a quantifier. So one or more. And then I'm looking for the my string here. And I don't
2267440	2274480	actually write the space here because I have this backslash s. And now if I run this, then we see
2274480	2286080	that we have one match here. So this is our Mr. Simpson. So here we have the m r and then a space
2286080	2295760	and then one or more word characters. And now as a next step, let's also include a Mr. Where we
2295760	2305600	have the dot here. So we can have the dot. And now if you just write it like this and run it,
2306480	2314000	then it finds a sorry, I have to use backslash dot, of course, here, because it's looking for an
2314000	2323680	actual, I want to look for the actual dot. And now it only finds Mr. Brown and Mr. T, but not Mr.
2323680	2332320	Simpson anymore. So now as we just learned, we have the optional quantifier with a question mark.
2332320	2341680	So now let's make our dot optional. And now if we run this, then we have all the Mr. And
2342640	2352720	now let's talk about where conditions are useful. So in this case, we may not only have Mr, but we
2352720	2361840	may also have a miss or a misses. So then we can use a condition. So we use parentheses here.
2362560	2372640	And then we separate them. So let's have a look at this here. This meta character is the either or.
2373440	2387920	So now if we use this, we can write Mr or miss or misses. And then if we run this, then we see
2388880	2398640	it extracted all the names from this text. So this is where a condition is useful.
2399600	2409840	And as we have just seen, we grouped this condition together with the parentheses. So this is
2410800	2421040	again one meta character. And now let's talk about grouping a little bit more. So let's do
2421040	2431760	another example for this. This is also a typical example. So let's copy some emails into our text.
2432560	2439440	And let's say we only want to extract the emails from this string here.
2440160	2452560	So again, let's build up our pattern. So what we can do here is we can use sets to do this.
2453520	2460560	So let's build this up. So let's say we want to have some characters here.
2461600	2469200	So this may be word characters, but this may also be a dash and numbers.
2470800	2479760	So let's use a set here and let's use back to back ranges here. So we can use small a to c
2480560	2492080	or capital A to C, or also the digits zero to nine. Or we may also have a dash here.
2492800	2502640	So now we are you looking for any of these characters here. And we want to have multiple
2502640	2512640	of them. So we say we want to have multiple. So one or more. So this combines this group into one
2512640	2522320	match. And then it is followed by an add sign. So now if we compile this and run this, then we see
2523040	2533760	that it extracted all these patterns here with any words or numbers or dashes and then an
2533760	2546000	add sign. So this is the name before the email. And then our email can have different domains.
2546000	2555840	So for example, we have at gmail.com at gmx.de or at my domain or my dash domain dot org.
2556400	2565280	So we want to extract all the different domains. And the next thing we want to look is to look for
2565280	2572000	only for word characters. So the domain doesn't have a digit in it.
2572960	2583040	So the only allowed characters are let's use another set. And here we use again, maybe a to c,
2584080	2593520	a capital A to C, and also a dash. And then we have the dot. So now let's run this.
2594480	2607360	And of course, there are again, one or more. So here I have to do a plus. And then it's looking
2607360	2618480	for one or more. So now we see our match also includes the domain name and the dot. And then
2618560	2629760	here at the very end, let's do another set. So here we say our ending. For example, we can say
2629760	2640640	here we have dot. Sorry, again, I missed, I was not looking for an actual dot here. So this is a
2640640	2650320	typical mistake that I make. So now it for example, it would have also found this one here. But this
2650320	2656720	is not a valid email address. So I have to look for the actual dot by using the backslash.
2658400	2668640	And then let's say I'm looking only for dot com. But it can also be dot de or dot org. So for
2668640	2680000	example, I can use a group here by using parentheses and then use the condition here com or de or
2680000	2691200	dot org. So now it would only find these endings here. And now let's not use a condition. But
2691200	2697840	I just wanted to show you the condition here again. But we can also just use a set here. So
2697840	2711280	let's use the set. And again, here, we may have a to C and a to C and capital and then one or more.
2712720	2723920	And no digits here. So now if you run this, then this will extract all the emails for us. So this
2723920	2731760	is a typical regular expression pattern to look for emails. And this is what I showed you in the
2731760	2740320	beginning. So now you understand what this means. And now let's talk about grouping a little bit
2740320	2748240	more. So there was one case just where I used the condition and then I have had to use parentheses.
2749200	2759840	But we can also explicitly group our match object here into different substrings. So for example,
2759840	2773280	I can put all of these before the ad sign into a group. So now let's use parentheses. And then
2773440	2786080	let's use the ad sign. And then let's use the domain name. So this is one group until the dot.
2786800	2798080	And then we have one group to have the ending here. And now we have three groups here.
2798560	2807200	And as I showed you in the beginning, now if we run this, then this will give the same results.
2807200	2818240	And here we are printing the whole match object. And then we can use the dot group to return the
2818240	2826560	actual string. And this is by default, this is group zero. So this is the whole match string.
2826640	2836480	But now we can also print the single groups that we just defined. So for example, we have group one,
2836480	2843600	two and three now. And now if we run this and print this, then we see,
2845760	2853120	let's just print the group one for now. Here, let's comment this out too.
2853840	2863440	Then we see it only prints this group here. So only the name of the email before the ad sign.
2863440	2869760	Then here this is the second group. So now if we print the group two, then this is
2870720	2878080	the domain name. And if we want to have the ending, then we can print group three.
2878640	2886880	So this is where grouping is useful. If we only want to have a look at specific things in our
2886880	2896000	match, then we can use parentheses. Now let's move on. So now let's see, we talked about grouping.
2896000	2905520	Now let's talk about modifications. So we have two methods to modify a string.
2906160	2915920	So we have the split method and we have the sub method. So let's talk about both of them.
2915920	2922880	So the split method will split the string into a list and splits wherever our
2923680	2930720	regular expression matches. And the sub method will find all substrings where the regular
2930720	2938080	expression matches and replaces them with a different string. So let's look at two examples.
2938720	2947920	So let's say, let me grab a string here. So let's use this one again.
2948640	2959520	So this is our test string. And now we use the pattern equals our e.compile and then we are
2959520	2973120	looking for the raw string 123. Sorry, let's use a different one. Do I have it here? No, let's write
2974080	2989840	it myself. So let's say abc123abcdef and capital letters again 123 and abc. And now let's say
2989840	3001440	this is our pattern. So 123. And now we say our split it equals and then we say pattern dot split
3002160	3010640	and give the test string as argument. And now let's print this split it. Now this will be a list
3012560	3024160	where our string split it. Oh, sorry, this was a bad example. So let's use abc as split. And then we
3024160	3034800	have splits where it's split it our string into different substrings and use this pattern here
3035600	3046000	as the split. So here as the matching split. So here it has abc. So it's split it our string into
3046000	3055840	this part. So there we have 123. And then this part. And then it found our pattern again abc.
3057440	3063680	And then again, it's split it the string. And then at the end, we have the rest of the string. So
3063680	3071920	this is the third substring that it found and and returned with this split method. So this is the
3072000	3082480	split method. And now the sub method with the sub method, we find all the substrings where our
3082480	3091440	pattern matches and then replace them with a different string. So let's say our test string
3091440	3104640	equals hello world. And then let's say you are the best world. And use the so we use the word
3104640	3114960	world two times. And then let's say we want to look for the pattern world. So we say pattern equals
3114960	3127680	re.compile. And then an R raw string. And here we have world. And then we say our sub string
3128320	3138160	equals and then we use pattern dot sub. And then what we want to put in as replacement,
3138800	3145520	let's say we want to put in planet. And we also have to put in the test string.
3146240	3156720	Now it took our test string, looked for all the matches where pattern matches. So it looked for
3156720	3164880	world and replaced them with planet. So now this will return another string that was modified.
3164880	3173360	And now if we print this, then we see it printed hello planet, you are the best planet. So this
3173360	3185120	is the sub method. And now let's do another example to combine all that we have learned.
3186000	3192240	And again, use the sub method. And yeah, so let's do this. So
3194640	3203760	so let me grab this string here. So this is our URL strings. So here we have, again, let's say we
3203760	3216240	have different things here. And then we are only looking for URLs, but they may have different
3216240	3229600	formats. So for example, we have an HTTP URL, an HTTPS URL. And then sometimes we have a www
3230240	3239440	and sometimes we don't have this. And then we have the typical domain name and ending.
3240480	3251520	So yeah, so let's extract this. So let's build up our pattern again. So pattern equals re.compile and
3251520	3263440	then a raw string. So now let's start by saying it starts with HTTP. And then a colon and two slashes.
3264320	3278160	And then we have www and then we have a dot. So an actual dot. And then we have
3278720	3293920	one or more word characters. So for example, we can use a set here again and use a to c and
3293920	3306480	uppercase a to c and also a dash here. So like here. And so then we have a plus. So one or more.
3307520	3316800	And let's put this into a group here right away. So this will return the same thing.
3317520	3327120	And then we can later use this group here. And the next thing we again have a dot. So
3327120	3337840	backslash dot. And then again, we can use a set here a to c and capital A to C.
3338800	3349120	And now let's try this out. So let's say matches equals pattern dot find iter.
3349840	3362160	And then we call this urls. And then for match in matches, we want to print the match. And let's
3362240	3370000	try this and run this. And then we see we made some mistakes here. And this is because here I
3370000	3380800	have to say plus, of course, so one or more. And now it only found this URL, because it didn't
3380800	3390960	find this one because we have HTTPS here. And this one doesn't have www. So the first thing
3390960	3398640	we can do here is to use an s. And this is an optional s. So remember s question mark. So this
3399840	3406960	is optional then. And if we don't put this into a group, then the question mark will only refer
3406960	3416480	to this character here. So now let's try this out. And now we see it also found the HTTPS URL.
3417280	3426320	And now the same thing with the www. So this may be there or may not be there. So again,
3426320	3434320	let's put this into a group. And then use an question mark to make this optional. And now if
3434320	3442560	you run this again, then it still doesn't find it. And this is because our it must be www.
3442560	3450880	So backslash dot, which must be optional. And then I don't need it here anymore. So let's
3450880	3460240	run this. And then we see that it found all of the URLs and extracted them. And now let's say
3460240	3468160	our string has only the URLs here. And now let's say we want to return a new string,
3468800	3477680	where we replaced all of these optional beginnings. So it should only print the actual domain name
3477680	3486080	with the ending. So as we have learned, we can use the sub method. So we can say,
3488080	3496880	instead of just finding the matches, what we want to do here is let's also print this. And then
3496960	3507840	let's say our sub URLs equals and then we use pattern and then sub. And then what we want to
3507840	3520080	put in the replacement here. So for example, if we just say hello, and then URLs as a string and
3520080	3534880	then print the sub URLs. So then we see that this is the new string here. So it's replaced all of
3534880	3547200	the matches with hello. And now let's say we only want to put this in our string and only this,
3547920	3559360	then what we can do here is we can group this and we already did this. So we have a group here,
3559360	3570320	we have a group here. And let's also put this into our group into a group. And then what we
3570320	3581120	can do is we can use back references to replace them. So here we can say backslash two and
3583360	3595440	we must use a string so a raw string. And then we say backslash two and backslash three. And now
3595440	3605520	if we run this, then this is our new string. So if I comment this out, then we see, then this is our
3605520	3614720	new string. And what happened here, again, if we have a look at the group, so we can say,
3615360	3622800	let's print all the different groups. So we have match dot group. So this will be the whole
3623600	3634160	string. And now, so this is group zero again. Now let's have a look at what is group one.
3634720	3645600	So for example, here, this is the group one, the first one in parentheses. And because this may
3645920	3655200	optional, this may also be none. So the first URL has none as the first group because it doesn't
3655200	3664800	have w w w. And this is the first group. So now let's print the second group. So this is the actual
3665360	3673040	name of the domain. So the beginning. And then the group three is the ending so dot com dot com
3673040	3683040	dot net. And now here we use this group two and group three with this back reference. And then
3683040	3690320	replace the whole found pattern only with the domain name. So this is what happens here.
3691040	3698320	And so this is also very often used in regular expressions. And now you know what this means.
3699680	3708480	And I guess now we are almost through with all the context, all the things that I wanted to
3708480	3718320	show you. And now as a last thing, let's quickly talk about compilation flags. So when we compile
3718320	3727280	the pattern, then we also have to option to use different compilation flags. So here I listed
3727280	3732960	them. And again, you don't have to remember them, just keep a cheat sheet. So here we have the
3732960	3742480	different compilation flags. So ASCII dot all ignore case local multi line or verbose.
3742720	3749520	So I recommend that you check out the official documentation to see what all of them mean
3749520	3757600	in detail. And now I just want to show you the ignore case compilation flag. So this is also a
3757600	3771600	very common use case. So let's say we have the string my string equals hello world. And then
3772560	3782800	we want to look for the string world. And now if we compile this, and then try to find the matches
3782800	3794320	and print them. So print the match. Now if you run this, sorry, this is called my string. Now if
3794320	3802640	we run this, then it doesn't find a string. So because remember, this is case sensitive. Now if
3802640	3812400	you make a capital W, then it finds the match world. And let's say we don't know what our string is.
3812400	3819040	So it may be uppercase, but it may not be uppercase. So it doesn't matter for us. Then we can just
3819200	3829600	use the compilation flag, our e dot ignore case. So we can write this out. So we can say ignore
3830240	3844880	case. Or we can just say our re dot I. And then if we use a small w, then it will still find the
3844880	3852640	match. And because now it ignored the cases. So this is the ignore case compilation flag.
3852640	3860400	And now, yeah, you also have these compilation flags. So I recommend that you check them out
3860400	3866800	for yourself. I will provide a link to the official documentation in the description.
3867360	3873920	And now I think we are done. And now you should be able to understand all the different
3873920	3879680	regular expressions. I hope it wasn't too complicated for you. And I hope you enjoyed
3879680	3884400	this tutorial. If you like this, then please consider subscribing to the channel and leave
3884400	3887040	me a like and see you next time. Bye.
