1
00:00:00,000 --> 00:00:05,840
Hi everyone and welcome back to Datafile. Today I'm very excited. We're gonna go

2
00:00:05,840 --> 00:00:11,280
through the highlights of Julia 1.6 and basically what's new in the version and

3
00:00:11,280 --> 00:00:18,680
how it's gonna improve our life as Julia developers. So let's check it out.

4
00:00:18,680 --> 00:00:32,200
Okay so let's move to the Julia website here. I'm gonna make this link

5
00:00:32,200 --> 00:00:37,520
available in the description so you can check it out. And this is the blog. This

6
00:00:37,520 --> 00:00:44,720
is Julia's blog. This is Julia's website. And you can see over here they so if I

7
00:00:44,720 --> 00:00:50,840
go to the blog list they have a couple blogs dating back from a while ago.

8
00:00:50,840 --> 00:00:57,280
This is the latest one as of today. And here are all of the new things which are

9
00:00:57,280 --> 00:01:04,920
brought to life in Julia 1.6. So Julia 1.6 might be the new long-term stable

10
00:01:04,920 --> 00:01:09,760
which is kind of a big deal. Meaning that this is the one we may be using for a

11
00:01:09,760 --> 00:01:14,160
while. It's not just some version that they're gonna throw away very soon. Okay

12
00:01:14,200 --> 00:01:19,160
so let's dive into the new features. You can read the whole thing if you're

13
00:01:19,160 --> 00:01:23,400
interested. I'm gonna leave the link in the description. Here they mentioned that

14
00:01:23,400 --> 00:01:30,120
they're not sure whether 1.6 or 1.7 is gonna be the new LTS. Okay well

15
00:01:30,120 --> 00:01:36,560
basically so just an overall view on Julia 1.6. What they improve the most

16
00:01:36,560 --> 00:01:42,600
is speed, speed, speed. And this is great especially for a first time run

17
00:01:42,640 --> 00:01:47,560
because we had this problem as I mentioned in previous videos that the

18
00:01:47,560 --> 00:01:51,760
first time you run a cell in Julia it's gonna take a while and they did their

19
00:01:51,760 --> 00:01:54,960
best to reduce it as much as possible. Obviously they're going to do more

20
00:01:54,960 --> 00:01:59,520
changes in order to make it even better but as of today there is quite a

21
00:01:59,520 --> 00:02:04,280
substantial difference with before this version already. Okay so parallel

22
00:02:04,280 --> 00:02:09,640
pre-compilation so that the whole idea of these things is that you're trying to

23
00:02:09,680 --> 00:02:13,840
import the packages as fast as possible because I believe differential

24
00:02:13,840 --> 00:02:18,360
equation is a pretty heavy package but I haven't used it myself so I can't say

25
00:02:18,360 --> 00:02:24,040
for sure. But basically packages which take quite some time are a problem and

26
00:02:24,040 --> 00:02:29,440
obviously Julia team want to reduce that time. So here what they also included

27
00:02:29,440 --> 00:02:34,240
this thing this new animation and we're gonna see it here. I'm gonna I'm gonna

28
00:02:34,240 --> 00:02:37,800
show you that video so you can see what's going on. So you see they're

29
00:02:37,840 --> 00:02:43,720
adding this images package and here you have the progress as you're

30
00:02:43,720 --> 00:02:47,800
downloading the package which is great. It's nice to see that everything

31
00:02:47,800 --> 00:02:54,120
is going fine and as expected. And yeah this I experienced myself when I

32
00:02:54,120 --> 00:03:01,120
installed Julia 1.6 you can you see the dependencies coming in and coming out

33
00:03:01,120 --> 00:03:06,760
and it's really nice not to just have that black box. Python for instance if

34
00:03:06,800 --> 00:03:11,720
you install things from Jupyter notebook with the pip install you get just a

35
00:03:11,720 --> 00:03:15,400
black box. You know that the cell is running hopefully it's installing but

36
00:03:15,400 --> 00:03:20,000
you're not sure even though you don't get an error sometimes things might happen.

37
00:03:20,000 --> 00:03:23,920
So it's just yeah it's really nice to get to get this animation and you see

38
00:03:23,920 --> 00:03:28,440
here they're using images and it loaded pretty quick and now they have access to

39
00:03:28,440 --> 00:03:34,760
this package. So that's great I'm all for it I'm very happy about that it's a

40
00:03:34,760 --> 00:03:41,480
nice cool feature obviously it's not gonna revolutionize coding but it's

41
00:03:41,480 --> 00:03:46,840
just a nice feature to know what's going on. Compile time percentage so here

42
00:03:46,840 --> 00:03:52,480
that's maybe not as important I would say they include the compilation time

43
00:03:52,480 --> 00:03:56,880
when you talk about the runtime so they use this time and time verbose things

44
00:03:56,880 --> 00:04:02,960
to measure the time that running code takes. Eliminating needless to

45
00:04:03,000 --> 00:04:08,160
compilation which is great basically you use some code and then you reuse the

46
00:04:08,160 --> 00:04:12,920
same code later and depending on when you use that code in the past Julia is

47
00:04:12,920 --> 00:04:16,640
gonna sometimes throw it away too much and you shouldn't throw it away as much

48
00:04:16,640 --> 00:04:23,280
as it does and they're trying to fix that here. They're trying to make it so

49
00:04:23,280 --> 00:04:28,360
that if you use code and you still need it at some point in the future Julia is

50
00:04:28,360 --> 00:04:31,600
not throwing it away so it's gonna be able to reuse it to gain some speed in

51
00:04:31,640 --> 00:04:37,240
the future in the future runs of codes for instance in Jupyter Notebooks if

52
00:04:37,240 --> 00:04:43,200
you have many cells and you want to run third cell but the first cell has some

53
00:04:43,200 --> 00:04:47,960
codes which you still need instead of Julia having to recompile and redo the

54
00:04:47,960 --> 00:04:53,200
run of the first cell under the hood it's gonna be way faster and it's gonna

55
00:04:53,200 --> 00:04:59,920
keep those codes in memory or it's gonna be able to reuse them. Compile a

56
00:04:59,960 --> 00:05:04,480
latency reduction so all of these are kind of achieving the same purpose I'm

57
00:05:04,480 --> 00:05:08,800
just gonna go quickly through those tooling to help optimize packages for

58
00:05:08,800 --> 00:05:12,640
latency so you see this one word which comes all the time it's latency and it's

59
00:05:12,640 --> 00:05:18,480
obviously related to speed loading speed ups binary loading speed ups so they

60
00:05:18,480 --> 00:05:21,080
understood the problem they understood that they have this community of

61
00:05:21,080 --> 00:05:25,840
developers and these people are used to Python they're used to all the languages

62
00:05:25,840 --> 00:05:29,680
or maybe they're just starting on the language but they don't want to take too

63
00:05:29,720 --> 00:05:33,800
much time to run their code and they just want to have things being done quick

64
00:05:33,800 --> 00:05:39,320
because in Python and in R and in all the languages that's how it happens so

65
00:05:39,320 --> 00:05:43,960
they don't want to spend one minute importing a package if Python can do it

66
00:05:43,960 --> 00:05:47,800
in five seconds obviously so if Julia wants to compete it's gonna have to do

67
00:05:47,800 --> 00:05:52,240
that and I'm very happy that they put the accent on this because the first run

68
00:05:52,240 --> 00:05:59,200
time being huge I mean personally I'm taking the hit because I'm all for Julia

69
00:05:59,200 --> 00:06:04,480
and I love language no matter what but I can understand that someone who's a new

70
00:06:04,480 --> 00:06:09,320
comer to the language would not be happy with with waiting one minute for the

71
00:06:09,320 --> 00:06:15,040
first run to happen that's if you have Python doing it in five seconds it's

72
00:06:15,040 --> 00:06:20,960
not acceptable anyway this is a this is a nice graph I think they're measuring

73
00:06:21,000 --> 00:06:30,480
whatever GTK3 whatever I don't personally know this I guess the package anyway

74
00:06:30,480 --> 00:06:37,160
what's important is so these are the versions version 1.3 1.4 1.5 1.6 and

75
00:06:37,160 --> 00:06:45,400
they're measuring the time that this this thing whatever it is takes and you

76
00:06:45,400 --> 00:06:49,440
can obviously see that things are going down so initially we had the blue

77
00:06:49,440 --> 00:06:54,000
curve with those old wrappers and they included some new wrappers which I may

78
00:06:54,000 --> 00:06:59,920
have missed it's part of the binary loading speed-ups I guess and they

79
00:06:59,920 --> 00:07:05,360
included some new JLL wrappers whatever they are anyway bottom line for for

80
00:07:05,360 --> 00:07:09,840
anyone using Julia and who doesn't know those things under the hood is that

81
00:07:09,840 --> 00:07:15,400
speed is going up so time time taken is going down and it's going down it's

82
00:07:15,400 --> 00:07:21,360
going down really significantly like we used to have six or seven seconds to

83
00:07:21,360 --> 00:07:26,200
load that package just like a couple like three versions ago and as of today

84
00:07:26,200 --> 00:07:33,520
it's it's almost instantaneous so this is insane I'm very happy that they made

85
00:07:33,520 --> 00:07:38,160
those changes and I don't personally understand all the things happening under

86
00:07:38,160 --> 00:07:44,720
the hood but whatever it is if if you can reduce the time taken by whatever it

87
00:07:44,720 --> 00:07:53,680
is like 30 30x well I am all for it so I don't know how they do that I I'm not

88
00:07:53,680 --> 00:07:59,360
familiar with the computer science technical things going on in the

89
00:07:59,360 --> 00:08:04,120
Julia repos but I'm very happy about that and I wanted to report to you so

90
00:08:04,120 --> 00:08:08,520
that you have an idea of of how fast things are changing because they they

91
00:08:08,520 --> 00:08:11,360
are talking I'm gonna maybe I'm gonna show you later but they're talking about

92
00:08:11,680 --> 00:08:16,000
the next version being in a month so I don't know if they had that timeline as

93
00:08:16,000 --> 00:08:20,000
well for the previous versions but if that's the case it's gonna it's absolutely

94
00:08:20,000 --> 00:08:27,960
workers yeah downloads and networking options by Stefan Karpinski by the way

95
00:08:27,960 --> 00:08:30,720
there's a bit of drama going on on Reddit I don't know if you if you saw that

96
00:08:30,720 --> 00:08:36,080
but it's on the on the subreddit of Julia there's a little bit of drama with

97
00:08:36,240 --> 00:08:42,200
like some guy insulting Stefan Karpinski and and yeah the whole community

98
00:08:42,200 --> 00:08:45,640
crushing this guy so I'm very happy about the community as well on the

99
00:08:45,640 --> 00:08:49,520
subreddit of Julia if you haven't seen that you should check it out it's it's a

100
00:08:49,520 --> 00:08:53,480
beautiful community people are helping each other it's a small community it's

101
00:08:53,480 --> 00:08:57,760
it's kind of the birth of Julia still even though the language wasn't created

102
00:08:57,760 --> 00:09:02,800
yesterday but it's still pretty new and and the community is small and still

103
00:09:02,800 --> 00:09:06,920
beautiful I hope we're gonna be able to keep it that way anyway that was a side

104
00:09:06,920 --> 00:09:11,520
story but yeah you can see that you can tell that they really understand the

105
00:09:11,520 --> 00:09:16,400
the problems it's loads and consistent it's inflexible they I think they're

106
00:09:16,400 --> 00:09:21,040
really listening to their community and you can also show that because they

107
00:09:21,040 --> 00:09:25,800
report github issues so github issues I don't know if you're familiar with that

108
00:09:25,800 --> 00:09:30,800
but basically you have people going on the Julia repository and saying okay I

109
00:09:30,800 --> 00:09:35,720
have this problem I would like to I would like this bug to be fixed or they

110
00:09:35,720 --> 00:09:39,200
could say okay I have this idea of new feature could you guys do that is it

111
00:09:39,200 --> 00:09:43,680
possible and basically you have the the actual people who work on the Julia

112
00:09:43,680 --> 00:09:48,720
project who who try to change those things which people are not happy with

113
00:09:48,720 --> 00:09:55,320
that's one possibility another possibility is that someone says okay I

114
00:09:55,320 --> 00:09:59,640
have this issue could anyone fix it and it can also be anyone from the

115
00:09:59,640 --> 00:10:04,080
community from the Julia community which I talked about before and just

116
00:10:04,080 --> 00:10:07,680
someone coming and saying hey I've got this bug this this fix I think it's it

117
00:10:07,680 --> 00:10:13,640
fix your bug and you ask it to be included in the new code and and so that

118
00:10:13,640 --> 00:10:18,960
it fixes this bug for everyone not just not just you on your machine who managed

119
00:10:18,960 --> 00:10:23,560
to fix it so this is the whole idea of open source it's a very beautiful thing

120
00:10:23,560 --> 00:10:28,920
if you're not familiar with it you can it's be careful it's addictive you just

121
00:10:28,920 --> 00:10:33,720
start with it and and after a while you anything not open source you start

122
00:10:33,720 --> 00:10:38,240
having bad thoughts about it because it's the whole idea of free and open

123
00:10:38,240 --> 00:10:44,840
sorry free and open source software is is really beautiful anyway talking about

124
00:10:44,840 --> 00:10:51,680
that they have this CI robustness so it's actually pretty related to that so

125
00:10:51,680 --> 00:10:56,200
basically they they had the tests so anytime someone makes this kind of

126
00:10:56,200 --> 00:11:02,560
changes on the code so they say I've got this code it fixes whatever they have

127
00:11:02,560 --> 00:11:05,560
to make it run through a couple tests to make sure that it's not breaking the

128
00:11:05,560 --> 00:11:08,560
whole system because you don't want to fix one bug and then break everything

129
00:11:08,560 --> 00:11:13,080
else right so that's what they had that's the problem they had so CI stands

130
00:11:13,080 --> 00:11:18,680
for continuous integration you can see here and basically they had a couple

131
00:11:18,680 --> 00:11:23,000
tests to make sure that everything was working fine with the new code which was

132
00:11:23,000 --> 00:11:28,200
included in and and some of these tests if I understood correctly some of these

133
00:11:28,200 --> 00:11:33,440
sets always failed so now they if I understood correctly they're trying to

134
00:11:33,440 --> 00:11:39,960
change the tests or make it so that the code can the review of the code in

135
00:11:39,960 --> 00:11:47,040
order to include it in the in the whole Julia code this review is going to be

136
00:11:47,040 --> 00:11:51,280
made if not easier at least at least better that's going to improve those

137
00:11:51,320 --> 00:11:56,440
things so yeah obviously if we can have better review of code it means we can

138
00:11:56,440 --> 00:12:02,120
have people including more code which maybe was not classified properly before

139
00:12:02,120 --> 00:12:06,200
so maybe they were saying nope sorry the code doesn't pass this this test and it

140
00:12:06,200 --> 00:12:09,840
should have passed the test and be included all the other way around so

141
00:12:09,840 --> 00:12:15,280
overall good testing is also part of the of the developing process and only with

142
00:12:15,280 --> 00:12:19,400
good testing can you can you have efficient contributions from the

143
00:12:19,400 --> 00:12:26,960
community what else we got improved stack trace of formatting so yeah this is

144
00:12:26,960 --> 00:12:31,600
this is ugly right I mean you don't really know what's going on I mean it's

145
00:12:31,600 --> 00:12:36,800
it's kind of the code you see in your in your shell in your terminal but it

146
00:12:36,800 --> 00:12:41,880
doesn't I mean to me you wouldn't mean much and this is the new trace so you

147
00:12:41,880 --> 00:12:47,160
can see here all stack trace and this is the new stack trace and I mean it's

148
00:12:47,160 --> 00:12:54,360
just way clearer right it's so much more beautiful for me as someone outside of

149
00:12:54,360 --> 00:13:01,080
this like computer science community because I'm a mathematician this is

150
00:13:01,080 --> 00:13:05,840
way cleaner up this I can start wondering what's going on and look into my

151
00:13:05,840 --> 00:13:11,400
errors and try to to fix those errors before that it was it's not as clear I

152
00:13:11,400 --> 00:13:14,640
mean if you've got this you're not you're not gonna dive into it right I mean

153
00:13:14,640 --> 00:13:20,720
personally it doesn't make me want to dive into that it's it's it's not clear

154
00:13:20,720 --> 00:13:26,640
it's kind of a mess and yeah this is this is way easier to dive in hopefully

155
00:13:26,640 --> 00:13:31,480
they I don't know if this new version of Julia is gonna improve that but hopefully

156
00:13:31,480 --> 00:13:37,480
they're gonna improve the errors they throw because sometimes I'm gonna say

157
00:13:37,480 --> 00:13:42,560
they're not great you have errors and it's just telling you this not working

158
00:13:42,560 --> 00:13:47,520
and and you don't really know what to fix and hopefully they're gonna change up

159
00:13:47,520 --> 00:13:52,080
because because it's really hard to debug your code if you don't have the

160
00:13:52,080 --> 00:13:57,600
proper errors being thrown so hopefully this fixes this issue as well I don't

161
00:13:57,600 --> 00:14:03,880
know if it goes that deep or I hope it's not just the the formatting and the

162
00:14:04,640 --> 00:14:12,600
prettiness of the the error thrown but yeah we shall see only only after coding

163
00:14:12,600 --> 00:14:17,600
only after testing out the code you can you can decide whether you think that

164
00:14:17,600 --> 00:14:23,120
the errors are good or bad and if they actually give you information about what

165
00:14:23,120 --> 00:14:30,640
the error is okay yeah so yeah it seems it seems like they're actually doing

166
00:14:30,640 --> 00:14:34,800
that are gonna things are in methods are now shown which is great if you don't

167
00:14:34,800 --> 00:14:40,120
even know which method your has an error that's impossible to debug the function

168
00:14:40,120 --> 00:14:44,280
name was made to be more emphasized yes yes so this is probably just some

169
00:14:44,280 --> 00:14:50,360
formatting things which is great obviously it's helping you through your

170
00:14:50,360 --> 00:14:54,440
developing process and and through your coding in general so that's that's

171
00:14:54,440 --> 00:14:59,880
awesome the modules were the modules where the method is defined is now shown

172
00:14:59,920 --> 00:15:04,360
that's great just basically just give me more information that's all I want and

173
00:15:04,360 --> 00:15:09,440
anything going in that direction like those things which seem to be that I'm

174
00:15:09,440 --> 00:15:14,080
all for it I'm all for it and please enjoy the release that's probably the

175
00:15:14,080 --> 00:15:21,520
most important phrase right so and yeah let us know so they're very open to to

176
00:15:21,520 --> 00:15:29,080
new ideas and and just people contributing and telling them what's

177
00:15:29,120 --> 00:15:32,680
going on and what's not working so without we're gonna we're gonna bring

178
00:15:32,680 --> 00:15:39,240
the video to a close thank you for for for watching it if you have any any

179
00:15:39,240 --> 00:15:46,760
comment anything I missed you can you can let me know in the comments if you if

180
00:15:46,760 --> 00:15:49,640
you haven't already you can subscribe you can like the video that would be that

181
00:15:49,640 --> 00:15:56,280
would be awesome and with that we'll see you next time thanks for joining

182
00:15:59,080 --> 00:16:02,100
you

