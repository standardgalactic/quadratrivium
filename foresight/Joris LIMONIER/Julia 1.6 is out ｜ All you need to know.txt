Hi everyone and welcome back to Datafile. Today I'm very excited. We're gonna go
through the highlights of Julia 1.6 and basically what's new in the version and
how it's gonna improve our life as Julia developers. So let's check it out.
Okay so let's move to the Julia website here. I'm gonna make this link
available in the description so you can check it out. And this is the blog. This
is Julia's blog. This is Julia's website. And you can see over here they so if I
go to the blog list they have a couple blogs dating back from a while ago.
This is the latest one as of today. And here are all of the new things which are
brought to life in Julia 1.6. So Julia 1.6 might be the new long-term stable
which is kind of a big deal. Meaning that this is the one we may be using for a
while. It's not just some version that they're gonna throw away very soon. Okay
so let's dive into the new features. You can read the whole thing if you're
interested. I'm gonna leave the link in the description. Here they mentioned that
they're not sure whether 1.6 or 1.7 is gonna be the new LTS. Okay well
basically so just an overall view on Julia 1.6. What they improve the most
is speed, speed, speed. And this is great especially for a first time run
because we had this problem as I mentioned in previous videos that the
first time you run a cell in Julia it's gonna take a while and they did their
best to reduce it as much as possible. Obviously they're going to do more
changes in order to make it even better but as of today there is quite a
substantial difference with before this version already. Okay so parallel
pre-compilation so that the whole idea of these things is that you're trying to
import the packages as fast as possible because I believe differential
equation is a pretty heavy package but I haven't used it myself so I can't say
for sure. But basically packages which take quite some time are a problem and
obviously Julia team want to reduce that time. So here what they also included
this thing this new animation and we're gonna see it here. I'm gonna I'm gonna
show you that video so you can see what's going on. So you see they're
adding this images package and here you have the progress as you're
downloading the package which is great. It's nice to see that everything
is going fine and as expected. And yeah this I experienced myself when I
installed Julia 1.6 you can you see the dependencies coming in and coming out
and it's really nice not to just have that black box. Python for instance if
you install things from Jupyter notebook with the pip install you get just a
black box. You know that the cell is running hopefully it's installing but
you're not sure even though you don't get an error sometimes things might happen.
So it's just yeah it's really nice to get to get this animation and you see
here they're using images and it loaded pretty quick and now they have access to
this package. So that's great I'm all for it I'm very happy about that it's a
nice cool feature obviously it's not gonna revolutionize coding but it's
just a nice feature to know what's going on. Compile time percentage so here
that's maybe not as important I would say they include the compilation time
when you talk about the runtime so they use this time and time verbose things
to measure the time that running code takes. Eliminating needless to
compilation which is great basically you use some code and then you reuse the
same code later and depending on when you use that code in the past Julia is
gonna sometimes throw it away too much and you shouldn't throw it away as much
as it does and they're trying to fix that here. They're trying to make it so
that if you use code and you still need it at some point in the future Julia is
not throwing it away so it's gonna be able to reuse it to gain some speed in
the future in the future runs of codes for instance in Jupyter Notebooks if
you have many cells and you want to run third cell but the first cell has some
codes which you still need instead of Julia having to recompile and redo the
run of the first cell under the hood it's gonna be way faster and it's gonna
keep those codes in memory or it's gonna be able to reuse them. Compile a
latency reduction so all of these are kind of achieving the same purpose I'm
just gonna go quickly through those tooling to help optimize packages for
latency so you see this one word which comes all the time it's latency and it's
obviously related to speed loading speed ups binary loading speed ups so they
understood the problem they understood that they have this community of
developers and these people are used to Python they're used to all the languages
or maybe they're just starting on the language but they don't want to take too
much time to run their code and they just want to have things being done quick
because in Python and in R and in all the languages that's how it happens so
they don't want to spend one minute importing a package if Python can do it
in five seconds obviously so if Julia wants to compete it's gonna have to do
that and I'm very happy that they put the accent on this because the first run
time being huge I mean personally I'm taking the hit because I'm all for Julia
and I love language no matter what but I can understand that someone who's a new
comer to the language would not be happy with with waiting one minute for the
first run to happen that's if you have Python doing it in five seconds it's
not acceptable anyway this is a this is a nice graph I think they're measuring
whatever GTK3 whatever I don't personally know this I guess the package anyway
what's important is so these are the versions version 1.3 1.4 1.5 1.6 and
they're measuring the time that this this thing whatever it is takes and you
can obviously see that things are going down so initially we had the blue
curve with those old wrappers and they included some new wrappers which I may
have missed it's part of the binary loading speed-ups I guess and they
included some new JLL wrappers whatever they are anyway bottom line for for
anyone using Julia and who doesn't know those things under the hood is that
speed is going up so time time taken is going down and it's going down it's
going down really significantly like we used to have six or seven seconds to
load that package just like a couple like three versions ago and as of today
it's it's almost instantaneous so this is insane I'm very happy that they made
those changes and I don't personally understand all the things happening under
the hood but whatever it is if if you can reduce the time taken by whatever it
is like 30 30x well I am all for it so I don't know how they do that I I'm not
familiar with the computer science technical things going on in the
Julia repos but I'm very happy about that and I wanted to report to you so
that you have an idea of of how fast things are changing because they they
are talking I'm gonna maybe I'm gonna show you later but they're talking about
the next version being in a month so I don't know if they had that timeline as
well for the previous versions but if that's the case it's gonna it's absolutely
workers yeah downloads and networking options by Stefan Karpinski by the way
there's a bit of drama going on on Reddit I don't know if you if you saw that
but it's on the on the subreddit of Julia there's a little bit of drama with
like some guy insulting Stefan Karpinski and and yeah the whole community
crushing this guy so I'm very happy about the community as well on the
subreddit of Julia if you haven't seen that you should check it out it's it's a
beautiful community people are helping each other it's a small community it's
it's kind of the birth of Julia still even though the language wasn't created
yesterday but it's still pretty new and and the community is small and still
beautiful I hope we're gonna be able to keep it that way anyway that was a side
story but yeah you can see that you can tell that they really understand the
the problems it's loads and consistent it's inflexible they I think they're
really listening to their community and you can also show that because they
report github issues so github issues I don't know if you're familiar with that
but basically you have people going on the Julia repository and saying okay I
have this problem I would like to I would like this bug to be fixed or they
could say okay I have this idea of new feature could you guys do that is it
possible and basically you have the the actual people who work on the Julia
project who who try to change those things which people are not happy with
that's one possibility another possibility is that someone says okay I
have this issue could anyone fix it and it can also be anyone from the
community from the Julia community which I talked about before and just
someone coming and saying hey I've got this bug this this fix I think it's it
fix your bug and you ask it to be included in the new code and and so that
it fixes this bug for everyone not just not just you on your machine who managed
to fix it so this is the whole idea of open source it's a very beautiful thing
if you're not familiar with it you can it's be careful it's addictive you just
start with it and and after a while you anything not open source you start
having bad thoughts about it because it's the whole idea of free and open
sorry free and open source software is is really beautiful anyway talking about
that they have this CI robustness so it's actually pretty related to that so
basically they they had the tests so anytime someone makes this kind of
changes on the code so they say I've got this code it fixes whatever they have
to make it run through a couple tests to make sure that it's not breaking the
whole system because you don't want to fix one bug and then break everything
else right so that's what they had that's the problem they had so CI stands
for continuous integration you can see here and basically they had a couple
tests to make sure that everything was working fine with the new code which was
included in and and some of these tests if I understood correctly some of these
sets always failed so now they if I understood correctly they're trying to
change the tests or make it so that the code can the review of the code in
order to include it in the in the whole Julia code this review is going to be
made if not easier at least at least better that's going to improve those
things so yeah obviously if we can have better review of code it means we can
have people including more code which maybe was not classified properly before
so maybe they were saying nope sorry the code doesn't pass this this test and it
should have passed the test and be included all the other way around so
overall good testing is also part of the of the developing process and only with
good testing can you can you have efficient contributions from the
community what else we got improved stack trace of formatting so yeah this is
this is ugly right I mean you don't really know what's going on I mean it's
it's kind of the code you see in your in your shell in your terminal but it
doesn't I mean to me you wouldn't mean much and this is the new trace so you
can see here all stack trace and this is the new stack trace and I mean it's
just way clearer right it's so much more beautiful for me as someone outside of
this like computer science community because I'm a mathematician this is
way cleaner up this I can start wondering what's going on and look into my
errors and try to to fix those errors before that it was it's not as clear I
mean if you've got this you're not you're not gonna dive into it right I mean
personally it doesn't make me want to dive into that it's it's it's not clear
it's kind of a mess and yeah this is this is way easier to dive in hopefully
they I don't know if this new version of Julia is gonna improve that but hopefully
they're gonna improve the errors they throw because sometimes I'm gonna say
they're not great you have errors and it's just telling you this not working
and and you don't really know what to fix and hopefully they're gonna change up
because because it's really hard to debug your code if you don't have the
proper errors being thrown so hopefully this fixes this issue as well I don't
know if it goes that deep or I hope it's not just the the formatting and the
prettiness of the the error thrown but yeah we shall see only only after coding
only after testing out the code you can you can decide whether you think that
the errors are good or bad and if they actually give you information about what
the error is okay yeah so yeah it seems it seems like they're actually doing
that are gonna things are in methods are now shown which is great if you don't
even know which method your has an error that's impossible to debug the function
name was made to be more emphasized yes yes so this is probably just some
formatting things which is great obviously it's helping you through your
developing process and and through your coding in general so that's that's
awesome the modules were the modules where the method is defined is now shown
that's great just basically just give me more information that's all I want and
anything going in that direction like those things which seem to be that I'm
all for it I'm all for it and please enjoy the release that's probably the
most important phrase right so and yeah let us know so they're very open to to
new ideas and and just people contributing and telling them what's
going on and what's not working so without we're gonna we're gonna bring
the video to a close thank you for for for watching it if you have any any
comment anything I missed you can you can let me know in the comments if you if
you haven't already you can subscribe you can like the video that would be that
would be awesome and with that we'll see you next time thanks for joining
you
