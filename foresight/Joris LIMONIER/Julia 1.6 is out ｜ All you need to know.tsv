start	end	text
0	5840	Hi everyone and welcome back to Datafile. Today I'm very excited. We're gonna go
5840	11280	through the highlights of Julia 1.6 and basically what's new in the version and
11280	18680	how it's gonna improve our life as Julia developers. So let's check it out.
18680	32200	Okay so let's move to the Julia website here. I'm gonna make this link
32200	37520	available in the description so you can check it out. And this is the blog. This
37520	44720	is Julia's blog. This is Julia's website. And you can see over here they so if I
44720	50840	go to the blog list they have a couple blogs dating back from a while ago.
50840	57280	This is the latest one as of today. And here are all of the new things which are
57280	64920	brought to life in Julia 1.6. So Julia 1.6 might be the new long-term stable
64920	69760	which is kind of a big deal. Meaning that this is the one we may be using for a
69760	74160	while. It's not just some version that they're gonna throw away very soon. Okay
74200	79160	so let's dive into the new features. You can read the whole thing if you're
79160	83400	interested. I'm gonna leave the link in the description. Here they mentioned that
83400	90120	they're not sure whether 1.6 or 1.7 is gonna be the new LTS. Okay well
90120	96560	basically so just an overall view on Julia 1.6. What they improve the most
96560	102600	is speed, speed, speed. And this is great especially for a first time run
102640	107560	because we had this problem as I mentioned in previous videos that the
107560	111760	first time you run a cell in Julia it's gonna take a while and they did their
111760	114960	best to reduce it as much as possible. Obviously they're going to do more
114960	119520	changes in order to make it even better but as of today there is quite a
119520	124280	substantial difference with before this version already. Okay so parallel
124280	129640	pre-compilation so that the whole idea of these things is that you're trying to
129680	133840	import the packages as fast as possible because I believe differential
133840	138360	equation is a pretty heavy package but I haven't used it myself so I can't say
138360	144040	for sure. But basically packages which take quite some time are a problem and
144040	149440	obviously Julia team want to reduce that time. So here what they also included
149440	154240	this thing this new animation and we're gonna see it here. I'm gonna I'm gonna
154240	157800	show you that video so you can see what's going on. So you see they're
157840	163720	adding this images package and here you have the progress as you're
163720	167800	downloading the package which is great. It's nice to see that everything
167800	174120	is going fine and as expected. And yeah this I experienced myself when I
174120	181120	installed Julia 1.6 you can you see the dependencies coming in and coming out
181120	186760	and it's really nice not to just have that black box. Python for instance if
186800	191720	you install things from Jupyter notebook with the pip install you get just a
191720	195400	black box. You know that the cell is running hopefully it's installing but
195400	200000	you're not sure even though you don't get an error sometimes things might happen.
200000	203920	So it's just yeah it's really nice to get to get this animation and you see
203920	208440	here they're using images and it loaded pretty quick and now they have access to
208440	214760	this package. So that's great I'm all for it I'm very happy about that it's a
214760	221480	nice cool feature obviously it's not gonna revolutionize coding but it's
221480	226840	just a nice feature to know what's going on. Compile time percentage so here
226840	232480	that's maybe not as important I would say they include the compilation time
232480	236880	when you talk about the runtime so they use this time and time verbose things
236880	242960	to measure the time that running code takes. Eliminating needless to
243000	248160	compilation which is great basically you use some code and then you reuse the
248160	252920	same code later and depending on when you use that code in the past Julia is
252920	256640	gonna sometimes throw it away too much and you shouldn't throw it away as much
256640	263280	as it does and they're trying to fix that here. They're trying to make it so
263280	268360	that if you use code and you still need it at some point in the future Julia is
268360	271600	not throwing it away so it's gonna be able to reuse it to gain some speed in
271640	277240	the future in the future runs of codes for instance in Jupyter Notebooks if
277240	283200	you have many cells and you want to run third cell but the first cell has some
283200	287960	codes which you still need instead of Julia having to recompile and redo the
287960	293200	run of the first cell under the hood it's gonna be way faster and it's gonna
293200	299920	keep those codes in memory or it's gonna be able to reuse them. Compile a
299960	304480	latency reduction so all of these are kind of achieving the same purpose I'm
304480	308800	just gonna go quickly through those tooling to help optimize packages for
308800	312640	latency so you see this one word which comes all the time it's latency and it's
312640	318480	obviously related to speed loading speed ups binary loading speed ups so they
318480	321080	understood the problem they understood that they have this community of
321080	325840	developers and these people are used to Python they're used to all the languages
325840	329680	or maybe they're just starting on the language but they don't want to take too
329720	333800	much time to run their code and they just want to have things being done quick
333800	339320	because in Python and in R and in all the languages that's how it happens so
339320	343960	they don't want to spend one minute importing a package if Python can do it
343960	347800	in five seconds obviously so if Julia wants to compete it's gonna have to do
347800	352240	that and I'm very happy that they put the accent on this because the first run
352240	359200	time being huge I mean personally I'm taking the hit because I'm all for Julia
359200	364480	and I love language no matter what but I can understand that someone who's a new
364480	369320	comer to the language would not be happy with with waiting one minute for the
369320	375040	first run to happen that's if you have Python doing it in five seconds it's
375040	380960	not acceptable anyway this is a this is a nice graph I think they're measuring
381000	390480	whatever GTK3 whatever I don't personally know this I guess the package anyway
390480	397160	what's important is so these are the versions version 1.3 1.4 1.5 1.6 and
397160	405400	they're measuring the time that this this thing whatever it is takes and you
405400	409440	can obviously see that things are going down so initially we had the blue
409440	414000	curve with those old wrappers and they included some new wrappers which I may
414000	419920	have missed it's part of the binary loading speed-ups I guess and they
419920	425360	included some new JLL wrappers whatever they are anyway bottom line for for
425360	429840	anyone using Julia and who doesn't know those things under the hood is that
429840	435400	speed is going up so time time taken is going down and it's going down it's
435400	441360	going down really significantly like we used to have six or seven seconds to
441360	446200	load that package just like a couple like three versions ago and as of today
446200	453520	it's it's almost instantaneous so this is insane I'm very happy that they made
453520	458160	those changes and I don't personally understand all the things happening under
458160	464720	the hood but whatever it is if if you can reduce the time taken by whatever it
464720	473680	is like 30 30x well I am all for it so I don't know how they do that I I'm not
473680	479360	familiar with the computer science technical things going on in the
479360	484120	Julia repos but I'm very happy about that and I wanted to report to you so
484120	488520	that you have an idea of of how fast things are changing because they they
488520	491360	are talking I'm gonna maybe I'm gonna show you later but they're talking about
491680	496000	the next version being in a month so I don't know if they had that timeline as
496000	500000	well for the previous versions but if that's the case it's gonna it's absolutely
500000	507960	workers yeah downloads and networking options by Stefan Karpinski by the way
507960	510720	there's a bit of drama going on on Reddit I don't know if you if you saw that
510720	516080	but it's on the on the subreddit of Julia there's a little bit of drama with
516240	522200	like some guy insulting Stefan Karpinski and and yeah the whole community
522200	525640	crushing this guy so I'm very happy about the community as well on the
525640	529520	subreddit of Julia if you haven't seen that you should check it out it's it's a
529520	533480	beautiful community people are helping each other it's a small community it's
533480	537760	it's kind of the birth of Julia still even though the language wasn't created
537760	542800	yesterday but it's still pretty new and and the community is small and still
542800	546920	beautiful I hope we're gonna be able to keep it that way anyway that was a side
546920	551520	story but yeah you can see that you can tell that they really understand the
551520	556400	the problems it's loads and consistent it's inflexible they I think they're
556400	561040	really listening to their community and you can also show that because they
561040	565800	report github issues so github issues I don't know if you're familiar with that
565800	570800	but basically you have people going on the Julia repository and saying okay I
570800	575720	have this problem I would like to I would like this bug to be fixed or they
575720	579200	could say okay I have this idea of new feature could you guys do that is it
579200	583680	possible and basically you have the the actual people who work on the Julia
583680	588720	project who who try to change those things which people are not happy with
588720	595320	that's one possibility another possibility is that someone says okay I
595320	599640	have this issue could anyone fix it and it can also be anyone from the
599640	604080	community from the Julia community which I talked about before and just
604080	607680	someone coming and saying hey I've got this bug this this fix I think it's it
607680	613640	fix your bug and you ask it to be included in the new code and and so that
613640	618960	it fixes this bug for everyone not just not just you on your machine who managed
618960	623560	to fix it so this is the whole idea of open source it's a very beautiful thing
623560	628920	if you're not familiar with it you can it's be careful it's addictive you just
628920	633720	start with it and and after a while you anything not open source you start
633720	638240	having bad thoughts about it because it's the whole idea of free and open
638240	644840	sorry free and open source software is is really beautiful anyway talking about
644840	651680	that they have this CI robustness so it's actually pretty related to that so
651680	656200	basically they they had the tests so anytime someone makes this kind of
656200	662560	changes on the code so they say I've got this code it fixes whatever they have
662560	665560	to make it run through a couple tests to make sure that it's not breaking the
665560	668560	whole system because you don't want to fix one bug and then break everything
668560	673080	else right so that's what they had that's the problem they had so CI stands
673080	678680	for continuous integration you can see here and basically they had a couple
678680	683000	tests to make sure that everything was working fine with the new code which was
683000	688200	included in and and some of these tests if I understood correctly some of these
688200	693440	sets always failed so now they if I understood correctly they're trying to
693440	699960	change the tests or make it so that the code can the review of the code in
699960	707040	order to include it in the in the whole Julia code this review is going to be
707040	711280	made if not easier at least at least better that's going to improve those
711320	716440	things so yeah obviously if we can have better review of code it means we can
716440	722120	have people including more code which maybe was not classified properly before
722120	726200	so maybe they were saying nope sorry the code doesn't pass this this test and it
726200	729840	should have passed the test and be included all the other way around so
729840	735280	overall good testing is also part of the of the developing process and only with
735280	739400	good testing can you can you have efficient contributions from the
739400	746960	community what else we got improved stack trace of formatting so yeah this is
746960	751600	this is ugly right I mean you don't really know what's going on I mean it's
751600	756800	it's kind of the code you see in your in your shell in your terminal but it
756800	761880	doesn't I mean to me you wouldn't mean much and this is the new trace so you
761880	767160	can see here all stack trace and this is the new stack trace and I mean it's
767160	774360	just way clearer right it's so much more beautiful for me as someone outside of
774360	781080	this like computer science community because I'm a mathematician this is
781080	785840	way cleaner up this I can start wondering what's going on and look into my
785840	791400	errors and try to to fix those errors before that it was it's not as clear I
791400	794640	mean if you've got this you're not you're not gonna dive into it right I mean
794640	800720	personally it doesn't make me want to dive into that it's it's it's not clear
800720	806640	it's kind of a mess and yeah this is this is way easier to dive in hopefully
806640	811480	they I don't know if this new version of Julia is gonna improve that but hopefully
811480	817480	they're gonna improve the errors they throw because sometimes I'm gonna say
817480	822560	they're not great you have errors and it's just telling you this not working
822560	827520	and and you don't really know what to fix and hopefully they're gonna change up
827520	832080	because because it's really hard to debug your code if you don't have the
832080	837600	proper errors being thrown so hopefully this fixes this issue as well I don't
837600	843880	know if it goes that deep or I hope it's not just the the formatting and the
844640	852600	prettiness of the the error thrown but yeah we shall see only only after coding
852600	857600	only after testing out the code you can you can decide whether you think that
857600	863120	the errors are good or bad and if they actually give you information about what
863120	870640	the error is okay yeah so yeah it seems it seems like they're actually doing
870640	874800	that are gonna things are in methods are now shown which is great if you don't
874800	880120	even know which method your has an error that's impossible to debug the function
880120	884280	name was made to be more emphasized yes yes so this is probably just some
884280	890360	formatting things which is great obviously it's helping you through your
890360	894440	developing process and and through your coding in general so that's that's
894440	899880	awesome the modules were the modules where the method is defined is now shown
899920	904360	that's great just basically just give me more information that's all I want and
904360	909440	anything going in that direction like those things which seem to be that I'm
909440	914080	all for it I'm all for it and please enjoy the release that's probably the
914080	921520	most important phrase right so and yeah let us know so they're very open to to
921520	929080	new ideas and and just people contributing and telling them what's
929120	932680	going on and what's not working so without we're gonna we're gonna bring
932680	939240	the video to a close thank you for for for watching it if you have any any
939240	946760	comment anything I missed you can you can let me know in the comments if you if
946760	949640	you haven't already you can subscribe you can like the video that would be that
949640	956280	would be awesome and with that we'll see you next time thanks for joining
959080	962100	you
