1
00:00:00,000 --> 00:00:13,420
Thank You for wearing T-shirt.

2
00:00:30,000 --> 00:00:55,360
This is CS50, Harvard University's introduction to the intellectual enterprises of computer

3
00:00:55,360 --> 00:00:57,520
science and the arts of programming.

4
00:00:57,520 --> 00:01:02,200
My name is David Malan, and if you are among those in the room who are thinking, why am

5
00:01:02,200 --> 00:01:06,200
I in a class of computer science, realize that I, too, felt that exact same way.

6
00:01:06,200 --> 00:01:10,200
In fact, my freshman year, I didn't quite get up the nerve to take this class, or computer

7
00:01:10,200 --> 00:01:11,560
science, more generally.

8
00:01:11,560 --> 00:01:14,080
And that was largely because I was intimidated by it.

9
00:01:14,080 --> 00:01:15,320
I was a little nervous.

10
00:01:15,320 --> 00:01:19,440
It felt well out of my comfort zone, and I really didn't know at the end of the day what

11
00:01:19,440 --> 00:01:20,440
it actually was.

12
00:01:20,440 --> 00:01:23,880
But realize if you, too, are feeling a little bit of that, or even if you're among those

13
00:01:23,880 --> 00:01:27,440
more comfortable who have dabbled in computer science or programming, realize that they're

14
00:01:27,440 --> 00:01:30,720
so many blanks that we can fill in along the way so that, ultimately, at the end of

15
00:01:30,720 --> 00:01:35,040
the semester, everyone will feel themselves on the same page.

16
00:01:35,040 --> 00:01:40,000
And until then, rest assured that 68% of the people sitting to your left and to your right

17
00:01:40,000 --> 00:01:46,080
and behind and in front have never taken a CS course before, which may very well be the

18
00:01:46,080 --> 00:01:47,760
demographic into which you fit.

19
00:01:47,760 --> 00:01:52,480
But realize, too, that with such an amazing support structure, with so many office hours

20
00:01:52,480 --> 00:01:56,680
and sections and materials and beyond, realize that what's ultimately important in this course

21
00:01:56,720 --> 00:02:01,720
is not so much where you end up relative to your classmates in week 10, our final week,

22
00:02:01,720 --> 00:02:05,040
but where you end up relative to yourself in week zero.

23
00:02:05,040 --> 00:02:06,680
And indeed, that is where we now are.

24
00:02:06,680 --> 00:02:09,400
And as it turns out, computer scientists start counting at zero.

25
00:02:09,400 --> 00:02:14,240
And so over the next 11 weeks, will we take you from being among those less comfortable

26
00:02:14,240 --> 00:02:17,680
or perhaps somewhere in between less comfortable and more to feeling much more

27
00:02:17,680 --> 00:02:21,120
comfortable and confident and capable than that?

28
00:02:21,120 --> 00:02:24,720
But to get there, we need to understand what computer science really is.

29
00:02:24,760 --> 00:02:28,200
And this was something I didn't understand until I set foot in a room like this.

30
00:02:28,200 --> 00:02:31,840
And I dare say we can distill computer science into just this picture.

31
00:02:31,840 --> 00:02:33,960
Computer science is about problem solving.

32
00:02:33,960 --> 00:02:36,120
And I know that high school courses typically

33
00:02:36,120 --> 00:02:38,960
do kind of paint a misleading picture that it's only about.

34
00:02:38,960 --> 00:02:41,920
And it's entirely about programming and people with their heads down

35
00:02:41,920 --> 00:02:44,920
in the computer lab working fairly anti-socially on code.

36
00:02:44,920 --> 00:02:48,680
But the reality is it's all about solving problems and very often solving problems

37
00:02:48,680 --> 00:02:52,680
collaboratively, either in person or by leveraging code programs that others

38
00:02:52,680 --> 00:02:53,880
have written in the past.

39
00:02:53,880 --> 00:02:55,640
And what does it mean to solve a problem?

40
00:02:55,640 --> 00:02:57,280
Well, you need inputs.

41
00:02:57,280 --> 00:02:58,920
So there's a problem you're trying to solve.

42
00:02:58,920 --> 00:02:59,920
That is the input.

43
00:02:59,920 --> 00:03:00,680
And you want output.

44
00:03:00,680 --> 00:03:02,360
You want the solution to that problem.

45
00:03:02,360 --> 00:03:04,480
And the sort of secret sauce of computer science

46
00:03:04,480 --> 00:03:07,840
is going to be everything in this proverbial black box in the middle

47
00:03:07,840 --> 00:03:12,640
that over the next several weeks, we begin to understand exactly what you can do with that.

48
00:03:12,640 --> 00:03:15,720
But in order to start solving problems, we kind of just

49
00:03:15,720 --> 00:03:18,920
need to decide as a group how we're going to represent these problems.

50
00:03:18,920 --> 00:03:20,280
And what might a problem be?

51
00:03:20,280 --> 00:03:22,000
Well, in this room, there's a whole bunch of people.

52
00:03:22,000 --> 00:03:25,240
If we wanted to take attendance or count the number of people in this room,

53
00:03:25,240 --> 00:03:28,640
I might need to start keeping track of how many people I see.

54
00:03:28,640 --> 00:03:31,320
But how do I represent the number of people I see?

55
00:03:31,320 --> 00:03:32,880
Well, I can do it sort of old school.

56
00:03:32,880 --> 00:03:35,640
And I can just take out a piece of chalk or whatnot and say, all right,

57
00:03:35,640 --> 00:03:39,040
I see one, two, three, four, five.

58
00:03:39,040 --> 00:03:41,480
I can do little stylistic conventions like that to save space

59
00:03:41,480 --> 00:03:46,360
or remind myself six, seven, eight, nine, 10, and so forth.

60
00:03:46,360 --> 00:03:49,520
Or I can, of course, just do that on my own hand.

61
00:03:49,520 --> 00:03:53,400
So one, two, three, four, five, and so forth.

62
00:03:53,400 --> 00:03:58,000
But obviously, how high can I count on just one hand?

63
00:03:58,000 --> 00:03:59,520
So five, you would think.

64
00:03:59,520 --> 00:04:02,400
But that's just because we haven't really thought hard enough about this problem.

65
00:04:02,400 --> 00:04:05,480
It turns out that with just these five fingers, let alone these five more,

66
00:04:05,480 --> 00:04:07,720
I can actually count rather higher.

67
00:04:07,720 --> 00:04:10,680
Because after all, the system I'm using of hash marks on the board

68
00:04:10,680 --> 00:04:13,840
or just now with my fingers is just kind of keeping my fingers down.

69
00:04:13,840 --> 00:04:16,840
We're putting them up to represent ones, really.

70
00:04:16,840 --> 00:04:19,840
But what if I actually took into account the order of my fingers

71
00:04:19,840 --> 00:04:23,200
and sort of permuted them, so to speak, so that it's really patterns

72
00:04:23,200 --> 00:04:25,520
of fingers that represent the number of people in the room

73
00:04:25,520 --> 00:04:28,200
and not just the mere presence of a finger going up or down?

74
00:04:28,200 --> 00:04:30,120
In other words, this can remain zero.

75
00:04:30,120 --> 00:04:31,760
This could still be one.

76
00:04:31,760 --> 00:04:36,800
But what if two is not just this, the obvious, but what if it's just this?

77
00:04:36,800 --> 00:04:39,280
So raising just one, my second finger.

78
00:04:39,280 --> 00:04:41,840
What if then three is this?

79
00:04:41,840 --> 00:04:45,080
So we have zero, one, two, three.

80
00:04:45,080 --> 00:04:47,800
That's going to lead us to four, somewhat offensively.

81
00:04:47,800 --> 00:04:52,640
But if we can jump ahead to five, five I might now permute this finger

82
00:04:52,640 --> 00:04:53,480
and this finger up.

83
00:04:53,480 --> 00:04:56,800
And if I want to now represent six, I could do this.

84
00:04:56,800 --> 00:04:57,640
And now seven.

85
00:04:57,640 --> 00:05:00,560
In other words, I've expressed so many more patterns on my hand already.

86
00:05:00,560 --> 00:05:03,200
And if we keep doing this, I think I can actually represent,

87
00:05:03,200 --> 00:05:07,000
painfully perhaps, like 32 different patterns.

88
00:05:07,000 --> 00:05:10,800
And therefore, 32 different people on my hands alone or 31 people

89
00:05:10,800 --> 00:05:12,320
if I start counting at zero.

90
00:05:12,320 --> 00:05:13,600
So what is that?

91
00:05:13,600 --> 00:05:14,600
What's the relationship?

92
00:05:14,600 --> 00:05:15,600
And how did we even get here?

93
00:05:15,600 --> 00:05:19,760
Well, it turns out that computers are kind of simplistic, much like our hands here.

94
00:05:19,760 --> 00:05:21,960
At the end of the day, your computer is plugged into the wall

95
00:05:21,960 --> 00:05:25,640
where it's got a battery, so it either has or it does not have electricity.

96
00:05:25,640 --> 00:05:28,320
At the end of the day, that is the physical resource that drive these things

97
00:05:28,320 --> 00:05:30,600
in our phones and all of technology today.

98
00:05:30,600 --> 00:05:35,560
So if there's either electricity or not, that kind of maps nicely to no finger

99
00:05:35,560 --> 00:05:36,480
or yes finger.

100
00:05:36,480 --> 00:05:40,000
And indeed, computers, as you probably know, only speak what language,

101
00:05:40,000 --> 00:05:41,920
what alphabet, so to speak?

102
00:05:41,920 --> 00:05:43,560
Yeah, binary, by meaning two.

103
00:05:43,560 --> 00:05:46,840
And indeed, that refers to the fact that in binary and computers,

104
00:05:46,840 --> 00:05:49,840
you only have two digits, zero and one.

105
00:05:49,840 --> 00:05:53,200
We humans, of course, have zero, one, two, three, four, five, six, seven,

106
00:05:53,200 --> 00:05:54,000
eight, nine.

107
00:05:54,000 --> 00:05:56,160
And then we can combine those to count even higher.

108
00:05:56,160 --> 00:05:58,240
But computers only have zero, one.

109
00:05:58,240 --> 00:05:59,240
And then that's it.

110
00:05:59,240 --> 00:06:01,000
Because at the end of the day, there's actually

111
00:06:01,000 --> 00:06:03,960
a direct mapping between power being off and it being a zero,

112
00:06:03,960 --> 00:06:06,680
or power being on and it being one, or some electrons,

113
00:06:06,680 --> 00:06:09,600
or whatever flowing from your battery or from the wall.

114
00:06:09,600 --> 00:06:13,440
So this is why computers tend to speak only binary because at the end

115
00:06:13,440 --> 00:06:15,880
of the day, it just maps really cleanly to what

116
00:06:15,880 --> 00:06:18,960
it is that's powering them in the first place.

117
00:06:18,960 --> 00:06:20,560
But how is this actually useful?

118
00:06:20,560 --> 00:06:23,920
If computers only have zeros and ones, how can they do anything useful?

119
00:06:23,920 --> 00:06:28,600
Well, think about our human world where you might have this pattern of symbols.

120
00:06:28,600 --> 00:06:31,680
This is decimal, deck meaning 10, because you have zero through nine.

121
00:06:31,680 --> 00:06:33,880
And this is, of course, 123.

122
00:06:33,880 --> 00:06:34,600
But why?

123
00:06:34,600 --> 00:06:36,960
If you haven't thought about this in quite some time,

124
00:06:36,960 --> 00:06:40,360
this is really just a pattern of three symbols, one and two and three,

125
00:06:40,360 --> 00:06:42,160
shapes or glyphs on the screen.

126
00:06:42,160 --> 00:06:44,280
But we humans, ever since grade school, have

127
00:06:44,280 --> 00:06:46,920
started describing meaning to each of these numbers, right?

128
00:06:46,920 --> 00:06:50,320
If you think back, this is the ones column, this is the tens column,

129
00:06:50,320 --> 00:06:52,800
this is the hundreds column, and so forth.

130
00:06:52,800 --> 00:06:53,920
And we could keep going.

131
00:06:53,920 --> 00:06:58,080
And so why does this pattern one, two, three mean 123?

132
00:06:58,080 --> 00:07:00,840
Well, it's because all of us, sort of intuitively nowadays,

133
00:07:00,840 --> 00:07:07,320
are just quickly in our head doing 100 times 1 plus 10 times 2 plus 1

134
00:07:07,320 --> 00:07:12,040
times 3, which of course gives us 100 plus 20 plus 3.

135
00:07:12,040 --> 00:07:15,760
And then the number we know mathematically as 123.

136
00:07:15,760 --> 00:07:17,960
But we're all doing this so quickly, you don't really

137
00:07:17,960 --> 00:07:19,120
think about this anymore.

138
00:07:19,120 --> 00:07:21,520
Well, computers work fundamentally the same way.

139
00:07:21,520 --> 00:07:24,640
They don't have as many digits, zero through nine as we do.

140
00:07:24,640 --> 00:07:26,560
They only have zeros and ones.

141
00:07:26,560 --> 00:07:28,800
And so if they were to store values, you're

142
00:07:28,800 --> 00:07:30,400
only going to see zeros and ones on the screen.

143
00:07:30,400 --> 00:07:32,560
But those zeros and ones just mean different things.

144
00:07:32,560 --> 00:07:35,120
Instead of having a ones place, tens, hundreds,

145
00:07:35,120 --> 00:07:39,800
they're going to have a ones place, a twos place, a fours place,

146
00:07:39,800 --> 00:07:41,880
and then eights and 16 and beyond.

147
00:07:41,880 --> 00:07:42,680
Now why?

148
00:07:42,680 --> 00:07:46,920
Well, one and 10 and 100 turns out those are powers of 10.

149
00:07:46,920 --> 00:07:49,400
10 to the zero is technically one.

150
00:07:49,400 --> 00:07:51,000
10 to the one is just 10.

151
00:07:51,000 --> 00:07:52,400
10 to the two is 100.

152
00:07:52,400 --> 00:07:55,760
And that's why you have ones, tens, hundreds, thousands, and so forth.

153
00:07:55,760 --> 00:08:00,200
Computers are apparently using powers of two, not surprising, binary two.

154
00:08:00,200 --> 00:08:05,040
So if you only have ones, twos, and fours as your placeholders,

155
00:08:05,040 --> 00:08:10,360
if a computer were storing these digits, zero, zero, zero,

156
00:08:10,360 --> 00:08:13,960
that computer is presumably storing what number so far as we humans

157
00:08:13,960 --> 00:08:15,480
understand it.

158
00:08:15,480 --> 00:08:17,240
Well, that's how a computer would store zero.

159
00:08:17,240 --> 00:08:20,200
If a computer is storing literally zero, zero, zero,

160
00:08:20,200 --> 00:08:22,400
just like in our human world, that also is zero.

161
00:08:22,400 --> 00:08:25,680
But that's technically because it's four times zero, plus two times zero,

162
00:08:25,680 --> 00:08:28,240
plus one times zero, which is obviously zero.

163
00:08:28,240 --> 00:08:33,680
Meanwhile, if a computer is actually storing not just say zero, zero, zero,

164
00:08:33,680 --> 00:08:38,840
but instead is storing this value in binary, what is that map to in decimal?

165
00:08:38,840 --> 00:08:39,760
So that's one.

166
00:08:39,760 --> 00:08:46,440
And now why, if we change this zero and one to this value here,

167
00:08:46,440 --> 00:08:49,560
is this two both mathematically for the exact same reasons.

168
00:08:49,560 --> 00:08:51,160
And so earlier, I had five fingers.

169
00:08:51,160 --> 00:08:55,000
But if you consider just my first three, when I did this holding up one finger,

170
00:08:55,000 --> 00:08:56,960
I was representing two.

171
00:08:56,960 --> 00:09:00,200
And if I want to represent three, recall that I put up the second finger.

172
00:09:00,200 --> 00:09:03,400
And so the reason that could nicely represent three

173
00:09:03,400 --> 00:09:08,000
is because all I was doing with my human hand was counting in binary.

174
00:09:08,000 --> 00:09:09,720
And I could keep counting more and more and more.

175
00:09:09,720 --> 00:09:14,880
And so if I have five fingers or five bits, bit meaning binary digits,

176
00:09:14,880 --> 00:09:15,720
I could count up.

177
00:09:15,720 --> 00:09:19,880
It turns out if we do the math, as high as 31 by starting to zero.

178
00:09:19,880 --> 00:09:23,200
It's going to be hard to physically do that, but we could.

179
00:09:23,200 --> 00:09:25,000
So why is this useful?

180
00:09:25,000 --> 00:09:26,840
What the end of the day, a computer, therefore,

181
00:09:26,840 --> 00:09:30,200
can represent any number of values from zero to one to two to three

182
00:09:30,200 --> 00:09:32,600
to some number much, much, much higher than that.

183
00:09:32,600 --> 00:09:35,400
All it needs is enough bits, enough zeros and ones.

184
00:09:35,400 --> 00:09:36,600
Well, what are those bits?

185
00:09:36,600 --> 00:09:40,720
Well, all of us have these days in our phone's sources of light, for instance.

186
00:09:40,720 --> 00:09:43,680
So I could actually say that this physical device right now

187
00:09:43,680 --> 00:09:45,120
might be a little hard to tell.

188
00:09:45,120 --> 00:09:48,000
It does have a flashlight, and it's technically off at the moment.

189
00:09:48,000 --> 00:09:51,640
But if I turn this flashlight on, thereby using some of the electricity,

190
00:09:51,640 --> 00:09:53,520
then now I'm storing a one.

191
00:09:53,520 --> 00:09:54,600
And so the phone is on.

192
00:09:54,600 --> 00:09:55,520
Now it's off.

193
00:09:55,520 --> 00:09:56,280
Now it's on.

194
00:09:56,280 --> 00:09:59,880
And if I see, can I borrow someone's phone real quick, is may I?

195
00:09:59,880 --> 00:10:01,840
OK, and flashlight.

196
00:10:01,840 --> 00:10:03,600
How do I turn on the flashlight?

197
00:10:03,600 --> 00:10:05,000
Oh, shake it.

198
00:10:06,000 --> 00:10:07,520
I'm working.

199
00:10:07,520 --> 00:10:08,200
That's OK.

200
00:10:08,200 --> 00:10:10,280
OK, thank you.

201
00:10:10,280 --> 00:10:10,920
Oh, thank you.

202
00:10:10,920 --> 00:10:11,960
OK, so this is great.

203
00:10:11,960 --> 00:10:12,800
Now I can count higher.

204
00:10:12,800 --> 00:10:16,320
So now this represents the number of what?

205
00:10:16,320 --> 00:10:20,000
If I have two light bulbs or two switches on at the moment?

206
00:10:20,000 --> 00:10:21,800
Yeah, three, because I have a one.

207
00:10:21,800 --> 00:10:24,840
I have a one, and I have a two, which of course is going to end up equaling three.

208
00:10:24,840 --> 00:10:27,760
And if I pick up a third phone somehow, I could count even higher.

209
00:10:27,760 --> 00:10:31,360
Technically, if I had three light bulbs on, one, one, one,

210
00:10:31,360 --> 00:10:33,120
what would that value be?

211
00:10:33,120 --> 00:10:36,560
Seven, because it's a four plus a two plus a one, and so forth.

212
00:10:36,560 --> 00:10:38,560
Thank you so much for the spontaneity.

213
00:10:38,560 --> 00:10:43,440
So why does this not lead to limitations for us?

214
00:10:43,440 --> 00:10:45,800
I can count in a decimal as high as I want.

215
00:10:45,800 --> 00:10:49,200
I can now count in binary as high as I want, so long as I have enough bits.

216
00:10:49,200 --> 00:10:52,880
But how do I actually represent other information?

217
00:10:52,880 --> 00:10:57,880
Well, if I want to represent something like a letter, how do I get there?

218
00:10:57,880 --> 00:11:02,200
If computers only have electricity in them, and they use binary to count,

219
00:11:02,200 --> 00:11:04,960
and yet somehow they're much more useful than just doing math.

220
00:11:04,960 --> 00:11:08,720
They can have text messages, and emails, and websites, and videos, and more.

221
00:11:08,720 --> 00:11:11,800
How do we get from 0s and 1s to letters?

222
00:11:11,800 --> 00:11:12,640
Well, we should, yeah.

223
00:11:16,000 --> 00:11:18,800
Sorry, a little louder?

224
00:11:18,800 --> 00:11:21,320
Yeah, we just need to kind of relate the numbers to letters.

225
00:11:21,320 --> 00:11:22,760
In other words, all the people in this room

226
00:11:22,760 --> 00:11:25,080
just need to decide at some point that, you know what,

227
00:11:25,080 --> 00:11:27,840
if we want to represent something like the capital letter A,

228
00:11:27,840 --> 00:11:31,120
we just need to decide on a pattern of bits, a pattern of fingers

229
00:11:31,120 --> 00:11:34,720
that's going to represent A. And it turns out, humans years ago just

230
00:11:34,720 --> 00:11:40,520
unilaterally decided 65 shall be the decimal number that represents capital letter A.

231
00:11:40,520 --> 00:11:44,400
And you might guess capital B is represented by what decimal number?

232
00:11:44,400 --> 00:11:47,040
66, and then C is 67, and so forth.

233
00:11:47,040 --> 00:11:51,560
And there's a mapping of like 128 or even 256 possible values for all

234
00:11:51,560 --> 00:11:55,360
the keys you might see on a typical keyboard in order to represent letters.

235
00:11:55,360 --> 00:11:58,880
Now, how does a computer distinguish, though, numbers from letters?

236
00:11:58,880 --> 00:12:00,360
Well, it just depends on the context.

237
00:12:00,400 --> 00:12:03,600
If you're using like a calculator program on your Mac or PC or iPhone

238
00:12:03,600 --> 00:12:06,320
or Android, well, the computer, the device,

239
00:12:06,320 --> 00:12:08,480
is just going to know contextually, let me

240
00:12:08,480 --> 00:12:12,040
interpret this pattern of zeros and ones as actual numbers to do math.

241
00:12:12,040 --> 00:12:15,520
But if you're using the SMS app or the Messages app on your phone,

242
00:12:15,520 --> 00:12:17,760
you're going to actually be in the context of text.

243
00:12:17,760 --> 00:12:20,600
And so your phone is going to interpret that same pattern of zeros

244
00:12:20,600 --> 00:12:24,480
and ones, or light bulbs being off, or at the end of the day, transistors,

245
00:12:24,480 --> 00:12:28,080
tiny pieces of hardware and computers that are either on or off.

246
00:12:28,080 --> 00:12:31,120
It's going to interpret those patterns as just representing a letter.

247
00:12:31,120 --> 00:12:33,840
If you're in the context of a text messaging application,

248
00:12:33,840 --> 00:12:36,320
or Microsoft Word, or Google Docs, or the like,

249
00:12:36,320 --> 00:12:38,800
it completely depends on context.

250
00:12:38,800 --> 00:12:41,360
The system we humans came up with just called ASCII,

251
00:12:41,360 --> 00:12:43,720
American Standard Code for Information Interchange.

252
00:12:43,720 --> 00:12:47,360
The name isn't interesting, but the fact that we all agreed years ago

253
00:12:47,360 --> 00:12:50,840
that 65 is A, and so forth, is what's important.

254
00:12:50,840 --> 00:12:53,440
And so for instance, if we look at this mapping here

255
00:12:53,440 --> 00:12:56,880
of just the first few letters, what does this mean?

256
00:12:56,880 --> 00:13:01,520
If I were to now get a text message, and I had the ability somehow

257
00:13:01,520 --> 00:13:04,320
to look underneath the hood, so to speak, at the pattern of zeros

258
00:13:04,320 --> 00:13:07,480
and ones that someone had just texted me, and that pattern,

259
00:13:07,480 --> 00:13:12,840
if I convert it to decimal, technically said, let's say, 72 and 73.

260
00:13:12,840 --> 00:13:14,600
So I get a whole bunch of zeros and ones.

261
00:13:14,600 --> 00:13:18,120
I do some math, and I realize, OK, I just received 72 and 73,

262
00:13:18,120 --> 00:13:21,200
but this is texting, and so it's not just numbers my friend is sending me.

263
00:13:21,200 --> 00:13:22,200
It's a message.

264
00:13:22,200 --> 00:13:26,560
What message did my friend likely send me if he or she sent 72,

265
00:13:26,560 --> 00:13:28,720
and then 73?

266
00:13:28,720 --> 00:13:31,880
Yeah, hi, HI, because if you skim ahead at the right there,

267
00:13:31,880 --> 00:13:37,320
that just happens to be in ASCII, the mapping between 72 and 73 to H and I.

268
00:13:37,320 --> 00:13:41,320
If technically the message had a third byte, if you will, a byte,

269
00:13:41,320 --> 00:13:43,720
if you've ever wondered, it's just eight bits.

270
00:13:43,720 --> 00:13:45,880
It's convenient to talk, not in terms of single bits,

271
00:13:45,880 --> 00:13:49,080
where you can't count very high, but with a byte or eight bits,

272
00:13:49,080 --> 00:13:50,320
you can count higher.

273
00:13:50,320 --> 00:13:54,640
And so it turns out if I received a third byte, another sequence of eight zeros

274
00:13:54,640 --> 00:14:00,360
and ones together, 33, how would we know what this message now is?

275
00:14:00,360 --> 00:14:03,400
Yeah, so it turns out you would not know this other than by guessing or googling

276
00:14:03,400 --> 00:14:04,880
or just coming in with this knowledge.

277
00:14:04,880 --> 00:14:08,800
This is now high with an exclamation point, because 33 just so happens

278
00:14:08,800 --> 00:14:12,760
if you look it up to map to an exclamation point as well.

279
00:14:12,760 --> 00:14:15,080
Now, if we actually looked at the binary of this,

280
00:14:15,080 --> 00:14:17,280
you would actually see this pattern of zeros and ones.

281
00:14:17,280 --> 00:14:19,560
This is how you represent 72 in binary.

282
00:14:19,560 --> 00:14:23,480
This is how you represent 73, and this is how you represent 33.

283
00:14:23,480 --> 00:14:27,440
And notice, I've only used one, two, three, four, five, six bits,

284
00:14:27,440 --> 00:14:30,880
even though I technically tend to receive things in units of eight,

285
00:14:30,880 --> 00:14:31,880
units of bytes.

286
00:14:31,880 --> 00:14:38,440
But why did I not bother writing another zero, zero here and another zero here?

287
00:14:38,440 --> 00:14:41,560
Does it matter when you write these things out?

288
00:14:41,560 --> 00:14:42,320
No, not really.

289
00:14:42,320 --> 00:14:46,680
Like in English, in our human world, if you were to write one, two, three,

290
00:14:46,680 --> 00:14:51,520
that's 123, if you were to write zero, one, two, three, that's still 123.

291
00:14:51,560 --> 00:14:54,320
So even though we tend to get them in clusters of eight,

292
00:14:54,320 --> 00:14:57,280
we don't necessarily need to write those when just talking about them.

293
00:14:57,280 --> 00:14:58,200
So what have we done?

294
00:14:58,200 --> 00:15:00,680
Well, let me introduce a fancy word now known as abstraction.

295
00:15:00,680 --> 00:15:03,720
Abstraction is just a term generally used in computer science,

296
00:15:03,720 --> 00:15:06,760
and we'll soon see in programming for taking some low level,

297
00:15:06,760 --> 00:15:10,640
like literally low level implementation details, like minutia

298
00:15:10,640 --> 00:15:12,920
even, and understanding them at some point,

299
00:15:12,920 --> 00:15:16,120
but then deciding this is not a useful level conceptually

300
00:15:16,120 --> 00:15:17,360
to think about problems.

301
00:15:17,360 --> 00:15:20,960
I really don't want to solve problems in this world thinking in zeros and ones.

302
00:15:20,960 --> 00:15:24,160
I'd much rather think about things minimally in decimal or better

303
00:15:24,160 --> 00:15:27,040
yet in the context of letters if I'm actually receiving text

304
00:15:27,040 --> 00:15:28,760
or even some other representation.

305
00:15:28,760 --> 00:15:32,680
So abstraction is about taking fairly low level details

306
00:15:32,680 --> 00:15:36,680
and just simplifying them so that we can have a more useful conversation

307
00:15:36,680 --> 00:15:39,960
and never again worry about where the electricity is coming from.

308
00:15:39,960 --> 00:15:43,280
We can just stipulate, my computer can represent zeros and ones.

309
00:15:43,280 --> 00:15:44,800
Therefore, it can represent numbers.

310
00:15:44,800 --> 00:15:47,680
Therefore, it can also represent ASCII or letters.

311
00:15:47,680 --> 00:15:51,520
And we can kind of move on and start solving more interesting problems.

312
00:15:51,520 --> 00:15:55,400
But it would seem that we can't solve all problems

313
00:15:55,400 --> 00:15:59,880
because on my keyboard here, this American keyboard here,

314
00:15:59,880 --> 00:16:02,720
there's a whole bunch of symbols, like 100 or two maybe in total

315
00:16:02,720 --> 00:16:05,200
if we actually hit Shift and Option and all that.

316
00:16:05,200 --> 00:16:07,880
But what you don't see are some pretty common characters,

317
00:16:07,880 --> 00:16:09,680
especially in a very international audience.

318
00:16:09,680 --> 00:16:13,240
What can I apparently not even type on this keyboard?

319
00:16:13,240 --> 00:16:14,080
What kinds of symbols?

320
00:16:14,080 --> 00:16:15,680
Yeah?

321
00:16:15,680 --> 00:16:16,920
Anything with an accent?

322
00:16:16,920 --> 00:16:20,400
If you have accents over vowels or other letters, what else?

323
00:16:20,400 --> 00:16:21,600
I'm sorry?

324
00:16:21,600 --> 00:16:23,240
Umlats or other characters above letters?

325
00:16:23,240 --> 00:16:24,440
Yeah?

326
00:16:24,440 --> 00:16:25,760
Pound?

327
00:16:25,760 --> 00:16:27,000
Like pound symbol?

328
00:16:27,000 --> 00:16:28,520
Oh, like the UK pound symbol?

329
00:16:28,520 --> 00:16:28,840
Sure.

330
00:16:28,840 --> 00:16:30,000
In other countries too.

331
00:16:30,000 --> 00:16:32,640
Any number of Asian languages, there's so many symbols that are not

332
00:16:32,640 --> 00:16:33,720
depicted on this keyboard.

333
00:16:33,720 --> 00:16:37,280
And yet somehow, all of us with international keyboards or phones

334
00:16:37,280 --> 00:16:38,960
can surely express themselves.

335
00:16:38,960 --> 00:16:42,840
But that's because phones and computers these days don't just use ASCII.

336
00:16:42,840 --> 00:16:46,440
ASCII literally use just eight bits total, technically seven,

337
00:16:46,440 --> 00:16:48,240
but then ultimately really eight.

338
00:16:48,240 --> 00:16:51,360
And with eight bits, if you actually do the math, if you have eight bits or eight

339
00:16:51,360 --> 00:16:56,800
fingers, you can only permute them in 256 total possible ways, which

340
00:16:56,800 --> 00:17:00,240
is to say that you can only represent 256 characters using

341
00:17:00,240 --> 00:17:03,160
ASCII with numbers underneath the hood.

342
00:17:03,160 --> 00:17:05,720
And that's not enough to represent so many different symbols

343
00:17:05,720 --> 00:17:07,280
like those enumerated here.

344
00:17:07,280 --> 00:17:09,840
You can't represent any of the accents that you can nonetheless type

345
00:17:09,840 --> 00:17:11,040
on your Macs and PCs.

346
00:17:11,040 --> 00:17:14,400
And you certainly can't type these things, which are very much in vogue,

347
00:17:14,400 --> 00:17:18,200
which even though they're pictures, they're actually just characters.

348
00:17:18,200 --> 00:17:22,680
Because it turns out some years ago, the world decided eight bits is not enough.

349
00:17:22,680 --> 00:17:25,480
Let's start using something called Unicode, where you actually

350
00:17:25,480 --> 00:17:28,840
use one or two or three or even four bytes.

351
00:17:28,840 --> 00:17:34,120
So eight bits or 16 bits, 24 bits, or even 32 bits to represent characters.

352
00:17:34,120 --> 00:17:38,120
And now we have the ability to represent thousands or even millions of characters.

353
00:17:38,120 --> 00:17:43,200
And frankly, dare say, the result of that huge amount of availability

354
00:17:43,200 --> 00:17:45,880
is partly why there are so many of these things these days.

355
00:17:45,880 --> 00:17:48,520
And they just keep making more because there's just so many different numbers

356
00:17:48,520 --> 00:17:50,000
available to us.

357
00:17:50,000 --> 00:17:53,600
So Unicode is often a specific version of it called 8UTF-8,

358
00:17:53,600 --> 00:17:54,880
which we'll see before long.

359
00:17:54,880 --> 00:17:56,720
But let me ask this question here.

360
00:17:56,720 --> 00:18:02,360
This is a crying face with joy, I think this is called.

361
00:18:02,360 --> 00:18:04,480
So it turns out, according to Apple or iOS,

362
00:18:04,480 --> 00:18:07,080
this is the most popular emoji that at least iPhone people

363
00:18:07,120 --> 00:18:08,440
are sending to each other.

364
00:18:08,440 --> 00:18:12,040
So when you're receiving this, though, if we can really take the fun out of this,

365
00:18:12,040 --> 00:18:15,560
what pattern of bits are you actually receiving from your friend?

366
00:18:15,560 --> 00:18:18,240
He or she is clearly trying to express some emotion.

367
00:18:18,240 --> 00:18:24,760
But really, what your friend is sending you, the decimal number, 128,514.

368
00:18:24,760 --> 00:18:28,320
Or really, if you looked at the 0s and 1s coming to you over the internet

369
00:18:28,320 --> 00:18:31,800
or airwaves, you're getting this pattern of 0s and 1s,

370
00:18:31,800 --> 00:18:35,120
which is hardly joyful or hardly descriptive.

371
00:18:35,120 --> 00:18:37,280
But all your phone or computer are doing is

372
00:18:37,280 --> 00:18:40,360
seeing this pattern of bits, looking it up in like a little cheat sheet

373
00:18:40,360 --> 00:18:43,880
and saying, oh, whenever I see this pattern of bits in the context of text,

374
00:18:43,880 --> 00:18:48,160
like texting, I should actually display it as that picture.

375
00:18:48,160 --> 00:18:51,760
Now, that picture has a lot of yellow and other colors in it.

376
00:18:51,760 --> 00:18:53,600
But how do we even get there?

377
00:18:53,600 --> 00:18:57,960
Well, it turns out that this same pattern of numbers, 72, 73, 33,

378
00:18:57,960 --> 00:19:00,840
which just to be sure, a moment ago meant what?

379
00:19:00,840 --> 00:19:04,720
Hi, in the context of a textual program like Microsoft Word, Google Docs

380
00:19:04,720 --> 00:19:06,640
texting, this means high.

381
00:19:06,640 --> 00:19:10,560
But what if you saw this same pattern of bytes?

382
00:19:10,560 --> 00:19:13,920
And again, we could draw the 0s and 1s, but it's not interesting anymore.

383
00:19:13,920 --> 00:19:16,200
So we're going to abstract away at the decimal level.

384
00:19:16,200 --> 00:19:19,680
If you've got this same pattern of 0s and 1s or numbers in the context

385
00:19:19,680 --> 00:19:23,840
of like Photoshop or a browser or some kind of photo program,

386
00:19:23,840 --> 00:19:27,600
well, it might make more sense to interpret it not as text, but as

387
00:19:27,600 --> 00:19:29,400
imagery, some kind of colors.

388
00:19:29,400 --> 00:19:31,760
Well, it turns out there's this other system in the world.

389
00:19:31,760 --> 00:19:36,120
You might have seen this acronym before called RGB, red, green, blue.

390
00:19:36,120 --> 00:19:40,600
And this is just a way of humans having standardized years ago that, you know what,

391
00:19:40,600 --> 00:19:43,600
if we want to represent a dot on someone's screen, otherwise known

392
00:19:43,600 --> 00:19:46,800
as a pixel, tiny little square on the screen of your phone, your laptop,

393
00:19:46,800 --> 00:19:50,560
or even TV these days, we're going to use three bytes.

394
00:19:50,560 --> 00:19:54,720
One byte to specify how much red should be in that specific pixel.

395
00:19:54,720 --> 00:19:58,600
One more byte to specify how much green should be combined with red to form

396
00:19:58,600 --> 00:19:59,280
that pixel.

397
00:19:59,280 --> 00:20:02,560
And then one more byte, a third, to represent how much blue

398
00:20:02,560 --> 00:20:06,280
to combine with those other two colors to make a new color altogether.

399
00:20:06,280 --> 00:20:09,800
So it's kind of like combining paints, except in this case,

400
00:20:09,800 --> 00:20:14,480
it's more really waves of light in order to get a specific color using just

401
00:20:14,480 --> 00:20:17,160
red, green, and blue as your palette.

402
00:20:17,160 --> 00:20:21,440
And so if we were to see this red, green, blue pattern and say, you know what,

403
00:20:21,440 --> 00:20:26,440
give me 72 red, 73 of green, and 33 of blue,

404
00:20:26,440 --> 00:20:28,920
if the total possible range, as I alluded to earlier,

405
00:20:28,920 --> 00:20:33,800
is like 0 to 256, or technically 0 to 255,

406
00:20:33,800 --> 00:20:36,480
if you start counting in computer science light from 0,

407
00:20:36,480 --> 00:20:39,280
this is like a medium amount of red, medium amount of green,

408
00:20:39,280 --> 00:20:42,720
and just a little bit of blue if the range goes from 0 to 255.

409
00:20:42,720 --> 00:20:44,840
So if you combine these three things together,

410
00:20:44,840 --> 00:20:48,160
anyone know what color you get?

411
00:20:48,160 --> 00:20:51,360
Yeah, so it's kind of a light yellow that looks like this.

412
00:20:51,360 --> 00:20:55,080
So if a computer is storing a single dot on the screen that

413
00:20:55,120 --> 00:20:58,400
happens to be in yellow, what the computer is actually storing

414
00:20:58,400 --> 00:21:01,920
is not this dot physically, but a pattern of three bytes.

415
00:21:01,920 --> 00:21:03,760
How much red, how much green, how much blue

416
00:21:03,760 --> 00:21:06,200
should the computer display at this particular point?

417
00:21:06,200 --> 00:21:11,320
So if we look at this crying face of joy, and we kind of enhance or zoom in on it

418
00:21:11,320 --> 00:21:15,080
here, you can actually see it start to pixelate, so to speak,

419
00:21:15,080 --> 00:21:16,400
where you start to see the dots.

420
00:21:16,400 --> 00:21:18,720
If I punch in a little more, now you can really

421
00:21:18,720 --> 00:21:20,800
start to see the dots on the screen.

422
00:21:20,800 --> 00:21:22,960
And if I go in even farther, you can actually

423
00:21:22,960 --> 00:21:26,880
see the tiny little squares that compose this image, most of which

424
00:21:26,880 --> 00:21:30,080
at the zoom level are yellow, but a bunch of which are black,

425
00:21:30,080 --> 00:21:33,840
a bunch of which are like light black or dark yellow.

426
00:21:33,840 --> 00:21:36,440
And that's what composes this image ultimately.

427
00:21:36,440 --> 00:21:40,640
So this is to say, if you count up all of the pixels on the screen

428
00:21:40,640 --> 00:21:43,920
and then multiply it by 1, 2, 3 bytes, that's

429
00:21:43,920 --> 00:21:47,600
how many bytes or kilobytes or megabytes, if you've heard those terms,

430
00:21:47,600 --> 00:21:52,320
are going to be stored on your computer just to represent that image.

431
00:21:52,320 --> 00:21:56,800
So we've gone from electricity to down here, so to speak, to 0s and 1s

432
00:21:56,800 --> 00:21:58,680
to decimal, now to colors.

433
00:21:58,680 --> 00:22:00,920
Well, with colors, you can get images.

434
00:22:00,920 --> 00:22:02,200
What comes after images?

435
00:22:02,200 --> 00:22:05,920
Well, if we've all watched videos or movies, certainly digitally these days,

436
00:22:05,920 --> 00:22:08,200
well, what is a movie or a video file?

437
00:22:08,200 --> 00:22:09,480
How might that be implemented?

438
00:22:12,480 --> 00:22:14,320
Say a little louder?

439
00:22:14,320 --> 00:22:15,720
Yeah, it's a collection of images.

440
00:22:15,720 --> 00:22:19,160
If you've ever heard of frames per second, like movies tend to be 24 frames

441
00:22:19,160 --> 00:22:21,840
per second or 30 frames per second, that just

442
00:22:21,840 --> 00:22:26,760
means that a typical movie every second is showing you 24 or 30 images

443
00:22:26,760 --> 00:22:30,120
per second, and they're just flying by so quickly that you actually don't

444
00:22:30,120 --> 00:22:32,600
notice you're just watching a sequence of static images.

445
00:22:32,600 --> 00:22:35,520
It's like as a kid, if you ever had one of those paper flip books,

446
00:22:35,520 --> 00:22:38,800
where there's tons of drawings in them, and as you flip through the pages,

447
00:22:38,800 --> 00:22:41,680
you see things moving, but that's just because your eyes are just seeing

448
00:22:41,680 --> 00:22:45,880
little snapshots ever so quickly of something moving on the paper.

449
00:22:45,880 --> 00:22:47,880
That's all a video file actually is.

450
00:22:47,880 --> 00:22:50,520
So if you have an iPhone and you've ever played with these an emojis,

451
00:22:50,520 --> 00:22:55,080
so to speak, well, all those are our little video files composed of lots

452
00:22:55,080 --> 00:22:59,360
and lots and lots of images that you have saved on your phone or texted

453
00:22:59,360 --> 00:23:00,560
to someone else.

454
00:23:00,560 --> 00:23:03,800
And if we just think now, OK, now we're at the point of video, but that's OK.

455
00:23:03,800 --> 00:23:05,360
Videos are just bunches of images.

456
00:23:05,360 --> 00:23:07,000
Images are just bunches of colors.

457
00:23:07,000 --> 00:23:08,760
Colors are just patterns of bits.

458
00:23:08,760 --> 00:23:11,440
And bits, at the end of the day, are just the result of electricity

459
00:23:11,440 --> 00:23:15,240
coming into my machine or transistors turning switches on and off.

460
00:23:15,240 --> 00:23:18,240
Like we've all of a sudden told this entire story,

461
00:23:18,240 --> 00:23:20,880
but none of us ever is going to need to really think about binary

462
00:23:20,880 --> 00:23:25,120
in the context of videos because a video is just an abstraction on top

463
00:23:25,120 --> 00:23:26,040
of bunches of images.

464
00:23:26,040 --> 00:23:29,960
And images are just an abstraction of top bunches of pixels and so forth.

465
00:23:29,960 --> 00:23:33,640
So we can keep painting this hierarchy that just allows us to talk about things

466
00:23:33,640 --> 00:23:34,560
at a more useful level.

467
00:23:34,560 --> 00:23:36,800
And the reason we had this conversation is just

468
00:23:36,800 --> 00:23:42,120
because we needed a way to represent inputs and outputs to problems.

469
00:23:42,120 --> 00:23:47,040
So let me pause there for just a second to see if there's any questions.

470
00:23:47,040 --> 00:23:50,200
Anything at all?

471
00:23:50,200 --> 00:23:53,120
All right, so what's inside this black box?

472
00:23:53,120 --> 00:23:56,720
Well, it turns out this is where the really interesting work starts

473
00:23:56,720 --> 00:23:58,640
to happen and the thought starts to come in.

474
00:23:58,640 --> 00:24:02,400
This is the proverbial algorithms, step by step instructions

475
00:24:02,400 --> 00:24:03,920
for solving some problem.

476
00:24:03,920 --> 00:24:06,040
And some of you might have solved this problem before,

477
00:24:06,040 --> 00:24:07,640
either digitally or textually.

478
00:24:07,640 --> 00:24:10,640
But of course, if you have contacts in your phone these days

479
00:24:10,640 --> 00:24:13,520
and you've got bunches of friends and family, odds are they're alphabetized

480
00:24:13,520 --> 00:24:14,760
by first name or last name.

481
00:24:14,760 --> 00:24:16,480
And you have autocomplete these days.

482
00:24:16,480 --> 00:24:19,040
But it really is just a long list of names and numbers.

483
00:24:19,040 --> 00:24:21,520
That's not all that different from yesterday's implementation

484
00:24:21,520 --> 00:24:25,240
of the same problem, which was this device here, a phone book.

485
00:24:25,240 --> 00:24:28,920
Now, this phone book might have a friend of ours, and it's a Mike Smith, whose

486
00:24:28,920 --> 00:24:30,280
last name starts with s.

487
00:24:30,280 --> 00:24:32,560
And I could, of course, if trying to find Mike Smith,

488
00:24:32,560 --> 00:24:37,080
start by looking at the first page, the second page, the third page,

489
00:24:37,080 --> 00:24:40,400
the fourth page, and eventually just hopefully find Mike Smith.

490
00:24:40,400 --> 00:24:44,600
Indeed, is this algorithm, this step by step process, correct for finding

491
00:24:44,600 --> 00:24:46,560
someone like Mike Smith?

492
00:24:46,560 --> 00:24:47,440
Yeah, it's correct.

493
00:24:47,440 --> 00:24:50,600
It's stupid and slow, perhaps, because it's going to take forever

494
00:24:50,600 --> 00:24:52,040
in a phone book of this size.

495
00:24:52,040 --> 00:24:55,240
But it is correct, because if Mike's in here, I will, in fact, find him.

496
00:24:55,240 --> 00:24:56,160
But I could do this better.

497
00:24:56,160 --> 00:25:00,960
I could do it sort of two at a time, so two, four, six, eight, 10,

498
00:25:00,960 --> 00:25:03,200
imperfectly, 10, 12, 14.

499
00:25:03,200 --> 00:25:05,080
Is that faster?

500
00:25:05,080 --> 00:25:07,240
Obviously, it's going twice as fast.

501
00:25:07,240 --> 00:25:09,440
Is it correct?

502
00:25:09,440 --> 00:25:11,760
No, why is it not correct?

503
00:25:11,760 --> 00:25:12,880
I might miss him, right?

504
00:25:12,880 --> 00:25:16,200
Mike just accidentally might eventually get sandwiched between two pages,

505
00:25:16,200 --> 00:25:19,000
and I have the unlucky experience of just missing him.

506
00:25:19,000 --> 00:25:20,040
Now, is this fixable?

507
00:25:20,040 --> 00:25:20,640
Yeah.

508
00:25:20,640 --> 00:25:24,840
I can probably, once I hit, like, SN or the T section, for instance,

509
00:25:24,840 --> 00:25:27,320
I can just say, all right, obviously I've gone too far for Mike.

510
00:25:27,320 --> 00:25:30,560
Let me just double back one or just a few pages, so it is fixable.

511
00:25:30,560 --> 00:25:34,000
And so long as I've saved time by flying through this twice as fast,

512
00:25:34,000 --> 00:25:37,960
can I at least afford to spend a few more steps at the very end just

513
00:25:37,960 --> 00:25:39,320
to find Mike Smith?

514
00:25:39,320 --> 00:25:40,560
But none of us are going to do that.

515
00:25:40,560 --> 00:25:43,080
And our Apple devices and Android devices certainly

516
00:25:43,080 --> 00:25:44,920
don't do that for efficiency today.

517
00:25:44,920 --> 00:25:49,120
Odds are most of us are going to do what to find someone in any book like this?

518
00:25:49,120 --> 00:25:52,360
Yeah, open to roughly the middle, or maybe bias ourselves toward the end,

519
00:25:52,360 --> 00:25:53,760
because S is after the middle.

520
00:25:53,760 --> 00:25:55,960
But I'm in the middle of the phone book here.

521
00:25:55,960 --> 00:25:59,320
And now, if I know that Mike is in the S's, and therefore over here,

522
00:25:59,320 --> 00:26:01,920
where do I know he's not?

523
00:26:01,920 --> 00:26:03,760
He's not in the beginning, and I can literally

524
00:26:03,760 --> 00:26:08,280
tear a problem like this in half, throw figuratively and literally half

525
00:26:08,320 --> 00:26:12,160
of the problem away, and be left with fundamentally the same problem,

526
00:26:12,160 --> 00:26:13,120
but it's half as big.

527
00:26:13,120 --> 00:26:16,200
I went from, like, whatever, 1,000 pages to 500 pages,

528
00:26:16,200 --> 00:26:17,960
and I can now repeat this algorithm.

529
00:26:17,960 --> 00:26:19,680
I look down, and a little too far.

530
00:26:19,680 --> 00:26:21,120
I'm in the T section now.

531
00:26:21,120 --> 00:26:25,680
OK, I can again tear the problem in half, throw that half away,

532
00:26:25,680 --> 00:26:29,000
taking a 500 page byte out, a 250 page byte out,

533
00:26:29,000 --> 00:26:31,680
now leaving myself with just 250 pages more,

534
00:26:31,680 --> 00:26:33,360
and notice just how quickly I got here.

535
00:26:33,360 --> 00:26:37,880
The first two algorithms got me from 1,000 to 999 to 998,

536
00:26:37,920 --> 00:26:41,600
or 1,000 to 998 to 996.

537
00:26:41,600 --> 00:26:44,440
But here, I went from 1,000 to 500 to 250.

538
00:26:44,440 --> 00:26:46,400
Feels like we're making up time here.

539
00:26:46,400 --> 00:26:48,240
And indeed, if I keep repeating this process,

540
00:26:48,240 --> 00:26:51,080
hopefully, I'll be left with just one page of the book

541
00:26:51,080 --> 00:26:55,760
that Mike is either on or not, at which point I will call him.

542
00:26:55,760 --> 00:26:58,840
And so that's an algorithm that honestly leverages probably all

543
00:26:58,840 --> 00:27:01,800
the intuition we have, and a lot of what programming is going to be.

544
00:27:01,800 --> 00:27:05,400
It's thinking about a problem like this, figuring out how to divide and conquer

545
00:27:05,400 --> 00:27:07,160
it, and then expressing yourself in a way

546
00:27:07,160 --> 00:27:09,600
that the computer can then solve that problem for you.

547
00:27:09,600 --> 00:27:13,240
And just to paint a picture of how much better this algorithm is,

548
00:27:13,240 --> 00:27:15,560
well, if this is just a very abstract chart where

549
00:27:15,560 --> 00:27:19,200
we have on the vertical or y-axis how much time it takes to solve a problem,

550
00:27:19,200 --> 00:27:21,960
and on the horizontal axis how big the problem is,

551
00:27:21,960 --> 00:27:25,080
so the farther out you go this way, the more pages in the problem,

552
00:27:25,080 --> 00:27:27,520
the more pages in the phone book, and the higher you go up here,

553
00:27:27,520 --> 00:27:29,960
the more seconds or page turns it's going to take.

554
00:27:29,960 --> 00:27:34,320
That first algorithm is just like a linear slope, so to speak.

555
00:27:34,320 --> 00:27:36,360
Because for every additional page in the book,

556
00:27:36,400 --> 00:27:39,320
it might take me one more second, right up, right up.

557
00:27:39,320 --> 00:27:42,240
It's just a one-for-one relationship with pages.

558
00:27:42,240 --> 00:27:45,960
The second algorithm, if I plot it where I'm flying through twice as fast,

559
00:27:45,960 --> 00:27:47,720
what is that line going to look like instead?

560
00:27:52,160 --> 00:27:54,400
Yeah, it's going to look lower than this one.

561
00:27:54,400 --> 00:27:57,760
It's still going to be a straight line, because now there's a two-to-one relationship.

562
00:27:57,760 --> 00:28:00,240
But if you've got a phone book that's got this many pages,

563
00:28:00,240 --> 00:28:03,560
and in the first algorithm it took this long here,

564
00:28:03,560 --> 00:28:07,320
well, in the second algorithm it's going to take about half as many steps,

565
00:28:07,320 --> 00:28:10,440
plus or minus one or two, if you need to actually double back a little bit.

566
00:28:10,440 --> 00:28:13,280
But that third algorithm is what we'll call logarithmic.

567
00:28:13,280 --> 00:28:15,640
If n is the number of pages in the phone book,

568
00:28:15,640 --> 00:28:17,520
the first algorithm in the very worst case

569
00:28:17,520 --> 00:28:19,600
might take all n pages to find Mike Smith.

570
00:28:19,600 --> 00:28:21,800
The second algorithm is going to take half as many steps,

571
00:28:21,800 --> 00:28:23,640
because I'm flying through it two at a time.

572
00:28:23,640 --> 00:28:26,880
But the third algorithm is going to look and feel like this.

573
00:28:26,880 --> 00:28:31,320
It's going to be curved and ever so slowly rising and rising and rising.

574
00:28:31,320 --> 00:28:35,040
The implication of which is if Verizon or the phone company doubles

575
00:28:35,040 --> 00:28:36,840
the number of pages in the phone book next year,

576
00:28:36,840 --> 00:28:40,200
because Cambridge and Somerville merge together in the phone book,

577
00:28:40,200 --> 00:28:41,840
and we now have 2,000 pages.

578
00:28:41,840 --> 00:28:45,760
Well, how many more steps does my third algorithm take?

579
00:28:45,760 --> 00:28:47,880
Just one, because I can take a thousand page

580
00:28:47,880 --> 00:28:50,880
bite out of the problem with that clever algorithm,

581
00:28:50,880 --> 00:28:54,760
whereas my first two algorithms would take it one or just two pages at a time.

582
00:28:54,760 --> 00:28:59,360
So that is to say, we have to hugely increase the size of this problem

583
00:28:59,400 --> 00:29:04,120
just for the number of seconds or page turns to appreciably actually increase.

584
00:29:04,120 --> 00:29:06,160
And so as we start to learn about programming,

585
00:29:06,160 --> 00:29:11,720
it's again going to be leveraging of this intuition in order to actually solve

586
00:29:11,720 --> 00:29:18,480
problems in code more effectively than we might without that intuition alone.

587
00:29:18,480 --> 00:29:20,200
So let's formalize this now.

588
00:29:20,200 --> 00:29:23,600
So that was kind of a very intuitive way of dividing and conquering a problem.

589
00:29:23,600 --> 00:29:26,040
Just kind of made sense to go in the middle, tear it,

590
00:29:26,040 --> 00:29:29,720
and go to the other half, or the other half, and tear it again, and so forth.

591
00:29:29,720 --> 00:29:34,240
But a computer, even as cool as Alexa and Google Home and all this,

592
00:29:34,240 --> 00:29:36,800
are, you can't really just talk to them as another human

593
00:29:36,800 --> 00:29:38,480
and have them execute things correctly.

594
00:29:38,480 --> 00:29:42,040
I struggle just to get Siri to set a timer on my phone.

595
00:29:42,040 --> 00:29:43,880
So we're not quite there yet, so we're still

596
00:29:43,880 --> 00:29:47,880
at the age where we have to be ever so precise with computers, voice

597
00:29:47,880 --> 00:29:51,120
activated or otherwise, and so thus enter pseudocode for now.

598
00:29:51,120 --> 00:29:53,200
Pseudocode has no formal definition.

599
00:29:53,200 --> 00:29:57,640
This is just a way of saying, use English-like syntax or any spoken language

600
00:29:57,640 --> 00:30:00,880
and just express yourself succinctly and correctly

601
00:30:00,880 --> 00:30:03,760
so that a computer or a robot or even another person

602
00:30:03,760 --> 00:30:06,320
can understand what it is you're trying to say.

603
00:30:06,320 --> 00:30:09,880
So here, I propose as an algorithm written in pseudocode,

604
00:30:09,880 --> 00:30:12,440
English-like syntax, that just gets my point across.

605
00:30:12,440 --> 00:30:14,200
And I could write this in any number of ways.

606
00:30:14,200 --> 00:30:17,320
I've numbered the steps from 0 on up just for the sake of discussion,

607
00:30:17,320 --> 00:30:19,560
but this would seem to capture what I did there.

608
00:30:19,560 --> 00:30:22,520
Pick up the phone book, open to the middle of the phone book,

609
00:30:22,520 --> 00:30:25,920
look at the names, if Smith is among the names, call Mike.

610
00:30:25,920 --> 00:30:29,920
Else, if Smith is earlier in the book, go to the left, specifically

611
00:30:29,920 --> 00:30:33,560
the middle of the left half of the book, and then go back to step two.

612
00:30:33,560 --> 00:30:36,200
Because indeed, I was just doing the same thing again and again.

613
00:30:36,200 --> 00:30:38,960
And the reason I wasn't doing it forever was because every time I

614
00:30:38,960 --> 00:30:42,720
repeated myself by opening and tearing, I was shrinking the problem.

615
00:30:42,720 --> 00:30:46,160
And I can only shrink a problem of some fixed finite size so many times

616
00:30:46,160 --> 00:30:47,600
until I get just one page.

617
00:30:47,600 --> 00:30:50,720
And so if I can continue this logic looking to the right or to the left

618
00:30:50,720 --> 00:30:54,120
or just quitting, if I don't find Mike at all on the last page,

619
00:30:54,120 --> 00:30:57,400
this would seem to capture more precisely that code.

620
00:30:57,400 --> 00:30:59,840
Well, let's actually excerpt from this now a few concepts

621
00:30:59,840 --> 00:31:02,640
and then start to apply them to actual code.

622
00:31:02,640 --> 00:31:03,840
Highlight it in yellow here.

623
00:31:03,840 --> 00:31:06,400
I daresay are all of the verbs or actions.

624
00:31:06,400 --> 00:31:08,680
These are the functions, as we're going to start

625
00:31:08,680 --> 00:31:10,000
calling them in this algorithm.

626
00:31:10,000 --> 00:31:13,160
A function is just a specific step, a specific action

627
00:31:13,160 --> 00:31:16,280
you take in order to do something.

628
00:31:16,280 --> 00:31:20,480
And so in yellow here, pick up, open to, look at, call, open, quit,

629
00:31:20,480 --> 00:31:24,040
or all actions or verbs, or henceforth, we'll call them functions.

630
00:31:24,040 --> 00:31:28,120
Meanwhile, highlighted in yellow here, if, else, if, else, if, else,

631
00:31:28,120 --> 00:31:30,200
these are kind of starting to ask questions.

632
00:31:30,200 --> 00:31:33,240
What might these be called if you have some familiarity?

633
00:31:33,240 --> 00:31:36,160
Yeah, it turns out many programming languages, if you've seen any before,

634
00:31:36,160 --> 00:31:37,200
would call these conditions.

635
00:31:37,200 --> 00:31:39,720
They're branches or proverbial forks in the road.

636
00:31:39,720 --> 00:31:41,400
If this is true, go this way.

637
00:31:41,400 --> 00:31:44,840
Else maybe go this other way, or perhaps a third or fourth direction

638
00:31:44,840 --> 00:31:45,680
altogether.

639
00:31:45,680 --> 00:31:49,280
Meanwhile, if we actually look at these highlighted phrases,

640
00:31:49,280 --> 00:31:52,080
if Smith is among names, or if Smith is earlier in book,

641
00:31:52,080 --> 00:31:55,400
or Smith is later in book, these are the specific questions we're

642
00:31:55,400 --> 00:31:57,000
asking in order to make that decision.

643
00:31:57,000 --> 00:31:59,760
These are known as Boolean expressions, named after a gentleman

644
00:31:59,760 --> 00:32:01,800
by the last name of Boole some years ago.

645
00:32:01,800 --> 00:32:05,360
And so a Boolean expression is just a question that has a yes or no answer,

646
00:32:05,360 --> 00:32:09,440
a true false answer, a 1-0 answer, if you will.

647
00:32:09,440 --> 00:32:12,000
And that's a nice mapping to what computers are really good at.

648
00:32:12,000 --> 00:32:14,040
So within conditions, you have Boolean expressions

649
00:32:14,040 --> 00:32:17,320
to decide which fork in the road you want to go down.

650
00:32:17,320 --> 00:32:19,320
And then lastly, highlighted in yellow here,

651
00:32:19,320 --> 00:32:21,880
are you go back to step two in a couple of places.

652
00:32:21,880 --> 00:32:24,560
This is inducing some kind of cycle or loop

653
00:32:24,560 --> 00:32:28,400
that's telling the computer to do something again, and again, and again.

654
00:32:28,400 --> 00:32:32,280
So in short, we have these building blocks already, conceptually.

655
00:32:32,280 --> 00:32:36,600
And it turns out we can now start to translate these to an actual programming

656
00:32:36,600 --> 00:32:37,240
language.

657
00:32:37,240 --> 00:32:39,240
The first of the languages we'll introduce in CS50

658
00:32:39,240 --> 00:32:40,520
is something called Scratch.

659
00:32:40,520 --> 00:32:42,360
Turns out this is not a text-based language,

660
00:32:42,360 --> 00:32:44,800
like in my English pseudocode there, but it's graphical.

661
00:32:44,800 --> 00:32:47,300
And things look like puzzle pieces that you can drag and drop,

662
00:32:47,300 --> 00:32:49,500
and they interconnect if it makes logical sense to do so.

663
00:32:49,500 --> 00:32:51,820
And in fact, some of you might have played with this back in the day

664
00:32:51,820 --> 00:32:53,660
as kids or even more recently, because it's actually

665
00:32:53,660 --> 00:32:56,660
targeted typically at students in after-school programs who just

666
00:32:56,660 --> 00:33:00,780
want to learn more methodical, more algorithmic, or computational thinking.

667
00:33:00,780 --> 00:33:04,180
And we're going to use it to explore not only these building blocks,

668
00:33:04,180 --> 00:33:05,540
but a few others as well.

669
00:33:05,540 --> 00:33:09,900
It turns out in the other languages we'll explore in CS50 and beyond are languages

670
00:33:09,900 --> 00:33:13,140
like C that we'll actually transition to as quickly as next week

671
00:33:13,140 --> 00:33:17,180
to then translate what we do this week in Scratch to next week in C.

672
00:33:17,220 --> 00:33:19,740
And in languages like Python and JavaScript and SQL,

673
00:33:19,740 --> 00:33:22,660
which we'll also explore, do we have other capabilities, the ability

674
00:33:22,660 --> 00:33:25,940
to store data in variables, so to speak, to use threads, which

675
00:33:25,940 --> 00:33:28,460
means get the computer to do multiple things at once,

676
00:33:28,460 --> 00:33:31,020
events to mean listen for things happening,

677
00:33:31,020 --> 00:33:34,900
like a click on the page, or a human typing, or even saying something.

678
00:33:34,900 --> 00:33:38,820
We'll be able to do all of the things that you take for granted in your very own phones.

679
00:33:38,820 --> 00:33:41,580
And we'll do this first by way of this guy.

680
00:33:41,580 --> 00:33:45,100
So this is Scratch, the default cat that comes with this programming language

681
00:33:45,100 --> 00:33:46,540
from MIT's Media Lab.

682
00:33:46,540 --> 00:33:49,980
And via Scratch, can we start programming him to move up, down,

683
00:33:49,980 --> 00:33:54,180
left, right, say something, utter something, and other commands all together?

684
00:33:54,180 --> 00:33:57,420
In fact, let me go ahead and switch contexts here

685
00:33:57,420 --> 00:34:00,020
to show you the very first thing I ever wrote in Scratch.

686
00:34:00,020 --> 00:34:02,060
It was back in the day when I was in graduate school.

687
00:34:02,060 --> 00:34:04,300
And Scratch had just been invented by MIT.

688
00:34:04,300 --> 00:34:06,220
Let me go ahead and open this.

689
00:34:06,220 --> 00:34:09,460
And I called it Oscar time.

690
00:34:09,460 --> 00:34:12,300
And if we could perhaps have a volunteer come on up for just a moment,

691
00:34:12,300 --> 00:34:14,860
you have to be comfortable being on stage and on the internet.

692
00:34:14,860 --> 00:34:16,020
I have it here in the white shirt.

693
00:34:16,020 --> 00:34:17,200
Saw your hand first.

694
00:34:17,200 --> 00:34:18,700
Come on down.

695
00:34:18,700 --> 00:34:20,140
So this is Oscar time.

696
00:34:20,140 --> 00:34:22,420
It's implemented in a language called Scratch.

697
00:34:22,420 --> 00:34:26,500
And at the end of the day, all that is underneath the hood of this program

698
00:34:26,500 --> 00:34:30,140
is functions, and loops, and conditions, and a few other of these concepts.

699
00:34:30,140 --> 00:34:30,980
Hi, what's your name?

700
00:34:30,980 --> 00:34:31,480
Aviva?

701
00:34:31,480 --> 00:34:32,260
Aviva, David.

702
00:34:32,260 --> 00:34:33,020
Nice to meet you.

703
00:34:33,020 --> 00:34:35,100
Come on over here.

704
00:34:35,100 --> 00:34:38,620
And in just a moment, I'm going to go ahead and click the green flag

705
00:34:38,620 --> 00:34:41,220
at the top left hand corner, which is going to play this game.

706
00:34:41,220 --> 00:34:43,220
And we'll see on the screen the instructions.

707
00:34:43,980 --> 00:34:50,980
Oh, I love trash.

708
00:34:50,980 --> 00:34:55,180
Anything dirty or dingy or dusty.

709
00:34:55,180 --> 00:34:59,540
Anything ragged or rotten or rusty.

710
00:34:59,540 --> 00:35:03,420
Yes, I love trash.

711
00:35:03,420 --> 00:35:05,980
If you really want to see something trashy, look at this.

712
00:35:05,980 --> 00:35:10,100
I have here a sneaker that's tattered and worn.

713
00:35:10,100 --> 00:35:14,260
It's all full of holes and the laces are torn.

714
00:35:14,260 --> 00:35:18,380
A gift from my mother the day I was born.

715
00:35:18,380 --> 00:35:22,340
I love it because it's trash.

716
00:35:22,340 --> 00:35:26,260
Oh, I love trash.

717
00:35:26,260 --> 00:35:30,460
Anything dirty or dingy or dusty.

718
00:35:30,460 --> 00:35:34,940
Anything ragged or rotten or rusty.

719
00:35:34,940 --> 00:35:38,540
Yes, I love trash.

720
00:35:38,540 --> 00:35:41,260
Yes, I'm more rotten stuff.

721
00:35:41,260 --> 00:35:44,780
I have here some newspaper, 13 months old.

722
00:35:44,780 --> 00:35:46,540
All right, we're going to round of applause for Aviva

723
00:35:46,540 --> 00:35:47,380
for coming on up.

724
00:35:47,380 --> 00:35:48,620
Thank you.

725
00:35:48,620 --> 00:35:49,420
Here, up, Aviva.

726
00:35:52,420 --> 00:35:53,860
A little CS50 stress ball.

727
00:35:53,860 --> 00:35:56,820
So suffice it to say, if you're tired of this song,

728
00:35:56,820 --> 00:36:00,020
consider how tired I was eight hours later while debugging

729
00:36:00,020 --> 00:36:01,300
and building this program.

730
00:36:01,300 --> 00:36:02,740
But consider what it is we just saw.

731
00:36:02,740 --> 00:36:05,100
It's this interactive game, and stuff is animated,

732
00:36:05,100 --> 00:36:06,180
and music is playing.

733
00:36:06,180 --> 00:36:09,860
But if you focus on decomposing, so to speak, this program,

734
00:36:09,860 --> 00:36:13,020
into just basic building blocks, this is just kind of a big abstraction

735
00:36:13,020 --> 00:36:16,060
over some lower level pieces of functionality.

736
00:36:16,060 --> 00:36:17,260
Like this trash can here.

737
00:36:17,260 --> 00:36:18,780
At the moment, it's just a picture.

738
00:36:18,780 --> 00:36:21,340
And on occasion, as soon as Aviva dropped something into the trash,

739
00:36:21,340 --> 00:36:23,140
the lid came up, and Oscar came out.

740
00:36:23,140 --> 00:36:25,340
He said something, and then he went back down.

741
00:36:25,340 --> 00:36:27,380
But that animation is super simplistic.

742
00:36:27,380 --> 00:36:31,820
It was just a sequence of one, two, three, or so images displaying,

743
00:36:31,820 --> 00:36:34,580
and then going back down to create the illusion of animation.

744
00:36:34,580 --> 00:36:36,940
Meanwhile, every time Oscar said something,

745
00:36:36,940 --> 00:36:39,980
that was keeping track of her score in what's called a variable.

746
00:36:39,980 --> 00:36:41,900
In algebra, you have x, and y, and z.

747
00:36:41,900 --> 00:36:43,620
But in programming, you have the same idea,

748
00:36:43,620 --> 00:36:46,220
but it's generally more useful to call them more descriptively,

749
00:36:46,220 --> 00:36:47,100
like your score.

750
00:36:47,100 --> 00:36:49,780
And so there's probably a variable in this game called score

751
00:36:49,780 --> 00:36:52,220
that was just keeping track of how many times Aviva

752
00:36:52,220 --> 00:36:53,900
had dropped something into the trash.

753
00:36:53,900 --> 00:36:57,740
Meanwhile, the trash itself, and the shoe, and the newspaper,

754
00:36:57,740 --> 00:36:59,860
and even more things happened eventually,

755
00:36:59,860 --> 00:37:02,820
were falling from the sky at random locations.

756
00:37:02,820 --> 00:37:05,820
And that's because I programmed the game to sort of start the trash here

757
00:37:05,820 --> 00:37:09,700
or over here, just to make it a little more challenging as the game picked up.

758
00:37:09,700 --> 00:37:12,180
And in fact, things start falling faster and faster over time,

759
00:37:12,180 --> 00:37:15,180
like a typical game, getting more and more difficult.

760
00:37:15,180 --> 00:37:17,380
So how do we get to something like that?

761
00:37:17,380 --> 00:37:20,620
Well, let me go ahead and open up Scratch itself and introduce

762
00:37:20,620 --> 00:37:21,780
the environment.

763
00:37:21,780 --> 00:37:24,860
So in Scratch, you essentially have three general areas.

764
00:37:24,860 --> 00:37:27,340
And it's web-based, and so you can do this on any computer.

765
00:37:27,340 --> 00:37:30,180
And in the left-hand side here, you have those puzzle pieces,

766
00:37:30,180 --> 00:37:31,580
to which I referred earlier.

767
00:37:31,580 --> 00:37:36,780
These puzzle pieces are all mapping to functions, or loops, or conditions,

768
00:37:36,780 --> 00:37:38,660
or variables, things that we saw before.

769
00:37:38,660 --> 00:37:41,860
And I'm going to be able to drag and drop them into the middle in order

770
00:37:41,860 --> 00:37:44,980
to interconnect them and write my program, which we'll do in just a moment.

771
00:37:44,980 --> 00:37:48,340
Meanwhile, Scratch lives in this stage, this world, where

772
00:37:48,340 --> 00:37:49,900
you can move up, down, left, right.

773
00:37:49,900 --> 00:37:51,420
You can change what Scratch looks like.

774
00:37:51,420 --> 00:37:53,980
You can add other characters, otherwise known as sprites,

775
00:37:53,980 --> 00:37:55,860
in order to have multiple things happening at once.

776
00:37:55,860 --> 00:37:57,260
And of course, you can full screen it.

777
00:37:57,260 --> 00:38:01,100
And so the Oscar time game a moment ago was actually a whole bunch of sprites.

778
00:38:01,100 --> 00:38:03,020
Oscar's trash can was one.

779
00:38:03,020 --> 00:38:05,340
Each piece of trash was another sprite.

780
00:38:05,340 --> 00:38:07,660
The newspaper was a sprite, and so forth.

781
00:38:07,660 --> 00:38:11,820
So each of them were separate programs running in parallel at the same time.

782
00:38:11,820 --> 00:38:13,700
So let's actually make him do something.

783
00:38:13,700 --> 00:38:17,540
It turns out that if I jump down to, say, events,

784
00:38:17,540 --> 00:38:20,540
I'm going to see one of the most powerful blocks from the gecko, which

785
00:38:20,540 --> 00:38:22,820
is this, when green flag clicked.

786
00:38:22,820 --> 00:38:24,700
That's indeed how I started the game with Aviva

787
00:38:24,700 --> 00:38:27,900
by clicking just above Scratch's world, this green flag.

788
00:38:27,900 --> 00:38:30,820
And if I wanted to stop it as I did, you can click the red stop sign

789
00:38:30,820 --> 00:38:31,780
to say stop.

790
00:38:31,780 --> 00:38:36,140
Meanwhile, the green flag I can constantly listen for.

791
00:38:36,140 --> 00:38:39,260
By dragging and dropping this puzzle piece, when the green flag is clicked,

792
00:38:39,260 --> 00:38:40,380
what do I want to do?

793
00:38:40,380 --> 00:38:41,980
Well, let me go up to looks.

794
00:38:41,980 --> 00:38:43,740
And these are just different categories.

795
00:38:43,740 --> 00:38:45,900
And we can scroll through all the different colorful blocks,

796
00:38:45,900 --> 00:38:47,900
but they pretty much just do what they say.

797
00:38:47,900 --> 00:38:51,740
I'm going to go under looks, where I know there to be a block that's called say.

798
00:38:51,740 --> 00:38:54,660
And I'm going to go ahead and type the most canonical computer science

799
00:38:54,660 --> 00:38:56,740
thing, hello world, in this box.

800
00:38:56,740 --> 00:39:00,500
So notice that functions themselves can actually take inputs.

801
00:39:00,500 --> 00:39:03,740
And the input to this function, say, is going to be hello world.

802
00:39:03,740 --> 00:39:08,380
If I now go over to the green flag and click it, hello world.

803
00:39:08,380 --> 00:39:11,660
All right, so not all that difficult, not all that interesting,

804
00:39:11,660 --> 00:39:13,100
but it actually got the job done.

805
00:39:13,100 --> 00:39:15,460
And so my program is indeed just this.

806
00:39:15,460 --> 00:39:17,700
Well, how might I make this a little more interesting?

807
00:39:17,700 --> 00:39:20,380
Just saying hello world all the time isn't all that compelling.

808
00:39:20,380 --> 00:39:21,380
Well, you know what?

809
00:39:21,380 --> 00:39:21,880
Let me think.

810
00:39:21,880 --> 00:39:23,220
Let me undo this.

811
00:39:23,220 --> 00:39:25,060
Let me scroll down to sensing.

812
00:39:25,060 --> 00:39:29,140
And notice this, functions can also take input from the human.

813
00:39:29,140 --> 00:39:32,900
And functions can hand you back a value, a so-called return value.

814
00:39:32,900 --> 00:39:36,340
So this block here, ask something by default that says, what's your name

815
00:39:36,340 --> 00:39:40,020
and weight, is another function built into Scratch that allows me to do this.

816
00:39:40,020 --> 00:39:42,100
I'm going to go ahead and drag this here.

817
00:39:42,100 --> 00:39:44,500
And I'm going to let it say, what's your name?

818
00:39:44,500 --> 00:39:47,500
Notice now that below this block is a special block,

819
00:39:47,500 --> 00:39:49,340
that whatever it is, the block returns.

820
00:39:49,340 --> 00:39:52,220
So answer is whatever the human is going to type in.

821
00:39:52,220 --> 00:39:56,700
And if I want to now save what the human typed in, let me go again to looks,

822
00:39:56,700 --> 00:39:59,780
go to say, and notice that these blocks are kind of magnetic.

823
00:39:59,780 --> 00:40:00,900
They want to snap together.

824
00:40:00,900 --> 00:40:02,740
So I'm going to go ahead and let go there.

825
00:40:02,740 --> 00:40:05,900
And if I go back to sensing and grab answer,

826
00:40:05,900 --> 00:40:08,420
notice that even though it's not quite the same size,

827
00:40:08,420 --> 00:40:09,860
it's going to grow to fill.

828
00:40:09,860 --> 00:40:13,260
And now I can have my program ask the user what his or her name is,

829
00:40:13,260 --> 00:40:15,580
and then say whatever that answer is.

830
00:40:15,580 --> 00:40:18,900
So let me go ahead and stop and click Play again.

831
00:40:18,900 --> 00:40:20,300
Notice it's asking me for my name.

832
00:40:20,300 --> 00:40:22,900
So let me go ahead and type in David, enter.

833
00:40:22,900 --> 00:40:26,460
OK, it's a little weird way to greet someone, David.

834
00:40:26,460 --> 00:40:29,180
So it'd be nice to clean that up a bit.

835
00:40:29,180 --> 00:40:30,020
So you know what?

836
00:40:30,020 --> 00:40:32,060
I know this only from having poked around before.

837
00:40:32,060 --> 00:40:33,900
Not all of this is obvious at first glance,

838
00:40:33,900 --> 00:40:37,860
but it turns out that under operators, the category, there's this thing here.

839
00:40:37,860 --> 00:40:40,900
Join, apple, and banana, which are just default values.

840
00:40:40,900 --> 00:40:42,140
You can change them.

841
00:40:42,140 --> 00:40:43,380
Because what do I want to do?

842
00:40:43,380 --> 00:40:45,700
I want to say hello, David, or whoever.

843
00:40:45,700 --> 00:40:50,380
So I kind of want to say hello, comma, and then David, whatever the human typed in.

844
00:40:50,380 --> 00:40:51,700
And that's what join lets you do.

845
00:40:51,700 --> 00:40:55,100
It lets you join or concatenate two phrases that

846
00:40:55,100 --> 00:40:56,820
are somehow provided by you or the user.

847
00:40:56,820 --> 00:40:59,380
So let me pull this out, the answer.

848
00:40:59,380 --> 00:41:01,340
Let me go ahead and grab the join block.

849
00:41:01,340 --> 00:41:03,340
Notice it too is going to grow to fill.

850
00:41:03,340 --> 00:41:09,700
Let me go ahead and say hello, comma, space, and now drag answer into there.

851
00:41:09,700 --> 00:41:15,060
And notice this nesting, just like in math, this nesting of functions.

852
00:41:15,060 --> 00:41:19,420
I can first join, hello, and answer by taking those two things as input,

853
00:41:19,420 --> 00:41:21,420
and then pass them to say as another input,

854
00:41:21,420 --> 00:41:23,100
because these things are layered on top.

855
00:41:23,100 --> 00:41:27,900
And so now if I stop this and play it again and say, David, hello, David,

856
00:41:27,900 --> 00:41:31,500
now we have the makings of a more interesting interactive program that

857
00:41:31,500 --> 00:41:32,940
isn't just hard coded.

858
00:41:32,940 --> 00:41:38,940
Of course, it's not nearly as audible as something like Oscar time a moment ago.

859
00:41:38,940 --> 00:41:39,940
So let me go ahead and do this.

860
00:41:39,940 --> 00:41:44,300
Let me start over all together and treat scratch like the cat he is,

861
00:41:44,300 --> 00:41:46,220
and just start the sound called meow.

862
00:41:46,220 --> 00:41:48,780
So it turns out there's a category of blocks called sound.

863
00:41:48,780 --> 00:41:51,380
And within sound, there's play some defaults down.

864
00:41:51,380 --> 00:41:54,660
So start sound meow, and now things will get a little cuter.

865
00:41:57,660 --> 00:42:03,860
And now if I, again, and I can kind of simulate a cat by standing here for a while

866
00:42:03,860 --> 00:42:05,540
and keep clicking this button.

867
00:42:05,540 --> 00:42:08,420
But let me make a meow a few times, because that's more realistic.

868
00:42:08,420 --> 00:42:10,220
So let me grab a second one and a third one

869
00:42:10,220 --> 00:42:12,180
and you can get this infinite supply of blocks.

870
00:42:12,180 --> 00:42:12,860
Let me hit play.

871
00:42:17,140 --> 00:42:18,100
Seems like a bug.

872
00:42:18,100 --> 00:42:19,020
Let's try again, play.

873
00:42:21,620 --> 00:42:24,140
This is my first bug or mistake.

874
00:42:24,140 --> 00:42:25,340
This looks correct.

875
00:42:25,340 --> 00:42:29,300
It says when green flag clicked, start sound meow, start sound meow,

876
00:42:29,300 --> 00:42:30,580
start sound meow.

877
00:42:30,580 --> 00:42:34,060
Why am I only hearing one meow?

878
00:42:34,060 --> 00:42:39,020
Yeah, they're kind of at the same time or so close to the same time

879
00:42:39,020 --> 00:42:42,140
that the sounds are kind of tripping over each other and just overlapping.

880
00:42:42,140 --> 00:42:44,300
The block literally says start sound meow.

881
00:42:44,300 --> 00:42:45,700
But computers are really fast.

882
00:42:45,700 --> 00:42:48,340
If you've heard of the expression like gigahertz, that's a unit of measure.

883
00:42:48,420 --> 00:42:51,180
And if your computer has a 1 gigahertz CPU,

884
00:42:51,180 --> 00:42:54,820
central processing unit or brain, that means it can literally do like a billion

885
00:42:54,820 --> 00:42:56,340
things per second.

886
00:42:56,340 --> 00:42:59,860
It can certainly start three sounds super fast.

887
00:42:59,860 --> 00:43:02,860
And if they're effectively all happening one after the other

888
00:43:02,860 --> 00:43:05,940
before the sound even finishes, you're just hearing one net effect.

889
00:43:05,940 --> 00:43:07,220
So how can we fix this?

890
00:43:07,220 --> 00:43:10,540
Well, I can actually go and fix this with this block here.

891
00:43:10,540 --> 00:43:12,860
Play sound meow until done.

892
00:43:12,860 --> 00:43:14,500
Play sound meow until done.

893
00:43:14,500 --> 00:43:16,220
Play sound meow until done.

894
00:43:16,220 --> 00:43:21,660
And now, OK, it's a little unhappy, this particular cap.

895
00:43:21,660 --> 00:43:23,300
But at least it's now more correct.

896
00:43:23,300 --> 00:43:27,620
And as it turns out, if I go to Control, there's this block here.

897
00:43:27,620 --> 00:43:29,420
Wait some number of seconds.

898
00:43:29,420 --> 00:43:31,580
I can go ahead and insert this here.

899
00:43:31,580 --> 00:43:33,220
Let me do another one here.

900
00:43:33,220 --> 00:43:34,180
And now hit Play.

901
00:43:34,180 --> 00:43:36,180
Play sound meow.

902
00:43:36,180 --> 00:43:38,660
Play sound meow.

903
00:43:38,660 --> 00:43:40,820
Yeah, it's not bad.

904
00:43:40,820 --> 00:43:43,860
It now sounds a little more realistic.

905
00:43:43,860 --> 00:43:47,820
But honestly, if I keep doing this, you can actually right-click or control-click

906
00:43:47,820 --> 00:43:51,660
on blocks, duplicate them, and just copy and paste even more if you want them.

907
00:43:51,660 --> 00:43:56,020
So if I were to do this, now it's just going to go six times.

908
00:43:56,020 --> 00:43:58,180
And then I could copy it again and go 12 times.

909
00:43:58,180 --> 00:43:59,660
But there's got to be a better way.

910
00:43:59,660 --> 00:44:01,140
This is now bad programming.

911
00:44:01,140 --> 00:44:04,180
This is bad design because I'm literally copying and pasting,

912
00:44:04,180 --> 00:44:05,300
albeit graphically.

913
00:44:05,300 --> 00:44:10,020
But we've already seen a building block with which we can design this program better.

914
00:44:10,020 --> 00:44:11,860
It's correct, but it's not well designed.

915
00:44:11,860 --> 00:44:16,420
What would the building block be that I need to make this a little cleaner?

916
00:44:16,420 --> 00:44:20,420
Oh, OK, a for loop don't quite exist in Scratch, but a loop fundamentally.

917
00:44:20,420 --> 00:44:21,940
Do something cyclically.

918
00:44:21,940 --> 00:44:24,540
And indeed, if I go under Control and start poking around,

919
00:44:24,540 --> 00:44:27,540
you'll notice that there's a few blocks that might apply here.

920
00:44:27,540 --> 00:44:30,620
There's the repeat block, some number of times, or the forever block,

921
00:44:30,620 --> 00:44:33,060
both of which sound like loops or cycles.

922
00:44:33,060 --> 00:44:34,860
So sure enough, let me go ahead here.

923
00:44:34,860 --> 00:44:37,780
And I can throw away blocks by just dragging them to the left.

924
00:44:37,780 --> 00:44:43,660
Let me pull this out for a second, and then just say forever, play this sound,

925
00:44:43,660 --> 00:44:45,140
and then wait one second.

926
00:44:45,140 --> 00:44:47,700
So now my program looks like this.

927
00:44:47,700 --> 00:44:56,980
Yeah, we'll never know if it's technically correct

928
00:44:56,980 --> 00:44:59,020
because it's just going to go, we think, forever.

929
00:44:59,020 --> 00:45:00,820
But it looks like this is correct.

930
00:45:00,820 --> 00:45:02,220
And it was a lot less code.

931
00:45:02,220 --> 00:45:05,940
And it's a lot easier to maintain because if I want him to kind of get sleepy,

932
00:45:05,940 --> 00:45:14,380
I can then maybe say two seconds instead, and we can adjust this on the fly as we go.

933
00:45:14,380 --> 00:45:16,980
But let's start to combine some of these ideas now

934
00:45:16,980 --> 00:45:20,140
and change what it is the ultimate effect is.

935
00:45:20,140 --> 00:45:22,980
Let me go ahead and open an example I made in advance.

936
00:45:22,980 --> 00:45:24,940
This one's called count zero.

937
00:45:24,940 --> 00:45:28,060
And we'll put this on the website later so that you can play with it if you like.

938
00:45:28,060 --> 00:45:29,900
And this is kind of the opposite of counting sheep.

939
00:45:29,900 --> 00:45:32,820
Rather than me or this person sleeping counting sheep,

940
00:45:32,820 --> 00:45:35,020
this sheep will count itself.

941
00:45:35,020 --> 00:45:37,740
So let me go ahead and just play.

942
00:45:37,740 --> 00:45:42,340
And adorably, he seems to just be counting 1, 2, 3.

943
00:45:42,340 --> 00:45:43,460
But why is that?

944
00:45:43,460 --> 00:45:45,060
He's just going to count forever.

945
00:45:45,060 --> 00:45:47,940
But let's look at the blocks with which he's counting forever.

946
00:45:47,940 --> 00:45:51,220
When green flag clicked, set counter, turns out this orange block

947
00:45:51,220 --> 00:45:52,420
is what we call the variable.

948
00:45:52,420 --> 00:45:54,220
So an algebra would be like x or y or z.

949
00:45:54,220 --> 00:45:55,300
Those are not descriptive.

950
00:45:55,300 --> 00:45:59,100
I called this one counter instead, but I could have called it x or y or z.

951
00:45:59,100 --> 00:46:03,740
And then I forever say the counter for one second, then wait one second,

952
00:46:03,740 --> 00:46:07,060
and then change the counter by one, which technically means just increment it.

953
00:46:07,060 --> 00:46:08,060
Add one to it.

954
00:46:08,060 --> 00:46:10,980
And the sheep is just going to, therefore, count up and up and up.

955
00:46:10,980 --> 00:46:12,580
Now, this is a little tedious, but that's

956
00:46:12,580 --> 00:46:15,660
kind of the point of counting sheep, of course, to fall asleep.

957
00:46:15,660 --> 00:46:19,500
But what if this sheep actually kind of liked counting a little faster?

958
00:46:19,500 --> 00:46:22,180
Well, let me go into operators here.

959
00:46:22,180 --> 00:46:25,500
Multiplication sounds like it could get us places quicker.

960
00:46:25,500 --> 00:46:27,900
And let me go ahead and go to variables.

961
00:46:27,900 --> 00:46:30,620
And instead of changing the counter by one,

962
00:46:30,620 --> 00:46:32,940
let me go ahead and just keep setting it to something else.

963
00:46:32,980 --> 00:46:34,180
So let me drag and drop this.

964
00:46:34,180 --> 00:46:37,900
Set the counter equal to something times something.

965
00:46:37,900 --> 00:46:43,140
Specifically, the counter times 2.

966
00:46:43,140 --> 00:46:45,460
Thereby, doubling, doubling, doubling, doubling.

967
00:46:45,460 --> 00:46:47,820
That would seem to grow, so to speak, a lot faster.

968
00:46:47,820 --> 00:46:50,060
Let's see.

969
00:46:50,060 --> 00:46:55,060
1, 2, 4, 8.

970
00:46:55,060 --> 00:46:57,420
So he's counting faster, but it's still kind of tedious.

971
00:46:57,420 --> 00:46:59,300
What if we instead do this?

972
00:46:59,300 --> 00:47:00,900
Let's stop waiting.

973
00:47:00,900 --> 00:47:05,020
And let's go ahead and, with the looks, not say counter for one second,

974
00:47:05,020 --> 00:47:07,700
but let's just quickly say counter.

975
00:47:07,700 --> 00:47:09,100
So I'm going to say the counter.

976
00:47:09,100 --> 00:47:09,940
Whoops.

977
00:47:09,940 --> 00:47:11,620
I'm going to say the counter.

978
00:47:11,620 --> 00:47:14,100
And then I'm going to set it to itself times 2.

979
00:47:14,100 --> 00:47:15,180
So here's where we're at.

980
00:47:15,180 --> 00:47:17,620
Initialize or set the counter to 1 initially.

981
00:47:17,620 --> 00:47:19,620
Say it, then double it.

982
00:47:19,620 --> 00:47:20,580
Then double it.

983
00:47:20,580 --> 00:47:22,500
Then double it, saying it along the way.

984
00:47:22,500 --> 00:47:24,340
So here we go.

985
00:47:24,340 --> 00:47:27,260
That's impressive.

986
00:47:27,260 --> 00:47:30,580
So now the sheep has counted up to 10 to the 60th.

987
00:47:30,620 --> 00:47:34,940
So far, 10 to the 100th.

988
00:47:34,940 --> 00:47:40,020
OK, now it doesn't even fit in the speech bubble, but he's still going.

989
00:47:40,020 --> 00:47:42,060
How high can he go?

990
00:47:42,060 --> 00:47:46,620
What's the biggest number you can count to in a computer?

991
00:47:46,620 --> 00:47:50,100
Anyone want to guess?

992
00:47:50,100 --> 00:47:52,060
Could be here a while.

993
00:47:52,060 --> 00:47:54,780
10 to the 270th now.

994
00:47:54,780 --> 00:47:55,740
How high can you count?

995
00:47:55,740 --> 00:48:00,380
Or rather, OK, so we gave up.

996
00:48:00,380 --> 00:48:01,620
And just call to infinity.

997
00:48:01,620 --> 00:48:04,020
So it turns out infinity does have a precise value.

998
00:48:04,020 --> 00:48:06,340
10 times to the 250th or so.

999
00:48:06,340 --> 00:48:07,820
But what happens here?

1000
00:48:07,820 --> 00:48:10,140
Well, because computers at the end of the day

1001
00:48:10,140 --> 00:48:13,220
are just storing information digitally, but that information digitally

1002
00:48:13,220 --> 00:48:15,460
has to be physically stored using electricity,

1003
00:48:15,460 --> 00:48:17,620
using these lower level switches called transistors.

1004
00:48:17,620 --> 00:48:20,860
At the end of the day, my phone, my laptop, whatever device in question,

1005
00:48:20,860 --> 00:48:23,180
only has a finite amount of those things.

1006
00:48:23,180 --> 00:48:24,940
I only have a finite number of fingers.

1007
00:48:24,940 --> 00:48:27,460
Using unary, my old school hash mark approach,

1008
00:48:27,460 --> 00:48:29,020
I can count to five on this hand.

1009
00:48:29,060 --> 00:48:33,060
Using binary, I claimed I could count to 31 on this hand.

1010
00:48:33,060 --> 00:48:34,300
But it's still finite.

1011
00:48:34,300 --> 00:48:37,940
I cannot count to infinity on this hand because I only have five fingers.

1012
00:48:37,940 --> 00:48:40,940
Similarly, does a computer only have so many transistors

1013
00:48:40,940 --> 00:48:43,100
or so many bytes or bits of memory?

1014
00:48:43,100 --> 00:48:45,940
And at some point, the programmer has to think about,

1015
00:48:45,940 --> 00:48:49,020
what is he or she going to do when the user wants to count so high

1016
00:48:49,020 --> 00:48:51,660
that you can't physically fit it anymore?

1017
00:48:51,660 --> 00:48:54,980
You have to give up like this and say something semi-accurately.

1018
00:48:54,980 --> 00:48:58,540
Or you have to handle the issue in some other way.

1019
00:48:58,540 --> 00:49:01,860
And we'll see when we get to see that how you handle this problem is not

1020
00:49:01,860 --> 00:49:03,260
necessarily straightforward.

1021
00:49:03,260 --> 00:49:06,540
And indeed, a lot of software out there does not handle this problem.

1022
00:49:06,540 --> 00:49:09,460
And odds are, all of us have programs that if you type big enough words

1023
00:49:09,460 --> 00:49:13,620
or big enough numbers into them, they might very well break or crash or freeze

1024
00:49:13,620 --> 00:49:16,420
because the humans, unlike MIT, did not anticipate

1025
00:49:16,420 --> 00:49:18,580
that that might actually happen and handle it.

1026
00:49:18,580 --> 00:49:19,860
Well, let me go ahead and do this.

1027
00:49:19,860 --> 00:49:23,420
Let me open up this program and see if we can't read the code now.

1028
00:49:23,420 --> 00:49:25,980
This is called pet zero.

1029
00:49:25,980 --> 00:49:28,940
And this is a program that simulates petting.

1030
00:49:28,940 --> 00:49:33,900
So if I click play and don't touch the keyboard, nothing seems to be happening.

1031
00:49:33,900 --> 00:49:39,900
But if I now move my cursor over to the cat, oh, it's kind of cute.

1032
00:49:39,900 --> 00:49:43,420
Right now, it's more only meowing on demand when you pet the cat.

1033
00:49:43,420 --> 00:49:44,100
Why?

1034
00:49:44,100 --> 00:49:46,260
Well, notice I've added some other building blocks.

1035
00:49:46,260 --> 00:49:49,060
We haven't used this one before, but it intuitively probably

1036
00:49:49,060 --> 00:49:51,660
makes pretty clear sense when the green flag is clicked,

1037
00:49:51,660 --> 00:49:53,300
forever do the following.

1038
00:49:53,300 --> 00:49:56,740
If the cat is touching the mouse pointer, this thing in blue

1039
00:49:56,740 --> 00:49:58,660
is what we called earlier a Boolean expression.

1040
00:49:58,660 --> 00:50:01,820
It has a yes, no, a true, false, a one, zero answer.

1041
00:50:01,820 --> 00:50:04,740
And touching mouse pointer is one of the options in the little drop down here

1042
00:50:04,740 --> 00:50:05,780
if you tinker with it.

1043
00:50:05,780 --> 00:50:08,900
So if the cat is touching the mouse pointer, then and only then,

1044
00:50:08,900 --> 00:50:11,060
play, sound, meow, until done.

1045
00:50:11,060 --> 00:50:14,820
So we've combined now functions with loops with a condition.

1046
00:50:14,820 --> 00:50:16,940
But why the loop?

1047
00:50:16,940 --> 00:50:19,980
The cat's only meowing once when I pet him.

1048
00:50:19,980 --> 00:50:22,260
Why am I doing anything forever here?

1049
00:50:29,260 --> 00:50:33,540
Yeah, I might want to pet it again, so I want the program to anticipate that.

1050
00:50:33,540 --> 00:50:37,580
And honestly, if I omitted this forever block and my program instead

1051
00:50:37,580 --> 00:50:41,500
looked just like this, so let me get rid of that and this,

1052
00:50:41,500 --> 00:50:46,380
and then I clicked play, and now I hover over him,

1053
00:50:46,380 --> 00:50:48,300
why is it not working even once?

1054
00:50:50,980 --> 00:50:51,980
Say again?

1055
00:50:56,980 --> 00:50:59,980
Yeah, so I mean, at this point, if I can summarize,

1056
00:50:59,980 --> 00:51:03,660
it's that happened, the computer's so damn fast that this already happened

1057
00:51:03,660 --> 00:51:06,660
by the time I move my cursor over to the cat.

1058
00:51:06,660 --> 00:51:10,260
And at the moment I clicked play, I was not touching the cat.

1059
00:51:10,260 --> 00:51:12,700
Those blocks executed, so to speak, top to bottom.

1060
00:51:12,700 --> 00:51:14,060
That's it for the program.

1061
00:51:14,060 --> 00:51:17,020
So by the time I move the cursor over to the cat, the program is over.

1062
00:51:17,020 --> 00:51:17,740
It's not listening.

1063
00:51:17,740 --> 00:51:21,460
And so forever, this way, I can actually listen in perpetuity

1064
00:51:21,460 --> 00:51:23,340
for something to actually happen.

1065
00:51:23,340 --> 00:51:26,060
What if I want to do something not just if something is true,

1066
00:51:26,060 --> 00:51:28,380
but handle two cases, if or else?

1067
00:51:28,380 --> 00:51:31,180
Well, let me go ahead and open up pet one.

1068
00:51:31,180 --> 00:51:32,980
And this is another example.

1069
00:51:32,980 --> 00:51:37,140
And could someone perhaps describe, after reading this code,

1070
00:51:37,140 --> 00:51:39,300
what this program is going to do instead?

1071
00:51:42,380 --> 00:51:42,880
Yeah?

1072
00:51:48,220 --> 00:51:48,700
Exactly.

1073
00:51:48,700 --> 00:51:50,060
And let me summarize more verbally.

1074
00:51:50,060 --> 00:51:54,060
So if this time you're touching the cat, it's going to roar instead.

1075
00:51:54,060 --> 00:51:56,660
Else, it's just going to meow sweetly.

1076
00:51:56,660 --> 00:52:00,220
So this time it is meowing perpetually once every second.

1077
00:52:00,220 --> 00:52:03,500
But if you touch this particular cat, he doesn't like it.

1078
00:52:03,500 --> 00:52:15,740
So play meow, meow, and now don't touch the cat.

1079
00:52:16,740 --> 00:52:18,260
Don't touch the cat.

1080
00:52:18,260 --> 00:52:20,780
So now we might interact in two different ways

1081
00:52:20,780 --> 00:52:23,740
by having two different roads that you can go down.

1082
00:52:23,740 --> 00:52:26,180
Well, let's actually make something a little more interactive.

1083
00:52:26,180 --> 00:52:28,220
Let me go ahead and open another example.

1084
00:52:28,220 --> 00:52:30,500
This one called bounce zero, because now we

1085
00:52:30,500 --> 00:52:34,300
can start to see some design elements from what Oscar time was.

1086
00:52:34,300 --> 00:52:36,980
Like this now is getting a little interesting.

1087
00:52:36,980 --> 00:52:38,900
What is actually going on here?

1088
00:52:38,900 --> 00:52:41,100
So let me zoom in on the blocks here.

1089
00:52:41,100 --> 00:52:43,460
This block is just saying forever.

1090
00:52:43,460 --> 00:52:45,700
Move 10 steps, which is another block we haven't

1091
00:52:45,700 --> 00:52:47,580
seen, but 10 steps is like 10 pixels.

1092
00:52:47,580 --> 00:52:49,580
So move 10 pixels on the screen.

1093
00:52:49,580 --> 00:52:52,900
But if you're touching the edge, then turn around 180 degrees.

1094
00:52:52,900 --> 00:52:54,860
And you can see exactly that happening.

1095
00:52:54,860 --> 00:52:58,060
Scratch is turning around 180 degrees, and this rotation style

1096
00:52:58,060 --> 00:52:58,980
just means double back.

1097
00:52:58,980 --> 00:53:01,460
Don't like loop around 180 degrees.

1098
00:53:01,460 --> 00:53:05,740
So that's kind of cool, but this is not how humans or cats walk.

1099
00:53:05,740 --> 00:53:08,740
Like what is obviously unnatural about this?

1100
00:53:11,220 --> 00:53:12,900
Yeah, I mean, I can't even simulate it, right?

1101
00:53:12,900 --> 00:53:17,140
Like his feet are in static position, yet sliding back and forth on the screen.

1102
00:53:17,140 --> 00:53:18,820
And yet that is not what walking is.

1103
00:53:18,820 --> 00:53:21,060
Like walking, presumably, has some kind of movement.

1104
00:53:21,060 --> 00:53:21,660
And what?

1105
00:53:21,660 --> 00:53:24,820
Well, we could just kind of simulate it like, OK, I could just walk.

1106
00:53:24,820 --> 00:53:29,060
Walking, and you can imagine taking really quick photographs of my legs

1107
00:53:29,060 --> 00:53:31,500
or the cat's leg moving, and then just deciding,

1108
00:53:31,500 --> 00:53:34,020
this photo will be representative of one step,

1109
00:53:34,020 --> 00:53:36,140
this photo will be representative of another.

1110
00:53:36,140 --> 00:53:39,100
And with just two of those steps, I'd wager

1111
00:53:39,100 --> 00:53:41,940
we could actually do a pretty good job of simulating

1112
00:53:41,980 --> 00:53:43,180
what walking looks like.

1113
00:53:43,180 --> 00:53:46,860
In fact, if I go back to where we began, this picture of Scratch,

1114
00:53:46,860 --> 00:53:50,180
what if I just move his legs ever so slightly?

1115
00:53:50,180 --> 00:53:52,820
Then go back, then go forward.

1116
00:53:52,820 --> 00:53:55,820
And even just in my PDF, I can simulate animation

1117
00:53:55,820 --> 00:53:58,780
by hitting up arrow, down arrow, up arrow, down arrow,

1118
00:53:58,780 --> 00:54:01,940
because it kind of looks like he's walking now when really your human eyes

1119
00:54:01,940 --> 00:54:04,820
are just seeing two different pictures again and again.

1120
00:54:04,820 --> 00:54:05,940
So how can I do this?

1121
00:54:05,940 --> 00:54:09,020
Well, if I go back to Scratch, he's still walking.

1122
00:54:09,020 --> 00:54:15,300
Let me go ahead and open up Bounce 1, the second version of this.

1123
00:54:15,300 --> 00:54:19,300
And now do this, OK.

1124
00:54:19,300 --> 00:54:20,500
So how did I add this?

1125
00:54:20,500 --> 00:54:22,580
There's a little purple block that we haven't seen yet.

1126
00:54:22,580 --> 00:54:24,380
But if you poke around the categories, you'll

1127
00:54:24,380 --> 00:54:27,460
see other blocks like this, next costume that just keeps changing,

1128
00:54:27,460 --> 00:54:28,900
the costume that he's wearing.

1129
00:54:28,900 --> 00:54:31,580
It turns out Scratch exists as a picture.

1130
00:54:31,580 --> 00:54:33,380
And his default picture is him not moving.

1131
00:54:33,380 --> 00:54:36,420
But if I go up here to top left and click Costumes,

1132
00:54:36,420 --> 00:54:38,900
you can actually see that here's his one costume.

1133
00:54:38,900 --> 00:54:40,620
Here's his second costume.

1134
00:54:40,620 --> 00:54:43,300
And so that purple block that says next costume,

1135
00:54:43,300 --> 00:54:47,180
because it's in the forever loop, it just keeps doing next, next, next,

1136
00:54:47,180 --> 00:54:49,900
next, next, just showing one costume or the other,

1137
00:54:49,900 --> 00:54:52,860
they're clearly mimicking walking.

1138
00:54:52,860 --> 00:54:54,300
Now, this is not very natural.

1139
00:54:54,300 --> 00:54:57,900
Why don't we slow him down to, say, five steps at a time

1140
00:54:57,900 --> 00:54:59,700
and have him go again?

1141
00:54:59,700 --> 00:55:01,340
Now, this is still going pretty fast.

1142
00:55:01,340 --> 00:55:05,660
Let me go ahead and say we could have control.

1143
00:55:05,660 --> 00:55:11,740
We could have him wait a second after moving very dramatically.

1144
00:55:11,740 --> 00:55:13,220
Weeks should probably speed this up.

1145
00:55:13,220 --> 00:55:16,220
So let's wait 1 tenth of a second, 0.1.

1146
00:55:16,220 --> 00:55:19,420
Or maybe that's even, let's do 0.01, 1 hundredth of a second.

1147
00:55:19,420 --> 00:55:21,100
Now it's getting a little more realistic.

1148
00:55:21,100 --> 00:55:22,500
But this is what animation is.

1149
00:55:22,500 --> 00:55:26,100
If you've ever watched a cartoon or a movie based on pictures like this,

1150
00:55:26,100 --> 00:55:29,220
you're just tinkering with some of these parameters, these inputs,

1151
00:55:29,220 --> 00:55:31,420
in order to produce this output by understanding

1152
00:55:31,420 --> 00:55:34,140
what the fundamental representation of these things

1153
00:55:34,140 --> 00:55:37,540
is, which in this case are just pictures, again and again and again,

1154
00:55:37,540 --> 00:55:39,380
in order to create that animation.

1155
00:55:39,380 --> 00:55:41,060
But what about interactivity?

1156
00:55:41,060 --> 00:55:42,140
Let me do this one myself.

1157
00:55:42,140 --> 00:55:46,620
Let me go ahead and get rid of this, go back to events and say,

1158
00:55:46,620 --> 00:55:50,900
when green flag clicked, then let me go ahead and grab a forever block

1159
00:55:50,900 --> 00:55:52,900
so that this keeps going again and again.

1160
00:55:52,900 --> 00:55:54,820
And then let me go ahead to go to motion.

1161
00:55:54,820 --> 00:55:57,900
It turns out that under motion, there's this block we haven't seen,

1162
00:55:57,900 --> 00:56:00,020
point towards the mouse pointer.

1163
00:56:00,020 --> 00:56:02,300
And let me go ahead and pull this in here.

1164
00:56:02,300 --> 00:56:07,140
And then let me have it move just like one step at a time instead of 10.

1165
00:56:07,140 --> 00:56:10,220
What is this going to do?

1166
00:56:10,220 --> 00:56:13,380
What's this program do?

1167
00:56:13,380 --> 00:56:15,060
Yeah, say again?

1168
00:56:15,060 --> 00:56:15,940
Follow the mouse.

1169
00:56:15,940 --> 00:56:21,220
Yeah, this is kind of like a way of taking your cat for a walk.

1170
00:56:21,220 --> 00:56:25,620
Perhaps not quite the animal we intended, but he'll follow the cursor.

1171
00:56:25,620 --> 00:56:27,820
And I can actually speed this up a little bit.

1172
00:56:27,820 --> 00:56:29,700
So let's have him move 10 steps.

1173
00:56:29,700 --> 00:56:32,620
OK, now there we go.

1174
00:56:32,620 --> 00:56:34,180
So now he's moving up and down.

1175
00:56:34,180 --> 00:56:35,540
And so now it's interactive.

1176
00:56:35,540 --> 00:56:39,580
So you might recall that when we were playing Oscar time earlier and picking up

1177
00:56:39,580 --> 00:56:41,660
the, OK, don't do that.

1178
00:56:41,660 --> 00:56:43,540
See, that's a bug.

1179
00:56:43,540 --> 00:56:44,380
He's just confused.

1180
00:56:44,380 --> 00:56:47,620
He's constantly moving toward it, but you're already, OK, so we're going to stop.

1181
00:56:47,620 --> 00:56:50,900
OK, so now he's following, but that's how we might now

1182
00:56:50,900 --> 00:56:53,980
create, for instance, the ability to move those pieces of trash around

1183
00:56:53,980 --> 00:56:56,740
and have them follow the mouse cursor if you think back to Oscar time.

1184
00:56:56,740 --> 00:56:58,580
Every time you picked up a piece of trash,

1185
00:56:58,580 --> 00:57:02,020
you'd follow the cursor because there was a forever loop and a block like this

1186
00:57:02,020 --> 00:57:03,860
pointing toward the mouse pointer.

1187
00:57:03,860 --> 00:57:08,220
Well, now let's integrate multiple ideas and actually have multiple scripts.

1188
00:57:08,220 --> 00:57:12,900
I proposed earlier that programs can actually have multiple threads.

1189
00:57:12,900 --> 00:57:16,420
A thread is just a fancy way of saying, in our context, multiple scripts.

1190
00:57:16,420 --> 00:57:21,820
Multiple scripts in one program that are happening essentially in parallel.

1191
00:57:21,820 --> 00:57:25,260
Computer can effectively do multiple things at a time thanks to threading,

1192
00:57:25,260 --> 00:57:26,740
and more on that down the road.

1193
00:57:26,740 --> 00:57:30,780
So these are more involved, but let's understand first what this program does.

1194
00:57:30,780 --> 00:57:33,700
Let me go ahead and hit Play, and this one tends to be a little loud.

1195
00:57:38,700 --> 00:57:43,420
So the C line is just barking endlessly, annoyingly.

1196
00:57:43,420 --> 00:57:49,260
So by reading the code, how can I stop him from barking?

1197
00:57:49,260 --> 00:57:50,620
Hit the spacebar.

1198
00:57:50,620 --> 00:57:53,700
All right, so hit the spacebar.

1199
00:57:53,700 --> 00:57:56,340
OK, I could just stop the program, obviously,

1200
00:57:56,340 --> 00:57:58,420
but this program is still running technically.

1201
00:57:58,420 --> 00:57:59,900
But why did that work?

1202
00:57:59,900 --> 00:58:02,900
Well, notice this on the left-hand side is the first script.

1203
00:58:02,900 --> 00:58:07,180
When the green flag is clicked, set this variable that I called muted to false.

1204
00:58:07,180 --> 00:58:10,140
Could have called it x or y or z or counter, but none of those really makes sense.

1205
00:58:10,140 --> 00:58:11,140
So I called it muted.

1206
00:58:11,140 --> 00:58:15,180
And I set it equal to false, which is, again, a Boolean value, true or false.

1207
00:58:15,180 --> 00:58:16,780
Just mean yes or no.

1208
00:58:16,780 --> 00:58:20,420
Forever, if the key space is pressed, then do this.

1209
00:58:20,420 --> 00:58:24,820
If muted is currently false, then change muted to true.

1210
00:58:24,820 --> 00:58:27,180
Else, change muted to false.

1211
00:58:27,180 --> 00:58:30,100
So if muted is false, change it to true.

1212
00:58:30,100 --> 00:58:32,460
If muted is true, change it to false.

1213
00:58:32,460 --> 00:58:36,420
Any time the human hits the spacebar, update that variable.

1214
00:58:36,420 --> 00:58:40,100
Now, if we look at the other script, which is also driving the C line,

1215
00:58:40,100 --> 00:58:41,180
what is he doing?

1216
00:58:41,180 --> 00:58:45,340
Forever, if muted is false, so if he's not muted.

1217
00:58:45,340 --> 00:58:48,660
If muted is false means not muted, start the sound C line,

1218
00:58:48,660 --> 00:58:52,780
and then think, hi, hi, hi, for two seconds, and then wait for one more second.

1219
00:58:52,780 --> 00:58:54,500
And then just repeat, repeat, repeat.

1220
00:58:54,500 --> 00:58:57,340
But if I change with the spacebar, muted to true,

1221
00:58:57,340 --> 00:59:00,820
he's going to say, if muted equals false, that's not so.

1222
00:59:00,820 --> 00:59:02,420
I'm not going to play a sound this time.

1223
00:59:02,420 --> 00:59:05,980
And so now we have the ability to integrate multiple scripts together

1224
00:59:05,980 --> 00:59:08,980
in order to achieve a more interactive result.

1225
00:59:08,980 --> 00:59:10,300
And what about this?

1226
00:59:10,300 --> 00:59:16,180
Back in when I was a kid, might have played over in the summer's like Marco Polo.

1227
00:59:16,180 --> 00:59:19,100
Super simple game where we played it in the pool for some reason,

1228
00:59:19,100 --> 00:59:21,460
where one person in the pool very safely is blindfolded.

1229
00:59:21,500 --> 00:59:23,180
And then he or she yells Marco.

1230
00:59:23,180 --> 00:59:26,220
And then everyone around him or her is supposed to yell Polo.

1231
00:59:26,220 --> 00:59:28,100
And then the person who's blindfolded is supposed

1232
00:59:28,100 --> 00:59:30,180
to go chase the other kids in the pool and tag them,

1233
00:59:30,180 --> 00:59:31,300
and then they become it.

1234
00:59:31,300 --> 00:59:33,660
But in other words, it's this signaling mechanism.

1235
00:59:33,660 --> 00:59:36,380
Someone yells Marco, and everyone else responds

1236
00:59:36,380 --> 00:59:38,820
to that broadcast of the word Marco.

1237
00:59:38,820 --> 00:59:41,540
Well, it turns out we can simulate this with these two puppets.

1238
00:59:41,540 --> 00:59:44,500
This guy here, notice that I've highlighted the orange puppet,

1239
00:59:44,500 --> 00:59:46,860
because there's a second blue puppet there, separate sprites.

1240
00:59:46,860 --> 00:59:49,900
And these are just photographs we uploaded to the game.

1241
00:59:49,900 --> 00:59:52,980
Forever, if the key space is pressed.

1242
00:59:52,980 --> 00:59:56,100
So if the space bar is pressed, say Marco for two seconds,

1243
00:59:56,100 --> 00:59:57,940
and then broadcast an event.

1244
00:59:57,940 --> 01:00:03,020
Meanwhile, the blue puppet here has a super simple block,

1245
01:00:03,020 --> 01:00:05,340
but it's fundamentally different from the ones we've seen.

1246
01:00:05,340 --> 01:00:08,180
He's not starting when the green flag is clicked.

1247
01:00:08,180 --> 01:00:11,340
He is starting only when he receives an event.

1248
01:00:11,340 --> 01:00:14,260
So it turns out that sprites and scratch can't hear or see what

1249
01:00:14,260 --> 01:00:16,300
the other one is saying in those speech bubbles.

1250
01:00:16,300 --> 01:00:19,880
You have to use a fancier technique, which is this special block called broadcast.

1251
01:00:19,920 --> 01:00:24,060
Which is like passing a note digitally from one sprite to another

1252
01:00:24,060 --> 01:00:26,880
that the other one can read or receive, so to speak.

1253
01:00:26,880 --> 01:00:29,120
So only when he receives this event, so to speak,

1254
01:00:29,120 --> 01:00:31,480
does he say polo for two seconds.

1255
01:00:31,480 --> 01:00:35,200
And again, the orange puppet sends that secret message

1256
01:00:35,200 --> 01:00:38,000
just using this other puzzle piece, broadcast an event,

1257
01:00:38,000 --> 01:00:41,080
like passing a note that the human doesn't actually see.

1258
01:00:41,080 --> 01:00:44,760
So if I now hit the green flag and hit the space bar,

1259
01:00:44,760 --> 01:00:49,040
orange yells Marco, blue guy yells polo in response.

1260
01:00:49,040 --> 01:00:50,920
But those aren't timed together.

1261
01:00:50,920 --> 01:00:54,320
Rather, the blue guy is hearing what the orange one has said,

1262
01:00:54,320 --> 01:00:59,280
thereby allowing multiple sprites to actually intercommunicate.

1263
01:00:59,280 --> 01:01:00,440
So how did we get here?

1264
01:01:00,440 --> 01:01:03,720
Well, recall that we had all of these building blocks a moment ago.

1265
01:01:03,720 --> 01:01:05,920
First, we started out with just functions and conditions

1266
01:01:05,920 --> 01:01:07,360
and Boolean expressions and loops.

1267
01:01:07,360 --> 01:01:10,680
We've now added to that the ability to store information and variables

1268
01:01:10,680 --> 01:01:12,560
and threads to do multiple things at once.

1269
01:01:12,560 --> 01:01:14,640
And then if you do have multiple things happening,

1270
01:01:14,640 --> 01:01:17,840
events where they can intercommunicate somehow,

1271
01:01:17,840 --> 01:01:19,200
yet another building block.

1272
01:01:19,200 --> 01:01:22,280
So if we now take a step back and consider

1273
01:01:22,280 --> 01:01:25,920
how we can make functions of our own, we

1274
01:01:25,920 --> 01:01:28,560
have the final piece of the puzzle, so to speak.

1275
01:01:28,560 --> 01:01:29,760
Let me go ahead and do this.

1276
01:01:29,760 --> 01:01:34,160
Let me go ahead and create a simple program with when green flag clicked

1277
01:01:34,160 --> 01:01:36,240
that simply simulates coughing for a cat.

1278
01:01:36,240 --> 01:01:41,440
So this cat is going to say, not hello, but cough for one second.

1279
01:01:41,440 --> 01:01:45,200
And then he's going to go ahead and wait for one second.

1280
01:01:45,200 --> 01:01:48,880
And then I'm going to go ahead and copy paste as I did before.

1281
01:01:48,880 --> 01:01:51,120
This is one of those do as I say, not as I do,

1282
01:01:51,120 --> 01:01:54,800
to implement this program here where he coughs three times.

1283
01:01:54,800 --> 01:01:57,720
We already know, though, from earlier, that this is not good design.

1284
01:01:57,720 --> 01:02:00,240
Why?

1285
01:02:00,240 --> 01:02:01,200
You're repeating yourself.

1286
01:02:01,200 --> 01:02:02,760
Don't repeat yourself.

1287
01:02:02,760 --> 01:02:04,240
DRY is an acronym, actually.

1288
01:02:04,240 --> 01:02:08,040
Don't repeat yourself because you're doing three times as many times,

1289
01:02:08,040 --> 01:02:10,000
something that you only really need to do once.

1290
01:02:10,000 --> 01:02:13,240
The solution before, of course, was just use a loop of some sort.

1291
01:02:13,240 --> 01:02:14,880
So let me actually take that out.

1292
01:02:14,880 --> 01:02:18,760
Let me use a repeat block, change 10 to 3,

1293
01:02:18,760 --> 01:02:20,480
and then just use two of these blocks.

1294
01:02:20,480 --> 01:02:22,920
And notice already, the program is so much more compact.

1295
01:02:22,920 --> 01:02:27,680
And now, if I want to change the 3 to a 30 or to a 10 or any number,

1296
01:02:27,680 --> 01:02:29,200
I just change one simple value.

1297
01:02:29,200 --> 01:02:32,480
I don't have to rewrite or copy paste or delete things.

1298
01:02:32,480 --> 01:02:34,480
I can update the program much more readily.

1299
01:02:34,480 --> 01:02:40,000
And now, the same thing is going to happen with just cough, cough, cough.

1300
01:02:40,000 --> 01:02:44,160
But it turns out that it would be nice to henceforth abstract away from this.

1301
01:02:44,160 --> 01:02:47,600
I just want any program I write to know how to cough.

1302
01:02:47,600 --> 01:02:51,080
And coughing is really just saying something, perhaps some number of times.

1303
01:02:51,080 --> 01:02:53,760
But it turns out we can abstract this away in code.

1304
01:02:53,760 --> 01:02:56,000
Let me go down to my blocks here.

1305
01:02:56,000 --> 01:02:58,400
And this allows me to click this button, make a block.

1306
01:02:58,400 --> 01:03:00,080
It allows me to make my own function.

1307
01:03:00,080 --> 01:03:04,520
I get this dialog window here, and I'm just going to call this block cough.

1308
01:03:04,520 --> 01:03:06,400
I'm going to go ahead and click OK.

1309
01:03:06,400 --> 01:03:10,400
And now, I have this new pink block that itself can have blocks underneath it.

1310
01:03:10,400 --> 01:03:11,480
And you know what I'm going to do?

1311
01:03:11,480 --> 01:03:12,960
I'm going to go ahead and do this.

1312
01:03:12,960 --> 01:03:17,160
I'm going to go ahead and say cough under there.

1313
01:03:17,160 --> 01:03:20,880
And now, notice on the left, I now have access to this new pink piece.

1314
01:03:20,880 --> 01:03:22,720
I can now put this in here.

1315
01:03:22,720 --> 01:03:27,080
So now, notice, even though, yes, this is how coughing is implemented

1316
01:03:27,080 --> 01:03:30,840
on the left-hand side here, next time when I write a program,

1317
01:03:30,840 --> 01:03:32,720
I just want to call cough.

1318
01:03:32,720 --> 01:03:35,240
And I don't care about those lower-level implementation details.

1319
01:03:35,240 --> 01:03:36,960
I don't care about the binary or any of that.

1320
01:03:36,960 --> 01:03:38,880
I just want this to be an abstraction.

1321
01:03:38,880 --> 01:03:40,800
But I could do better than this.

1322
01:03:40,800 --> 01:03:42,940
Wouldn't it be nice if instead of just repeating

1323
01:03:42,940 --> 01:03:46,300
cough three times, what if I made that a feature of cough?

1324
01:03:46,300 --> 01:03:47,300
So let me do this.

1325
01:03:47,300 --> 01:03:51,620
I can go ahead and right-click on this pink piece, and I can edit it.

1326
01:03:51,620 --> 01:03:53,620
That brings up that same window from before.

1327
01:03:53,620 --> 01:03:55,700
And notice this, add an input.

1328
01:03:55,700 --> 01:03:58,860
So when I make a custom block, I can actually make pretty fancy blocks

1329
01:03:58,860 --> 01:04:02,220
just like the ones MIT gives us with the software.

1330
01:04:02,220 --> 01:04:04,340
And now, I can type in something like n.

1331
01:04:04,340 --> 01:04:07,660
And if I add a label just to make it more descriptive, I can just say times.

1332
01:04:07,660 --> 01:04:12,420
So now, I've made a special custom puzzle piece that says cough some number of times

1333
01:04:12,420 --> 01:04:16,900
where n for number is just the go-to variable that programmers tend to use.

1334
01:04:16,900 --> 01:04:24,780
So now, I can actually move this repeat block into cough itself.

1335
01:04:24,780 --> 01:04:26,940
But rather than hard code three, notice this.

1336
01:04:26,940 --> 01:04:30,860
I can steal that variable and now say cough this many times

1337
01:04:30,860 --> 01:04:35,260
by repeating, saying, this, again, and again, and again.

1338
01:04:35,260 --> 01:04:40,620
And now, when I cough in my actual program, I just type in three here.

1339
01:04:40,620 --> 01:04:42,900
So I have this beautiful abstraction now, so to speak.

1340
01:04:42,900 --> 01:04:46,100
Cough this many times, and I, and no one else in the world,

1341
01:04:46,100 --> 01:04:48,540
never again needs to care about what it means to cough,

1342
01:04:48,540 --> 01:04:50,860
because we've already implemented that before.

1343
01:04:50,860 --> 01:04:53,460
And so just as MIT has given us so much functionality

1344
01:04:53,460 --> 01:04:55,180
that we ourselves don't have to think about,

1345
01:04:55,180 --> 01:04:58,060
so can I now make functionality that I don't have to think about?

1346
01:04:58,060 --> 01:05:01,060
And as we progress to higher level languages like C and JavaScript

1347
01:05:01,060 --> 01:05:02,940
and Python, we're going to continue this process,

1348
01:05:02,940 --> 01:05:07,060
sometimes solving problems ourselves by making our own custom puzzle pieces,

1349
01:05:07,060 --> 01:05:09,260
but very often using things called libraries,

1350
01:05:09,300 --> 01:05:11,940
code that other humans wrote before us that's just

1351
01:05:11,940 --> 01:05:17,660
useful to get the job done just as Scratch has done here in part for us.

1352
01:05:17,660 --> 01:05:21,220
Let me go ahead, then, and bring all of this together

1353
01:05:21,220 --> 01:05:24,300
by opening this other example here.

1354
01:05:24,300 --> 01:05:28,020
Let me go ahead and open up this one, which isn't something we've seen,

1355
01:05:28,020 --> 01:05:31,940
but it's kind of an interactive game like this, made by a former student.

1356
01:05:32,540 --> 01:05:33,700
Should we have an apple?

1357
01:05:33,700 --> 01:05:34,180
Yes.

1358
01:05:36,700 --> 01:05:37,540
Little animation.

1359
01:05:41,700 --> 01:05:43,700
OK, that didn't end well.

1360
01:05:43,700 --> 01:05:49,540
Let's try again, play again, and notice the say block is happening.

1361
01:05:49,540 --> 01:05:51,500
There's some kind of ask block.

1362
01:05:51,500 --> 01:05:54,060
The student was checking if the human typed in yes or no.

1363
01:05:54,060 --> 01:05:56,140
Let's type no this time, no apple.

1364
01:05:56,140 --> 01:05:57,300
Ooh, cupcake.

1365
01:05:57,300 --> 01:05:58,620
OK, yes.

1366
01:05:58,620 --> 01:05:59,100
Enter.

1367
01:05:59,980 --> 01:06:02,860
OK, don't do that.

1368
01:06:02,860 --> 01:06:03,860
One more life.

1369
01:06:03,860 --> 01:06:04,340
Here we go.

1370
01:06:06,860 --> 01:06:20,820
OK, no apple, no cupcake, a little variable, counting it.

1371
01:06:20,820 --> 01:06:33,220
OK, so I won the game.

1372
01:06:33,220 --> 01:06:38,420
In our final moments here, let me go ahead and open one final example.

1373
01:06:38,420 --> 01:06:42,580
As you know, CS50 is offered not only at Harvard, but at Yale as well.

1374
01:06:42,580 --> 01:06:45,660
So it seems fitting to perhaps end on a note that pits one campus,

1375
01:06:45,660 --> 01:06:48,740
perhaps, against the other by way of another game that a former student

1376
01:06:48,740 --> 01:06:50,700
wrote called Ivy's Hardest Game.

1377
01:06:50,700 --> 01:06:54,260
But for this, I think we need one final volunteer who's coming up.

1378
01:06:54,260 --> 01:06:55,700
OK, first hand, right there.

1379
01:06:55,700 --> 01:06:57,540
Come on down.

1380
01:06:57,540 --> 01:07:01,180
So in Ivy's Hardest Game, it's a game played with the keyboard.

1381
01:07:01,180 --> 01:07:03,620
And even though it might look a little overwhelming at first glance,

1382
01:07:03,620 --> 01:07:06,460
just like Oscar Time did, and heck, just like the gingerbread animation

1383
01:07:06,460 --> 01:07:09,740
might, realize that if you decompose it in just your mind's eye,

1384
01:07:09,740 --> 01:07:11,820
thinking about what those individual building blocks are,

1385
01:07:11,820 --> 01:07:13,820
you can probably guess what the puzzle pieces are.

1386
01:07:13,820 --> 01:07:14,460
Hi, what's your name?

1387
01:07:14,460 --> 01:07:15,180
Hi, I'm Andrea.

1388
01:07:15,180 --> 01:07:16,860
Andrea, David, nice to meet you.

1389
01:07:16,900 --> 01:07:20,580
Here is Ivy's Hardest Game.

1390
01:07:20,580 --> 01:07:23,180
We'll pitch you against all of the IVs here.

1391
01:07:23,180 --> 01:07:27,340
And then right after this, we'll be adjourned for cupcakes in the trans set.

1392
01:07:27,340 --> 01:07:29,340
Ready?

1393
01:07:30,340 --> 01:07:34,340
You can't touch this.

1394
01:07:34,340 --> 01:07:37,340
You can't touch this.

1395
01:07:37,340 --> 01:07:41,340
You can't touch this.

1396
01:07:41,340 --> 01:07:44,340
You can't touch this.

1397
01:07:44,340 --> 01:07:45,340
Nice.

1398
01:07:45,340 --> 01:07:47,340
You can't touch this.

1399
01:07:47,340 --> 01:07:53,340
My, my, my, my music hit me so hard, makes me say, oh, my lord, thank you,

1400
01:07:53,340 --> 01:07:57,340
for blessing me when my too running, too high, that you're good,

1401
01:07:57,340 --> 01:07:58,340
that you know you're down.

1402
01:07:58,340 --> 01:08:01,340
I'm super dope all the way from the old town, and I know it's such,

1403
01:08:01,340 --> 01:08:04,340
and this is beautiful, you can't touch this.

1404
01:08:04,340 --> 01:08:08,340
I told you, homeboy, you can't touch this.

1405
01:08:08,340 --> 01:08:12,340
Yeah, that's how you live it, and you know you can't touch this.

1406
01:08:12,340 --> 01:08:15,340
Look at my eyes, man, you can't touch this.

1407
01:08:15,340 --> 01:08:18,340
You can't touch this.

1408
01:08:18,340 --> 01:08:20,340
Fresh through juice and bandage, you got it like that,

1409
01:08:20,340 --> 01:08:23,340
that you know you want to make it so blue, out of your suit,

1410
01:08:23,340 --> 01:08:26,340
and get it by your attention while it's rolling.

1411
01:08:26,340 --> 01:08:29,340
Hold on, pull a little bit and it'll go on like that.

1412
01:08:29,340 --> 01:08:30,340
Like that.

1413
01:08:30,340 --> 01:08:32,340
Pull a little bit and it'll go on like that, I know.

1414
01:08:32,340 --> 01:08:36,340
You can't touch this.

1415
01:08:36,340 --> 01:08:40,340
Come on, come on, come on, come on, come on.

1416
01:08:40,340 --> 01:08:43,340
While you standing there, man, you can't touch this.

1417
01:08:43,340 --> 01:08:46,340
Yo, Santa, be all smooth and subtle and you can't touch this.

1418
01:08:46,340 --> 01:08:48,340
Yeah, that's how you live it.

1419
01:08:48,340 --> 01:08:51,340
You know you're down, make knows, and that's what I'm getting down.

1420
01:08:51,340 --> 01:08:53,340
They know you're talking about the hammer,

1421
01:08:53,340 --> 01:08:56,140
We're talking about show that's hot and tight.

1422
01:08:56,140 --> 01:08:59,100
Singers are slow, so fast, so high for a tape.

1423
01:08:59,100 --> 01:09:00,940
Two hundred, what's gonna get you nice,

1424
01:09:00,940 --> 01:09:02,380
two hundred times.

1425
01:09:02,380 --> 01:09:03,740
Second to last level.

1426
01:09:03,740 --> 01:09:05,580
You might as well quit.

1427
01:09:05,580 --> 01:09:08,100
That's word, cause you know what,

1428
01:09:08,100 --> 01:09:09,420
you can't touch this.

1429
01:09:09,420 --> 01:09:14,940
Oh, oh, oh, oh, oh, oh, oh, oh, oh, oh, oh, oh, oh, oh, oh,

1430
01:09:14,940 --> 01:09:20,780
oh, oh, oh, oh, oh, oh, oh, oh, oh, oh, oh, oh, oh, oh, oh,

1431
01:09:20,780 --> 01:09:29,220
oh, oh, oh, oh, oh, oh, oh, oh, oh, oh, oh, oh, oh, oh,

1432
01:09:29,220 --> 01:09:31,420
stop and have time go with the flow

1433
01:09:31,420 --> 01:09:32,380
and stay in the game.

1434
01:09:32,380 --> 01:09:33,180
You do it.

1435
01:09:33,180 --> 01:09:36,060
Just put your hands in the air, bust your ears,

1436
01:09:36,060 --> 01:09:37,380
put your fingers in your head.

1437
01:09:37,380 --> 01:09:40,140
Sit for awhile, now dance with air,

1438
01:09:40,140 --> 01:09:41,740
thinking want to get in the mood.

1439
01:09:41,740 --> 01:09:44,260
Slide your arm just for a minute that's all.

1440
01:09:44,260 --> 01:09:47,180
The bump, bump, bump, bump, bump, bump, bump, bump, bump, bump,

1441
01:09:47,180 --> 01:09:48,600
you can't touch this.

1442
01:09:48,600 --> 01:09:52,600
Look, man, you can't test me.

1443
01:09:52,600 --> 01:09:54,600
You better get a high five.

1444
01:09:54,600 --> 01:09:56,600
Oh!

1445
01:09:56,600 --> 01:09:58,600
Please, man.

1446
01:09:58,600 --> 01:10:00,600
Break it down.

1447
01:10:00,600 --> 01:10:02,600
One, two, two. I swore.

1448
01:10:05,600 --> 01:10:07,600
No, it's okay.

1449
01:10:10,600 --> 01:10:12,600
One more left.

1450
01:10:12,600 --> 01:10:14,600
Stop. Have a time.

1451
01:10:19,600 --> 01:10:22,600
Alright, a round of applause for Andrea if we could.

1452
01:10:26,600 --> 01:10:29,600
That's it for CS50. See the website for details.

1453
01:10:29,600 --> 01:10:31,600
We'll see you for cake and like a transept.

1454
01:10:31,600 --> 01:10:33,600
Welcome aboard.

