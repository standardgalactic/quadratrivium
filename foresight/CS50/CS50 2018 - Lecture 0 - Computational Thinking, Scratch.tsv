start	end	text
0	13420	Thank You for wearing T-shirt.
30000	55360	This is CS50, Harvard University's introduction to the intellectual enterprises of computer
55360	57520	science and the arts of programming.
57520	62200	My name is David Malan, and if you are among those in the room who are thinking, why am
62200	66200	I in a class of computer science, realize that I, too, felt that exact same way.
66200	70200	In fact, my freshman year, I didn't quite get up the nerve to take this class, or computer
70200	71560	science, more generally.
71560	74080	And that was largely because I was intimidated by it.
74080	75320	I was a little nervous.
75320	79440	It felt well out of my comfort zone, and I really didn't know at the end of the day what
79440	80440	it actually was.
80440	83880	But realize if you, too, are feeling a little bit of that, or even if you're among those
83880	87440	more comfortable who have dabbled in computer science or programming, realize that they're
87440	90720	so many blanks that we can fill in along the way so that, ultimately, at the end of
90720	95040	the semester, everyone will feel themselves on the same page.
95040	100000	And until then, rest assured that 68% of the people sitting to your left and to your right
100000	106080	and behind and in front have never taken a CS course before, which may very well be the
106080	107760	demographic into which you fit.
107760	112480	But realize, too, that with such an amazing support structure, with so many office hours
112480	116680	and sections and materials and beyond, realize that what's ultimately important in this course
116720	121720	is not so much where you end up relative to your classmates in week 10, our final week,
121720	125040	but where you end up relative to yourself in week zero.
125040	126680	And indeed, that is where we now are.
126680	129400	And as it turns out, computer scientists start counting at zero.
129400	134240	And so over the next 11 weeks, will we take you from being among those less comfortable
134240	137680	or perhaps somewhere in between less comfortable and more to feeling much more
137680	141120	comfortable and confident and capable than that?
141120	144720	But to get there, we need to understand what computer science really is.
144760	148200	And this was something I didn't understand until I set foot in a room like this.
148200	151840	And I dare say we can distill computer science into just this picture.
151840	153960	Computer science is about problem solving.
153960	156120	And I know that high school courses typically
156120	158960	do kind of paint a misleading picture that it's only about.
158960	161920	And it's entirely about programming and people with their heads down
161920	164920	in the computer lab working fairly anti-socially on code.
164920	168680	But the reality is it's all about solving problems and very often solving problems
168680	172680	collaboratively, either in person or by leveraging code programs that others
172680	173880	have written in the past.
173880	175640	And what does it mean to solve a problem?
175640	177280	Well, you need inputs.
177280	178920	So there's a problem you're trying to solve.
178920	179920	That is the input.
179920	180680	And you want output.
180680	182360	You want the solution to that problem.
182360	184480	And the sort of secret sauce of computer science
184480	187840	is going to be everything in this proverbial black box in the middle
187840	192640	that over the next several weeks, we begin to understand exactly what you can do with that.
192640	195720	But in order to start solving problems, we kind of just
195720	198920	need to decide as a group how we're going to represent these problems.
198920	200280	And what might a problem be?
200280	202000	Well, in this room, there's a whole bunch of people.
202000	205240	If we wanted to take attendance or count the number of people in this room,
205240	208640	I might need to start keeping track of how many people I see.
208640	211320	But how do I represent the number of people I see?
211320	212880	Well, I can do it sort of old school.
212880	215640	And I can just take out a piece of chalk or whatnot and say, all right,
215640	219040	I see one, two, three, four, five.
219040	221480	I can do little stylistic conventions like that to save space
221480	226360	or remind myself six, seven, eight, nine, 10, and so forth.
226360	229520	Or I can, of course, just do that on my own hand.
229520	233400	So one, two, three, four, five, and so forth.
233400	238000	But obviously, how high can I count on just one hand?
238000	239520	So five, you would think.
239520	242400	But that's just because we haven't really thought hard enough about this problem.
242400	245480	It turns out that with just these five fingers, let alone these five more,
245480	247720	I can actually count rather higher.
247720	250680	Because after all, the system I'm using of hash marks on the board
250680	253840	or just now with my fingers is just kind of keeping my fingers down.
253840	256840	We're putting them up to represent ones, really.
256840	259840	But what if I actually took into account the order of my fingers
259840	263200	and sort of permuted them, so to speak, so that it's really patterns
263200	265520	of fingers that represent the number of people in the room
265520	268200	and not just the mere presence of a finger going up or down?
268200	270120	In other words, this can remain zero.
270120	271760	This could still be one.
271760	276800	But what if two is not just this, the obvious, but what if it's just this?
276800	279280	So raising just one, my second finger.
279280	281840	What if then three is this?
281840	285080	So we have zero, one, two, three.
285080	287800	That's going to lead us to four, somewhat offensively.
287800	292640	But if we can jump ahead to five, five I might now permute this finger
292640	293480	and this finger up.
293480	296800	And if I want to now represent six, I could do this.
296800	297640	And now seven.
297640	300560	In other words, I've expressed so many more patterns on my hand already.
300560	303200	And if we keep doing this, I think I can actually represent,
303200	307000	painfully perhaps, like 32 different patterns.
307000	310800	And therefore, 32 different people on my hands alone or 31 people
310800	312320	if I start counting at zero.
312320	313600	So what is that?
313600	314600	What's the relationship?
314600	315600	And how did we even get here?
315600	319760	Well, it turns out that computers are kind of simplistic, much like our hands here.
319760	321960	At the end of the day, your computer is plugged into the wall
321960	325640	where it's got a battery, so it either has or it does not have electricity.
325640	328320	At the end of the day, that is the physical resource that drive these things
328320	330600	in our phones and all of technology today.
330600	335560	So if there's either electricity or not, that kind of maps nicely to no finger
335560	336480	or yes finger.
336480	340000	And indeed, computers, as you probably know, only speak what language,
340000	341920	what alphabet, so to speak?
341920	343560	Yeah, binary, by meaning two.
343560	346840	And indeed, that refers to the fact that in binary and computers,
346840	349840	you only have two digits, zero and one.
349840	353200	We humans, of course, have zero, one, two, three, four, five, six, seven,
353200	354000	eight, nine.
354000	356160	And then we can combine those to count even higher.
356160	358240	But computers only have zero, one.
358240	359240	And then that's it.
359240	361000	Because at the end of the day, there's actually
361000	363960	a direct mapping between power being off and it being a zero,
363960	366680	or power being on and it being one, or some electrons,
366680	369600	or whatever flowing from your battery or from the wall.
369600	373440	So this is why computers tend to speak only binary because at the end
373440	375880	of the day, it just maps really cleanly to what
375880	378960	it is that's powering them in the first place.
378960	380560	But how is this actually useful?
380560	383920	If computers only have zeros and ones, how can they do anything useful?
383920	388600	Well, think about our human world where you might have this pattern of symbols.
388600	391680	This is decimal, deck meaning 10, because you have zero through nine.
391680	393880	And this is, of course, 123.
393880	394600	But why?
394600	396960	If you haven't thought about this in quite some time,
396960	400360	this is really just a pattern of three symbols, one and two and three,
400360	402160	shapes or glyphs on the screen.
402160	404280	But we humans, ever since grade school, have
404280	406920	started describing meaning to each of these numbers, right?
406920	410320	If you think back, this is the ones column, this is the tens column,
410320	412800	this is the hundreds column, and so forth.
412800	413920	And we could keep going.
413920	418080	And so why does this pattern one, two, three mean 123?
418080	420840	Well, it's because all of us, sort of intuitively nowadays,
420840	427320	are just quickly in our head doing 100 times 1 plus 10 times 2 plus 1
427320	432040	times 3, which of course gives us 100 plus 20 plus 3.
432040	435760	And then the number we know mathematically as 123.
435760	437960	But we're all doing this so quickly, you don't really
437960	439120	think about this anymore.
439120	441520	Well, computers work fundamentally the same way.
441520	444640	They don't have as many digits, zero through nine as we do.
444640	446560	They only have zeros and ones.
446560	448800	And so if they were to store values, you're
448800	450400	only going to see zeros and ones on the screen.
450400	452560	But those zeros and ones just mean different things.
452560	455120	Instead of having a ones place, tens, hundreds,
455120	459800	they're going to have a ones place, a twos place, a fours place,
459800	461880	and then eights and 16 and beyond.
461880	462680	Now why?
462680	466920	Well, one and 10 and 100 turns out those are powers of 10.
466920	469400	10 to the zero is technically one.
469400	471000	10 to the one is just 10.
471000	472400	10 to the two is 100.
472400	475760	And that's why you have ones, tens, hundreds, thousands, and so forth.
475760	480200	Computers are apparently using powers of two, not surprising, binary two.
480200	485040	So if you only have ones, twos, and fours as your placeholders,
485040	490360	if a computer were storing these digits, zero, zero, zero,
490360	493960	that computer is presumably storing what number so far as we humans
493960	495480	understand it.
495480	497240	Well, that's how a computer would store zero.
497240	500200	If a computer is storing literally zero, zero, zero,
500200	502400	just like in our human world, that also is zero.
502400	505680	But that's technically because it's four times zero, plus two times zero,
505680	508240	plus one times zero, which is obviously zero.
508240	513680	Meanwhile, if a computer is actually storing not just say zero, zero, zero,
513680	518840	but instead is storing this value in binary, what is that map to in decimal?
518840	519760	So that's one.
519760	526440	And now why, if we change this zero and one to this value here,
526440	529560	is this two both mathematically for the exact same reasons.
529560	531160	And so earlier, I had five fingers.
531160	535000	But if you consider just my first three, when I did this holding up one finger,
535000	536960	I was representing two.
536960	540200	And if I want to represent three, recall that I put up the second finger.
540200	543400	And so the reason that could nicely represent three
543400	548000	is because all I was doing with my human hand was counting in binary.
548000	549720	And I could keep counting more and more and more.
549720	554880	And so if I have five fingers or five bits, bit meaning binary digits,
554880	555720	I could count up.
555720	559880	It turns out if we do the math, as high as 31 by starting to zero.
559880	563200	It's going to be hard to physically do that, but we could.
563200	565000	So why is this useful?
565000	566840	What the end of the day, a computer, therefore,
566840	570200	can represent any number of values from zero to one to two to three
570200	572600	to some number much, much, much higher than that.
572600	575400	All it needs is enough bits, enough zeros and ones.
575400	576600	Well, what are those bits?
576600	580720	Well, all of us have these days in our phone's sources of light, for instance.
580720	583680	So I could actually say that this physical device right now
583680	585120	might be a little hard to tell.
585120	588000	It does have a flashlight, and it's technically off at the moment.
588000	591640	But if I turn this flashlight on, thereby using some of the electricity,
591640	593520	then now I'm storing a one.
593520	594600	And so the phone is on.
594600	595520	Now it's off.
595520	596280	Now it's on.
596280	599880	And if I see, can I borrow someone's phone real quick, is may I?
599880	601840	OK, and flashlight.
601840	603600	How do I turn on the flashlight?
603600	605000	Oh, shake it.
606000	607520	I'm working.
607520	608200	That's OK.
608200	610280	OK, thank you.
610280	610920	Oh, thank you.
610920	611960	OK, so this is great.
611960	612800	Now I can count higher.
612800	616320	So now this represents the number of what?
616320	620000	If I have two light bulbs or two switches on at the moment?
620000	621800	Yeah, three, because I have a one.
621800	624840	I have a one, and I have a two, which of course is going to end up equaling three.
624840	627760	And if I pick up a third phone somehow, I could count even higher.
627760	631360	Technically, if I had three light bulbs on, one, one, one,
631360	633120	what would that value be?
633120	636560	Seven, because it's a four plus a two plus a one, and so forth.
636560	638560	Thank you so much for the spontaneity.
638560	643440	So why does this not lead to limitations for us?
643440	645800	I can count in a decimal as high as I want.
645800	649200	I can now count in binary as high as I want, so long as I have enough bits.
649200	652880	But how do I actually represent other information?
652880	657880	Well, if I want to represent something like a letter, how do I get there?
657880	662200	If computers only have electricity in them, and they use binary to count,
662200	664960	and yet somehow they're much more useful than just doing math.
664960	668720	They can have text messages, and emails, and websites, and videos, and more.
668720	671800	How do we get from 0s and 1s to letters?
671800	672640	Well, we should, yeah.
676000	678800	Sorry, a little louder?
678800	681320	Yeah, we just need to kind of relate the numbers to letters.
681320	682760	In other words, all the people in this room
682760	685080	just need to decide at some point that, you know what,
685080	687840	if we want to represent something like the capital letter A,
687840	691120	we just need to decide on a pattern of bits, a pattern of fingers
691120	694720	that's going to represent A. And it turns out, humans years ago just
694720	700520	unilaterally decided 65 shall be the decimal number that represents capital letter A.
700520	704400	And you might guess capital B is represented by what decimal number?
704400	707040	66, and then C is 67, and so forth.
707040	711560	And there's a mapping of like 128 or even 256 possible values for all
711560	715360	the keys you might see on a typical keyboard in order to represent letters.
715360	718880	Now, how does a computer distinguish, though, numbers from letters?
718880	720360	Well, it just depends on the context.
720400	723600	If you're using like a calculator program on your Mac or PC or iPhone
723600	726320	or Android, well, the computer, the device,
726320	728480	is just going to know contextually, let me
728480	732040	interpret this pattern of zeros and ones as actual numbers to do math.
732040	735520	But if you're using the SMS app or the Messages app on your phone,
735520	737760	you're going to actually be in the context of text.
737760	740600	And so your phone is going to interpret that same pattern of zeros
740600	744480	and ones, or light bulbs being off, or at the end of the day, transistors,
744480	748080	tiny pieces of hardware and computers that are either on or off.
748080	751120	It's going to interpret those patterns as just representing a letter.
751120	753840	If you're in the context of a text messaging application,
753840	756320	or Microsoft Word, or Google Docs, or the like,
756320	758800	it completely depends on context.
758800	761360	The system we humans came up with just called ASCII,
761360	763720	American Standard Code for Information Interchange.
763720	767360	The name isn't interesting, but the fact that we all agreed years ago
767360	770840	that 65 is A, and so forth, is what's important.
770840	773440	And so for instance, if we look at this mapping here
773440	776880	of just the first few letters, what does this mean?
776880	781520	If I were to now get a text message, and I had the ability somehow
781520	784320	to look underneath the hood, so to speak, at the pattern of zeros
784320	787480	and ones that someone had just texted me, and that pattern,
787480	792840	if I convert it to decimal, technically said, let's say, 72 and 73.
792840	794600	So I get a whole bunch of zeros and ones.
794600	798120	I do some math, and I realize, OK, I just received 72 and 73,
798120	801200	but this is texting, and so it's not just numbers my friend is sending me.
801200	802200	It's a message.
802200	806560	What message did my friend likely send me if he or she sent 72,
806560	808720	and then 73?
808720	811880	Yeah, hi, HI, because if you skim ahead at the right there,
811880	817320	that just happens to be in ASCII, the mapping between 72 and 73 to H and I.
817320	821320	If technically the message had a third byte, if you will, a byte,
821320	823720	if you've ever wondered, it's just eight bits.
823720	825880	It's convenient to talk, not in terms of single bits,
825880	829080	where you can't count very high, but with a byte or eight bits,
829080	830320	you can count higher.
830320	834640	And so it turns out if I received a third byte, another sequence of eight zeros
834640	840360	and ones together, 33, how would we know what this message now is?
840360	843400	Yeah, so it turns out you would not know this other than by guessing or googling
843400	844880	or just coming in with this knowledge.
844880	848800	This is now high with an exclamation point, because 33 just so happens
848800	852760	if you look it up to map to an exclamation point as well.
852760	855080	Now, if we actually looked at the binary of this,
855080	857280	you would actually see this pattern of zeros and ones.
857280	859560	This is how you represent 72 in binary.
859560	863480	This is how you represent 73, and this is how you represent 33.
863480	867440	And notice, I've only used one, two, three, four, five, six bits,
867440	870880	even though I technically tend to receive things in units of eight,
870880	871880	units of bytes.
871880	878440	But why did I not bother writing another zero, zero here and another zero here?
878440	881560	Does it matter when you write these things out?
881560	882320	No, not really.
882320	886680	Like in English, in our human world, if you were to write one, two, three,
886680	891520	that's 123, if you were to write zero, one, two, three, that's still 123.
891560	894320	So even though we tend to get them in clusters of eight,
894320	897280	we don't necessarily need to write those when just talking about them.
897280	898200	So what have we done?
898200	900680	Well, let me introduce a fancy word now known as abstraction.
900680	903720	Abstraction is just a term generally used in computer science,
903720	906760	and we'll soon see in programming for taking some low level,
906760	910640	like literally low level implementation details, like minutia
910640	912920	even, and understanding them at some point,
912920	916120	but then deciding this is not a useful level conceptually
916120	917360	to think about problems.
917360	920960	I really don't want to solve problems in this world thinking in zeros and ones.
920960	924160	I'd much rather think about things minimally in decimal or better
924160	927040	yet in the context of letters if I'm actually receiving text
927040	928760	or even some other representation.
928760	932680	So abstraction is about taking fairly low level details
932680	936680	and just simplifying them so that we can have a more useful conversation
936680	939960	and never again worry about where the electricity is coming from.
939960	943280	We can just stipulate, my computer can represent zeros and ones.
943280	944800	Therefore, it can represent numbers.
944800	947680	Therefore, it can also represent ASCII or letters.
947680	951520	And we can kind of move on and start solving more interesting problems.
951520	955400	But it would seem that we can't solve all problems
955400	959880	because on my keyboard here, this American keyboard here,
959880	962720	there's a whole bunch of symbols, like 100 or two maybe in total
962720	965200	if we actually hit Shift and Option and all that.
965200	967880	But what you don't see are some pretty common characters,
967880	969680	especially in a very international audience.
969680	973240	What can I apparently not even type on this keyboard?
973240	974080	What kinds of symbols?
974080	975680	Yeah?
975680	976920	Anything with an accent?
976920	980400	If you have accents over vowels or other letters, what else?
980400	981600	I'm sorry?
981600	983240	Umlats or other characters above letters?
983240	984440	Yeah?
984440	985760	Pound?
985760	987000	Like pound symbol?
987000	988520	Oh, like the UK pound symbol?
988520	988840	Sure.
988840	990000	In other countries too.
990000	992640	Any number of Asian languages, there's so many symbols that are not
992640	993720	depicted on this keyboard.
993720	997280	And yet somehow, all of us with international keyboards or phones
997280	998960	can surely express themselves.
998960	1002840	But that's because phones and computers these days don't just use ASCII.
1002840	1006440	ASCII literally use just eight bits total, technically seven,
1006440	1008240	but then ultimately really eight.
1008240	1011360	And with eight bits, if you actually do the math, if you have eight bits or eight
1011360	1016800	fingers, you can only permute them in 256 total possible ways, which
1016800	1020240	is to say that you can only represent 256 characters using
1020240	1023160	ASCII with numbers underneath the hood.
1023160	1025720	And that's not enough to represent so many different symbols
1025720	1027280	like those enumerated here.
1027280	1029840	You can't represent any of the accents that you can nonetheless type
1029840	1031040	on your Macs and PCs.
1031040	1034400	And you certainly can't type these things, which are very much in vogue,
1034400	1038200	which even though they're pictures, they're actually just characters.
1038200	1042680	Because it turns out some years ago, the world decided eight bits is not enough.
1042680	1045480	Let's start using something called Unicode, where you actually
1045480	1048840	use one or two or three or even four bytes.
1048840	1054120	So eight bits or 16 bits, 24 bits, or even 32 bits to represent characters.
1054120	1058120	And now we have the ability to represent thousands or even millions of characters.
1058120	1063200	And frankly, dare say, the result of that huge amount of availability
1063200	1065880	is partly why there are so many of these things these days.
1065880	1068520	And they just keep making more because there's just so many different numbers
1068520	1070000	available to us.
1070000	1073600	So Unicode is often a specific version of it called 8UTF-8,
1073600	1074880	which we'll see before long.
1074880	1076720	But let me ask this question here.
1076720	1082360	This is a crying face with joy, I think this is called.
1082360	1084480	So it turns out, according to Apple or iOS,
1084480	1087080	this is the most popular emoji that at least iPhone people
1087120	1088440	are sending to each other.
1088440	1092040	So when you're receiving this, though, if we can really take the fun out of this,
1092040	1095560	what pattern of bits are you actually receiving from your friend?
1095560	1098240	He or she is clearly trying to express some emotion.
1098240	1104760	But really, what your friend is sending you, the decimal number, 128,514.
1104760	1108320	Or really, if you looked at the 0s and 1s coming to you over the internet
1108320	1111800	or airwaves, you're getting this pattern of 0s and 1s,
1111800	1115120	which is hardly joyful or hardly descriptive.
1115120	1117280	But all your phone or computer are doing is
1117280	1120360	seeing this pattern of bits, looking it up in like a little cheat sheet
1120360	1123880	and saying, oh, whenever I see this pattern of bits in the context of text,
1123880	1128160	like texting, I should actually display it as that picture.
1128160	1131760	Now, that picture has a lot of yellow and other colors in it.
1131760	1133600	But how do we even get there?
1133600	1137960	Well, it turns out that this same pattern of numbers, 72, 73, 33,
1137960	1140840	which just to be sure, a moment ago meant what?
1140840	1144720	Hi, in the context of a textual program like Microsoft Word, Google Docs
1144720	1146640	texting, this means high.
1146640	1150560	But what if you saw this same pattern of bytes?
1150560	1153920	And again, we could draw the 0s and 1s, but it's not interesting anymore.
1153920	1156200	So we're going to abstract away at the decimal level.
1156200	1159680	If you've got this same pattern of 0s and 1s or numbers in the context
1159680	1163840	of like Photoshop or a browser or some kind of photo program,
1163840	1167600	well, it might make more sense to interpret it not as text, but as
1167600	1169400	imagery, some kind of colors.
1169400	1171760	Well, it turns out there's this other system in the world.
1171760	1176120	You might have seen this acronym before called RGB, red, green, blue.
1176120	1180600	And this is just a way of humans having standardized years ago that, you know what,
1180600	1183600	if we want to represent a dot on someone's screen, otherwise known
1183600	1186800	as a pixel, tiny little square on the screen of your phone, your laptop,
1186800	1190560	or even TV these days, we're going to use three bytes.
1190560	1194720	One byte to specify how much red should be in that specific pixel.
1194720	1198600	One more byte to specify how much green should be combined with red to form
1198600	1199280	that pixel.
1199280	1202560	And then one more byte, a third, to represent how much blue
1202560	1206280	to combine with those other two colors to make a new color altogether.
1206280	1209800	So it's kind of like combining paints, except in this case,
1209800	1214480	it's more really waves of light in order to get a specific color using just
1214480	1217160	red, green, and blue as your palette.
1217160	1221440	And so if we were to see this red, green, blue pattern and say, you know what,
1221440	1226440	give me 72 red, 73 of green, and 33 of blue,
1226440	1228920	if the total possible range, as I alluded to earlier,
1228920	1233800	is like 0 to 256, or technically 0 to 255,
1233800	1236480	if you start counting in computer science light from 0,
1236480	1239280	this is like a medium amount of red, medium amount of green,
1239280	1242720	and just a little bit of blue if the range goes from 0 to 255.
1242720	1244840	So if you combine these three things together,
1244840	1248160	anyone know what color you get?
1248160	1251360	Yeah, so it's kind of a light yellow that looks like this.
1251360	1255080	So if a computer is storing a single dot on the screen that
1255120	1258400	happens to be in yellow, what the computer is actually storing
1258400	1261920	is not this dot physically, but a pattern of three bytes.
1261920	1263760	How much red, how much green, how much blue
1263760	1266200	should the computer display at this particular point?
1266200	1271320	So if we look at this crying face of joy, and we kind of enhance or zoom in on it
1271320	1275080	here, you can actually see it start to pixelate, so to speak,
1275080	1276400	where you start to see the dots.
1276400	1278720	If I punch in a little more, now you can really
1278720	1280800	start to see the dots on the screen.
1280800	1282960	And if I go in even farther, you can actually
1282960	1286880	see the tiny little squares that compose this image, most of which
1286880	1290080	at the zoom level are yellow, but a bunch of which are black,
1290080	1293840	a bunch of which are like light black or dark yellow.
1293840	1296440	And that's what composes this image ultimately.
1296440	1300640	So this is to say, if you count up all of the pixels on the screen
1300640	1303920	and then multiply it by 1, 2, 3 bytes, that's
1303920	1307600	how many bytes or kilobytes or megabytes, if you've heard those terms,
1307600	1312320	are going to be stored on your computer just to represent that image.
1312320	1316800	So we've gone from electricity to down here, so to speak, to 0s and 1s
1316800	1318680	to decimal, now to colors.
1318680	1320920	Well, with colors, you can get images.
1320920	1322200	What comes after images?
1322200	1325920	Well, if we've all watched videos or movies, certainly digitally these days,
1325920	1328200	well, what is a movie or a video file?
1328200	1329480	How might that be implemented?
1332480	1334320	Say a little louder?
1334320	1335720	Yeah, it's a collection of images.
1335720	1339160	If you've ever heard of frames per second, like movies tend to be 24 frames
1339160	1341840	per second or 30 frames per second, that just
1341840	1346760	means that a typical movie every second is showing you 24 or 30 images
1346760	1350120	per second, and they're just flying by so quickly that you actually don't
1350120	1352600	notice you're just watching a sequence of static images.
1352600	1355520	It's like as a kid, if you ever had one of those paper flip books,
1355520	1358800	where there's tons of drawings in them, and as you flip through the pages,
1358800	1361680	you see things moving, but that's just because your eyes are just seeing
1361680	1365880	little snapshots ever so quickly of something moving on the paper.
1365880	1367880	That's all a video file actually is.
1367880	1370520	So if you have an iPhone and you've ever played with these an emojis,
1370520	1375080	so to speak, well, all those are our little video files composed of lots
1375080	1379360	and lots and lots of images that you have saved on your phone or texted
1379360	1380560	to someone else.
1380560	1383800	And if we just think now, OK, now we're at the point of video, but that's OK.
1383800	1385360	Videos are just bunches of images.
1385360	1387000	Images are just bunches of colors.
1387000	1388760	Colors are just patterns of bits.
1388760	1391440	And bits, at the end of the day, are just the result of electricity
1391440	1395240	coming into my machine or transistors turning switches on and off.
1395240	1398240	Like we've all of a sudden told this entire story,
1398240	1400880	but none of us ever is going to need to really think about binary
1400880	1405120	in the context of videos because a video is just an abstraction on top
1405120	1406040	of bunches of images.
1406040	1409960	And images are just an abstraction of top bunches of pixels and so forth.
1409960	1413640	So we can keep painting this hierarchy that just allows us to talk about things
1413640	1414560	at a more useful level.
1414560	1416800	And the reason we had this conversation is just
1416800	1422120	because we needed a way to represent inputs and outputs to problems.
1422120	1427040	So let me pause there for just a second to see if there's any questions.
1427040	1430200	Anything at all?
1430200	1433120	All right, so what's inside this black box?
1433120	1436720	Well, it turns out this is where the really interesting work starts
1436720	1438640	to happen and the thought starts to come in.
1438640	1442400	This is the proverbial algorithms, step by step instructions
1442400	1443920	for solving some problem.
1443920	1446040	And some of you might have solved this problem before,
1446040	1447640	either digitally or textually.
1447640	1450640	But of course, if you have contacts in your phone these days
1450640	1453520	and you've got bunches of friends and family, odds are they're alphabetized
1453520	1454760	by first name or last name.
1454760	1456480	And you have autocomplete these days.
1456480	1459040	But it really is just a long list of names and numbers.
1459040	1461520	That's not all that different from yesterday's implementation
1461520	1465240	of the same problem, which was this device here, a phone book.
1465240	1468920	Now, this phone book might have a friend of ours, and it's a Mike Smith, whose
1468920	1470280	last name starts with s.
1470280	1472560	And I could, of course, if trying to find Mike Smith,
1472560	1477080	start by looking at the first page, the second page, the third page,
1477080	1480400	the fourth page, and eventually just hopefully find Mike Smith.
1480400	1484600	Indeed, is this algorithm, this step by step process, correct for finding
1484600	1486560	someone like Mike Smith?
1486560	1487440	Yeah, it's correct.
1487440	1490600	It's stupid and slow, perhaps, because it's going to take forever
1490600	1492040	in a phone book of this size.
1492040	1495240	But it is correct, because if Mike's in here, I will, in fact, find him.
1495240	1496160	But I could do this better.
1496160	1500960	I could do it sort of two at a time, so two, four, six, eight, 10,
1500960	1503200	imperfectly, 10, 12, 14.
1503200	1505080	Is that faster?
1505080	1507240	Obviously, it's going twice as fast.
1507240	1509440	Is it correct?
1509440	1511760	No, why is it not correct?
1511760	1512880	I might miss him, right?
1512880	1516200	Mike just accidentally might eventually get sandwiched between two pages,
1516200	1519000	and I have the unlucky experience of just missing him.
1519000	1520040	Now, is this fixable?
1520040	1520640	Yeah.
1520640	1524840	I can probably, once I hit, like, SN or the T section, for instance,
1524840	1527320	I can just say, all right, obviously I've gone too far for Mike.
1527320	1530560	Let me just double back one or just a few pages, so it is fixable.
1530560	1534000	And so long as I've saved time by flying through this twice as fast,
1534000	1537960	can I at least afford to spend a few more steps at the very end just
1537960	1539320	to find Mike Smith?
1539320	1540560	But none of us are going to do that.
1540560	1543080	And our Apple devices and Android devices certainly
1543080	1544920	don't do that for efficiency today.
1544920	1549120	Odds are most of us are going to do what to find someone in any book like this?
1549120	1552360	Yeah, open to roughly the middle, or maybe bias ourselves toward the end,
1552360	1553760	because S is after the middle.
1553760	1555960	But I'm in the middle of the phone book here.
1555960	1559320	And now, if I know that Mike is in the S's, and therefore over here,
1559320	1561920	where do I know he's not?
1561920	1563760	He's not in the beginning, and I can literally
1563760	1568280	tear a problem like this in half, throw figuratively and literally half
1568320	1572160	of the problem away, and be left with fundamentally the same problem,
1572160	1573120	but it's half as big.
1573120	1576200	I went from, like, whatever, 1,000 pages to 500 pages,
1576200	1577960	and I can now repeat this algorithm.
1577960	1579680	I look down, and a little too far.
1579680	1581120	I'm in the T section now.
1581120	1585680	OK, I can again tear the problem in half, throw that half away,
1585680	1589000	taking a 500 page byte out, a 250 page byte out,
1589000	1591680	now leaving myself with just 250 pages more,
1591680	1593360	and notice just how quickly I got here.
1593360	1597880	The first two algorithms got me from 1,000 to 999 to 998,
1597920	1601600	or 1,000 to 998 to 996.
1601600	1604440	But here, I went from 1,000 to 500 to 250.
1604440	1606400	Feels like we're making up time here.
1606400	1608240	And indeed, if I keep repeating this process,
1608240	1611080	hopefully, I'll be left with just one page of the book
1611080	1615760	that Mike is either on or not, at which point I will call him.
1615760	1618840	And so that's an algorithm that honestly leverages probably all
1618840	1621800	the intuition we have, and a lot of what programming is going to be.
1621800	1625400	It's thinking about a problem like this, figuring out how to divide and conquer
1625400	1627160	it, and then expressing yourself in a way
1627160	1629600	that the computer can then solve that problem for you.
1629600	1633240	And just to paint a picture of how much better this algorithm is,
1633240	1635560	well, if this is just a very abstract chart where
1635560	1639200	we have on the vertical or y-axis how much time it takes to solve a problem,
1639200	1641960	and on the horizontal axis how big the problem is,
1641960	1645080	so the farther out you go this way, the more pages in the problem,
1645080	1647520	the more pages in the phone book, and the higher you go up here,
1647520	1649960	the more seconds or page turns it's going to take.
1649960	1654320	That first algorithm is just like a linear slope, so to speak.
1654320	1656360	Because for every additional page in the book,
1656400	1659320	it might take me one more second, right up, right up.
1659320	1662240	It's just a one-for-one relationship with pages.
1662240	1665960	The second algorithm, if I plot it where I'm flying through twice as fast,
1665960	1667720	what is that line going to look like instead?
1672160	1674400	Yeah, it's going to look lower than this one.
1674400	1677760	It's still going to be a straight line, because now there's a two-to-one relationship.
1677760	1680240	But if you've got a phone book that's got this many pages,
1680240	1683560	and in the first algorithm it took this long here,
1683560	1687320	well, in the second algorithm it's going to take about half as many steps,
1687320	1690440	plus or minus one or two, if you need to actually double back a little bit.
1690440	1693280	But that third algorithm is what we'll call logarithmic.
1693280	1695640	If n is the number of pages in the phone book,
1695640	1697520	the first algorithm in the very worst case
1697520	1699600	might take all n pages to find Mike Smith.
1699600	1701800	The second algorithm is going to take half as many steps,
1701800	1703640	because I'm flying through it two at a time.
1703640	1706880	But the third algorithm is going to look and feel like this.
1706880	1711320	It's going to be curved and ever so slowly rising and rising and rising.
1711320	1715040	The implication of which is if Verizon or the phone company doubles
1715040	1716840	the number of pages in the phone book next year,
1716840	1720200	because Cambridge and Somerville merge together in the phone book,
1720200	1721840	and we now have 2,000 pages.
1721840	1725760	Well, how many more steps does my third algorithm take?
1725760	1727880	Just one, because I can take a thousand page
1727880	1730880	bite out of the problem with that clever algorithm,
1730880	1734760	whereas my first two algorithms would take it one or just two pages at a time.
1734760	1739360	So that is to say, we have to hugely increase the size of this problem
1739400	1744120	just for the number of seconds or page turns to appreciably actually increase.
1744120	1746160	And so as we start to learn about programming,
1746160	1751720	it's again going to be leveraging of this intuition in order to actually solve
1751720	1758480	problems in code more effectively than we might without that intuition alone.
1758480	1760200	So let's formalize this now.
1760200	1763600	So that was kind of a very intuitive way of dividing and conquering a problem.
1763600	1766040	Just kind of made sense to go in the middle, tear it,
1766040	1769720	and go to the other half, or the other half, and tear it again, and so forth.
1769720	1774240	But a computer, even as cool as Alexa and Google Home and all this,
1774240	1776800	are, you can't really just talk to them as another human
1776800	1778480	and have them execute things correctly.
1778480	1782040	I struggle just to get Siri to set a timer on my phone.
1782040	1783880	So we're not quite there yet, so we're still
1783880	1787880	at the age where we have to be ever so precise with computers, voice
1787880	1791120	activated or otherwise, and so thus enter pseudocode for now.
1791120	1793200	Pseudocode has no formal definition.
1793200	1797640	This is just a way of saying, use English-like syntax or any spoken language
1797640	1800880	and just express yourself succinctly and correctly
1800880	1803760	so that a computer or a robot or even another person
1803760	1806320	can understand what it is you're trying to say.
1806320	1809880	So here, I propose as an algorithm written in pseudocode,
1809880	1812440	English-like syntax, that just gets my point across.
1812440	1814200	And I could write this in any number of ways.
1814200	1817320	I've numbered the steps from 0 on up just for the sake of discussion,
1817320	1819560	but this would seem to capture what I did there.
1819560	1822520	Pick up the phone book, open to the middle of the phone book,
1822520	1825920	look at the names, if Smith is among the names, call Mike.
1825920	1829920	Else, if Smith is earlier in the book, go to the left, specifically
1829920	1833560	the middle of the left half of the book, and then go back to step two.
1833560	1836200	Because indeed, I was just doing the same thing again and again.
1836200	1838960	And the reason I wasn't doing it forever was because every time I
1838960	1842720	repeated myself by opening and tearing, I was shrinking the problem.
1842720	1846160	And I can only shrink a problem of some fixed finite size so many times
1846160	1847600	until I get just one page.
1847600	1850720	And so if I can continue this logic looking to the right or to the left
1850720	1854120	or just quitting, if I don't find Mike at all on the last page,
1854120	1857400	this would seem to capture more precisely that code.
1857400	1859840	Well, let's actually excerpt from this now a few concepts
1859840	1862640	and then start to apply them to actual code.
1862640	1863840	Highlight it in yellow here.
1863840	1866400	I daresay are all of the verbs or actions.
1866400	1868680	These are the functions, as we're going to start
1868680	1870000	calling them in this algorithm.
1870000	1873160	A function is just a specific step, a specific action
1873160	1876280	you take in order to do something.
1876280	1880480	And so in yellow here, pick up, open to, look at, call, open, quit,
1880480	1884040	or all actions or verbs, or henceforth, we'll call them functions.
1884040	1888120	Meanwhile, highlighted in yellow here, if, else, if, else, if, else,
1888120	1890200	these are kind of starting to ask questions.
1890200	1893240	What might these be called if you have some familiarity?
1893240	1896160	Yeah, it turns out many programming languages, if you've seen any before,
1896160	1897200	would call these conditions.
1897200	1899720	They're branches or proverbial forks in the road.
1899720	1901400	If this is true, go this way.
1901400	1904840	Else maybe go this other way, or perhaps a third or fourth direction
1904840	1905680	altogether.
1905680	1909280	Meanwhile, if we actually look at these highlighted phrases,
1909280	1912080	if Smith is among names, or if Smith is earlier in book,
1912080	1915400	or Smith is later in book, these are the specific questions we're
1915400	1917000	asking in order to make that decision.
1917000	1919760	These are known as Boolean expressions, named after a gentleman
1919760	1921800	by the last name of Boole some years ago.
1921800	1925360	And so a Boolean expression is just a question that has a yes or no answer,
1925360	1929440	a true false answer, a 1-0 answer, if you will.
1929440	1932000	And that's a nice mapping to what computers are really good at.
1932000	1934040	So within conditions, you have Boolean expressions
1934040	1937320	to decide which fork in the road you want to go down.
1937320	1939320	And then lastly, highlighted in yellow here,
1939320	1941880	are you go back to step two in a couple of places.
1941880	1944560	This is inducing some kind of cycle or loop
1944560	1948400	that's telling the computer to do something again, and again, and again.
1948400	1952280	So in short, we have these building blocks already, conceptually.
1952280	1956600	And it turns out we can now start to translate these to an actual programming
1956600	1957240	language.
1957240	1959240	The first of the languages we'll introduce in CS50
1959240	1960520	is something called Scratch.
1960520	1962360	Turns out this is not a text-based language,
1962360	1964800	like in my English pseudocode there, but it's graphical.
1964800	1967300	And things look like puzzle pieces that you can drag and drop,
1967300	1969500	and they interconnect if it makes logical sense to do so.
1969500	1971820	And in fact, some of you might have played with this back in the day
1971820	1973660	as kids or even more recently, because it's actually
1973660	1976660	targeted typically at students in after-school programs who just
1976660	1980780	want to learn more methodical, more algorithmic, or computational thinking.
1980780	1984180	And we're going to use it to explore not only these building blocks,
1984180	1985540	but a few others as well.
1985540	1989900	It turns out in the other languages we'll explore in CS50 and beyond are languages
1989900	1993140	like C that we'll actually transition to as quickly as next week
1993140	1997180	to then translate what we do this week in Scratch to next week in C.
1997220	1999740	And in languages like Python and JavaScript and SQL,
1999740	2002660	which we'll also explore, do we have other capabilities, the ability
2002660	2005940	to store data in variables, so to speak, to use threads, which
2005940	2008460	means get the computer to do multiple things at once,
2008460	2011020	events to mean listen for things happening,
2011020	2014900	like a click on the page, or a human typing, or even saying something.
2014900	2018820	We'll be able to do all of the things that you take for granted in your very own phones.
2018820	2021580	And we'll do this first by way of this guy.
2021580	2025100	So this is Scratch, the default cat that comes with this programming language
2025100	2026540	from MIT's Media Lab.
2026540	2029980	And via Scratch, can we start programming him to move up, down,
2029980	2034180	left, right, say something, utter something, and other commands all together?
2034180	2037420	In fact, let me go ahead and switch contexts here
2037420	2040020	to show you the very first thing I ever wrote in Scratch.
2040020	2042060	It was back in the day when I was in graduate school.
2042060	2044300	And Scratch had just been invented by MIT.
2044300	2046220	Let me go ahead and open this.
2046220	2049460	And I called it Oscar time.
2049460	2052300	And if we could perhaps have a volunteer come on up for just a moment,
2052300	2054860	you have to be comfortable being on stage and on the internet.
2054860	2056020	I have it here in the white shirt.
2056020	2057200	Saw your hand first.
2057200	2058700	Come on down.
2058700	2060140	So this is Oscar time.
2060140	2062420	It's implemented in a language called Scratch.
2062420	2066500	And at the end of the day, all that is underneath the hood of this program
2066500	2070140	is functions, and loops, and conditions, and a few other of these concepts.
2070140	2070980	Hi, what's your name?
2070980	2071480	Aviva?
2071480	2072260	Aviva, David.
2072260	2073020	Nice to meet you.
2073020	2075100	Come on over here.
2075100	2078620	And in just a moment, I'm going to go ahead and click the green flag
2078620	2081220	at the top left hand corner, which is going to play this game.
2081220	2083220	And we'll see on the screen the instructions.
2083980	2090980	Oh, I love trash.
2090980	2095180	Anything dirty or dingy or dusty.
2095180	2099540	Anything ragged or rotten or rusty.
2099540	2103420	Yes, I love trash.
2103420	2105980	If you really want to see something trashy, look at this.
2105980	2110100	I have here a sneaker that's tattered and worn.
2110100	2114260	It's all full of holes and the laces are torn.
2114260	2118380	A gift from my mother the day I was born.
2118380	2122340	I love it because it's trash.
2122340	2126260	Oh, I love trash.
2126260	2130460	Anything dirty or dingy or dusty.
2130460	2134940	Anything ragged or rotten or rusty.
2134940	2138540	Yes, I love trash.
2138540	2141260	Yes, I'm more rotten stuff.
2141260	2144780	I have here some newspaper, 13 months old.
2144780	2146540	All right, we're going to round of applause for Aviva
2146540	2147380	for coming on up.
2147380	2148620	Thank you.
2148620	2149420	Here, up, Aviva.
2152420	2153860	A little CS50 stress ball.
2153860	2156820	So suffice it to say, if you're tired of this song,
2156820	2160020	consider how tired I was eight hours later while debugging
2160020	2161300	and building this program.
2161300	2162740	But consider what it is we just saw.
2162740	2165100	It's this interactive game, and stuff is animated,
2165100	2166180	and music is playing.
2166180	2169860	But if you focus on decomposing, so to speak, this program,
2169860	2173020	into just basic building blocks, this is just kind of a big abstraction
2173020	2176060	over some lower level pieces of functionality.
2176060	2177260	Like this trash can here.
2177260	2178780	At the moment, it's just a picture.
2178780	2181340	And on occasion, as soon as Aviva dropped something into the trash,
2181340	2183140	the lid came up, and Oscar came out.
2183140	2185340	He said something, and then he went back down.
2185340	2187380	But that animation is super simplistic.
2187380	2191820	It was just a sequence of one, two, three, or so images displaying,
2191820	2194580	and then going back down to create the illusion of animation.
2194580	2196940	Meanwhile, every time Oscar said something,
2196940	2199980	that was keeping track of her score in what's called a variable.
2199980	2201900	In algebra, you have x, and y, and z.
2201900	2203620	But in programming, you have the same idea,
2203620	2206220	but it's generally more useful to call them more descriptively,
2206220	2207100	like your score.
2207100	2209780	And so there's probably a variable in this game called score
2209780	2212220	that was just keeping track of how many times Aviva
2212220	2213900	had dropped something into the trash.
2213900	2217740	Meanwhile, the trash itself, and the shoe, and the newspaper,
2217740	2219860	and even more things happened eventually,
2219860	2222820	were falling from the sky at random locations.
2222820	2225820	And that's because I programmed the game to sort of start the trash here
2225820	2229700	or over here, just to make it a little more challenging as the game picked up.
2229700	2232180	And in fact, things start falling faster and faster over time,
2232180	2235180	like a typical game, getting more and more difficult.
2235180	2237380	So how do we get to something like that?
2237380	2240620	Well, let me go ahead and open up Scratch itself and introduce
2240620	2241780	the environment.
2241780	2244860	So in Scratch, you essentially have three general areas.
2244860	2247340	And it's web-based, and so you can do this on any computer.
2247340	2250180	And in the left-hand side here, you have those puzzle pieces,
2250180	2251580	to which I referred earlier.
2251580	2256780	These puzzle pieces are all mapping to functions, or loops, or conditions,
2256780	2258660	or variables, things that we saw before.
2258660	2261860	And I'm going to be able to drag and drop them into the middle in order
2261860	2264980	to interconnect them and write my program, which we'll do in just a moment.
2264980	2268340	Meanwhile, Scratch lives in this stage, this world, where
2268340	2269900	you can move up, down, left, right.
2269900	2271420	You can change what Scratch looks like.
2271420	2273980	You can add other characters, otherwise known as sprites,
2273980	2275860	in order to have multiple things happening at once.
2275860	2277260	And of course, you can full screen it.
2277260	2281100	And so the Oscar time game a moment ago was actually a whole bunch of sprites.
2281100	2283020	Oscar's trash can was one.
2283020	2285340	Each piece of trash was another sprite.
2285340	2287660	The newspaper was a sprite, and so forth.
2287660	2291820	So each of them were separate programs running in parallel at the same time.
2291820	2293700	So let's actually make him do something.
2293700	2297540	It turns out that if I jump down to, say, events,
2297540	2300540	I'm going to see one of the most powerful blocks from the gecko, which
2300540	2302820	is this, when green flag clicked.
2302820	2304700	That's indeed how I started the game with Aviva
2304700	2307900	by clicking just above Scratch's world, this green flag.
2307900	2310820	And if I wanted to stop it as I did, you can click the red stop sign
2310820	2311780	to say stop.
2311780	2316140	Meanwhile, the green flag I can constantly listen for.
2316140	2319260	By dragging and dropping this puzzle piece, when the green flag is clicked,
2319260	2320380	what do I want to do?
2320380	2321980	Well, let me go up to looks.
2321980	2323740	And these are just different categories.
2323740	2325900	And we can scroll through all the different colorful blocks,
2325900	2327900	but they pretty much just do what they say.
2327900	2331740	I'm going to go under looks, where I know there to be a block that's called say.
2331740	2334660	And I'm going to go ahead and type the most canonical computer science
2334660	2336740	thing, hello world, in this box.
2336740	2340500	So notice that functions themselves can actually take inputs.
2340500	2343740	And the input to this function, say, is going to be hello world.
2343740	2348380	If I now go over to the green flag and click it, hello world.
2348380	2351660	All right, so not all that difficult, not all that interesting,
2351660	2353100	but it actually got the job done.
2353100	2355460	And so my program is indeed just this.
2355460	2357700	Well, how might I make this a little more interesting?
2357700	2360380	Just saying hello world all the time isn't all that compelling.
2360380	2361380	Well, you know what?
2361380	2361880	Let me think.
2361880	2363220	Let me undo this.
2363220	2365060	Let me scroll down to sensing.
2365060	2369140	And notice this, functions can also take input from the human.
2369140	2372900	And functions can hand you back a value, a so-called return value.
2372900	2376340	So this block here, ask something by default that says, what's your name
2376340	2380020	and weight, is another function built into Scratch that allows me to do this.
2380020	2382100	I'm going to go ahead and drag this here.
2382100	2384500	And I'm going to let it say, what's your name?
2384500	2387500	Notice now that below this block is a special block,
2387500	2389340	that whatever it is, the block returns.
2389340	2392220	So answer is whatever the human is going to type in.
2392220	2396700	And if I want to now save what the human typed in, let me go again to looks,
2396700	2399780	go to say, and notice that these blocks are kind of magnetic.
2399780	2400900	They want to snap together.
2400900	2402740	So I'm going to go ahead and let go there.
2402740	2405900	And if I go back to sensing and grab answer,
2405900	2408420	notice that even though it's not quite the same size,
2408420	2409860	it's going to grow to fill.
2409860	2413260	And now I can have my program ask the user what his or her name is,
2413260	2415580	and then say whatever that answer is.
2415580	2418900	So let me go ahead and stop and click Play again.
2418900	2420300	Notice it's asking me for my name.
2420300	2422900	So let me go ahead and type in David, enter.
2422900	2426460	OK, it's a little weird way to greet someone, David.
2426460	2429180	So it'd be nice to clean that up a bit.
2429180	2430020	So you know what?
2430020	2432060	I know this only from having poked around before.
2432060	2433900	Not all of this is obvious at first glance,
2433900	2437860	but it turns out that under operators, the category, there's this thing here.
2437860	2440900	Join, apple, and banana, which are just default values.
2440900	2442140	You can change them.
2442140	2443380	Because what do I want to do?
2443380	2445700	I want to say hello, David, or whoever.
2445700	2450380	So I kind of want to say hello, comma, and then David, whatever the human typed in.
2450380	2451700	And that's what join lets you do.
2451700	2455100	It lets you join or concatenate two phrases that
2455100	2456820	are somehow provided by you or the user.
2456820	2459380	So let me pull this out, the answer.
2459380	2461340	Let me go ahead and grab the join block.
2461340	2463340	Notice it too is going to grow to fill.
2463340	2469700	Let me go ahead and say hello, comma, space, and now drag answer into there.
2469700	2475060	And notice this nesting, just like in math, this nesting of functions.
2475060	2479420	I can first join, hello, and answer by taking those two things as input,
2479420	2481420	and then pass them to say as another input,
2481420	2483100	because these things are layered on top.
2483100	2487900	And so now if I stop this and play it again and say, David, hello, David,
2487900	2491500	now we have the makings of a more interesting interactive program that
2491500	2492940	isn't just hard coded.
2492940	2498940	Of course, it's not nearly as audible as something like Oscar time a moment ago.
2498940	2499940	So let me go ahead and do this.
2499940	2504300	Let me start over all together and treat scratch like the cat he is,
2504300	2506220	and just start the sound called meow.
2506220	2508780	So it turns out there's a category of blocks called sound.
2508780	2511380	And within sound, there's play some defaults down.
2511380	2514660	So start sound meow, and now things will get a little cuter.
2517660	2523860	And now if I, again, and I can kind of simulate a cat by standing here for a while
2523860	2525540	and keep clicking this button.
2525540	2528420	But let me make a meow a few times, because that's more realistic.
2528420	2530220	So let me grab a second one and a third one
2530220	2532180	and you can get this infinite supply of blocks.
2532180	2532860	Let me hit play.
2537140	2538100	Seems like a bug.
2538100	2539020	Let's try again, play.
2541620	2544140	This is my first bug or mistake.
2544140	2545340	This looks correct.
2545340	2549300	It says when green flag clicked, start sound meow, start sound meow,
2549300	2550580	start sound meow.
2550580	2554060	Why am I only hearing one meow?
2554060	2559020	Yeah, they're kind of at the same time or so close to the same time
2559020	2562140	that the sounds are kind of tripping over each other and just overlapping.
2562140	2564300	The block literally says start sound meow.
2564300	2565700	But computers are really fast.
2565700	2568340	If you've heard of the expression like gigahertz, that's a unit of measure.
2568420	2571180	And if your computer has a 1 gigahertz CPU,
2571180	2574820	central processing unit or brain, that means it can literally do like a billion
2574820	2576340	things per second.
2576340	2579860	It can certainly start three sounds super fast.
2579860	2582860	And if they're effectively all happening one after the other
2582860	2585940	before the sound even finishes, you're just hearing one net effect.
2585940	2587220	So how can we fix this?
2587220	2590540	Well, I can actually go and fix this with this block here.
2590540	2592860	Play sound meow until done.
2592860	2594500	Play sound meow until done.
2594500	2596220	Play sound meow until done.
2596220	2601660	And now, OK, it's a little unhappy, this particular cap.
2601660	2603300	But at least it's now more correct.
2603300	2607620	And as it turns out, if I go to Control, there's this block here.
2607620	2609420	Wait some number of seconds.
2609420	2611580	I can go ahead and insert this here.
2611580	2613220	Let me do another one here.
2613220	2614180	And now hit Play.
2614180	2616180	Play sound meow.
2616180	2618660	Play sound meow.
2618660	2620820	Yeah, it's not bad.
2620820	2623860	It now sounds a little more realistic.
2623860	2627820	But honestly, if I keep doing this, you can actually right-click or control-click
2627820	2631660	on blocks, duplicate them, and just copy and paste even more if you want them.
2631660	2636020	So if I were to do this, now it's just going to go six times.
2636020	2638180	And then I could copy it again and go 12 times.
2638180	2639660	But there's got to be a better way.
2639660	2641140	This is now bad programming.
2641140	2644180	This is bad design because I'm literally copying and pasting,
2644180	2645300	albeit graphically.
2645300	2650020	But we've already seen a building block with which we can design this program better.
2650020	2651860	It's correct, but it's not well designed.
2651860	2656420	What would the building block be that I need to make this a little cleaner?
2656420	2660420	Oh, OK, a for loop don't quite exist in Scratch, but a loop fundamentally.
2660420	2661940	Do something cyclically.
2661940	2664540	And indeed, if I go under Control and start poking around,
2664540	2667540	you'll notice that there's a few blocks that might apply here.
2667540	2670620	There's the repeat block, some number of times, or the forever block,
2670620	2673060	both of which sound like loops or cycles.
2673060	2674860	So sure enough, let me go ahead here.
2674860	2677780	And I can throw away blocks by just dragging them to the left.
2677780	2683660	Let me pull this out for a second, and then just say forever, play this sound,
2683660	2685140	and then wait one second.
2685140	2687700	So now my program looks like this.
2687700	2696980	Yeah, we'll never know if it's technically correct
2696980	2699020	because it's just going to go, we think, forever.
2699020	2700820	But it looks like this is correct.
2700820	2702220	And it was a lot less code.
2702220	2705940	And it's a lot easier to maintain because if I want him to kind of get sleepy,
2705940	2714380	I can then maybe say two seconds instead, and we can adjust this on the fly as we go.
2714380	2716980	But let's start to combine some of these ideas now
2716980	2720140	and change what it is the ultimate effect is.
2720140	2722980	Let me go ahead and open an example I made in advance.
2722980	2724940	This one's called count zero.
2724940	2728060	And we'll put this on the website later so that you can play with it if you like.
2728060	2729900	And this is kind of the opposite of counting sheep.
2729900	2732820	Rather than me or this person sleeping counting sheep,
2732820	2735020	this sheep will count itself.
2735020	2737740	So let me go ahead and just play.
2737740	2742340	And adorably, he seems to just be counting 1, 2, 3.
2742340	2743460	But why is that?
2743460	2745060	He's just going to count forever.
2745060	2747940	But let's look at the blocks with which he's counting forever.
2747940	2751220	When green flag clicked, set counter, turns out this orange block
2751220	2752420	is what we call the variable.
2752420	2754220	So an algebra would be like x or y or z.
2754220	2755300	Those are not descriptive.
2755300	2759100	I called this one counter instead, but I could have called it x or y or z.
2759100	2763740	And then I forever say the counter for one second, then wait one second,
2763740	2767060	and then change the counter by one, which technically means just increment it.
2767060	2768060	Add one to it.
2768060	2770980	And the sheep is just going to, therefore, count up and up and up.
2770980	2772580	Now, this is a little tedious, but that's
2772580	2775660	kind of the point of counting sheep, of course, to fall asleep.
2775660	2779500	But what if this sheep actually kind of liked counting a little faster?
2779500	2782180	Well, let me go into operators here.
2782180	2785500	Multiplication sounds like it could get us places quicker.
2785500	2787900	And let me go ahead and go to variables.
2787900	2790620	And instead of changing the counter by one,
2790620	2792940	let me go ahead and just keep setting it to something else.
2792980	2794180	So let me drag and drop this.
2794180	2797900	Set the counter equal to something times something.
2797900	2803140	Specifically, the counter times 2.
2803140	2805460	Thereby, doubling, doubling, doubling, doubling.
2805460	2807820	That would seem to grow, so to speak, a lot faster.
2807820	2810060	Let's see.
2810060	2815060	1, 2, 4, 8.
2815060	2817420	So he's counting faster, but it's still kind of tedious.
2817420	2819300	What if we instead do this?
2819300	2820900	Let's stop waiting.
2820900	2825020	And let's go ahead and, with the looks, not say counter for one second,
2825020	2827700	but let's just quickly say counter.
2827700	2829100	So I'm going to say the counter.
2829100	2829940	Whoops.
2829940	2831620	I'm going to say the counter.
2831620	2834100	And then I'm going to set it to itself times 2.
2834100	2835180	So here's where we're at.
2835180	2837620	Initialize or set the counter to 1 initially.
2837620	2839620	Say it, then double it.
2839620	2840580	Then double it.
2840580	2842500	Then double it, saying it along the way.
2842500	2844340	So here we go.
2844340	2847260	That's impressive.
2847260	2850580	So now the sheep has counted up to 10 to the 60th.
2850620	2854940	So far, 10 to the 100th.
2854940	2860020	OK, now it doesn't even fit in the speech bubble, but he's still going.
2860020	2862060	How high can he go?
2862060	2866620	What's the biggest number you can count to in a computer?
2866620	2870100	Anyone want to guess?
2870100	2872060	Could be here a while.
2872060	2874780	10 to the 270th now.
2874780	2875740	How high can you count?
2875740	2880380	Or rather, OK, so we gave up.
2880380	2881620	And just call to infinity.
2881620	2884020	So it turns out infinity does have a precise value.
2884020	2886340	10 times to the 250th or so.
2886340	2887820	But what happens here?
2887820	2890140	Well, because computers at the end of the day
2890140	2893220	are just storing information digitally, but that information digitally
2893220	2895460	has to be physically stored using electricity,
2895460	2897620	using these lower level switches called transistors.
2897620	2900860	At the end of the day, my phone, my laptop, whatever device in question,
2900860	2903180	only has a finite amount of those things.
2903180	2904940	I only have a finite number of fingers.
2904940	2907460	Using unary, my old school hash mark approach,
2907460	2909020	I can count to five on this hand.
2909060	2913060	Using binary, I claimed I could count to 31 on this hand.
2913060	2914300	But it's still finite.
2914300	2917940	I cannot count to infinity on this hand because I only have five fingers.
2917940	2920940	Similarly, does a computer only have so many transistors
2920940	2923100	or so many bytes or bits of memory?
2923100	2925940	And at some point, the programmer has to think about,
2925940	2929020	what is he or she going to do when the user wants to count so high
2929020	2931660	that you can't physically fit it anymore?
2931660	2934980	You have to give up like this and say something semi-accurately.
2934980	2938540	Or you have to handle the issue in some other way.
2938540	2941860	And we'll see when we get to see that how you handle this problem is not
2941860	2943260	necessarily straightforward.
2943260	2946540	And indeed, a lot of software out there does not handle this problem.
2946540	2949460	And odds are, all of us have programs that if you type big enough words
2949460	2953620	or big enough numbers into them, they might very well break or crash or freeze
2953620	2956420	because the humans, unlike MIT, did not anticipate
2956420	2958580	that that might actually happen and handle it.
2958580	2959860	Well, let me go ahead and do this.
2959860	2963420	Let me open up this program and see if we can't read the code now.
2963420	2965980	This is called pet zero.
2965980	2968940	And this is a program that simulates petting.
2968940	2973900	So if I click play and don't touch the keyboard, nothing seems to be happening.
2973900	2979900	But if I now move my cursor over to the cat, oh, it's kind of cute.
2979900	2983420	Right now, it's more only meowing on demand when you pet the cat.
2983420	2984100	Why?
2984100	2986260	Well, notice I've added some other building blocks.
2986260	2989060	We haven't used this one before, but it intuitively probably
2989060	2991660	makes pretty clear sense when the green flag is clicked,
2991660	2993300	forever do the following.
2993300	2996740	If the cat is touching the mouse pointer, this thing in blue
2996740	2998660	is what we called earlier a Boolean expression.
2998660	3001820	It has a yes, no, a true, false, a one, zero answer.
3001820	3004740	And touching mouse pointer is one of the options in the little drop down here
3004740	3005780	if you tinker with it.
3005780	3008900	So if the cat is touching the mouse pointer, then and only then,
3008900	3011060	play, sound, meow, until done.
3011060	3014820	So we've combined now functions with loops with a condition.
3014820	3016940	But why the loop?
3016940	3019980	The cat's only meowing once when I pet him.
3019980	3022260	Why am I doing anything forever here?
3029260	3033540	Yeah, I might want to pet it again, so I want the program to anticipate that.
3033540	3037580	And honestly, if I omitted this forever block and my program instead
3037580	3041500	looked just like this, so let me get rid of that and this,
3041500	3046380	and then I clicked play, and now I hover over him,
3046380	3048300	why is it not working even once?
3050980	3051980	Say again?
3056980	3059980	Yeah, so I mean, at this point, if I can summarize,
3059980	3063660	it's that happened, the computer's so damn fast that this already happened
3063660	3066660	by the time I move my cursor over to the cat.
3066660	3070260	And at the moment I clicked play, I was not touching the cat.
3070260	3072700	Those blocks executed, so to speak, top to bottom.
3072700	3074060	That's it for the program.
3074060	3077020	So by the time I move the cursor over to the cat, the program is over.
3077020	3077740	It's not listening.
3077740	3081460	And so forever, this way, I can actually listen in perpetuity
3081460	3083340	for something to actually happen.
3083340	3086060	What if I want to do something not just if something is true,
3086060	3088380	but handle two cases, if or else?
3088380	3091180	Well, let me go ahead and open up pet one.
3091180	3092980	And this is another example.
3092980	3097140	And could someone perhaps describe, after reading this code,
3097140	3099300	what this program is going to do instead?
3102380	3102880	Yeah?
3108220	3108700	Exactly.
3108700	3110060	And let me summarize more verbally.
3110060	3114060	So if this time you're touching the cat, it's going to roar instead.
3114060	3116660	Else, it's just going to meow sweetly.
3116660	3120220	So this time it is meowing perpetually once every second.
3120220	3123500	But if you touch this particular cat, he doesn't like it.
3123500	3135740	So play meow, meow, and now don't touch the cat.
3136740	3138260	Don't touch the cat.
3138260	3140780	So now we might interact in two different ways
3140780	3143740	by having two different roads that you can go down.
3143740	3146180	Well, let's actually make something a little more interactive.
3146180	3148220	Let me go ahead and open another example.
3148220	3150500	This one called bounce zero, because now we
3150500	3154300	can start to see some design elements from what Oscar time was.
3154300	3156980	Like this now is getting a little interesting.
3156980	3158900	What is actually going on here?
3158900	3161100	So let me zoom in on the blocks here.
3161100	3163460	This block is just saying forever.
3163460	3165700	Move 10 steps, which is another block we haven't
3165700	3167580	seen, but 10 steps is like 10 pixels.
3167580	3169580	So move 10 pixels on the screen.
3169580	3172900	But if you're touching the edge, then turn around 180 degrees.
3172900	3174860	And you can see exactly that happening.
3174860	3178060	Scratch is turning around 180 degrees, and this rotation style
3178060	3178980	just means double back.
3178980	3181460	Don't like loop around 180 degrees.
3181460	3185740	So that's kind of cool, but this is not how humans or cats walk.
3185740	3188740	Like what is obviously unnatural about this?
3191220	3192900	Yeah, I mean, I can't even simulate it, right?
3192900	3197140	Like his feet are in static position, yet sliding back and forth on the screen.
3197140	3198820	And yet that is not what walking is.
3198820	3201060	Like walking, presumably, has some kind of movement.
3201060	3201660	And what?
3201660	3204820	Well, we could just kind of simulate it like, OK, I could just walk.
3204820	3209060	Walking, and you can imagine taking really quick photographs of my legs
3209060	3211500	or the cat's leg moving, and then just deciding,
3211500	3214020	this photo will be representative of one step,
3214020	3216140	this photo will be representative of another.
3216140	3219100	And with just two of those steps, I'd wager
3219100	3221940	we could actually do a pretty good job of simulating
3221980	3223180	what walking looks like.
3223180	3226860	In fact, if I go back to where we began, this picture of Scratch,
3226860	3230180	what if I just move his legs ever so slightly?
3230180	3232820	Then go back, then go forward.
3232820	3235820	And even just in my PDF, I can simulate animation
3235820	3238780	by hitting up arrow, down arrow, up arrow, down arrow,
3238780	3241940	because it kind of looks like he's walking now when really your human eyes
3241940	3244820	are just seeing two different pictures again and again.
3244820	3245940	So how can I do this?
3245940	3249020	Well, if I go back to Scratch, he's still walking.
3249020	3255300	Let me go ahead and open up Bounce 1, the second version of this.
3255300	3259300	And now do this, OK.
3259300	3260500	So how did I add this?
3260500	3262580	There's a little purple block that we haven't seen yet.
3262580	3264380	But if you poke around the categories, you'll
3264380	3267460	see other blocks like this, next costume that just keeps changing,
3267460	3268900	the costume that he's wearing.
3268900	3271580	It turns out Scratch exists as a picture.
3271580	3273380	And his default picture is him not moving.
3273380	3276420	But if I go up here to top left and click Costumes,
3276420	3278900	you can actually see that here's his one costume.
3278900	3280620	Here's his second costume.
3280620	3283300	And so that purple block that says next costume,
3283300	3287180	because it's in the forever loop, it just keeps doing next, next, next,
3287180	3289900	next, next, just showing one costume or the other,
3289900	3292860	they're clearly mimicking walking.
3292860	3294300	Now, this is not very natural.
3294300	3297900	Why don't we slow him down to, say, five steps at a time
3297900	3299700	and have him go again?
3299700	3301340	Now, this is still going pretty fast.
3301340	3305660	Let me go ahead and say we could have control.
3305660	3311740	We could have him wait a second after moving very dramatically.
3311740	3313220	Weeks should probably speed this up.
3313220	3316220	So let's wait 1 tenth of a second, 0.1.
3316220	3319420	Or maybe that's even, let's do 0.01, 1 hundredth of a second.
3319420	3321100	Now it's getting a little more realistic.
3321100	3322500	But this is what animation is.
3322500	3326100	If you've ever watched a cartoon or a movie based on pictures like this,
3326100	3329220	you're just tinkering with some of these parameters, these inputs,
3329220	3331420	in order to produce this output by understanding
3331420	3334140	what the fundamental representation of these things
3334140	3337540	is, which in this case are just pictures, again and again and again,
3337540	3339380	in order to create that animation.
3339380	3341060	But what about interactivity?
3341060	3342140	Let me do this one myself.
3342140	3346620	Let me go ahead and get rid of this, go back to events and say,
3346620	3350900	when green flag clicked, then let me go ahead and grab a forever block
3350900	3352900	so that this keeps going again and again.
3352900	3354820	And then let me go ahead to go to motion.
3354820	3357900	It turns out that under motion, there's this block we haven't seen,
3357900	3360020	point towards the mouse pointer.
3360020	3362300	And let me go ahead and pull this in here.
3362300	3367140	And then let me have it move just like one step at a time instead of 10.
3367140	3370220	What is this going to do?
3370220	3373380	What's this program do?
3373380	3375060	Yeah, say again?
3375060	3375940	Follow the mouse.
3375940	3381220	Yeah, this is kind of like a way of taking your cat for a walk.
3381220	3385620	Perhaps not quite the animal we intended, but he'll follow the cursor.
3385620	3387820	And I can actually speed this up a little bit.
3387820	3389700	So let's have him move 10 steps.
3389700	3392620	OK, now there we go.
3392620	3394180	So now he's moving up and down.
3394180	3395540	And so now it's interactive.
3395540	3399580	So you might recall that when we were playing Oscar time earlier and picking up
3399580	3401660	the, OK, don't do that.
3401660	3403540	See, that's a bug.
3403540	3404380	He's just confused.
3404380	3407620	He's constantly moving toward it, but you're already, OK, so we're going to stop.
3407620	3410900	OK, so now he's following, but that's how we might now
3410900	3413980	create, for instance, the ability to move those pieces of trash around
3413980	3416740	and have them follow the mouse cursor if you think back to Oscar time.
3416740	3418580	Every time you picked up a piece of trash,
3418580	3422020	you'd follow the cursor because there was a forever loop and a block like this
3422020	3423860	pointing toward the mouse pointer.
3423860	3428220	Well, now let's integrate multiple ideas and actually have multiple scripts.
3428220	3432900	I proposed earlier that programs can actually have multiple threads.
3432900	3436420	A thread is just a fancy way of saying, in our context, multiple scripts.
3436420	3441820	Multiple scripts in one program that are happening essentially in parallel.
3441820	3445260	Computer can effectively do multiple things at a time thanks to threading,
3445260	3446740	and more on that down the road.
3446740	3450780	So these are more involved, but let's understand first what this program does.
3450780	3453700	Let me go ahead and hit Play, and this one tends to be a little loud.
3458700	3463420	So the C line is just barking endlessly, annoyingly.
3463420	3469260	So by reading the code, how can I stop him from barking?
3469260	3470620	Hit the spacebar.
3470620	3473700	All right, so hit the spacebar.
3473700	3476340	OK, I could just stop the program, obviously,
3476340	3478420	but this program is still running technically.
3478420	3479900	But why did that work?
3479900	3482900	Well, notice this on the left-hand side is the first script.
3482900	3487180	When the green flag is clicked, set this variable that I called muted to false.
3487180	3490140	Could have called it x or y or z or counter, but none of those really makes sense.
3490140	3491140	So I called it muted.
3491140	3495180	And I set it equal to false, which is, again, a Boolean value, true or false.
3495180	3496780	Just mean yes or no.
3496780	3500420	Forever, if the key space is pressed, then do this.
3500420	3504820	If muted is currently false, then change muted to true.
3504820	3507180	Else, change muted to false.
3507180	3510100	So if muted is false, change it to true.
3510100	3512460	If muted is true, change it to false.
3512460	3516420	Any time the human hits the spacebar, update that variable.
3516420	3520100	Now, if we look at the other script, which is also driving the C line,
3520100	3521180	what is he doing?
3521180	3525340	Forever, if muted is false, so if he's not muted.
3525340	3528660	If muted is false means not muted, start the sound C line,
3528660	3532780	and then think, hi, hi, hi, for two seconds, and then wait for one more second.
3532780	3534500	And then just repeat, repeat, repeat.
3534500	3537340	But if I change with the spacebar, muted to true,
3537340	3540820	he's going to say, if muted equals false, that's not so.
3540820	3542420	I'm not going to play a sound this time.
3542420	3545980	And so now we have the ability to integrate multiple scripts together
3545980	3548980	in order to achieve a more interactive result.
3548980	3550300	And what about this?
3550300	3556180	Back in when I was a kid, might have played over in the summer's like Marco Polo.
3556180	3559100	Super simple game where we played it in the pool for some reason,
3559100	3561460	where one person in the pool very safely is blindfolded.
3561500	3563180	And then he or she yells Marco.
3563180	3566220	And then everyone around him or her is supposed to yell Polo.
3566220	3568100	And then the person who's blindfolded is supposed
3568100	3570180	to go chase the other kids in the pool and tag them,
3570180	3571300	and then they become it.
3571300	3573660	But in other words, it's this signaling mechanism.
3573660	3576380	Someone yells Marco, and everyone else responds
3576380	3578820	to that broadcast of the word Marco.
3578820	3581540	Well, it turns out we can simulate this with these two puppets.
3581540	3584500	This guy here, notice that I've highlighted the orange puppet,
3584500	3586860	because there's a second blue puppet there, separate sprites.
3586860	3589900	And these are just photographs we uploaded to the game.
3589900	3592980	Forever, if the key space is pressed.
3592980	3596100	So if the space bar is pressed, say Marco for two seconds,
3596100	3597940	and then broadcast an event.
3597940	3603020	Meanwhile, the blue puppet here has a super simple block,
3603020	3605340	but it's fundamentally different from the ones we've seen.
3605340	3608180	He's not starting when the green flag is clicked.
3608180	3611340	He is starting only when he receives an event.
3611340	3614260	So it turns out that sprites and scratch can't hear or see what
3614260	3616300	the other one is saying in those speech bubbles.
3616300	3619880	You have to use a fancier technique, which is this special block called broadcast.
3619920	3624060	Which is like passing a note digitally from one sprite to another
3624060	3626880	that the other one can read or receive, so to speak.
3626880	3629120	So only when he receives this event, so to speak,
3629120	3631480	does he say polo for two seconds.
3631480	3635200	And again, the orange puppet sends that secret message
3635200	3638000	just using this other puzzle piece, broadcast an event,
3638000	3641080	like passing a note that the human doesn't actually see.
3641080	3644760	So if I now hit the green flag and hit the space bar,
3644760	3649040	orange yells Marco, blue guy yells polo in response.
3649040	3650920	But those aren't timed together.
3650920	3654320	Rather, the blue guy is hearing what the orange one has said,
3654320	3659280	thereby allowing multiple sprites to actually intercommunicate.
3659280	3660440	So how did we get here?
3660440	3663720	Well, recall that we had all of these building blocks a moment ago.
3663720	3665920	First, we started out with just functions and conditions
3665920	3667360	and Boolean expressions and loops.
3667360	3670680	We've now added to that the ability to store information and variables
3670680	3672560	and threads to do multiple things at once.
3672560	3674640	And then if you do have multiple things happening,
3674640	3677840	events where they can intercommunicate somehow,
3677840	3679200	yet another building block.
3679200	3682280	So if we now take a step back and consider
3682280	3685920	how we can make functions of our own, we
3685920	3688560	have the final piece of the puzzle, so to speak.
3688560	3689760	Let me go ahead and do this.
3689760	3694160	Let me go ahead and create a simple program with when green flag clicked
3694160	3696240	that simply simulates coughing for a cat.
3696240	3701440	So this cat is going to say, not hello, but cough for one second.
3701440	3705200	And then he's going to go ahead and wait for one second.
3705200	3708880	And then I'm going to go ahead and copy paste as I did before.
3708880	3711120	This is one of those do as I say, not as I do,
3711120	3714800	to implement this program here where he coughs three times.
3714800	3717720	We already know, though, from earlier, that this is not good design.
3717720	3720240	Why?
3720240	3721200	You're repeating yourself.
3721200	3722760	Don't repeat yourself.
3722760	3724240	DRY is an acronym, actually.
3724240	3728040	Don't repeat yourself because you're doing three times as many times,
3728040	3730000	something that you only really need to do once.
3730000	3733240	The solution before, of course, was just use a loop of some sort.
3733240	3734880	So let me actually take that out.
3734880	3738760	Let me use a repeat block, change 10 to 3,
3738760	3740480	and then just use two of these blocks.
3740480	3742920	And notice already, the program is so much more compact.
3742920	3747680	And now, if I want to change the 3 to a 30 or to a 10 or any number,
3747680	3749200	I just change one simple value.
3749200	3752480	I don't have to rewrite or copy paste or delete things.
3752480	3754480	I can update the program much more readily.
3754480	3760000	And now, the same thing is going to happen with just cough, cough, cough.
3760000	3764160	But it turns out that it would be nice to henceforth abstract away from this.
3764160	3767600	I just want any program I write to know how to cough.
3767600	3771080	And coughing is really just saying something, perhaps some number of times.
3771080	3773760	But it turns out we can abstract this away in code.
3773760	3776000	Let me go down to my blocks here.
3776000	3778400	And this allows me to click this button, make a block.
3778400	3780080	It allows me to make my own function.
3780080	3784520	I get this dialog window here, and I'm just going to call this block cough.
3784520	3786400	I'm going to go ahead and click OK.
3786400	3790400	And now, I have this new pink block that itself can have blocks underneath it.
3790400	3791480	And you know what I'm going to do?
3791480	3792960	I'm going to go ahead and do this.
3792960	3797160	I'm going to go ahead and say cough under there.
3797160	3800880	And now, notice on the left, I now have access to this new pink piece.
3800880	3802720	I can now put this in here.
3802720	3807080	So now, notice, even though, yes, this is how coughing is implemented
3807080	3810840	on the left-hand side here, next time when I write a program,
3810840	3812720	I just want to call cough.
3812720	3815240	And I don't care about those lower-level implementation details.
3815240	3816960	I don't care about the binary or any of that.
3816960	3818880	I just want this to be an abstraction.
3818880	3820800	But I could do better than this.
3820800	3822940	Wouldn't it be nice if instead of just repeating
3822940	3826300	cough three times, what if I made that a feature of cough?
3826300	3827300	So let me do this.
3827300	3831620	I can go ahead and right-click on this pink piece, and I can edit it.
3831620	3833620	That brings up that same window from before.
3833620	3835700	And notice this, add an input.
3835700	3838860	So when I make a custom block, I can actually make pretty fancy blocks
3838860	3842220	just like the ones MIT gives us with the software.
3842220	3844340	And now, I can type in something like n.
3844340	3847660	And if I add a label just to make it more descriptive, I can just say times.
3847660	3852420	So now, I've made a special custom puzzle piece that says cough some number of times
3852420	3856900	where n for number is just the go-to variable that programmers tend to use.
3856900	3864780	So now, I can actually move this repeat block into cough itself.
3864780	3866940	But rather than hard code three, notice this.
3866940	3870860	I can steal that variable and now say cough this many times
3870860	3875260	by repeating, saying, this, again, and again, and again.
3875260	3880620	And now, when I cough in my actual program, I just type in three here.
3880620	3882900	So I have this beautiful abstraction now, so to speak.
3882900	3886100	Cough this many times, and I, and no one else in the world,
3886100	3888540	never again needs to care about what it means to cough,
3888540	3890860	because we've already implemented that before.
3890860	3893460	And so just as MIT has given us so much functionality
3893460	3895180	that we ourselves don't have to think about,
3895180	3898060	so can I now make functionality that I don't have to think about?
3898060	3901060	And as we progress to higher level languages like C and JavaScript
3901060	3902940	and Python, we're going to continue this process,
3902940	3907060	sometimes solving problems ourselves by making our own custom puzzle pieces,
3907060	3909260	but very often using things called libraries,
3909300	3911940	code that other humans wrote before us that's just
3911940	3917660	useful to get the job done just as Scratch has done here in part for us.
3917660	3921220	Let me go ahead, then, and bring all of this together
3921220	3924300	by opening this other example here.
3924300	3928020	Let me go ahead and open up this one, which isn't something we've seen,
3928020	3931940	but it's kind of an interactive game like this, made by a former student.
3932540	3933700	Should we have an apple?
3933700	3934180	Yes.
3936700	3937540	Little animation.
3941700	3943700	OK, that didn't end well.
3943700	3949540	Let's try again, play again, and notice the say block is happening.
3949540	3951500	There's some kind of ask block.
3951500	3954060	The student was checking if the human typed in yes or no.
3954060	3956140	Let's type no this time, no apple.
3956140	3957300	Ooh, cupcake.
3957300	3958620	OK, yes.
3958620	3959100	Enter.
3959980	3962860	OK, don't do that.
3962860	3963860	One more life.
3963860	3964340	Here we go.
3966860	3980820	OK, no apple, no cupcake, a little variable, counting it.
3980820	3993220	OK, so I won the game.
3993220	3998420	In our final moments here, let me go ahead and open one final example.
3998420	4002580	As you know, CS50 is offered not only at Harvard, but at Yale as well.
4002580	4005660	So it seems fitting to perhaps end on a note that pits one campus,
4005660	4008740	perhaps, against the other by way of another game that a former student
4008740	4010700	wrote called Ivy's Hardest Game.
4010700	4014260	But for this, I think we need one final volunteer who's coming up.
4014260	4015700	OK, first hand, right there.
4015700	4017540	Come on down.
4017540	4021180	So in Ivy's Hardest Game, it's a game played with the keyboard.
4021180	4023620	And even though it might look a little overwhelming at first glance,
4023620	4026460	just like Oscar Time did, and heck, just like the gingerbread animation
4026460	4029740	might, realize that if you decompose it in just your mind's eye,
4029740	4031820	thinking about what those individual building blocks are,
4031820	4033820	you can probably guess what the puzzle pieces are.
4033820	4034460	Hi, what's your name?
4034460	4035180	Hi, I'm Andrea.
4035180	4036860	Andrea, David, nice to meet you.
4036900	4040580	Here is Ivy's Hardest Game.
4040580	4043180	We'll pitch you against all of the IVs here.
4043180	4047340	And then right after this, we'll be adjourned for cupcakes in the trans set.
4047340	4049340	Ready?
4050340	4054340	You can't touch this.
4054340	4057340	You can't touch this.
4057340	4061340	You can't touch this.
4061340	4064340	You can't touch this.
4064340	4065340	Nice.
4065340	4067340	You can't touch this.
4067340	4073340	My, my, my, my music hit me so hard, makes me say, oh, my lord, thank you,
4073340	4077340	for blessing me when my too running, too high, that you're good,
4077340	4078340	that you know you're down.
4078340	4081340	I'm super dope all the way from the old town, and I know it's such,
4081340	4084340	and this is beautiful, you can't touch this.
4084340	4088340	I told you, homeboy, you can't touch this.
4088340	4092340	Yeah, that's how you live it, and you know you can't touch this.
4092340	4095340	Look at my eyes, man, you can't touch this.
4095340	4098340	You can't touch this.
4098340	4100340	Fresh through juice and bandage, you got it like that,
4100340	4103340	that you know you want to make it so blue, out of your suit,
4103340	4106340	and get it by your attention while it's rolling.
4106340	4109340	Hold on, pull a little bit and it'll go on like that.
4109340	4110340	Like that.
4110340	4112340	Pull a little bit and it'll go on like that, I know.
4112340	4116340	You can't touch this.
4116340	4120340	Come on, come on, come on, come on, come on.
4120340	4123340	While you standing there, man, you can't touch this.
4123340	4126340	Yo, Santa, be all smooth and subtle and you can't touch this.
4126340	4128340	Yeah, that's how you live it.
4128340	4131340	You know you're down, make knows, and that's what I'm getting down.
4131340	4133340	They know you're talking about the hammer,
4133340	4136140	We're talking about show that's hot and tight.
4136140	4139100	Singers are slow, so fast, so high for a tape.
4139100	4140940	Two hundred, what's gonna get you nice,
4140940	4142380	two hundred times.
4142380	4143740	Second to last level.
4143740	4145580	You might as well quit.
4145580	4148100	That's word, cause you know what,
4148100	4149420	you can't touch this.
4149420	4154940	Oh, oh, oh, oh, oh, oh, oh, oh, oh, oh, oh, oh, oh, oh, oh,
4154940	4160780	oh, oh, oh, oh, oh, oh, oh, oh, oh, oh, oh, oh, oh, oh, oh,
4160780	4169220	oh, oh, oh, oh, oh, oh, oh, oh, oh, oh, oh, oh, oh, oh,
4169220	4171420	stop and have time go with the flow
4171420	4172380	and stay in the game.
4172380	4173180	You do it.
4173180	4176060	Just put your hands in the air, bust your ears,
4176060	4177380	put your fingers in your head.
4177380	4180140	Sit for awhile, now dance with air,
4180140	4181740	thinking want to get in the mood.
4181740	4184260	Slide your arm just for a minute that's all.
4184260	4187180	The bump, bump, bump, bump, bump, bump, bump, bump, bump, bump,
4187180	4188600	you can't touch this.
4188600	4192600	Look, man, you can't test me.
4192600	4194600	You better get a high five.
4194600	4196600	Oh!
4196600	4198600	Please, man.
4198600	4200600	Break it down.
4200600	4202600	One, two, two. I swore.
4205600	4207600	No, it's okay.
4210600	4212600	One more left.
4212600	4214600	Stop. Have a time.
4219600	4222600	Alright, a round of applause for Andrea if we could.
4226600	4229600	That's it for CS50. See the website for details.
4229600	4231600	We'll see you for cake and like a transept.
4231600	4233600	Welcome aboard.
