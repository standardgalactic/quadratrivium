{"text": " All right, so this is CS50, and this is the day before our test, of course. But this is lecture 8, in which we're actually going to finally transition from C, this lower level language that we've been spending quite some time to. And the goal today isn't so much to focus on Python, per se, but honestly, to do what we hope will be one of the most empowering aspects of the class, which is to emphasize that this is not in a semester learning C. This has been a semester learning programming, a certain type of programming called procedural or imperative programming, but more on that in another higher level class, perhaps. But really, that this class is about ultimately teaching yourself to learn new languages. And indeed, what you'll find is that as we explore some of the features and the syntax of Python, odds are today it might look as cryptic as C did just a few weeks ago, but you'll find that once you start recognizing patterns as you have with C, it'll be all the more accessible and all the more useful when solving some problems. So unrelated, just earlier this week, I happened to be in Mountain View with some of the team. And you might recall from last lecture at Harvard, we offered this glimpse of one of the earliest racks of servers that Google itself had. Well, it turns out they changed buildings, but we happened to stumble upon the actual display. So pictured here is a photo from my own phone, which was actually really cool to see. So inside of this, you'll see all of the old hard drives they've used. We actually looked at some of the labels. And indeed, hard drives manufactured in 1999, which was when Google started getting some of its momentum. I mean, you can see the green circuit boards here, on which would be CPUs and other things potentially. So if you'd like to stroll down memory lane, feel free to read up on this on Wikipedia or even on the excerpts here. And then, strangely enough, at the conference, some of us were at, did we discover this, perhaps the biggest duck debugger made up of smaller duck debuggers, one of whom was our own. So that, too, was how we spent this past week. All right, so how are we going to spend this week and the weeks to come? So you'll recall that when we transitioned from scratch to C, we drew a couple of comparisons between syntax and features. And I thought it'd be useful to take that same approach here really to emphasize that most of the ideas we're going to explore today are themselves not new. It's just how you express them and how you write the syntax in the language, known as Python, that's indeed going to be different from scratch, from C. And now here we are with Python. So back in the day, in week 0, when you wanted to say something in scratch, you would literally use this purple puzzle piece, say hello. And we called that a function or a statement. It was some kind of verb action. And in C, of course, it looked a little something like this. Henceforth, starting today in Python, it's going to look like this. So before, after, before, after. So it's pretty easy to visually diff these two things. But what are just a couple of the differences that jump out at you immediately? See? Python. So there's no more backslash N, it would seem, in this context. So that's kind of a nice relief to not have to type anymore. What else seems to be different? No semicolon, thank god, right? Perhaps the stupidest source of frustration that you might have experienced by just omitting one of those and someone over here? Yeah, so printf is now just print, which is pretty reasonable unto itself. So these are terribly minor differences. But it's sort of testament to the kinds of mental adjustments you're going to have to start to make. Fortunately, thus far, we've seen that you can start leaving things off, which is actually a guiding principle of Python and that one of its goals is meant to be easier to write than some of its predecessors among them C. So in C, we might have implemented this Hello World program that actually ran when you click the green flag using code like that at the right. And this was, if those of you had no programming experience coming in to CS50, what probably looked like the proverbial grief to you just a few weeks ago. And we teased apart what those various lines meant. But in Python, guess what? If you want to write a program whose purpose in life is to say Hello, we'll just write def main print Hello World. So it's a little similar, structurally structured. And in fact, it does not lack for some of the more arcane syntax here, but we'll see soon what this actually means. But it's a little simpler than the one before. And let's tease this apart. So def here simply means define me a function. So whereas in C, we've historically seen that you specify the type that the function should return. We're not going to do that in Python anymore. Python still has data types. But we're not going to explicitly mention what data types we're using. Meanwhile, here is the name of the function. And main would be a convention. But it's not built into the language in the same way as it is in C, as we shall see. Meanwhile, this silly incantation is just a way of ensuring that the default function to be executed in a Python program is indeed going to be called main. But more on that when we actually start creating. But this is perhaps the most subtle but most important difference, at least early on. And it's even hard to see at this scale. But notice the colons, both here and here, that I've highlighted now in yellow, and these dots, which are not to be typed, but are just meant to draw your attention to the fact that I hit the space bar four times in those locations. So if you have ever sort of gotten some feedback from your TA or TF, that your style could be better, closer to five out of five, because of lack of indentation or pretty formatting. Python's actually going to help us out with this. So Python code will not run if you have not indented things properly. So gone are the curly braces that encapsulate related lines of code within some block of functionality, and instead they're replaced generally with this general structure. You have a colon, and then below that and indented are all of the lines that are somehow related to that earlier line of code. And the indentation must be consistent. So even though your own eye might not quite distinguish four spaces from three, the Python environment will. And so this will actually help implicitly enforce better style, perhaps, than might have been easily done from the get go. So then, of course, in Scratch, we had a forever block, which says, hello world forever. Much like in C, we could implement it like this. Now there's actually pretty clean mapping in Python. We already know we can get rid of the semicolon. We already know we can get rid of the curly braces. We're going to have to add in a colon, but it turns out we can get rid of a little more too. So what more is absent from this translation of hello world to Python? This one's more subtle. So we definitely got rid of the curly braces, relying now just on indentation. OK, so there's no parentheses around while. And so this, too, is actually meant to be a feature of Python. If you don't logically need parentheses to enforce order of operations, like in arithmetic or the like, then don't use them, because they're just an distraction. They're just more to type. And the code now is just visually cleaner and easier to read. There's a minor difference, too. True and false are going to be capitalized in Python, but that's a fairly incidental detail. But notice this kind of captures already the spirit of Python. It's not a huge leap to go from one to the other, but we've just kind of started to get rid of some of the clutter and the stuff that never really intellectually added much. And if anything was annoying, to have to remember early on. So true here is Arbolian. And now we have a finite number of iterations. We might want to say hello world exactly 50 times. In C, this was a crazy mess. If you wanted to do this, you'd have to initialize a variable with which to count up to, but not including 50 plus plusing along the way and so forth. In Python, it's going to be a little cleaner. And we'll come back to what this means exactly. But if you kind of read it from left to right, it kind of says what you mean, right? For i in the range of 50. So i is probably going to be a variable. And notice we're not mentioning its type. It's going to be implied by whatever the context is, which in this case has to do apparently with numbers per the 50. Range is actually going to be a data type unto itself. It's a little funky in that sense. It's called a class. But this essentially is a special feature of Python that unlike in C, where if you want to iterate over an array of values or 50 such values, you would literally have an array of 50 values. Range is kind of cool in that it kind of stands there. And every time you iterate through a loop, it hands you the next number, but just one at a time. Thereby using maybe as little as 150th the amount of memory, because it only has to keep one number around at a time. And there's a bit more overhead than that. It's not a perfect savings quite so. But this just says for i in range 50, and that's going to implicitly count from 0 up through 49. And meanwhile, what's below it is what's going to get printed this time. So meanwhile, here is one of our bigger scratch blocks early on. And it translates pretty literally to code in C. And you can perhaps guess, if you've never seen Python before today, what the Python code might now look like. If this here on the right is the C code, what are some of the features syntactically that we're about to throw away? Yeah? You can throw it at curly braces and the parentheses. Curly braces and parentheses are going to go away. What else might go away? The semicolons are going to go away? The backslash n inside of the print statements? Great. One more thing, I think? The if? So well, we don't strictly need the parentheses because it's not like I'm combining things logically like this or that or this and that. So it should suffice to get rid of those two. And there's a couple of other tweaks we're going to have to make here. But indeed, the code is going to be a lot tighter, so to speak. Now you're just going to say what you mean here. And there is one weird thing, and it's not a typo. What apparently are you ever going to have to start knowing now? L if or whatever. So L if is not a typo. It's indeed how you express the notion of else if, but otherwise everything is exactly the same. And notice the colons, frankly, ironically, whereas previously it might have been annoying to occasionally forget a semicolon. Now the colons might take on that role, but at least everything below them is meant to be indented. So here's a fundamental difference beyond the sort of silly syntactic differences of this in, say, other languages. The flow of work that we've been using thus far has been essentially this in C. You write source code in a file, generally ending in .c. You run a compiler, which is a quick check, is called Clang. So it's not technically make. Make is just this helpful build utility that automates the process of calling Clang. So Clang is, strictly speaking, the compiler. And Clang outputs zeros and ones, otherwise known as machine code. And your computer, Mac, PC, whatever, has a CPU, central processing unit inside, made by Intel or some other company. And that CPU is hardwired to understand certain patterns of bits, zeros and ones, otherwise known as machine code. So that's been our world in C with Python. So the code that you might compile in C, for instance, might have been this, which we said you run Clang on like this. And if you don't specify a default file name as output, you'll instead just get in your file all of these zeros and ones, which can then be executed by way of .slash a.out, the default name for the assembler's output here. So in Python, though, the world gets here, too, a little simpler as well. So we just now have source code and an interpreter. So there's no machine code it would seem. There's no compiler it would seem. And frankly, there's one fewer arrow, which suggests to me that the process of running Python code itself is actually going to be a little easier. Running C code has typically been two steps. You rerun Clang, or via Mac, you run Clang. Then you run the program. And it's fine. It's not all that hard, but it's two steps. Why not reduce to two steps what you could instead do in one? And we'll see exactly what this means. Now, technically, that's a bit of an oversimplification. Technically, underneath the hood, if you wanted to run a program like this that simply prints out hello world, you would simply run Python hello.py. And the result of that would be to see hello world on the screen, as we'll soon see. But technically, underneath the hood, there is some other stuff going on. So there actually kind of is a compiler. But there's not something called machine code per se. It's called byte code. There's even something called a Python virtual machine. But all of this is abstracted away for us. Certainly for the sake of today's conversation, but also in the real world more generally. Humans have gotten better over the decades at writing software and writing tools via which we can write software. And so a lot of the more manual processes and a lot of the lower level details that we've been focusing on, if not struggling on in C, start to go away. Because much like in week zero, where we started layering on idea after idea, zeros and ones, ASCII, colors and whatnot, similarly with our actual tools, are we going to start to do the same. So whereas in the past, or whereas in actuality, what's going on underneath the hood is this process here, we can start to think about it really as something quite simpler. Now, if you're curious, and if you take some higher level class like CS61 or another, you'll actually talk about things like byte code and assembly code and the like. And we saw a glimpse of the latter a bit ago. This happens to be an intermediate language that Python source code is converted into before it's run by the computer. But again, we're going to turn a blind eye to those lower level details. So here are some of the tools now in our toolkit. In Python, there are data types. Though as of now, we've not seen any examples whereby I specify what types of values are going to be in my variables or what types of values a function is going to return. But they are there. Everything is sort of loosely typed in that whatever you want a variable to be, it will just take on that data type, whether it's an int or string or the like. It's not going to be the full word string. In Python, it's literally called str. But there are some familiar types here, bool and float and int and others. And in fact, among the others, as we'll soon see, are features like range. But before that, no two that will provide for at least our first foray into Python a few familiar functions. So Python has different mechanisms than C for getting input from the user. We've abstracted some of those details away in a new CS50 library for Python that you'll really just use one or few times before we transition away from even that. But we'll give you functions like get char, get float, get int, get string that handle all the requisite error checking so that at least for your first few programs, you can just start to get some real work done without diving into underneath the hood there. And then lastly, here's some other tools in our toolkit. And we'll just scratch the surface of some of these today. But what's nice about Python and what's nice about higher level languages more generally, like more modern languages that learned lessons from older languages like C is that you get so much more for free, so much more out of the box. There's so much more of a kitchen sink. There's so many metaphors we can use here, all of which speak to the fact that Python has more features than C. Much like Java, if you took a PCS or something else, had than C, so does Python have a whole toolkit for representing complex numbers, for representing dictionaries otherwise implemented as hash tables, as you now know. Lists, which is kind of synonymous with an array, but in a list is an array that can sort of automatically grow and shrink. We don't have to jump through hoops as we did in C. Range we've seen briefly, which just hands you back, one number after another in some range, ideally for iteration. Set is the notion from mathematics, where if you want to put bunches of things into a data structure and you want to make sure you have only one of each such thing without duplicates, you can use a set. And a tuple is also a mathematical notion, typically, where you can combine related things without complicating things with actual structs. Like x comma y is a common paradigm in lots of programs, graphics or videos or certainly math and graphing itself. You don't really need a whole full-fledged data structure. You might just want to say x comma y. And so Python gives us that kind of expressiveness. So let's actually now dive in with that quick mapping from one world to the other and focus on what you can actually do with Python. So here I am in the familiar CS50 IDE, much like we have pre-installed for you, Clang and Make and other tools. We've also installed for you a program. That program is called Python, which is a little confusing at first glance, because Python is apparently the name of the language, but it's also the name of the program. And here's where Python is different. Whereas C is, again, compiled, and you use something like Clang to convert it to machine code, Python is both the name of the language and the name of the program you use to interpret the language. So pre-installed in CS50 IDE, and frankly, these days, probably on your own Macs or PCs, even if you don't know it, it is a program called Python that, if fed Python source code as input, will do what that code says. So let's go ahead and try something just like that. Let me go ahead and save a file preemptively as hello.py. So .py will be the convention now instead of .c. And I'm going to go ahead and actually keep this pretty simple. I'm just going to print the first thing. It's muscle memory, so it's not printf anymore. It's just hello, world, save, done. That's going to be my first program in Python. Why? It's one line of code. It's consistent with the features I've claimed Python has. So how do I run it? Well, in C, we would have done like make hello, but make knows nothing about this because make is typically used with C, at least in this context here. So maybe it's like dot slash hello.py. No, it seems I don't have permission there. But there's a step that I teased us with earlier on just the slide alone. How do I go about running a program, did I say? Yeah, I have to be a little more explicit. So Python, which is the name of the interpreter that understands Python, and now I need to feed it some input. And we know from our time in C that programs can take command line arguments. And indeed, this program itself does. Python, you just give it the name of a program to run. And there it is, our very first program. So that's all fine and good. But what if I wanted to do something a little more interesting, like getting a string from the user? Well, it turns out in Python, in CS50 ID especially, I can do something like this. s gets get underscore string. And I can ask someone, for instance, for their name, like this. Now, CS50 ID is already yelling at me, undefined variable get string. And let's actually see if maybe it's just buggy. No, so this is a little more arcane than usual. But trace back, most recent call last. Hello.py line 2 in module, whatever that is. So I see a line of code from line 2. Name, error, name, get string is not defined. This is not the same language we've seen before. But what does this feel reminiscent of? Yeah, when the past, when you've forgotten CS50.h, you've gotten something about an undeclared identifier, something like that. It just didn't understand something related to the CS50 library. So in C, we would have done include CS50.h. That's no longer germane, because now we're in Python. But it's somewhat similar in spirit. Now I'm going to say, instead, from CS50, import get string. And now save that. And hopefully, momentarily, the errors will go away as the IDE realizes, oh, you've now imported the CS50 library, specifically a method, or function, rather, inside of it, called get string. So there, too, it's different syntax. But it kind of says what it means, from CS50, which is apparently the name of the library, import a function called get string. Now, if I go ahead and rerun Python, hello.py, I can go ahead and type in, say, Maria's name, and ignore her altogether, because I need to make a fix here. What's the obvious bug, obvious now, to me, in the program? You need to include the variable, or s? Yeah, so I need to include s, which I got on line three, but then thereafter, use in any way. So this is going to be wrong, of course, because that's going to say, literally, hello, s. This is kind of how we used to do it, and then we would put in s. But this is not print f. This is print, so the world is a little different. And it turns out we can do this in a couple of different ways. Perhaps the easiest, if at least obvious, would be something like this, where I could simply say, hello. Open curly brace, close curly brace. And then inside of there, simply specify the name of the variable that I want to plug in. And that's not quite all the way there. Let me go ahead and run this once more. Now, if I type in Maria's name, still not quite right, I need to actually tell Python that this is a special type of string. It's a formatted string, similar in spirit to what print f expected. And the way you do this, even though it's a little different from c, is you just say f. This is an f string. So literally before the quotes, you write the letter f. And then if I now run this program here, I'm going to actually see Maria's name as hello Maria. And I'll take care of that red x later. So that's a format string. And there's one other way. And this is not very obvious, I would say. You might also see an online documentation, something like this. And let's just tease this apart for just a second. It turns out in Python that what I've highlighted in green here is known as a string, otherwise known as a stir. S-T-R is the name of this data type. Well, unlike in C, where string was kind of a white lie, where it was just a pointer at the end of the day, a string is actually a first class object in Python, which means it's not just a sequence of characters. It has built-in functionality, built-in features. So much like a struct in C had multiple things inside of it, so does a string in Python have multiple things inside of it, not just the sequence of characters, but functions that can actually do things. And it turns out you access those functions by way of the same dot operator as in C. And then you would only know from the documentation or examples in class what functions are inside of the string object. But one of them is format, and that's just a function that takes an argument. What do you want to plug into the string to the left of the dot? And so simply by specifying, hey, Python, here's a string with a placeholder. Inside of this string is a built-in function, otherwise known as a method, when a function is inside some object or structure, pass in the value s. So if I now go ahead and rerun this after saving my changes, I should now see that Maria's name is still plugged in. So that's it, but a simple idea that now even strings have things inside of them, besides the characters alone, and you can access that via the dots. So let's go ahead now and ramp things up to a more familiar example from a while back. Let me go ahead and open up two side-by-side windows and see if we can't translate one to the other. I'm going to go ahead and open up, for instance, int dot c from some time ago. So you might recall from int dot c, we had this program here whose purpose in life was to get an integer from the user and actually now plug it into printf and then print it out. So what's going to be different now in Python? Well, in Python, if I go ahead and implement this as, say, int dot pi, I'm going to go ahead and do the following. Let me scroll down to kind of line things up roughly. I can go ahead and say def, oops, def main, as I saw in the slides before. And then over here, I can say, I get int, quote unquote, integer. And then down here, I'm going to say not printf, but print, quote unquote, hello, and then the placeholder. What's the simplest way to do this now, per our past example? Curly brace? I. And then I just need to be super clear. This is a special f string or format string into which you can plug values. And now I'm going to go ahead and save that. And I've got most of the pieces together now, ignoring for now the red x. So what more remains to be done? I've made one same mistake as before. Yeah, so the get int. So up here, really, the equivalent of line 3 would be from CS50 import get int this time. Saving that. And now, if in my terminal window, I go ahead and run Python of int dot pi, that seems strange. It's not an error in terms of, like, erroneous output. Just nothing happened. So why might this be? How might you go about troubleshooting this, even with very little Python under your belt? Is that a hand? I don't know. No? OK. Yeah? Is there a line break? That's OK. I was just doing that to kind of make everything line up, but it's no big deal. Everything's indented properly, which is the important aesthetic. Yeah? We didn't call the function. And this is where Python's a little different from C. In C, recall, main just gets called automatically for you. Humans years ago decided that shall be the default name of a function. In Python, line 6 here, calling something main is just a convention. I could have called it foo or bar or any other word. It has no special meaning. And so in Python, if you want to actually call main, you need to do something, frankly, that's, I think, one of the stupider distractions early on. But you have to literally say this, if the name of this file happens to equal something that's specially called main, then call main. So long story short, when you run the Python interpreter on a file, as we've been doing with Python space int.py or hello.py, there is a special global variable that your program has access to called underscore underscore name, underscore underscore. And if that default name happens to be underscore underscore main, underscore underscore, then you know that you have the ability to call any function you want by default. So for now, much like we did in week one, where we glossed over certain details that just weren't all that interesting, lines 11 and 12 for now, let's consider not all that interesting, but it's how we're going to kickstart these programs. Because now, if I run Python space int.py, type in a great number, hello, 42, the meaning of life, the universe, and everything. So let's now actually do something more powerful than just getting a single int from the user. Let me go ahead and close off this one and close off this one and open up, say, ints.c after splitting my window again into two windows here. And let's open ints.c. So this one was a little different in that we did some arithmetic. And so here's going to be another difference in Python. Here's what we did in C. And what was curious or worth noting about math in C? Which of these did not quite behave as you might expect in the real world? Division? Yeah, why? What did division do? Yeah, it chopped off or rounded down. It floored the value by throwing away everything after the decimal point. So this line here, 18, where it's such and such, divided by such and such, is such and such. And we literally just said x divided by y. If you divided, for instance, 1 divided by 2 in grade school, hopefully you would get the value 1 half or 0.5. But in C, what did we get instead? Zero. So it gets truncated to an int, the closest int without a decimal point being zero, because 0.5 is really 0.5. And thus, we had that effect. So in Python, things are going to be similar in spirit, but this is kind of a feature that was fixed or a bug that was fixed. In Python, let me go ahead here and open up an example I wrote in advance called ints.py, which is actually now going to look like this. So the Python equivalent now, which I'll roughly line up, looks a little different. And there's a few distractions, because we have all these f strings now in the way. But notice I'm just plugging in x's and y's. But what's a new feature, apparently, in Python, arithmetically? So floor division. So this was the more proper term for what C has been doing all this time. In C, when you use the slash, and you divide one number by another, it divides and then floors it to the nearest int. In Python, if you want that same old school feature, you're going to now use slash slash, not to be confused with the C comment. And if you want division to work the way you always knew it did in grade school, you continue using just the slash. So a minor point, but one of the differences to keep in mind. So if we actually run this here in Python, if I go into source 8 today, and our week's directory for week 1, and I run python ints.py, here now we're going to see 1 and 2. And there's all of the values that we would expect to see. All right, so without dwelling too much on this, let's fast forward to something more powerful, like conditions. So in Python, if we want to do something only conditionally, laying out my browser like this, let me go ahead and open up, let's say conditions.py, sorry, conditions.c, which once upon a time, looked like this. So in this example here, notice that we have a program that gets two ints from the user and then just compares x and y and x and y and prints out whether they're greater than, less than, or equal to, ultimately. So let's actually do this one from scratch over here on the right. So let me go ahead and save this as conditions.py. And then at the top, what's the very first thing I'm going to apparently now need? Yeah, so the CS50 library. So from CS50 import, it looks like get int is the one we want this time. Now, how do I go about getting an int? Or what's the translation of line nine on the left to the right-hand side of the screen? x equals get int of the same prompt. OK, what comes next? If I line it up roughly here, y gets get int of, quote unquote, y. And what's down here? The condition, so if x less than y, no parentheses are necessary. It's not wrong to put them, but it's unnecessary. And now enters a word into our terminology. It's not pythonic, so to speak. If you don't need them, don't put them. So if x is indeed less than y, what do we want to do? We want to print x is less than y, yes? All right, good. So else if x, OK, good. So kind of goofily, l if, then go ahead and print out x is greater than y. And as an aside, I actually did that accidentally. But it turns out in Python, too, you can use double quotes or single quotes. Either is fine. Whereas in C, single quotes had a very specific meaning, which went what? Char, so single characters. And double quotes meant strings, sequence of characters, which meant zero or more characters followed by backslash zero. In Python, all of that is gone. Single quotes and double quotes are equivalent. I'll almost always use double quotes just for consistency, as should you for consistency within your own files. But sometimes it's useful to drop into one or the other if you nest, for instance, quote marks, as you might have once in a while in C. OK, so finally, else print out x is equal to y. So it's cleaner, and frankly, I don't need all this white space. So let's go ahead and just make this a little tighter still. You can see that in 11 lines, we've now done what took 27 or so last time. But I have omitted something, to be fair. What did I omit? Yeah, I didn't do that whole calling a function thing. There's no mention of main. And it actually turns out that's not strictly necessary in Python. If you're going to be interpreting a file that contains Python code, and it's a simple enough program that you don't really need to factor code out and organize it into separate functions, then don't. If this is what would now be called a command line script, a program that just has lines of code, that you can execute literally at the prompt. So if I go into this directory and run Python of conditions.py enter, x will be 1, y will be 2, x is indeed less than y. And that's it. I don't need to bother doing all of this as I proposed earlier, def main. And then I could go in here, and if you've never known this, and now it's useful, especially for Python, you can highlight lines or just tab them all at once. I could do this, but then I would need this thing, which I probably have to go look up how to remember it if you're doing it for the first time. There's just no value in this case to doing that. But at least it can be there as needed. So let me go ahead and undo that, and we're back to a porting of one to the other. All right, so that might then be conditions. And let's see if we can't no switch there. Let's take a look at this one. Let me open up, rather than comparing all of them side by side, let me just open up this one now called noSwitch.py, which is reminiscent of a program we ran some time ago called noSwitch.c. And you can perhaps infer what this does from the comments alone. What does this program do in English? Because logical operators is not all that explicit at top. What's that? Yeah, so if you've ever interacted with a program that asks you for a prompt, yes or no, here's some code with which you might implement it. And we could do this in C. We're just comparing characters here. But there's a few differences. If you kind of now think back to how you might implement this in C, even if you don't recall the specific program. I'm importing my library right up here. I'm then calling getchar this time, which is also in CS50's library for Python. And then notice there's just a couple of things different down here syntactically. Besides the colons and the indentation and such, what else is noteworthy? Yeah. You can use more instead of more. Yeah, thank god. You can just say more what you mean now. If you want to do something or something, you literally say or. And if we were instead, albeit nonsensically here, trying to do the conjunction of two things, this and that, you could literally say and. So instead of the two vertical bars or the two ampersands, here's another slight difference in Python. Let's now take a look at another example, reminiscent of one's past. This one called return.py. So here is an example where it's actually more compelling to have a main function, because now I'm going to start organizing my code into different functions still. So up here, we are importing the getint function from CS50 library. Here I have my main function just saying x gets getint and then print out the square of x. So how do you go about defining your own custom function in Python that's not just main? Well, here on line 11 is how I would define a function called square that takes apparently an argument called n, though I could call this anything I want, colon return n star star 2. So a few new features here, but again, it's no big deal. Once you just kind of look these features up in a manual or in a class, what is star star probably doing? Not square root, the power of, yeah. So n star star 2 is just n raised to the power of 2. That was not a feature we had in C. So now we get this in Python. And what's this line 12 in green? With the weird use of double quotes. It's a comment, and it's a different type of comment than we've seen before. Because in my previous example, I did have a few comments. Recall that just a moment ago in conditions.py, we had a whole bunch of comments. Prompt the user for x, prompt the user for y, compare x and y. So whereas in C, we were using slash slash, Python unfortunately uses that for floor division, so to speak. So we instead just use the hashtag or the pound sign to enumerate a line, to specify a line that should be thought of as a comment. But here is something a little different. And we won't dwell too much on this for now, but Python has different types of comments, one of which is this. This is technically called a doc string or document string. And what's nice about Python, as well as languages like Java and other still, is that you can put comments in your code that special programs can read and then generate documentation for you. So if you ever took APCS and you ever saw Java doc, this was a way of commenting your methods and your code in Java using funky at signs and other syntax so that if you ran a special command, it could generate a user's manual for all of your functions until you or colleagues or friends or teachers exactly what all your functions are, what their arguments are, what their return values are, and all of that. Similarly, in Python, can you use these funky quote, quote, quote doc strings to document your function? So whereas in C, our style has been to put quotes above the functions. In Python, it's going to be to put them as the first line inside and indented within the function. All right, so now let's actually try to port a program from code again, thinking back on week one in C when we had this program here. So there's quite a bit going, oh, spoiler, don't look at that. Hopefully, that didn't sink in just yet. So in week one, we had this program in C, get positive int. And its purpose in life was to write a program that gets a positive integer from the user, in and of itself not all that interesting, but it was an opportunity to introduce a few things. One, we introduced this line six several weeks ago, which is known as a prototype. And what was the purpose of having that function prototype up there? Yeah, you declare the function, but why? Because it's already implemented down here on line 15. Yeah, because of the way the programs run, and frankly, because of how naive or dumb that Clang is by design, it does not know that a function exists until it actually sees it. So the problem is that if in C you have main, inside of which is a call to function like get positive int, but it's not implemented until a few lines later, Clang is going to be dumb and just not know that it even exists, and it's not going to compile your code. So this prototype, as we call it, is kind of a teaser, a hint that doesn't implement the whole function. It just shows the compiler its return type and its types and order of parameters so that that's enough information to then just trust that if I just blindly compile main, eventually, I'm going to see the actual implementation of the function so I can compile its bits as well. So in here, in C, we call get positive int, and then we pass it in a prompt. We stored it in a variable called i, and then printed it out. And then to implement this, we use kind of a familiar construct that you've used in other programs. Pretty much any time you want to prompt the user for inputs and you want to keep pestering him or her until they cooperate with whatever your conditions are, you would use the so-called do-while loop. And because the do-while loop recall is distinct from the while loop, how? It runs at least once, which just kind of makes intuitive sense if you want to prompt the user for something, and then if he or she doesn't cooperate, only then do you want to prompt them again. By contrast, with a while loop, it's going to happen again and again no matter what from the get go. So let's see if we can't now convert this or port this, as people would say, to Python. So here, I'm going to go ahead and save a new file called positive.py. And I'm going to go ahead and do everything here in main as before. So I'm going to go ahead and do, let's say, from cs50 import get int, because I do need that. And then I'm going to go ahead and have my main method here. And then inside of main, just like on the left-hand side, I'm going to do i get get positive int, positive integer, please. It's going to wrap a little bit now. That's fine. And then I'm going to go ahead and print this, which recall is just print, an f string where the placeholder is i. Although, frankly, this is kind of stupid to just create a string that has nothing other than the value we want to print. Nicely enough in Python, just print what you want. And so that simplifies that argument. So now it remains to implement get positive int, which is going to take some kind of prompt as its input. And notice I'm not specifying the data type of prompt, which is string. I'm not specifying the return type of this function, but both actually do exist underneath the hood. So in the past, to get a variable, I would do something like this semicolon. But I know I don't need the semicolon. I know I don't need the data type. And this just looks stupid to just put a variable there to need it. You don't need to do this in Python. If you want to use a variable, just start using it. And unfortunately, whereas almost every other feature we've seen in Python thus far kind of maps directly back to a feature in C, Python does not have a do while. So it has the for in. And it has while, and maybe it has other things we haven't told you about, but it doesn't have do while. So knowing that and knowing only what we've presented thus far, how do we still go about getting an int from the user and ensuring it's positive and re-prompting him or her if and only if it's not? Put another way. How would you do this in C if we took away from you the do while construct? Exclamation points? OK, so we could invert something maybe using that logically. We could just do a while loop. We could just use a while loop, how? So while prompt is less than 1. So while prompt is OK, so the prompt is the string we're going to input. We're going to pass display to the user. So it's not prompt, I think. So maybe i or n to be consistent with the other side. So you know what, why don't I, what about this? What if I just do, you know what, I know I need a loop. This is by far the easiest way to just get a loop, right? It's infinite, which is not good. But I can't break out of loops, recall. So what if I do something like this? What if I do n get int passing in the same prompt? And then what do I want to do next? I'm inside of an infinite loop, so this is going to keep happening, keep happening, keep happening until is positive. So Python's not quite that user friendly. We can't just say that. But we can say what? Greater than, close. Well, OK, that's fine. Greater than or equal to 1. Then what do we want to do? Great. So it's not quite as cool as like a do while loop, which kind of gives us all these features, though frankly, this was never that pretty, right? Especially the fact that you had to deal with the issue of scope by putting the variable outside. So in Python, the right way to do this would be something like this. Just induce an infinite loop, but make sure you break out of it logically when it's appropriate to do so. And so now, if I go ahead and add in that last thing that I keep needing, so if name equals main, and it's always fine to copy, paste something like that, a call main, let me go ahead now, and in my terminal window, run Python of positive dot pi. And let me go ahead and give it negative 5. How about negative 1? How about 0? Whoops, how about that? How about 0, 1? Hm. I screwed up. None is interesting. It's kind of our new null, so to speak. But whereas in C, null can potentially, if used in the wrong way, crash your program, Python might just print it, apparently. Where did I screw up? Yeah, so I didn't return an actual value. And whereas Clang might have noticed something like this, Python the interpreter is not going to be as sort of vigilant when it comes to figuring out if your code is missing something. Because after all, we never said we were going to return anything, and so we don't strictly need to. So what could I instead do here instead of break? I could just return n here, or I could equivalently do this, and then just make sure I return n here. And another difference in Python, too, is that the issue of scope isn't quite as difficult as it was in C. As soon as I've declared n to exist up here, it now exists down below. So even though it was declared inside of this indentation, it is not scoped to that while loop alone. So either way, could we actually make this work? OK, so now let's try to run this again. Positive integer, negative 1, 0, 1. And now we're actually seeing the number 1. All right, let me pause here for just a moment and see if there's any questions. No? Yes? Do you have to call the thing you can see at the library individually, or can you just import the entire one? You have to call things inside of the CS50 library individually, or can you import the whole thing? You can technically import the whole thing as follows. If you want access to everything in the CS50 library, you can literally say star. And in star in programming, well, in many computer contexts, star generally is a wild card character, and it means anything that matches this string here. This is generally considered bad practice, though, because if CS50's staff happens to give you functionality or variables that you don't want, you have now just imported into your namespace, so to speak, all of those functions. So for instance, if the CS50 library had public inside of it a variable called x and y and z, in addition to functions like getString and getInt and getChar, your program is now seeing variables x and y and z. And if you have your own variables called x and y and z, you're going to shadow those variables inside ours, and it just gets messy quickly. So generally, you want to be a little more nitpicky and just import what you want, or another convention in Python is to not specify it like this, but instead to do import CS50. This does not have the same effect of importing all of those keywords, like getInt and getString into your program's namespace, like the list of symbols you can actually type in. But what you then have to do is this. You have to now prefix any usages of the functions in that library with the now familiar or more familiar dot operator. So this is just a stylistic decision now. I have consciously chosen the other approach so that initially you can just call getInt, getString, just like we did in C. But technically and probably more conventionally would people do this to make super clear this isn't my getInt method, it's CS50's getInt function. OK, other questions? Yeah? Is it good coding practice to do the if underscore name or just because you can run Hello World without the defining main? Do you really need to do like that? Oh, it's a good question. Short answer, no. So I'm showing you this way because you'll see this in various examples online and in programs that you might look at that are open source. Strictly speaking, this is not necessary. If you end up making your own library, this tends to be a useful feature. But otherwise, I could equivalently do this, which is perfectly fine as well. I can still define getPositiveInt. I can get rid of main altogether. And I can just now do this. So this program is equivalent and just as fine for now. OK, so with that said, let's do a couple of more examples here. That kind of paints a picture of some of the things that are similar and different. And let's go ahead and open up, for instance, overflow.c from some weeks ago, splitting our windows again. And then on the right-hand side, let me open up something called overflow.pi, which I put together in advance. So here, we have on the left an example of integer overflow, whereby if I start counting at 1 and then don't even have a condition, and I just keep multiplying i by 2, by 2, by 2, doubling it, doubling it, doubling it, doubling it, we know from c that bad things happen. And if you just kind of keep incrementing something without any boundary in sight. So this program is just going to print out each of those values. And it's going to sleep one second in between. Same program in Python looks pretty similar. But notice I'm initializing i to 1, doing the following forever, printing out i, multiplying i by 2, and then sleeping for one second. But sleep is also not built into Python in the way that print is. Notice what I had to include up here. And I wasn't sure what that was. And so honestly, just a few days ago, I Googled to sleep one second in Python, saw that there's this time library inside of which is a sleep function. And that's how I knew which library to actually include. And so just as there are man pages for c, there's a whole documentation website for Python that has all of this information as well. So let me go ahead and do this. And let me actually try to create two windows here. What's the best way for me to do this? Split 1 to 2. OK, so let's do this just so I can run this in the same place. So if I go into my source 8 directory, and I go into weeks and 1, and I make overflow, nope, sorry, week 1. OK, so if I go into source 1, and I do make overflow, which is kind of cute semantically, I'm now going to be able to run a program called overflow. Meanwhile, over here, let me go ahead and split this window 2. Damn it, not there. Let's put this over here. Oh, no. OK, one second, sorry. Overflow.py. OK, so now we're back. No, I lost the other window. Oh, that's cool. OK, so let's do this. OK, now I know how to use the ID. All right, so on the left-hand side, I'm about to run overflow. And then lastly, without generating that beep again, I'm going to go in here, and I'm about to run Python of overflow.py. And so the left will run the C version. The right will run the Python version. And we'll start to see, no pun intended, what happens with these programs. Oh, damn it, I got to scroll. OK, so I'll just keep scrolling for us. This is fun. OK, next time, Google how to sleep for half a second instead. OK, so there we go. Something bad has happened here. And now C is just completely choking. Things are in a funky state. So what happened on the left before the answer scrolls away? Integer overflow, right? We had so many bits becoming ones that eventually it was mistaken for a negative number temporarily, and then the whole thing just kind of got confused and became permanently zeroes, whereas on the right-hand side, like, yeah, Python, look at you go. Like, still counting higher and higher and higher. And even though we haven't talked about the underlying representation of these types in Python, like, what can we infer from the apparent better correctness of the version on the right in Python? It's not an 8-bit representation. And even C, to be fair, uses 32 bits for its ints. And that's why we got as high as 2 billion or 4 billion in total. But same idea, how many bits must Python be using? 64? Yeah, maybe 64. I don't know exactly, but I know it's not 32, because it keeps counting up and up and up. And so this is another feature of Python, whereas int in C has typically been for us 32 bits, although that is technically machine-specific. Python integers are now going to be 64, which just means we can do much bigger math, which is great for various data science applications and stats and whatnot, where you actually might have some large data sets to deal with. Unfortunately, we still have some issues of imprecision. Let me go ahead and close a whole bunch of these windows and go ahead and open up, for instance, just this one here. No, I'm going to skip this and do something slightly more fun, which is this. So in Python here, let's do a quick warm-up. This is going to print for me what? Four question marks, right? And this is reminiscent. This is a really cheap version of Super Mario Brothers. And if you think back to week one, where we explored this, there was a screenshot I had of Super Mario Brothers, one of the worlds, where we just had four question marks, which Mario could hit his head against to actually generate a coin. So we stepped up from there in C to do this instead. And this is going to give us another feature. But let's see if we can't start to infer from context what these programs do. Here's another one, Mario 1. What's this do? It's using a loop, for sure. And it's using how many iterations, apparently? Four, so from 0 to 1 to 2 to 3, total. Each time, it's going to print out, apparently, a question mark. But now, just infer from this. I haven't answered this question already. What else is going on on line four and why? Not going to a new line, right? So there's always this trade-off in programming and CS more generally, like, yay, we took away the backslash n, which was annoying to type. But now, if it's always there, how do you turn it off? So this is one way to do that. And it also reveals another fundamental feature of Python. Notice that print apparently takes, in this case, more than one argument. The first is a string, literally, quote, unquote, and a question mark. The second is a little funkier. It's like a word, and it's then an equal sign, and then it's a quote mark. So what is this here? So it turns out, Python supports what are called named parameters. So in C, any parameters you pass through a function are defined, ultimately, by way of their order. Because even if a function takes arguments that have names, like x and y or a and b or whatever, when you call the function, you do not mention those names. You know they exist, and that's how you think about them in the documentation or in the original code. But you don't name the arguments as you pass them in and call a function. You instead pass them in in the appropriate order per the man page or per the documentation. So in Python, you can actually be a little more flexible. If a function takes multiple arguments, all of which have names, you can actually mention the names explicitly, thereby freeing you from the minor inconvenience of having to remember and always get right the actual order of arguments. So in this case, print apparently takes at least two arguments in this case, one of which is called end. And if you want to use that one, which is clearly optional because I haven't used it yet, you can literally mention it by name, set an equal sign, and then specify the value that you want to pass in. So if I actually now go into this and go into weeks and one and do Python of mario1.py, whoops, I'll still get in week two. If I get mario1.py, I still get four question marks. But that's the result of printing this with a line ending of quote unquote. If I do this, meanwhile, it's a little stupid because I'm going to get that for free if I just omit it all together. But now I get four question marks here. And if you really want to be funky, you can do something like this, which is just going to be taken literally to give you that instead. Unclear utility of taking this approach, but that's all, sorry, that's going on. Let's take a look at mario2. This one works a little differently as well. And how would you describe the feature offered by this version of mario? Print any number of question marks perfectly. So it's parameterized by first getting an int from the user, using CS50's getInt function. And now I'm iterating from i to the range of n, whatever that is, and then actually printing out the question marks. Meanwhile, in mario3.py, a little fancier still, but what am I doing a little better now? Yeah, I'm just making sure that the n is positive. So I didn't bother implementing a whole function called getPositiveAnt. I don't need that. This is a super short program. I'm just using the same logic up here. Inducing deliberately an infinite loop, breaking out of it only when I've gotten back a positive integer, and then printing out that many of hashtags reminiscent of the bricks in mario. And then lastly, we have this slightly more sophisticated version that actually prints out a different shape altogether. You can infer from the comments, but focus more on why. So this first line 12 iterates from i to n, whatever n is, that the user typed in. Meanwhile, line 15, indented, iterates from j from 0 up to n as well. So this is kind of like our canonical forint i gets 0, dot, dot, dot, forint j gets 0, dot, dot, dot, where we've had nested loops in the past. So notice, now that we have this building block, which is a line of code, or kind of conceptually just a scratch piece, we can embed one inside of the other. Here, I can print out a hashtag, making sure not to put a new line after every single hashtag I print out, only printing out a new line, on line 17, on each iteration of the outer loop. And now notice, whereas in C, we would have done this historically, and that's fine. In Python, we don't need the f, and we also don't need the backslash n. So ergo, you can simply do print, and you'll get, if nothing else, a backslash n automatically, so that now, when I run this version of Mario, we now get something more interesting. And I'll increase the size of my terminal window for this, so that I can enter a positive number like this, and print 10. And now we've got a whole block. So that was a lot. Let's go ahead and take our five minute break here, and we'll come back. We'll look at some more sophisticated examples still. All right. So let's begin to start to transition to actually solving problems with Python after introducing just a couple of additional features that aren't so much syntactic, but actual features of the language. So here on the left was an old program we wrote in week three called argv0.c. And its purpose in life was simply to allow you to run a command line argument for the very first time. And that was a nice tool to have in our toolkit. So how might we go ahead and map this? Well, we actually need to know how Python works a little bit differently as follows. If I go ahead and open a new file called, let's call it argv0.py, I'm going to go ahead and translate this just as we did earlier. So I'm going to go ahead and want to use the following. So if argc, so there is no argc. So def main, there was also no argc or argv. And it's not actually correct to do this and this, as you might assume. It turns out that the feature command line arguments are provided by a Python package, so to speak, or a library, much like the CS50 library is a package that you can import in Python speak. So to do this, I actually need to do this. Import sys, which gives me access to a whole bunch of system related stuff like what the user has typed at the command prompt. And if I want to check if the number of words that the human typed at the prompt is 2, I actually am going to do this. If the length of sys.argv equals 2, then I'm going to go ahead and print out, quote unquote, hello, comma, and then a placeholder here. I know for placeholders I need to turn this into a formatted string, so an f string there. And now inside of the curly braces, it turns out I can do sys.argv bracket 1. So it's a little different from before, but notice I'm barring almost all the same ideas as earlier, including how we're printing out strings. And even though this is a little more verbose, what is between these two curly braces? Well, it's the result of looking in the system package, which has a variable called argv for argument vector. Just like in C, it is itself an array, aka a list in Python. And here we have the result of indexing into element 1 of that list. And the way that I have access to this is because I've imported that whole package. So if on the right hand side here, I go ahead after saving that file, and I do Python of argv0.py, I see nothing. But if I actually say, like, my name here, I see hello.david. So very similar program, but implemented a little differently. And you'll notice, too, that the length of an array, henceforth known as a list, is not something that you yourself have to remember or keep around. You can just ask a list how long it is by calling the lang, or len, for length function, passing it in as an argument. So that's one of the takeaways there. And if we actually want to do something a little more clever, like print out all of the strings in argv, well, back in the day in C, you might recall this example, argv1.c, wherein I had this for loop, and I iterated from 0 on up to argc, the argument count, printing out each of the arguments in that vector. Python actually makes even something like this even simpler. Let me go ahead and create a new file here, and I'll call this, say, argv1.py. And it turns out in Python, I can similarly just import sys, and then do, honestly, for s in sys.argv, print s, done. So again, kind of just says what it means. So I've imported the system library, sys.argv, I know to be a list, apparently, of command line arguments, for something in something is a new syntax we have for for loop. So for some variable s inside of this list, go ahead and print it. And so it's a much cleaner, much more succinct way of, honestly, getting rid of all of the complexity of this by just saying, instead, what we mean. Meanwhile, if I wanted to print out every character, I can take this one step further. So back in the day, in C, if I wanted to print out every command line argument and every character therein, I could do this. I just need a couple of nested loops wherein, via the outer loop, I iterate over all of the arguments passed in. And on the inner loop, I iterate over the current string length of whatever argument I'm printing. And this had the effect of printing out all of the command line arguments letters one at a time. I can do this in Python, honestly, so much easier. So let me go over here. Let me create a new file called argv2.py. Let me import sys as I did. So import sys and then for snsys.argv, for cns, print c, done. So what is this doing? Gone is all of the overhead of four int i and four int j and so forth. For snsys.argv, iterates over all of the elements of that list, one string at a time. For cns is a little different, because s is technically a string or a stir object, as we're going to start calling it. But at the end of the day, a string is just a sequence of characters, and turns out Python supports out of the box the ability to use a for loop, even to iterate over all of the characters in a string. And so c, I just mean char. So for cns, that gives me each of the characters. So now with the end here, if I go ahead and run Python of argv2.py with nothing, I get just the program's name, because that's, of course, the very first thing in argv as in C. And if I write, say, a word like Maria here, I get argv2.py Maria all in one long column, because of the additional prints that are happening in the implicit new lines. So any questions? Before we proceed on this use of a package called sys, using these libraries, rather using these functions therein. All right, so let me skip ahead then to something slightly familiar too. Let me go ahead, and you might recall, initials.c from some time ago, wherein we accepted as a command line argument a user rather as an input to get string, a user's name, and then we printed out their initial. So let's go ahead and do that. So from cs50, let me go ahead and import, get string. Then let me go ahead and say, get me a string, and I want the user to be prompted for their name, as we might do here. Then let me go ahead and say, all right, there are initials. I don't know what they are yet, so let me just initialize an empty string, but then do this. For c in s, which is for each character in the person's name, if, and I don't know how to say this yet, if c is an uppercase letter, then go ahead and append c to initials, and then down here, print initials. So I've left a couple of blanks. That's just pseudocode for the moment. But this line five, just to be clear, is doing what for me? What is being iterated over? The string. So for each character in the string, for c in s, I'm going to ask two questions. So in c, we did this in a couple of different ways. We can actually do it with kind of arithmetic, assuming rather with inequality checks and actually considering what the underlying ASCII values are. The c type library had that is upper function and is lower that we use. Well, it turns out, because c is itself not a char, there is no such thing technically as a char in Python. You have only strings of length one. And this is why single quotes no longer have any special meaning. It turns out c is technically just a one character string. Strings are what we've started calling objects, which is a fancier name for struct. So inside of an object, like a string, is functionality. And we saw one piece of functionality earlier, which was what? Not length, but though that is another one, it was format. We saw it briefly. But when I did the string.format, I proposed that there's actually built-in functionality to a string called format. Well, you know what? It turns out there is a method or a function inside of the string class, also called isUpper. And I can ask the very string I'm looking at that question by saying, if c.isUpper is true, then go ahead and append c to initials. So in c, if initials were technically a string, how could you go about appending another character to a string in c? C dot appends? Not in c. Oh, so in c, the language. OK, so what's a string in c? A string in c is a sequence of characters, the last one of which is backslash 0. All right, so it's an array of characters, last of which is backslash 0. So if I, for instance, typed in my first name, David, and now I want to append mail-in to the end of it, how do I do that in c? Exactly, it's like an utter pain in the neck. You have to create a new array that's bigger, that can fit both words, copy the David into the new array, then copy the last name in, then put the null terminator at the new array, then free, probably, the original memory. I mean, it's a ridiculous number of hoops to jump through. And you've done this on occasion, especially for things like, perhaps, problem set five. But my god, we're kind of past that. Just go ahead and append to the array the character you care about. So in this case, not an array, but a list. Sorry, not an array, but a string object that's initially blank. It turns out that Python supports this syntax plus equals typically means arithmetic and add one number to another, but it also means append. So you can simply append two initials by doing plus equals c, one additional character. So even though the string starts like this in this big in memory, it's then going to grow for one character, grow, grow, grow, grow until it has all of the user's initials. And as for where that memory is coming from, who cares? This is the point that we're now past. You leave it to the language. You leave it to the computer to start to manage those details. And yes, if it needs to call Malek, fine, do it. Don't bother me with that detail. We can now start thinking and writing code sort of conceptually at this level instead of at this level. So again, we're sort of abstracting away what a string even is and leaving it to the language itself. So if I now go ahead and run Python of initials.py and type in, for instance, Maria Zlatkova here with a capital M and a capital Z, I then see her names because I've plucked out the middle initials. And if we do something else like David J. Malen, even with a period in there, it infers from the capitalization what my initials should actually be. So again, a much tighter way of doing things. Let me go ahead and now open up another example. We didn't see a few weeks ago, though it was included in some of our distribution code, if you wanted to look. Some weeks ago, we had this program among the distribution code, where I declared an array of strings called book. And I proposed that there were these several names in the phone book, so to speak, all of the past instructors of CS50 sorted alphabetically. And then down below in this C program, I used that global variable called book to implement, it seems, linear search. And to implement linear search in C, I'm going to need, of course, a loop to iterate over all of the strings. This line 26 does exactly that. I then in C recall how to use stir compare because remember, we tripped over this issue early on where you can't just compare two strings in C because you'd be comparing accidentally their addresses, their pointers, not the actual value. So we use stir compare, and I can pass in the name that I'm looking for and the ith book one at a time, checking for equals zero. And then I can call Mike or David or whoever I'm trying to call, or just quit if the user isn't found. So what did this program actually do? If I go into this example, which again was from week three, and I do make linear, nope, not that make, oh, wrong directory again. If I go into source three and make linear, this program is supposed to behave as follows. So if I go ahead and run dot slash linear, look for our old friend Smith. If found Smith, if I go ahead and search for, say, Jones, who did not previously teach CS50, it says quitting. All right, so meanwhile, in Python, bless its heart, we can get rid of all of that. And in our source eight directory here and our sub directory three, let me go ahead and open this instead. In Python, I can declare an array, otherwise known as a list, almost in the same way, but what's different just to be super clear? Brackets? So the brackets are now square brackets instead of curly braces. And frankly, unless you statically initialized an array in C, like hard coded the values for your array in C, you might not even have known you could use curly braces. So that's not a huge deal here. But in Python, square brackets here and here represent a list of elements, literally. And what else is different? Didn't declare the size of the array. And I technically don't have to do that in C either if you're hard coding all of the values all at once. But there is something missing on line seven. Sorry? The type. I didn't specify string. But otherwise, this is pretty similar to what we've done in C. But what's beautiful here, and let me go ahead and hide that for just a second, let me go ahead and prompt the user for his or her name. So let's ask for the name here. And then if I want to search the book, which is just a list of names, how do I implement linear search? Well, I could just do if name in book, print, calling, name, and let's make this an F string. And then down here, that's it. So that's how you implement linear search in Python. You don't need a loop. You can just ask the question yourself. So if book is a list, and name is the string that you're looking for, just ask the language to figure this out for you. If name in book is the syntax you can use to ask literally that question. And in Python, we'll use probably linear search over that list, because it doesn't necessarily know it's sorted, even though it happens to be alphabetically. But it will find it for you, thereby saving us a lot of the complexity and time of having had to implement that ourselves. Meanwhile, if I want to compare two strings, let me propose this. Let me write a quick program here. Compare 1.py. And let me go ahead and from CS50 import, get string as before. And now let me go ahead and get one string that I'll call S. And let me get another string that I shall call T, just as we did a few weeks ago. And now in C, this was buggy. If I print same, else I print different. So in C, just to be super clear, why was this incorrect, this general idea of using equals equals? Yeah, they're comparing addresses. This was like the day before we peeled back the layer of what a string actually is. And it turns out that S and T in C were char stars or addresses, which means, certainly, if you get two different strings, even if you've typed the same characters, you're going to be comparing two different addresses. They're not going to be the same. Now you can perhaps infer from the theme of today, what is Python going to do if asked if S and T are equal? It's going to ask and answer that question as you would expect as the human. Equals equals now in Python is going to compare S and T, look at their actual values, because they are strings, and return same if you literally type the same words. So in here, if I go in here, and I do Python of compare 1.py, and I type in, for instance, Maria, and then I type in Maria, they're indeed the same. If I type in Maria and say Stelios, they're different, because it's actually now comparing the strings, as we would have hoped some time ago. So let's take a look at another that kind of led to some interesting quandaries. You might recall in week four, we had this example in C. No swap, so named, because this just did not work. It was logically, seemingly correct. But swap did not actually swap x and y, but it did swap a and b. Why? The memory locations were different. So x and y, recall, are variables in C that exist in a certain slice of memory that we called a frame on the stack, main's frame on the stack. Meanwhile, a and b are from a slightly different location in memory. We sort of kept drawing it slightly above, like a tray at the dining hall on the so-called stack. A and b had the same values of x and y, one and two, but their own copies of them. So even though we logically, as with Kate, I think with the Gatorade, swap the two values, we ultimately swap the wrong two values without actually permanently mutating the original x and y. So unfortunately, and unfortunately in Python, there is no such thing as a pointer. So those are now gone. So we no longer have the expressiveness with which to solve this problem that way. But let me propose that we do it in oh, so clever of another way. Here, let me go ahead and declare x is 1, y is 2. Let me go ahead and print out as much. So with a format string, I'm going to go ahead and say x is x, y is y, plugging in their respective values. I'm going to do that twice. But in between, I'm going to try to perform this swap. And if your mind's ready to be blown, do that in Python. Do the old switcheroo in Python. And this actually does swap the two values as you would expect. Now, this is not a very common case. And to be fair, this is an incredibly contrived example. Because if you needed them swapped, well, maybe you should have just done this in the first place. But it does speak to one of the features of Python where you can actually do something like that. Let me introduce now one additional feature that we only recently acquired in C. And that's the notion of a struct. And let me go ahead and do this in code from scratch. So let me go ahead and save this file proactively as struct0.py, reminiscent of one of our older programs. And let me go ahead and do this. From cs50, import getString. And then let me give myself an empty list. So that would be a conventional way of giving yourself an empty list in Python. And much like in C, you can declare an empty array. But in C, you have to know the size of it. Or if not, you have to use a pointer. And then you have to mallet. No, all of that is gone. Now in Python, you want a list? Just say you need a list, and it will grow and shrink as you need. Now I'm going to go ahead and just three times arbitrarily for i in the range of three. Let me go ahead and ask the user for a name using getString. And I'll ask him or her if their name. Dorm will use getString as well. Dorm here. And then I want to append to the array this student. So I could do something like this. Students.append name. And it turns out, and we've not said this yet, but there is inside of the list data type a method that is function built into it called append that literally does that. So if you've got an otherwise empty list, and you call that list's name.append, you'll add something to the end of the list. And if there's not enough memory for it, no big deal. Python will find you the memory, allocate it, move everything in it, and you move on your way without having to worry about that. But I don't want to store just the name. I want to store the name and the dorm. So I could do this. I could do, well, maybe this isn't really students. Maybe this is now dorms. And then here I could do dorms.append dorm. But why is this devolving now into bad design if my goal was to associate a student with his or her dorm and then keep those values together? Why is this not the best approach in Python or back in the day, even in C, to have two separate arrays? By struct. What's that? Struct. So well, you have to, like, twice as many things to maintain, for sure. And what else? You can't map one to the other. You can't map one to the other. It's just, it's like, it's very arbitrary. Like, it's sort of this social contract that I will just assume that student zero lives in dorm zero. And student one lives in dorm one. And that's fine. And that's true. But one of the features of programming and computer science is this idea of encapsulation, like, associate-related memory with each other. And so what did we do in C instead? We did not have two arrays. Yeah, we had a struct. And so Python doesn't have structs per se. It instead has what are called classes. And it has a few other things like tuples and name tuples, but more on those some other time. So it turns out I could actually implement my own notion of a student. And I could import it like this. The convention in Python is if you create your own struct, henceforth called a class, you capitalize the name of it by convention. So a little different from C conventions. So what is a student going to look like? This is perhaps the most complex syntax that we'll have today, but it just has a few lines. If you want to implement the notion of a student, how might you do this? Well, in Python, you literally say class student, where class is similar in spirit to, just to be clear, struct or type def struct. But in Python, we're just saying class. And then this is the funky part. You can declare a function that by convention must be called init for initialize, that takes as its first argument a keyword called self, and then any number of other arguments like this. And then, for reasons that will hopefully be clear momentarily, I can write some code inside of this method. So long story short, what am I doing? I have declared a new type of data structure called student. And implicitly inside of this data structure, there are two things inside of itself, something called name and something called dorm. And this is how you would, in a C struct, typically do things with the data types and semicolons inside of the curly braces. Meanwhile, there's this method here. And it's a method in so far as it is inside of a class. Otherwise, it's a function just by a different name. This method init takes whatever self is, more on that another time, but it then takes zero more custom arguments that you can provide. And I called it name and dorm. So it turns out this special method init is a function that's going to be called automatically for you any time you create a student object. So what does that actually mean? That means in your code, what you can actually do is this. I can create a student in memory by saying s gets capital student passing in name and dorm. And we don't have this feature in C. On the right hand side, what I've highlighted is the name of the class and its two arguments, name and dorm, which are just what the user has typed in. What this class does for me now is it allocates memory underneath the hood for a student. It's got to be big enough for their name and big enough for their dorm. So it's like yay big in memory, so to speak. It then puts in the name and the dorm strings into that object and then returns the whole object. So you can kind of think of this as a much fancier version of malloc. So this is allocating all the memory you need, but it's also installing inside of that memory the name and the dorm. And it's bundling it up inside of not just an arbitrary chunk of memory, but something you can call a student object. And all that means that now for our students, we can just go ahead and append that student to the list. So now, if later, I want to iterate over for student in students, I can go ahead and print out, for instance, that student.name lives in student.dorm, close quote. And if now over here, oops, close that, and now over here, if I go ahead and run Python on struct0.py. Oh, no. Oh, thank you. That goes there. So now, damn it. Missing curly. Oh, thank you. OK, so now if I want to go ahead and type Maria and Cabot and David and Mather and Rob and say Kirkland, now we get all three of those names. And there's other ways, too, if we want to actually store this thing on disk. But I'll defer that to an example online. Let's look at one final example that will hopefully either make you regret the past several weeks or embrace the next several instead. So you'll recall that, though the former I suppose could be true, even without my help, so if I go into now, today's distribution code, you will see this program. And we won't walk through all of its lines, but this is a program written in Python called Speller. And what I did was literally sit down with Speller.c from problem set 5, and I just converted it from left to right from c to Python, implementing it in Python in as close to an identical way as I could, just using features of Python. So just skimming this, you'll see that apparently my implementation of Speller in Python has a class called dictionary, which is very similar in spirit to dictionary.h and c. Notice that I still have a constant here, or it's not technically a constant, but a variable called length equals 45, like hardcoded in dictionary slash large as Speller.c did too. I'm using command line arguments as we saw earlier, but this time in Python instead of c. Notice you can do funky things like this, which is reminiscent of our swap trick just a little bit ago. If you want to declare multiple variables all on the same line and initialize them, you can just enumerate them all with commas. Then on the other side of the equal sign, enumerate with commas the values that you want to assign to those variables. And then down here, if I keep scrolling, you'll see code that we won't get into the weeds of, but some familiar phrases. So this is the program that actually runs a student's dictionary on some input, and then prints out per all this stuff at the bottom all of the familiar phrases that you might recall from problem set five. So this took a lot of work, most likely, to implement in c. And understandably, you might have used a linked list initially, or ultimately, you might have used a hash table, or a try, or struggled with something in between those two. And that is a function of c. C is difficult. C is challenging, because you have to do everything yourself. And upside, though, of it is that you end up getting a lot of great performance, theoretically. Like, once you have implemented the code, you're kind of as close to the hardware as possible. And so your code runs pretty darn well, and is dependent only then on your algorithms, not on your choice of language. So here, let me go ahead and implement a file called dictionary.py. And let me propose that the words, the equivalent, sorry, of dictionary.h would be this file here. And it's going to have a key word, a function called check, which takes an argument called word. It's going to have a function called load, which takes in an argument called dictionary. It's going to have a method called size, which takes in no arguments other than itself. And then it's going to have a method called unload, which also takes no arguments other than itself. So if we were instead to have assigned problems at 5 in Python, we essentially would have given you a file called dictionary.py with these placeholders for you. Because recall, in pset5, those were all to dos. Strictly speaking, there would be one other here. We would probably have a def init, because every class in Python we'll see will typically have this init method, where we just are able to do something to initialize the data structure. So let me go ahead and do this. We don't know that much Python yet, and we're taking for granted that Speller, in fact, works. But let me go ahead and load some words in a dictionary. So here is my method called load. Dictionary is going to be the name of the dictionary to load. So you guys implemented this yourself by loading those files from disk. In Python, I'm going to do this as follows. Give me a file and open it in read mode. I'll iterate over each line in the file. Then go ahead and add to my set called words the result of that line by stripping off the end of it, backslash 0. Then go ahead and close the file, and then return true, because I'm done implementing load. So that is the load method in Python. Happy, yes. OK, so check. Check was a struggle too, right? Because once you had your hash table, or once you had your try, now you had to actually navigate that structure in memory, maybe recursively, maybe iteratively, following lots of pointers and the like, following a linked list. How about I just do, let's just say, if word lowercase in self.words, return true, else return false, done. So that one's done. On size, we actually can kind of infer how to do this, return the length of the words. That's done. Unload, don't have to worry about memory in Python, so that's done. And there you have problem set five. Thank you. So what then are the takeaways? Either great elation that you now have this power, or great sadness that you had to implement this first and see, but this was really ultimately meant to be thematic. Like hopefully moving forward, even if you struggled with any number of these topics, linked list, and hash tables, and pointers, and the like, like hopefully you have a general understanding of some of these fundamentals and what computers are doing underneath the hood. And now with languages like Python, and soon with JavaScript and SQL, with a little bit of HTML and CSS mixed in for our user interfaces, do you have the ability to now solve problems taking for granted both your understanding of those topics and the reality that someone else has now implemented those concepts for you so that when it comes to solving problems that's six and seven and eight, and then leaving CS50 and solving problems in your own domain, you have so many more tools in your toolkit. And the goal really for you is going to be to pick whichever one is most appropriate. So let's adjourn here. I'll stick around for questions, and we'll see you next time. Best of luck on the test.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 15.68, "text": " All right, so this is CS50, and this is the day before our test, of course.", "tokens": [50364, 1057, 558, 11, 370, 341, 307, 9460, 2803, 11, 293, 341, 307, 264, 786, 949, 527, 1500, 11, 295, 1164, 13, 51148], "temperature": 0.0, "avg_logprob": -0.19875102140465561, "compression_ratio": 1.523404255319149, "no_speech_prob": 0.022606579586863518}, {"id": 1, "seek": 0, "start": 15.68, "end": 17.68, "text": " But this is lecture 8, in which we're actually", "tokens": [51148, 583, 341, 307, 7991, 1649, 11, 294, 597, 321, 434, 767, 51248], "temperature": 0.0, "avg_logprob": -0.19875102140465561, "compression_ratio": 1.523404255319149, "no_speech_prob": 0.022606579586863518}, {"id": 2, "seek": 0, "start": 17.68, "end": 20.72, "text": " going to finally transition from C, this lower level language that we've", "tokens": [51248, 516, 281, 2721, 6034, 490, 383, 11, 341, 3126, 1496, 2856, 300, 321, 600, 51400], "temperature": 0.0, "avg_logprob": -0.19875102140465561, "compression_ratio": 1.523404255319149, "no_speech_prob": 0.022606579586863518}, {"id": 3, "seek": 0, "start": 20.72, "end": 22.44, "text": " been spending quite some time to.", "tokens": [51400, 668, 6434, 1596, 512, 565, 281, 13, 51486], "temperature": 0.0, "avg_logprob": -0.19875102140465561, "compression_ratio": 1.523404255319149, "no_speech_prob": 0.022606579586863518}, {"id": 4, "seek": 0, "start": 22.44, "end": 25.44, "text": " And the goal today isn't so much to focus on Python, per se,", "tokens": [51486, 400, 264, 3387, 965, 1943, 380, 370, 709, 281, 1879, 322, 15329, 11, 680, 369, 11, 51636], "temperature": 0.0, "avg_logprob": -0.19875102140465561, "compression_ratio": 1.523404255319149, "no_speech_prob": 0.022606579586863518}, {"id": 5, "seek": 0, "start": 25.44, "end": 28.16, "text": " but honestly, to do what we hope will be one of the most empowering", "tokens": [51636, 457, 6095, 11, 281, 360, 437, 321, 1454, 486, 312, 472, 295, 264, 881, 28261, 51772], "temperature": 0.0, "avg_logprob": -0.19875102140465561, "compression_ratio": 1.523404255319149, "no_speech_prob": 0.022606579586863518}, {"id": 6, "seek": 2816, "start": 28.16, "end": 31.72, "text": " aspects of the class, which is to emphasize that this is not", "tokens": [50364, 7270, 295, 264, 1508, 11, 597, 307, 281, 16078, 300, 341, 307, 406, 50542], "temperature": 0.0, "avg_logprob": -0.15846307542588975, "compression_ratio": 1.7654320987654322, "no_speech_prob": 0.07363960146903992}, {"id": 7, "seek": 2816, "start": 31.72, "end": 34.84, "text": " in a semester learning C. This has been a semester learning programming,", "tokens": [50542, 294, 257, 11894, 2539, 383, 13, 639, 575, 668, 257, 11894, 2539, 9410, 11, 50698], "temperature": 0.0, "avg_logprob": -0.15846307542588975, "compression_ratio": 1.7654320987654322, "no_speech_prob": 0.07363960146903992}, {"id": 8, "seek": 2816, "start": 34.84, "end": 37.76, "text": " a certain type of programming called procedural or imperative programming,", "tokens": [50698, 257, 1629, 2010, 295, 9410, 1219, 43951, 420, 32490, 9410, 11, 50844], "temperature": 0.0, "avg_logprob": -0.15846307542588975, "compression_ratio": 1.7654320987654322, "no_speech_prob": 0.07363960146903992}, {"id": 9, "seek": 2816, "start": 37.76, "end": 40.08, "text": " but more on that in another higher level class, perhaps.", "tokens": [50844, 457, 544, 322, 300, 294, 1071, 2946, 1496, 1508, 11, 4317, 13, 50960], "temperature": 0.0, "avg_logprob": -0.15846307542588975, "compression_ratio": 1.7654320987654322, "no_speech_prob": 0.07363960146903992}, {"id": 10, "seek": 2816, "start": 40.08, "end": 43.32, "text": " But really, that this class is about ultimately teaching yourself", "tokens": [50960, 583, 534, 11, 300, 341, 1508, 307, 466, 6284, 4571, 1803, 51122], "temperature": 0.0, "avg_logprob": -0.15846307542588975, "compression_ratio": 1.7654320987654322, "no_speech_prob": 0.07363960146903992}, {"id": 11, "seek": 2816, "start": 43.32, "end": 45.32, "text": " to learn new languages.", "tokens": [51122, 281, 1466, 777, 8650, 13, 51222], "temperature": 0.0, "avg_logprob": -0.15846307542588975, "compression_ratio": 1.7654320987654322, "no_speech_prob": 0.07363960146903992}, {"id": 12, "seek": 2816, "start": 45.32, "end": 48.519999999999996, "text": " And indeed, what you'll find is that as we explore some of the features", "tokens": [51222, 400, 6451, 11, 437, 291, 603, 915, 307, 300, 382, 321, 6839, 512, 295, 264, 4122, 51382], "temperature": 0.0, "avg_logprob": -0.15846307542588975, "compression_ratio": 1.7654320987654322, "no_speech_prob": 0.07363960146903992}, {"id": 13, "seek": 2816, "start": 48.519999999999996, "end": 52.6, "text": " and the syntax of Python, odds are today it might look as cryptic as C did", "tokens": [51382, 293, 264, 28431, 295, 15329, 11, 17439, 366, 965, 309, 1062, 574, 382, 9844, 299, 382, 383, 630, 51586], "temperature": 0.0, "avg_logprob": -0.15846307542588975, "compression_ratio": 1.7654320987654322, "no_speech_prob": 0.07363960146903992}, {"id": 14, "seek": 2816, "start": 52.6, "end": 55.760000000000005, "text": " just a few weeks ago, but you'll find that once you start recognizing", "tokens": [51586, 445, 257, 1326, 3259, 2057, 11, 457, 291, 603, 915, 300, 1564, 291, 722, 18538, 51744], "temperature": 0.0, "avg_logprob": -0.15846307542588975, "compression_ratio": 1.7654320987654322, "no_speech_prob": 0.07363960146903992}, {"id": 15, "seek": 5576, "start": 55.76, "end": 59.199999999999996, "text": " patterns as you have with C, it'll be all the more accessible", "tokens": [50364, 8294, 382, 291, 362, 365, 383, 11, 309, 603, 312, 439, 264, 544, 9515, 50536], "temperature": 0.0, "avg_logprob": -0.13220971822738647, "compression_ratio": 1.6506410256410255, "no_speech_prob": 0.017983809113502502}, {"id": 16, "seek": 5576, "start": 59.199999999999996, "end": 63.239999999999995, "text": " and all the more useful when solving some problems.", "tokens": [50536, 293, 439, 264, 544, 4420, 562, 12606, 512, 2740, 13, 50738], "temperature": 0.0, "avg_logprob": -0.13220971822738647, "compression_ratio": 1.6506410256410255, "no_speech_prob": 0.017983809113502502}, {"id": 17, "seek": 5576, "start": 63.239999999999995, "end": 66.52, "text": " So unrelated, just earlier this week, I happened", "tokens": [50738, 407, 38967, 11, 445, 3071, 341, 1243, 11, 286, 2011, 50902], "temperature": 0.0, "avg_logprob": -0.13220971822738647, "compression_ratio": 1.6506410256410255, "no_speech_prob": 0.017983809113502502}, {"id": 18, "seek": 5576, "start": 66.52, "end": 68.75999999999999, "text": " to be in Mountain View with some of the team.", "tokens": [50902, 281, 312, 294, 15586, 13909, 365, 512, 295, 264, 1469, 13, 51014], "temperature": 0.0, "avg_logprob": -0.13220971822738647, "compression_ratio": 1.6506410256410255, "no_speech_prob": 0.017983809113502502}, {"id": 19, "seek": 5576, "start": 68.75999999999999, "end": 71.75999999999999, "text": " And you might recall from last lecture at Harvard,", "tokens": [51014, 400, 291, 1062, 9901, 490, 1036, 7991, 412, 13378, 11, 51164], "temperature": 0.0, "avg_logprob": -0.13220971822738647, "compression_ratio": 1.6506410256410255, "no_speech_prob": 0.017983809113502502}, {"id": 20, "seek": 5576, "start": 71.75999999999999, "end": 75.2, "text": " we offered this glimpse of one of the earliest racks of servers", "tokens": [51164, 321, 8059, 341, 25838, 295, 472, 295, 264, 20573, 47063, 295, 15909, 51336], "temperature": 0.0, "avg_logprob": -0.13220971822738647, "compression_ratio": 1.6506410256410255, "no_speech_prob": 0.017983809113502502}, {"id": 21, "seek": 5576, "start": 75.2, "end": 76.72, "text": " that Google itself had.", "tokens": [51336, 300, 3329, 2564, 632, 13, 51412], "temperature": 0.0, "avg_logprob": -0.13220971822738647, "compression_ratio": 1.6506410256410255, "no_speech_prob": 0.017983809113502502}, {"id": 22, "seek": 5576, "start": 76.72, "end": 78.68, "text": " Well, it turns out they changed buildings,", "tokens": [51412, 1042, 11, 309, 4523, 484, 436, 3105, 7446, 11, 51510], "temperature": 0.0, "avg_logprob": -0.13220971822738647, "compression_ratio": 1.6506410256410255, "no_speech_prob": 0.017983809113502502}, {"id": 23, "seek": 5576, "start": 78.68, "end": 81.8, "text": " but we happened to stumble upon the actual display.", "tokens": [51510, 457, 321, 2011, 281, 41302, 3564, 264, 3539, 4674, 13, 51666], "temperature": 0.0, "avg_logprob": -0.13220971822738647, "compression_ratio": 1.6506410256410255, "no_speech_prob": 0.017983809113502502}, {"id": 24, "seek": 5576, "start": 81.8, "end": 85.24, "text": " So pictured here is a photo from my own phone, which was actually really", "tokens": [51666, 407, 49896, 510, 307, 257, 5052, 490, 452, 1065, 2593, 11, 597, 390, 767, 534, 51838], "temperature": 0.0, "avg_logprob": -0.13220971822738647, "compression_ratio": 1.6506410256410255, "no_speech_prob": 0.017983809113502502}, {"id": 25, "seek": 8524, "start": 85.24, "end": 86.0, "text": " cool to see.", "tokens": [50364, 1627, 281, 536, 13, 50402], "temperature": 0.0, "avg_logprob": -0.1572119020948223, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.010985179804265499}, {"id": 26, "seek": 8524, "start": 86.0, "end": 89.75999999999999, "text": " So inside of this, you'll see all of the old hard drives they've used.", "tokens": [50402, 407, 1854, 295, 341, 11, 291, 603, 536, 439, 295, 264, 1331, 1152, 11754, 436, 600, 1143, 13, 50590], "temperature": 0.0, "avg_logprob": -0.1572119020948223, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.010985179804265499}, {"id": 27, "seek": 8524, "start": 89.75999999999999, "end": 91.28, "text": " We actually looked at some of the labels.", "tokens": [50590, 492, 767, 2956, 412, 512, 295, 264, 16949, 13, 50666], "temperature": 0.0, "avg_logprob": -0.1572119020948223, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.010985179804265499}, {"id": 28, "seek": 8524, "start": 91.28, "end": 94.16, "text": " And indeed, hard drives manufactured in 1999, which", "tokens": [50666, 400, 6451, 11, 1152, 11754, 25738, 294, 19952, 11, 597, 50810], "temperature": 0.0, "avg_logprob": -0.1572119020948223, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.010985179804265499}, {"id": 29, "seek": 8524, "start": 94.16, "end": 96.36, "text": " was when Google started getting some of its momentum.", "tokens": [50810, 390, 562, 3329, 1409, 1242, 512, 295, 1080, 11244, 13, 50920], "temperature": 0.0, "avg_logprob": -0.1572119020948223, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.010985179804265499}, {"id": 30, "seek": 8524, "start": 96.36, "end": 98.28, "text": " I mean, you can see the green circuit boards here,", "tokens": [50920, 286, 914, 11, 291, 393, 536, 264, 3092, 9048, 13293, 510, 11, 51016], "temperature": 0.0, "avg_logprob": -0.1572119020948223, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.010985179804265499}, {"id": 31, "seek": 8524, "start": 98.28, "end": 101.24, "text": " on which would be CPUs and other things potentially.", "tokens": [51016, 322, 597, 576, 312, 13199, 82, 293, 661, 721, 7263, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1572119020948223, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.010985179804265499}, {"id": 32, "seek": 8524, "start": 101.24, "end": 103.19999999999999, "text": " So if you'd like to stroll down memory lane,", "tokens": [51164, 407, 498, 291, 1116, 411, 281, 42812, 760, 4675, 12705, 11, 51262], "temperature": 0.0, "avg_logprob": -0.1572119020948223, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.010985179804265499}, {"id": 33, "seek": 8524, "start": 103.19999999999999, "end": 106.91999999999999, "text": " feel free to read up on this on Wikipedia or even on the excerpts here.", "tokens": [51262, 841, 1737, 281, 1401, 493, 322, 341, 322, 28999, 420, 754, 322, 264, 42760, 39280, 510, 13, 51448], "temperature": 0.0, "avg_logprob": -0.1572119020948223, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.010985179804265499}, {"id": 34, "seek": 8524, "start": 106.91999999999999, "end": 110.52, "text": " And then, strangely enough, at the conference, some of us were at,", "tokens": [51448, 400, 550, 11, 39851, 1547, 11, 412, 264, 7586, 11, 512, 295, 505, 645, 412, 11, 51628], "temperature": 0.0, "avg_logprob": -0.1572119020948223, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.010985179804265499}, {"id": 35, "seek": 8524, "start": 110.52, "end": 113.67999999999999, "text": " did we discover this, perhaps the biggest duck debugger", "tokens": [51628, 630, 321, 4411, 341, 11, 4317, 264, 3880, 12482, 24083, 1321, 51786], "temperature": 0.0, "avg_logprob": -0.1572119020948223, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.010985179804265499}, {"id": 36, "seek": 11368, "start": 113.68, "end": 118.4, "text": " made up of smaller duck debuggers, one of whom was our own.", "tokens": [50364, 1027, 493, 295, 4356, 12482, 3001, 3562, 433, 11, 472, 295, 7101, 390, 527, 1065, 13, 50600], "temperature": 0.0, "avg_logprob": -0.13811103275844028, "compression_ratio": 1.7124600638977636, "no_speech_prob": 0.002396621275693178}, {"id": 37, "seek": 11368, "start": 118.4, "end": 120.76, "text": " So that, too, was how we spent this past week.", "tokens": [50600, 407, 300, 11, 886, 11, 390, 577, 321, 4418, 341, 1791, 1243, 13, 50718], "temperature": 0.0, "avg_logprob": -0.13811103275844028, "compression_ratio": 1.7124600638977636, "no_speech_prob": 0.002396621275693178}, {"id": 38, "seek": 11368, "start": 120.76, "end": 123.60000000000001, "text": " All right, so how are we going to spend this week and the weeks to come?", "tokens": [50718, 1057, 558, 11, 370, 577, 366, 321, 516, 281, 3496, 341, 1243, 293, 264, 3259, 281, 808, 30, 50860], "temperature": 0.0, "avg_logprob": -0.13811103275844028, "compression_ratio": 1.7124600638977636, "no_speech_prob": 0.002396621275693178}, {"id": 39, "seek": 11368, "start": 123.60000000000001, "end": 126.68, "text": " So you'll recall that when we transitioned from scratch to C,", "tokens": [50860, 407, 291, 603, 9901, 300, 562, 321, 47346, 490, 8459, 281, 383, 11, 51014], "temperature": 0.0, "avg_logprob": -0.13811103275844028, "compression_ratio": 1.7124600638977636, "no_speech_prob": 0.002396621275693178}, {"id": 40, "seek": 11368, "start": 126.68, "end": 129.44, "text": " we drew a couple of comparisons between syntax and features.", "tokens": [51014, 321, 12804, 257, 1916, 295, 33157, 1296, 28431, 293, 4122, 13, 51152], "temperature": 0.0, "avg_logprob": -0.13811103275844028, "compression_ratio": 1.7124600638977636, "no_speech_prob": 0.002396621275693178}, {"id": 41, "seek": 11368, "start": 129.44, "end": 132.12, "text": " And I thought it'd be useful to take that same approach here really", "tokens": [51152, 400, 286, 1194, 309, 1116, 312, 4420, 281, 747, 300, 912, 3109, 510, 534, 51286], "temperature": 0.0, "avg_logprob": -0.13811103275844028, "compression_ratio": 1.7124600638977636, "no_speech_prob": 0.002396621275693178}, {"id": 42, "seek": 11368, "start": 132.12, "end": 134.88, "text": " to emphasize that most of the ideas we're going to explore today", "tokens": [51286, 281, 16078, 300, 881, 295, 264, 3487, 321, 434, 516, 281, 6839, 965, 51424], "temperature": 0.0, "avg_logprob": -0.13811103275844028, "compression_ratio": 1.7124600638977636, "no_speech_prob": 0.002396621275693178}, {"id": 43, "seek": 11368, "start": 134.88, "end": 135.96, "text": " are themselves not new.", "tokens": [51424, 366, 2969, 406, 777, 13, 51478], "temperature": 0.0, "avg_logprob": -0.13811103275844028, "compression_ratio": 1.7124600638977636, "no_speech_prob": 0.002396621275693178}, {"id": 44, "seek": 11368, "start": 135.96, "end": 139.52, "text": " It's just how you express them and how you write the syntax in the language,", "tokens": [51478, 467, 311, 445, 577, 291, 5109, 552, 293, 577, 291, 2464, 264, 28431, 294, 264, 2856, 11, 51656], "temperature": 0.0, "avg_logprob": -0.13811103275844028, "compression_ratio": 1.7124600638977636, "no_speech_prob": 0.002396621275693178}, {"id": 45, "seek": 13952, "start": 139.52, "end": 143.72, "text": " known as Python, that's indeed going to be different from scratch, from C.", "tokens": [50364, 2570, 382, 15329, 11, 300, 311, 6451, 516, 281, 312, 819, 490, 8459, 11, 490, 383, 13, 50574], "temperature": 0.0, "avg_logprob": -0.14377601726635084, "compression_ratio": 1.7532467532467533, "no_speech_prob": 0.03020983189344406}, {"id": 46, "seek": 13952, "start": 143.72, "end": 145.28, "text": " And now here we are with Python.", "tokens": [50574, 400, 586, 510, 321, 366, 365, 15329, 13, 50652], "temperature": 0.0, "avg_logprob": -0.14377601726635084, "compression_ratio": 1.7532467532467533, "no_speech_prob": 0.03020983189344406}, {"id": 47, "seek": 13952, "start": 145.28, "end": 150.20000000000002, "text": " So back in the day, in week 0, when you wanted to say something in scratch,", "tokens": [50652, 407, 646, 294, 264, 786, 11, 294, 1243, 1958, 11, 562, 291, 1415, 281, 584, 746, 294, 8459, 11, 50898], "temperature": 0.0, "avg_logprob": -0.14377601726635084, "compression_ratio": 1.7532467532467533, "no_speech_prob": 0.03020983189344406}, {"id": 48, "seek": 13952, "start": 150.20000000000002, "end": 152.88, "text": " you would literally use this purple puzzle piece, say hello.", "tokens": [50898, 291, 576, 3736, 764, 341, 9656, 12805, 2522, 11, 584, 7751, 13, 51032], "temperature": 0.0, "avg_logprob": -0.14377601726635084, "compression_ratio": 1.7532467532467533, "no_speech_prob": 0.03020983189344406}, {"id": 49, "seek": 13952, "start": 152.88, "end": 155.24, "text": " And we called that a function or a statement.", "tokens": [51032, 400, 321, 1219, 300, 257, 2445, 420, 257, 5629, 13, 51150], "temperature": 0.0, "avg_logprob": -0.14377601726635084, "compression_ratio": 1.7532467532467533, "no_speech_prob": 0.03020983189344406}, {"id": 50, "seek": 13952, "start": 155.24, "end": 156.76000000000002, "text": " It was some kind of verb action.", "tokens": [51150, 467, 390, 512, 733, 295, 9595, 3069, 13, 51226], "temperature": 0.0, "avg_logprob": -0.14377601726635084, "compression_ratio": 1.7532467532467533, "no_speech_prob": 0.03020983189344406}, {"id": 51, "seek": 13952, "start": 156.76000000000002, "end": 159.20000000000002, "text": " And in C, of course, it looked a little something like this.", "tokens": [51226, 400, 294, 383, 11, 295, 1164, 11, 309, 2956, 257, 707, 746, 411, 341, 13, 51348], "temperature": 0.0, "avg_logprob": -0.14377601726635084, "compression_ratio": 1.7532467532467533, "no_speech_prob": 0.03020983189344406}, {"id": 52, "seek": 13952, "start": 159.20000000000002, "end": 163.08, "text": " Henceforth, starting today in Python, it's going to look like this.", "tokens": [51348, 22229, 44779, 11, 2891, 965, 294, 15329, 11, 309, 311, 516, 281, 574, 411, 341, 13, 51542], "temperature": 0.0, "avg_logprob": -0.14377601726635084, "compression_ratio": 1.7532467532467533, "no_speech_prob": 0.03020983189344406}, {"id": 53, "seek": 13952, "start": 163.08, "end": 167.0, "text": " So before, after, before, after.", "tokens": [51542, 407, 949, 11, 934, 11, 949, 11, 934, 13, 51738], "temperature": 0.0, "avg_logprob": -0.14377601726635084, "compression_ratio": 1.7532467532467533, "no_speech_prob": 0.03020983189344406}, {"id": 54, "seek": 13952, "start": 167.0, "end": 169.28, "text": " So it's pretty easy to visually diff these two things.", "tokens": [51738, 407, 309, 311, 1238, 1858, 281, 19622, 7593, 613, 732, 721, 13, 51852], "temperature": 0.0, "avg_logprob": -0.14377601726635084, "compression_ratio": 1.7532467532467533, "no_speech_prob": 0.03020983189344406}, {"id": 55, "seek": 16928, "start": 169.28, "end": 171.36, "text": " But what are just a couple of the differences that jump out at you", "tokens": [50364, 583, 437, 366, 445, 257, 1916, 295, 264, 7300, 300, 3012, 484, 412, 291, 50468], "temperature": 0.0, "avg_logprob": -0.24392174674080802, "compression_ratio": 1.6417445482866044, "no_speech_prob": 0.0006878178101032972}, {"id": 56, "seek": 16928, "start": 171.36, "end": 172.32, "text": " immediately?", "tokens": [50468, 4258, 30, 50516], "temperature": 0.0, "avg_logprob": -0.24392174674080802, "compression_ratio": 1.6417445482866044, "no_speech_prob": 0.0006878178101032972}, {"id": 57, "seek": 16928, "start": 172.32, "end": 173.96, "text": " See?", "tokens": [50516, 3008, 30, 50598], "temperature": 0.0, "avg_logprob": -0.24392174674080802, "compression_ratio": 1.6417445482866044, "no_speech_prob": 0.0006878178101032972}, {"id": 58, "seek": 16928, "start": 173.96, "end": 174.44, "text": " Python.", "tokens": [50598, 15329, 13, 50622], "temperature": 0.0, "avg_logprob": -0.24392174674080802, "compression_ratio": 1.6417445482866044, "no_speech_prob": 0.0006878178101032972}, {"id": 59, "seek": 16928, "start": 177.38, "end": 179.72, "text": " So there's no more backslash N, it would seem, in this context.", "tokens": [50769, 407, 456, 311, 572, 544, 646, 10418, 1299, 426, 11, 309, 576, 1643, 11, 294, 341, 4319, 13, 50886], "temperature": 0.0, "avg_logprob": -0.24392174674080802, "compression_ratio": 1.6417445482866044, "no_speech_prob": 0.0006878178101032972}, {"id": 60, "seek": 16928, "start": 179.72, "end": 182.08, "text": " So that's kind of a nice relief to not have to type anymore.", "tokens": [50886, 407, 300, 311, 733, 295, 257, 1481, 10915, 281, 406, 362, 281, 2010, 3602, 13, 51004], "temperature": 0.0, "avg_logprob": -0.24392174674080802, "compression_ratio": 1.6417445482866044, "no_speech_prob": 0.0006878178101032972}, {"id": 61, "seek": 16928, "start": 182.08, "end": 184.4, "text": " What else seems to be different?", "tokens": [51004, 708, 1646, 2544, 281, 312, 819, 30, 51120], "temperature": 0.0, "avg_logprob": -0.24392174674080802, "compression_ratio": 1.6417445482866044, "no_speech_prob": 0.0006878178101032972}, {"id": 62, "seek": 16928, "start": 184.4, "end": 186.08, "text": " No semicolon, thank god, right?", "tokens": [51120, 883, 27515, 38780, 11, 1309, 3044, 11, 558, 30, 51204], "temperature": 0.0, "avg_logprob": -0.24392174674080802, "compression_ratio": 1.6417445482866044, "no_speech_prob": 0.0006878178101032972}, {"id": 63, "seek": 16928, "start": 186.08, "end": 187.72, "text": " Perhaps the stupidest source of frustration", "tokens": [51204, 10517, 264, 6631, 377, 4009, 295, 20491, 51286], "temperature": 0.0, "avg_logprob": -0.24392174674080802, "compression_ratio": 1.6417445482866044, "no_speech_prob": 0.0006878178101032972}, {"id": 64, "seek": 16928, "start": 187.72, "end": 191.92000000000002, "text": " that you might have experienced by just omitting one of those and someone over here?", "tokens": [51286, 300, 291, 1062, 362, 6751, 538, 445, 3406, 2414, 472, 295, 729, 293, 1580, 670, 510, 30, 51496], "temperature": 0.0, "avg_logprob": -0.24392174674080802, "compression_ratio": 1.6417445482866044, "no_speech_prob": 0.0006878178101032972}, {"id": 65, "seek": 16928, "start": 191.92000000000002, "end": 195.84, "text": " Yeah, so printf is now just print, which is pretty reasonable unto itself.", "tokens": [51496, 865, 11, 370, 4482, 69, 307, 586, 445, 4482, 11, 597, 307, 1238, 10585, 16521, 2564, 13, 51692], "temperature": 0.0, "avg_logprob": -0.24392174674080802, "compression_ratio": 1.6417445482866044, "no_speech_prob": 0.0006878178101032972}, {"id": 66, "seek": 16928, "start": 195.84, "end": 198.16, "text": " So these are terribly minor differences.", "tokens": [51692, 407, 613, 366, 22903, 6696, 7300, 13, 51808], "temperature": 0.0, "avg_logprob": -0.24392174674080802, "compression_ratio": 1.6417445482866044, "no_speech_prob": 0.0006878178101032972}, {"id": 67, "seek": 19816, "start": 198.16, "end": 200.79999999999998, "text": " But it's sort of testament to the kinds of mental adjustments", "tokens": [50364, 583, 309, 311, 1333, 295, 35499, 281, 264, 3685, 295, 4973, 18624, 50496], "temperature": 0.0, "avg_logprob": -0.1508562286178787, "compression_ratio": 1.6986301369863013, "no_speech_prob": 0.0002304999652551487}, {"id": 68, "seek": 19816, "start": 200.79999999999998, "end": 202.12, "text": " you're going to have to start to make.", "tokens": [50496, 291, 434, 516, 281, 362, 281, 722, 281, 652, 13, 50562], "temperature": 0.0, "avg_logprob": -0.1508562286178787, "compression_ratio": 1.6986301369863013, "no_speech_prob": 0.0002304999652551487}, {"id": 69, "seek": 19816, "start": 202.12, "end": 204.72, "text": " Fortunately, thus far, we've seen that you can start leaving things off,", "tokens": [50562, 20652, 11, 8807, 1400, 11, 321, 600, 1612, 300, 291, 393, 722, 5012, 721, 766, 11, 50692], "temperature": 0.0, "avg_logprob": -0.1508562286178787, "compression_ratio": 1.6986301369863013, "no_speech_prob": 0.0002304999652551487}, {"id": 70, "seek": 19816, "start": 204.72, "end": 206.51999999999998, "text": " which is actually a guiding principle of Python", "tokens": [50692, 597, 307, 767, 257, 25061, 8665, 295, 15329, 50782], "temperature": 0.0, "avg_logprob": -0.1508562286178787, "compression_ratio": 1.6986301369863013, "no_speech_prob": 0.0002304999652551487}, {"id": 71, "seek": 19816, "start": 206.51999999999998, "end": 209.44, "text": " and that one of its goals is meant to be easier to write than some", "tokens": [50782, 293, 300, 472, 295, 1080, 5493, 307, 4140, 281, 312, 3571, 281, 2464, 813, 512, 50928], "temperature": 0.0, "avg_logprob": -0.1508562286178787, "compression_ratio": 1.6986301369863013, "no_speech_prob": 0.0002304999652551487}, {"id": 72, "seek": 19816, "start": 209.44, "end": 211.4, "text": " of its predecessors among them C.", "tokens": [50928, 295, 1080, 24874, 45700, 3654, 552, 383, 13, 51026], "temperature": 0.0, "avg_logprob": -0.1508562286178787, "compression_ratio": 1.6986301369863013, "no_speech_prob": 0.0002304999652551487}, {"id": 73, "seek": 19816, "start": 211.4, "end": 215.96, "text": " So in C, we might have implemented this Hello World program that actually", "tokens": [51026, 407, 294, 383, 11, 321, 1062, 362, 12270, 341, 2425, 3937, 1461, 300, 767, 51254], "temperature": 0.0, "avg_logprob": -0.1508562286178787, "compression_ratio": 1.6986301369863013, "no_speech_prob": 0.0002304999652551487}, {"id": 74, "seek": 19816, "start": 215.96, "end": 218.76, "text": " ran when you click the green flag using code like that at the right.", "tokens": [51254, 5872, 562, 291, 2052, 264, 3092, 7166, 1228, 3089, 411, 300, 412, 264, 558, 13, 51394], "temperature": 0.0, "avg_logprob": -0.1508562286178787, "compression_ratio": 1.6986301369863013, "no_speech_prob": 0.0002304999652551487}, {"id": 75, "seek": 19816, "start": 218.76, "end": 222.51999999999998, "text": " And this was, if those of you had no programming experience coming in to CS50,", "tokens": [51394, 400, 341, 390, 11, 498, 729, 295, 291, 632, 572, 9410, 1752, 1348, 294, 281, 9460, 2803, 11, 51582], "temperature": 0.0, "avg_logprob": -0.1508562286178787, "compression_ratio": 1.6986301369863013, "no_speech_prob": 0.0002304999652551487}, {"id": 76, "seek": 19816, "start": 222.51999999999998, "end": 226.24, "text": " what probably looked like the proverbial grief to you just a few weeks ago.", "tokens": [51582, 437, 1391, 2956, 411, 264, 49923, 831, 18998, 281, 291, 445, 257, 1326, 3259, 2057, 13, 51768], "temperature": 0.0, "avg_logprob": -0.1508562286178787, "compression_ratio": 1.6986301369863013, "no_speech_prob": 0.0002304999652551487}, {"id": 77, "seek": 22624, "start": 226.24, "end": 228.48000000000002, "text": " And we teased apart what those various lines meant.", "tokens": [50364, 400, 321, 535, 1937, 4936, 437, 729, 3683, 3876, 4140, 13, 50476], "temperature": 0.0, "avg_logprob": -0.15708279430418087, "compression_ratio": 1.6912280701754385, "no_speech_prob": 0.003483276814222336}, {"id": 78, "seek": 22624, "start": 228.48000000000002, "end": 229.92000000000002, "text": " But in Python, guess what?", "tokens": [50476, 583, 294, 15329, 11, 2041, 437, 30, 50548], "temperature": 0.0, "avg_logprob": -0.15708279430418087, "compression_ratio": 1.6912280701754385, "no_speech_prob": 0.003483276814222336}, {"id": 79, "seek": 22624, "start": 229.92000000000002, "end": 233.20000000000002, "text": " If you want to write a program whose purpose in life is to say Hello,", "tokens": [50548, 759, 291, 528, 281, 2464, 257, 1461, 6104, 4334, 294, 993, 307, 281, 584, 2425, 11, 50712], "temperature": 0.0, "avg_logprob": -0.15708279430418087, "compression_ratio": 1.6912280701754385, "no_speech_prob": 0.003483276814222336}, {"id": 80, "seek": 22624, "start": 233.20000000000002, "end": 236.44, "text": " we'll just write def main print Hello World.", "tokens": [50712, 321, 603, 445, 2464, 1060, 2135, 4482, 2425, 3937, 13, 50874], "temperature": 0.0, "avg_logprob": -0.15708279430418087, "compression_ratio": 1.6912280701754385, "no_speech_prob": 0.003483276814222336}, {"id": 81, "seek": 22624, "start": 236.44, "end": 239.04000000000002, "text": " So it's a little similar, structurally structured.", "tokens": [50874, 407, 309, 311, 257, 707, 2531, 11, 6594, 6512, 18519, 13, 51004], "temperature": 0.0, "avg_logprob": -0.15708279430418087, "compression_ratio": 1.6912280701754385, "no_speech_prob": 0.003483276814222336}, {"id": 82, "seek": 22624, "start": 239.04000000000002, "end": 244.56, "text": " And in fact, it does not lack for some of the more arcane syntax here,", "tokens": [51004, 400, 294, 1186, 11, 309, 775, 406, 5011, 337, 512, 295, 264, 544, 10346, 1929, 28431, 510, 11, 51280], "temperature": 0.0, "avg_logprob": -0.15708279430418087, "compression_ratio": 1.6912280701754385, "no_speech_prob": 0.003483276814222336}, {"id": 83, "seek": 22624, "start": 244.56, "end": 247.04000000000002, "text": " but we'll see soon what this actually means.", "tokens": [51280, 457, 321, 603, 536, 2321, 437, 341, 767, 1355, 13, 51404], "temperature": 0.0, "avg_logprob": -0.15708279430418087, "compression_ratio": 1.6912280701754385, "no_speech_prob": 0.003483276814222336}, {"id": 84, "seek": 22624, "start": 247.04000000000002, "end": 249.56, "text": " But it's a little simpler than the one before.", "tokens": [51404, 583, 309, 311, 257, 707, 18587, 813, 264, 472, 949, 13, 51530], "temperature": 0.0, "avg_logprob": -0.15708279430418087, "compression_ratio": 1.6912280701754385, "no_speech_prob": 0.003483276814222336}, {"id": 85, "seek": 22624, "start": 249.56, "end": 250.60000000000002, "text": " And let's tease this apart.", "tokens": [51530, 400, 718, 311, 30444, 341, 4936, 13, 51582], "temperature": 0.0, "avg_logprob": -0.15708279430418087, "compression_ratio": 1.6912280701754385, "no_speech_prob": 0.003483276814222336}, {"id": 86, "seek": 22624, "start": 250.60000000000002, "end": 253.20000000000002, "text": " So def here simply means define me a function.", "tokens": [51582, 407, 1060, 510, 2935, 1355, 6964, 385, 257, 2445, 13, 51712], "temperature": 0.0, "avg_logprob": -0.15708279430418087, "compression_ratio": 1.6912280701754385, "no_speech_prob": 0.003483276814222336}, {"id": 87, "seek": 25320, "start": 253.2, "end": 257.12, "text": " So whereas in C, we've historically seen that you specify the type", "tokens": [50364, 407, 9735, 294, 383, 11, 321, 600, 16180, 1612, 300, 291, 16500, 264, 2010, 50560], "temperature": 0.0, "avg_logprob": -0.11998527526855468, "compression_ratio": 1.8220064724919094, "no_speech_prob": 0.002182562602683902}, {"id": 88, "seek": 25320, "start": 257.12, "end": 258.4, "text": " that the function should return.", "tokens": [50560, 300, 264, 2445, 820, 2736, 13, 50624], "temperature": 0.0, "avg_logprob": -0.11998527526855468, "compression_ratio": 1.8220064724919094, "no_speech_prob": 0.002182562602683902}, {"id": 89, "seek": 25320, "start": 258.4, "end": 260.59999999999997, "text": " We're not going to do that in Python anymore.", "tokens": [50624, 492, 434, 406, 516, 281, 360, 300, 294, 15329, 3602, 13, 50734], "temperature": 0.0, "avg_logprob": -0.11998527526855468, "compression_ratio": 1.8220064724919094, "no_speech_prob": 0.002182562602683902}, {"id": 90, "seek": 25320, "start": 260.59999999999997, "end": 262.0, "text": " Python still has data types.", "tokens": [50734, 15329, 920, 575, 1412, 3467, 13, 50804], "temperature": 0.0, "avg_logprob": -0.11998527526855468, "compression_ratio": 1.8220064724919094, "no_speech_prob": 0.002182562602683902}, {"id": 91, "seek": 25320, "start": 262.0, "end": 265.15999999999997, "text": " But we're not going to explicitly mention what data types we're using.", "tokens": [50804, 583, 321, 434, 406, 516, 281, 20803, 2152, 437, 1412, 3467, 321, 434, 1228, 13, 50962], "temperature": 0.0, "avg_logprob": -0.11998527526855468, "compression_ratio": 1.8220064724919094, "no_speech_prob": 0.002182562602683902}, {"id": 92, "seek": 25320, "start": 265.15999999999997, "end": 266.92, "text": " Meanwhile, here is the name of the function.", "tokens": [50962, 13879, 11, 510, 307, 264, 1315, 295, 264, 2445, 13, 51050], "temperature": 0.0, "avg_logprob": -0.11998527526855468, "compression_ratio": 1.8220064724919094, "no_speech_prob": 0.002182562602683902}, {"id": 93, "seek": 25320, "start": 266.92, "end": 268.12, "text": " And main would be a convention.", "tokens": [51050, 400, 2135, 576, 312, 257, 10286, 13, 51110], "temperature": 0.0, "avg_logprob": -0.11998527526855468, "compression_ratio": 1.8220064724919094, "no_speech_prob": 0.002182562602683902}, {"id": 94, "seek": 25320, "start": 268.12, "end": 271.4, "text": " But it's not built into the language in the same way as it is in C,", "tokens": [51110, 583, 309, 311, 406, 3094, 666, 264, 2856, 294, 264, 912, 636, 382, 309, 307, 294, 383, 11, 51274], "temperature": 0.0, "avg_logprob": -0.11998527526855468, "compression_ratio": 1.8220064724919094, "no_speech_prob": 0.002182562602683902}, {"id": 95, "seek": 25320, "start": 271.4, "end": 272.88, "text": " as we shall see.", "tokens": [51274, 382, 321, 4393, 536, 13, 51348], "temperature": 0.0, "avg_logprob": -0.11998527526855468, "compression_ratio": 1.8220064724919094, "no_speech_prob": 0.002182562602683902}, {"id": 96, "seek": 25320, "start": 272.88, "end": 276.03999999999996, "text": " Meanwhile, this silly incantation is just a way", "tokens": [51348, 13879, 11, 341, 11774, 834, 394, 399, 307, 445, 257, 636, 51506], "temperature": 0.0, "avg_logprob": -0.11998527526855468, "compression_ratio": 1.8220064724919094, "no_speech_prob": 0.002182562602683902}, {"id": 97, "seek": 25320, "start": 276.03999999999996, "end": 279.68, "text": " of ensuring that the default function to be executed in a Python program", "tokens": [51506, 295, 16882, 300, 264, 7576, 2445, 281, 312, 17577, 294, 257, 15329, 1461, 51688], "temperature": 0.0, "avg_logprob": -0.11998527526855468, "compression_ratio": 1.8220064724919094, "no_speech_prob": 0.002182562602683902}, {"id": 98, "seek": 25320, "start": 279.68, "end": 281.32, "text": " is indeed going to be called main.", "tokens": [51688, 307, 6451, 516, 281, 312, 1219, 2135, 13, 51770], "temperature": 0.0, "avg_logprob": -0.11998527526855468, "compression_ratio": 1.8220064724919094, "no_speech_prob": 0.002182562602683902}, {"id": 99, "seek": 28132, "start": 281.32, "end": 283.68, "text": " But more on that when we actually start creating.", "tokens": [50364, 583, 544, 322, 300, 562, 321, 767, 722, 4084, 13, 50482], "temperature": 0.0, "avg_logprob": -0.15125038393082157, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.0006461828015744686}, {"id": 100, "seek": 28132, "start": 283.68, "end": 286.76, "text": " But this is perhaps the most subtle but most important difference,", "tokens": [50482, 583, 341, 307, 4317, 264, 881, 13743, 457, 881, 1021, 2649, 11, 50636], "temperature": 0.0, "avg_logprob": -0.15125038393082157, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.0006461828015744686}, {"id": 101, "seek": 28132, "start": 286.76, "end": 287.96, "text": " at least early on.", "tokens": [50636, 412, 1935, 2440, 322, 13, 50696], "temperature": 0.0, "avg_logprob": -0.15125038393082157, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.0006461828015744686}, {"id": 102, "seek": 28132, "start": 287.96, "end": 289.52, "text": " And it's even hard to see at this scale.", "tokens": [50696, 400, 309, 311, 754, 1152, 281, 536, 412, 341, 4373, 13, 50774], "temperature": 0.0, "avg_logprob": -0.15125038393082157, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.0006461828015744686}, {"id": 103, "seek": 28132, "start": 289.52, "end": 293.56, "text": " But notice the colons, both here and here, that I've highlighted now", "tokens": [50774, 583, 3449, 264, 1173, 892, 11, 1293, 510, 293, 510, 11, 300, 286, 600, 17173, 586, 50976], "temperature": 0.0, "avg_logprob": -0.15125038393082157, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.0006461828015744686}, {"id": 104, "seek": 28132, "start": 293.56, "end": 295.71999999999997, "text": " in yellow, and these dots, which are not to be typed,", "tokens": [50976, 294, 5566, 11, 293, 613, 15026, 11, 597, 366, 406, 281, 312, 33941, 11, 51084], "temperature": 0.0, "avg_logprob": -0.15125038393082157, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.0006461828015744686}, {"id": 105, "seek": 28132, "start": 295.71999999999997, "end": 298.76, "text": " but are just meant to draw your attention to the fact that I hit the space bar four", "tokens": [51084, 457, 366, 445, 4140, 281, 2642, 428, 3202, 281, 264, 1186, 300, 286, 2045, 264, 1901, 2159, 1451, 51236], "temperature": 0.0, "avg_logprob": -0.15125038393082157, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.0006461828015744686}, {"id": 106, "seek": 28132, "start": 298.76, "end": 300.8, "text": " times in those locations.", "tokens": [51236, 1413, 294, 729, 9253, 13, 51338], "temperature": 0.0, "avg_logprob": -0.15125038393082157, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.0006461828015744686}, {"id": 107, "seek": 28132, "start": 300.8, "end": 304.84, "text": " So if you have ever sort of gotten some feedback from your TA or TF,", "tokens": [51338, 407, 498, 291, 362, 1562, 1333, 295, 5768, 512, 5824, 490, 428, 20094, 420, 40964, 11, 51540], "temperature": 0.0, "avg_logprob": -0.15125038393082157, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.0006461828015744686}, {"id": 108, "seek": 28132, "start": 304.84, "end": 308.28, "text": " that your style could be better, closer to five out of five,", "tokens": [51540, 300, 428, 3758, 727, 312, 1101, 11, 4966, 281, 1732, 484, 295, 1732, 11, 51712], "temperature": 0.0, "avg_logprob": -0.15125038393082157, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.0006461828015744686}, {"id": 109, "seek": 28132, "start": 308.28, "end": 310.92, "text": " because of lack of indentation or pretty formatting.", "tokens": [51712, 570, 295, 5011, 295, 44494, 399, 420, 1238, 39366, 13, 51844], "temperature": 0.0, "avg_logprob": -0.15125038393082157, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.0006461828015744686}, {"id": 110, "seek": 31092, "start": 310.96000000000004, "end": 313.0, "text": " Python's actually going to help us out with this.", "tokens": [50366, 15329, 311, 767, 516, 281, 854, 505, 484, 365, 341, 13, 50468], "temperature": 0.0, "avg_logprob": -0.1223863917072927, "compression_ratio": 1.7581699346405228, "no_speech_prob": 0.00036828708834946156}, {"id": 111, "seek": 31092, "start": 313.0, "end": 317.92, "text": " So Python code will not run if you have not indented things properly.", "tokens": [50468, 407, 15329, 3089, 486, 406, 1190, 498, 291, 362, 406, 1016, 6003, 721, 6108, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1223863917072927, "compression_ratio": 1.7581699346405228, "no_speech_prob": 0.00036828708834946156}, {"id": 112, "seek": 31092, "start": 317.92, "end": 322.40000000000003, "text": " So gone are the curly braces that encapsulate related lines of code", "tokens": [50714, 407, 2780, 366, 264, 32066, 41537, 300, 38745, 5256, 4077, 3876, 295, 3089, 50938], "temperature": 0.0, "avg_logprob": -0.1223863917072927, "compression_ratio": 1.7581699346405228, "no_speech_prob": 0.00036828708834946156}, {"id": 113, "seek": 31092, "start": 322.40000000000003, "end": 325.16, "text": " within some block of functionality, and instead they're", "tokens": [50938, 1951, 512, 3461, 295, 14980, 11, 293, 2602, 436, 434, 51076], "temperature": 0.0, "avg_logprob": -0.1223863917072927, "compression_ratio": 1.7581699346405228, "no_speech_prob": 0.00036828708834946156}, {"id": 114, "seek": 31092, "start": 325.16, "end": 327.72, "text": " replaced generally with this general structure.", "tokens": [51076, 10772, 5101, 365, 341, 2674, 3877, 13, 51204], "temperature": 0.0, "avg_logprob": -0.1223863917072927, "compression_ratio": 1.7581699346405228, "no_speech_prob": 0.00036828708834946156}, {"id": 115, "seek": 31092, "start": 327.72, "end": 330.32, "text": " You have a colon, and then below that and indented", "tokens": [51204, 509, 362, 257, 8255, 11, 293, 550, 2507, 300, 293, 1016, 6003, 51334], "temperature": 0.0, "avg_logprob": -0.1223863917072927, "compression_ratio": 1.7581699346405228, "no_speech_prob": 0.00036828708834946156}, {"id": 116, "seek": 31092, "start": 330.32, "end": 334.0, "text": " are all of the lines that are somehow related to that earlier line of code.", "tokens": [51334, 366, 439, 295, 264, 3876, 300, 366, 6063, 4077, 281, 300, 3071, 1622, 295, 3089, 13, 51518], "temperature": 0.0, "avg_logprob": -0.1223863917072927, "compression_ratio": 1.7581699346405228, "no_speech_prob": 0.00036828708834946156}, {"id": 117, "seek": 31092, "start": 334.0, "end": 336.0, "text": " And the indentation must be consistent.", "tokens": [51518, 400, 264, 44494, 399, 1633, 312, 8398, 13, 51618], "temperature": 0.0, "avg_logprob": -0.1223863917072927, "compression_ratio": 1.7581699346405228, "no_speech_prob": 0.00036828708834946156}, {"id": 118, "seek": 31092, "start": 336.0, "end": 340.68, "text": " So even though your own eye might not quite distinguish four spaces from three,", "tokens": [51618, 407, 754, 1673, 428, 1065, 3313, 1062, 406, 1596, 20206, 1451, 7673, 490, 1045, 11, 51852], "temperature": 0.0, "avg_logprob": -0.1223863917072927, "compression_ratio": 1.7581699346405228, "no_speech_prob": 0.00036828708834946156}, {"id": 119, "seek": 34068, "start": 340.68, "end": 343.08, "text": " the Python environment will.", "tokens": [50364, 264, 15329, 2823, 486, 13, 50484], "temperature": 0.0, "avg_logprob": -0.14387639793189796, "compression_ratio": 1.7748344370860927, "no_speech_prob": 0.00017952555208466947}, {"id": 120, "seek": 34068, "start": 343.08, "end": 346.72, "text": " And so this will actually help implicitly enforce better style,", "tokens": [50484, 400, 370, 341, 486, 767, 854, 26947, 356, 24825, 1101, 3758, 11, 50666], "temperature": 0.0, "avg_logprob": -0.14387639793189796, "compression_ratio": 1.7748344370860927, "no_speech_prob": 0.00017952555208466947}, {"id": 121, "seek": 34068, "start": 346.72, "end": 350.76, "text": " perhaps, than might have been easily done from the get go.", "tokens": [50666, 4317, 11, 813, 1062, 362, 668, 3612, 1096, 490, 264, 483, 352, 13, 50868], "temperature": 0.0, "avg_logprob": -0.14387639793189796, "compression_ratio": 1.7748344370860927, "no_speech_prob": 0.00017952555208466947}, {"id": 122, "seek": 34068, "start": 350.76, "end": 353.12, "text": " So then, of course, in Scratch, we had a forever block, which", "tokens": [50868, 407, 550, 11, 295, 1164, 11, 294, 34944, 852, 11, 321, 632, 257, 5680, 3461, 11, 597, 50986], "temperature": 0.0, "avg_logprob": -0.14387639793189796, "compression_ratio": 1.7748344370860927, "no_speech_prob": 0.00017952555208466947}, {"id": 123, "seek": 34068, "start": 353.12, "end": 354.36, "text": " says, hello world forever.", "tokens": [50986, 1619, 11, 7751, 1002, 5680, 13, 51048], "temperature": 0.0, "avg_logprob": -0.14387639793189796, "compression_ratio": 1.7748344370860927, "no_speech_prob": 0.00017952555208466947}, {"id": 124, "seek": 34068, "start": 354.36, "end": 356.52, "text": " Much like in C, we could implement it like this.", "tokens": [51048, 12313, 411, 294, 383, 11, 321, 727, 4445, 309, 411, 341, 13, 51156], "temperature": 0.0, "avg_logprob": -0.14387639793189796, "compression_ratio": 1.7748344370860927, "no_speech_prob": 0.00017952555208466947}, {"id": 125, "seek": 34068, "start": 356.52, "end": 358.56, "text": " Now there's actually pretty clean mapping in Python.", "tokens": [51156, 823, 456, 311, 767, 1238, 2541, 18350, 294, 15329, 13, 51258], "temperature": 0.0, "avg_logprob": -0.14387639793189796, "compression_ratio": 1.7748344370860927, "no_speech_prob": 0.00017952555208466947}, {"id": 126, "seek": 34068, "start": 358.56, "end": 361.48, "text": " We already know we can get rid of the semicolon.", "tokens": [51258, 492, 1217, 458, 321, 393, 483, 3973, 295, 264, 27515, 38780, 13, 51404], "temperature": 0.0, "avg_logprob": -0.14387639793189796, "compression_ratio": 1.7748344370860927, "no_speech_prob": 0.00017952555208466947}, {"id": 127, "seek": 34068, "start": 361.48, "end": 363.96000000000004, "text": " We already know we can get rid of the curly braces.", "tokens": [51404, 492, 1217, 458, 321, 393, 483, 3973, 295, 264, 32066, 41537, 13, 51528], "temperature": 0.0, "avg_logprob": -0.14387639793189796, "compression_ratio": 1.7748344370860927, "no_speech_prob": 0.00017952555208466947}, {"id": 128, "seek": 34068, "start": 363.96000000000004, "end": 366.48, "text": " We're going to have to add in a colon, but it turns out", "tokens": [51528, 492, 434, 516, 281, 362, 281, 909, 294, 257, 8255, 11, 457, 309, 4523, 484, 51654], "temperature": 0.0, "avg_logprob": -0.14387639793189796, "compression_ratio": 1.7748344370860927, "no_speech_prob": 0.00017952555208466947}, {"id": 129, "seek": 34068, "start": 366.48, "end": 368.36, "text": " we can get rid of a little more too.", "tokens": [51654, 321, 393, 483, 3973, 295, 257, 707, 544, 886, 13, 51748], "temperature": 0.0, "avg_logprob": -0.14387639793189796, "compression_ratio": 1.7748344370860927, "no_speech_prob": 0.00017952555208466947}, {"id": 130, "seek": 36836, "start": 368.36, "end": 374.44, "text": " So what more is absent from this translation of hello world to Python?", "tokens": [50364, 407, 437, 544, 307, 25185, 490, 341, 12853, 295, 7751, 1002, 281, 15329, 30, 50668], "temperature": 0.0, "avg_logprob": -0.20792495793309704, "compression_ratio": 1.625, "no_speech_prob": 0.0001910998107632622}, {"id": 131, "seek": 36836, "start": 374.44, "end": 377.04, "text": " This one's more subtle.", "tokens": [50668, 639, 472, 311, 544, 13743, 13, 50798], "temperature": 0.0, "avg_logprob": -0.20792495793309704, "compression_ratio": 1.625, "no_speech_prob": 0.0001910998107632622}, {"id": 132, "seek": 36836, "start": 377.04, "end": 378.92, "text": " So we definitely got rid of the curly braces,", "tokens": [50798, 407, 321, 2138, 658, 3973, 295, 264, 32066, 41537, 11, 50892], "temperature": 0.0, "avg_logprob": -0.20792495793309704, "compression_ratio": 1.625, "no_speech_prob": 0.0001910998107632622}, {"id": 133, "seek": 36836, "start": 378.92, "end": 380.40000000000003, "text": " relying now just on indentation.", "tokens": [50892, 24140, 586, 445, 322, 44494, 399, 13, 50966], "temperature": 0.0, "avg_logprob": -0.20792495793309704, "compression_ratio": 1.625, "no_speech_prob": 0.0001910998107632622}, {"id": 134, "seek": 36836, "start": 384.28000000000003, "end": 386.32, "text": " OK, so there's no parentheses around while.", "tokens": [51160, 2264, 11, 370, 456, 311, 572, 34153, 926, 1339, 13, 51262], "temperature": 0.0, "avg_logprob": -0.20792495793309704, "compression_ratio": 1.625, "no_speech_prob": 0.0001910998107632622}, {"id": 135, "seek": 36836, "start": 386.32, "end": 389.44, "text": " And so this, too, is actually meant to be a feature of Python.", "tokens": [51262, 400, 370, 341, 11, 886, 11, 307, 767, 4140, 281, 312, 257, 4111, 295, 15329, 13, 51418], "temperature": 0.0, "avg_logprob": -0.20792495793309704, "compression_ratio": 1.625, "no_speech_prob": 0.0001910998107632622}, {"id": 136, "seek": 36836, "start": 389.44, "end": 392.24, "text": " If you don't logically need parentheses to enforce", "tokens": [51418, 759, 291, 500, 380, 38887, 643, 34153, 281, 24825, 51558], "temperature": 0.0, "avg_logprob": -0.20792495793309704, "compression_ratio": 1.625, "no_speech_prob": 0.0001910998107632622}, {"id": 137, "seek": 36836, "start": 392.24, "end": 396.16, "text": " order of operations, like in arithmetic or the like, then don't use them,", "tokens": [51558, 1668, 295, 7705, 11, 411, 294, 42973, 420, 264, 411, 11, 550, 500, 380, 764, 552, 11, 51754], "temperature": 0.0, "avg_logprob": -0.20792495793309704, "compression_ratio": 1.625, "no_speech_prob": 0.0001910998107632622}, {"id": 138, "seek": 36836, "start": 396.16, "end": 397.52000000000004, "text": " because they're just an distraction.", "tokens": [51754, 570, 436, 434, 445, 364, 30217, 13, 51822], "temperature": 0.0, "avg_logprob": -0.20792495793309704, "compression_ratio": 1.625, "no_speech_prob": 0.0001910998107632622}, {"id": 139, "seek": 39752, "start": 397.52, "end": 398.56, "text": " They're just more to type.", "tokens": [50364, 814, 434, 445, 544, 281, 2010, 13, 50416], "temperature": 0.0, "avg_logprob": -0.1510982962215648, "compression_ratio": 1.6843501326259946, "no_speech_prob": 0.0010004716459661722}, {"id": 140, "seek": 39752, "start": 398.56, "end": 401.91999999999996, "text": " And the code now is just visually cleaner and easier to read.", "tokens": [50416, 400, 264, 3089, 586, 307, 445, 19622, 16532, 293, 3571, 281, 1401, 13, 50584], "temperature": 0.0, "avg_logprob": -0.1510982962215648, "compression_ratio": 1.6843501326259946, "no_speech_prob": 0.0010004716459661722}, {"id": 141, "seek": 39752, "start": 401.91999999999996, "end": 403.2, "text": " There's a minor difference, too.", "tokens": [50584, 821, 311, 257, 6696, 2649, 11, 886, 13, 50648], "temperature": 0.0, "avg_logprob": -0.1510982962215648, "compression_ratio": 1.6843501326259946, "no_speech_prob": 0.0010004716459661722}, {"id": 142, "seek": 39752, "start": 403.2, "end": 405.52, "text": " True and false are going to be capitalized in Python,", "tokens": [50648, 13587, 293, 7908, 366, 516, 281, 312, 4238, 1602, 294, 15329, 11, 50764], "temperature": 0.0, "avg_logprob": -0.1510982962215648, "compression_ratio": 1.6843501326259946, "no_speech_prob": 0.0010004716459661722}, {"id": 143, "seek": 39752, "start": 405.52, "end": 407.52, "text": " but that's a fairly incidental detail.", "tokens": [50764, 457, 300, 311, 257, 6457, 9348, 304, 2607, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1510982962215648, "compression_ratio": 1.6843501326259946, "no_speech_prob": 0.0010004716459661722}, {"id": 144, "seek": 39752, "start": 407.52, "end": 409.96, "text": " But notice this kind of captures already the spirit of Python.", "tokens": [50864, 583, 3449, 341, 733, 295, 27986, 1217, 264, 3797, 295, 15329, 13, 50986], "temperature": 0.0, "avg_logprob": -0.1510982962215648, "compression_ratio": 1.6843501326259946, "no_speech_prob": 0.0010004716459661722}, {"id": 145, "seek": 39752, "start": 409.96, "end": 412.44, "text": " It's not a huge leap to go from one to the other,", "tokens": [50986, 467, 311, 406, 257, 2603, 19438, 281, 352, 490, 472, 281, 264, 661, 11, 51110], "temperature": 0.0, "avg_logprob": -0.1510982962215648, "compression_ratio": 1.6843501326259946, "no_speech_prob": 0.0010004716459661722}, {"id": 146, "seek": 39752, "start": 412.44, "end": 414.91999999999996, "text": " but we've just kind of started to get rid of some of the clutter", "tokens": [51110, 457, 321, 600, 445, 733, 295, 1409, 281, 483, 3973, 295, 512, 295, 264, 40614, 51234], "temperature": 0.0, "avg_logprob": -0.1510982962215648, "compression_ratio": 1.6843501326259946, "no_speech_prob": 0.0010004716459661722}, {"id": 147, "seek": 39752, "start": 414.91999999999996, "end": 417.03999999999996, "text": " and the stuff that never really intellectually added much.", "tokens": [51234, 293, 264, 1507, 300, 1128, 534, 46481, 3869, 709, 13, 51340], "temperature": 0.0, "avg_logprob": -0.1510982962215648, "compression_ratio": 1.6843501326259946, "no_speech_prob": 0.0010004716459661722}, {"id": 148, "seek": 39752, "start": 417.03999999999996, "end": 419.84, "text": " And if anything was annoying, to have to remember early on.", "tokens": [51340, 400, 498, 1340, 390, 11304, 11, 281, 362, 281, 1604, 2440, 322, 13, 51480], "temperature": 0.0, "avg_logprob": -0.1510982962215648, "compression_ratio": 1.6843501326259946, "no_speech_prob": 0.0010004716459661722}, {"id": 149, "seek": 39752, "start": 419.84, "end": 421.4, "text": " So true here is Arbolian.", "tokens": [51480, 407, 2074, 510, 307, 1587, 17460, 952, 13, 51558], "temperature": 0.0, "avg_logprob": -0.1510982962215648, "compression_ratio": 1.6843501326259946, "no_speech_prob": 0.0010004716459661722}, {"id": 150, "seek": 39752, "start": 421.4, "end": 423.84, "text": " And now we have a finite number of iterations.", "tokens": [51558, 400, 586, 321, 362, 257, 19362, 1230, 295, 36540, 13, 51680], "temperature": 0.0, "avg_logprob": -0.1510982962215648, "compression_ratio": 1.6843501326259946, "no_speech_prob": 0.0010004716459661722}, {"id": 151, "seek": 39752, "start": 423.84, "end": 426.08, "text": " We might want to say hello world exactly 50 times.", "tokens": [51680, 492, 1062, 528, 281, 584, 7751, 1002, 2293, 2625, 1413, 13, 51792], "temperature": 0.0, "avg_logprob": -0.1510982962215648, "compression_ratio": 1.6843501326259946, "no_speech_prob": 0.0010004716459661722}, {"id": 152, "seek": 42608, "start": 426.08, "end": 427.96, "text": " In C, this was a crazy mess.", "tokens": [50364, 682, 383, 11, 341, 390, 257, 3219, 2082, 13, 50458], "temperature": 0.0, "avg_logprob": -0.15063396380965116, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.0031725424341857433}, {"id": 153, "seek": 42608, "start": 427.96, "end": 430.91999999999996, "text": " If you wanted to do this, you'd have to initialize a variable with which", "tokens": [50458, 759, 291, 1415, 281, 360, 341, 11, 291, 1116, 362, 281, 5883, 1125, 257, 7006, 365, 597, 50606], "temperature": 0.0, "avg_logprob": -0.15063396380965116, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.0031725424341857433}, {"id": 154, "seek": 42608, "start": 430.91999999999996, "end": 435.12, "text": " to count up to, but not including 50 plus plusing along the way and so forth.", "tokens": [50606, 281, 1207, 493, 281, 11, 457, 406, 3009, 2625, 1804, 1804, 278, 2051, 264, 636, 293, 370, 5220, 13, 50816], "temperature": 0.0, "avg_logprob": -0.15063396380965116, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.0031725424341857433}, {"id": 155, "seek": 42608, "start": 435.12, "end": 437.03999999999996, "text": " In Python, it's going to be a little cleaner.", "tokens": [50816, 682, 15329, 11, 309, 311, 516, 281, 312, 257, 707, 16532, 13, 50912], "temperature": 0.0, "avg_logprob": -0.15063396380965116, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.0031725424341857433}, {"id": 156, "seek": 42608, "start": 437.03999999999996, "end": 439.64, "text": " And we'll come back to what this means exactly.", "tokens": [50912, 400, 321, 603, 808, 646, 281, 437, 341, 1355, 2293, 13, 51042], "temperature": 0.0, "avg_logprob": -0.15063396380965116, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.0031725424341857433}, {"id": 157, "seek": 42608, "start": 439.64, "end": 441.68, "text": " But if you kind of read it from left to right,", "tokens": [51042, 583, 498, 291, 733, 295, 1401, 309, 490, 1411, 281, 558, 11, 51144], "temperature": 0.0, "avg_logprob": -0.15063396380965116, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.0031725424341857433}, {"id": 158, "seek": 42608, "start": 441.68, "end": 444.36, "text": " it kind of says what you mean, right?", "tokens": [51144, 309, 733, 295, 1619, 437, 291, 914, 11, 558, 30, 51278], "temperature": 0.0, "avg_logprob": -0.15063396380965116, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.0031725424341857433}, {"id": 159, "seek": 42608, "start": 444.36, "end": 446.84, "text": " For i in the range of 50.", "tokens": [51278, 1171, 741, 294, 264, 3613, 295, 2625, 13, 51402], "temperature": 0.0, "avg_logprob": -0.15063396380965116, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.0031725424341857433}, {"id": 160, "seek": 42608, "start": 446.84, "end": 449.12, "text": " So i is probably going to be a variable.", "tokens": [51402, 407, 741, 307, 1391, 516, 281, 312, 257, 7006, 13, 51516], "temperature": 0.0, "avg_logprob": -0.15063396380965116, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.0031725424341857433}, {"id": 161, "seek": 42608, "start": 449.12, "end": 450.91999999999996, "text": " And notice we're not mentioning its type.", "tokens": [51516, 400, 3449, 321, 434, 406, 18315, 1080, 2010, 13, 51606], "temperature": 0.0, "avg_logprob": -0.15063396380965116, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.0031725424341857433}, {"id": 162, "seek": 42608, "start": 450.91999999999996, "end": 454.15999999999997, "text": " It's going to be implied by whatever the context is, which in this case", "tokens": [51606, 467, 311, 516, 281, 312, 32614, 538, 2035, 264, 4319, 307, 11, 597, 294, 341, 1389, 51768], "temperature": 0.0, "avg_logprob": -0.15063396380965116, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.0031725424341857433}, {"id": 163, "seek": 45416, "start": 454.16, "end": 456.72, "text": " has to do apparently with numbers per the 50.", "tokens": [50364, 575, 281, 360, 7970, 365, 3547, 680, 264, 2625, 13, 50492], "temperature": 0.0, "avg_logprob": -0.12140286763509114, "compression_ratio": 1.717241379310345, "no_speech_prob": 0.0031725168228149414}, {"id": 164, "seek": 45416, "start": 456.72, "end": 459.32000000000005, "text": " Range is actually going to be a data type unto itself.", "tokens": [50492, 33778, 307, 767, 516, 281, 312, 257, 1412, 2010, 16521, 2564, 13, 50622], "temperature": 0.0, "avg_logprob": -0.12140286763509114, "compression_ratio": 1.717241379310345, "no_speech_prob": 0.0031725168228149414}, {"id": 165, "seek": 45416, "start": 459.32000000000005, "end": 460.6, "text": " It's a little funky in that sense.", "tokens": [50622, 467, 311, 257, 707, 33499, 294, 300, 2020, 13, 50686], "temperature": 0.0, "avg_logprob": -0.12140286763509114, "compression_ratio": 1.717241379310345, "no_speech_prob": 0.0031725168228149414}, {"id": 166, "seek": 45416, "start": 460.6, "end": 461.76000000000005, "text": " It's called a class.", "tokens": [50686, 467, 311, 1219, 257, 1508, 13, 50744], "temperature": 0.0, "avg_logprob": -0.12140286763509114, "compression_ratio": 1.717241379310345, "no_speech_prob": 0.0031725168228149414}, {"id": 167, "seek": 45416, "start": 461.76000000000005, "end": 465.08000000000004, "text": " But this essentially is a special feature of Python", "tokens": [50744, 583, 341, 4476, 307, 257, 2121, 4111, 295, 15329, 50910], "temperature": 0.0, "avg_logprob": -0.12140286763509114, "compression_ratio": 1.717241379310345, "no_speech_prob": 0.0031725168228149414}, {"id": 168, "seek": 45416, "start": 465.08000000000004, "end": 469.16, "text": " that unlike in C, where if you want to iterate over an array of values", "tokens": [50910, 300, 8343, 294, 383, 11, 689, 498, 291, 528, 281, 44497, 670, 364, 10225, 295, 4190, 51114], "temperature": 0.0, "avg_logprob": -0.12140286763509114, "compression_ratio": 1.717241379310345, "no_speech_prob": 0.0031725168228149414}, {"id": 169, "seek": 45416, "start": 469.16, "end": 472.8, "text": " or 50 such values, you would literally have an array of 50 values.", "tokens": [51114, 420, 2625, 1270, 4190, 11, 291, 576, 3736, 362, 364, 10225, 295, 2625, 4190, 13, 51296], "temperature": 0.0, "avg_logprob": -0.12140286763509114, "compression_ratio": 1.717241379310345, "no_speech_prob": 0.0031725168228149414}, {"id": 170, "seek": 45416, "start": 472.8, "end": 475.36, "text": " Range is kind of cool in that it kind of stands there.", "tokens": [51296, 33778, 307, 733, 295, 1627, 294, 300, 309, 733, 295, 7382, 456, 13, 51424], "temperature": 0.0, "avg_logprob": -0.12140286763509114, "compression_ratio": 1.717241379310345, "no_speech_prob": 0.0031725168228149414}, {"id": 171, "seek": 45416, "start": 475.36, "end": 478.76000000000005, "text": " And every time you iterate through a loop, it hands you the next number,", "tokens": [51424, 400, 633, 565, 291, 44497, 807, 257, 6367, 11, 309, 2377, 291, 264, 958, 1230, 11, 51594], "temperature": 0.0, "avg_logprob": -0.12140286763509114, "compression_ratio": 1.717241379310345, "no_speech_prob": 0.0031725168228149414}, {"id": 172, "seek": 45416, "start": 478.76000000000005, "end": 480.48, "text": " but just one at a time.", "tokens": [51594, 457, 445, 472, 412, 257, 565, 13, 51680], "temperature": 0.0, "avg_logprob": -0.12140286763509114, "compression_ratio": 1.717241379310345, "no_speech_prob": 0.0031725168228149414}, {"id": 173, "seek": 48048, "start": 480.52000000000004, "end": 484.08000000000004, "text": " Thereby using maybe as little as 150th the amount of memory,", "tokens": [50366, 821, 2322, 1228, 1310, 382, 707, 382, 8451, 392, 264, 2372, 295, 4675, 11, 50544], "temperature": 0.0, "avg_logprob": -0.15507757754726265, "compression_ratio": 1.6195286195286196, "no_speech_prob": 0.0001055462344083935}, {"id": 174, "seek": 48048, "start": 484.08000000000004, "end": 486.76, "text": " because it only has to keep one number around at a time.", "tokens": [50544, 570, 309, 787, 575, 281, 1066, 472, 1230, 926, 412, 257, 565, 13, 50678], "temperature": 0.0, "avg_logprob": -0.15507757754726265, "compression_ratio": 1.6195286195286196, "no_speech_prob": 0.0001055462344083935}, {"id": 175, "seek": 48048, "start": 486.76, "end": 488.44, "text": " And there's a bit more overhead than that.", "tokens": [50678, 400, 456, 311, 257, 857, 544, 19922, 813, 300, 13, 50762], "temperature": 0.0, "avg_logprob": -0.15507757754726265, "compression_ratio": 1.6195286195286196, "no_speech_prob": 0.0001055462344083935}, {"id": 176, "seek": 48048, "start": 488.44, "end": 490.76, "text": " It's not a perfect savings quite so.", "tokens": [50762, 467, 311, 406, 257, 2176, 13454, 1596, 370, 13, 50878], "temperature": 0.0, "avg_logprob": -0.15507757754726265, "compression_ratio": 1.6195286195286196, "no_speech_prob": 0.0001055462344083935}, {"id": 177, "seek": 48048, "start": 490.76, "end": 496.24, "text": " But this just says for i in range 50, and that's going to implicitly", "tokens": [50878, 583, 341, 445, 1619, 337, 741, 294, 3613, 2625, 11, 293, 300, 311, 516, 281, 26947, 356, 51152], "temperature": 0.0, "avg_logprob": -0.15507757754726265, "compression_ratio": 1.6195286195286196, "no_speech_prob": 0.0001055462344083935}, {"id": 178, "seek": 48048, "start": 496.24, "end": 499.24, "text": " count from 0 up through 49.", "tokens": [51152, 1207, 490, 1958, 493, 807, 16513, 13, 51302], "temperature": 0.0, "avg_logprob": -0.15507757754726265, "compression_ratio": 1.6195286195286196, "no_speech_prob": 0.0001055462344083935}, {"id": 179, "seek": 48048, "start": 499.24, "end": 503.0, "text": " And meanwhile, what's below it is what's going to get printed this time.", "tokens": [51302, 400, 29252, 11, 437, 311, 2507, 309, 307, 437, 311, 516, 281, 483, 13567, 341, 565, 13, 51490], "temperature": 0.0, "avg_logprob": -0.15507757754726265, "compression_ratio": 1.6195286195286196, "no_speech_prob": 0.0001055462344083935}, {"id": 180, "seek": 48048, "start": 503.0, "end": 506.64000000000004, "text": " So meanwhile, here is one of our bigger scratch blocks early on.", "tokens": [51490, 407, 29252, 11, 510, 307, 472, 295, 527, 3801, 8459, 8474, 2440, 322, 13, 51672], "temperature": 0.0, "avg_logprob": -0.15507757754726265, "compression_ratio": 1.6195286195286196, "no_speech_prob": 0.0001055462344083935}, {"id": 181, "seek": 48048, "start": 506.64000000000004, "end": 510.08000000000004, "text": " And it translates pretty literally to code in C.", "tokens": [51672, 400, 309, 28468, 1238, 3736, 281, 3089, 294, 383, 13, 51844], "temperature": 0.0, "avg_logprob": -0.15507757754726265, "compression_ratio": 1.6195286195286196, "no_speech_prob": 0.0001055462344083935}, {"id": 182, "seek": 51008, "start": 510.08, "end": 514.36, "text": " And you can perhaps guess, if you've never seen Python before today,", "tokens": [50364, 400, 291, 393, 4317, 2041, 11, 498, 291, 600, 1128, 1612, 15329, 949, 965, 11, 50578], "temperature": 0.0, "avg_logprob": -0.17139317332834436, "compression_ratio": 1.7204301075268817, "no_speech_prob": 0.0009697040659375489}, {"id": 183, "seek": 51008, "start": 514.36, "end": 516.88, "text": " what the Python code might now look like.", "tokens": [50578, 437, 264, 15329, 3089, 1062, 586, 574, 411, 13, 50704], "temperature": 0.0, "avg_logprob": -0.17139317332834436, "compression_ratio": 1.7204301075268817, "no_speech_prob": 0.0009697040659375489}, {"id": 184, "seek": 51008, "start": 516.88, "end": 519.12, "text": " If this here on the right is the C code, what", "tokens": [50704, 759, 341, 510, 322, 264, 558, 307, 264, 383, 3089, 11, 437, 50816], "temperature": 0.0, "avg_logprob": -0.17139317332834436, "compression_ratio": 1.7204301075268817, "no_speech_prob": 0.0009697040659375489}, {"id": 185, "seek": 51008, "start": 519.12, "end": 521.8, "text": " are some of the features syntactically that we're about to throw away?", "tokens": [50816, 366, 512, 295, 264, 4122, 23980, 578, 984, 300, 321, 434, 466, 281, 3507, 1314, 30, 50950], "temperature": 0.0, "avg_logprob": -0.17139317332834436, "compression_ratio": 1.7204301075268817, "no_speech_prob": 0.0009697040659375489}, {"id": 186, "seek": 51008, "start": 521.8, "end": 522.3, "text": " Yeah?", "tokens": [50950, 865, 30, 50975], "temperature": 0.0, "avg_logprob": -0.17139317332834436, "compression_ratio": 1.7204301075268817, "no_speech_prob": 0.0009697040659375489}, {"id": 187, "seek": 51008, "start": 522.3, "end": 524.6, "text": " You can throw it at curly braces and the parentheses.", "tokens": [50975, 509, 393, 3507, 309, 412, 32066, 41537, 293, 264, 34153, 13, 51090], "temperature": 0.0, "avg_logprob": -0.17139317332834436, "compression_ratio": 1.7204301075268817, "no_speech_prob": 0.0009697040659375489}, {"id": 188, "seek": 51008, "start": 524.6, "end": 526.88, "text": " Curly braces and parentheses are going to go away.", "tokens": [51090, 7907, 356, 41537, 293, 34153, 366, 516, 281, 352, 1314, 13, 51204], "temperature": 0.0, "avg_logprob": -0.17139317332834436, "compression_ratio": 1.7204301075268817, "no_speech_prob": 0.0009697040659375489}, {"id": 189, "seek": 51008, "start": 526.88, "end": 529.12, "text": " What else might go away?", "tokens": [51204, 708, 1646, 1062, 352, 1314, 30, 51316], "temperature": 0.0, "avg_logprob": -0.17139317332834436, "compression_ratio": 1.7204301075268817, "no_speech_prob": 0.0009697040659375489}, {"id": 190, "seek": 51008, "start": 529.12, "end": 532.4399999999999, "text": " The semicolons are going to go away?", "tokens": [51316, 440, 27515, 401, 892, 366, 516, 281, 352, 1314, 30, 51482], "temperature": 0.0, "avg_logprob": -0.17139317332834436, "compression_ratio": 1.7204301075268817, "no_speech_prob": 0.0009697040659375489}, {"id": 191, "seek": 51008, "start": 532.4399999999999, "end": 534.84, "text": " The backslash n inside of the print statements?", "tokens": [51482, 440, 646, 10418, 1299, 297, 1854, 295, 264, 4482, 12363, 30, 51602], "temperature": 0.0, "avg_logprob": -0.17139317332834436, "compression_ratio": 1.7204301075268817, "no_speech_prob": 0.0009697040659375489}, {"id": 192, "seek": 51008, "start": 534.84, "end": 536.48, "text": " Great.", "tokens": [51602, 3769, 13, 51684], "temperature": 0.0, "avg_logprob": -0.17139317332834436, "compression_ratio": 1.7204301075268817, "no_speech_prob": 0.0009697040659375489}, {"id": 193, "seek": 51008, "start": 536.48, "end": 539.8, "text": " One more thing, I think?", "tokens": [51684, 1485, 544, 551, 11, 286, 519, 30, 51850], "temperature": 0.0, "avg_logprob": -0.17139317332834436, "compression_ratio": 1.7204301075268817, "no_speech_prob": 0.0009697040659375489}, {"id": 194, "seek": 53980, "start": 540.8, "end": 541.4399999999999, "text": " The if?", "tokens": [50414, 440, 498, 30, 50446], "temperature": 0.0, "avg_logprob": -0.2010316626970158, "compression_ratio": 1.7798165137614679, "no_speech_prob": 0.0021825905423611403}, {"id": 195, "seek": 53980, "start": 541.4399999999999, "end": 543.4599999999999, "text": " So well, we don't strictly need the parentheses", "tokens": [50446, 407, 731, 11, 321, 500, 380, 20792, 643, 264, 34153, 50547], "temperature": 0.0, "avg_logprob": -0.2010316626970158, "compression_ratio": 1.7798165137614679, "no_speech_prob": 0.0021825905423611403}, {"id": 196, "seek": 53980, "start": 543.4599999999999, "end": 546.76, "text": " because it's not like I'm combining things logically like this or that", "tokens": [50547, 570, 309, 311, 406, 411, 286, 478, 21928, 721, 38887, 411, 341, 420, 300, 50712], "temperature": 0.0, "avg_logprob": -0.2010316626970158, "compression_ratio": 1.7798165137614679, "no_speech_prob": 0.0021825905423611403}, {"id": 197, "seek": 53980, "start": 546.76, "end": 548.0, "text": " or this and that.", "tokens": [50712, 420, 341, 293, 300, 13, 50774], "temperature": 0.0, "avg_logprob": -0.2010316626970158, "compression_ratio": 1.7798165137614679, "no_speech_prob": 0.0021825905423611403}, {"id": 198, "seek": 53980, "start": 548.0, "end": 550.04, "text": " So it should suffice to get rid of those two.", "tokens": [50774, 407, 309, 820, 3889, 573, 281, 483, 3973, 295, 729, 732, 13, 50876], "temperature": 0.0, "avg_logprob": -0.2010316626970158, "compression_ratio": 1.7798165137614679, "no_speech_prob": 0.0021825905423611403}, {"id": 199, "seek": 53980, "start": 550.04, "end": 552.28, "text": " And there's a couple of other tweaks we're going to have to make here.", "tokens": [50876, 400, 456, 311, 257, 1916, 295, 661, 46664, 321, 434, 516, 281, 362, 281, 652, 510, 13, 50988], "temperature": 0.0, "avg_logprob": -0.2010316626970158, "compression_ratio": 1.7798165137614679, "no_speech_prob": 0.0021825905423611403}, {"id": 200, "seek": 53980, "start": 552.28, "end": 554.92, "text": " But indeed, the code is going to be a lot tighter, so to speak.", "tokens": [50988, 583, 6451, 11, 264, 3089, 307, 516, 281, 312, 257, 688, 30443, 11, 370, 281, 1710, 13, 51120], "temperature": 0.0, "avg_logprob": -0.2010316626970158, "compression_ratio": 1.7798165137614679, "no_speech_prob": 0.0021825905423611403}, {"id": 201, "seek": 53980, "start": 554.92, "end": 556.9599999999999, "text": " Now you're just going to say what you mean here.", "tokens": [51120, 823, 291, 434, 445, 516, 281, 584, 437, 291, 914, 510, 13, 51222], "temperature": 0.0, "avg_logprob": -0.2010316626970158, "compression_ratio": 1.7798165137614679, "no_speech_prob": 0.0021825905423611403}, {"id": 202, "seek": 53980, "start": 556.9599999999999, "end": 559.92, "text": " And there is one weird thing, and it's not a typo.", "tokens": [51222, 400, 456, 307, 472, 3657, 551, 11, 293, 309, 311, 406, 257, 2125, 78, 13, 51370], "temperature": 0.0, "avg_logprob": -0.2010316626970158, "compression_ratio": 1.7798165137614679, "no_speech_prob": 0.0021825905423611403}, {"id": 203, "seek": 53980, "start": 559.92, "end": 563.24, "text": " What apparently are you ever going to have to start knowing now?", "tokens": [51370, 708, 7970, 366, 291, 1562, 516, 281, 362, 281, 722, 5276, 586, 30, 51536], "temperature": 0.0, "avg_logprob": -0.2010316626970158, "compression_ratio": 1.7798165137614679, "no_speech_prob": 0.0021825905423611403}, {"id": 204, "seek": 53980, "start": 563.24, "end": 564.4399999999999, "text": " L if or whatever.", "tokens": [51536, 441, 498, 420, 2035, 13, 51596], "temperature": 0.0, "avg_logprob": -0.2010316626970158, "compression_ratio": 1.7798165137614679, "no_speech_prob": 0.0021825905423611403}, {"id": 205, "seek": 53980, "start": 564.4399999999999, "end": 566.4, "text": " So L if is not a typo.", "tokens": [51596, 407, 441, 498, 307, 406, 257, 2125, 78, 13, 51694], "temperature": 0.0, "avg_logprob": -0.2010316626970158, "compression_ratio": 1.7798165137614679, "no_speech_prob": 0.0021825905423611403}, {"id": 206, "seek": 53980, "start": 566.4, "end": 569.0799999999999, "text": " It's indeed how you express the notion of else if,", "tokens": [51694, 467, 311, 6451, 577, 291, 5109, 264, 10710, 295, 1646, 498, 11, 51828], "temperature": 0.0, "avg_logprob": -0.2010316626970158, "compression_ratio": 1.7798165137614679, "no_speech_prob": 0.0021825905423611403}, {"id": 207, "seek": 56908, "start": 569.08, "end": 571.0, "text": " but otherwise everything is exactly the same.", "tokens": [50364, 457, 5911, 1203, 307, 2293, 264, 912, 13, 50460], "temperature": 0.0, "avg_logprob": -0.14384214805834222, "compression_ratio": 1.7045454545454546, "no_speech_prob": 0.0003569541440811008}, {"id": 208, "seek": 56908, "start": 571.0, "end": 573.96, "text": " And notice the colons, frankly, ironically, whereas previously it", "tokens": [50460, 400, 3449, 264, 1173, 892, 11, 11939, 11, 41082, 11, 9735, 8046, 309, 50608], "temperature": 0.0, "avg_logprob": -0.14384214805834222, "compression_ratio": 1.7045454545454546, "no_speech_prob": 0.0003569541440811008}, {"id": 209, "seek": 56908, "start": 573.96, "end": 576.9200000000001, "text": " might have been annoying to occasionally forget a semicolon.", "tokens": [50608, 1062, 362, 668, 11304, 281, 16895, 2870, 257, 27515, 38780, 13, 50756], "temperature": 0.0, "avg_logprob": -0.14384214805834222, "compression_ratio": 1.7045454545454546, "no_speech_prob": 0.0003569541440811008}, {"id": 210, "seek": 56908, "start": 576.9200000000001, "end": 580.0, "text": " Now the colons might take on that role, but at least everything below them", "tokens": [50756, 823, 264, 1173, 892, 1062, 747, 322, 300, 3090, 11, 457, 412, 1935, 1203, 2507, 552, 50910], "temperature": 0.0, "avg_logprob": -0.14384214805834222, "compression_ratio": 1.7045454545454546, "no_speech_prob": 0.0003569541440811008}, {"id": 211, "seek": 56908, "start": 580.0, "end": 581.9200000000001, "text": " is meant to be indented.", "tokens": [50910, 307, 4140, 281, 312, 1016, 6003, 13, 51006], "temperature": 0.0, "avg_logprob": -0.14384214805834222, "compression_ratio": 1.7045454545454546, "no_speech_prob": 0.0003569541440811008}, {"id": 212, "seek": 56908, "start": 581.9200000000001, "end": 585.84, "text": " So here's a fundamental difference beyond the sort of silly syntactic", "tokens": [51006, 407, 510, 311, 257, 8088, 2649, 4399, 264, 1333, 295, 11774, 23980, 19892, 51202], "temperature": 0.0, "avg_logprob": -0.14384214805834222, "compression_ratio": 1.7045454545454546, "no_speech_prob": 0.0003569541440811008}, {"id": 213, "seek": 56908, "start": 585.84, "end": 587.9200000000001, "text": " differences of this in, say, other languages.", "tokens": [51202, 7300, 295, 341, 294, 11, 584, 11, 661, 8650, 13, 51306], "temperature": 0.0, "avg_logprob": -0.14384214805834222, "compression_ratio": 1.7045454545454546, "no_speech_prob": 0.0003569541440811008}, {"id": 214, "seek": 56908, "start": 587.9200000000001, "end": 591.2, "text": " The flow of work that we've been using thus far", "tokens": [51306, 440, 3095, 295, 589, 300, 321, 600, 668, 1228, 8807, 1400, 51470], "temperature": 0.0, "avg_logprob": -0.14384214805834222, "compression_ratio": 1.7045454545454546, "no_speech_prob": 0.0003569541440811008}, {"id": 215, "seek": 56908, "start": 591.2, "end": 594.0, "text": " has been essentially this in C. You write source code in a file,", "tokens": [51470, 575, 668, 4476, 341, 294, 383, 13, 509, 2464, 4009, 3089, 294, 257, 3991, 11, 51610], "temperature": 0.0, "avg_logprob": -0.14384214805834222, "compression_ratio": 1.7045454545454546, "no_speech_prob": 0.0003569541440811008}, {"id": 216, "seek": 56908, "start": 594.0, "end": 596.08, "text": " generally ending in .c.", "tokens": [51610, 5101, 8121, 294, 2411, 66, 13, 51714], "temperature": 0.0, "avg_logprob": -0.14384214805834222, "compression_ratio": 1.7045454545454546, "no_speech_prob": 0.0003569541440811008}, {"id": 217, "seek": 59608, "start": 596.08, "end": 600.6, "text": " You run a compiler, which is a quick check, is called Clang.", "tokens": [50364, 509, 1190, 257, 31958, 11, 597, 307, 257, 1702, 1520, 11, 307, 1219, 2033, 656, 13, 50590], "temperature": 0.0, "avg_logprob": -0.1277328850566477, "compression_ratio": 1.754208754208754, "no_speech_prob": 0.0028894878923892975}, {"id": 218, "seek": 59608, "start": 600.6, "end": 601.84, "text": " So it's not technically make.", "tokens": [50590, 407, 309, 311, 406, 12120, 652, 13, 50652], "temperature": 0.0, "avg_logprob": -0.1277328850566477, "compression_ratio": 1.754208754208754, "no_speech_prob": 0.0028894878923892975}, {"id": 219, "seek": 59608, "start": 601.84, "end": 604.0, "text": " Make is just this helpful build utility that", "tokens": [50652, 4387, 307, 445, 341, 4961, 1322, 14877, 300, 50760], "temperature": 0.0, "avg_logprob": -0.1277328850566477, "compression_ratio": 1.754208754208754, "no_speech_prob": 0.0028894878923892975}, {"id": 220, "seek": 59608, "start": 604.0, "end": 605.6800000000001, "text": " automates the process of calling Clang.", "tokens": [50760, 3553, 1024, 264, 1399, 295, 5141, 2033, 656, 13, 50844], "temperature": 0.0, "avg_logprob": -0.1277328850566477, "compression_ratio": 1.754208754208754, "no_speech_prob": 0.0028894878923892975}, {"id": 221, "seek": 59608, "start": 605.6800000000001, "end": 607.9200000000001, "text": " So Clang is, strictly speaking, the compiler.", "tokens": [50844, 407, 2033, 656, 307, 11, 20792, 4124, 11, 264, 31958, 13, 50956], "temperature": 0.0, "avg_logprob": -0.1277328850566477, "compression_ratio": 1.754208754208754, "no_speech_prob": 0.0028894878923892975}, {"id": 222, "seek": 59608, "start": 607.9200000000001, "end": 611.44, "text": " And Clang outputs zeros and ones, otherwise known as machine code.", "tokens": [50956, 400, 2033, 656, 23930, 35193, 293, 2306, 11, 5911, 2570, 382, 3479, 3089, 13, 51132], "temperature": 0.0, "avg_logprob": -0.1277328850566477, "compression_ratio": 1.754208754208754, "no_speech_prob": 0.0028894878923892975}, {"id": 223, "seek": 59608, "start": 611.44, "end": 614.6, "text": " And your computer, Mac, PC, whatever, has a CPU,", "tokens": [51132, 400, 428, 3820, 11, 5707, 11, 6465, 11, 2035, 11, 575, 257, 13199, 11, 51290], "temperature": 0.0, "avg_logprob": -0.1277328850566477, "compression_ratio": 1.754208754208754, "no_speech_prob": 0.0028894878923892975}, {"id": 224, "seek": 59608, "start": 614.6, "end": 618.08, "text": " central processing unit inside, made by Intel or some other company.", "tokens": [51290, 5777, 9007, 4985, 1854, 11, 1027, 538, 19762, 420, 512, 661, 2237, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1277328850566477, "compression_ratio": 1.754208754208754, "no_speech_prob": 0.0028894878923892975}, {"id": 225, "seek": 59608, "start": 618.08, "end": 622.1600000000001, "text": " And that CPU is hardwired to understand certain patterns of bits,", "tokens": [51464, 400, 300, 13199, 307, 1152, 86, 1824, 281, 1223, 1629, 8294, 295, 9239, 11, 51668], "temperature": 0.0, "avg_logprob": -0.1277328850566477, "compression_ratio": 1.754208754208754, "no_speech_prob": 0.0028894878923892975}, {"id": 226, "seek": 59608, "start": 622.1600000000001, "end": 625.2800000000001, "text": " zeros and ones, otherwise known as machine code.", "tokens": [51668, 35193, 293, 2306, 11, 5911, 2570, 382, 3479, 3089, 13, 51824], "temperature": 0.0, "avg_logprob": -0.1277328850566477, "compression_ratio": 1.754208754208754, "no_speech_prob": 0.0028894878923892975}, {"id": 227, "seek": 62528, "start": 625.3199999999999, "end": 629.4399999999999, "text": " So that's been our world in C with Python.", "tokens": [50366, 407, 300, 311, 668, 527, 1002, 294, 383, 365, 15329, 13, 50572], "temperature": 0.0, "avg_logprob": -0.1515340877853277, "compression_ratio": 1.6715328467153285, "no_speech_prob": 0.0008558665867894888}, {"id": 228, "seek": 62528, "start": 629.4399999999999, "end": 631.6, "text": " So the code that you might compile in C, for instance,", "tokens": [50572, 407, 264, 3089, 300, 291, 1062, 31413, 294, 383, 11, 337, 5197, 11, 50680], "temperature": 0.0, "avg_logprob": -0.1515340877853277, "compression_ratio": 1.6715328467153285, "no_speech_prob": 0.0008558665867894888}, {"id": 229, "seek": 62528, "start": 631.6, "end": 634.72, "text": " might have been this, which we said you run Clang on like this.", "tokens": [50680, 1062, 362, 668, 341, 11, 597, 321, 848, 291, 1190, 2033, 656, 322, 411, 341, 13, 50836], "temperature": 0.0, "avg_logprob": -0.1515340877853277, "compression_ratio": 1.6715328467153285, "no_speech_prob": 0.0008558665867894888}, {"id": 230, "seek": 62528, "start": 634.72, "end": 637.48, "text": " And if you don't specify a default file name as output,", "tokens": [50836, 400, 498, 291, 500, 380, 16500, 257, 7576, 3991, 1315, 382, 5598, 11, 50974], "temperature": 0.0, "avg_logprob": -0.1515340877853277, "compression_ratio": 1.6715328467153285, "no_speech_prob": 0.0008558665867894888}, {"id": 231, "seek": 62528, "start": 637.48, "end": 640.64, "text": " you'll instead just get in your file all of these zeros and ones, which", "tokens": [50974, 291, 603, 2602, 445, 483, 294, 428, 3991, 439, 295, 613, 35193, 293, 2306, 11, 597, 51132], "temperature": 0.0, "avg_logprob": -0.1515340877853277, "compression_ratio": 1.6715328467153285, "no_speech_prob": 0.0008558665867894888}, {"id": 232, "seek": 62528, "start": 640.64, "end": 645.1999999999999, "text": " can then be executed by way of .slash a.out, the default name", "tokens": [51132, 393, 550, 312, 17577, 538, 636, 295, 2411, 10418, 1299, 257, 13, 346, 11, 264, 7576, 1315, 51360], "temperature": 0.0, "avg_logprob": -0.1515340877853277, "compression_ratio": 1.6715328467153285, "no_speech_prob": 0.0008558665867894888}, {"id": 233, "seek": 62528, "start": 645.1999999999999, "end": 647.12, "text": " for the assembler's output here.", "tokens": [51360, 337, 264, 8438, 1918, 311, 5598, 510, 13, 51456], "temperature": 0.0, "avg_logprob": -0.1515340877853277, "compression_ratio": 1.6715328467153285, "no_speech_prob": 0.0008558665867894888}, {"id": 234, "seek": 62528, "start": 647.12, "end": 653.28, "text": " So in Python, though, the world gets here, too, a little simpler as well.", "tokens": [51456, 407, 294, 15329, 11, 1673, 11, 264, 1002, 2170, 510, 11, 886, 11, 257, 707, 18587, 382, 731, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1515340877853277, "compression_ratio": 1.6715328467153285, "no_speech_prob": 0.0008558665867894888}, {"id": 235, "seek": 65328, "start": 653.28, "end": 656.72, "text": " So we just now have source code and an interpreter.", "tokens": [50364, 407, 321, 445, 586, 362, 4009, 3089, 293, 364, 34132, 13, 50536], "temperature": 0.0, "avg_logprob": -0.13831171308244977, "compression_ratio": 1.7244318181818181, "no_speech_prob": 0.001810170360840857}, {"id": 236, "seek": 65328, "start": 656.72, "end": 659.12, "text": " So there's no machine code it would seem.", "tokens": [50536, 407, 456, 311, 572, 3479, 3089, 309, 576, 1643, 13, 50656], "temperature": 0.0, "avg_logprob": -0.13831171308244977, "compression_ratio": 1.7244318181818181, "no_speech_prob": 0.001810170360840857}, {"id": 237, "seek": 65328, "start": 659.12, "end": 660.72, "text": " There's no compiler it would seem.", "tokens": [50656, 821, 311, 572, 31958, 309, 576, 1643, 13, 50736], "temperature": 0.0, "avg_logprob": -0.13831171308244977, "compression_ratio": 1.7244318181818181, "no_speech_prob": 0.001810170360840857}, {"id": 238, "seek": 65328, "start": 660.72, "end": 662.8, "text": " And frankly, there's one fewer arrow, which", "tokens": [50736, 400, 11939, 11, 456, 311, 472, 13366, 11610, 11, 597, 50840], "temperature": 0.0, "avg_logprob": -0.13831171308244977, "compression_ratio": 1.7244318181818181, "no_speech_prob": 0.001810170360840857}, {"id": 239, "seek": 65328, "start": 662.8, "end": 665.72, "text": " suggests to me that the process of running Python code itself", "tokens": [50840, 13409, 281, 385, 300, 264, 1399, 295, 2614, 15329, 3089, 2564, 50986], "temperature": 0.0, "avg_logprob": -0.13831171308244977, "compression_ratio": 1.7244318181818181, "no_speech_prob": 0.001810170360840857}, {"id": 240, "seek": 65328, "start": 665.72, "end": 667.12, "text": " is actually going to be a little easier.", "tokens": [50986, 307, 767, 516, 281, 312, 257, 707, 3571, 13, 51056], "temperature": 0.0, "avg_logprob": -0.13831171308244977, "compression_ratio": 1.7244318181818181, "no_speech_prob": 0.001810170360840857}, {"id": 241, "seek": 65328, "start": 667.12, "end": 669.36, "text": " Running C code has typically been two steps.", "tokens": [51056, 28136, 383, 3089, 575, 5850, 668, 732, 4439, 13, 51168], "temperature": 0.0, "avg_logprob": -0.13831171308244977, "compression_ratio": 1.7244318181818181, "no_speech_prob": 0.001810170360840857}, {"id": 242, "seek": 65328, "start": 669.36, "end": 672.48, "text": " You rerun Clang, or via Mac, you run Clang.", "tokens": [51168, 509, 43819, 409, 2033, 656, 11, 420, 5766, 5707, 11, 291, 1190, 2033, 656, 13, 51324], "temperature": 0.0, "avg_logprob": -0.13831171308244977, "compression_ratio": 1.7244318181818181, "no_speech_prob": 0.001810170360840857}, {"id": 243, "seek": 65328, "start": 672.48, "end": 673.64, "text": " Then you run the program.", "tokens": [51324, 1396, 291, 1190, 264, 1461, 13, 51382], "temperature": 0.0, "avg_logprob": -0.13831171308244977, "compression_ratio": 1.7244318181818181, "no_speech_prob": 0.001810170360840857}, {"id": 244, "seek": 65328, "start": 673.64, "end": 674.1999999999999, "text": " And it's fine.", "tokens": [51382, 400, 309, 311, 2489, 13, 51410], "temperature": 0.0, "avg_logprob": -0.13831171308244977, "compression_ratio": 1.7244318181818181, "no_speech_prob": 0.001810170360840857}, {"id": 245, "seek": 65328, "start": 674.1999999999999, "end": 675.8399999999999, "text": " It's not all that hard, but it's two steps.", "tokens": [51410, 467, 311, 406, 439, 300, 1152, 11, 457, 309, 311, 732, 4439, 13, 51492], "temperature": 0.0, "avg_logprob": -0.13831171308244977, "compression_ratio": 1.7244318181818181, "no_speech_prob": 0.001810170360840857}, {"id": 246, "seek": 65328, "start": 675.8399999999999, "end": 678.88, "text": " Why not reduce to two steps what you could instead do in one?", "tokens": [51492, 1545, 406, 5407, 281, 732, 4439, 437, 291, 727, 2602, 360, 294, 472, 30, 51644], "temperature": 0.0, "avg_logprob": -0.13831171308244977, "compression_ratio": 1.7244318181818181, "no_speech_prob": 0.001810170360840857}, {"id": 247, "seek": 65328, "start": 678.88, "end": 680.48, "text": " And we'll see exactly what this means.", "tokens": [51644, 400, 321, 603, 536, 2293, 437, 341, 1355, 13, 51724], "temperature": 0.0, "avg_logprob": -0.13831171308244977, "compression_ratio": 1.7244318181818181, "no_speech_prob": 0.001810170360840857}, {"id": 248, "seek": 65328, "start": 680.48, "end": 682.92, "text": " Now, technically, that's a bit of an oversimplification.", "tokens": [51724, 823, 11, 12120, 11, 300, 311, 257, 857, 295, 364, 15488, 332, 564, 3774, 13, 51846], "temperature": 0.0, "avg_logprob": -0.13831171308244977, "compression_ratio": 1.7244318181818181, "no_speech_prob": 0.001810170360840857}, {"id": 249, "seek": 68292, "start": 682.92, "end": 687.4, "text": " Technically, underneath the hood, if you wanted to run a program like this", "tokens": [50364, 42494, 11, 7223, 264, 13376, 11, 498, 291, 1415, 281, 1190, 257, 1461, 411, 341, 50588], "temperature": 0.0, "avg_logprob": -0.1497812832103056, "compression_ratio": 1.8581560283687943, "no_speech_prob": 0.002323019551113248}, {"id": 250, "seek": 68292, "start": 687.4, "end": 693.36, "text": " that simply prints out hello world, you would simply run Python hello.py.", "tokens": [50588, 300, 2935, 22305, 484, 7751, 1002, 11, 291, 576, 2935, 1190, 15329, 7751, 13, 8200, 13, 50886], "temperature": 0.0, "avg_logprob": -0.1497812832103056, "compression_ratio": 1.8581560283687943, "no_speech_prob": 0.002323019551113248}, {"id": 251, "seek": 68292, "start": 693.36, "end": 696.76, "text": " And the result of that would be to see hello world on the screen,", "tokens": [50886, 400, 264, 1874, 295, 300, 576, 312, 281, 536, 7751, 1002, 322, 264, 2568, 11, 51056], "temperature": 0.0, "avg_logprob": -0.1497812832103056, "compression_ratio": 1.8581560283687943, "no_speech_prob": 0.002323019551113248}, {"id": 252, "seek": 68292, "start": 696.76, "end": 697.88, "text": " as we'll soon see.", "tokens": [51056, 382, 321, 603, 2321, 536, 13, 51112], "temperature": 0.0, "avg_logprob": -0.1497812832103056, "compression_ratio": 1.8581560283687943, "no_speech_prob": 0.002323019551113248}, {"id": 253, "seek": 68292, "start": 697.88, "end": 701.12, "text": " But technically, underneath the hood, there is some other stuff going on.", "tokens": [51112, 583, 12120, 11, 7223, 264, 13376, 11, 456, 307, 512, 661, 1507, 516, 322, 13, 51274], "temperature": 0.0, "avg_logprob": -0.1497812832103056, "compression_ratio": 1.8581560283687943, "no_speech_prob": 0.002323019551113248}, {"id": 254, "seek": 68292, "start": 701.12, "end": 702.9599999999999, "text": " So there actually kind of is a compiler.", "tokens": [51274, 407, 456, 767, 733, 295, 307, 257, 31958, 13, 51366], "temperature": 0.0, "avg_logprob": -0.1497812832103056, "compression_ratio": 1.8581560283687943, "no_speech_prob": 0.002323019551113248}, {"id": 255, "seek": 68292, "start": 702.9599999999999, "end": 704.76, "text": " But there's not something called machine code per se.", "tokens": [51366, 583, 456, 311, 406, 746, 1219, 3479, 3089, 680, 369, 13, 51456], "temperature": 0.0, "avg_logprob": -0.1497812832103056, "compression_ratio": 1.8581560283687943, "no_speech_prob": 0.002323019551113248}, {"id": 256, "seek": 68292, "start": 704.76, "end": 705.68, "text": " It's called byte code.", "tokens": [51456, 467, 311, 1219, 40846, 3089, 13, 51502], "temperature": 0.0, "avg_logprob": -0.1497812832103056, "compression_ratio": 1.8581560283687943, "no_speech_prob": 0.002323019551113248}, {"id": 257, "seek": 68292, "start": 705.68, "end": 708.0799999999999, "text": " There's even something called a Python virtual machine.", "tokens": [51502, 821, 311, 754, 746, 1219, 257, 15329, 6374, 3479, 13, 51622], "temperature": 0.0, "avg_logprob": -0.1497812832103056, "compression_ratio": 1.8581560283687943, "no_speech_prob": 0.002323019551113248}, {"id": 258, "seek": 68292, "start": 708.0799999999999, "end": 711.16, "text": " But all of this is abstracted away for us.", "tokens": [51622, 583, 439, 295, 341, 307, 12649, 292, 1314, 337, 505, 13, 51776], "temperature": 0.0, "avg_logprob": -0.1497812832103056, "compression_ratio": 1.8581560283687943, "no_speech_prob": 0.002323019551113248}, {"id": 259, "seek": 71116, "start": 711.16, "end": 713.4399999999999, "text": " Certainly for the sake of today's conversation,", "tokens": [50364, 16628, 337, 264, 9717, 295, 965, 311, 3761, 11, 50478], "temperature": 0.0, "avg_logprob": -0.1531742206518201, "compression_ratio": 1.704968944099379, "no_speech_prob": 0.016911324113607407}, {"id": 260, "seek": 71116, "start": 713.4399999999999, "end": 715.68, "text": " but also in the real world more generally.", "tokens": [50478, 457, 611, 294, 264, 957, 1002, 544, 5101, 13, 50590], "temperature": 0.0, "avg_logprob": -0.1531742206518201, "compression_ratio": 1.704968944099379, "no_speech_prob": 0.016911324113607407}, {"id": 261, "seek": 71116, "start": 715.68, "end": 719.16, "text": " Humans have gotten better over the decades at writing software and writing", "tokens": [50590, 35809, 362, 5768, 1101, 670, 264, 7878, 412, 3579, 4722, 293, 3579, 50764], "temperature": 0.0, "avg_logprob": -0.1531742206518201, "compression_ratio": 1.704968944099379, "no_speech_prob": 0.016911324113607407}, {"id": 262, "seek": 71116, "start": 719.16, "end": 721.4399999999999, "text": " tools via which we can write software.", "tokens": [50764, 3873, 5766, 597, 321, 393, 2464, 4722, 13, 50878], "temperature": 0.0, "avg_logprob": -0.1531742206518201, "compression_ratio": 1.704968944099379, "no_speech_prob": 0.016911324113607407}, {"id": 263, "seek": 71116, "start": 721.4399999999999, "end": 724.9599999999999, "text": " And so a lot of the more manual processes and a lot of the lower level", "tokens": [50878, 400, 370, 257, 688, 295, 264, 544, 9688, 7555, 293, 257, 688, 295, 264, 3126, 1496, 51054], "temperature": 0.0, "avg_logprob": -0.1531742206518201, "compression_ratio": 1.704968944099379, "no_speech_prob": 0.016911324113607407}, {"id": 264, "seek": 71116, "start": 724.9599999999999, "end": 729.12, "text": " details that we've been focusing on, if not struggling on in C, start to go away.", "tokens": [51054, 4365, 300, 321, 600, 668, 8416, 322, 11, 498, 406, 9314, 322, 294, 383, 11, 722, 281, 352, 1314, 13, 51262], "temperature": 0.0, "avg_logprob": -0.1531742206518201, "compression_ratio": 1.704968944099379, "no_speech_prob": 0.016911324113607407}, {"id": 265, "seek": 71116, "start": 729.12, "end": 732.8, "text": " Because much like in week zero, where we started layering on idea after idea,", "tokens": [51262, 1436, 709, 411, 294, 1243, 4018, 11, 689, 321, 1409, 40754, 322, 1558, 934, 1558, 11, 51446], "temperature": 0.0, "avg_logprob": -0.1531742206518201, "compression_ratio": 1.704968944099379, "no_speech_prob": 0.016911324113607407}, {"id": 266, "seek": 71116, "start": 732.8, "end": 737.4399999999999, "text": " zeros and ones, ASCII, colors and whatnot, similarly with our actual tools,", "tokens": [51446, 35193, 293, 2306, 11, 7469, 34, 9503, 11, 4577, 293, 25882, 11, 14138, 365, 527, 3539, 3873, 11, 51678], "temperature": 0.0, "avg_logprob": -0.1531742206518201, "compression_ratio": 1.704968944099379, "no_speech_prob": 0.016911324113607407}, {"id": 267, "seek": 71116, "start": 737.4399999999999, "end": 738.9599999999999, "text": " are we going to start to do the same.", "tokens": [51678, 366, 321, 516, 281, 722, 281, 360, 264, 912, 13, 51754], "temperature": 0.0, "avg_logprob": -0.1531742206518201, "compression_ratio": 1.704968944099379, "no_speech_prob": 0.016911324113607407}, {"id": 268, "seek": 73896, "start": 739.0, "end": 742.2, "text": " So whereas in the past, or whereas in actuality,", "tokens": [50366, 407, 9735, 294, 264, 1791, 11, 420, 9735, 294, 3539, 507, 11, 50526], "temperature": 0.0, "avg_logprob": -0.12133738398551941, "compression_ratio": 1.6633663366336633, "no_speech_prob": 0.00024536499404348433}, {"id": 269, "seek": 73896, "start": 742.2, "end": 746.5600000000001, "text": " what's going on underneath the hood is this process here,", "tokens": [50526, 437, 311, 516, 322, 7223, 264, 13376, 307, 341, 1399, 510, 11, 50744], "temperature": 0.0, "avg_logprob": -0.12133738398551941, "compression_ratio": 1.6633663366336633, "no_speech_prob": 0.00024536499404348433}, {"id": 270, "seek": 73896, "start": 746.5600000000001, "end": 750.0400000000001, "text": " we can start to think about it really as something quite simpler.", "tokens": [50744, 321, 393, 722, 281, 519, 466, 309, 534, 382, 746, 1596, 18587, 13, 50918], "temperature": 0.0, "avg_logprob": -0.12133738398551941, "compression_ratio": 1.6633663366336633, "no_speech_prob": 0.00024536499404348433}, {"id": 271, "seek": 73896, "start": 750.0400000000001, "end": 754.44, "text": " Now, if you're curious, and if you take some higher level class like CS61", "tokens": [50918, 823, 11, 498, 291, 434, 6369, 11, 293, 498, 291, 747, 512, 2946, 1496, 1508, 411, 9460, 31537, 51138], "temperature": 0.0, "avg_logprob": -0.12133738398551941, "compression_ratio": 1.6633663366336633, "no_speech_prob": 0.00024536499404348433}, {"id": 272, "seek": 73896, "start": 754.44, "end": 757.96, "text": " or another, you'll actually talk about things like byte code and assembly", "tokens": [51138, 420, 1071, 11, 291, 603, 767, 751, 466, 721, 411, 40846, 3089, 293, 12103, 51314], "temperature": 0.0, "avg_logprob": -0.12133738398551941, "compression_ratio": 1.6633663366336633, "no_speech_prob": 0.00024536499404348433}, {"id": 273, "seek": 73896, "start": 757.96, "end": 758.64, "text": " code and the like.", "tokens": [51314, 3089, 293, 264, 411, 13, 51348], "temperature": 0.0, "avg_logprob": -0.12133738398551941, "compression_ratio": 1.6633663366336633, "no_speech_prob": 0.00024536499404348433}, {"id": 274, "seek": 73896, "start": 758.64, "end": 760.72, "text": " And we saw a glimpse of the latter a bit ago.", "tokens": [51348, 400, 321, 1866, 257, 25838, 295, 264, 18481, 257, 857, 2057, 13, 51452], "temperature": 0.0, "avg_logprob": -0.12133738398551941, "compression_ratio": 1.6633663366336633, "no_speech_prob": 0.00024536499404348433}, {"id": 275, "seek": 73896, "start": 760.72, "end": 762.6800000000001, "text": " This happens to be an intermediate language", "tokens": [51452, 639, 2314, 281, 312, 364, 19376, 2856, 51550], "temperature": 0.0, "avg_logprob": -0.12133738398551941, "compression_ratio": 1.6633663366336633, "no_speech_prob": 0.00024536499404348433}, {"id": 276, "seek": 73896, "start": 762.6800000000001, "end": 766.88, "text": " that Python source code is converted into before it's run by the computer.", "tokens": [51550, 300, 15329, 4009, 3089, 307, 16424, 666, 949, 309, 311, 1190, 538, 264, 3820, 13, 51760], "temperature": 0.0, "avg_logprob": -0.12133738398551941, "compression_ratio": 1.6633663366336633, "no_speech_prob": 0.00024536499404348433}, {"id": 277, "seek": 76688, "start": 766.88, "end": 770.92, "text": " But again, we're going to turn a blind eye to those lower level details.", "tokens": [50364, 583, 797, 11, 321, 434, 516, 281, 1261, 257, 6865, 3313, 281, 729, 3126, 1496, 4365, 13, 50566], "temperature": 0.0, "avg_logprob": -0.11607742309570312, "compression_ratio": 1.791530944625407, "no_speech_prob": 0.00043054227717220783}, {"id": 278, "seek": 76688, "start": 770.92, "end": 773.52, "text": " So here are some of the tools now in our toolkit.", "tokens": [50566, 407, 510, 366, 512, 295, 264, 3873, 586, 294, 527, 40167, 13, 50696], "temperature": 0.0, "avg_logprob": -0.11607742309570312, "compression_ratio": 1.791530944625407, "no_speech_prob": 0.00043054227717220783}, {"id": 279, "seek": 76688, "start": 773.52, "end": 775.28, "text": " In Python, there are data types.", "tokens": [50696, 682, 15329, 11, 456, 366, 1412, 3467, 13, 50784], "temperature": 0.0, "avg_logprob": -0.11607742309570312, "compression_ratio": 1.791530944625407, "no_speech_prob": 0.00043054227717220783}, {"id": 280, "seek": 76688, "start": 775.28, "end": 777.92, "text": " Though as of now, we've not seen any examples whereby", "tokens": [50784, 10404, 382, 295, 586, 11, 321, 600, 406, 1612, 604, 5110, 36998, 50916], "temperature": 0.0, "avg_logprob": -0.11607742309570312, "compression_ratio": 1.791530944625407, "no_speech_prob": 0.00043054227717220783}, {"id": 281, "seek": 76688, "start": 777.92, "end": 781.12, "text": " I specify what types of values are going to be in my variables", "tokens": [50916, 286, 16500, 437, 3467, 295, 4190, 366, 516, 281, 312, 294, 452, 9102, 51076], "temperature": 0.0, "avg_logprob": -0.11607742309570312, "compression_ratio": 1.791530944625407, "no_speech_prob": 0.00043054227717220783}, {"id": 282, "seek": 76688, "start": 781.12, "end": 783.6, "text": " or what types of values a function is going to return.", "tokens": [51076, 420, 437, 3467, 295, 4190, 257, 2445, 307, 516, 281, 2736, 13, 51200], "temperature": 0.0, "avg_logprob": -0.11607742309570312, "compression_ratio": 1.791530944625407, "no_speech_prob": 0.00043054227717220783}, {"id": 283, "seek": 76688, "start": 783.6, "end": 785.28, "text": " But they are there.", "tokens": [51200, 583, 436, 366, 456, 13, 51284], "temperature": 0.0, "avg_logprob": -0.11607742309570312, "compression_ratio": 1.791530944625407, "no_speech_prob": 0.00043054227717220783}, {"id": 284, "seek": 76688, "start": 785.28, "end": 787.8, "text": " Everything is sort of loosely typed in that whatever", "tokens": [51284, 5471, 307, 1333, 295, 37966, 33941, 294, 300, 2035, 51410], "temperature": 0.0, "avg_logprob": -0.11607742309570312, "compression_ratio": 1.791530944625407, "no_speech_prob": 0.00043054227717220783}, {"id": 285, "seek": 76688, "start": 787.8, "end": 791.28, "text": " you want a variable to be, it will just take on that data type,", "tokens": [51410, 291, 528, 257, 7006, 281, 312, 11, 309, 486, 445, 747, 322, 300, 1412, 2010, 11, 51584], "temperature": 0.0, "avg_logprob": -0.11607742309570312, "compression_ratio": 1.791530944625407, "no_speech_prob": 0.00043054227717220783}, {"id": 286, "seek": 76688, "start": 791.28, "end": 793.52, "text": " whether it's an int or string or the like.", "tokens": [51584, 1968, 309, 311, 364, 560, 420, 6798, 420, 264, 411, 13, 51696], "temperature": 0.0, "avg_logprob": -0.11607742309570312, "compression_ratio": 1.791530944625407, "no_speech_prob": 0.00043054227717220783}, {"id": 287, "seek": 76688, "start": 793.52, "end": 795.4, "text": " It's not going to be the full word string.", "tokens": [51696, 467, 311, 406, 516, 281, 312, 264, 1577, 1349, 6798, 13, 51790], "temperature": 0.0, "avg_logprob": -0.11607742309570312, "compression_ratio": 1.791530944625407, "no_speech_prob": 0.00043054227717220783}, {"id": 288, "seek": 79540, "start": 795.4, "end": 797.56, "text": " In Python, it's literally called str.", "tokens": [50364, 682, 15329, 11, 309, 311, 3736, 1219, 1056, 13, 50472], "temperature": 0.0, "avg_logprob": -0.13878784470885763, "compression_ratio": 1.6634615384615385, "no_speech_prob": 0.0021156221628189087}, {"id": 289, "seek": 79540, "start": 797.56, "end": 802.24, "text": " But there are some familiar types here, bool and float and int and others.", "tokens": [50472, 583, 456, 366, 512, 4963, 3467, 510, 11, 748, 401, 293, 15706, 293, 560, 293, 2357, 13, 50706], "temperature": 0.0, "avg_logprob": -0.13878784470885763, "compression_ratio": 1.6634615384615385, "no_speech_prob": 0.0021156221628189087}, {"id": 290, "seek": 79540, "start": 802.24, "end": 806.28, "text": " And in fact, among the others, as we'll soon see, are features like range.", "tokens": [50706, 400, 294, 1186, 11, 3654, 264, 2357, 11, 382, 321, 603, 2321, 536, 11, 366, 4122, 411, 3613, 13, 50908], "temperature": 0.0, "avg_logprob": -0.13878784470885763, "compression_ratio": 1.6634615384615385, "no_speech_prob": 0.0021156221628189087}, {"id": 291, "seek": 79540, "start": 806.28, "end": 810.4, "text": " But before that, no two that will provide for at least our first foray", "tokens": [50908, 583, 949, 300, 11, 572, 732, 300, 486, 2893, 337, 412, 1935, 527, 700, 337, 320, 51114], "temperature": 0.0, "avg_logprob": -0.13878784470885763, "compression_ratio": 1.6634615384615385, "no_speech_prob": 0.0021156221628189087}, {"id": 292, "seek": 79540, "start": 810.4, "end": 813.04, "text": " into Python a few familiar functions.", "tokens": [51114, 666, 15329, 257, 1326, 4963, 6828, 13, 51246], "temperature": 0.0, "avg_logprob": -0.13878784470885763, "compression_ratio": 1.6634615384615385, "no_speech_prob": 0.0021156221628189087}, {"id": 293, "seek": 79540, "start": 813.04, "end": 816.6, "text": " So Python has different mechanisms than C for getting input from the user.", "tokens": [51246, 407, 15329, 575, 819, 15902, 813, 383, 337, 1242, 4846, 490, 264, 4195, 13, 51424], "temperature": 0.0, "avg_logprob": -0.13878784470885763, "compression_ratio": 1.6634615384615385, "no_speech_prob": 0.0021156221628189087}, {"id": 294, "seek": 79540, "start": 816.6, "end": 821.48, "text": " We've abstracted some of those details away in a new CS50 library for Python", "tokens": [51424, 492, 600, 12649, 292, 512, 295, 729, 4365, 1314, 294, 257, 777, 9460, 2803, 6405, 337, 15329, 51668], "temperature": 0.0, "avg_logprob": -0.13878784470885763, "compression_ratio": 1.6634615384615385, "no_speech_prob": 0.0021156221628189087}, {"id": 295, "seek": 79540, "start": 821.48, "end": 824.92, "text": " that you'll really just use one or few times before we transition away", "tokens": [51668, 300, 291, 603, 534, 445, 764, 472, 420, 1326, 1413, 949, 321, 6034, 1314, 51840], "temperature": 0.0, "avg_logprob": -0.13878784470885763, "compression_ratio": 1.6634615384615385, "no_speech_prob": 0.0021156221628189087}, {"id": 296, "seek": 82492, "start": 824.92, "end": 825.8399999999999, "text": " from even that.", "tokens": [50364, 490, 754, 300, 13, 50410], "temperature": 0.0, "avg_logprob": -0.1563956649215133, "compression_ratio": 1.7993527508090614, "no_speech_prob": 0.0010004480136558414}, {"id": 297, "seek": 82492, "start": 825.8399999999999, "end": 828.92, "text": " But we'll give you functions like get char, get float, get int, get string", "tokens": [50410, 583, 321, 603, 976, 291, 6828, 411, 483, 1290, 11, 483, 15706, 11, 483, 560, 11, 483, 6798, 50564], "temperature": 0.0, "avg_logprob": -0.1563956649215133, "compression_ratio": 1.7993527508090614, "no_speech_prob": 0.0010004480136558414}, {"id": 298, "seek": 82492, "start": 828.92, "end": 832.8, "text": " that handle all the requisite error checking so that at least for your first few programs,", "tokens": [50564, 300, 4813, 439, 264, 49878, 642, 6713, 8568, 370, 300, 412, 1935, 337, 428, 700, 1326, 4268, 11, 50758], "temperature": 0.0, "avg_logprob": -0.1563956649215133, "compression_ratio": 1.7993527508090614, "no_speech_prob": 0.0010004480136558414}, {"id": 299, "seek": 82492, "start": 832.8, "end": 836.1999999999999, "text": " you can just start to get some real work done without diving", "tokens": [50758, 291, 393, 445, 722, 281, 483, 512, 957, 589, 1096, 1553, 20241, 50928], "temperature": 0.0, "avg_logprob": -0.1563956649215133, "compression_ratio": 1.7993527508090614, "no_speech_prob": 0.0010004480136558414}, {"id": 300, "seek": 82492, "start": 836.1999999999999, "end": 838.8, "text": " into underneath the hood there.", "tokens": [50928, 666, 7223, 264, 13376, 456, 13, 51058], "temperature": 0.0, "avg_logprob": -0.1563956649215133, "compression_ratio": 1.7993527508090614, "no_speech_prob": 0.0010004480136558414}, {"id": 301, "seek": 82492, "start": 838.8, "end": 841.36, "text": " And then lastly, here's some other tools in our toolkit.", "tokens": [51058, 400, 550, 16386, 11, 510, 311, 512, 661, 3873, 294, 527, 40167, 13, 51186], "temperature": 0.0, "avg_logprob": -0.1563956649215133, "compression_ratio": 1.7993527508090614, "no_speech_prob": 0.0010004480136558414}, {"id": 302, "seek": 82492, "start": 841.36, "end": 843.8, "text": " And we'll just scratch the surface of some of these today.", "tokens": [51186, 400, 321, 603, 445, 8459, 264, 3753, 295, 512, 295, 613, 965, 13, 51308], "temperature": 0.0, "avg_logprob": -0.1563956649215133, "compression_ratio": 1.7993527508090614, "no_speech_prob": 0.0010004480136558414}, {"id": 303, "seek": 82492, "start": 843.8, "end": 848.12, "text": " But what's nice about Python and what's nice about higher level languages", "tokens": [51308, 583, 437, 311, 1481, 466, 15329, 293, 437, 311, 1481, 466, 2946, 1496, 8650, 51524], "temperature": 0.0, "avg_logprob": -0.1563956649215133, "compression_ratio": 1.7993527508090614, "no_speech_prob": 0.0010004480136558414}, {"id": 304, "seek": 82492, "start": 848.12, "end": 850.1999999999999, "text": " more generally, like more modern languages that", "tokens": [51524, 544, 5101, 11, 411, 544, 4363, 8650, 300, 51628], "temperature": 0.0, "avg_logprob": -0.1563956649215133, "compression_ratio": 1.7993527508090614, "no_speech_prob": 0.0010004480136558414}, {"id": 305, "seek": 82492, "start": 850.1999999999999, "end": 852.5999999999999, "text": " learned lessons from older languages like C", "tokens": [51628, 3264, 8820, 490, 4906, 8650, 411, 383, 51748], "temperature": 0.0, "avg_logprob": -0.1563956649215133, "compression_ratio": 1.7993527508090614, "no_speech_prob": 0.0010004480136558414}, {"id": 306, "seek": 85260, "start": 852.6, "end": 856.9200000000001, "text": " is that you get so much more for free, so much more out of the box.", "tokens": [50364, 307, 300, 291, 483, 370, 709, 544, 337, 1737, 11, 370, 709, 544, 484, 295, 264, 2424, 13, 50580], "temperature": 0.0, "avg_logprob": -0.14498688957907938, "compression_ratio": 1.7157894736842105, "no_speech_prob": 0.002050654496997595}, {"id": 307, "seek": 85260, "start": 856.9200000000001, "end": 858.48, "text": " There's so much more of a kitchen sink.", "tokens": [50580, 821, 311, 370, 709, 544, 295, 257, 6525, 9500, 13, 50658], "temperature": 0.0, "avg_logprob": -0.14498688957907938, "compression_ratio": 1.7157894736842105, "no_speech_prob": 0.002050654496997595}, {"id": 308, "seek": 85260, "start": 858.48, "end": 860.84, "text": " There's so many metaphors we can use here, all of which", "tokens": [50658, 821, 311, 370, 867, 30946, 830, 321, 393, 764, 510, 11, 439, 295, 597, 50776], "temperature": 0.0, "avg_logprob": -0.14498688957907938, "compression_ratio": 1.7157894736842105, "no_speech_prob": 0.002050654496997595}, {"id": 309, "seek": 85260, "start": 860.84, "end": 864.64, "text": " speak to the fact that Python has more features than C.", "tokens": [50776, 1710, 281, 264, 1186, 300, 15329, 575, 544, 4122, 813, 383, 13, 50966], "temperature": 0.0, "avg_logprob": -0.14498688957907938, "compression_ratio": 1.7157894736842105, "no_speech_prob": 0.002050654496997595}, {"id": 310, "seek": 85260, "start": 864.64, "end": 869.0400000000001, "text": " Much like Java, if you took a PCS or something else, had than C,", "tokens": [50966, 12313, 411, 10745, 11, 498, 291, 1890, 257, 6465, 50, 420, 746, 1646, 11, 632, 813, 383, 11, 51186], "temperature": 0.0, "avg_logprob": -0.14498688957907938, "compression_ratio": 1.7157894736842105, "no_speech_prob": 0.002050654496997595}, {"id": 311, "seek": 85260, "start": 869.0400000000001, "end": 873.28, "text": " so does Python have a whole toolkit for representing complex numbers,", "tokens": [51186, 370, 775, 15329, 362, 257, 1379, 40167, 337, 13460, 3997, 3547, 11, 51398], "temperature": 0.0, "avg_logprob": -0.14498688957907938, "compression_ratio": 1.7157894736842105, "no_speech_prob": 0.002050654496997595}, {"id": 312, "seek": 85260, "start": 873.28, "end": 876.64, "text": " for representing dictionaries otherwise implemented as hash tables,", "tokens": [51398, 337, 13460, 22352, 4889, 5911, 12270, 382, 22019, 8020, 11, 51566], "temperature": 0.0, "avg_logprob": -0.14498688957907938, "compression_ratio": 1.7157894736842105, "no_speech_prob": 0.002050654496997595}, {"id": 313, "seek": 85260, "start": 876.64, "end": 877.6, "text": " as you now know.", "tokens": [51566, 382, 291, 586, 458, 13, 51614], "temperature": 0.0, "avg_logprob": -0.14498688957907938, "compression_ratio": 1.7157894736842105, "no_speech_prob": 0.002050654496997595}, {"id": 314, "seek": 85260, "start": 877.6, "end": 879.88, "text": " Lists, which is kind of synonymous with an array,", "tokens": [51614, 441, 1751, 11, 597, 307, 733, 295, 5451, 18092, 365, 364, 10225, 11, 51728], "temperature": 0.0, "avg_logprob": -0.14498688957907938, "compression_ratio": 1.7157894736842105, "no_speech_prob": 0.002050654496997595}, {"id": 315, "seek": 87988, "start": 879.88, "end": 883.76, "text": " but in a list is an array that can sort of automatically grow and shrink.", "tokens": [50364, 457, 294, 257, 1329, 307, 364, 10225, 300, 393, 1333, 295, 6772, 1852, 293, 23060, 13, 50558], "temperature": 0.0, "avg_logprob": -0.14621022205479098, "compression_ratio": 1.7696969696969698, "no_speech_prob": 0.000911022478248924}, {"id": 316, "seek": 87988, "start": 883.76, "end": 885.88, "text": " We don't have to jump through hoops as we did in C.", "tokens": [50558, 492, 500, 380, 362, 281, 3012, 807, 1106, 3370, 382, 321, 630, 294, 383, 13, 50664], "temperature": 0.0, "avg_logprob": -0.14621022205479098, "compression_ratio": 1.7696969696969698, "no_speech_prob": 0.000911022478248924}, {"id": 317, "seek": 87988, "start": 885.88, "end": 887.88, "text": " Range we've seen briefly, which just hands you back,", "tokens": [50664, 33778, 321, 600, 1612, 10515, 11, 597, 445, 2377, 291, 646, 11, 50764], "temperature": 0.0, "avg_logprob": -0.14621022205479098, "compression_ratio": 1.7696969696969698, "no_speech_prob": 0.000911022478248924}, {"id": 318, "seek": 87988, "start": 887.88, "end": 891.24, "text": " one number after another in some range, ideally for iteration.", "tokens": [50764, 472, 1230, 934, 1071, 294, 512, 3613, 11, 22915, 337, 24784, 13, 50932], "temperature": 0.0, "avg_logprob": -0.14621022205479098, "compression_ratio": 1.7696969696969698, "no_speech_prob": 0.000911022478248924}, {"id": 319, "seek": 87988, "start": 891.24, "end": 892.88, "text": " Set is the notion from mathematics, where", "tokens": [50932, 8928, 307, 264, 10710, 490, 18666, 11, 689, 51014], "temperature": 0.0, "avg_logprob": -0.14621022205479098, "compression_ratio": 1.7696969696969698, "no_speech_prob": 0.000911022478248924}, {"id": 320, "seek": 87988, "start": 892.88, "end": 895.4, "text": " if you want to put bunches of things into a data structure", "tokens": [51014, 498, 291, 528, 281, 829, 3840, 279, 295, 721, 666, 257, 1412, 3877, 51140], "temperature": 0.0, "avg_logprob": -0.14621022205479098, "compression_ratio": 1.7696969696969698, "no_speech_prob": 0.000911022478248924}, {"id": 321, "seek": 87988, "start": 895.4, "end": 898.4399999999999, "text": " and you want to make sure you have only one of each such thing without", "tokens": [51140, 293, 291, 528, 281, 652, 988, 291, 362, 787, 472, 295, 1184, 1270, 551, 1553, 51292], "temperature": 0.0, "avg_logprob": -0.14621022205479098, "compression_ratio": 1.7696969696969698, "no_speech_prob": 0.000911022478248924}, {"id": 322, "seek": 87988, "start": 898.4399999999999, "end": 900.2, "text": " duplicates, you can use a set.", "tokens": [51292, 17154, 1024, 11, 291, 393, 764, 257, 992, 13, 51380], "temperature": 0.0, "avg_logprob": -0.14621022205479098, "compression_ratio": 1.7696969696969698, "no_speech_prob": 0.000911022478248924}, {"id": 323, "seek": 87988, "start": 900.2, "end": 902.92, "text": " And a tuple is also a mathematical notion, typically,", "tokens": [51380, 400, 257, 2604, 781, 307, 611, 257, 18894, 10710, 11, 5850, 11, 51516], "temperature": 0.0, "avg_logprob": -0.14621022205479098, "compression_ratio": 1.7696969696969698, "no_speech_prob": 0.000911022478248924}, {"id": 324, "seek": 87988, "start": 902.92, "end": 906.68, "text": " where you can combine related things without complicating things", "tokens": [51516, 689, 291, 393, 10432, 4077, 721, 1553, 16060, 990, 721, 51704], "temperature": 0.0, "avg_logprob": -0.14621022205479098, "compression_ratio": 1.7696969696969698, "no_speech_prob": 0.000911022478248924}, {"id": 325, "seek": 87988, "start": 906.68, "end": 908.0, "text": " with actual structs.", "tokens": [51704, 365, 3539, 6594, 82, 13, 51770], "temperature": 0.0, "avg_logprob": -0.14621022205479098, "compression_ratio": 1.7696969696969698, "no_speech_prob": 0.000911022478248924}, {"id": 326, "seek": 90800, "start": 908.04, "end": 911.04, "text": " Like x comma y is a common paradigm in lots of programs,", "tokens": [50366, 1743, 2031, 22117, 288, 307, 257, 2689, 24709, 294, 3195, 295, 4268, 11, 50516], "temperature": 0.0, "avg_logprob": -0.14736153582017197, "compression_ratio": 1.5924764890282133, "no_speech_prob": 0.0005883905687369406}, {"id": 327, "seek": 90800, "start": 911.04, "end": 914.6, "text": " graphics or videos or certainly math and graphing itself.", "tokens": [50516, 11837, 420, 2145, 420, 3297, 5221, 293, 1295, 79, 571, 2564, 13, 50694], "temperature": 0.0, "avg_logprob": -0.14736153582017197, "compression_ratio": 1.5924764890282133, "no_speech_prob": 0.0005883905687369406}, {"id": 328, "seek": 90800, "start": 914.6, "end": 916.92, "text": " You don't really need a whole full-fledged data structure.", "tokens": [50694, 509, 500, 380, 534, 643, 257, 1379, 1577, 12, 69, 1493, 3004, 1412, 3877, 13, 50810], "temperature": 0.0, "avg_logprob": -0.14736153582017197, "compression_ratio": 1.5924764890282133, "no_speech_prob": 0.0005883905687369406}, {"id": 329, "seek": 90800, "start": 916.92, "end": 919.88, "text": " You might just want to say x comma y.", "tokens": [50810, 509, 1062, 445, 528, 281, 584, 2031, 22117, 288, 13, 50958], "temperature": 0.0, "avg_logprob": -0.14736153582017197, "compression_ratio": 1.5924764890282133, "no_speech_prob": 0.0005883905687369406}, {"id": 330, "seek": 90800, "start": 919.88, "end": 922.52, "text": " And so Python gives us that kind of expressiveness.", "tokens": [50958, 400, 370, 15329, 2709, 505, 300, 733, 295, 5109, 8477, 13, 51090], "temperature": 0.0, "avg_logprob": -0.14736153582017197, "compression_ratio": 1.5924764890282133, "no_speech_prob": 0.0005883905687369406}, {"id": 331, "seek": 90800, "start": 922.52, "end": 926.64, "text": " So let's actually now dive in with that quick mapping from one world", "tokens": [51090, 407, 718, 311, 767, 586, 9192, 294, 365, 300, 1702, 18350, 490, 472, 1002, 51296], "temperature": 0.0, "avg_logprob": -0.14736153582017197, "compression_ratio": 1.5924764890282133, "no_speech_prob": 0.0005883905687369406}, {"id": 332, "seek": 90800, "start": 926.64, "end": 930.0, "text": " to the other and focus on what you can actually do with Python.", "tokens": [51296, 281, 264, 661, 293, 1879, 322, 437, 291, 393, 767, 360, 365, 15329, 13, 51464], "temperature": 0.0, "avg_logprob": -0.14736153582017197, "compression_ratio": 1.5924764890282133, "no_speech_prob": 0.0005883905687369406}, {"id": 333, "seek": 90800, "start": 930.0, "end": 933.84, "text": " So here I am in the familiar CS50 IDE, much like we have pre-installed for you,", "tokens": [51464, 407, 510, 286, 669, 294, 264, 4963, 9460, 2803, 40930, 11, 709, 411, 321, 362, 659, 12, 13911, 8907, 337, 291, 11, 51656], "temperature": 0.0, "avg_logprob": -0.14736153582017197, "compression_ratio": 1.5924764890282133, "no_speech_prob": 0.0005883905687369406}, {"id": 334, "seek": 90800, "start": 933.84, "end": 935.48, "text": " Clang and Make and other tools.", "tokens": [51656, 2033, 656, 293, 4387, 293, 661, 3873, 13, 51738], "temperature": 0.0, "avg_logprob": -0.14736153582017197, "compression_ratio": 1.5924764890282133, "no_speech_prob": 0.0005883905687369406}, {"id": 335, "seek": 93548, "start": 935.48, "end": 938.24, "text": " We've also installed for you a program.", "tokens": [50364, 492, 600, 611, 8899, 337, 291, 257, 1461, 13, 50502], "temperature": 0.0, "avg_logprob": -0.11383501688639323, "compression_ratio": 1.8214285714285714, "no_speech_prob": 0.0008830127771943808}, {"id": 336, "seek": 93548, "start": 938.24, "end": 941.76, "text": " That program is called Python, which is a little confusing at first glance,", "tokens": [50502, 663, 1461, 307, 1219, 15329, 11, 597, 307, 257, 707, 13181, 412, 700, 21094, 11, 50678], "temperature": 0.0, "avg_logprob": -0.11383501688639323, "compression_ratio": 1.8214285714285714, "no_speech_prob": 0.0008830127771943808}, {"id": 337, "seek": 93548, "start": 941.76, "end": 944.52, "text": " because Python is apparently the name of the language,", "tokens": [50678, 570, 15329, 307, 7970, 264, 1315, 295, 264, 2856, 11, 50816], "temperature": 0.0, "avg_logprob": -0.11383501688639323, "compression_ratio": 1.8214285714285714, "no_speech_prob": 0.0008830127771943808}, {"id": 338, "seek": 93548, "start": 944.52, "end": 946.24, "text": " but it's also the name of the program.", "tokens": [50816, 457, 309, 311, 611, 264, 1315, 295, 264, 1461, 13, 50902], "temperature": 0.0, "avg_logprob": -0.11383501688639323, "compression_ratio": 1.8214285714285714, "no_speech_prob": 0.0008830127771943808}, {"id": 339, "seek": 93548, "start": 946.24, "end": 947.9200000000001, "text": " And here's where Python is different.", "tokens": [50902, 400, 510, 311, 689, 15329, 307, 819, 13, 50986], "temperature": 0.0, "avg_logprob": -0.11383501688639323, "compression_ratio": 1.8214285714285714, "no_speech_prob": 0.0008830127771943808}, {"id": 340, "seek": 93548, "start": 947.9200000000001, "end": 951.2, "text": " Whereas C is, again, compiled, and you use something like Clang", "tokens": [50986, 13813, 383, 307, 11, 797, 11, 36548, 11, 293, 291, 764, 746, 411, 2033, 656, 51150], "temperature": 0.0, "avg_logprob": -0.11383501688639323, "compression_ratio": 1.8214285714285714, "no_speech_prob": 0.0008830127771943808}, {"id": 341, "seek": 93548, "start": 951.2, "end": 954.36, "text": " to convert it to machine code, Python is both the name of the language", "tokens": [51150, 281, 7620, 309, 281, 3479, 3089, 11, 15329, 307, 1293, 264, 1315, 295, 264, 2856, 51308], "temperature": 0.0, "avg_logprob": -0.11383501688639323, "compression_ratio": 1.8214285714285714, "no_speech_prob": 0.0008830127771943808}, {"id": 342, "seek": 93548, "start": 954.36, "end": 958.16, "text": " and the name of the program you use to interpret the language.", "tokens": [51308, 293, 264, 1315, 295, 264, 1461, 291, 764, 281, 7302, 264, 2856, 13, 51498], "temperature": 0.0, "avg_logprob": -0.11383501688639323, "compression_ratio": 1.8214285714285714, "no_speech_prob": 0.0008830127771943808}, {"id": 343, "seek": 93548, "start": 958.16, "end": 961.04, "text": " So pre-installed in CS50 IDE, and frankly, these days,", "tokens": [51498, 407, 659, 12, 13911, 8907, 294, 9460, 2803, 40930, 11, 293, 11939, 11, 613, 1708, 11, 51642], "temperature": 0.0, "avg_logprob": -0.11383501688639323, "compression_ratio": 1.8214285714285714, "no_speech_prob": 0.0008830127771943808}, {"id": 344, "seek": 93548, "start": 961.04, "end": 964.2, "text": " probably on your own Macs or PCs, even if you don't know it,", "tokens": [51642, 1391, 322, 428, 1065, 5707, 82, 420, 46913, 11, 754, 498, 291, 500, 380, 458, 309, 11, 51800], "temperature": 0.0, "avg_logprob": -0.11383501688639323, "compression_ratio": 1.8214285714285714, "no_speech_prob": 0.0008830127771943808}, {"id": 345, "seek": 96420, "start": 964.2, "end": 968.2, "text": " it is a program called Python that, if fed Python source code as input,", "tokens": [50364, 309, 307, 257, 1461, 1219, 15329, 300, 11, 498, 4636, 15329, 4009, 3089, 382, 4846, 11, 50564], "temperature": 0.0, "avg_logprob": -0.17184899428795125, "compression_ratio": 1.7429577464788732, "no_speech_prob": 0.010326805524528027}, {"id": 346, "seek": 96420, "start": 968.2, "end": 970.08, "text": " will do what that code says.", "tokens": [50564, 486, 360, 437, 300, 3089, 1619, 13, 50658], "temperature": 0.0, "avg_logprob": -0.17184899428795125, "compression_ratio": 1.7429577464788732, "no_speech_prob": 0.010326805524528027}, {"id": 347, "seek": 96420, "start": 970.08, "end": 972.6400000000001, "text": " So let's go ahead and try something just like that.", "tokens": [50658, 407, 718, 311, 352, 2286, 293, 853, 746, 445, 411, 300, 13, 50786], "temperature": 0.0, "avg_logprob": -0.17184899428795125, "compression_ratio": 1.7429577464788732, "no_speech_prob": 0.010326805524528027}, {"id": 348, "seek": 96420, "start": 972.6400000000001, "end": 976.2800000000001, "text": " Let me go ahead and save a file preemptively as hello.py.", "tokens": [50786, 961, 385, 352, 2286, 293, 3155, 257, 3991, 659, 4543, 3413, 382, 7751, 13, 8200, 13, 50968], "temperature": 0.0, "avg_logprob": -0.17184899428795125, "compression_ratio": 1.7429577464788732, "no_speech_prob": 0.010326805524528027}, {"id": 349, "seek": 96420, "start": 976.2800000000001, "end": 979.76, "text": " So .py will be the convention now instead of .c.", "tokens": [50968, 407, 2411, 8200, 486, 312, 264, 10286, 586, 2602, 295, 2411, 66, 13, 51142], "temperature": 0.0, "avg_logprob": -0.17184899428795125, "compression_ratio": 1.7429577464788732, "no_speech_prob": 0.010326805524528027}, {"id": 350, "seek": 96420, "start": 979.76, "end": 982.44, "text": " And I'm going to go ahead and actually keep this pretty simple.", "tokens": [51142, 400, 286, 478, 516, 281, 352, 2286, 293, 767, 1066, 341, 1238, 2199, 13, 51276], "temperature": 0.0, "avg_logprob": -0.17184899428795125, "compression_ratio": 1.7429577464788732, "no_speech_prob": 0.010326805524528027}, {"id": 351, "seek": 96420, "start": 982.44, "end": 983.96, "text": " I'm just going to print the first thing.", "tokens": [51276, 286, 478, 445, 516, 281, 4482, 264, 700, 551, 13, 51352], "temperature": 0.0, "avg_logprob": -0.17184899428795125, "compression_ratio": 1.7429577464788732, "no_speech_prob": 0.010326805524528027}, {"id": 352, "seek": 96420, "start": 983.96, "end": 986.32, "text": " It's muscle memory, so it's not printf anymore.", "tokens": [51352, 467, 311, 8679, 4675, 11, 370, 309, 311, 406, 4482, 69, 3602, 13, 51470], "temperature": 0.0, "avg_logprob": -0.17184899428795125, "compression_ratio": 1.7429577464788732, "no_speech_prob": 0.010326805524528027}, {"id": 353, "seek": 96420, "start": 986.32, "end": 990.36, "text": " It's just hello, world, save, done.", "tokens": [51470, 467, 311, 445, 7751, 11, 1002, 11, 3155, 11, 1096, 13, 51672], "temperature": 0.0, "avg_logprob": -0.17184899428795125, "compression_ratio": 1.7429577464788732, "no_speech_prob": 0.010326805524528027}, {"id": 354, "seek": 96420, "start": 990.36, "end": 992.72, "text": " That's going to be my first program in Python.", "tokens": [51672, 663, 311, 516, 281, 312, 452, 700, 1461, 294, 15329, 13, 51790], "temperature": 0.0, "avg_logprob": -0.17184899428795125, "compression_ratio": 1.7429577464788732, "no_speech_prob": 0.010326805524528027}, {"id": 355, "seek": 99272, "start": 992.72, "end": 993.22, "text": " Why?", "tokens": [50364, 1545, 30, 50389], "temperature": 0.0, "avg_logprob": -0.1527215434658912, "compression_ratio": 1.583969465648855, "no_speech_prob": 0.0047549535520374775}, {"id": 356, "seek": 99272, "start": 993.22, "end": 994.48, "text": " It's one line of code.", "tokens": [50389, 467, 311, 472, 1622, 295, 3089, 13, 50452], "temperature": 0.0, "avg_logprob": -0.1527215434658912, "compression_ratio": 1.583969465648855, "no_speech_prob": 0.0047549535520374775}, {"id": 357, "seek": 99272, "start": 994.48, "end": 998.76, "text": " It's consistent with the features I've claimed Python has.", "tokens": [50452, 467, 311, 8398, 365, 264, 4122, 286, 600, 12941, 15329, 575, 13, 50666], "temperature": 0.0, "avg_logprob": -0.1527215434658912, "compression_ratio": 1.583969465648855, "no_speech_prob": 0.0047549535520374775}, {"id": 358, "seek": 99272, "start": 998.76, "end": 1000.36, "text": " So how do I run it?", "tokens": [50666, 407, 577, 360, 286, 1190, 309, 30, 50746], "temperature": 0.0, "avg_logprob": -0.1527215434658912, "compression_ratio": 1.583969465648855, "no_speech_prob": 0.0047549535520374775}, {"id": 359, "seek": 99272, "start": 1000.36, "end": 1003.96, "text": " Well, in C, we would have done like make hello,", "tokens": [50746, 1042, 11, 294, 383, 11, 321, 576, 362, 1096, 411, 652, 7751, 11, 50926], "temperature": 0.0, "avg_logprob": -0.1527215434658912, "compression_ratio": 1.583969465648855, "no_speech_prob": 0.0047549535520374775}, {"id": 360, "seek": 99272, "start": 1003.96, "end": 1007.44, "text": " but make knows nothing about this because make is typically used with C,", "tokens": [50926, 457, 652, 3255, 1825, 466, 341, 570, 652, 307, 5850, 1143, 365, 383, 11, 51100], "temperature": 0.0, "avg_logprob": -0.1527215434658912, "compression_ratio": 1.583969465648855, "no_speech_prob": 0.0047549535520374775}, {"id": 361, "seek": 99272, "start": 1007.44, "end": 1009.6800000000001, "text": " at least in this context here.", "tokens": [51100, 412, 1935, 294, 341, 4319, 510, 13, 51212], "temperature": 0.0, "avg_logprob": -0.1527215434658912, "compression_ratio": 1.583969465648855, "no_speech_prob": 0.0047549535520374775}, {"id": 362, "seek": 99272, "start": 1009.6800000000001, "end": 1014.0, "text": " So maybe it's like dot slash hello.py.", "tokens": [51212, 407, 1310, 309, 311, 411, 5893, 17330, 7751, 13, 8200, 13, 51428], "temperature": 0.0, "avg_logprob": -0.1527215434658912, "compression_ratio": 1.583969465648855, "no_speech_prob": 0.0047549535520374775}, {"id": 363, "seek": 99272, "start": 1014.0, "end": 1016.44, "text": " No, it seems I don't have permission there.", "tokens": [51428, 883, 11, 309, 2544, 286, 500, 380, 362, 11226, 456, 13, 51550], "temperature": 0.0, "avg_logprob": -0.1527215434658912, "compression_ratio": 1.583969465648855, "no_speech_prob": 0.0047549535520374775}, {"id": 364, "seek": 99272, "start": 1016.44, "end": 1020.88, "text": " But there's a step that I teased us with earlier on just the slide alone.", "tokens": [51550, 583, 456, 311, 257, 1823, 300, 286, 535, 1937, 505, 365, 3071, 322, 445, 264, 4137, 3312, 13, 51772], "temperature": 0.0, "avg_logprob": -0.1527215434658912, "compression_ratio": 1.583969465648855, "no_speech_prob": 0.0047549535520374775}, {"id": 365, "seek": 102088, "start": 1020.88, "end": 1025.56, "text": " How do I go about running a program, did I say?", "tokens": [50364, 1012, 360, 286, 352, 466, 2614, 257, 1461, 11, 630, 286, 584, 30, 50598], "temperature": 0.0, "avg_logprob": -0.12788598489441327, "compression_ratio": 1.7292993630573248, "no_speech_prob": 0.00015843393339309841}, {"id": 366, "seek": 102088, "start": 1025.56, "end": 1027.44, "text": " Yeah, I have to be a little more explicit.", "tokens": [50598, 865, 11, 286, 362, 281, 312, 257, 707, 544, 13691, 13, 50692], "temperature": 0.0, "avg_logprob": -0.12788598489441327, "compression_ratio": 1.7292993630573248, "no_speech_prob": 0.00015843393339309841}, {"id": 367, "seek": 102088, "start": 1027.44, "end": 1030.76, "text": " So Python, which is the name of the interpreter that understands Python,", "tokens": [50692, 407, 15329, 11, 597, 307, 264, 1315, 295, 264, 34132, 300, 15146, 15329, 11, 50858], "temperature": 0.0, "avg_logprob": -0.12788598489441327, "compression_ratio": 1.7292993630573248, "no_speech_prob": 0.00015843393339309841}, {"id": 368, "seek": 102088, "start": 1030.76, "end": 1032.36, "text": " and now I need to feed it some input.", "tokens": [50858, 293, 586, 286, 643, 281, 3154, 309, 512, 4846, 13, 50938], "temperature": 0.0, "avg_logprob": -0.12788598489441327, "compression_ratio": 1.7292993630573248, "no_speech_prob": 0.00015843393339309841}, {"id": 369, "seek": 102088, "start": 1032.36, "end": 1035.88, "text": " And we know from our time in C that programs can take command line arguments.", "tokens": [50938, 400, 321, 458, 490, 527, 565, 294, 383, 300, 4268, 393, 747, 5622, 1622, 12869, 13, 51114], "temperature": 0.0, "avg_logprob": -0.12788598489441327, "compression_ratio": 1.7292993630573248, "no_speech_prob": 0.00015843393339309841}, {"id": 370, "seek": 102088, "start": 1035.88, "end": 1037.28, "text": " And indeed, this program itself does.", "tokens": [51114, 400, 6451, 11, 341, 1461, 2564, 775, 13, 51184], "temperature": 0.0, "avg_logprob": -0.12788598489441327, "compression_ratio": 1.7292993630573248, "no_speech_prob": 0.00015843393339309841}, {"id": 371, "seek": 102088, "start": 1037.28, "end": 1040.24, "text": " Python, you just give it the name of a program to run.", "tokens": [51184, 15329, 11, 291, 445, 976, 309, 264, 1315, 295, 257, 1461, 281, 1190, 13, 51332], "temperature": 0.0, "avg_logprob": -0.12788598489441327, "compression_ratio": 1.7292993630573248, "no_speech_prob": 0.00015843393339309841}, {"id": 372, "seek": 102088, "start": 1040.24, "end": 1043.32, "text": " And there it is, our very first program.", "tokens": [51332, 400, 456, 309, 307, 11, 527, 588, 700, 1461, 13, 51486], "temperature": 0.0, "avg_logprob": -0.12788598489441327, "compression_ratio": 1.7292993630573248, "no_speech_prob": 0.00015843393339309841}, {"id": 373, "seek": 102088, "start": 1043.32, "end": 1044.8, "text": " So that's all fine and good.", "tokens": [51486, 407, 300, 311, 439, 2489, 293, 665, 13, 51560], "temperature": 0.0, "avg_logprob": -0.12788598489441327, "compression_ratio": 1.7292993630573248, "no_speech_prob": 0.00015843393339309841}, {"id": 374, "seek": 102088, "start": 1044.8, "end": 1047.4, "text": " But what if I wanted to do something a little more interesting,", "tokens": [51560, 583, 437, 498, 286, 1415, 281, 360, 746, 257, 707, 544, 1880, 11, 51690], "temperature": 0.0, "avg_logprob": -0.12788598489441327, "compression_ratio": 1.7292993630573248, "no_speech_prob": 0.00015843393339309841}, {"id": 375, "seek": 102088, "start": 1047.4, "end": 1049.24, "text": " like getting a string from the user?", "tokens": [51690, 411, 1242, 257, 6798, 490, 264, 4195, 30, 51782], "temperature": 0.0, "avg_logprob": -0.12788598489441327, "compression_ratio": 1.7292993630573248, "no_speech_prob": 0.00015843393339309841}, {"id": 376, "seek": 104924, "start": 1049.24, "end": 1052.8, "text": " Well, it turns out in Python, in CS50 ID especially,", "tokens": [50364, 1042, 11, 309, 4523, 484, 294, 15329, 11, 294, 9460, 2803, 7348, 2318, 11, 50542], "temperature": 0.0, "avg_logprob": -0.1478414870145028, "compression_ratio": 1.5720164609053497, "no_speech_prob": 0.00045829801820218563}, {"id": 377, "seek": 104924, "start": 1052.8, "end": 1054.1200000000001, "text": " I can do something like this.", "tokens": [50542, 286, 393, 360, 746, 411, 341, 13, 50608], "temperature": 0.0, "avg_logprob": -0.1478414870145028, "compression_ratio": 1.5720164609053497, "no_speech_prob": 0.00045829801820218563}, {"id": 378, "seek": 104924, "start": 1054.1200000000001, "end": 1058.28, "text": " s gets get underscore string.", "tokens": [50608, 262, 2170, 483, 37556, 6798, 13, 50816], "temperature": 0.0, "avg_logprob": -0.1478414870145028, "compression_ratio": 1.5720164609053497, "no_speech_prob": 0.00045829801820218563}, {"id": 379, "seek": 104924, "start": 1058.28, "end": 1061.84, "text": " And I can ask someone, for instance, for their name, like this.", "tokens": [50816, 400, 286, 393, 1029, 1580, 11, 337, 5197, 11, 337, 641, 1315, 11, 411, 341, 13, 50994], "temperature": 0.0, "avg_logprob": -0.1478414870145028, "compression_ratio": 1.5720164609053497, "no_speech_prob": 0.00045829801820218563}, {"id": 380, "seek": 104924, "start": 1061.84, "end": 1066.84, "text": " Now, CS50 ID is already yelling at me, undefined variable get string.", "tokens": [50994, 823, 11, 9460, 2803, 7348, 307, 1217, 18381, 412, 385, 11, 674, 5666, 2001, 7006, 483, 6798, 13, 51244], "temperature": 0.0, "avg_logprob": -0.1478414870145028, "compression_ratio": 1.5720164609053497, "no_speech_prob": 0.00045829801820218563}, {"id": 381, "seek": 104924, "start": 1066.84, "end": 1070.36, "text": " And let's actually see if maybe it's just buggy.", "tokens": [51244, 400, 718, 311, 767, 536, 498, 1310, 309, 311, 445, 7426, 1480, 13, 51420], "temperature": 0.0, "avg_logprob": -0.1478414870145028, "compression_ratio": 1.5720164609053497, "no_speech_prob": 0.00045829801820218563}, {"id": 382, "seek": 104924, "start": 1070.36, "end": 1073.68, "text": " No, so this is a little more arcane than usual.", "tokens": [51420, 883, 11, 370, 341, 307, 257, 707, 544, 10346, 1929, 813, 7713, 13, 51586], "temperature": 0.0, "avg_logprob": -0.1478414870145028, "compression_ratio": 1.5720164609053497, "no_speech_prob": 0.00045829801820218563}, {"id": 383, "seek": 104924, "start": 1073.68, "end": 1076.6, "text": " But trace back, most recent call last.", "tokens": [51586, 583, 13508, 646, 11, 881, 5162, 818, 1036, 13, 51732], "temperature": 0.0, "avg_logprob": -0.1478414870145028, "compression_ratio": 1.5720164609053497, "no_speech_prob": 0.00045829801820218563}, {"id": 384, "seek": 107660, "start": 1076.8, "end": 1079.52, "text": " Hello.py line 2 in module, whatever that is.", "tokens": [50374, 2425, 13, 8200, 1622, 568, 294, 10088, 11, 2035, 300, 307, 13, 50510], "temperature": 0.0, "avg_logprob": -0.1976876774349728, "compression_ratio": 1.6282051282051282, "no_speech_prob": 0.0259531382471323}, {"id": 385, "seek": 107660, "start": 1079.52, "end": 1081.1599999999999, "text": " So I see a line of code from line 2.", "tokens": [50510, 407, 286, 536, 257, 1622, 295, 3089, 490, 1622, 568, 13, 50592], "temperature": 0.0, "avg_logprob": -0.1976876774349728, "compression_ratio": 1.6282051282051282, "no_speech_prob": 0.0259531382471323}, {"id": 386, "seek": 107660, "start": 1081.1599999999999, "end": 1083.52, "text": " Name, error, name, get string is not defined.", "tokens": [50592, 13866, 11, 6713, 11, 1315, 11, 483, 6798, 307, 406, 7642, 13, 50710], "temperature": 0.0, "avg_logprob": -0.1976876774349728, "compression_ratio": 1.6282051282051282, "no_speech_prob": 0.0259531382471323}, {"id": 387, "seek": 107660, "start": 1083.52, "end": 1086.08, "text": " This is not the same language we've seen before.", "tokens": [50710, 639, 307, 406, 264, 912, 2856, 321, 600, 1612, 949, 13, 50838], "temperature": 0.0, "avg_logprob": -0.1976876774349728, "compression_ratio": 1.6282051282051282, "no_speech_prob": 0.0259531382471323}, {"id": 388, "seek": 107660, "start": 1086.08, "end": 1087.76, "text": " But what does this feel reminiscent of?", "tokens": [50838, 583, 437, 775, 341, 841, 44304, 295, 30, 50922], "temperature": 0.0, "avg_logprob": -0.1976876774349728, "compression_ratio": 1.6282051282051282, "no_speech_prob": 0.0259531382471323}, {"id": 389, "seek": 107660, "start": 1089.76, "end": 1093.08, "text": " Yeah, when the past, when you've forgotten CS50.h,", "tokens": [51022, 865, 11, 562, 264, 1791, 11, 562, 291, 600, 11832, 9460, 2803, 13, 71, 11, 51188], "temperature": 0.0, "avg_logprob": -0.1976876774349728, "compression_ratio": 1.6282051282051282, "no_speech_prob": 0.0259531382471323}, {"id": 390, "seek": 107660, "start": 1093.08, "end": 1096.76, "text": " you've gotten something about an undeclared identifier, something like that.", "tokens": [51188, 291, 600, 5768, 746, 466, 364, 674, 3045, 75, 1642, 45690, 11, 746, 411, 300, 13, 51372], "temperature": 0.0, "avg_logprob": -0.1976876774349728, "compression_ratio": 1.6282051282051282, "no_speech_prob": 0.0259531382471323}, {"id": 391, "seek": 107660, "start": 1096.76, "end": 1100.1599999999999, "text": " It just didn't understand something related to the CS50 library.", "tokens": [51372, 467, 445, 994, 380, 1223, 746, 4077, 281, 264, 9460, 2803, 6405, 13, 51542], "temperature": 0.0, "avg_logprob": -0.1976876774349728, "compression_ratio": 1.6282051282051282, "no_speech_prob": 0.0259531382471323}, {"id": 392, "seek": 107660, "start": 1100.1599999999999, "end": 1103.8, "text": " So in C, we would have done include CS50.h.", "tokens": [51542, 407, 294, 383, 11, 321, 576, 362, 1096, 4090, 9460, 2803, 13, 71, 13, 51724], "temperature": 0.0, "avg_logprob": -0.1976876774349728, "compression_ratio": 1.6282051282051282, "no_speech_prob": 0.0259531382471323}, {"id": 393, "seek": 107660, "start": 1103.8, "end": 1106.36, "text": " That's no longer germane, because now we're in Python.", "tokens": [51724, 663, 311, 572, 2854, 19858, 1929, 11, 570, 586, 321, 434, 294, 15329, 13, 51852], "temperature": 0.0, "avg_logprob": -0.1976876774349728, "compression_ratio": 1.6282051282051282, "no_speech_prob": 0.0259531382471323}, {"id": 394, "seek": 110636, "start": 1106.36, "end": 1108.08, "text": " But it's somewhat similar in spirit.", "tokens": [50364, 583, 309, 311, 8344, 2531, 294, 3797, 13, 50450], "temperature": 0.0, "avg_logprob": -0.17355677286783855, "compression_ratio": 1.686084142394822, "no_speech_prob": 0.0006666775443591177}, {"id": 395, "seek": 110636, "start": 1108.08, "end": 1113.1599999999999, "text": " Now I'm going to say, instead, from CS50, import get string.", "tokens": [50450, 823, 286, 478, 516, 281, 584, 11, 2602, 11, 490, 9460, 2803, 11, 974, 483, 6798, 13, 50704], "temperature": 0.0, "avg_logprob": -0.17355677286783855, "compression_ratio": 1.686084142394822, "no_speech_prob": 0.0006666775443591177}, {"id": 396, "seek": 110636, "start": 1113.1599999999999, "end": 1115.12, "text": " And now save that.", "tokens": [50704, 400, 586, 3155, 300, 13, 50802], "temperature": 0.0, "avg_logprob": -0.17355677286783855, "compression_ratio": 1.686084142394822, "no_speech_prob": 0.0006666775443591177}, {"id": 397, "seek": 110636, "start": 1115.12, "end": 1118.56, "text": " And hopefully, momentarily, the errors will go away as the IDE realizes,", "tokens": [50802, 400, 4696, 11, 1623, 3289, 11, 264, 13603, 486, 352, 1314, 382, 264, 40930, 29316, 11, 50974], "temperature": 0.0, "avg_logprob": -0.17355677286783855, "compression_ratio": 1.686084142394822, "no_speech_prob": 0.0006666775443591177}, {"id": 398, "seek": 110636, "start": 1118.56, "end": 1122.3999999999999, "text": " oh, you've now imported the CS50 library, specifically a method,", "tokens": [50974, 1954, 11, 291, 600, 586, 25524, 264, 9460, 2803, 6405, 11, 4682, 257, 3170, 11, 51166], "temperature": 0.0, "avg_logprob": -0.17355677286783855, "compression_ratio": 1.686084142394822, "no_speech_prob": 0.0006666775443591177}, {"id": 399, "seek": 110636, "start": 1122.3999999999999, "end": 1125.08, "text": " or function, rather, inside of it, called get string.", "tokens": [51166, 420, 2445, 11, 2831, 11, 1854, 295, 309, 11, 1219, 483, 6798, 13, 51300], "temperature": 0.0, "avg_logprob": -0.17355677286783855, "compression_ratio": 1.686084142394822, "no_speech_prob": 0.0006666775443591177}, {"id": 400, "seek": 110636, "start": 1125.08, "end": 1126.6799999999998, "text": " So there, too, it's different syntax.", "tokens": [51300, 407, 456, 11, 886, 11, 309, 311, 819, 28431, 13, 51380], "temperature": 0.0, "avg_logprob": -0.17355677286783855, "compression_ratio": 1.686084142394822, "no_speech_prob": 0.0006666775443591177}, {"id": 401, "seek": 110636, "start": 1126.6799999999998, "end": 1128.52, "text": " But it kind of says what it means, from CS50, which", "tokens": [51380, 583, 309, 733, 295, 1619, 437, 309, 1355, 11, 490, 9460, 2803, 11, 597, 51472], "temperature": 0.0, "avg_logprob": -0.17355677286783855, "compression_ratio": 1.686084142394822, "no_speech_prob": 0.0006666775443591177}, {"id": 402, "seek": 110636, "start": 1128.52, "end": 1131.6399999999999, "text": " is apparently the name of the library, import a function called get string.", "tokens": [51472, 307, 7970, 264, 1315, 295, 264, 6405, 11, 974, 257, 2445, 1219, 483, 6798, 13, 51628], "temperature": 0.0, "avg_logprob": -0.17355677286783855, "compression_ratio": 1.686084142394822, "no_speech_prob": 0.0006666775443591177}, {"id": 403, "seek": 110636, "start": 1131.6399999999999, "end": 1134.8, "text": " Now, if I go ahead and rerun Python, hello.py,", "tokens": [51628, 823, 11, 498, 286, 352, 2286, 293, 43819, 409, 15329, 11, 7751, 13, 8200, 11, 51786], "temperature": 0.0, "avg_logprob": -0.17355677286783855, "compression_ratio": 1.686084142394822, "no_speech_prob": 0.0006666775443591177}, {"id": 404, "seek": 113480, "start": 1134.8, "end": 1137.08, "text": " I can go ahead and type in, say, Maria's name,", "tokens": [50364, 286, 393, 352, 2286, 293, 2010, 294, 11, 584, 11, 12734, 311, 1315, 11, 50478], "temperature": 0.0, "avg_logprob": -0.18975601733570369, "compression_ratio": 1.6813186813186813, "no_speech_prob": 0.0015486683696508408}, {"id": 405, "seek": 113480, "start": 1137.08, "end": 1141.56, "text": " and ignore her altogether, because I need to make a fix here.", "tokens": [50478, 293, 11200, 720, 19051, 11, 570, 286, 643, 281, 652, 257, 3191, 510, 13, 50702], "temperature": 0.0, "avg_logprob": -0.18975601733570369, "compression_ratio": 1.6813186813186813, "no_speech_prob": 0.0015486683696508408}, {"id": 406, "seek": 113480, "start": 1141.56, "end": 1146.1599999999999, "text": " What's the obvious bug, obvious now, to me, in the program?", "tokens": [50702, 708, 311, 264, 6322, 7426, 11, 6322, 586, 11, 281, 385, 11, 294, 264, 1461, 30, 50932], "temperature": 0.0, "avg_logprob": -0.18975601733570369, "compression_ratio": 1.6813186813186813, "no_speech_prob": 0.0015486683696508408}, {"id": 407, "seek": 113480, "start": 1146.1599999999999, "end": 1148.48, "text": " You need to include the variable, or s?", "tokens": [50932, 509, 643, 281, 4090, 264, 7006, 11, 420, 262, 30, 51048], "temperature": 0.0, "avg_logprob": -0.18975601733570369, "compression_ratio": 1.6813186813186813, "no_speech_prob": 0.0015486683696508408}, {"id": 408, "seek": 113480, "start": 1148.48, "end": 1152.6399999999999, "text": " Yeah, so I need to include s, which I got on line three,", "tokens": [51048, 865, 11, 370, 286, 643, 281, 4090, 262, 11, 597, 286, 658, 322, 1622, 1045, 11, 51256], "temperature": 0.0, "avg_logprob": -0.18975601733570369, "compression_ratio": 1.6813186813186813, "no_speech_prob": 0.0015486683696508408}, {"id": 409, "seek": 113480, "start": 1152.6399999999999, "end": 1155.0, "text": " but then thereafter, use in any way.", "tokens": [51256, 457, 550, 38729, 11, 764, 294, 604, 636, 13, 51374], "temperature": 0.0, "avg_logprob": -0.18975601733570369, "compression_ratio": 1.6813186813186813, "no_speech_prob": 0.0015486683696508408}, {"id": 410, "seek": 113480, "start": 1155.0, "end": 1158.44, "text": " So this is going to be wrong, of course, because that's", "tokens": [51374, 407, 341, 307, 516, 281, 312, 2085, 11, 295, 1164, 11, 570, 300, 311, 51546], "temperature": 0.0, "avg_logprob": -0.18975601733570369, "compression_ratio": 1.6813186813186813, "no_speech_prob": 0.0015486683696508408}, {"id": 411, "seek": 113480, "start": 1158.44, "end": 1160.28, "text": " going to say, literally, hello, s.", "tokens": [51546, 516, 281, 584, 11, 3736, 11, 7751, 11, 262, 13, 51638], "temperature": 0.0, "avg_logprob": -0.18975601733570369, "compression_ratio": 1.6813186813186813, "no_speech_prob": 0.0015486683696508408}, {"id": 412, "seek": 113480, "start": 1160.28, "end": 1164.08, "text": " This is kind of how we used to do it, and then we would put in s.", "tokens": [51638, 639, 307, 733, 295, 577, 321, 1143, 281, 360, 309, 11, 293, 550, 321, 576, 829, 294, 262, 13, 51828], "temperature": 0.0, "avg_logprob": -0.18975601733570369, "compression_ratio": 1.6813186813186813, "no_speech_prob": 0.0015486683696508408}, {"id": 413, "seek": 116408, "start": 1164.08, "end": 1165.28, "text": " But this is not print f.", "tokens": [50364, 583, 341, 307, 406, 4482, 283, 13, 50424], "temperature": 0.0, "avg_logprob": -0.14041205278531774, "compression_ratio": 1.6728624535315986, "no_speech_prob": 0.00030534181860275567}, {"id": 414, "seek": 116408, "start": 1165.28, "end": 1167.6, "text": " This is print, so the world is a little different.", "tokens": [50424, 639, 307, 4482, 11, 370, 264, 1002, 307, 257, 707, 819, 13, 50540], "temperature": 0.0, "avg_logprob": -0.14041205278531774, "compression_ratio": 1.6728624535315986, "no_speech_prob": 0.00030534181860275567}, {"id": 415, "seek": 116408, "start": 1167.6, "end": 1170.28, "text": " And it turns out we can do this in a couple of different ways.", "tokens": [50540, 400, 309, 4523, 484, 321, 393, 360, 341, 294, 257, 1916, 295, 819, 2098, 13, 50674], "temperature": 0.0, "avg_logprob": -0.14041205278531774, "compression_ratio": 1.6728624535315986, "no_speech_prob": 0.00030534181860275567}, {"id": 416, "seek": 116408, "start": 1170.28, "end": 1174.12, "text": " Perhaps the easiest, if at least obvious, would", "tokens": [50674, 10517, 264, 12889, 11, 498, 412, 1935, 6322, 11, 576, 50866], "temperature": 0.0, "avg_logprob": -0.14041205278531774, "compression_ratio": 1.6728624535315986, "no_speech_prob": 0.00030534181860275567}, {"id": 417, "seek": 116408, "start": 1174.12, "end": 1181.12, "text": " be something like this, where I could simply say, hello.", "tokens": [50866, 312, 746, 411, 341, 11, 689, 286, 727, 2935, 584, 11, 7751, 13, 51216], "temperature": 0.0, "avg_logprob": -0.14041205278531774, "compression_ratio": 1.6728624535315986, "no_speech_prob": 0.00030534181860275567}, {"id": 418, "seek": 116408, "start": 1181.12, "end": 1184.04, "text": " Open curly brace, close curly brace.", "tokens": [51216, 7238, 32066, 38458, 11, 1998, 32066, 38458, 13, 51362], "temperature": 0.0, "avg_logprob": -0.14041205278531774, "compression_ratio": 1.6728624535315986, "no_speech_prob": 0.00030534181860275567}, {"id": 419, "seek": 116408, "start": 1184.04, "end": 1187.24, "text": " And then inside of there, simply specify the name of the variable", "tokens": [51362, 400, 550, 1854, 295, 456, 11, 2935, 16500, 264, 1315, 295, 264, 7006, 51522], "temperature": 0.0, "avg_logprob": -0.14041205278531774, "compression_ratio": 1.6728624535315986, "no_speech_prob": 0.00030534181860275567}, {"id": 420, "seek": 116408, "start": 1187.24, "end": 1188.3999999999999, "text": " that I want to plug in.", "tokens": [51522, 300, 286, 528, 281, 5452, 294, 13, 51580], "temperature": 0.0, "avg_logprob": -0.14041205278531774, "compression_ratio": 1.6728624535315986, "no_speech_prob": 0.00030534181860275567}, {"id": 421, "seek": 116408, "start": 1188.3999999999999, "end": 1190.1599999999999, "text": " And that's not quite all the way there.", "tokens": [51580, 400, 300, 311, 406, 1596, 439, 264, 636, 456, 13, 51668], "temperature": 0.0, "avg_logprob": -0.14041205278531774, "compression_ratio": 1.6728624535315986, "no_speech_prob": 0.00030534181860275567}, {"id": 422, "seek": 116408, "start": 1190.1599999999999, "end": 1192.3999999999999, "text": " Let me go ahead and run this once more.", "tokens": [51668, 961, 385, 352, 2286, 293, 1190, 341, 1564, 544, 13, 51780], "temperature": 0.0, "avg_logprob": -0.14041205278531774, "compression_ratio": 1.6728624535315986, "no_speech_prob": 0.00030534181860275567}, {"id": 423, "seek": 119240, "start": 1192.4, "end": 1195.96, "text": " Now, if I type in Maria's name, still not quite right,", "tokens": [50364, 823, 11, 498, 286, 2010, 294, 12734, 311, 1315, 11, 920, 406, 1596, 558, 11, 50542], "temperature": 0.0, "avg_logprob": -0.13377154500860916, "compression_ratio": 1.7424749163879598, "no_speech_prob": 0.0004305499023757875}, {"id": 424, "seek": 119240, "start": 1195.96, "end": 1199.5600000000002, "text": " I need to actually tell Python that this is a special type of string.", "tokens": [50542, 286, 643, 281, 767, 980, 15329, 300, 341, 307, 257, 2121, 2010, 295, 6798, 13, 50722], "temperature": 0.0, "avg_logprob": -0.13377154500860916, "compression_ratio": 1.7424749163879598, "no_speech_prob": 0.0004305499023757875}, {"id": 425, "seek": 119240, "start": 1199.5600000000002, "end": 1203.2800000000002, "text": " It's a formatted string, similar in spirit to what print f expected.", "tokens": [50722, 467, 311, 257, 1254, 32509, 6798, 11, 2531, 294, 3797, 281, 437, 4482, 283, 5176, 13, 50908], "temperature": 0.0, "avg_logprob": -0.13377154500860916, "compression_ratio": 1.7424749163879598, "no_speech_prob": 0.0004305499023757875}, {"id": 426, "seek": 119240, "start": 1203.2800000000002, "end": 1206.44, "text": " And the way you do this, even though it's a little different from c,", "tokens": [50908, 400, 264, 636, 291, 360, 341, 11, 754, 1673, 309, 311, 257, 707, 819, 490, 269, 11, 51066], "temperature": 0.0, "avg_logprob": -0.13377154500860916, "compression_ratio": 1.7424749163879598, "no_speech_prob": 0.0004305499023757875}, {"id": 427, "seek": 119240, "start": 1206.44, "end": 1207.96, "text": " is you just say f.", "tokens": [51066, 307, 291, 445, 584, 283, 13, 51142], "temperature": 0.0, "avg_logprob": -0.13377154500860916, "compression_ratio": 1.7424749163879598, "no_speech_prob": 0.0004305499023757875}, {"id": 428, "seek": 119240, "start": 1207.96, "end": 1208.8000000000002, "text": " This is an f string.", "tokens": [51142, 639, 307, 364, 283, 6798, 13, 51184], "temperature": 0.0, "avg_logprob": -0.13377154500860916, "compression_ratio": 1.7424749163879598, "no_speech_prob": 0.0004305499023757875}, {"id": 429, "seek": 119240, "start": 1208.8000000000002, "end": 1211.72, "text": " So literally before the quotes, you write the letter f.", "tokens": [51184, 407, 3736, 949, 264, 19963, 11, 291, 2464, 264, 5063, 283, 13, 51330], "temperature": 0.0, "avg_logprob": -0.13377154500860916, "compression_ratio": 1.7424749163879598, "no_speech_prob": 0.0004305499023757875}, {"id": 430, "seek": 119240, "start": 1211.72, "end": 1214.1200000000001, "text": " And then if I now run this program here,", "tokens": [51330, 400, 550, 498, 286, 586, 1190, 341, 1461, 510, 11, 51450], "temperature": 0.0, "avg_logprob": -0.13377154500860916, "compression_ratio": 1.7424749163879598, "no_speech_prob": 0.0004305499023757875}, {"id": 431, "seek": 119240, "start": 1214.1200000000001, "end": 1218.1200000000001, "text": " I'm going to actually see Maria's name as hello Maria.", "tokens": [51450, 286, 478, 516, 281, 767, 536, 12734, 311, 1315, 382, 7751, 12734, 13, 51650], "temperature": 0.0, "avg_logprob": -0.13377154500860916, "compression_ratio": 1.7424749163879598, "no_speech_prob": 0.0004305499023757875}, {"id": 432, "seek": 119240, "start": 1218.1200000000001, "end": 1220.0400000000002, "text": " And I'll take care of that red x later.", "tokens": [51650, 400, 286, 603, 747, 1127, 295, 300, 2182, 2031, 1780, 13, 51746], "temperature": 0.0, "avg_logprob": -0.13377154500860916, "compression_ratio": 1.7424749163879598, "no_speech_prob": 0.0004305499023757875}, {"id": 433, "seek": 119240, "start": 1220.0400000000002, "end": 1220.88, "text": " So that's a format string.", "tokens": [51746, 407, 300, 311, 257, 7877, 6798, 13, 51788], "temperature": 0.0, "avg_logprob": -0.13377154500860916, "compression_ratio": 1.7424749163879598, "no_speech_prob": 0.0004305499023757875}, {"id": 434, "seek": 122088, "start": 1220.88, "end": 1221.8000000000002, "text": " And there's one other way.", "tokens": [50364, 400, 456, 311, 472, 661, 636, 13, 50410], "temperature": 0.0, "avg_logprob": -0.12955482969892787, "compression_ratio": 1.6756756756756757, "no_speech_prob": 0.0006878250860609114}, {"id": 435, "seek": 122088, "start": 1221.8000000000002, "end": 1226.0400000000002, "text": " And this is not very obvious, I would say.", "tokens": [50410, 400, 341, 307, 406, 588, 6322, 11, 286, 576, 584, 13, 50622], "temperature": 0.0, "avg_logprob": -0.12955482969892787, "compression_ratio": 1.6756756756756757, "no_speech_prob": 0.0006878250860609114}, {"id": 436, "seek": 122088, "start": 1226.0400000000002, "end": 1229.3200000000002, "text": " You might also see an online documentation, something like this.", "tokens": [50622, 509, 1062, 611, 536, 364, 2950, 14333, 11, 746, 411, 341, 13, 50786], "temperature": 0.0, "avg_logprob": -0.12955482969892787, "compression_ratio": 1.6756756756756757, "no_speech_prob": 0.0006878250860609114}, {"id": 437, "seek": 122088, "start": 1229.3200000000002, "end": 1231.64, "text": " And let's just tease this apart for just a second.", "tokens": [50786, 400, 718, 311, 445, 30444, 341, 4936, 337, 445, 257, 1150, 13, 50902], "temperature": 0.0, "avg_logprob": -0.12955482969892787, "compression_ratio": 1.6756756756756757, "no_speech_prob": 0.0006878250860609114}, {"id": 438, "seek": 122088, "start": 1231.64, "end": 1235.0800000000002, "text": " It turns out in Python that what I've highlighted in green here", "tokens": [50902, 467, 4523, 484, 294, 15329, 300, 437, 286, 600, 17173, 294, 3092, 510, 51074], "temperature": 0.0, "avg_logprob": -0.12955482969892787, "compression_ratio": 1.6756756756756757, "no_speech_prob": 0.0006878250860609114}, {"id": 439, "seek": 122088, "start": 1235.0800000000002, "end": 1237.5600000000002, "text": " is known as a string, otherwise known as a stir.", "tokens": [51074, 307, 2570, 382, 257, 6798, 11, 5911, 2570, 382, 257, 8946, 13, 51198], "temperature": 0.0, "avg_logprob": -0.12955482969892787, "compression_ratio": 1.6756756756756757, "no_speech_prob": 0.0006878250860609114}, {"id": 440, "seek": 122088, "start": 1237.5600000000002, "end": 1240.0400000000002, "text": " S-T-R is the name of this data type.", "tokens": [51198, 318, 12, 51, 12, 49, 307, 264, 1315, 295, 341, 1412, 2010, 13, 51322], "temperature": 0.0, "avg_logprob": -0.12955482969892787, "compression_ratio": 1.6756756756756757, "no_speech_prob": 0.0006878250860609114}, {"id": 441, "seek": 122088, "start": 1240.0400000000002, "end": 1243.72, "text": " Well, unlike in C, where string was kind of a white lie,", "tokens": [51322, 1042, 11, 8343, 294, 383, 11, 689, 6798, 390, 733, 295, 257, 2418, 4544, 11, 51506], "temperature": 0.0, "avg_logprob": -0.12955482969892787, "compression_ratio": 1.6756756756756757, "no_speech_prob": 0.0006878250860609114}, {"id": 442, "seek": 122088, "start": 1243.72, "end": 1245.96, "text": " where it was just a pointer at the end of the day,", "tokens": [51506, 689, 309, 390, 445, 257, 23918, 412, 264, 917, 295, 264, 786, 11, 51618], "temperature": 0.0, "avg_logprob": -0.12955482969892787, "compression_ratio": 1.6756756756756757, "no_speech_prob": 0.0006878250860609114}, {"id": 443, "seek": 122088, "start": 1245.96, "end": 1249.7600000000002, "text": " a string is actually a first class object in Python,", "tokens": [51618, 257, 6798, 307, 767, 257, 700, 1508, 2657, 294, 15329, 11, 51808], "temperature": 0.0, "avg_logprob": -0.12955482969892787, "compression_ratio": 1.6756756756756757, "no_speech_prob": 0.0006878250860609114}, {"id": 444, "seek": 124976, "start": 1249.76, "end": 1252.4, "text": " which means it's not just a sequence of characters.", "tokens": [50364, 597, 1355, 309, 311, 406, 445, 257, 8310, 295, 4342, 13, 50496], "temperature": 0.0, "avg_logprob": -0.11435359457264775, "compression_ratio": 1.8266129032258065, "no_speech_prob": 0.0020506440196186304}, {"id": 445, "seek": 124976, "start": 1252.4, "end": 1256.16, "text": " It has built-in functionality, built-in features.", "tokens": [50496, 467, 575, 3094, 12, 259, 14980, 11, 3094, 12, 259, 4122, 13, 50684], "temperature": 0.0, "avg_logprob": -0.11435359457264775, "compression_ratio": 1.8266129032258065, "no_speech_prob": 0.0020506440196186304}, {"id": 446, "seek": 124976, "start": 1256.16, "end": 1260.2, "text": " So much like a struct in C had multiple things inside of it,", "tokens": [50684, 407, 709, 411, 257, 6594, 294, 383, 632, 3866, 721, 1854, 295, 309, 11, 50886], "temperature": 0.0, "avg_logprob": -0.11435359457264775, "compression_ratio": 1.8266129032258065, "no_speech_prob": 0.0020506440196186304}, {"id": 447, "seek": 124976, "start": 1260.2, "end": 1264.28, "text": " so does a string in Python have multiple things inside of it,", "tokens": [50886, 370, 775, 257, 6798, 294, 15329, 362, 3866, 721, 1854, 295, 309, 11, 51090], "temperature": 0.0, "avg_logprob": -0.11435359457264775, "compression_ratio": 1.8266129032258065, "no_speech_prob": 0.0020506440196186304}, {"id": 448, "seek": 124976, "start": 1264.28, "end": 1267.76, "text": " not just the sequence of characters, but functions", "tokens": [51090, 406, 445, 264, 8310, 295, 4342, 11, 457, 6828, 51264], "temperature": 0.0, "avg_logprob": -0.11435359457264775, "compression_ratio": 1.8266129032258065, "no_speech_prob": 0.0020506440196186304}, {"id": 449, "seek": 124976, "start": 1267.76, "end": 1269.28, "text": " that can actually do things.", "tokens": [51264, 300, 393, 767, 360, 721, 13, 51340], "temperature": 0.0, "avg_logprob": -0.11435359457264775, "compression_ratio": 1.8266129032258065, "no_speech_prob": 0.0020506440196186304}, {"id": 450, "seek": 124976, "start": 1269.28, "end": 1271.56, "text": " And it turns out you access those functions", "tokens": [51340, 400, 309, 4523, 484, 291, 2105, 729, 6828, 51454], "temperature": 0.0, "avg_logprob": -0.11435359457264775, "compression_ratio": 1.8266129032258065, "no_speech_prob": 0.0020506440196186304}, {"id": 451, "seek": 124976, "start": 1271.56, "end": 1273.76, "text": " by way of the same dot operator as in C.", "tokens": [51454, 538, 636, 295, 264, 912, 5893, 12973, 382, 294, 383, 13, 51564], "temperature": 0.0, "avg_logprob": -0.11435359457264775, "compression_ratio": 1.8266129032258065, "no_speech_prob": 0.0020506440196186304}, {"id": 452, "seek": 124976, "start": 1273.76, "end": 1276.4, "text": " And then you would only know from the documentation or examples", "tokens": [51564, 400, 550, 291, 576, 787, 458, 490, 264, 14333, 420, 5110, 51696], "temperature": 0.0, "avg_logprob": -0.11435359457264775, "compression_ratio": 1.8266129032258065, "no_speech_prob": 0.0020506440196186304}, {"id": 453, "seek": 127640, "start": 1276.4, "end": 1279.8000000000002, "text": " in class what functions are inside of the string object.", "tokens": [50364, 294, 1508, 437, 6828, 366, 1854, 295, 264, 6798, 2657, 13, 50534], "temperature": 0.0, "avg_logprob": -0.1347469300714158, "compression_ratio": 1.7112676056338028, "no_speech_prob": 0.0019876896403729916}, {"id": 454, "seek": 127640, "start": 1279.8000000000002, "end": 1282.88, "text": " But one of them is format, and that's just a function that takes an argument.", "tokens": [50534, 583, 472, 295, 552, 307, 7877, 11, 293, 300, 311, 445, 257, 2445, 300, 2516, 364, 6770, 13, 50688], "temperature": 0.0, "avg_logprob": -0.1347469300714158, "compression_ratio": 1.7112676056338028, "no_speech_prob": 0.0019876896403729916}, {"id": 455, "seek": 127640, "start": 1282.88, "end": 1286.24, "text": " What do you want to plug into the string to the left of the dot?", "tokens": [50688, 708, 360, 291, 528, 281, 5452, 666, 264, 6798, 281, 264, 1411, 295, 264, 5893, 30, 50856], "temperature": 0.0, "avg_logprob": -0.1347469300714158, "compression_ratio": 1.7112676056338028, "no_speech_prob": 0.0019876896403729916}, {"id": 456, "seek": 127640, "start": 1286.24, "end": 1292.8000000000002, "text": " And so simply by specifying, hey, Python, here's a string with a placeholder.", "tokens": [50856, 400, 370, 2935, 538, 1608, 5489, 11, 4177, 11, 15329, 11, 510, 311, 257, 6798, 365, 257, 1081, 20480, 13, 51184], "temperature": 0.0, "avg_logprob": -0.1347469300714158, "compression_ratio": 1.7112676056338028, "no_speech_prob": 0.0019876896403729916}, {"id": 457, "seek": 127640, "start": 1292.8000000000002, "end": 1295.3600000000001, "text": " Inside of this string is a built-in function,", "tokens": [51184, 15123, 295, 341, 6798, 307, 257, 3094, 12, 259, 2445, 11, 51312], "temperature": 0.0, "avg_logprob": -0.1347469300714158, "compression_ratio": 1.7112676056338028, "no_speech_prob": 0.0019876896403729916}, {"id": 458, "seek": 127640, "start": 1295.3600000000001, "end": 1298.5600000000002, "text": " otherwise known as a method, when a function is inside some object", "tokens": [51312, 5911, 2570, 382, 257, 3170, 11, 562, 257, 2445, 307, 1854, 512, 2657, 51472], "temperature": 0.0, "avg_logprob": -0.1347469300714158, "compression_ratio": 1.7112676056338028, "no_speech_prob": 0.0019876896403729916}, {"id": 459, "seek": 127640, "start": 1298.5600000000002, "end": 1301.0400000000002, "text": " or structure, pass in the value s.", "tokens": [51472, 420, 3877, 11, 1320, 294, 264, 2158, 262, 13, 51596], "temperature": 0.0, "avg_logprob": -0.1347469300714158, "compression_ratio": 1.7112676056338028, "no_speech_prob": 0.0019876896403729916}, {"id": 460, "seek": 127640, "start": 1301.0400000000002, "end": 1305.6000000000001, "text": " So if I now go ahead and rerun this after saving my changes,", "tokens": [51596, 407, 498, 286, 586, 352, 2286, 293, 43819, 409, 341, 934, 6816, 452, 2962, 11, 51824], "temperature": 0.0, "avg_logprob": -0.1347469300714158, "compression_ratio": 1.7112676056338028, "no_speech_prob": 0.0019876896403729916}, {"id": 461, "seek": 130560, "start": 1305.6, "end": 1309.48, "text": " I should now see that Maria's name is still plugged in.", "tokens": [50364, 286, 820, 586, 536, 300, 12734, 311, 1315, 307, 920, 25679, 294, 13, 50558], "temperature": 0.0, "avg_logprob": -0.13228801831807177, "compression_ratio": 1.739864864864865, "no_speech_prob": 0.0018101092427968979}, {"id": 462, "seek": 130560, "start": 1309.48, "end": 1312.48, "text": " So that's it, but a simple idea that now even strings", "tokens": [50558, 407, 300, 311, 309, 11, 457, 257, 2199, 1558, 300, 586, 754, 13985, 50708], "temperature": 0.0, "avg_logprob": -0.13228801831807177, "compression_ratio": 1.739864864864865, "no_speech_prob": 0.0018101092427968979}, {"id": 463, "seek": 130560, "start": 1312.48, "end": 1315.1999999999998, "text": " have things inside of them, besides the characters alone,", "tokens": [50708, 362, 721, 1854, 295, 552, 11, 11868, 264, 4342, 3312, 11, 50844], "temperature": 0.0, "avg_logprob": -0.13228801831807177, "compression_ratio": 1.739864864864865, "no_speech_prob": 0.0018101092427968979}, {"id": 464, "seek": 130560, "start": 1315.1999999999998, "end": 1317.28, "text": " and you can access that via the dots.", "tokens": [50844, 293, 291, 393, 2105, 300, 5766, 264, 15026, 13, 50948], "temperature": 0.0, "avg_logprob": -0.13228801831807177, "compression_ratio": 1.739864864864865, "no_speech_prob": 0.0018101092427968979}, {"id": 465, "seek": 130560, "start": 1317.28, "end": 1321.04, "text": " So let's go ahead now and ramp things up to a more familiar example", "tokens": [50948, 407, 718, 311, 352, 2286, 586, 293, 12428, 721, 493, 281, 257, 544, 4963, 1365, 51136], "temperature": 0.0, "avg_logprob": -0.13228801831807177, "compression_ratio": 1.739864864864865, "no_speech_prob": 0.0018101092427968979}, {"id": 466, "seek": 130560, "start": 1321.04, "end": 1321.9199999999998, "text": " from a while back.", "tokens": [51136, 490, 257, 1339, 646, 13, 51180], "temperature": 0.0, "avg_logprob": -0.13228801831807177, "compression_ratio": 1.739864864864865, "no_speech_prob": 0.0018101092427968979}, {"id": 467, "seek": 130560, "start": 1321.9199999999998, "end": 1325.12, "text": " Let me go ahead and open up two side-by-side windows", "tokens": [51180, 961, 385, 352, 2286, 293, 1269, 493, 732, 1252, 12, 2322, 12, 1812, 9309, 51340], "temperature": 0.0, "avg_logprob": -0.13228801831807177, "compression_ratio": 1.739864864864865, "no_speech_prob": 0.0018101092427968979}, {"id": 468, "seek": 130560, "start": 1325.12, "end": 1327.28, "text": " and see if we can't translate one to the other.", "tokens": [51340, 293, 536, 498, 321, 393, 380, 13799, 472, 281, 264, 661, 13, 51448], "temperature": 0.0, "avg_logprob": -0.13228801831807177, "compression_ratio": 1.739864864864865, "no_speech_prob": 0.0018101092427968979}, {"id": 469, "seek": 130560, "start": 1327.28, "end": 1332.7199999999998, "text": " I'm going to go ahead and open up, for instance, int dot c from some time ago.", "tokens": [51448, 286, 478, 516, 281, 352, 2286, 293, 1269, 493, 11, 337, 5197, 11, 560, 5893, 269, 490, 512, 565, 2057, 13, 51720], "temperature": 0.0, "avg_logprob": -0.13228801831807177, "compression_ratio": 1.739864864864865, "no_speech_prob": 0.0018101092427968979}, {"id": 470, "seek": 130560, "start": 1332.7199999999998, "end": 1335.08, "text": " So you might recall from int dot c, we had", "tokens": [51720, 407, 291, 1062, 9901, 490, 560, 5893, 269, 11, 321, 632, 51838], "temperature": 0.0, "avg_logprob": -0.13228801831807177, "compression_ratio": 1.739864864864865, "no_speech_prob": 0.0018101092427968979}, {"id": 471, "seek": 133508, "start": 1335.08, "end": 1338.72, "text": " this program here whose purpose in life was to get an integer from the user", "tokens": [50364, 341, 1461, 510, 6104, 4334, 294, 993, 390, 281, 483, 364, 24922, 490, 264, 4195, 50546], "temperature": 0.0, "avg_logprob": -0.15903028760637555, "compression_ratio": 1.7024221453287198, "no_speech_prob": 0.004904837813228369}, {"id": 472, "seek": 133508, "start": 1338.72, "end": 1342.04, "text": " and actually now plug it into printf and then print it out.", "tokens": [50546, 293, 767, 586, 5452, 309, 666, 4482, 69, 293, 550, 4482, 309, 484, 13, 50712], "temperature": 0.0, "avg_logprob": -0.15903028760637555, "compression_ratio": 1.7024221453287198, "no_speech_prob": 0.004904837813228369}, {"id": 473, "seek": 133508, "start": 1342.04, "end": 1344.72, "text": " So what's going to be different now in Python?", "tokens": [50712, 407, 437, 311, 516, 281, 312, 819, 586, 294, 15329, 30, 50846], "temperature": 0.0, "avg_logprob": -0.15903028760637555, "compression_ratio": 1.7024221453287198, "no_speech_prob": 0.004904837813228369}, {"id": 474, "seek": 133508, "start": 1344.72, "end": 1348.9199999999998, "text": " Well, in Python, if I go ahead and implement this as, say, int dot pi,", "tokens": [50846, 1042, 11, 294, 15329, 11, 498, 286, 352, 2286, 293, 4445, 341, 382, 11, 584, 11, 560, 5893, 3895, 11, 51056], "temperature": 0.0, "avg_logprob": -0.15903028760637555, "compression_ratio": 1.7024221453287198, "no_speech_prob": 0.004904837813228369}, {"id": 475, "seek": 133508, "start": 1348.9199999999998, "end": 1351.12, "text": " I'm going to go ahead and do the following.", "tokens": [51056, 286, 478, 516, 281, 352, 2286, 293, 360, 264, 3480, 13, 51166], "temperature": 0.0, "avg_logprob": -0.15903028760637555, "compression_ratio": 1.7024221453287198, "no_speech_prob": 0.004904837813228369}, {"id": 476, "seek": 133508, "start": 1351.12, "end": 1353.8, "text": " Let me scroll down to kind of line things up roughly.", "tokens": [51166, 961, 385, 11369, 760, 281, 733, 295, 1622, 721, 493, 9810, 13, 51300], "temperature": 0.0, "avg_logprob": -0.15903028760637555, "compression_ratio": 1.7024221453287198, "no_speech_prob": 0.004904837813228369}, {"id": 477, "seek": 133508, "start": 1353.8, "end": 1359.48, "text": " I can go ahead and say def, oops, def main, as I saw in the slides before.", "tokens": [51300, 286, 393, 352, 2286, 293, 584, 1060, 11, 34166, 11, 1060, 2135, 11, 382, 286, 1866, 294, 264, 9788, 949, 13, 51584], "temperature": 0.0, "avg_logprob": -0.15903028760637555, "compression_ratio": 1.7024221453287198, "no_speech_prob": 0.004904837813228369}, {"id": 478, "seek": 133508, "start": 1359.48, "end": 1364.76, "text": " And then over here, I can say, I get int, quote unquote, integer.", "tokens": [51584, 400, 550, 670, 510, 11, 286, 393, 584, 11, 286, 483, 560, 11, 6513, 37557, 11, 24922, 13, 51848], "temperature": 0.0, "avg_logprob": -0.15903028760637555, "compression_ratio": 1.7024221453287198, "no_speech_prob": 0.004904837813228369}, {"id": 479, "seek": 136476, "start": 1364.76, "end": 1368.94, "text": " And then down here, I'm going to say not printf, but print, quote unquote,", "tokens": [50364, 400, 550, 760, 510, 11, 286, 478, 516, 281, 584, 406, 4482, 69, 11, 457, 4482, 11, 6513, 37557, 11, 50573], "temperature": 0.0, "avg_logprob": -0.16279923288445725, "compression_ratio": 1.6532846715328466, "no_speech_prob": 0.00031502341153100133}, {"id": 480, "seek": 136476, "start": 1368.94, "end": 1372.4, "text": " hello, and then the placeholder.", "tokens": [50573, 7751, 11, 293, 550, 264, 1081, 20480, 13, 50746], "temperature": 0.0, "avg_logprob": -0.16279923288445725, "compression_ratio": 1.6532846715328466, "no_speech_prob": 0.00031502341153100133}, {"id": 481, "seek": 136476, "start": 1372.4, "end": 1376.04, "text": " What's the simplest way to do this now, per our past example?", "tokens": [50746, 708, 311, 264, 22811, 636, 281, 360, 341, 586, 11, 680, 527, 1791, 1365, 30, 50928], "temperature": 0.0, "avg_logprob": -0.16279923288445725, "compression_ratio": 1.6532846715328466, "no_speech_prob": 0.00031502341153100133}, {"id": 482, "seek": 136476, "start": 1376.04, "end": 1378.24, "text": " Curly brace?", "tokens": [50928, 7907, 356, 38458, 30, 51038], "temperature": 0.0, "avg_logprob": -0.16279923288445725, "compression_ratio": 1.6532846715328466, "no_speech_prob": 0.00031502341153100133}, {"id": 483, "seek": 136476, "start": 1378.24, "end": 1380.56, "text": " I. And then I just need to be super clear.", "tokens": [51038, 286, 13, 400, 550, 286, 445, 643, 281, 312, 1687, 1850, 13, 51154], "temperature": 0.0, "avg_logprob": -0.16279923288445725, "compression_ratio": 1.6532846715328466, "no_speech_prob": 0.00031502341153100133}, {"id": 484, "seek": 136476, "start": 1380.56, "end": 1384.44, "text": " This is a special f string or format string into which you can plug values.", "tokens": [51154, 639, 307, 257, 2121, 283, 6798, 420, 7877, 6798, 666, 597, 291, 393, 5452, 4190, 13, 51348], "temperature": 0.0, "avg_logprob": -0.16279923288445725, "compression_ratio": 1.6532846715328466, "no_speech_prob": 0.00031502341153100133}, {"id": 485, "seek": 136476, "start": 1384.44, "end": 1386.48, "text": " And now I'm going to go ahead and save that.", "tokens": [51348, 400, 586, 286, 478, 516, 281, 352, 2286, 293, 3155, 300, 13, 51450], "temperature": 0.0, "avg_logprob": -0.16279923288445725, "compression_ratio": 1.6532846715328466, "no_speech_prob": 0.00031502341153100133}, {"id": 486, "seek": 136476, "start": 1386.48, "end": 1391.2, "text": " And I've got most of the pieces together now, ignoring for now the red x.", "tokens": [51450, 400, 286, 600, 658, 881, 295, 264, 3755, 1214, 586, 11, 26258, 337, 586, 264, 2182, 2031, 13, 51686], "temperature": 0.0, "avg_logprob": -0.16279923288445725, "compression_ratio": 1.6532846715328466, "no_speech_prob": 0.00031502341153100133}, {"id": 487, "seek": 136476, "start": 1391.2, "end": 1393.84, "text": " So what more remains to be done?", "tokens": [51686, 407, 437, 544, 7023, 281, 312, 1096, 30, 51818], "temperature": 0.0, "avg_logprob": -0.16279923288445725, "compression_ratio": 1.6532846715328466, "no_speech_prob": 0.00031502341153100133}, {"id": 488, "seek": 139384, "start": 1393.84, "end": 1397.48, "text": " I've made one same mistake as before.", "tokens": [50364, 286, 600, 1027, 472, 912, 6146, 382, 949, 13, 50546], "temperature": 0.0, "avg_logprob": -0.22128610790900463, "compression_ratio": 1.4545454545454546, "no_speech_prob": 0.0010986635461449623}, {"id": 489, "seek": 139384, "start": 1397.48, "end": 1398.72, "text": " Yeah, so the get int.", "tokens": [50546, 865, 11, 370, 264, 483, 560, 13, 50608], "temperature": 0.0, "avg_logprob": -0.22128610790900463, "compression_ratio": 1.4545454545454546, "no_speech_prob": 0.0010986635461449623}, {"id": 490, "seek": 139384, "start": 1398.72, "end": 1401.24, "text": " So up here, really, the equivalent of line 3", "tokens": [50608, 407, 493, 510, 11, 534, 11, 264, 10344, 295, 1622, 805, 50734], "temperature": 0.0, "avg_logprob": -0.22128610790900463, "compression_ratio": 1.4545454545454546, "no_speech_prob": 0.0010986635461449623}, {"id": 491, "seek": 139384, "start": 1401.24, "end": 1406.4399999999998, "text": " would be from CS50 import get int this time.", "tokens": [50734, 576, 312, 490, 9460, 2803, 974, 483, 560, 341, 565, 13, 50994], "temperature": 0.0, "avg_logprob": -0.22128610790900463, "compression_ratio": 1.4545454545454546, "no_speech_prob": 0.0010986635461449623}, {"id": 492, "seek": 139384, "start": 1406.4399999999998, "end": 1407.1599999999999, "text": " Saving that.", "tokens": [50994, 318, 6152, 300, 13, 51030], "temperature": 0.0, "avg_logprob": -0.22128610790900463, "compression_ratio": 1.4545454545454546, "no_speech_prob": 0.0010986635461449623}, {"id": 493, "seek": 139384, "start": 1407.1599999999999, "end": 1415.72, "text": " And now, if in my terminal window, I go ahead and run Python of int dot pi,", "tokens": [51030, 400, 586, 11, 498, 294, 452, 14709, 4910, 11, 286, 352, 2286, 293, 1190, 15329, 295, 560, 5893, 3895, 11, 51458], "temperature": 0.0, "avg_logprob": -0.22128610790900463, "compression_ratio": 1.4545454545454546, "no_speech_prob": 0.0010986635461449623}, {"id": 494, "seek": 139384, "start": 1415.72, "end": 1418.9599999999998, "text": " that seems strange.", "tokens": [51458, 300, 2544, 5861, 13, 51620], "temperature": 0.0, "avg_logprob": -0.22128610790900463, "compression_ratio": 1.4545454545454546, "no_speech_prob": 0.0010986635461449623}, {"id": 495, "seek": 139384, "start": 1418.9599999999998, "end": 1422.1999999999998, "text": " It's not an error in terms of, like, erroneous output.", "tokens": [51620, 467, 311, 406, 364, 6713, 294, 2115, 295, 11, 411, 11, 1189, 26446, 563, 5598, 13, 51782], "temperature": 0.0, "avg_logprob": -0.22128610790900463, "compression_ratio": 1.4545454545454546, "no_speech_prob": 0.0010986635461449623}, {"id": 496, "seek": 139384, "start": 1422.1999999999998, "end": 1423.56, "text": " Just nothing happened.", "tokens": [51782, 1449, 1825, 2011, 13, 51850], "temperature": 0.0, "avg_logprob": -0.22128610790900463, "compression_ratio": 1.4545454545454546, "no_speech_prob": 0.0010986635461449623}, {"id": 497, "seek": 142356, "start": 1423.76, "end": 1427.08, "text": " So why might this be?", "tokens": [50374, 407, 983, 1062, 341, 312, 30, 50540], "temperature": 0.0, "avg_logprob": -0.2385922184696904, "compression_ratio": 1.5567765567765568, "no_speech_prob": 0.0005527560133486986}, {"id": 498, "seek": 142356, "start": 1427.08, "end": 1430.12, "text": " How might you go about troubleshooting this, even with very little Python", "tokens": [50540, 1012, 1062, 291, 352, 466, 15379, 47011, 341, 11, 754, 365, 588, 707, 15329, 50692], "temperature": 0.0, "avg_logprob": -0.2385922184696904, "compression_ratio": 1.5567765567765568, "no_speech_prob": 0.0005527560133486986}, {"id": 499, "seek": 142356, "start": 1430.12, "end": 1432.28, "text": " under your belt?", "tokens": [50692, 833, 428, 10750, 30, 50800], "temperature": 0.0, "avg_logprob": -0.2385922184696904, "compression_ratio": 1.5567765567765568, "no_speech_prob": 0.0005527560133486986}, {"id": 500, "seek": 142356, "start": 1432.28, "end": 1432.8799999999999, "text": " Is that a hand?", "tokens": [50800, 1119, 300, 257, 1011, 30, 50830], "temperature": 0.0, "avg_logprob": -0.2385922184696904, "compression_ratio": 1.5567765567765568, "no_speech_prob": 0.0005527560133486986}, {"id": 501, "seek": 142356, "start": 1432.8799999999999, "end": 1433.84, "text": " I don't know.", "tokens": [50830, 286, 500, 380, 458, 13, 50878], "temperature": 0.0, "avg_logprob": -0.2385922184696904, "compression_ratio": 1.5567765567765568, "no_speech_prob": 0.0005527560133486986}, {"id": 502, "seek": 142356, "start": 1433.84, "end": 1434.12, "text": " No?", "tokens": [50878, 883, 30, 50892], "temperature": 0.0, "avg_logprob": -0.2385922184696904, "compression_ratio": 1.5567765567765568, "no_speech_prob": 0.0005527560133486986}, {"id": 503, "seek": 142356, "start": 1434.12, "end": 1435.28, "text": " OK.", "tokens": [50892, 2264, 13, 50950], "temperature": 0.0, "avg_logprob": -0.2385922184696904, "compression_ratio": 1.5567765567765568, "no_speech_prob": 0.0005527560133486986}, {"id": 504, "seek": 142356, "start": 1435.28, "end": 1437.44, "text": " Yeah?", "tokens": [50950, 865, 30, 51058], "temperature": 0.0, "avg_logprob": -0.2385922184696904, "compression_ratio": 1.5567765567765568, "no_speech_prob": 0.0005527560133486986}, {"id": 505, "seek": 142356, "start": 1437.44, "end": 1438.72, "text": " Is there a line break?", "tokens": [51058, 1119, 456, 257, 1622, 1821, 30, 51122], "temperature": 0.0, "avg_logprob": -0.2385922184696904, "compression_ratio": 1.5567765567765568, "no_speech_prob": 0.0005527560133486986}, {"id": 506, "seek": 142356, "start": 1438.72, "end": 1439.3999999999999, "text": " That's OK.", "tokens": [51122, 663, 311, 2264, 13, 51156], "temperature": 0.0, "avg_logprob": -0.2385922184696904, "compression_ratio": 1.5567765567765568, "no_speech_prob": 0.0005527560133486986}, {"id": 507, "seek": 142356, "start": 1439.3999999999999, "end": 1442.24, "text": " I was just doing that to kind of make everything line up, but it's no big deal.", "tokens": [51156, 286, 390, 445, 884, 300, 281, 733, 295, 652, 1203, 1622, 493, 11, 457, 309, 311, 572, 955, 2028, 13, 51298], "temperature": 0.0, "avg_logprob": -0.2385922184696904, "compression_ratio": 1.5567765567765568, "no_speech_prob": 0.0005527560133486986}, {"id": 508, "seek": 142356, "start": 1442.24, "end": 1446.24, "text": " Everything's indented properly, which is the important aesthetic.", "tokens": [51298, 5471, 311, 1016, 6003, 6108, 11, 597, 307, 264, 1021, 20092, 13, 51498], "temperature": 0.0, "avg_logprob": -0.2385922184696904, "compression_ratio": 1.5567765567765568, "no_speech_prob": 0.0005527560133486986}, {"id": 509, "seek": 142356, "start": 1446.24, "end": 1448.44, "text": " Yeah?", "tokens": [51498, 865, 30, 51608], "temperature": 0.0, "avg_logprob": -0.2385922184696904, "compression_ratio": 1.5567765567765568, "no_speech_prob": 0.0005527560133486986}, {"id": 510, "seek": 142356, "start": 1448.44, "end": 1449.56, "text": " We didn't call the function.", "tokens": [51608, 492, 994, 380, 818, 264, 2445, 13, 51664], "temperature": 0.0, "avg_logprob": -0.2385922184696904, "compression_ratio": 1.5567765567765568, "no_speech_prob": 0.0005527560133486986}, {"id": 511, "seek": 142356, "start": 1449.56, "end": 1451.72, "text": " And this is where Python's a little different from C.", "tokens": [51664, 400, 341, 307, 689, 15329, 311, 257, 707, 819, 490, 383, 13, 51772], "temperature": 0.0, "avg_logprob": -0.2385922184696904, "compression_ratio": 1.5567765567765568, "no_speech_prob": 0.0005527560133486986}, {"id": 512, "seek": 145172, "start": 1451.72, "end": 1454.48, "text": " In C, recall, main just gets called automatically for you.", "tokens": [50364, 682, 383, 11, 9901, 11, 2135, 445, 2170, 1219, 6772, 337, 291, 13, 50502], "temperature": 0.0, "avg_logprob": -0.14534081834735293, "compression_ratio": 1.7027972027972027, "no_speech_prob": 0.0028893568087369204}, {"id": 513, "seek": 145172, "start": 1454.48, "end": 1457.6000000000001, "text": " Humans years ago decided that shall be the default name of a function.", "tokens": [50502, 35809, 924, 2057, 3047, 300, 4393, 312, 264, 7576, 1315, 295, 257, 2445, 13, 50658], "temperature": 0.0, "avg_logprob": -0.14534081834735293, "compression_ratio": 1.7027972027972027, "no_speech_prob": 0.0028893568087369204}, {"id": 514, "seek": 145172, "start": 1457.6000000000001, "end": 1461.3600000000001, "text": " In Python, line 6 here, calling something main is just a convention.", "tokens": [50658, 682, 15329, 11, 1622, 1386, 510, 11, 5141, 746, 2135, 307, 445, 257, 10286, 13, 50846], "temperature": 0.0, "avg_logprob": -0.14534081834735293, "compression_ratio": 1.7027972027972027, "no_speech_prob": 0.0028893568087369204}, {"id": 515, "seek": 145172, "start": 1461.3600000000001, "end": 1464.2, "text": " I could have called it foo or bar or any other word.", "tokens": [50846, 286, 727, 362, 1219, 309, 726, 78, 420, 2159, 420, 604, 661, 1349, 13, 50988], "temperature": 0.0, "avg_logprob": -0.14534081834735293, "compression_ratio": 1.7027972027972027, "no_speech_prob": 0.0028893568087369204}, {"id": 516, "seek": 145172, "start": 1464.2, "end": 1465.72, "text": " It has no special meaning.", "tokens": [50988, 467, 575, 572, 2121, 3620, 13, 51064], "temperature": 0.0, "avg_logprob": -0.14534081834735293, "compression_ratio": 1.7027972027972027, "no_speech_prob": 0.0028893568087369204}, {"id": 517, "seek": 145172, "start": 1465.72, "end": 1468.2, "text": " And so in Python, if you want to actually call main,", "tokens": [51064, 400, 370, 294, 15329, 11, 498, 291, 528, 281, 767, 818, 2135, 11, 51188], "temperature": 0.0, "avg_logprob": -0.14534081834735293, "compression_ratio": 1.7027972027972027, "no_speech_prob": 0.0028893568087369204}, {"id": 518, "seek": 145172, "start": 1468.2, "end": 1470.3600000000001, "text": " you need to do something, frankly, that's, I think,", "tokens": [51188, 291, 643, 281, 360, 746, 11, 11939, 11, 300, 311, 11, 286, 519, 11, 51296], "temperature": 0.0, "avg_logprob": -0.14534081834735293, "compression_ratio": 1.7027972027972027, "no_speech_prob": 0.0028893568087369204}, {"id": 519, "seek": 145172, "start": 1470.3600000000001, "end": 1472.68, "text": " one of the stupider distractions early on.", "tokens": [51296, 472, 295, 264, 6631, 260, 37887, 2440, 322, 13, 51412], "temperature": 0.0, "avg_logprob": -0.14534081834735293, "compression_ratio": 1.7027972027972027, "no_speech_prob": 0.0028893568087369204}, {"id": 520, "seek": 145172, "start": 1472.68, "end": 1477.28, "text": " But you have to literally say this, if the name of this file", "tokens": [51412, 583, 291, 362, 281, 3736, 584, 341, 11, 498, 264, 1315, 295, 341, 3991, 51642], "temperature": 0.0, "avg_logprob": -0.14534081834735293, "compression_ratio": 1.7027972027972027, "no_speech_prob": 0.0028893568087369204}, {"id": 521, "seek": 147728, "start": 1477.28, "end": 1483.6, "text": " happens to equal something that's specially called main, then call main.", "tokens": [50364, 2314, 281, 2681, 746, 300, 311, 22549, 1219, 2135, 11, 550, 818, 2135, 13, 50680], "temperature": 0.0, "avg_logprob": -0.12279209723839393, "compression_ratio": 1.7567567567567568, "no_speech_prob": 0.0029808711260557175}, {"id": 522, "seek": 147728, "start": 1483.6, "end": 1487.72, "text": " So long story short, when you run the Python interpreter on a file,", "tokens": [50680, 407, 938, 1657, 2099, 11, 562, 291, 1190, 264, 15329, 34132, 322, 257, 3991, 11, 50886], "temperature": 0.0, "avg_logprob": -0.12279209723839393, "compression_ratio": 1.7567567567567568, "no_speech_prob": 0.0029808711260557175}, {"id": 523, "seek": 147728, "start": 1487.72, "end": 1492.52, "text": " as we've been doing with Python space int.py or hello.py,", "tokens": [50886, 382, 321, 600, 668, 884, 365, 15329, 1901, 560, 13, 8200, 420, 7751, 13, 8200, 11, 51126], "temperature": 0.0, "avg_logprob": -0.12279209723839393, "compression_ratio": 1.7567567567567568, "no_speech_prob": 0.0029808711260557175}, {"id": 524, "seek": 147728, "start": 1492.52, "end": 1497.28, "text": " there is a special global variable that your program has access to called", "tokens": [51126, 456, 307, 257, 2121, 4338, 7006, 300, 428, 1461, 575, 2105, 281, 1219, 51364], "temperature": 0.0, "avg_logprob": -0.12279209723839393, "compression_ratio": 1.7567567567567568, "no_speech_prob": 0.0029808711260557175}, {"id": 525, "seek": 147728, "start": 1497.28, "end": 1500.24, "text": " underscore underscore name, underscore underscore.", "tokens": [51364, 37556, 37556, 1315, 11, 37556, 37556, 13, 51512], "temperature": 0.0, "avg_logprob": -0.12279209723839393, "compression_ratio": 1.7567567567567568, "no_speech_prob": 0.0029808711260557175}, {"id": 526, "seek": 147728, "start": 1500.24, "end": 1503.3999999999999, "text": " And if that default name happens to be underscore underscore main,", "tokens": [51512, 400, 498, 300, 7576, 1315, 2314, 281, 312, 37556, 37556, 2135, 11, 51670], "temperature": 0.0, "avg_logprob": -0.12279209723839393, "compression_ratio": 1.7567567567567568, "no_speech_prob": 0.0029808711260557175}, {"id": 527, "seek": 150340, "start": 1503.4, "end": 1509.88, "text": " underscore underscore, then you know that you have the ability to call", "tokens": [50364, 37556, 37556, 11, 550, 291, 458, 300, 291, 362, 264, 3485, 281, 818, 50688], "temperature": 0.0, "avg_logprob": -0.14752430386013454, "compression_ratio": 1.6423611111111112, "no_speech_prob": 0.0088465865701437}, {"id": 528, "seek": 150340, "start": 1509.88, "end": 1511.5600000000002, "text": " any function you want by default.", "tokens": [50688, 604, 2445, 291, 528, 538, 7576, 13, 50772], "temperature": 0.0, "avg_logprob": -0.14752430386013454, "compression_ratio": 1.6423611111111112, "no_speech_prob": 0.0088465865701437}, {"id": 529, "seek": 150340, "start": 1511.5600000000002, "end": 1513.96, "text": " So for now, much like we did in week one, where", "tokens": [50772, 407, 337, 586, 11, 709, 411, 321, 630, 294, 1243, 472, 11, 689, 50892], "temperature": 0.0, "avg_logprob": -0.14752430386013454, "compression_ratio": 1.6423611111111112, "no_speech_prob": 0.0088465865701437}, {"id": 530, "seek": 150340, "start": 1513.96, "end": 1517.24, "text": " we glossed over certain details that just weren't all that interesting,", "tokens": [50892, 321, 19574, 292, 670, 1629, 4365, 300, 445, 4999, 380, 439, 300, 1880, 11, 51056], "temperature": 0.0, "avg_logprob": -0.14752430386013454, "compression_ratio": 1.6423611111111112, "no_speech_prob": 0.0088465865701437}, {"id": 531, "seek": 150340, "start": 1517.24, "end": 1520.44, "text": " lines 11 and 12 for now, let's consider not all that interesting,", "tokens": [51056, 3876, 2975, 293, 2272, 337, 586, 11, 718, 311, 1949, 406, 439, 300, 1880, 11, 51216], "temperature": 0.0, "avg_logprob": -0.14752430386013454, "compression_ratio": 1.6423611111111112, "no_speech_prob": 0.0088465865701437}, {"id": 532, "seek": 150340, "start": 1520.44, "end": 1522.92, "text": " but it's how we're going to kickstart these programs.", "tokens": [51216, 457, 309, 311, 577, 321, 434, 516, 281, 4437, 24419, 613, 4268, 13, 51340], "temperature": 0.0, "avg_logprob": -0.14752430386013454, "compression_ratio": 1.6423611111111112, "no_speech_prob": 0.0088465865701437}, {"id": 533, "seek": 150340, "start": 1522.92, "end": 1527.76, "text": " Because now, if I run Python space int.py, type in a great number,", "tokens": [51340, 1436, 586, 11, 498, 286, 1190, 15329, 1901, 560, 13, 8200, 11, 2010, 294, 257, 869, 1230, 11, 51582], "temperature": 0.0, "avg_logprob": -0.14752430386013454, "compression_ratio": 1.6423611111111112, "no_speech_prob": 0.0088465865701437}, {"id": 534, "seek": 150340, "start": 1527.76, "end": 1532.8400000000001, "text": " hello, 42, the meaning of life, the universe, and everything.", "tokens": [51582, 7751, 11, 14034, 11, 264, 3620, 295, 993, 11, 264, 6445, 11, 293, 1203, 13, 51836], "temperature": 0.0, "avg_logprob": -0.14752430386013454, "compression_ratio": 1.6423611111111112, "no_speech_prob": 0.0088465865701437}, {"id": 535, "seek": 153284, "start": 1532.8799999999999, "end": 1536.1999999999998, "text": " So let's now actually do something more powerful than just getting", "tokens": [50366, 407, 718, 311, 586, 767, 360, 746, 544, 4005, 813, 445, 1242, 50532], "temperature": 0.0, "avg_logprob": -0.13555139060912094, "compression_ratio": 1.75, "no_speech_prob": 0.002472416963428259}, {"id": 536, "seek": 153284, "start": 1536.1999999999998, "end": 1537.36, "text": " a single int from the user.", "tokens": [50532, 257, 2167, 560, 490, 264, 4195, 13, 50590], "temperature": 0.0, "avg_logprob": -0.13555139060912094, "compression_ratio": 1.75, "no_speech_prob": 0.002472416963428259}, {"id": 537, "seek": 153284, "start": 1537.36, "end": 1540.6399999999999, "text": " Let me go ahead and close off this one and close off this one", "tokens": [50590, 961, 385, 352, 2286, 293, 1998, 766, 341, 472, 293, 1998, 766, 341, 472, 50754], "temperature": 0.0, "avg_logprob": -0.13555139060912094, "compression_ratio": 1.75, "no_speech_prob": 0.002472416963428259}, {"id": 538, "seek": 153284, "start": 1540.6399999999999, "end": 1547.4399999999998, "text": " and open up, say, ints.c after splitting my window again into two windows here.", "tokens": [50754, 293, 1269, 493, 11, 584, 11, 560, 82, 13, 66, 934, 30348, 452, 4910, 797, 666, 732, 9309, 510, 13, 51094], "temperature": 0.0, "avg_logprob": -0.13555139060912094, "compression_ratio": 1.75, "no_speech_prob": 0.002472416963428259}, {"id": 539, "seek": 153284, "start": 1547.4399999999998, "end": 1548.9599999999998, "text": " And let's open ints.c.", "tokens": [51094, 400, 718, 311, 1269, 560, 82, 13, 66, 13, 51170], "temperature": 0.0, "avg_logprob": -0.13555139060912094, "compression_ratio": 1.75, "no_speech_prob": 0.002472416963428259}, {"id": 540, "seek": 153284, "start": 1548.9599999999998, "end": 1553.6799999999998, "text": " So this one was a little different in that we did some arithmetic.", "tokens": [51170, 407, 341, 472, 390, 257, 707, 819, 294, 300, 321, 630, 512, 42973, 13, 51406], "temperature": 0.0, "avg_logprob": -0.13555139060912094, "compression_ratio": 1.75, "no_speech_prob": 0.002472416963428259}, {"id": 541, "seek": 153284, "start": 1553.6799999999998, "end": 1557.1999999999998, "text": " And so here's going to be another difference in Python.", "tokens": [51406, 400, 370, 510, 311, 516, 281, 312, 1071, 2649, 294, 15329, 13, 51582], "temperature": 0.0, "avg_logprob": -0.13555139060912094, "compression_ratio": 1.75, "no_speech_prob": 0.002472416963428259}, {"id": 542, "seek": 153284, "start": 1557.1999999999998, "end": 1561.8799999999999, "text": " Here's what we did in C. And what was curious or worth noting about math", "tokens": [51582, 1692, 311, 437, 321, 630, 294, 383, 13, 400, 437, 390, 6369, 420, 3163, 26801, 466, 5221, 51816], "temperature": 0.0, "avg_logprob": -0.13555139060912094, "compression_ratio": 1.75, "no_speech_prob": 0.002472416963428259}, {"id": 543, "seek": 156188, "start": 1561.88, "end": 1563.7600000000002, "text": " in C?", "tokens": [50364, 294, 383, 30, 50458], "temperature": 0.0, "avg_logprob": -0.21082687377929688, "compression_ratio": 1.6526717557251909, "no_speech_prob": 0.0018674921011552215}, {"id": 544, "seek": 156188, "start": 1563.7600000000002, "end": 1566.96, "text": " Which of these did not quite behave as you might expect in the real world?", "tokens": [50458, 3013, 295, 613, 630, 406, 1596, 15158, 382, 291, 1062, 2066, 294, 264, 957, 1002, 30, 50618], "temperature": 0.0, "avg_logprob": -0.21082687377929688, "compression_ratio": 1.6526717557251909, "no_speech_prob": 0.0018674921011552215}, {"id": 545, "seek": 156188, "start": 1569.96, "end": 1570.88, "text": " Division?", "tokens": [50768, 17183, 30, 50814], "temperature": 0.0, "avg_logprob": -0.21082687377929688, "compression_ratio": 1.6526717557251909, "no_speech_prob": 0.0018674921011552215}, {"id": 546, "seek": 156188, "start": 1570.88, "end": 1571.2800000000002, "text": " Yeah, why?", "tokens": [50814, 865, 11, 983, 30, 50834], "temperature": 0.0, "avg_logprob": -0.21082687377929688, "compression_ratio": 1.6526717557251909, "no_speech_prob": 0.0018674921011552215}, {"id": 547, "seek": 156188, "start": 1571.2800000000002, "end": 1572.2, "text": " What did division do?", "tokens": [50834, 708, 630, 10044, 360, 30, 50880], "temperature": 0.0, "avg_logprob": -0.21082687377929688, "compression_ratio": 1.6526717557251909, "no_speech_prob": 0.0018674921011552215}, {"id": 548, "seek": 156188, "start": 1574.64, "end": 1576.5600000000002, "text": " Yeah, it chopped off or rounded down.", "tokens": [51002, 865, 11, 309, 16497, 766, 420, 23382, 760, 13, 51098], "temperature": 0.0, "avg_logprob": -0.21082687377929688, "compression_ratio": 1.6526717557251909, "no_speech_prob": 0.0018674921011552215}, {"id": 549, "seek": 156188, "start": 1576.5600000000002, "end": 1579.8000000000002, "text": " It floored the value by throwing away everything after the decimal point.", "tokens": [51098, 467, 2591, 2769, 264, 2158, 538, 10238, 1314, 1203, 934, 264, 26601, 935, 13, 51260], "temperature": 0.0, "avg_logprob": -0.21082687377929688, "compression_ratio": 1.6526717557251909, "no_speech_prob": 0.0018674921011552215}, {"id": 550, "seek": 156188, "start": 1579.8000000000002, "end": 1582.3200000000002, "text": " So this line here, 18, where it's such and such,", "tokens": [51260, 407, 341, 1622, 510, 11, 2443, 11, 689, 309, 311, 1270, 293, 1270, 11, 51386], "temperature": 0.0, "avg_logprob": -0.21082687377929688, "compression_ratio": 1.6526717557251909, "no_speech_prob": 0.0018674921011552215}, {"id": 551, "seek": 156188, "start": 1582.3200000000002, "end": 1584.5600000000002, "text": " divided by such and such, is such and such.", "tokens": [51386, 6666, 538, 1270, 293, 1270, 11, 307, 1270, 293, 1270, 13, 51498], "temperature": 0.0, "avg_logprob": -0.21082687377929688, "compression_ratio": 1.6526717557251909, "no_speech_prob": 0.0018674921011552215}, {"id": 552, "seek": 156188, "start": 1584.5600000000002, "end": 1587.0400000000002, "text": " And we literally just said x divided by y.", "tokens": [51498, 400, 321, 3736, 445, 848, 2031, 6666, 538, 288, 13, 51622], "temperature": 0.0, "avg_logprob": -0.21082687377929688, "compression_ratio": 1.6526717557251909, "no_speech_prob": 0.0018674921011552215}, {"id": 553, "seek": 156188, "start": 1587.0400000000002, "end": 1590.8000000000002, "text": " If you divided, for instance, 1 divided by 2 in grade school,", "tokens": [51622, 759, 291, 6666, 11, 337, 5197, 11, 502, 6666, 538, 568, 294, 7204, 1395, 11, 51810], "temperature": 0.0, "avg_logprob": -0.21082687377929688, "compression_ratio": 1.6526717557251909, "no_speech_prob": 0.0018674921011552215}, {"id": 554, "seek": 159080, "start": 1590.8, "end": 1593.96, "text": " hopefully you would get the value 1 half or 0.5.", "tokens": [50364, 4696, 291, 576, 483, 264, 2158, 502, 1922, 420, 1958, 13, 20, 13, 50522], "temperature": 0.0, "avg_logprob": -0.14027361436323685, "compression_ratio": 1.5776173285198556, "no_speech_prob": 0.0009110132814384997}, {"id": 555, "seek": 159080, "start": 1593.96, "end": 1596.36, "text": " But in C, what did we get instead?", "tokens": [50522, 583, 294, 383, 11, 437, 630, 321, 483, 2602, 30, 50642], "temperature": 0.0, "avg_logprob": -0.14027361436323685, "compression_ratio": 1.5776173285198556, "no_speech_prob": 0.0009110132814384997}, {"id": 556, "seek": 159080, "start": 1596.36, "end": 1596.8, "text": " Zero.", "tokens": [50642, 17182, 13, 50664], "temperature": 0.0, "avg_logprob": -0.14027361436323685, "compression_ratio": 1.5776173285198556, "no_speech_prob": 0.0009110132814384997}, {"id": 557, "seek": 159080, "start": 1596.8, "end": 1602.08, "text": " So it gets truncated to an int, the closest int without a decimal point being zero,", "tokens": [50664, 407, 309, 2170, 504, 409, 66, 770, 281, 364, 560, 11, 264, 13699, 560, 1553, 257, 26601, 935, 885, 4018, 11, 50928], "temperature": 0.0, "avg_logprob": -0.14027361436323685, "compression_ratio": 1.5776173285198556, "no_speech_prob": 0.0009110132814384997}, {"id": 558, "seek": 159080, "start": 1602.08, "end": 1604.0, "text": " because 0.5 is really 0.5.", "tokens": [50928, 570, 1958, 13, 20, 307, 534, 1958, 13, 20, 13, 51024], "temperature": 0.0, "avg_logprob": -0.14027361436323685, "compression_ratio": 1.5776173285198556, "no_speech_prob": 0.0009110132814384997}, {"id": 559, "seek": 159080, "start": 1604.0, "end": 1605.76, "text": " And thus, we had that effect.", "tokens": [51024, 400, 8807, 11, 321, 632, 300, 1802, 13, 51112], "temperature": 0.0, "avg_logprob": -0.14027361436323685, "compression_ratio": 1.5776173285198556, "no_speech_prob": 0.0009110132814384997}, {"id": 560, "seek": 159080, "start": 1605.76, "end": 1608.84, "text": " So in Python, things are going to be similar in spirit,", "tokens": [51112, 407, 294, 15329, 11, 721, 366, 516, 281, 312, 2531, 294, 3797, 11, 51266], "temperature": 0.0, "avg_logprob": -0.14027361436323685, "compression_ratio": 1.5776173285198556, "no_speech_prob": 0.0009110132814384997}, {"id": 561, "seek": 159080, "start": 1608.84, "end": 1613.8, "text": " but this is kind of a feature that was fixed or a bug that was fixed.", "tokens": [51266, 457, 341, 307, 733, 295, 257, 4111, 300, 390, 6806, 420, 257, 7426, 300, 390, 6806, 13, 51514], "temperature": 0.0, "avg_logprob": -0.14027361436323685, "compression_ratio": 1.5776173285198556, "no_speech_prob": 0.0009110132814384997}, {"id": 562, "seek": 159080, "start": 1613.8, "end": 1618.9199999999998, "text": " In Python, let me go ahead here and open up an example I wrote in advance called", "tokens": [51514, 682, 15329, 11, 718, 385, 352, 2286, 510, 293, 1269, 493, 364, 1365, 286, 4114, 294, 7295, 1219, 51770], "temperature": 0.0, "avg_logprob": -0.14027361436323685, "compression_ratio": 1.5776173285198556, "no_speech_prob": 0.0009110132814384997}, {"id": 563, "seek": 161892, "start": 1618.92, "end": 1622.72, "text": " ints.py, which is actually now going to look like this.", "tokens": [50364, 560, 82, 13, 8200, 11, 597, 307, 767, 586, 516, 281, 574, 411, 341, 13, 50554], "temperature": 0.0, "avg_logprob": -0.16717668990014303, "compression_ratio": 1.6143790849673203, "no_speech_prob": 0.004198520444333553}, {"id": 564, "seek": 161892, "start": 1622.72, "end": 1627.3600000000001, "text": " So the Python equivalent now, which I'll roughly line up,", "tokens": [50554, 407, 264, 15329, 10344, 586, 11, 597, 286, 603, 9810, 1622, 493, 11, 50786], "temperature": 0.0, "avg_logprob": -0.16717668990014303, "compression_ratio": 1.6143790849673203, "no_speech_prob": 0.004198520444333553}, {"id": 565, "seek": 161892, "start": 1627.3600000000001, "end": 1628.92, "text": " looks a little different.", "tokens": [50786, 1542, 257, 707, 819, 13, 50864], "temperature": 0.0, "avg_logprob": -0.16717668990014303, "compression_ratio": 1.6143790849673203, "no_speech_prob": 0.004198520444333553}, {"id": 566, "seek": 161892, "start": 1628.92, "end": 1631.76, "text": " And there's a few distractions, because we have all these f strings now", "tokens": [50864, 400, 456, 311, 257, 1326, 37887, 11, 570, 321, 362, 439, 613, 283, 13985, 586, 51006], "temperature": 0.0, "avg_logprob": -0.16717668990014303, "compression_ratio": 1.6143790849673203, "no_speech_prob": 0.004198520444333553}, {"id": 567, "seek": 161892, "start": 1631.76, "end": 1632.64, "text": " in the way.", "tokens": [51006, 294, 264, 636, 13, 51050], "temperature": 0.0, "avg_logprob": -0.16717668990014303, "compression_ratio": 1.6143790849673203, "no_speech_prob": 0.004198520444333553}, {"id": 568, "seek": 161892, "start": 1632.64, "end": 1635.1200000000001, "text": " But notice I'm just plugging in x's and y's.", "tokens": [51050, 583, 3449, 286, 478, 445, 42975, 294, 2031, 311, 293, 288, 311, 13, 51174], "temperature": 0.0, "avg_logprob": -0.16717668990014303, "compression_ratio": 1.6143790849673203, "no_speech_prob": 0.004198520444333553}, {"id": 569, "seek": 161892, "start": 1635.1200000000001, "end": 1639.6000000000001, "text": " But what's a new feature, apparently, in Python, arithmetically?", "tokens": [51174, 583, 437, 311, 257, 777, 4111, 11, 7970, 11, 294, 15329, 11, 594, 355, 5537, 984, 30, 51398], "temperature": 0.0, "avg_logprob": -0.16717668990014303, "compression_ratio": 1.6143790849673203, "no_speech_prob": 0.004198520444333553}, {"id": 570, "seek": 161892, "start": 1639.6000000000001, "end": 1640.88, "text": " So floor division.", "tokens": [51398, 407, 4123, 10044, 13, 51462], "temperature": 0.0, "avg_logprob": -0.16717668990014303, "compression_ratio": 1.6143790849673203, "no_speech_prob": 0.004198520444333553}, {"id": 571, "seek": 161892, "start": 1640.88, "end": 1644.52, "text": " So this was the more proper term for what C has been doing all this time.", "tokens": [51462, 407, 341, 390, 264, 544, 2296, 1433, 337, 437, 383, 575, 668, 884, 439, 341, 565, 13, 51644], "temperature": 0.0, "avg_logprob": -0.16717668990014303, "compression_ratio": 1.6143790849673203, "no_speech_prob": 0.004198520444333553}, {"id": 572, "seek": 161892, "start": 1644.52, "end": 1647.88, "text": " In C, when you use the slash, and you divide one number by another,", "tokens": [51644, 682, 383, 11, 562, 291, 764, 264, 17330, 11, 293, 291, 9845, 472, 1230, 538, 1071, 11, 51812], "temperature": 0.0, "avg_logprob": -0.16717668990014303, "compression_ratio": 1.6143790849673203, "no_speech_prob": 0.004198520444333553}, {"id": 573, "seek": 164788, "start": 1648.88, "end": 1651.8400000000001, "text": " it divides and then floors it to the nearest int.", "tokens": [50414, 309, 41347, 293, 550, 21008, 309, 281, 264, 23831, 560, 13, 50562], "temperature": 0.0, "avg_logprob": -0.16863975827656094, "compression_ratio": 1.6431095406360423, "no_speech_prob": 0.0021826031152158976}, {"id": 574, "seek": 164788, "start": 1651.8400000000001, "end": 1654.48, "text": " In Python, if you want that same old school feature,", "tokens": [50562, 682, 15329, 11, 498, 291, 528, 300, 912, 1331, 1395, 4111, 11, 50694], "temperature": 0.0, "avg_logprob": -0.16863975827656094, "compression_ratio": 1.6431095406360423, "no_speech_prob": 0.0021826031152158976}, {"id": 575, "seek": 164788, "start": 1654.48, "end": 1657.7600000000002, "text": " you're going to now use slash slash, not to be confused with the C comment.", "tokens": [50694, 291, 434, 516, 281, 586, 764, 17330, 17330, 11, 406, 281, 312, 9019, 365, 264, 383, 2871, 13, 50858], "temperature": 0.0, "avg_logprob": -0.16863975827656094, "compression_ratio": 1.6431095406360423, "no_speech_prob": 0.0021826031152158976}, {"id": 576, "seek": 164788, "start": 1657.7600000000002, "end": 1661.44, "text": " And if you want division to work the way you always knew it did in grade", "tokens": [50858, 400, 498, 291, 528, 10044, 281, 589, 264, 636, 291, 1009, 2586, 309, 630, 294, 7204, 51042], "temperature": 0.0, "avg_logprob": -0.16863975827656094, "compression_ratio": 1.6431095406360423, "no_speech_prob": 0.0021826031152158976}, {"id": 577, "seek": 164788, "start": 1661.44, "end": 1664.1200000000001, "text": " school, you continue using just the slash.", "tokens": [51042, 1395, 11, 291, 2354, 1228, 445, 264, 17330, 13, 51176], "temperature": 0.0, "avg_logprob": -0.16863975827656094, "compression_ratio": 1.6431095406360423, "no_speech_prob": 0.0021826031152158976}, {"id": 578, "seek": 164788, "start": 1664.1200000000001, "end": 1667.0400000000002, "text": " So a minor point, but one of the differences to keep in mind.", "tokens": [51176, 407, 257, 6696, 935, 11, 457, 472, 295, 264, 7300, 281, 1066, 294, 1575, 13, 51322], "temperature": 0.0, "avg_logprob": -0.16863975827656094, "compression_ratio": 1.6431095406360423, "no_speech_prob": 0.0021826031152158976}, {"id": 579, "seek": 164788, "start": 1667.0400000000002, "end": 1669.7600000000002, "text": " So if we actually run this here in Python,", "tokens": [51322, 407, 498, 321, 767, 1190, 341, 510, 294, 15329, 11, 51458], "temperature": 0.0, "avg_logprob": -0.16863975827656094, "compression_ratio": 1.6431095406360423, "no_speech_prob": 0.0021826031152158976}, {"id": 580, "seek": 164788, "start": 1669.7600000000002, "end": 1674.68, "text": " if I go into source 8 today, and our week's directory for week 1,", "tokens": [51458, 498, 286, 352, 666, 4009, 1649, 965, 11, 293, 527, 1243, 311, 21120, 337, 1243, 502, 11, 51704], "temperature": 0.0, "avg_logprob": -0.16863975827656094, "compression_ratio": 1.6431095406360423, "no_speech_prob": 0.0021826031152158976}, {"id": 581, "seek": 167468, "start": 1675.04, "end": 1680.2, "text": " and I run python ints.py, here now we're going to see 1 and 2.", "tokens": [50382, 293, 286, 1190, 38797, 560, 82, 13, 8200, 11, 510, 586, 321, 434, 516, 281, 536, 502, 293, 568, 13, 50640], "temperature": 0.0, "avg_logprob": -0.1411718463897705, "compression_ratio": 1.59375, "no_speech_prob": 0.00757655780762434}, {"id": 582, "seek": 167468, "start": 1680.2, "end": 1685.28, "text": " And there's all of the values that we would expect to see.", "tokens": [50640, 400, 456, 311, 439, 295, 264, 4190, 300, 321, 576, 2066, 281, 536, 13, 50894], "temperature": 0.0, "avg_logprob": -0.1411718463897705, "compression_ratio": 1.59375, "no_speech_prob": 0.00757655780762434}, {"id": 583, "seek": 167468, "start": 1685.28, "end": 1688.8400000000001, "text": " All right, so without dwelling too much on this,", "tokens": [50894, 1057, 558, 11, 370, 1553, 41750, 886, 709, 322, 341, 11, 51072], "temperature": 0.0, "avg_logprob": -0.1411718463897705, "compression_ratio": 1.59375, "no_speech_prob": 0.00757655780762434}, {"id": 584, "seek": 167468, "start": 1688.8400000000001, "end": 1692.48, "text": " let's fast forward to something more powerful, like conditions.", "tokens": [51072, 718, 311, 2370, 2128, 281, 746, 544, 4005, 11, 411, 4487, 13, 51254], "temperature": 0.0, "avg_logprob": -0.1411718463897705, "compression_ratio": 1.59375, "no_speech_prob": 0.00757655780762434}, {"id": 585, "seek": 167468, "start": 1692.48, "end": 1695.92, "text": " So in Python, if we want to do something only conditionally,", "tokens": [51254, 407, 294, 15329, 11, 498, 321, 528, 281, 360, 746, 787, 4188, 379, 11, 51426], "temperature": 0.0, "avg_logprob": -0.1411718463897705, "compression_ratio": 1.59375, "no_speech_prob": 0.00757655780762434}, {"id": 586, "seek": 167468, "start": 1695.92, "end": 1699.6000000000001, "text": " laying out my browser like this, let me go ahead and open up,", "tokens": [51426, 14903, 484, 452, 11185, 411, 341, 11, 718, 385, 352, 2286, 293, 1269, 493, 11, 51610], "temperature": 0.0, "avg_logprob": -0.1411718463897705, "compression_ratio": 1.59375, "no_speech_prob": 0.00757655780762434}, {"id": 587, "seek": 169960, "start": 1699.6, "end": 1707.36, "text": " let's say conditions.py, sorry, conditions.c, which once upon a time,", "tokens": [50364, 718, 311, 584, 4487, 13, 8200, 11, 2597, 11, 4487, 13, 66, 11, 597, 1564, 3564, 257, 565, 11, 50752], "temperature": 0.0, "avg_logprob": -0.17206623370830829, "compression_ratio": 1.7718631178707225, "no_speech_prob": 0.0016484296647831798}, {"id": 588, "seek": 169960, "start": 1707.36, "end": 1708.8, "text": " looked like this.", "tokens": [50752, 2956, 411, 341, 13, 50824], "temperature": 0.0, "avg_logprob": -0.17206623370830829, "compression_ratio": 1.7718631178707225, "no_speech_prob": 0.0016484296647831798}, {"id": 589, "seek": 169960, "start": 1708.8, "end": 1714.6, "text": " So in this example here, notice that we have a program that gets two ints", "tokens": [50824, 407, 294, 341, 1365, 510, 11, 3449, 300, 321, 362, 257, 1461, 300, 2170, 732, 560, 82, 51114], "temperature": 0.0, "avg_logprob": -0.17206623370830829, "compression_ratio": 1.7718631178707225, "no_speech_prob": 0.0016484296647831798}, {"id": 590, "seek": 169960, "start": 1714.6, "end": 1718.28, "text": " from the user and then just compares x and y and x and y", "tokens": [51114, 490, 264, 4195, 293, 550, 445, 38334, 2031, 293, 288, 293, 2031, 293, 288, 51298], "temperature": 0.0, "avg_logprob": -0.17206623370830829, "compression_ratio": 1.7718631178707225, "no_speech_prob": 0.0016484296647831798}, {"id": 591, "seek": 169960, "start": 1718.28, "end": 1721.84, "text": " and prints out whether they're greater than, less than, or equal to, ultimately.", "tokens": [51298, 293, 22305, 484, 1968, 436, 434, 5044, 813, 11, 1570, 813, 11, 420, 2681, 281, 11, 6284, 13, 51476], "temperature": 0.0, "avg_logprob": -0.17206623370830829, "compression_ratio": 1.7718631178707225, "no_speech_prob": 0.0016484296647831798}, {"id": 592, "seek": 169960, "start": 1721.84, "end": 1724.48, "text": " So let's actually do this one from scratch over here on the right.", "tokens": [51476, 407, 718, 311, 767, 360, 341, 472, 490, 8459, 670, 510, 322, 264, 558, 13, 51608], "temperature": 0.0, "avg_logprob": -0.17206623370830829, "compression_ratio": 1.7718631178707225, "no_speech_prob": 0.0016484296647831798}, {"id": 593, "seek": 169960, "start": 1724.48, "end": 1727.48, "text": " So let me go ahead and save this as conditions.py.", "tokens": [51608, 407, 718, 385, 352, 2286, 293, 3155, 341, 382, 4487, 13, 8200, 13, 51758], "temperature": 0.0, "avg_logprob": -0.17206623370830829, "compression_ratio": 1.7718631178707225, "no_speech_prob": 0.0016484296647831798}, {"id": 594, "seek": 169960, "start": 1727.48, "end": 1729.3999999999999, "text": " And then at the top, what's the very first thing", "tokens": [51758, 400, 550, 412, 264, 1192, 11, 437, 311, 264, 588, 700, 551, 51854], "temperature": 0.0, "avg_logprob": -0.17206623370830829, "compression_ratio": 1.7718631178707225, "no_speech_prob": 0.0016484296647831798}, {"id": 595, "seek": 172940, "start": 1729.4, "end": 1732.76, "text": " I'm going to apparently now need?", "tokens": [50364, 286, 478, 516, 281, 7970, 586, 643, 30, 50532], "temperature": 0.0, "avg_logprob": -0.19951530456542968, "compression_ratio": 1.463302752293578, "no_speech_prob": 0.0023230272345244884}, {"id": 596, "seek": 172940, "start": 1732.76, "end": 1734.0800000000002, "text": " Yeah, so the CS50 library.", "tokens": [50532, 865, 11, 370, 264, 9460, 2803, 6405, 13, 50598], "temperature": 0.0, "avg_logprob": -0.19951530456542968, "compression_ratio": 1.463302752293578, "no_speech_prob": 0.0023230272345244884}, {"id": 597, "seek": 172940, "start": 1734.0800000000002, "end": 1738.4, "text": " So from CS50 import, it looks like get int is the one we want this time.", "tokens": [50598, 407, 490, 9460, 2803, 974, 11, 309, 1542, 411, 483, 560, 307, 264, 472, 321, 528, 341, 565, 13, 50814], "temperature": 0.0, "avg_logprob": -0.19951530456542968, "compression_ratio": 1.463302752293578, "no_speech_prob": 0.0023230272345244884}, {"id": 598, "seek": 172940, "start": 1738.4, "end": 1741.72, "text": " Now, how do I go about getting an int?", "tokens": [50814, 823, 11, 577, 360, 286, 352, 466, 1242, 364, 560, 30, 50980], "temperature": 0.0, "avg_logprob": -0.19951530456542968, "compression_ratio": 1.463302752293578, "no_speech_prob": 0.0023230272345244884}, {"id": 599, "seek": 172940, "start": 1741.72, "end": 1744.68, "text": " Or what's the translation of line nine on the left", "tokens": [50980, 1610, 437, 311, 264, 12853, 295, 1622, 4949, 322, 264, 1411, 51128], "temperature": 0.0, "avg_logprob": -0.19951530456542968, "compression_ratio": 1.463302752293578, "no_speech_prob": 0.0023230272345244884}, {"id": 600, "seek": 172940, "start": 1744.68, "end": 1747.88, "text": " to the right-hand side of the screen?", "tokens": [51128, 281, 264, 558, 12, 5543, 1252, 295, 264, 2568, 30, 51288], "temperature": 0.0, "avg_logprob": -0.19951530456542968, "compression_ratio": 1.463302752293578, "no_speech_prob": 0.0023230272345244884}, {"id": 601, "seek": 172940, "start": 1747.88, "end": 1757.0, "text": " x equals get int of the same prompt.", "tokens": [51288, 2031, 6915, 483, 560, 295, 264, 912, 12391, 13, 51744], "temperature": 0.0, "avg_logprob": -0.19951530456542968, "compression_ratio": 1.463302752293578, "no_speech_prob": 0.0023230272345244884}, {"id": 602, "seek": 172940, "start": 1757.0, "end": 1758.2800000000002, "text": " OK, what comes next?", "tokens": [51744, 2264, 11, 437, 1487, 958, 30, 51808], "temperature": 0.0, "avg_logprob": -0.19951530456542968, "compression_ratio": 1.463302752293578, "no_speech_prob": 0.0023230272345244884}, {"id": 603, "seek": 175828, "start": 1758.28, "end": 1763.04, "text": " If I line it up roughly here, y gets get int of, quote unquote, y.", "tokens": [50364, 759, 286, 1622, 309, 493, 9810, 510, 11, 288, 2170, 483, 560, 295, 11, 6513, 37557, 11, 288, 13, 50602], "temperature": 0.0, "avg_logprob": -0.1601696014404297, "compression_ratio": 1.725, "no_speech_prob": 0.0011694475542753935}, {"id": 604, "seek": 175828, "start": 1763.04, "end": 1766.12, "text": " And what's down here?", "tokens": [50602, 400, 437, 311, 760, 510, 30, 50756], "temperature": 0.0, "avg_logprob": -0.1601696014404297, "compression_ratio": 1.725, "no_speech_prob": 0.0011694475542753935}, {"id": 605, "seek": 175828, "start": 1766.12, "end": 1771.48, "text": " The condition, so if x less than y, no parentheses are necessary.", "tokens": [50756, 440, 4188, 11, 370, 498, 2031, 1570, 813, 288, 11, 572, 34153, 366, 4818, 13, 51024], "temperature": 0.0, "avg_logprob": -0.1601696014404297, "compression_ratio": 1.725, "no_speech_prob": 0.0011694475542753935}, {"id": 606, "seek": 175828, "start": 1771.48, "end": 1773.52, "text": " It's not wrong to put them, but it's unnecessary.", "tokens": [51024, 467, 311, 406, 2085, 281, 829, 552, 11, 457, 309, 311, 19350, 13, 51126], "temperature": 0.0, "avg_logprob": -0.1601696014404297, "compression_ratio": 1.725, "no_speech_prob": 0.0011694475542753935}, {"id": 607, "seek": 175828, "start": 1773.52, "end": 1776.72, "text": " And now enters a word into our terminology.", "tokens": [51126, 400, 586, 18780, 257, 1349, 666, 527, 27575, 13, 51286], "temperature": 0.0, "avg_logprob": -0.1601696014404297, "compression_ratio": 1.725, "no_speech_prob": 0.0011694475542753935}, {"id": 608, "seek": 175828, "start": 1776.72, "end": 1778.6399999999999, "text": " It's not pythonic, so to speak.", "tokens": [51286, 467, 311, 406, 10664, 392, 11630, 11, 370, 281, 1710, 13, 51382], "temperature": 0.0, "avg_logprob": -0.1601696014404297, "compression_ratio": 1.725, "no_speech_prob": 0.0011694475542753935}, {"id": 609, "seek": 175828, "start": 1778.6399999999999, "end": 1780.12, "text": " If you don't need them, don't put them.", "tokens": [51382, 759, 291, 500, 380, 643, 552, 11, 500, 380, 829, 552, 13, 51456], "temperature": 0.0, "avg_logprob": -0.1601696014404297, "compression_ratio": 1.725, "no_speech_prob": 0.0011694475542753935}, {"id": 610, "seek": 175828, "start": 1780.12, "end": 1782.72, "text": " So if x is indeed less than y, what do we want to do?", "tokens": [51456, 407, 498, 2031, 307, 6451, 1570, 813, 288, 11, 437, 360, 321, 528, 281, 360, 30, 51586], "temperature": 0.0, "avg_logprob": -0.1601696014404297, "compression_ratio": 1.725, "no_speech_prob": 0.0011694475542753935}, {"id": 611, "seek": 175828, "start": 1782.72, "end": 1788.08, "text": " We want to print x is less than y, yes?", "tokens": [51586, 492, 528, 281, 4482, 2031, 307, 1570, 813, 288, 11, 2086, 30, 51854], "temperature": 0.0, "avg_logprob": -0.1601696014404297, "compression_ratio": 1.725, "no_speech_prob": 0.0011694475542753935}, {"id": 612, "seek": 178808, "start": 1789.04, "end": 1789.6399999999999, "text": " All right, good.", "tokens": [50412, 1057, 558, 11, 665, 13, 50442], "temperature": 0.0, "avg_logprob": -0.22636210476910626, "compression_ratio": 1.5560344827586208, "no_speech_prob": 0.0010004204232245684}, {"id": 613, "seek": 178808, "start": 1789.6399999999999, "end": 1794.6799999999998, "text": " So else if x, OK, good.", "tokens": [50442, 407, 1646, 498, 2031, 11, 2264, 11, 665, 13, 50694], "temperature": 0.0, "avg_logprob": -0.22636210476910626, "compression_ratio": 1.5560344827586208, "no_speech_prob": 0.0010004204232245684}, {"id": 614, "seek": 178808, "start": 1794.6799999999998, "end": 1802.9199999999998, "text": " So kind of goofily, l if, then go ahead and print out x is greater than y.", "tokens": [50694, 407, 733, 295, 30356, 953, 11, 287, 498, 11, 550, 352, 2286, 293, 4482, 484, 2031, 307, 5044, 813, 288, 13, 51106], "temperature": 0.0, "avg_logprob": -0.22636210476910626, "compression_ratio": 1.5560344827586208, "no_speech_prob": 0.0010004204232245684}, {"id": 615, "seek": 178808, "start": 1802.9199999999998, "end": 1805.08, "text": " And as an aside, I actually did that accidentally.", "tokens": [51106, 400, 382, 364, 7359, 11, 286, 767, 630, 300, 15715, 13, 51214], "temperature": 0.0, "avg_logprob": -0.22636210476910626, "compression_ratio": 1.5560344827586208, "no_speech_prob": 0.0010004204232245684}, {"id": 616, "seek": 178808, "start": 1805.08, "end": 1809.8, "text": " But it turns out in Python, too, you can use double quotes or single quotes.", "tokens": [51214, 583, 309, 4523, 484, 294, 15329, 11, 886, 11, 291, 393, 764, 3834, 19963, 420, 2167, 19963, 13, 51450], "temperature": 0.0, "avg_logprob": -0.22636210476910626, "compression_ratio": 1.5560344827586208, "no_speech_prob": 0.0010004204232245684}, {"id": 617, "seek": 178808, "start": 1809.8, "end": 1811.1999999999998, "text": " Either is fine.", "tokens": [51450, 13746, 307, 2489, 13, 51520], "temperature": 0.0, "avg_logprob": -0.22636210476910626, "compression_ratio": 1.5560344827586208, "no_speech_prob": 0.0010004204232245684}, {"id": 618, "seek": 178808, "start": 1811.1999999999998, "end": 1815.1999999999998, "text": " Whereas in C, single quotes had a very specific meaning, which went what?", "tokens": [51520, 13813, 294, 383, 11, 2167, 19963, 632, 257, 588, 2685, 3620, 11, 597, 1437, 437, 30, 51720], "temperature": 0.0, "avg_logprob": -0.22636210476910626, "compression_ratio": 1.5560344827586208, "no_speech_prob": 0.0010004204232245684}, {"id": 619, "seek": 178808, "start": 1815.1999999999998, "end": 1816.96, "text": " Char, so single characters.", "tokens": [51720, 4327, 11, 370, 2167, 4342, 13, 51808], "temperature": 0.0, "avg_logprob": -0.22636210476910626, "compression_ratio": 1.5560344827586208, "no_speech_prob": 0.0010004204232245684}, {"id": 620, "seek": 181696, "start": 1816.96, "end": 1820.88, "text": " And double quotes meant strings, sequence of characters, which meant zero", "tokens": [50364, 400, 3834, 19963, 4140, 13985, 11, 8310, 295, 4342, 11, 597, 4140, 4018, 50560], "temperature": 0.0, "avg_logprob": -0.13217906653881073, "compression_ratio": 1.6870748299319729, "no_speech_prob": 0.0012447937624529004}, {"id": 621, "seek": 181696, "start": 1820.88, "end": 1823.28, "text": " or more characters followed by backslash zero.", "tokens": [50560, 420, 544, 4342, 6263, 538, 646, 10418, 1299, 4018, 13, 50680], "temperature": 0.0, "avg_logprob": -0.13217906653881073, "compression_ratio": 1.6870748299319729, "no_speech_prob": 0.0012447937624529004}, {"id": 622, "seek": 181696, "start": 1823.28, "end": 1825.08, "text": " In Python, all of that is gone.", "tokens": [50680, 682, 15329, 11, 439, 295, 300, 307, 2780, 13, 50770], "temperature": 0.0, "avg_logprob": -0.13217906653881073, "compression_ratio": 1.6870748299319729, "no_speech_prob": 0.0012447937624529004}, {"id": 623, "seek": 181696, "start": 1825.08, "end": 1827.0, "text": " Single quotes and double quotes are equivalent.", "tokens": [50770, 31248, 19963, 293, 3834, 19963, 366, 10344, 13, 50866], "temperature": 0.0, "avg_logprob": -0.13217906653881073, "compression_ratio": 1.6870748299319729, "no_speech_prob": 0.0012447937624529004}, {"id": 624, "seek": 181696, "start": 1827.0, "end": 1829.4, "text": " I'll almost always use double quotes just for consistency,", "tokens": [50866, 286, 603, 1920, 1009, 764, 3834, 19963, 445, 337, 14416, 11, 50986], "temperature": 0.0, "avg_logprob": -0.13217906653881073, "compression_ratio": 1.6870748299319729, "no_speech_prob": 0.0012447937624529004}, {"id": 625, "seek": 181696, "start": 1829.4, "end": 1832.8, "text": " as should you for consistency within your own files.", "tokens": [50986, 382, 820, 291, 337, 14416, 1951, 428, 1065, 7098, 13, 51156], "temperature": 0.0, "avg_logprob": -0.13217906653881073, "compression_ratio": 1.6870748299319729, "no_speech_prob": 0.0012447937624529004}, {"id": 626, "seek": 181696, "start": 1832.8, "end": 1836.04, "text": " But sometimes it's useful to drop into one or the other if you nest,", "tokens": [51156, 583, 2171, 309, 311, 4420, 281, 3270, 666, 472, 420, 264, 661, 498, 291, 15646, 11, 51318], "temperature": 0.0, "avg_logprob": -0.13217906653881073, "compression_ratio": 1.6870748299319729, "no_speech_prob": 0.0012447937624529004}, {"id": 627, "seek": 181696, "start": 1836.04, "end": 1839.44, "text": " for instance, quote marks, as you might have once in a while in C.", "tokens": [51318, 337, 5197, 11, 6513, 10640, 11, 382, 291, 1062, 362, 1564, 294, 257, 1339, 294, 383, 13, 51488], "temperature": 0.0, "avg_logprob": -0.13217906653881073, "compression_ratio": 1.6870748299319729, "no_speech_prob": 0.0012447937624529004}, {"id": 628, "seek": 181696, "start": 1839.44, "end": 1845.1200000000001, "text": " OK, so finally, else print out x is equal to y.", "tokens": [51488, 2264, 11, 370, 2721, 11, 1646, 4482, 484, 2031, 307, 2681, 281, 288, 13, 51772], "temperature": 0.0, "avg_logprob": -0.13217906653881073, "compression_ratio": 1.6870748299319729, "no_speech_prob": 0.0012447937624529004}, {"id": 629, "seek": 184512, "start": 1845.12, "end": 1848.84, "text": " So it's cleaner, and frankly, I don't need all this white space.", "tokens": [50364, 407, 309, 311, 16532, 11, 293, 11939, 11, 286, 500, 380, 643, 439, 341, 2418, 1901, 13, 50550], "temperature": 0.0, "avg_logprob": -0.13409765614759203, "compression_ratio": 1.6299694189602447, "no_speech_prob": 0.0011335075832903385}, {"id": 630, "seek": 184512, "start": 1848.84, "end": 1851.3999999999999, "text": " So let's go ahead and just make this a little tighter still.", "tokens": [50550, 407, 718, 311, 352, 2286, 293, 445, 652, 341, 257, 707, 30443, 920, 13, 50678], "temperature": 0.0, "avg_logprob": -0.13409765614759203, "compression_ratio": 1.6299694189602447, "no_speech_prob": 0.0011335075832903385}, {"id": 631, "seek": 184512, "start": 1851.3999999999999, "end": 1856.32, "text": " You can see that in 11 lines, we've now done what took 27 or so last time.", "tokens": [50678, 509, 393, 536, 300, 294, 2975, 3876, 11, 321, 600, 586, 1096, 437, 1890, 7634, 420, 370, 1036, 565, 13, 50924], "temperature": 0.0, "avg_logprob": -0.13409765614759203, "compression_ratio": 1.6299694189602447, "no_speech_prob": 0.0011335075832903385}, {"id": 632, "seek": 184512, "start": 1856.32, "end": 1859.1599999999999, "text": " But I have omitted something, to be fair.", "tokens": [50924, 583, 286, 362, 3406, 3944, 746, 11, 281, 312, 3143, 13, 51066], "temperature": 0.0, "avg_logprob": -0.13409765614759203, "compression_ratio": 1.6299694189602447, "no_speech_prob": 0.0011335075832903385}, {"id": 633, "seek": 184512, "start": 1859.1599999999999, "end": 1861.2399999999998, "text": " What did I omit?", "tokens": [51066, 708, 630, 286, 3406, 270, 30, 51170], "temperature": 0.0, "avg_logprob": -0.13409765614759203, "compression_ratio": 1.6299694189602447, "no_speech_prob": 0.0011335075832903385}, {"id": 634, "seek": 184512, "start": 1861.2399999999998, "end": 1863.4399999999998, "text": " Yeah, I didn't do that whole calling a function thing.", "tokens": [51170, 865, 11, 286, 994, 380, 360, 300, 1379, 5141, 257, 2445, 551, 13, 51280], "temperature": 0.0, "avg_logprob": -0.13409765614759203, "compression_ratio": 1.6299694189602447, "no_speech_prob": 0.0011335075832903385}, {"id": 635, "seek": 184512, "start": 1863.4399999999998, "end": 1864.52, "text": " There's no mention of main.", "tokens": [51280, 821, 311, 572, 2152, 295, 2135, 13, 51334], "temperature": 0.0, "avg_logprob": -0.13409765614759203, "compression_ratio": 1.6299694189602447, "no_speech_prob": 0.0011335075832903385}, {"id": 636, "seek": 184512, "start": 1864.52, "end": 1867.76, "text": " And it actually turns out that's not strictly necessary in Python.", "tokens": [51334, 400, 309, 767, 4523, 484, 300, 311, 406, 20792, 4818, 294, 15329, 13, 51496], "temperature": 0.0, "avg_logprob": -0.13409765614759203, "compression_ratio": 1.6299694189602447, "no_speech_prob": 0.0011335075832903385}, {"id": 637, "seek": 184512, "start": 1867.76, "end": 1871.1999999999998, "text": " If you're going to be interpreting a file that contains Python code,", "tokens": [51496, 759, 291, 434, 516, 281, 312, 37395, 257, 3991, 300, 8306, 15329, 3089, 11, 51668], "temperature": 0.0, "avg_logprob": -0.13409765614759203, "compression_ratio": 1.6299694189602447, "no_speech_prob": 0.0011335075832903385}, {"id": 638, "seek": 184512, "start": 1871.1999999999998, "end": 1873.3999999999999, "text": " and it's a simple enough program that you don't really", "tokens": [51668, 293, 309, 311, 257, 2199, 1547, 1461, 300, 291, 500, 380, 534, 51778], "temperature": 0.0, "avg_logprob": -0.13409765614759203, "compression_ratio": 1.6299694189602447, "no_speech_prob": 0.0011335075832903385}, {"id": 639, "seek": 187340, "start": 1873.4, "end": 1878.44, "text": " need to factor code out and organize it into separate functions, then don't.", "tokens": [50364, 643, 281, 5952, 3089, 484, 293, 13859, 309, 666, 4994, 6828, 11, 550, 500, 380, 13, 50616], "temperature": 0.0, "avg_logprob": -0.12967555642985612, "compression_ratio": 1.6476510067114094, "no_speech_prob": 0.003172483528032899}, {"id": 640, "seek": 187340, "start": 1878.44, "end": 1881.2800000000002, "text": " If this is what would now be called a command line script,", "tokens": [50616, 759, 341, 307, 437, 576, 586, 312, 1219, 257, 5622, 1622, 5755, 11, 50758], "temperature": 0.0, "avg_logprob": -0.12967555642985612, "compression_ratio": 1.6476510067114094, "no_speech_prob": 0.003172483528032899}, {"id": 641, "seek": 187340, "start": 1881.2800000000002, "end": 1885.24, "text": " a program that just has lines of code, that you can execute literally", "tokens": [50758, 257, 1461, 300, 445, 575, 3876, 295, 3089, 11, 300, 291, 393, 14483, 3736, 50956], "temperature": 0.0, "avg_logprob": -0.12967555642985612, "compression_ratio": 1.6476510067114094, "no_speech_prob": 0.003172483528032899}, {"id": 642, "seek": 187340, "start": 1885.24, "end": 1885.92, "text": " at the prompt.", "tokens": [50956, 412, 264, 12391, 13, 50990], "temperature": 0.0, "avg_logprob": -0.12967555642985612, "compression_ratio": 1.6476510067114094, "no_speech_prob": 0.003172483528032899}, {"id": 643, "seek": 187340, "start": 1885.92, "end": 1890.3200000000002, "text": " So if I go into this directory and run Python of conditions.py enter,", "tokens": [50990, 407, 498, 286, 352, 666, 341, 21120, 293, 1190, 15329, 295, 4487, 13, 8200, 3242, 11, 51210], "temperature": 0.0, "avg_logprob": -0.12967555642985612, "compression_ratio": 1.6476510067114094, "no_speech_prob": 0.003172483528032899}, {"id": 644, "seek": 187340, "start": 1890.3200000000002, "end": 1893.5600000000002, "text": " x will be 1, y will be 2, x is indeed less than y.", "tokens": [51210, 2031, 486, 312, 502, 11, 288, 486, 312, 568, 11, 2031, 307, 6451, 1570, 813, 288, 13, 51372], "temperature": 0.0, "avg_logprob": -0.12967555642985612, "compression_ratio": 1.6476510067114094, "no_speech_prob": 0.003172483528032899}, {"id": 645, "seek": 187340, "start": 1893.5600000000002, "end": 1894.3200000000002, "text": " And that's it.", "tokens": [51372, 400, 300, 311, 309, 13, 51410], "temperature": 0.0, "avg_logprob": -0.12967555642985612, "compression_ratio": 1.6476510067114094, "no_speech_prob": 0.003172483528032899}, {"id": 646, "seek": 187340, "start": 1894.3200000000002, "end": 1900.0400000000002, "text": " I don't need to bother doing all of this as I proposed earlier, def main.", "tokens": [51410, 286, 500, 380, 643, 281, 8677, 884, 439, 295, 341, 382, 286, 10348, 3071, 11, 1060, 2135, 13, 51696], "temperature": 0.0, "avg_logprob": -0.12967555642985612, "compression_ratio": 1.6476510067114094, "no_speech_prob": 0.003172483528032899}, {"id": 647, "seek": 187340, "start": 1900.0400000000002, "end": 1902.68, "text": " And then I could go in here, and if you've never known this,", "tokens": [51696, 400, 550, 286, 727, 352, 294, 510, 11, 293, 498, 291, 600, 1128, 2570, 341, 11, 51828], "temperature": 0.0, "avg_logprob": -0.12967555642985612, "compression_ratio": 1.6476510067114094, "no_speech_prob": 0.003172483528032899}, {"id": 648, "seek": 190268, "start": 1902.68, "end": 1904.52, "text": " and now it's useful, especially for Python,", "tokens": [50364, 293, 586, 309, 311, 4420, 11, 2318, 337, 15329, 11, 50456], "temperature": 0.0, "avg_logprob": -0.13063077618998867, "compression_ratio": 1.6739811912225706, "no_speech_prob": 0.0035933072213083506}, {"id": 649, "seek": 190268, "start": 1904.52, "end": 1906.88, "text": " you can highlight lines or just tab them all at once.", "tokens": [50456, 291, 393, 5078, 3876, 420, 445, 4421, 552, 439, 412, 1564, 13, 50574], "temperature": 0.0, "avg_logprob": -0.13063077618998867, "compression_ratio": 1.6739811912225706, "no_speech_prob": 0.0035933072213083506}, {"id": 650, "seek": 190268, "start": 1906.88, "end": 1909.76, "text": " I could do this, but then I would need this thing, which I probably", "tokens": [50574, 286, 727, 360, 341, 11, 457, 550, 286, 576, 643, 341, 551, 11, 597, 286, 1391, 50718], "temperature": 0.0, "avg_logprob": -0.13063077618998867, "compression_ratio": 1.6739811912225706, "no_speech_prob": 0.0035933072213083506}, {"id": 651, "seek": 190268, "start": 1909.76, "end": 1914.0, "text": " have to go look up how to remember it if you're doing it for the first time.", "tokens": [50718, 362, 281, 352, 574, 493, 577, 281, 1604, 309, 498, 291, 434, 884, 309, 337, 264, 700, 565, 13, 50930], "temperature": 0.0, "avg_logprob": -0.13063077618998867, "compression_ratio": 1.6739811912225706, "no_speech_prob": 0.0035933072213083506}, {"id": 652, "seek": 190268, "start": 1914.0, "end": 1917.2, "text": " There's just no value in this case to doing that.", "tokens": [50930, 821, 311, 445, 572, 2158, 294, 341, 1389, 281, 884, 300, 13, 51090], "temperature": 0.0, "avg_logprob": -0.13063077618998867, "compression_ratio": 1.6739811912225706, "no_speech_prob": 0.0035933072213083506}, {"id": 653, "seek": 190268, "start": 1917.2, "end": 1920.76, "text": " But at least it can be there as needed.", "tokens": [51090, 583, 412, 1935, 309, 393, 312, 456, 382, 2978, 13, 51268], "temperature": 0.0, "avg_logprob": -0.13063077618998867, "compression_ratio": 1.6739811912225706, "no_speech_prob": 0.0035933072213083506}, {"id": 654, "seek": 190268, "start": 1920.76, "end": 1925.0800000000002, "text": " So let me go ahead and undo that, and we're back to a porting of one to the other.", "tokens": [51268, 407, 718, 385, 352, 2286, 293, 23779, 300, 11, 293, 321, 434, 646, 281, 257, 2436, 278, 295, 472, 281, 264, 661, 13, 51484], "temperature": 0.0, "avg_logprob": -0.13063077618998867, "compression_ratio": 1.6739811912225706, "no_speech_prob": 0.0035933072213083506}, {"id": 655, "seek": 190268, "start": 1925.0800000000002, "end": 1927.1200000000001, "text": " All right, so that might then be conditions.", "tokens": [51484, 1057, 558, 11, 370, 300, 1062, 550, 312, 4487, 13, 51586], "temperature": 0.0, "avg_logprob": -0.13063077618998867, "compression_ratio": 1.6739811912225706, "no_speech_prob": 0.0035933072213083506}, {"id": 656, "seek": 190268, "start": 1927.1200000000001, "end": 1930.72, "text": " And let's see if we can't no switch there.", "tokens": [51586, 400, 718, 311, 536, 498, 321, 393, 380, 572, 3679, 456, 13, 51766], "temperature": 0.0, "avg_logprob": -0.13063077618998867, "compression_ratio": 1.6739811912225706, "no_speech_prob": 0.0035933072213083506}, {"id": 657, "seek": 190268, "start": 1930.72, "end": 1932.0, "text": " Let's take a look at this one.", "tokens": [51766, 961, 311, 747, 257, 574, 412, 341, 472, 13, 51830], "temperature": 0.0, "avg_logprob": -0.13063077618998867, "compression_ratio": 1.6739811912225706, "no_speech_prob": 0.0035933072213083506}, {"id": 658, "seek": 193200, "start": 1932.0, "end": 1935.04, "text": " Let me open up, rather than comparing all of them side by side,", "tokens": [50364, 961, 385, 1269, 493, 11, 2831, 813, 15763, 439, 295, 552, 1252, 538, 1252, 11, 50516], "temperature": 0.0, "avg_logprob": -0.21857358932495116, "compression_ratio": 1.5982532751091703, "no_speech_prob": 0.0005702768685296178}, {"id": 659, "seek": 193200, "start": 1935.04, "end": 1938.88, "text": " let me just open up this one now called noSwitch.py, which", "tokens": [50516, 718, 385, 445, 1269, 493, 341, 472, 586, 1219, 572, 38373, 1549, 13, 8200, 11, 597, 50708], "temperature": 0.0, "avg_logprob": -0.21857358932495116, "compression_ratio": 1.5982532751091703, "no_speech_prob": 0.0005702768685296178}, {"id": 660, "seek": 193200, "start": 1938.88, "end": 1943.96, "text": " is reminiscent of a program we ran some time ago called noSwitch.c.", "tokens": [50708, 307, 44304, 295, 257, 1461, 321, 5872, 512, 565, 2057, 1219, 572, 38373, 1549, 13, 66, 13, 50962], "temperature": 0.0, "avg_logprob": -0.21857358932495116, "compression_ratio": 1.5982532751091703, "no_speech_prob": 0.0005702768685296178}, {"id": 661, "seek": 193200, "start": 1943.96, "end": 1948.48, "text": " And you can perhaps infer what this does from the comments alone.", "tokens": [50962, 400, 291, 393, 4317, 13596, 437, 341, 775, 490, 264, 3053, 3312, 13, 51188], "temperature": 0.0, "avg_logprob": -0.21857358932495116, "compression_ratio": 1.5982532751091703, "no_speech_prob": 0.0005702768685296178}, {"id": 662, "seek": 193200, "start": 1948.48, "end": 1951.16, "text": " What does this program do in English?", "tokens": [51188, 708, 775, 341, 1461, 360, 294, 3669, 30, 51322], "temperature": 0.0, "avg_logprob": -0.21857358932495116, "compression_ratio": 1.5982532751091703, "no_speech_prob": 0.0005702768685296178}, {"id": 663, "seek": 193200, "start": 1951.16, "end": 1953.84, "text": " Because logical operators is not all that explicit at top.", "tokens": [51322, 1436, 14978, 19077, 307, 406, 439, 300, 13691, 412, 1192, 13, 51456], "temperature": 0.0, "avg_logprob": -0.21857358932495116, "compression_ratio": 1.5982532751091703, "no_speech_prob": 0.0005702768685296178}, {"id": 664, "seek": 193200, "start": 1956.96, "end": 1957.96, "text": " What's that?", "tokens": [51612, 708, 311, 300, 30, 51662], "temperature": 0.0, "avg_logprob": -0.21857358932495116, "compression_ratio": 1.5982532751091703, "no_speech_prob": 0.0005702768685296178}, {"id": 665, "seek": 195796, "start": 1958.92, "end": 1964.76, "text": " Yeah, so if you've ever interacted with a program that asks you for a prompt,", "tokens": [50412, 865, 11, 370, 498, 291, 600, 1562, 49621, 365, 257, 1461, 300, 8962, 291, 337, 257, 12391, 11, 50704], "temperature": 0.0, "avg_logprob": -0.1633992357318904, "compression_ratio": 1.747634069400631, "no_speech_prob": 0.0003353371284902096}, {"id": 666, "seek": 195796, "start": 1964.76, "end": 1967.52, "text": " yes or no, here's some code with which you might implement it.", "tokens": [50704, 2086, 420, 572, 11, 510, 311, 512, 3089, 365, 597, 291, 1062, 4445, 309, 13, 50842], "temperature": 0.0, "avg_logprob": -0.1633992357318904, "compression_ratio": 1.747634069400631, "no_speech_prob": 0.0003353371284902096}, {"id": 667, "seek": 195796, "start": 1967.52, "end": 1970.52, "text": " And we could do this in C. We're just comparing characters here.", "tokens": [50842, 400, 321, 727, 360, 341, 294, 383, 13, 492, 434, 445, 15763, 4342, 510, 13, 50992], "temperature": 0.0, "avg_logprob": -0.1633992357318904, "compression_ratio": 1.747634069400631, "no_speech_prob": 0.0003353371284902096}, {"id": 668, "seek": 195796, "start": 1970.52, "end": 1971.68, "text": " But there's a few differences.", "tokens": [50992, 583, 456, 311, 257, 1326, 7300, 13, 51050], "temperature": 0.0, "avg_logprob": -0.1633992357318904, "compression_ratio": 1.747634069400631, "no_speech_prob": 0.0003353371284902096}, {"id": 669, "seek": 195796, "start": 1971.68, "end": 1974.64, "text": " If you kind of now think back to how you might implement this in C,", "tokens": [51050, 759, 291, 733, 295, 586, 519, 646, 281, 577, 291, 1062, 4445, 341, 294, 383, 11, 51198], "temperature": 0.0, "avg_logprob": -0.1633992357318904, "compression_ratio": 1.747634069400631, "no_speech_prob": 0.0003353371284902096}, {"id": 670, "seek": 195796, "start": 1974.64, "end": 1976.68, "text": " even if you don't recall the specific program.", "tokens": [51198, 754, 498, 291, 500, 380, 9901, 264, 2685, 1461, 13, 51300], "temperature": 0.0, "avg_logprob": -0.1633992357318904, "compression_ratio": 1.747634069400631, "no_speech_prob": 0.0003353371284902096}, {"id": 671, "seek": 195796, "start": 1976.68, "end": 1979.44, "text": " I'm importing my library right up here.", "tokens": [51300, 286, 478, 43866, 452, 6405, 558, 493, 510, 13, 51438], "temperature": 0.0, "avg_logprob": -0.1633992357318904, "compression_ratio": 1.747634069400631, "no_speech_prob": 0.0003353371284902096}, {"id": 672, "seek": 195796, "start": 1979.44, "end": 1984.1200000000001, "text": " I'm then calling getchar this time, which is also in CS50's library for Python.", "tokens": [51438, 286, 478, 550, 5141, 483, 7374, 341, 565, 11, 597, 307, 611, 294, 9460, 2803, 311, 6405, 337, 15329, 13, 51672], "temperature": 0.0, "avg_logprob": -0.1633992357318904, "compression_ratio": 1.747634069400631, "no_speech_prob": 0.0003353371284902096}, {"id": 673, "seek": 195796, "start": 1984.1200000000001, "end": 1987.8, "text": " And then notice there's just a couple of things different down here syntactically.", "tokens": [51672, 400, 550, 3449, 456, 311, 445, 257, 1916, 295, 721, 819, 760, 510, 23980, 578, 984, 13, 51856], "temperature": 0.0, "avg_logprob": -0.1633992357318904, "compression_ratio": 1.747634069400631, "no_speech_prob": 0.0003353371284902096}, {"id": 674, "seek": 198780, "start": 1987.8, "end": 1991.56, "text": " Besides the colons and the indentation and such, what else is noteworthy?", "tokens": [50364, 13212, 264, 1173, 892, 293, 264, 44494, 399, 293, 1270, 11, 437, 1646, 307, 406, 1023, 2652, 88, 30, 50552], "temperature": 0.0, "avg_logprob": -0.18286430208306564, "compression_ratio": 1.778501628664495, "no_speech_prob": 6.013990787323564e-05}, {"id": 675, "seek": 198780, "start": 1991.56, "end": 1992.06, "text": " Yeah.", "tokens": [50552, 865, 13, 50577], "temperature": 0.0, "avg_logprob": -0.18286430208306564, "compression_ratio": 1.778501628664495, "no_speech_prob": 6.013990787323564e-05}, {"id": 676, "seek": 198780, "start": 1992.06, "end": 1994.1599999999999, "text": " You can use more instead of more.", "tokens": [50577, 509, 393, 764, 544, 2602, 295, 544, 13, 50682], "temperature": 0.0, "avg_logprob": -0.18286430208306564, "compression_ratio": 1.778501628664495, "no_speech_prob": 6.013990787323564e-05}, {"id": 677, "seek": 198780, "start": 1994.1599999999999, "end": 1995.32, "text": " Yeah, thank god.", "tokens": [50682, 865, 11, 1309, 3044, 13, 50740], "temperature": 0.0, "avg_logprob": -0.18286430208306564, "compression_ratio": 1.778501628664495, "no_speech_prob": 6.013990787323564e-05}, {"id": 678, "seek": 198780, "start": 1995.32, "end": 1997.24, "text": " You can just say more what you mean now.", "tokens": [50740, 509, 393, 445, 584, 544, 437, 291, 914, 586, 13, 50836], "temperature": 0.0, "avg_logprob": -0.18286430208306564, "compression_ratio": 1.778501628664495, "no_speech_prob": 6.013990787323564e-05}, {"id": 679, "seek": 198780, "start": 1997.24, "end": 2000.6399999999999, "text": " If you want to do something or something, you literally say or.", "tokens": [50836, 759, 291, 528, 281, 360, 746, 420, 746, 11, 291, 3736, 584, 420, 13, 51006], "temperature": 0.0, "avg_logprob": -0.18286430208306564, "compression_ratio": 1.778501628664495, "no_speech_prob": 6.013990787323564e-05}, {"id": 680, "seek": 198780, "start": 2000.6399999999999, "end": 2003.84, "text": " And if we were instead, albeit nonsensically here,", "tokens": [51006, 400, 498, 321, 645, 2602, 11, 43654, 297, 892, 694, 984, 510, 11, 51166], "temperature": 0.0, "avg_logprob": -0.18286430208306564, "compression_ratio": 1.778501628664495, "no_speech_prob": 6.013990787323564e-05}, {"id": 681, "seek": 198780, "start": 2003.84, "end": 2008.2, "text": " trying to do the conjunction of two things, this and that, you could literally say and.", "tokens": [51166, 1382, 281, 360, 264, 27482, 295, 732, 721, 11, 341, 293, 300, 11, 291, 727, 3736, 584, 293, 13, 51384], "temperature": 0.0, "avg_logprob": -0.18286430208306564, "compression_ratio": 1.778501628664495, "no_speech_prob": 6.013990787323564e-05}, {"id": 682, "seek": 198780, "start": 2008.2, "end": 2010.76, "text": " So instead of the two vertical bars or the two ampersands,", "tokens": [51384, 407, 2602, 295, 264, 732, 9429, 10228, 420, 264, 732, 18648, 433, 2967, 11, 51512], "temperature": 0.0, "avg_logprob": -0.18286430208306564, "compression_ratio": 1.778501628664495, "no_speech_prob": 6.013990787323564e-05}, {"id": 683, "seek": 198780, "start": 2010.76, "end": 2013.36, "text": " here's another slight difference in Python.", "tokens": [51512, 510, 311, 1071, 4036, 2649, 294, 15329, 13, 51642], "temperature": 0.0, "avg_logprob": -0.18286430208306564, "compression_ratio": 1.778501628664495, "no_speech_prob": 6.013990787323564e-05}, {"id": 684, "seek": 198780, "start": 2013.36, "end": 2017.1599999999999, "text": " Let's now take a look at another example, reminiscent of one's past.", "tokens": [51642, 961, 311, 586, 747, 257, 574, 412, 1071, 1365, 11, 44304, 295, 472, 311, 1791, 13, 51832], "temperature": 0.0, "avg_logprob": -0.18286430208306564, "compression_ratio": 1.778501628664495, "no_speech_prob": 6.013990787323564e-05}, {"id": 685, "seek": 201716, "start": 2017.2, "end": 2019.92, "text": " This one called return.py.", "tokens": [50366, 639, 472, 1219, 2736, 13, 8200, 13, 50502], "temperature": 0.0, "avg_logprob": -0.15210169837588355, "compression_ratio": 1.6989966555183946, "no_speech_prob": 0.000335343909682706}, {"id": 686, "seek": 201716, "start": 2019.92, "end": 2024.64, "text": " So here is an example where it's actually more compelling to have a main function,", "tokens": [50502, 407, 510, 307, 364, 1365, 689, 309, 311, 767, 544, 20050, 281, 362, 257, 2135, 2445, 11, 50738], "temperature": 0.0, "avg_logprob": -0.15210169837588355, "compression_ratio": 1.6989966555183946, "no_speech_prob": 0.000335343909682706}, {"id": 687, "seek": 201716, "start": 2024.64, "end": 2027.88, "text": " because now I'm going to start organizing my code into different functions still.", "tokens": [50738, 570, 586, 286, 478, 516, 281, 722, 17608, 452, 3089, 666, 819, 6828, 920, 13, 50900], "temperature": 0.0, "avg_logprob": -0.15210169837588355, "compression_ratio": 1.6989966555183946, "no_speech_prob": 0.000335343909682706}, {"id": 688, "seek": 201716, "start": 2027.88, "end": 2032.8400000000001, "text": " So up here, we are importing the getint function from CS50 library.", "tokens": [50900, 407, 493, 510, 11, 321, 366, 43866, 264, 483, 686, 2445, 490, 9460, 2803, 6405, 13, 51148], "temperature": 0.0, "avg_logprob": -0.15210169837588355, "compression_ratio": 1.6989966555183946, "no_speech_prob": 0.000335343909682706}, {"id": 689, "seek": 201716, "start": 2032.8400000000001, "end": 2038.3600000000001, "text": " Here I have my main function just saying x gets getint and then print out the square of x.", "tokens": [51148, 1692, 286, 362, 452, 2135, 2445, 445, 1566, 2031, 2170, 483, 686, 293, 550, 4482, 484, 264, 3732, 295, 2031, 13, 51424], "temperature": 0.0, "avg_logprob": -0.15210169837588355, "compression_ratio": 1.6989966555183946, "no_speech_prob": 0.000335343909682706}, {"id": 690, "seek": 201716, "start": 2038.3600000000001, "end": 2042.28, "text": " So how do you go about defining your own custom function in Python that's not just main?", "tokens": [51424, 407, 577, 360, 291, 352, 466, 17827, 428, 1065, 2375, 2445, 294, 15329, 300, 311, 406, 445, 2135, 30, 51620], "temperature": 0.0, "avg_logprob": -0.15210169837588355, "compression_ratio": 1.6989966555183946, "no_speech_prob": 0.000335343909682706}, {"id": 691, "seek": 201716, "start": 2042.28, "end": 2047.0800000000002, "text": " Well, here on line 11 is how I would define a function called square", "tokens": [51620, 1042, 11, 510, 322, 1622, 2975, 307, 577, 286, 576, 6964, 257, 2445, 1219, 3732, 51860], "temperature": 0.0, "avg_logprob": -0.15210169837588355, "compression_ratio": 1.6989966555183946, "no_speech_prob": 0.000335343909682706}, {"id": 692, "seek": 204708, "start": 2047.08, "end": 2050.84, "text": " that takes apparently an argument called n, though I could call this anything I want,", "tokens": [50364, 300, 2516, 7970, 364, 6770, 1219, 297, 11, 1673, 286, 727, 818, 341, 1340, 286, 528, 11, 50552], "temperature": 0.0, "avg_logprob": -0.17071817902957692, "compression_ratio": 1.6583629893238434, "no_speech_prob": 0.0004044673405587673}, {"id": 693, "seek": 204708, "start": 2050.84, "end": 2055.0, "text": " colon return n star star 2.", "tokens": [50552, 8255, 2736, 297, 3543, 3543, 568, 13, 50760], "temperature": 0.0, "avg_logprob": -0.17071817902957692, "compression_ratio": 1.6583629893238434, "no_speech_prob": 0.0004044673405587673}, {"id": 694, "seek": 204708, "start": 2055.0, "end": 2057.84, "text": " So a few new features here, but again, it's no big deal.", "tokens": [50760, 407, 257, 1326, 777, 4122, 510, 11, 457, 797, 11, 309, 311, 572, 955, 2028, 13, 50902], "temperature": 0.0, "avg_logprob": -0.17071817902957692, "compression_ratio": 1.6583629893238434, "no_speech_prob": 0.0004044673405587673}, {"id": 695, "seek": 204708, "start": 2057.84, "end": 2061.48, "text": " Once you just kind of look these features up in a manual or in a class,", "tokens": [50902, 3443, 291, 445, 733, 295, 574, 613, 4122, 493, 294, 257, 9688, 420, 294, 257, 1508, 11, 51084], "temperature": 0.0, "avg_logprob": -0.17071817902957692, "compression_ratio": 1.6583629893238434, "no_speech_prob": 0.0004044673405587673}, {"id": 696, "seek": 204708, "start": 2061.48, "end": 2063.44, "text": " what is star star probably doing?", "tokens": [51084, 437, 307, 3543, 3543, 1391, 884, 30, 51182], "temperature": 0.0, "avg_logprob": -0.17071817902957692, "compression_ratio": 1.6583629893238434, "no_speech_prob": 0.0004044673405587673}, {"id": 697, "seek": 204708, "start": 2063.44, "end": 2067.44, "text": " Not square root, the power of, yeah.", "tokens": [51182, 1726, 3732, 5593, 11, 264, 1347, 295, 11, 1338, 13, 51382], "temperature": 0.0, "avg_logprob": -0.17071817902957692, "compression_ratio": 1.6583629893238434, "no_speech_prob": 0.0004044673405587673}, {"id": 698, "seek": 204708, "start": 2067.44, "end": 2070.36, "text": " So n star star 2 is just n raised to the power of 2.", "tokens": [51382, 407, 297, 3543, 3543, 568, 307, 445, 297, 6005, 281, 264, 1347, 295, 568, 13, 51528], "temperature": 0.0, "avg_logprob": -0.17071817902957692, "compression_ratio": 1.6583629893238434, "no_speech_prob": 0.0004044673405587673}, {"id": 699, "seek": 204708, "start": 2070.36, "end": 2074.44, "text": " That was not a feature we had in C. So now we get this in Python.", "tokens": [51528, 663, 390, 406, 257, 4111, 321, 632, 294, 383, 13, 407, 586, 321, 483, 341, 294, 15329, 13, 51732], "temperature": 0.0, "avg_logprob": -0.17071817902957692, "compression_ratio": 1.6583629893238434, "no_speech_prob": 0.0004044673405587673}, {"id": 700, "seek": 204708, "start": 2074.44, "end": 2077.0, "text": " And what's this line 12 in green?", "tokens": [51732, 400, 437, 311, 341, 1622, 2272, 294, 3092, 30, 51860], "temperature": 0.0, "avg_logprob": -0.17071817902957692, "compression_ratio": 1.6583629893238434, "no_speech_prob": 0.0004044673405587673}, {"id": 701, "seek": 207700, "start": 2077.04, "end": 2080.52, "text": " With the weird use of double quotes.", "tokens": [50366, 2022, 264, 3657, 764, 295, 3834, 19963, 13, 50540], "temperature": 0.0, "avg_logprob": -0.14826828112705148, "compression_ratio": 1.6633333333333333, "no_speech_prob": 0.0003459778381511569}, {"id": 702, "seek": 207700, "start": 2080.52, "end": 2083.44, "text": " It's a comment, and it's a different type of comment than we've seen before.", "tokens": [50540, 467, 311, 257, 2871, 11, 293, 309, 311, 257, 819, 2010, 295, 2871, 813, 321, 600, 1612, 949, 13, 50686], "temperature": 0.0, "avg_logprob": -0.14826828112705148, "compression_ratio": 1.6633333333333333, "no_speech_prob": 0.0003459778381511569}, {"id": 703, "seek": 207700, "start": 2083.44, "end": 2086.44, "text": " Because in my previous example, I did have a few comments.", "tokens": [50686, 1436, 294, 452, 3894, 1365, 11, 286, 630, 362, 257, 1326, 3053, 13, 50836], "temperature": 0.0, "avg_logprob": -0.14826828112705148, "compression_ratio": 1.6633333333333333, "no_speech_prob": 0.0003459778381511569}, {"id": 704, "seek": 207700, "start": 2086.44, "end": 2089.68, "text": " Recall that just a moment ago in conditions.py,", "tokens": [50836, 9647, 336, 300, 445, 257, 1623, 2057, 294, 4487, 13, 8200, 11, 50998], "temperature": 0.0, "avg_logprob": -0.14826828112705148, "compression_ratio": 1.6633333333333333, "no_speech_prob": 0.0003459778381511569}, {"id": 705, "seek": 207700, "start": 2089.68, "end": 2092.2, "text": " we had a whole bunch of comments.", "tokens": [50998, 321, 632, 257, 1379, 3840, 295, 3053, 13, 51124], "temperature": 0.0, "avg_logprob": -0.14826828112705148, "compression_ratio": 1.6633333333333333, "no_speech_prob": 0.0003459778381511569}, {"id": 706, "seek": 207700, "start": 2092.2, "end": 2095.44, "text": " Prompt the user for x, prompt the user for y, compare x and y.", "tokens": [51124, 15833, 662, 264, 4195, 337, 2031, 11, 12391, 264, 4195, 337, 288, 11, 6794, 2031, 293, 288, 13, 51286], "temperature": 0.0, "avg_logprob": -0.14826828112705148, "compression_ratio": 1.6633333333333333, "no_speech_prob": 0.0003459778381511569}, {"id": 707, "seek": 207700, "start": 2095.44, "end": 2097.72, "text": " So whereas in C, we were using slash slash,", "tokens": [51286, 407, 9735, 294, 383, 11, 321, 645, 1228, 17330, 17330, 11, 51400], "temperature": 0.0, "avg_logprob": -0.14826828112705148, "compression_ratio": 1.6633333333333333, "no_speech_prob": 0.0003459778381511569}, {"id": 708, "seek": 207700, "start": 2097.72, "end": 2101.08, "text": " Python unfortunately uses that for floor division, so to speak.", "tokens": [51400, 15329, 7015, 4960, 300, 337, 4123, 10044, 11, 370, 281, 1710, 13, 51568], "temperature": 0.0, "avg_logprob": -0.14826828112705148, "compression_ratio": 1.6633333333333333, "no_speech_prob": 0.0003459778381511569}, {"id": 709, "seek": 207700, "start": 2101.08, "end": 2106.24, "text": " So we instead just use the hashtag or the pound sign to enumerate a line,", "tokens": [51568, 407, 321, 2602, 445, 764, 264, 20379, 420, 264, 12013, 1465, 281, 465, 15583, 473, 257, 1622, 11, 51826], "temperature": 0.0, "avg_logprob": -0.14826828112705148, "compression_ratio": 1.6633333333333333, "no_speech_prob": 0.0003459778381511569}, {"id": 710, "seek": 210624, "start": 2106.24, "end": 2109.3199999999997, "text": " to specify a line that should be thought of as a comment.", "tokens": [50364, 281, 16500, 257, 1622, 300, 820, 312, 1194, 295, 382, 257, 2871, 13, 50518], "temperature": 0.0, "avg_logprob": -0.13692823556753306, "compression_ratio": 1.7306397306397305, "no_speech_prob": 0.0008295286097563803}, {"id": 711, "seek": 210624, "start": 2109.3199999999997, "end": 2111.04, "text": " But here is something a little different.", "tokens": [50518, 583, 510, 307, 746, 257, 707, 819, 13, 50604], "temperature": 0.0, "avg_logprob": -0.13692823556753306, "compression_ratio": 1.7306397306397305, "no_speech_prob": 0.0008295286097563803}, {"id": 712, "seek": 210624, "start": 2111.04, "end": 2112.7599999999998, "text": " And we won't dwell too much on this for now,", "tokens": [50604, 400, 321, 1582, 380, 24355, 886, 709, 322, 341, 337, 586, 11, 50690], "temperature": 0.0, "avg_logprob": -0.13692823556753306, "compression_ratio": 1.7306397306397305, "no_speech_prob": 0.0008295286097563803}, {"id": 713, "seek": 210624, "start": 2112.7599999999998, "end": 2115.56, "text": " but Python has different types of comments, one of which is this.", "tokens": [50690, 457, 15329, 575, 819, 3467, 295, 3053, 11, 472, 295, 597, 307, 341, 13, 50830], "temperature": 0.0, "avg_logprob": -0.13692823556753306, "compression_ratio": 1.7306397306397305, "no_speech_prob": 0.0008295286097563803}, {"id": 714, "seek": 210624, "start": 2115.56, "end": 2118.7999999999997, "text": " This is technically called a doc string or document string.", "tokens": [50830, 639, 307, 12120, 1219, 257, 3211, 6798, 420, 4166, 6798, 13, 50992], "temperature": 0.0, "avg_logprob": -0.13692823556753306, "compression_ratio": 1.7306397306397305, "no_speech_prob": 0.0008295286097563803}, {"id": 715, "seek": 210624, "start": 2118.7999999999997, "end": 2123.16, "text": " And what's nice about Python, as well as languages like Java and other still,", "tokens": [50992, 400, 437, 311, 1481, 466, 15329, 11, 382, 731, 382, 8650, 411, 10745, 293, 661, 920, 11, 51210], "temperature": 0.0, "avg_logprob": -0.13692823556753306, "compression_ratio": 1.7306397306397305, "no_speech_prob": 0.0008295286097563803}, {"id": 716, "seek": 210624, "start": 2123.16, "end": 2128.3599999999997, "text": " is that you can put comments in your code that special programs can read", "tokens": [51210, 307, 300, 291, 393, 829, 3053, 294, 428, 3089, 300, 2121, 4268, 393, 1401, 51470], "temperature": 0.0, "avg_logprob": -0.13692823556753306, "compression_ratio": 1.7306397306397305, "no_speech_prob": 0.0008295286097563803}, {"id": 717, "seek": 210624, "start": 2128.3599999999997, "end": 2130.8799999999997, "text": " and then generate documentation for you.", "tokens": [51470, 293, 550, 8460, 14333, 337, 291, 13, 51596], "temperature": 0.0, "avg_logprob": -0.13692823556753306, "compression_ratio": 1.7306397306397305, "no_speech_prob": 0.0008295286097563803}, {"id": 718, "seek": 210624, "start": 2130.8799999999997, "end": 2134.0, "text": " So if you ever took APCS and you ever saw Java doc,", "tokens": [51596, 407, 498, 291, 1562, 1890, 5372, 26283, 293, 291, 1562, 1866, 10745, 3211, 11, 51752], "temperature": 0.0, "avg_logprob": -0.13692823556753306, "compression_ratio": 1.7306397306397305, "no_speech_prob": 0.0008295286097563803}, {"id": 719, "seek": 213400, "start": 2134.04, "end": 2137.4, "text": " this was a way of commenting your methods and your code in Java using", "tokens": [50366, 341, 390, 257, 636, 295, 29590, 428, 7150, 293, 428, 3089, 294, 10745, 1228, 50534], "temperature": 0.0, "avg_logprob": -0.13588064908981323, "compression_ratio": 1.8033898305084746, "no_speech_prob": 0.00100045430008322}, {"id": 720, "seek": 213400, "start": 2137.4, "end": 2140.68, "text": " funky at signs and other syntax so that if you ran a special command,", "tokens": [50534, 33499, 412, 7880, 293, 661, 28431, 370, 300, 498, 291, 5872, 257, 2121, 5622, 11, 50698], "temperature": 0.0, "avg_logprob": -0.13588064908981323, "compression_ratio": 1.8033898305084746, "no_speech_prob": 0.00100045430008322}, {"id": 721, "seek": 213400, "start": 2140.68, "end": 2143.44, "text": " it could generate a user's manual for all of your functions", "tokens": [50698, 309, 727, 8460, 257, 4195, 311, 9688, 337, 439, 295, 428, 6828, 50836], "temperature": 0.0, "avg_logprob": -0.13588064908981323, "compression_ratio": 1.8033898305084746, "no_speech_prob": 0.00100045430008322}, {"id": 722, "seek": 213400, "start": 2143.44, "end": 2147.48, "text": " until you or colleagues or friends or teachers exactly what all your functions", "tokens": [50836, 1826, 291, 420, 7734, 420, 1855, 420, 6023, 2293, 437, 439, 428, 6828, 51038], "temperature": 0.0, "avg_logprob": -0.13588064908981323, "compression_ratio": 1.8033898305084746, "no_speech_prob": 0.00100045430008322}, {"id": 723, "seek": 213400, "start": 2147.48, "end": 2150.48, "text": " are, what their arguments are, what their return values are, and all of that.", "tokens": [51038, 366, 11, 437, 641, 12869, 366, 11, 437, 641, 2736, 4190, 366, 11, 293, 439, 295, 300, 13, 51188], "temperature": 0.0, "avg_logprob": -0.13588064908981323, "compression_ratio": 1.8033898305084746, "no_speech_prob": 0.00100045430008322}, {"id": 724, "seek": 213400, "start": 2150.48, "end": 2155.88, "text": " Similarly, in Python, can you use these funky quote, quote, quote doc strings", "tokens": [51188, 13157, 11, 294, 15329, 11, 393, 291, 764, 613, 33499, 6513, 11, 6513, 11, 6513, 3211, 13985, 51458], "temperature": 0.0, "avg_logprob": -0.13588064908981323, "compression_ratio": 1.8033898305084746, "no_speech_prob": 0.00100045430008322}, {"id": 725, "seek": 213400, "start": 2155.88, "end": 2157.4, "text": " to document your function?", "tokens": [51458, 281, 4166, 428, 2445, 30, 51534], "temperature": 0.0, "avg_logprob": -0.13588064908981323, "compression_ratio": 1.8033898305084746, "no_speech_prob": 0.00100045430008322}, {"id": 726, "seek": 213400, "start": 2157.4, "end": 2160.84, "text": " So whereas in C, our style has been to put quotes above the functions.", "tokens": [51534, 407, 9735, 294, 383, 11, 527, 3758, 575, 668, 281, 829, 19963, 3673, 264, 6828, 13, 51706], "temperature": 0.0, "avg_logprob": -0.13588064908981323, "compression_ratio": 1.8033898305084746, "no_speech_prob": 0.00100045430008322}, {"id": 727, "seek": 216084, "start": 2160.84, "end": 2164.36, "text": " In Python, it's going to be to put them as the first line inside", "tokens": [50364, 682, 15329, 11, 309, 311, 516, 281, 312, 281, 829, 552, 382, 264, 700, 1622, 1854, 50540], "temperature": 0.0, "avg_logprob": -0.19717077414194742, "compression_ratio": 1.5203619909502262, "no_speech_prob": 0.00043053735862486064}, {"id": 728, "seek": 216084, "start": 2164.36, "end": 2167.56, "text": " and indented within the function.", "tokens": [50540, 293, 1016, 6003, 1951, 264, 2445, 13, 50700], "temperature": 0.0, "avg_logprob": -0.19717077414194742, "compression_ratio": 1.5203619909502262, "no_speech_prob": 0.00043053735862486064}, {"id": 729, "seek": 216084, "start": 2167.56, "end": 2172.44, "text": " All right, so now let's actually try to port a program from code again,", "tokens": [50700, 1057, 558, 11, 370, 586, 718, 311, 767, 853, 281, 2436, 257, 1461, 490, 3089, 797, 11, 50944], "temperature": 0.0, "avg_logprob": -0.19717077414194742, "compression_ratio": 1.5203619909502262, "no_speech_prob": 0.00043053735862486064}, {"id": 730, "seek": 216084, "start": 2172.44, "end": 2179.56, "text": " thinking back on week one in C when we had this program here.", "tokens": [50944, 1953, 646, 322, 1243, 472, 294, 383, 562, 321, 632, 341, 1461, 510, 13, 51300], "temperature": 0.0, "avg_logprob": -0.19717077414194742, "compression_ratio": 1.5203619909502262, "no_speech_prob": 0.00043053735862486064}, {"id": 731, "seek": 216084, "start": 2179.56, "end": 2185.28, "text": " So there's quite a bit going, oh, spoiler, don't look at that.", "tokens": [51300, 407, 456, 311, 1596, 257, 857, 516, 11, 1954, 11, 26927, 11, 500, 380, 574, 412, 300, 13, 51586], "temperature": 0.0, "avg_logprob": -0.19717077414194742, "compression_ratio": 1.5203619909502262, "no_speech_prob": 0.00043053735862486064}, {"id": 732, "seek": 216084, "start": 2185.28, "end": 2187.2400000000002, "text": " Hopefully, that didn't sink in just yet.", "tokens": [51586, 10429, 11, 300, 994, 380, 9500, 294, 445, 1939, 13, 51684], "temperature": 0.0, "avg_logprob": -0.19717077414194742, "compression_ratio": 1.5203619909502262, "no_speech_prob": 0.00043053735862486064}, {"id": 733, "seek": 218724, "start": 2187.24, "end": 2192.24, "text": " So in week one, we had this program in C, get positive int.", "tokens": [50364, 407, 294, 1243, 472, 11, 321, 632, 341, 1461, 294, 383, 11, 483, 3353, 560, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1629499969482422, "compression_ratio": 1.703448275862069, "no_speech_prob": 0.0003459811850916594}, {"id": 734, "seek": 218724, "start": 2192.24, "end": 2195.52, "text": " And its purpose in life was to write a program that gets a positive integer", "tokens": [50614, 400, 1080, 4334, 294, 993, 390, 281, 2464, 257, 1461, 300, 2170, 257, 3353, 24922, 50778], "temperature": 0.0, "avg_logprob": -0.1629499969482422, "compression_ratio": 1.703448275862069, "no_speech_prob": 0.0003459811850916594}, {"id": 735, "seek": 218724, "start": 2195.52, "end": 2197.8399999999997, "text": " from the user, in and of itself not all that interesting,", "tokens": [50778, 490, 264, 4195, 11, 294, 293, 295, 2564, 406, 439, 300, 1880, 11, 50894], "temperature": 0.0, "avg_logprob": -0.1629499969482422, "compression_ratio": 1.703448275862069, "no_speech_prob": 0.0003459811850916594}, {"id": 736, "seek": 218724, "start": 2197.8399999999997, "end": 2200.24, "text": " but it was an opportunity to introduce a few things.", "tokens": [50894, 457, 309, 390, 364, 2650, 281, 5366, 257, 1326, 721, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1629499969482422, "compression_ratio": 1.703448275862069, "no_speech_prob": 0.0003459811850916594}, {"id": 737, "seek": 218724, "start": 2200.24, "end": 2204.8799999999997, "text": " One, we introduced this line six several weeks ago, which is known as a prototype.", "tokens": [51014, 1485, 11, 321, 7268, 341, 1622, 2309, 2940, 3259, 2057, 11, 597, 307, 2570, 382, 257, 19475, 13, 51246], "temperature": 0.0, "avg_logprob": -0.1629499969482422, "compression_ratio": 1.703448275862069, "no_speech_prob": 0.0003459811850916594}, {"id": 738, "seek": 218724, "start": 2204.8799999999997, "end": 2208.8399999999997, "text": " And what was the purpose of having that function prototype up there?", "tokens": [51246, 400, 437, 390, 264, 4334, 295, 1419, 300, 2445, 19475, 493, 456, 30, 51444], "temperature": 0.0, "avg_logprob": -0.1629499969482422, "compression_ratio": 1.703448275862069, "no_speech_prob": 0.0003459811850916594}, {"id": 739, "seek": 218724, "start": 2208.8399999999997, "end": 2210.9199999999996, "text": " Yeah, you declare the function, but why?", "tokens": [51444, 865, 11, 291, 19710, 264, 2445, 11, 457, 983, 30, 51548], "temperature": 0.0, "avg_logprob": -0.1629499969482422, "compression_ratio": 1.703448275862069, "no_speech_prob": 0.0003459811850916594}, {"id": 740, "seek": 218724, "start": 2210.9199999999996, "end": 2214.68, "text": " Because it's already implemented down here on line 15.", "tokens": [51548, 1436, 309, 311, 1217, 12270, 760, 510, 322, 1622, 2119, 13, 51736], "temperature": 0.0, "avg_logprob": -0.1629499969482422, "compression_ratio": 1.703448275862069, "no_speech_prob": 0.0003459811850916594}, {"id": 741, "seek": 221468, "start": 2215.68, "end": 2222.3999999999996, "text": " Yeah, because of the way the programs run, and frankly, because of how naive or dumb", "tokens": [50414, 865, 11, 570, 295, 264, 636, 264, 4268, 1190, 11, 293, 11939, 11, 570, 295, 577, 29052, 420, 10316, 50750], "temperature": 0.0, "avg_logprob": -0.1845956873010706, "compression_ratio": 1.782918149466192, "no_speech_prob": 0.0005527608445845544}, {"id": 742, "seek": 221468, "start": 2222.3999999999996, "end": 2228.3199999999997, "text": " that Clang is by design, it does not know that a function exists until it actually sees it.", "tokens": [50750, 300, 2033, 656, 307, 538, 1715, 11, 309, 775, 406, 458, 300, 257, 2445, 8198, 1826, 309, 767, 8194, 309, 13, 51046], "temperature": 0.0, "avg_logprob": -0.1845956873010706, "compression_ratio": 1.782918149466192, "no_speech_prob": 0.0005527608445845544}, {"id": 743, "seek": 221468, "start": 2228.3199999999997, "end": 2232.7599999999998, "text": " So the problem is that if in C you have main, inside of which is a call to function", "tokens": [51046, 407, 264, 1154, 307, 300, 498, 294, 383, 291, 362, 2135, 11, 1854, 295, 597, 307, 257, 818, 281, 2445, 51268], "temperature": 0.0, "avg_logprob": -0.1845956873010706, "compression_ratio": 1.782918149466192, "no_speech_prob": 0.0005527608445845544}, {"id": 744, "seek": 221468, "start": 2232.7599999999998, "end": 2236.44, "text": " like get positive int, but it's not implemented until a few lines later,", "tokens": [51268, 411, 483, 3353, 560, 11, 457, 309, 311, 406, 12270, 1826, 257, 1326, 3876, 1780, 11, 51452], "temperature": 0.0, "avg_logprob": -0.1845956873010706, "compression_ratio": 1.782918149466192, "no_speech_prob": 0.0005527608445845544}, {"id": 745, "seek": 221468, "start": 2236.44, "end": 2239.04, "text": " Clang is going to be dumb and just not know that it even exists,", "tokens": [51452, 2033, 656, 307, 516, 281, 312, 10316, 293, 445, 406, 458, 300, 309, 754, 8198, 11, 51582], "temperature": 0.0, "avg_logprob": -0.1845956873010706, "compression_ratio": 1.782918149466192, "no_speech_prob": 0.0005527608445845544}, {"id": 746, "seek": 221468, "start": 2239.04, "end": 2240.64, "text": " and it's not going to compile your code.", "tokens": [51582, 293, 309, 311, 406, 516, 281, 31413, 428, 3089, 13, 51662], "temperature": 0.0, "avg_logprob": -0.1845956873010706, "compression_ratio": 1.782918149466192, "no_speech_prob": 0.0005527608445845544}, {"id": 747, "seek": 221468, "start": 2240.64, "end": 2244.3199999999997, "text": " So this prototype, as we call it, is kind of a teaser, a hint", "tokens": [51662, 407, 341, 19475, 11, 382, 321, 818, 309, 11, 307, 733, 295, 257, 35326, 11, 257, 12075, 51846], "temperature": 0.0, "avg_logprob": -0.1845956873010706, "compression_ratio": 1.782918149466192, "no_speech_prob": 0.0005527608445845544}, {"id": 748, "seek": 224432, "start": 2244.36, "end": 2245.88, "text": " that doesn't implement the whole function.", "tokens": [50366, 300, 1177, 380, 4445, 264, 1379, 2445, 13, 50442], "temperature": 0.0, "avg_logprob": -0.14302045779120653, "compression_ratio": 1.7876712328767124, "no_speech_prob": 0.0003150315606035292}, {"id": 749, "seek": 224432, "start": 2245.88, "end": 2251.1200000000003, "text": " It just shows the compiler its return type and its types and order of parameters", "tokens": [50442, 467, 445, 3110, 264, 31958, 1080, 2736, 2010, 293, 1080, 3467, 293, 1668, 295, 9834, 50704], "temperature": 0.0, "avg_logprob": -0.14302045779120653, "compression_ratio": 1.7876712328767124, "no_speech_prob": 0.0003150315606035292}, {"id": 750, "seek": 224432, "start": 2251.1200000000003, "end": 2253.84, "text": " so that that's enough information to then just trust", "tokens": [50704, 370, 300, 300, 311, 1547, 1589, 281, 550, 445, 3361, 50840], "temperature": 0.0, "avg_logprob": -0.14302045779120653, "compression_ratio": 1.7876712328767124, "no_speech_prob": 0.0003150315606035292}, {"id": 751, "seek": 224432, "start": 2253.84, "end": 2256.8, "text": " that if I just blindly compile main, eventually,", "tokens": [50840, 300, 498, 286, 445, 47744, 31413, 2135, 11, 4728, 11, 50988], "temperature": 0.0, "avg_logprob": -0.14302045779120653, "compression_ratio": 1.7876712328767124, "no_speech_prob": 0.0003150315606035292}, {"id": 752, "seek": 224432, "start": 2256.8, "end": 2259.4, "text": " I'm going to see the actual implementation of the function", "tokens": [50988, 286, 478, 516, 281, 536, 264, 3539, 11420, 295, 264, 2445, 51118], "temperature": 0.0, "avg_logprob": -0.14302045779120653, "compression_ratio": 1.7876712328767124, "no_speech_prob": 0.0003150315606035292}, {"id": 753, "seek": 224432, "start": 2259.4, "end": 2261.6000000000004, "text": " so I can compile its bits as well.", "tokens": [51118, 370, 286, 393, 31413, 1080, 9239, 382, 731, 13, 51228], "temperature": 0.0, "avg_logprob": -0.14302045779120653, "compression_ratio": 1.7876712328767124, "no_speech_prob": 0.0003150315606035292}, {"id": 754, "seek": 224432, "start": 2261.6000000000004, "end": 2265.8, "text": " So in here, in C, we call get positive int, and then we pass it in a prompt.", "tokens": [51228, 407, 294, 510, 11, 294, 383, 11, 321, 818, 483, 3353, 560, 11, 293, 550, 321, 1320, 309, 294, 257, 12391, 13, 51438], "temperature": 0.0, "avg_logprob": -0.14302045779120653, "compression_ratio": 1.7876712328767124, "no_speech_prob": 0.0003150315606035292}, {"id": 755, "seek": 224432, "start": 2265.8, "end": 2268.88, "text": " We stored it in a variable called i, and then printed it out.", "tokens": [51438, 492, 12187, 309, 294, 257, 7006, 1219, 741, 11, 293, 550, 13567, 309, 484, 13, 51592], "temperature": 0.0, "avg_logprob": -0.14302045779120653, "compression_ratio": 1.7876712328767124, "no_speech_prob": 0.0003150315606035292}, {"id": 756, "seek": 224432, "start": 2268.88, "end": 2271.6400000000003, "text": " And then to implement this, we use kind of a familiar construct", "tokens": [51592, 400, 550, 281, 4445, 341, 11, 321, 764, 733, 295, 257, 4963, 7690, 51730], "temperature": 0.0, "avg_logprob": -0.14302045779120653, "compression_ratio": 1.7876712328767124, "no_speech_prob": 0.0003150315606035292}, {"id": 757, "seek": 227164, "start": 2271.64, "end": 2273.08, "text": " that you've used in other programs.", "tokens": [50364, 300, 291, 600, 1143, 294, 661, 4268, 13, 50436], "temperature": 0.0, "avg_logprob": -0.13790174730780985, "compression_ratio": 1.8852459016393444, "no_speech_prob": 0.01450238935649395}, {"id": 758, "seek": 227164, "start": 2273.08, "end": 2276.3199999999997, "text": " Pretty much any time you want to prompt the user for inputs", "tokens": [50436, 10693, 709, 604, 565, 291, 528, 281, 12391, 264, 4195, 337, 15743, 50598], "temperature": 0.0, "avg_logprob": -0.13790174730780985, "compression_ratio": 1.8852459016393444, "no_speech_prob": 0.01450238935649395}, {"id": 759, "seek": 227164, "start": 2276.3199999999997, "end": 2279.44, "text": " and you want to keep pestering him or her until they cooperate with whatever", "tokens": [50598, 293, 291, 528, 281, 1066, 31068, 1794, 796, 420, 720, 1826, 436, 26667, 365, 2035, 50754], "temperature": 0.0, "avg_logprob": -0.13790174730780985, "compression_ratio": 1.8852459016393444, "no_speech_prob": 0.01450238935649395}, {"id": 760, "seek": 227164, "start": 2279.44, "end": 2283.2, "text": " your conditions are, you would use the so-called do-while loop.", "tokens": [50754, 428, 4487, 366, 11, 291, 576, 764, 264, 370, 12, 11880, 360, 12, 7723, 6367, 13, 50942], "temperature": 0.0, "avg_logprob": -0.13790174730780985, "compression_ratio": 1.8852459016393444, "no_speech_prob": 0.01450238935649395}, {"id": 761, "seek": 227164, "start": 2283.2, "end": 2286.68, "text": " And because the do-while loop recall is distinct from the while loop, how?", "tokens": [50942, 400, 570, 264, 360, 12, 7723, 6367, 9901, 307, 10644, 490, 264, 1339, 6367, 11, 577, 30, 51116], "temperature": 0.0, "avg_logprob": -0.13790174730780985, "compression_ratio": 1.8852459016393444, "no_speech_prob": 0.01450238935649395}, {"id": 762, "seek": 227164, "start": 2289.12, "end": 2291.48, "text": " It runs at least once, which just kind of makes intuitive sense", "tokens": [51238, 467, 6676, 412, 1935, 1564, 11, 597, 445, 733, 295, 1669, 21769, 2020, 51356], "temperature": 0.0, "avg_logprob": -0.13790174730780985, "compression_ratio": 1.8852459016393444, "no_speech_prob": 0.01450238935649395}, {"id": 763, "seek": 227164, "start": 2291.48, "end": 2293.52, "text": " if you want to prompt the user for something,", "tokens": [51356, 498, 291, 528, 281, 12391, 264, 4195, 337, 746, 11, 51458], "temperature": 0.0, "avg_logprob": -0.13790174730780985, "compression_ratio": 1.8852459016393444, "no_speech_prob": 0.01450238935649395}, {"id": 764, "seek": 227164, "start": 2293.52, "end": 2297.3199999999997, "text": " and then if he or she doesn't cooperate, only then do you want to prompt them again.", "tokens": [51458, 293, 550, 498, 415, 420, 750, 1177, 380, 26667, 11, 787, 550, 360, 291, 528, 281, 12391, 552, 797, 13, 51648], "temperature": 0.0, "avg_logprob": -0.13790174730780985, "compression_ratio": 1.8852459016393444, "no_speech_prob": 0.01450238935649395}, {"id": 765, "seek": 227164, "start": 2297.3199999999997, "end": 2300.4, "text": " By contrast, with a while loop, it's going to happen again and again", "tokens": [51648, 3146, 8712, 11, 365, 257, 1339, 6367, 11, 309, 311, 516, 281, 1051, 797, 293, 797, 51802], "temperature": 0.0, "avg_logprob": -0.13790174730780985, "compression_ratio": 1.8852459016393444, "no_speech_prob": 0.01450238935649395}, {"id": 766, "seek": 230040, "start": 2301.28, "end": 2302.88, "text": " no matter what from the get go.", "tokens": [50408, 572, 1871, 437, 490, 264, 483, 352, 13, 50488], "temperature": 0.0, "avg_logprob": -0.13256543780130053, "compression_ratio": 1.8193832599118942, "no_speech_prob": 0.0018101097084581852}, {"id": 767, "seek": 230040, "start": 2302.88, "end": 2306.56, "text": " So let's see if we can't now convert this or port this,", "tokens": [50488, 407, 718, 311, 536, 498, 321, 393, 380, 586, 7620, 341, 420, 2436, 341, 11, 50672], "temperature": 0.0, "avg_logprob": -0.13256543780130053, "compression_ratio": 1.8193832599118942, "no_speech_prob": 0.0018101097084581852}, {"id": 768, "seek": 230040, "start": 2306.56, "end": 2308.44, "text": " as people would say, to Python.", "tokens": [50672, 382, 561, 576, 584, 11, 281, 15329, 13, 50766], "temperature": 0.0, "avg_logprob": -0.13256543780130053, "compression_ratio": 1.8193832599118942, "no_speech_prob": 0.0018101097084581852}, {"id": 769, "seek": 230040, "start": 2308.44, "end": 2313.44, "text": " So here, I'm going to go ahead and save a new file called positive.py.", "tokens": [50766, 407, 510, 11, 286, 478, 516, 281, 352, 2286, 293, 3155, 257, 777, 3991, 1219, 3353, 13, 8200, 13, 51016], "temperature": 0.0, "avg_logprob": -0.13256543780130053, "compression_ratio": 1.8193832599118942, "no_speech_prob": 0.0018101097084581852}, {"id": 770, "seek": 230040, "start": 2313.44, "end": 2319.44, "text": " And I'm going to go ahead and do everything here in main as before.", "tokens": [51016, 400, 286, 478, 516, 281, 352, 2286, 293, 360, 1203, 510, 294, 2135, 382, 949, 13, 51316], "temperature": 0.0, "avg_logprob": -0.13256543780130053, "compression_ratio": 1.8193832599118942, "no_speech_prob": 0.0018101097084581852}, {"id": 771, "seek": 230040, "start": 2319.44, "end": 2324.4, "text": " So I'm going to go ahead and do, let's say, from cs50 import get int,", "tokens": [51316, 407, 286, 478, 516, 281, 352, 2286, 293, 360, 11, 718, 311, 584, 11, 490, 28277, 2803, 974, 483, 560, 11, 51564], "temperature": 0.0, "avg_logprob": -0.13256543780130053, "compression_ratio": 1.8193832599118942, "no_speech_prob": 0.0018101097084581852}, {"id": 772, "seek": 230040, "start": 2324.4, "end": 2325.84, "text": " because I do need that.", "tokens": [51564, 570, 286, 360, 643, 300, 13, 51636], "temperature": 0.0, "avg_logprob": -0.13256543780130053, "compression_ratio": 1.8193832599118942, "no_speech_prob": 0.0018101097084581852}, {"id": 773, "seek": 230040, "start": 2325.84, "end": 2328.4, "text": " And then I'm going to go ahead and have my main method here.", "tokens": [51636, 400, 550, 286, 478, 516, 281, 352, 2286, 293, 362, 452, 2135, 3170, 510, 13, 51764], "temperature": 0.0, "avg_logprob": -0.13256543780130053, "compression_ratio": 1.8193832599118942, "no_speech_prob": 0.0018101097084581852}, {"id": 774, "seek": 232840, "start": 2328.4, "end": 2331.88, "text": " And then inside of main, just like on the left-hand side,", "tokens": [50364, 400, 550, 1854, 295, 2135, 11, 445, 411, 322, 264, 1411, 12, 5543, 1252, 11, 50538], "temperature": 0.0, "avg_logprob": -0.16597547598764406, "compression_ratio": 1.7386759581881532, "no_speech_prob": 9.915111877489835e-05}, {"id": 775, "seek": 232840, "start": 2331.88, "end": 2338.28, "text": " I'm going to do i get get positive int, positive integer, please.", "tokens": [50538, 286, 478, 516, 281, 360, 741, 483, 483, 3353, 560, 11, 3353, 24922, 11, 1767, 13, 50858], "temperature": 0.0, "avg_logprob": -0.16597547598764406, "compression_ratio": 1.7386759581881532, "no_speech_prob": 9.915111877489835e-05}, {"id": 776, "seek": 232840, "start": 2338.28, "end": 2339.64, "text": " It's going to wrap a little bit now.", "tokens": [50858, 467, 311, 516, 281, 7019, 257, 707, 857, 586, 13, 50926], "temperature": 0.0, "avg_logprob": -0.16597547598764406, "compression_ratio": 1.7386759581881532, "no_speech_prob": 9.915111877489835e-05}, {"id": 777, "seek": 232840, "start": 2339.64, "end": 2340.52, "text": " That's fine.", "tokens": [50926, 663, 311, 2489, 13, 50970], "temperature": 0.0, "avg_logprob": -0.16597547598764406, "compression_ratio": 1.7386759581881532, "no_speech_prob": 9.915111877489835e-05}, {"id": 778, "seek": 232840, "start": 2340.52, "end": 2343.48, "text": " And then I'm going to go ahead and print this, which recall is just print,", "tokens": [50970, 400, 550, 286, 478, 516, 281, 352, 2286, 293, 4482, 341, 11, 597, 9901, 307, 445, 4482, 11, 51118], "temperature": 0.0, "avg_logprob": -0.16597547598764406, "compression_ratio": 1.7386759581881532, "no_speech_prob": 9.915111877489835e-05}, {"id": 779, "seek": 232840, "start": 2343.48, "end": 2347.4, "text": " an f string where the placeholder is i.", "tokens": [51118, 364, 283, 6798, 689, 264, 1081, 20480, 307, 741, 13, 51314], "temperature": 0.0, "avg_logprob": -0.16597547598764406, "compression_ratio": 1.7386759581881532, "no_speech_prob": 9.915111877489835e-05}, {"id": 780, "seek": 232840, "start": 2347.4, "end": 2350.96, "text": " Although, frankly, this is kind of stupid to just create a string that", "tokens": [51314, 5780, 11, 11939, 11, 341, 307, 733, 295, 6631, 281, 445, 1884, 257, 6798, 300, 51492], "temperature": 0.0, "avg_logprob": -0.16597547598764406, "compression_ratio": 1.7386759581881532, "no_speech_prob": 9.915111877489835e-05}, {"id": 781, "seek": 232840, "start": 2350.96, "end": 2353.08, "text": " has nothing other than the value we want to print.", "tokens": [51492, 575, 1825, 661, 813, 264, 2158, 321, 528, 281, 4482, 13, 51598], "temperature": 0.0, "avg_logprob": -0.16597547598764406, "compression_ratio": 1.7386759581881532, "no_speech_prob": 9.915111877489835e-05}, {"id": 782, "seek": 232840, "start": 2353.08, "end": 2355.4, "text": " Nicely enough in Python, just print what you want.", "tokens": [51598, 14776, 736, 1547, 294, 15329, 11, 445, 4482, 437, 291, 528, 13, 51714], "temperature": 0.0, "avg_logprob": -0.16597547598764406, "compression_ratio": 1.7386759581881532, "no_speech_prob": 9.915111877489835e-05}, {"id": 783, "seek": 232840, "start": 2355.4, "end": 2357.2400000000002, "text": " And so that simplifies that argument.", "tokens": [51714, 400, 370, 300, 6883, 11221, 300, 6770, 13, 51806], "temperature": 0.0, "avg_logprob": -0.16597547598764406, "compression_ratio": 1.7386759581881532, "no_speech_prob": 9.915111877489835e-05}, {"id": 784, "seek": 235724, "start": 2357.2799999999997, "end": 2362.7999999999997, "text": " So now it remains to implement get positive int, which", "tokens": [50366, 407, 586, 309, 7023, 281, 4445, 483, 3353, 560, 11, 597, 50642], "temperature": 0.0, "avg_logprob": -0.10851392601475571, "compression_ratio": 1.8233082706766917, "no_speech_prob": 0.00016864748613443226}, {"id": 785, "seek": 235724, "start": 2362.7999999999997, "end": 2365.16, "text": " is going to take some kind of prompt as its input.", "tokens": [50642, 307, 516, 281, 747, 512, 733, 295, 12391, 382, 1080, 4846, 13, 50760], "temperature": 0.0, "avg_logprob": -0.10851392601475571, "compression_ratio": 1.8233082706766917, "no_speech_prob": 0.00016864748613443226}, {"id": 786, "seek": 235724, "start": 2365.16, "end": 2369.8399999999997, "text": " And notice I'm not specifying the data type of prompt, which is string.", "tokens": [50760, 400, 3449, 286, 478, 406, 1608, 5489, 264, 1412, 2010, 295, 12391, 11, 597, 307, 6798, 13, 50994], "temperature": 0.0, "avg_logprob": -0.10851392601475571, "compression_ratio": 1.8233082706766917, "no_speech_prob": 0.00016864748613443226}, {"id": 787, "seek": 235724, "start": 2369.8399999999997, "end": 2372.24, "text": " I'm not specifying the return type of this function,", "tokens": [50994, 286, 478, 406, 1608, 5489, 264, 2736, 2010, 295, 341, 2445, 11, 51114], "temperature": 0.0, "avg_logprob": -0.10851392601475571, "compression_ratio": 1.8233082706766917, "no_speech_prob": 0.00016864748613443226}, {"id": 788, "seek": 235724, "start": 2372.24, "end": 2374.9199999999996, "text": " but both actually do exist underneath the hood.", "tokens": [51114, 457, 1293, 767, 360, 2514, 7223, 264, 13376, 13, 51248], "temperature": 0.0, "avg_logprob": -0.10851392601475571, "compression_ratio": 1.8233082706766917, "no_speech_prob": 0.00016864748613443226}, {"id": 789, "seek": 235724, "start": 2374.9199999999996, "end": 2379.7999999999997, "text": " So in the past, to get a variable, I would do something like this semicolon.", "tokens": [51248, 407, 294, 264, 1791, 11, 281, 483, 257, 7006, 11, 286, 576, 360, 746, 411, 341, 27515, 38780, 13, 51492], "temperature": 0.0, "avg_logprob": -0.10851392601475571, "compression_ratio": 1.8233082706766917, "no_speech_prob": 0.00016864748613443226}, {"id": 790, "seek": 235724, "start": 2379.7999999999997, "end": 2381.9199999999996, "text": " But I know I don't need the semicolon.", "tokens": [51492, 583, 286, 458, 286, 500, 380, 643, 264, 27515, 38780, 13, 51598], "temperature": 0.0, "avg_logprob": -0.10851392601475571, "compression_ratio": 1.8233082706766917, "no_speech_prob": 0.00016864748613443226}, {"id": 791, "seek": 235724, "start": 2381.9199999999996, "end": 2383.56, "text": " I know I don't need the data type.", "tokens": [51598, 286, 458, 286, 500, 380, 643, 264, 1412, 2010, 13, 51680], "temperature": 0.0, "avg_logprob": -0.10851392601475571, "compression_ratio": 1.8233082706766917, "no_speech_prob": 0.00016864748613443226}, {"id": 792, "seek": 235724, "start": 2383.56, "end": 2386.7999999999997, "text": " And this just looks stupid to just put a variable there", "tokens": [51680, 400, 341, 445, 1542, 6631, 281, 445, 829, 257, 7006, 456, 51842], "temperature": 0.0, "avg_logprob": -0.10851392601475571, "compression_ratio": 1.8233082706766917, "no_speech_prob": 0.00016864748613443226}, {"id": 793, "seek": 238680, "start": 2386.8, "end": 2387.48, "text": " to need it.", "tokens": [50364, 281, 643, 309, 13, 50398], "temperature": 0.0, "avg_logprob": -0.15480359395345053, "compression_ratio": 1.7196969696969697, "no_speech_prob": 0.004198245704174042}, {"id": 794, "seek": 238680, "start": 2387.48, "end": 2389.04, "text": " You don't need to do this in Python.", "tokens": [50398, 509, 500, 380, 643, 281, 360, 341, 294, 15329, 13, 50476], "temperature": 0.0, "avg_logprob": -0.15480359395345053, "compression_ratio": 1.7196969696969697, "no_speech_prob": 0.004198245704174042}, {"id": 795, "seek": 238680, "start": 2389.04, "end": 2392.0, "text": " If you want to use a variable, just start using it.", "tokens": [50476, 759, 291, 528, 281, 764, 257, 7006, 11, 445, 722, 1228, 309, 13, 50624], "temperature": 0.0, "avg_logprob": -0.15480359395345053, "compression_ratio": 1.7196969696969697, "no_speech_prob": 0.004198245704174042}, {"id": 796, "seek": 238680, "start": 2392.0, "end": 2395.48, "text": " And unfortunately, whereas almost every other feature we've seen in Python", "tokens": [50624, 400, 7015, 11, 9735, 1920, 633, 661, 4111, 321, 600, 1612, 294, 15329, 50798], "temperature": 0.0, "avg_logprob": -0.15480359395345053, "compression_ratio": 1.7196969696969697, "no_speech_prob": 0.004198245704174042}, {"id": 797, "seek": 238680, "start": 2395.48, "end": 2401.2000000000003, "text": " thus far kind of maps directly back to a feature in C,", "tokens": [50798, 8807, 1400, 733, 295, 11317, 3838, 646, 281, 257, 4111, 294, 383, 11, 51084], "temperature": 0.0, "avg_logprob": -0.15480359395345053, "compression_ratio": 1.7196969696969697, "no_speech_prob": 0.004198245704174042}, {"id": 798, "seek": 238680, "start": 2401.2000000000003, "end": 2404.48, "text": " Python does not have a do while.", "tokens": [51084, 15329, 775, 406, 362, 257, 360, 1339, 13, 51248], "temperature": 0.0, "avg_logprob": -0.15480359395345053, "compression_ratio": 1.7196969696969697, "no_speech_prob": 0.004198245704174042}, {"id": 799, "seek": 238680, "start": 2404.48, "end": 2407.2000000000003, "text": " So it has the for in.", "tokens": [51248, 407, 309, 575, 264, 337, 294, 13, 51384], "temperature": 0.0, "avg_logprob": -0.15480359395345053, "compression_ratio": 1.7196969696969697, "no_speech_prob": 0.004198245704174042}, {"id": 800, "seek": 238680, "start": 2407.2000000000003, "end": 2410.76, "text": " And it has while, and maybe it has other things we haven't told you about,", "tokens": [51384, 400, 309, 575, 1339, 11, 293, 1310, 309, 575, 661, 721, 321, 2378, 380, 1907, 291, 466, 11, 51562], "temperature": 0.0, "avg_logprob": -0.15480359395345053, "compression_ratio": 1.7196969696969697, "no_speech_prob": 0.004198245704174042}, {"id": 801, "seek": 238680, "start": 2410.76, "end": 2412.6000000000004, "text": " but it doesn't have do while.", "tokens": [51562, 457, 309, 1177, 380, 362, 360, 1339, 13, 51654], "temperature": 0.0, "avg_logprob": -0.15480359395345053, "compression_ratio": 1.7196969696969697, "no_speech_prob": 0.004198245704174042}, {"id": 802, "seek": 238680, "start": 2412.6000000000004, "end": 2416.0, "text": " So knowing that and knowing only what we've presented thus far,", "tokens": [51654, 407, 5276, 300, 293, 5276, 787, 437, 321, 600, 8212, 8807, 1400, 11, 51824], "temperature": 0.0, "avg_logprob": -0.15480359395345053, "compression_ratio": 1.7196969696969697, "no_speech_prob": 0.004198245704174042}, {"id": 803, "seek": 241600, "start": 2416.0, "end": 2420.2, "text": " how do we still go about getting an int from the user", "tokens": [50364, 577, 360, 321, 920, 352, 466, 1242, 364, 560, 490, 264, 4195, 50574], "temperature": 0.0, "avg_logprob": -0.24510860443115234, "compression_ratio": 1.6163793103448276, "no_speech_prob": 0.000519273045938462}, {"id": 804, "seek": 241600, "start": 2420.2, "end": 2423.96, "text": " and ensuring it's positive and re-prompting him or her if and only", "tokens": [50574, 293, 16882, 309, 311, 3353, 293, 319, 12, 28722, 662, 278, 796, 420, 720, 498, 293, 787, 50762], "temperature": 0.0, "avg_logprob": -0.24510860443115234, "compression_ratio": 1.6163793103448276, "no_speech_prob": 0.000519273045938462}, {"id": 805, "seek": 241600, "start": 2423.96, "end": 2424.64, "text": " if it's not?", "tokens": [50762, 498, 309, 311, 406, 30, 50796], "temperature": 0.0, "avg_logprob": -0.24510860443115234, "compression_ratio": 1.6163793103448276, "no_speech_prob": 0.000519273045938462}, {"id": 806, "seek": 241600, "start": 2427.56, "end": 2428.2, "text": " Put another way.", "tokens": [50942, 4935, 1071, 636, 13, 50974], "temperature": 0.0, "avg_logprob": -0.24510860443115234, "compression_ratio": 1.6163793103448276, "no_speech_prob": 0.000519273045938462}, {"id": 807, "seek": 241600, "start": 2428.2, "end": 2432.56, "text": " How would you do this in C if we took away from you the do while construct?", "tokens": [50974, 1012, 576, 291, 360, 341, 294, 383, 498, 321, 1890, 1314, 490, 291, 264, 360, 1339, 7690, 30, 51192], "temperature": 0.0, "avg_logprob": -0.24510860443115234, "compression_ratio": 1.6163793103448276, "no_speech_prob": 0.000519273045938462}, {"id": 808, "seek": 241600, "start": 2436.72, "end": 2437.88, "text": " Exclamation points?", "tokens": [51400, 2111, 41411, 2793, 30, 51458], "temperature": 0.0, "avg_logprob": -0.24510860443115234, "compression_ratio": 1.6163793103448276, "no_speech_prob": 0.000519273045938462}, {"id": 809, "seek": 241600, "start": 2437.88, "end": 2442.2, "text": " OK, so we could invert something maybe using that logically.", "tokens": [51458, 2264, 11, 370, 321, 727, 33966, 746, 1310, 1228, 300, 38887, 13, 51674], "temperature": 0.0, "avg_logprob": -0.24510860443115234, "compression_ratio": 1.6163793103448276, "no_speech_prob": 0.000519273045938462}, {"id": 810, "seek": 241600, "start": 2442.2, "end": 2443.4, "text": " We could just do a while loop.", "tokens": [51674, 492, 727, 445, 360, 257, 1339, 6367, 13, 51734], "temperature": 0.0, "avg_logprob": -0.24510860443115234, "compression_ratio": 1.6163793103448276, "no_speech_prob": 0.000519273045938462}, {"id": 811, "seek": 241600, "start": 2443.4, "end": 2445.28, "text": " We could just use a while loop, how?", "tokens": [51734, 492, 727, 445, 764, 257, 1339, 6367, 11, 577, 30, 51828], "temperature": 0.0, "avg_logprob": -0.24510860443115234, "compression_ratio": 1.6163793103448276, "no_speech_prob": 0.000519273045938462}, {"id": 812, "seek": 244528, "start": 2446.0, "end": 2450.96, "text": " So while prompt is less than 1.", "tokens": [50400, 407, 1339, 12391, 307, 1570, 813, 502, 13, 50648], "temperature": 0.0, "avg_logprob": -0.2425510435176075, "compression_ratio": 1.7306122448979593, "no_speech_prob": 8.219831215683371e-05}, {"id": 813, "seek": 244528, "start": 2450.96, "end": 2455.28, "text": " So while prompt is OK, so the prompt is the string we're going to input.", "tokens": [50648, 407, 1339, 12391, 307, 2264, 11, 370, 264, 12391, 307, 264, 6798, 321, 434, 516, 281, 4846, 13, 50864], "temperature": 0.0, "avg_logprob": -0.2425510435176075, "compression_ratio": 1.7306122448979593, "no_speech_prob": 8.219831215683371e-05}, {"id": 814, "seek": 244528, "start": 2455.28, "end": 2457.0400000000004, "text": " We're going to pass display to the user.", "tokens": [50864, 492, 434, 516, 281, 1320, 4674, 281, 264, 4195, 13, 50952], "temperature": 0.0, "avg_logprob": -0.2425510435176075, "compression_ratio": 1.7306122448979593, "no_speech_prob": 8.219831215683371e-05}, {"id": 815, "seek": 244528, "start": 2457.0400000000004, "end": 2459.52, "text": " So it's not prompt, I think.", "tokens": [50952, 407, 309, 311, 406, 12391, 11, 286, 519, 13, 51076], "temperature": 0.0, "avg_logprob": -0.2425510435176075, "compression_ratio": 1.7306122448979593, "no_speech_prob": 8.219831215683371e-05}, {"id": 816, "seek": 244528, "start": 2459.52, "end": 2464.2000000000003, "text": " So maybe i or n to be consistent with the other side.", "tokens": [51076, 407, 1310, 741, 420, 297, 281, 312, 8398, 365, 264, 661, 1252, 13, 51310], "temperature": 0.0, "avg_logprob": -0.2425510435176075, "compression_ratio": 1.7306122448979593, "no_speech_prob": 8.219831215683371e-05}, {"id": 817, "seek": 244528, "start": 2464.2000000000003, "end": 2466.44, "text": " So you know what, why don't I, what about this?", "tokens": [51310, 407, 291, 458, 437, 11, 983, 500, 380, 286, 11, 437, 466, 341, 30, 51422], "temperature": 0.0, "avg_logprob": -0.2425510435176075, "compression_ratio": 1.7306122448979593, "no_speech_prob": 8.219831215683371e-05}, {"id": 818, "seek": 244528, "start": 2466.44, "end": 2468.7200000000003, "text": " What if I just do, you know what, I know I need a loop.", "tokens": [51422, 708, 498, 286, 445, 360, 11, 291, 458, 437, 11, 286, 458, 286, 643, 257, 6367, 13, 51536], "temperature": 0.0, "avg_logprob": -0.2425510435176075, "compression_ratio": 1.7306122448979593, "no_speech_prob": 8.219831215683371e-05}, {"id": 819, "seek": 244528, "start": 2468.7200000000003, "end": 2471.6400000000003, "text": " This is by far the easiest way to just get a loop, right?", "tokens": [51536, 639, 307, 538, 1400, 264, 12889, 636, 281, 445, 483, 257, 6367, 11, 558, 30, 51682], "temperature": 0.0, "avg_logprob": -0.2425510435176075, "compression_ratio": 1.7306122448979593, "no_speech_prob": 8.219831215683371e-05}, {"id": 820, "seek": 244528, "start": 2471.6400000000003, "end": 2473.36, "text": " It's infinite, which is not good.", "tokens": [51682, 467, 311, 13785, 11, 597, 307, 406, 665, 13, 51768], "temperature": 0.0, "avg_logprob": -0.2425510435176075, "compression_ratio": 1.7306122448979593, "no_speech_prob": 8.219831215683371e-05}, {"id": 821, "seek": 247336, "start": 2473.36, "end": 2475.48, "text": " But I can't break out of loops, recall.", "tokens": [50364, 583, 286, 393, 380, 1821, 484, 295, 16121, 11, 9901, 13, 50470], "temperature": 0.0, "avg_logprob": -0.20974131497469814, "compression_ratio": 1.6502242152466369, "no_speech_prob": 0.00039202539483085275}, {"id": 822, "seek": 247336, "start": 2475.48, "end": 2477.7200000000003, "text": " So what if I do something like this?", "tokens": [50470, 407, 437, 498, 286, 360, 746, 411, 341, 30, 50582], "temperature": 0.0, "avg_logprob": -0.20974131497469814, "compression_ratio": 1.6502242152466369, "no_speech_prob": 0.00039202539483085275}, {"id": 823, "seek": 247336, "start": 2477.7200000000003, "end": 2482.84, "text": " What if I do n get int passing in the same prompt?", "tokens": [50582, 708, 498, 286, 360, 297, 483, 560, 8437, 294, 264, 912, 12391, 30, 50838], "temperature": 0.0, "avg_logprob": -0.20974131497469814, "compression_ratio": 1.6502242152466369, "no_speech_prob": 0.00039202539483085275}, {"id": 824, "seek": 247336, "start": 2482.84, "end": 2485.2000000000003, "text": " And then what do I want to do next?", "tokens": [50838, 400, 550, 437, 360, 286, 528, 281, 360, 958, 30, 50956], "temperature": 0.0, "avg_logprob": -0.20974131497469814, "compression_ratio": 1.6502242152466369, "no_speech_prob": 0.00039202539483085275}, {"id": 825, "seek": 247336, "start": 2485.2000000000003, "end": 2487.7200000000003, "text": " I'm inside of an infinite loop, so this is going to keep happening,", "tokens": [50956, 286, 478, 1854, 295, 364, 13785, 6367, 11, 370, 341, 307, 516, 281, 1066, 2737, 11, 51082], "temperature": 0.0, "avg_logprob": -0.20974131497469814, "compression_ratio": 1.6502242152466369, "no_speech_prob": 0.00039202539483085275}, {"id": 826, "seek": 247336, "start": 2487.7200000000003, "end": 2495.36, "text": " keep happening, keep happening until is positive.", "tokens": [51082, 1066, 2737, 11, 1066, 2737, 1826, 307, 3353, 13, 51464], "temperature": 0.0, "avg_logprob": -0.20974131497469814, "compression_ratio": 1.6502242152466369, "no_speech_prob": 0.00039202539483085275}, {"id": 827, "seek": 247336, "start": 2495.36, "end": 2497.1600000000003, "text": " So Python's not quite that user friendly.", "tokens": [51464, 407, 15329, 311, 406, 1596, 300, 4195, 9208, 13, 51554], "temperature": 0.0, "avg_logprob": -0.20974131497469814, "compression_ratio": 1.6502242152466369, "no_speech_prob": 0.00039202539483085275}, {"id": 828, "seek": 247336, "start": 2497.1600000000003, "end": 2499.08, "text": " We can't just say that.", "tokens": [51554, 492, 393, 380, 445, 584, 300, 13, 51650], "temperature": 0.0, "avg_logprob": -0.20974131497469814, "compression_ratio": 1.6502242152466369, "no_speech_prob": 0.00039202539483085275}, {"id": 829, "seek": 247336, "start": 2499.08, "end": 2502.28, "text": " But we can say what?", "tokens": [51650, 583, 321, 393, 584, 437, 30, 51810], "temperature": 0.0, "avg_logprob": -0.20974131497469814, "compression_ratio": 1.6502242152466369, "no_speech_prob": 0.00039202539483085275}, {"id": 830, "seek": 250228, "start": 2502.28, "end": 2505.7200000000003, "text": " Greater than, close.", "tokens": [50364, 38410, 813, 11, 1998, 13, 50536], "temperature": 0.0, "avg_logprob": -0.20079724853103226, "compression_ratio": 1.632398753894081, "no_speech_prob": 0.001324930926784873}, {"id": 831, "seek": 250228, "start": 2505.7200000000003, "end": 2506.6800000000003, "text": " Well, OK, that's fine.", "tokens": [50536, 1042, 11, 2264, 11, 300, 311, 2489, 13, 50584], "temperature": 0.0, "avg_logprob": -0.20079724853103226, "compression_ratio": 1.632398753894081, "no_speech_prob": 0.001324930926784873}, {"id": 832, "seek": 250228, "start": 2506.6800000000003, "end": 2508.5600000000004, "text": " Greater than or equal to 1.", "tokens": [50584, 38410, 813, 420, 2681, 281, 502, 13, 50678], "temperature": 0.0, "avg_logprob": -0.20079724853103226, "compression_ratio": 1.632398753894081, "no_speech_prob": 0.001324930926784873}, {"id": 833, "seek": 250228, "start": 2508.5600000000004, "end": 2510.1200000000003, "text": " Then what do we want to do?", "tokens": [50678, 1396, 437, 360, 321, 528, 281, 360, 30, 50756], "temperature": 0.0, "avg_logprob": -0.20079724853103226, "compression_ratio": 1.632398753894081, "no_speech_prob": 0.001324930926784873}, {"id": 834, "seek": 250228, "start": 2510.1200000000003, "end": 2510.88, "text": " Great.", "tokens": [50756, 3769, 13, 50794], "temperature": 0.0, "avg_logprob": -0.20079724853103226, "compression_ratio": 1.632398753894081, "no_speech_prob": 0.001324930926784873}, {"id": 835, "seek": 250228, "start": 2510.88, "end": 2514.2400000000002, "text": " So it's not quite as cool as like a do while loop, which kind of gives us", "tokens": [50794, 407, 309, 311, 406, 1596, 382, 1627, 382, 411, 257, 360, 1339, 6367, 11, 597, 733, 295, 2709, 505, 50962], "temperature": 0.0, "avg_logprob": -0.20079724853103226, "compression_ratio": 1.632398753894081, "no_speech_prob": 0.001324930926784873}, {"id": 836, "seek": 250228, "start": 2514.2400000000002, "end": 2516.8, "text": " all these features, though frankly, this was never that pretty, right?", "tokens": [50962, 439, 613, 4122, 11, 1673, 11939, 11, 341, 390, 1128, 300, 1238, 11, 558, 30, 51090], "temperature": 0.0, "avg_logprob": -0.20079724853103226, "compression_ratio": 1.632398753894081, "no_speech_prob": 0.001324930926784873}, {"id": 837, "seek": 250228, "start": 2516.8, "end": 2519.0800000000004, "text": " Especially the fact that you had to deal with the issue of scope", "tokens": [51090, 8545, 264, 1186, 300, 291, 632, 281, 2028, 365, 264, 2734, 295, 11923, 51204], "temperature": 0.0, "avg_logprob": -0.20079724853103226, "compression_ratio": 1.632398753894081, "no_speech_prob": 0.001324930926784873}, {"id": 838, "seek": 250228, "start": 2519.0800000000004, "end": 2520.5600000000004, "text": " by putting the variable outside.", "tokens": [51204, 538, 3372, 264, 7006, 2380, 13, 51278], "temperature": 0.0, "avg_logprob": -0.20079724853103226, "compression_ratio": 1.632398753894081, "no_speech_prob": 0.001324930926784873}, {"id": 839, "seek": 250228, "start": 2520.5600000000004, "end": 2523.6000000000004, "text": " So in Python, the right way to do this would be something like this.", "tokens": [51278, 407, 294, 15329, 11, 264, 558, 636, 281, 360, 341, 576, 312, 746, 411, 341, 13, 51430], "temperature": 0.0, "avg_logprob": -0.20079724853103226, "compression_ratio": 1.632398753894081, "no_speech_prob": 0.001324930926784873}, {"id": 840, "seek": 250228, "start": 2523.6000000000004, "end": 2526.2000000000003, "text": " Just induce an infinite loop, but make sure you break out of it", "tokens": [51430, 1449, 41263, 364, 13785, 6367, 11, 457, 652, 988, 291, 1821, 484, 295, 309, 51560], "temperature": 0.0, "avg_logprob": -0.20079724853103226, "compression_ratio": 1.632398753894081, "no_speech_prob": 0.001324930926784873}, {"id": 841, "seek": 250228, "start": 2526.2000000000003, "end": 2529.2000000000003, "text": " logically when it's appropriate to do so.", "tokens": [51560, 38887, 562, 309, 311, 6854, 281, 360, 370, 13, 51710], "temperature": 0.0, "avg_logprob": -0.20079724853103226, "compression_ratio": 1.632398753894081, "no_speech_prob": 0.001324930926784873}, {"id": 842, "seek": 252920, "start": 2529.2, "end": 2533.64, "text": " And so now, if I go ahead and add in that last thing that I keep needing,", "tokens": [50364, 400, 370, 586, 11, 498, 286, 352, 2286, 293, 909, 294, 300, 1036, 551, 300, 286, 1066, 18006, 11, 50586], "temperature": 0.0, "avg_logprob": -0.2081062688236743, "compression_ratio": 1.705607476635514, "no_speech_prob": 0.004609173629432917}, {"id": 843, "seek": 252920, "start": 2533.64, "end": 2540.04, "text": " so if name equals main, and it's always fine to copy, paste something like that,", "tokens": [50586, 370, 498, 1315, 6915, 2135, 11, 293, 309, 311, 1009, 2489, 281, 5055, 11, 9163, 746, 411, 300, 11, 50906], "temperature": 0.0, "avg_logprob": -0.2081062688236743, "compression_ratio": 1.705607476635514, "no_speech_prob": 0.004609173629432917}, {"id": 844, "seek": 252920, "start": 2540.04, "end": 2543.7999999999997, "text": " a call main, let me go ahead now, and in my terminal window,", "tokens": [50906, 257, 818, 2135, 11, 718, 385, 352, 2286, 586, 11, 293, 294, 452, 14709, 4910, 11, 51094], "temperature": 0.0, "avg_logprob": -0.2081062688236743, "compression_ratio": 1.705607476635514, "no_speech_prob": 0.004609173629432917}, {"id": 845, "seek": 252920, "start": 2543.7999999999997, "end": 2547.16, "text": " run Python of positive dot pi.", "tokens": [51094, 1190, 15329, 295, 3353, 5893, 3895, 13, 51262], "temperature": 0.0, "avg_logprob": -0.2081062688236743, "compression_ratio": 1.705607476635514, "no_speech_prob": 0.004609173629432917}, {"id": 846, "seek": 252920, "start": 2547.16, "end": 2549.52, "text": " And let me go ahead and give it negative 5.", "tokens": [51262, 400, 718, 385, 352, 2286, 293, 976, 309, 3671, 1025, 13, 51380], "temperature": 0.0, "avg_logprob": -0.2081062688236743, "compression_ratio": 1.705607476635514, "no_speech_prob": 0.004609173629432917}, {"id": 847, "seek": 252920, "start": 2549.52, "end": 2551.24, "text": " How about negative 1?", "tokens": [51380, 1012, 466, 3671, 502, 30, 51466], "temperature": 0.0, "avg_logprob": -0.2081062688236743, "compression_ratio": 1.705607476635514, "no_speech_prob": 0.004609173629432917}, {"id": 848, "seek": 252920, "start": 2551.24, "end": 2552.68, "text": " How about 0?", "tokens": [51466, 1012, 466, 1958, 30, 51538], "temperature": 0.0, "avg_logprob": -0.2081062688236743, "compression_ratio": 1.705607476635514, "no_speech_prob": 0.004609173629432917}, {"id": 849, "seek": 252920, "start": 2552.68, "end": 2553.56, "text": " Whoops, how about that?", "tokens": [51538, 45263, 11, 577, 466, 300, 30, 51582], "temperature": 0.0, "avg_logprob": -0.2081062688236743, "compression_ratio": 1.705607476635514, "no_speech_prob": 0.004609173629432917}, {"id": 850, "seek": 252920, "start": 2553.56, "end": 2555.04, "text": " How about 0, 1?", "tokens": [51582, 1012, 466, 1958, 11, 502, 30, 51656], "temperature": 0.0, "avg_logprob": -0.2081062688236743, "compression_ratio": 1.705607476635514, "no_speech_prob": 0.004609173629432917}, {"id": 851, "seek": 255504, "start": 2556.04, "end": 2558.56, "text": " Hm.", "tokens": [50414, 17989, 13, 50540], "temperature": 0.0, "avg_logprob": -0.18645160404715952, "compression_ratio": 1.5894736842105264, "no_speech_prob": 0.0013249412877485156}, {"id": 852, "seek": 255504, "start": 2558.56, "end": 2560.52, "text": " I screwed up.", "tokens": [50540, 286, 20331, 493, 13, 50638], "temperature": 0.0, "avg_logprob": -0.18645160404715952, "compression_ratio": 1.5894736842105264, "no_speech_prob": 0.0013249412877485156}, {"id": 853, "seek": 255504, "start": 2560.52, "end": 2561.56, "text": " None is interesting.", "tokens": [50638, 14492, 307, 1880, 13, 50690], "temperature": 0.0, "avg_logprob": -0.18645160404715952, "compression_ratio": 1.5894736842105264, "no_speech_prob": 0.0013249412877485156}, {"id": 854, "seek": 255504, "start": 2561.56, "end": 2563.44, "text": " It's kind of our new null, so to speak.", "tokens": [50690, 467, 311, 733, 295, 527, 777, 18184, 11, 370, 281, 1710, 13, 50784], "temperature": 0.0, "avg_logprob": -0.18645160404715952, "compression_ratio": 1.5894736842105264, "no_speech_prob": 0.0013249412877485156}, {"id": 855, "seek": 255504, "start": 2563.44, "end": 2566.72, "text": " But whereas in C, null can potentially, if used in the wrong way,", "tokens": [50784, 583, 9735, 294, 383, 11, 18184, 393, 7263, 11, 498, 1143, 294, 264, 2085, 636, 11, 50948], "temperature": 0.0, "avg_logprob": -0.18645160404715952, "compression_ratio": 1.5894736842105264, "no_speech_prob": 0.0013249412877485156}, {"id": 856, "seek": 255504, "start": 2566.72, "end": 2570.52, "text": " crash your program, Python might just print it, apparently.", "tokens": [50948, 8252, 428, 1461, 11, 15329, 1062, 445, 4482, 309, 11, 7970, 13, 51138], "temperature": 0.0, "avg_logprob": -0.18645160404715952, "compression_ratio": 1.5894736842105264, "no_speech_prob": 0.0013249412877485156}, {"id": 857, "seek": 255504, "start": 2570.52, "end": 2573.2799999999997, "text": " Where did I screw up?", "tokens": [51138, 2305, 630, 286, 5630, 493, 30, 51276], "temperature": 0.0, "avg_logprob": -0.18645160404715952, "compression_ratio": 1.5894736842105264, "no_speech_prob": 0.0013249412877485156}, {"id": 858, "seek": 255504, "start": 2573.2799999999997, "end": 2575.48, "text": " Yeah, so I didn't return an actual value.", "tokens": [51276, 865, 11, 370, 286, 994, 380, 2736, 364, 3539, 2158, 13, 51386], "temperature": 0.0, "avg_logprob": -0.18645160404715952, "compression_ratio": 1.5894736842105264, "no_speech_prob": 0.0013249412877485156}, {"id": 859, "seek": 255504, "start": 2575.48, "end": 2577.52, "text": " And whereas Clang might have noticed something like this,", "tokens": [51386, 400, 9735, 2033, 656, 1062, 362, 5694, 746, 411, 341, 11, 51488], "temperature": 0.0, "avg_logprob": -0.18645160404715952, "compression_ratio": 1.5894736842105264, "no_speech_prob": 0.0013249412877485156}, {"id": 860, "seek": 255504, "start": 2577.52, "end": 2580.64, "text": " Python the interpreter is not going to be as sort of vigilant when", "tokens": [51488, 15329, 264, 34132, 307, 406, 516, 281, 312, 382, 1333, 295, 45737, 562, 51644], "temperature": 0.0, "avg_logprob": -0.18645160404715952, "compression_ratio": 1.5894736842105264, "no_speech_prob": 0.0013249412877485156}, {"id": 861, "seek": 255504, "start": 2580.64, "end": 2582.96, "text": " it comes to figuring out if your code is missing something.", "tokens": [51644, 309, 1487, 281, 15213, 484, 498, 428, 3089, 307, 5361, 746, 13, 51760], "temperature": 0.0, "avg_logprob": -0.18645160404715952, "compression_ratio": 1.5894736842105264, "no_speech_prob": 0.0013249412877485156}, {"id": 862, "seek": 258296, "start": 2582.96, "end": 2585.64, "text": " Because after all, we never said we were going to return anything,", "tokens": [50364, 1436, 934, 439, 11, 321, 1128, 848, 321, 645, 516, 281, 2736, 1340, 11, 50498], "temperature": 0.0, "avg_logprob": -0.1132829984029134, "compression_ratio": 1.6602316602316602, "no_speech_prob": 0.0028007575310766697}, {"id": 863, "seek": 258296, "start": 2585.64, "end": 2587.36, "text": " and so we don't strictly need to.", "tokens": [50498, 293, 370, 321, 500, 380, 20792, 643, 281, 13, 50584], "temperature": 0.0, "avg_logprob": -0.1132829984029134, "compression_ratio": 1.6602316602316602, "no_speech_prob": 0.0028007575310766697}, {"id": 864, "seek": 258296, "start": 2587.36, "end": 2592.2, "text": " So what could I instead do here instead of break?", "tokens": [50584, 407, 437, 727, 286, 2602, 360, 510, 2602, 295, 1821, 30, 50826], "temperature": 0.0, "avg_logprob": -0.1132829984029134, "compression_ratio": 1.6602316602316602, "no_speech_prob": 0.0028007575310766697}, {"id": 865, "seek": 258296, "start": 2592.2, "end": 2597.08, "text": " I could just return n here, or I could equivalently do this,", "tokens": [50826, 286, 727, 445, 2736, 297, 510, 11, 420, 286, 727, 9052, 2276, 360, 341, 11, 51070], "temperature": 0.0, "avg_logprob": -0.1132829984029134, "compression_ratio": 1.6602316602316602, "no_speech_prob": 0.0028007575310766697}, {"id": 866, "seek": 258296, "start": 2597.08, "end": 2599.56, "text": " and then just make sure I return n here.", "tokens": [51070, 293, 550, 445, 652, 988, 286, 2736, 297, 510, 13, 51194], "temperature": 0.0, "avg_logprob": -0.1132829984029134, "compression_ratio": 1.6602316602316602, "no_speech_prob": 0.0028007575310766697}, {"id": 867, "seek": 258296, "start": 2599.56, "end": 2602.92, "text": " And another difference in Python, too, is that the issue of scope", "tokens": [51194, 400, 1071, 2649, 294, 15329, 11, 886, 11, 307, 300, 264, 2734, 295, 11923, 51362], "temperature": 0.0, "avg_logprob": -0.1132829984029134, "compression_ratio": 1.6602316602316602, "no_speech_prob": 0.0028007575310766697}, {"id": 868, "seek": 258296, "start": 2602.92, "end": 2606.76, "text": " isn't quite as difficult as it was in C.", "tokens": [51362, 1943, 380, 1596, 382, 2252, 382, 309, 390, 294, 383, 13, 51554], "temperature": 0.0, "avg_logprob": -0.1132829984029134, "compression_ratio": 1.6602316602316602, "no_speech_prob": 0.0028007575310766697}, {"id": 869, "seek": 258296, "start": 2606.76, "end": 2612.0, "text": " As soon as I've declared n to exist up here, it now exists down below.", "tokens": [51554, 1018, 2321, 382, 286, 600, 15489, 297, 281, 2514, 493, 510, 11, 309, 586, 8198, 760, 2507, 13, 51816], "temperature": 0.0, "avg_logprob": -0.1132829984029134, "compression_ratio": 1.6602316602316602, "no_speech_prob": 0.0028007575310766697}, {"id": 870, "seek": 261200, "start": 2612.04, "end": 2615.04, "text": " So even though it was declared inside of this indentation,", "tokens": [50366, 407, 754, 1673, 309, 390, 15489, 1854, 295, 341, 44494, 399, 11, 50516], "temperature": 0.0, "avg_logprob": -0.20989065376117075, "compression_ratio": 1.5771812080536913, "no_speech_prob": 0.00034597920603118837}, {"id": 871, "seek": 261200, "start": 2615.04, "end": 2618.24, "text": " it is not scoped to that while loop alone.", "tokens": [50516, 309, 307, 406, 795, 27277, 281, 300, 1339, 6367, 3312, 13, 50676], "temperature": 0.0, "avg_logprob": -0.20989065376117075, "compression_ratio": 1.5771812080536913, "no_speech_prob": 0.00034597920603118837}, {"id": 872, "seek": 261200, "start": 2618.24, "end": 2621.88, "text": " So either way, could we actually make this work?", "tokens": [50676, 407, 2139, 636, 11, 727, 321, 767, 652, 341, 589, 30, 50858], "temperature": 0.0, "avg_logprob": -0.20989065376117075, "compression_ratio": 1.5771812080536913, "no_speech_prob": 0.00034597920603118837}, {"id": 873, "seek": 261200, "start": 2621.88, "end": 2624.6, "text": " OK, so now let's try to run this again.", "tokens": [50858, 2264, 11, 370, 586, 718, 311, 853, 281, 1190, 341, 797, 13, 50994], "temperature": 0.0, "avg_logprob": -0.20989065376117075, "compression_ratio": 1.5771812080536913, "no_speech_prob": 0.00034597920603118837}, {"id": 874, "seek": 261200, "start": 2624.6, "end": 2627.72, "text": " Positive integer, negative 1, 0, 1.", "tokens": [50994, 46326, 24922, 11, 3671, 502, 11, 1958, 11, 502, 13, 51150], "temperature": 0.0, "avg_logprob": -0.20989065376117075, "compression_ratio": 1.5771812080536913, "no_speech_prob": 0.00034597920603118837}, {"id": 875, "seek": 261200, "start": 2627.72, "end": 2629.44, "text": " And now we're actually seeing the number 1.", "tokens": [51150, 400, 586, 321, 434, 767, 2577, 264, 1230, 502, 13, 51236], "temperature": 0.0, "avg_logprob": -0.20989065376117075, "compression_ratio": 1.5771812080536913, "no_speech_prob": 0.00034597920603118837}, {"id": 876, "seek": 261200, "start": 2629.44, "end": 2631.16, "text": " All right, let me pause here for just a moment", "tokens": [51236, 1057, 558, 11, 718, 385, 10465, 510, 337, 445, 257, 1623, 51322], "temperature": 0.0, "avg_logprob": -0.20989065376117075, "compression_ratio": 1.5771812080536913, "no_speech_prob": 0.00034597920603118837}, {"id": 877, "seek": 261200, "start": 2631.16, "end": 2633.88, "text": " and see if there's any questions.", "tokens": [51322, 293, 536, 498, 456, 311, 604, 1651, 13, 51458], "temperature": 0.0, "avg_logprob": -0.20989065376117075, "compression_ratio": 1.5771812080536913, "no_speech_prob": 0.00034597920603118837}, {"id": 878, "seek": 261200, "start": 2633.88, "end": 2634.56, "text": " No?", "tokens": [51458, 883, 30, 51492], "temperature": 0.0, "avg_logprob": -0.20989065376117075, "compression_ratio": 1.5771812080536913, "no_speech_prob": 0.00034597920603118837}, {"id": 879, "seek": 261200, "start": 2634.56, "end": 2635.06, "text": " Yes?", "tokens": [51492, 1079, 30, 51517], "temperature": 0.0, "avg_logprob": -0.20989065376117075, "compression_ratio": 1.5771812080536913, "no_speech_prob": 0.00034597920603118837}, {"id": 880, "seek": 261200, "start": 2635.06, "end": 2639.2, "text": " Do you have to call the thing you can see at the library individually,", "tokens": [51517, 1144, 291, 362, 281, 818, 264, 551, 291, 393, 536, 412, 264, 6405, 16652, 11, 51724], "temperature": 0.0, "avg_logprob": -0.20989065376117075, "compression_ratio": 1.5771812080536913, "no_speech_prob": 0.00034597920603118837}, {"id": 881, "seek": 261200, "start": 2639.2, "end": 2641.2, "text": " or can you just import the entire one?", "tokens": [51724, 420, 393, 291, 445, 974, 264, 2302, 472, 30, 51824], "temperature": 0.0, "avg_logprob": -0.20989065376117075, "compression_ratio": 1.5771812080536913, "no_speech_prob": 0.00034597920603118837}, {"id": 882, "seek": 264120, "start": 2641.3999999999996, "end": 2644.08, "text": " You have to call things inside of the CS50 library individually,", "tokens": [50374, 509, 362, 281, 818, 721, 1854, 295, 264, 9460, 2803, 6405, 16652, 11, 50508], "temperature": 0.0, "avg_logprob": -0.14030043052060762, "compression_ratio": 1.7476635514018692, "no_speech_prob": 0.0013249146286398172}, {"id": 883, "seek": 264120, "start": 2644.08, "end": 2646.08, "text": " or can you import the whole thing?", "tokens": [50508, 420, 393, 291, 974, 264, 1379, 551, 30, 50608], "temperature": 0.0, "avg_logprob": -0.14030043052060762, "compression_ratio": 1.7476635514018692, "no_speech_prob": 0.0013249146286398172}, {"id": 884, "seek": 264120, "start": 2646.08, "end": 2648.64, "text": " You can technically import the whole thing as follows.", "tokens": [50608, 509, 393, 12120, 974, 264, 1379, 551, 382, 10002, 13, 50736], "temperature": 0.0, "avg_logprob": -0.14030043052060762, "compression_ratio": 1.7476635514018692, "no_speech_prob": 0.0013249146286398172}, {"id": 885, "seek": 264120, "start": 2648.64, "end": 2651.2, "text": " If you want access to everything in the CS50 library,", "tokens": [50736, 759, 291, 528, 2105, 281, 1203, 294, 264, 9460, 2803, 6405, 11, 50864], "temperature": 0.0, "avg_logprob": -0.14030043052060762, "compression_ratio": 1.7476635514018692, "no_speech_prob": 0.0013249146286398172}, {"id": 886, "seek": 264120, "start": 2651.2, "end": 2652.52, "text": " you can literally say star.", "tokens": [50864, 291, 393, 3736, 584, 3543, 13, 50930], "temperature": 0.0, "avg_logprob": -0.14030043052060762, "compression_ratio": 1.7476635514018692, "no_speech_prob": 0.0013249146286398172}, {"id": 887, "seek": 264120, "start": 2652.52, "end": 2655.8799999999997, "text": " And in star in programming, well, in many computer contexts,", "tokens": [50930, 400, 294, 3543, 294, 9410, 11, 731, 11, 294, 867, 3820, 30628, 11, 51098], "temperature": 0.0, "avg_logprob": -0.14030043052060762, "compression_ratio": 1.7476635514018692, "no_speech_prob": 0.0013249146286398172}, {"id": 888, "seek": 264120, "start": 2655.8799999999997, "end": 2657.8399999999997, "text": " star generally is a wild card character,", "tokens": [51098, 3543, 5101, 307, 257, 4868, 2920, 2517, 11, 51196], "temperature": 0.0, "avg_logprob": -0.14030043052060762, "compression_ratio": 1.7476635514018692, "no_speech_prob": 0.0013249146286398172}, {"id": 889, "seek": 264120, "start": 2657.8399999999997, "end": 2661.64, "text": " and it means anything that matches this string here.", "tokens": [51196, 293, 309, 1355, 1340, 300, 10676, 341, 6798, 510, 13, 51386], "temperature": 0.0, "avg_logprob": -0.14030043052060762, "compression_ratio": 1.7476635514018692, "no_speech_prob": 0.0013249146286398172}, {"id": 890, "seek": 264120, "start": 2661.64, "end": 2663.52, "text": " This is generally considered bad practice, though,", "tokens": [51386, 639, 307, 5101, 4888, 1578, 3124, 11, 1673, 11, 51480], "temperature": 0.0, "avg_logprob": -0.14030043052060762, "compression_ratio": 1.7476635514018692, "no_speech_prob": 0.0013249146286398172}, {"id": 891, "seek": 264120, "start": 2663.52, "end": 2668.12, "text": " because if CS50's staff happens to give you functionality or variables", "tokens": [51480, 570, 498, 9460, 2803, 311, 3525, 2314, 281, 976, 291, 14980, 420, 9102, 51710], "temperature": 0.0, "avg_logprob": -0.14030043052060762, "compression_ratio": 1.7476635514018692, "no_speech_prob": 0.0013249146286398172}, {"id": 892, "seek": 264120, "start": 2668.12, "end": 2670.64, "text": " that you don't want, you have now just imported", "tokens": [51710, 300, 291, 500, 380, 528, 11, 291, 362, 586, 445, 25524, 51836], "temperature": 0.0, "avg_logprob": -0.14030043052060762, "compression_ratio": 1.7476635514018692, "no_speech_prob": 0.0013249146286398172}, {"id": 893, "seek": 267064, "start": 2670.64, "end": 2674.6, "text": " into your namespace, so to speak, all of those functions.", "tokens": [50364, 666, 428, 5288, 17940, 11, 370, 281, 1710, 11, 439, 295, 729, 6828, 13, 50562], "temperature": 0.0, "avg_logprob": -0.13063985109329224, "compression_ratio": 1.7293233082706767, "no_speech_prob": 0.004198343027383089}, {"id": 894, "seek": 267064, "start": 2674.6, "end": 2678.7599999999998, "text": " So for instance, if the CS50 library had public inside of it", "tokens": [50562, 407, 337, 5197, 11, 498, 264, 9460, 2803, 6405, 632, 1908, 1854, 295, 309, 50770], "temperature": 0.0, "avg_logprob": -0.13063985109329224, "compression_ratio": 1.7293233082706767, "no_speech_prob": 0.004198343027383089}, {"id": 895, "seek": 267064, "start": 2678.7599999999998, "end": 2682.8799999999997, "text": " a variable called x and y and z, in addition to functions", "tokens": [50770, 257, 7006, 1219, 2031, 293, 288, 293, 710, 11, 294, 4500, 281, 6828, 50976], "temperature": 0.0, "avg_logprob": -0.13063985109329224, "compression_ratio": 1.7293233082706767, "no_speech_prob": 0.004198343027383089}, {"id": 896, "seek": 267064, "start": 2682.8799999999997, "end": 2686.3199999999997, "text": " like getString and getInt and getChar, your program", "tokens": [50976, 411, 483, 4520, 2937, 293, 483, 25597, 293, 483, 25291, 11, 428, 1461, 51148], "temperature": 0.0, "avg_logprob": -0.13063985109329224, "compression_ratio": 1.7293233082706767, "no_speech_prob": 0.004198343027383089}, {"id": 897, "seek": 267064, "start": 2686.3199999999997, "end": 2688.8399999999997, "text": " is now seeing variables x and y and z.", "tokens": [51148, 307, 586, 2577, 9102, 2031, 293, 288, 293, 710, 13, 51274], "temperature": 0.0, "avg_logprob": -0.13063985109329224, "compression_ratio": 1.7293233082706767, "no_speech_prob": 0.004198343027383089}, {"id": 898, "seek": 267064, "start": 2688.8399999999997, "end": 2691.2, "text": " And if you have your own variables called x and y and z,", "tokens": [51274, 400, 498, 291, 362, 428, 1065, 9102, 1219, 2031, 293, 288, 293, 710, 11, 51392], "temperature": 0.0, "avg_logprob": -0.13063985109329224, "compression_ratio": 1.7293233082706767, "no_speech_prob": 0.004198343027383089}, {"id": 899, "seek": 267064, "start": 2691.2, "end": 2693.7999999999997, "text": " you're going to shadow those variables inside ours,", "tokens": [51392, 291, 434, 516, 281, 8576, 729, 9102, 1854, 11896, 11, 51522], "temperature": 0.0, "avg_logprob": -0.13063985109329224, "compression_ratio": 1.7293233082706767, "no_speech_prob": 0.004198343027383089}, {"id": 900, "seek": 267064, "start": 2693.7999999999997, "end": 2695.48, "text": " and it just gets messy quickly.", "tokens": [51522, 293, 309, 445, 2170, 16191, 2661, 13, 51606], "temperature": 0.0, "avg_logprob": -0.13063985109329224, "compression_ratio": 1.7293233082706767, "no_speech_prob": 0.004198343027383089}, {"id": 901, "seek": 267064, "start": 2695.48, "end": 2698.56, "text": " So generally, you want to be a little more nitpicky", "tokens": [51606, 407, 5101, 11, 291, 528, 281, 312, 257, 707, 544, 10900, 79, 20539, 51760], "temperature": 0.0, "avg_logprob": -0.13063985109329224, "compression_ratio": 1.7293233082706767, "no_speech_prob": 0.004198343027383089}, {"id": 902, "seek": 269856, "start": 2698.56, "end": 2702.92, "text": " and just import what you want, or another convention in Python", "tokens": [50364, 293, 445, 974, 437, 291, 528, 11, 420, 1071, 10286, 294, 15329, 50582], "temperature": 0.0, "avg_logprob": -0.12164393755105826, "compression_ratio": 1.591093117408907, "no_speech_prob": 0.0021825311705470085}, {"id": 903, "seek": 269856, "start": 2702.92, "end": 2708.84, "text": " is to not specify it like this, but instead to do import CS50.", "tokens": [50582, 307, 281, 406, 16500, 309, 411, 341, 11, 457, 2602, 281, 360, 974, 9460, 2803, 13, 50878], "temperature": 0.0, "avg_logprob": -0.12164393755105826, "compression_ratio": 1.591093117408907, "no_speech_prob": 0.0021825311705470085}, {"id": 904, "seek": 269856, "start": 2708.84, "end": 2712.84, "text": " This does not have the same effect of importing all of those keywords,", "tokens": [50878, 639, 775, 406, 362, 264, 912, 1802, 295, 43866, 439, 295, 729, 21009, 11, 51078], "temperature": 0.0, "avg_logprob": -0.12164393755105826, "compression_ratio": 1.591093117408907, "no_speech_prob": 0.0021825311705470085}, {"id": 905, "seek": 269856, "start": 2712.84, "end": 2716.64, "text": " like getInt and getString into your program's namespace,", "tokens": [51078, 411, 483, 25597, 293, 483, 4520, 2937, 666, 428, 1461, 311, 5288, 17940, 11, 51268], "temperature": 0.0, "avg_logprob": -0.12164393755105826, "compression_ratio": 1.591093117408907, "no_speech_prob": 0.0021825311705470085}, {"id": 906, "seek": 269856, "start": 2716.64, "end": 2719.84, "text": " like the list of symbols you can actually type in.", "tokens": [51268, 411, 264, 1329, 295, 16944, 291, 393, 767, 2010, 294, 13, 51428], "temperature": 0.0, "avg_logprob": -0.12164393755105826, "compression_ratio": 1.591093117408907, "no_speech_prob": 0.0021825311705470085}, {"id": 907, "seek": 269856, "start": 2719.84, "end": 2721.92, "text": " But what you then have to do is this.", "tokens": [51428, 583, 437, 291, 550, 362, 281, 360, 307, 341, 13, 51532], "temperature": 0.0, "avg_logprob": -0.12164393755105826, "compression_ratio": 1.591093117408907, "no_speech_prob": 0.0021825311705470085}, {"id": 908, "seek": 269856, "start": 2721.92, "end": 2726.16, "text": " You have to now prefix any usages of the functions", "tokens": [51532, 509, 362, 281, 586, 46969, 604, 505, 1660, 295, 264, 6828, 51744], "temperature": 0.0, "avg_logprob": -0.12164393755105826, "compression_ratio": 1.591093117408907, "no_speech_prob": 0.0021825311705470085}, {"id": 909, "seek": 272616, "start": 2726.16, "end": 2730.6, "text": " in that library with the now familiar or more familiar dot operator.", "tokens": [50364, 294, 300, 6405, 365, 264, 586, 4963, 420, 544, 4963, 5893, 12973, 13, 50586], "temperature": 0.0, "avg_logprob": -0.18485936251553622, "compression_ratio": 1.5752895752895753, "no_speech_prob": 0.00490473723039031}, {"id": 910, "seek": 272616, "start": 2730.6, "end": 2733.0, "text": " So this is just a stylistic decision now.", "tokens": [50586, 407, 341, 307, 445, 257, 23736, 3142, 3537, 586, 13, 50706], "temperature": 0.0, "avg_logprob": -0.18485936251553622, "compression_ratio": 1.5752895752895753, "no_speech_prob": 0.00490473723039031}, {"id": 911, "seek": 272616, "start": 2733.0, "end": 2735.3199999999997, "text": " I have consciously chosen the other approach", "tokens": [50706, 286, 362, 32538, 8614, 264, 661, 3109, 50822], "temperature": 0.0, "avg_logprob": -0.18485936251553622, "compression_ratio": 1.5752895752895753, "no_speech_prob": 0.00490473723039031}, {"id": 912, "seek": 272616, "start": 2735.3199999999997, "end": 2737.7599999999998, "text": " so that initially you can just call getInt, getString,", "tokens": [50822, 370, 300, 9105, 291, 393, 445, 818, 483, 25597, 11, 483, 4520, 2937, 11, 50944], "temperature": 0.0, "avg_logprob": -0.18485936251553622, "compression_ratio": 1.5752895752895753, "no_speech_prob": 0.00490473723039031}, {"id": 913, "seek": 272616, "start": 2737.7599999999998, "end": 2741.3199999999997, "text": " just like we did in C. But technically and probably more conventionally", "tokens": [50944, 445, 411, 321, 630, 294, 383, 13, 583, 12120, 293, 1391, 544, 10286, 379, 51122], "temperature": 0.0, "avg_logprob": -0.18485936251553622, "compression_ratio": 1.5752895752895753, "no_speech_prob": 0.00490473723039031}, {"id": 914, "seek": 272616, "start": 2741.3199999999997, "end": 2744.2, "text": " would people do this to make super clear this isn't my getInt method,", "tokens": [51122, 576, 561, 360, 341, 281, 652, 1687, 1850, 341, 1943, 380, 452, 483, 25597, 3170, 11, 51266], "temperature": 0.0, "avg_logprob": -0.18485936251553622, "compression_ratio": 1.5752895752895753, "no_speech_prob": 0.00490473723039031}, {"id": 915, "seek": 272616, "start": 2744.2, "end": 2748.2799999999997, "text": " it's CS50's getInt function.", "tokens": [51266, 309, 311, 9460, 2803, 311, 483, 25597, 2445, 13, 51470], "temperature": 0.0, "avg_logprob": -0.18485936251553622, "compression_ratio": 1.5752895752895753, "no_speech_prob": 0.00490473723039031}, {"id": 916, "seek": 272616, "start": 2748.2799999999997, "end": 2750.64, "text": " OK, other questions?", "tokens": [51470, 2264, 11, 661, 1651, 30, 51588], "temperature": 0.0, "avg_logprob": -0.18485936251553622, "compression_ratio": 1.5752895752895753, "no_speech_prob": 0.00490473723039031}, {"id": 917, "seek": 272616, "start": 2750.64, "end": 2751.24, "text": " Yeah?", "tokens": [51588, 865, 30, 51618], "temperature": 0.0, "avg_logprob": -0.18485936251553622, "compression_ratio": 1.5752895752895753, "no_speech_prob": 0.00490473723039031}, {"id": 918, "seek": 275124, "start": 2751.24, "end": 2756.7599999999998, "text": " Is it good coding practice to do the if underscore name or just because you", "tokens": [50364, 1119, 309, 665, 17720, 3124, 281, 360, 264, 498, 37556, 1315, 420, 445, 570, 291, 50640], "temperature": 0.0, "avg_logprob": -0.1685473995824014, "compression_ratio": 1.6070175438596492, "no_speech_prob": 0.0025507560931146145}, {"id": 919, "seek": 275124, "start": 2756.7599999999998, "end": 2759.24, "text": " can run Hello World without the defining main?", "tokens": [50640, 393, 1190, 2425, 3937, 1553, 264, 17827, 2135, 30, 50764], "temperature": 0.0, "avg_logprob": -0.1685473995824014, "compression_ratio": 1.6070175438596492, "no_speech_prob": 0.0025507560931146145}, {"id": 920, "seek": 275124, "start": 2759.24, "end": 2760.4799999999996, "text": " Do you really need to do like that?", "tokens": [50764, 1144, 291, 534, 643, 281, 360, 411, 300, 30, 50826], "temperature": 0.0, "avg_logprob": -0.1685473995824014, "compression_ratio": 1.6070175438596492, "no_speech_prob": 0.0025507560931146145}, {"id": 921, "seek": 275124, "start": 2760.4799999999996, "end": 2761.7599999999998, "text": " Oh, it's a good question.", "tokens": [50826, 876, 11, 309, 311, 257, 665, 1168, 13, 50890], "temperature": 0.0, "avg_logprob": -0.1685473995824014, "compression_ratio": 1.6070175438596492, "no_speech_prob": 0.0025507560931146145}, {"id": 922, "seek": 275124, "start": 2761.7599999999998, "end": 2763.12, "text": " Short answer, no.", "tokens": [50890, 16881, 1867, 11, 572, 13, 50958], "temperature": 0.0, "avg_logprob": -0.1685473995824014, "compression_ratio": 1.6070175438596492, "no_speech_prob": 0.0025507560931146145}, {"id": 923, "seek": 275124, "start": 2763.12, "end": 2765.72, "text": " So I'm showing you this way because you'll", "tokens": [50958, 407, 286, 478, 4099, 291, 341, 636, 570, 291, 603, 51088], "temperature": 0.0, "avg_logprob": -0.1685473995824014, "compression_ratio": 1.6070175438596492, "no_speech_prob": 0.0025507560931146145}, {"id": 924, "seek": 275124, "start": 2765.72, "end": 2768.68, "text": " see this in various examples online and in programs", "tokens": [51088, 536, 341, 294, 3683, 5110, 2950, 293, 294, 4268, 51236], "temperature": 0.0, "avg_logprob": -0.1685473995824014, "compression_ratio": 1.6070175438596492, "no_speech_prob": 0.0025507560931146145}, {"id": 925, "seek": 275124, "start": 2768.68, "end": 2771.3599999999997, "text": " that you might look at that are open source.", "tokens": [51236, 300, 291, 1062, 574, 412, 300, 366, 1269, 4009, 13, 51370], "temperature": 0.0, "avg_logprob": -0.1685473995824014, "compression_ratio": 1.6070175438596492, "no_speech_prob": 0.0025507560931146145}, {"id": 926, "seek": 275124, "start": 2771.3599999999997, "end": 2773.2799999999997, "text": " Strictly speaking, this is not necessary.", "tokens": [51370, 745, 3740, 356, 4124, 11, 341, 307, 406, 4818, 13, 51466], "temperature": 0.0, "avg_logprob": -0.1685473995824014, "compression_ratio": 1.6070175438596492, "no_speech_prob": 0.0025507560931146145}, {"id": 927, "seek": 275124, "start": 2773.2799999999997, "end": 2777.7599999999998, "text": " If you end up making your own library, this tends to be a useful feature.", "tokens": [51466, 759, 291, 917, 493, 1455, 428, 1065, 6405, 11, 341, 12258, 281, 312, 257, 4420, 4111, 13, 51690], "temperature": 0.0, "avg_logprob": -0.1685473995824014, "compression_ratio": 1.6070175438596492, "no_speech_prob": 0.0025507560931146145}, {"id": 928, "seek": 277776, "start": 2777.76, "end": 2783.6000000000004, "text": " But otherwise, I could equivalently do this, which is perfectly fine as well.", "tokens": [50364, 583, 5911, 11, 286, 727, 9052, 2276, 360, 341, 11, 597, 307, 6239, 2489, 382, 731, 13, 50656], "temperature": 0.0, "avg_logprob": -0.1343633793602305, "compression_ratio": 1.649805447470817, "no_speech_prob": 0.0006878170534037054}, {"id": 929, "seek": 277776, "start": 2783.6000000000004, "end": 2785.76, "text": " I can still define getPositiveInt.", "tokens": [50656, 286, 393, 920, 6964, 483, 47, 329, 2187, 25597, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1343633793602305, "compression_ratio": 1.649805447470817, "no_speech_prob": 0.0006878170534037054}, {"id": 930, "seek": 277776, "start": 2785.76, "end": 2788.1200000000003, "text": " I can get rid of main altogether.", "tokens": [50764, 286, 393, 483, 3973, 295, 2135, 19051, 13, 50882], "temperature": 0.0, "avg_logprob": -0.1343633793602305, "compression_ratio": 1.649805447470817, "no_speech_prob": 0.0006878170534037054}, {"id": 931, "seek": 277776, "start": 2788.1200000000003, "end": 2790.28, "text": " And I can just now do this.", "tokens": [50882, 400, 286, 393, 445, 586, 360, 341, 13, 50990], "temperature": 0.0, "avg_logprob": -0.1343633793602305, "compression_ratio": 1.649805447470817, "no_speech_prob": 0.0006878170534037054}, {"id": 932, "seek": 277776, "start": 2790.28, "end": 2794.48, "text": " So this program is equivalent and just as fine for now.", "tokens": [50990, 407, 341, 1461, 307, 10344, 293, 445, 382, 2489, 337, 586, 13, 51200], "temperature": 0.0, "avg_logprob": -0.1343633793602305, "compression_ratio": 1.649805447470817, "no_speech_prob": 0.0006878170534037054}, {"id": 933, "seek": 277776, "start": 2794.48, "end": 2797.6800000000003, "text": " OK, so with that said, let's do a couple of more examples here.", "tokens": [51200, 2264, 11, 370, 365, 300, 848, 11, 718, 311, 360, 257, 1916, 295, 544, 5110, 510, 13, 51360], "temperature": 0.0, "avg_logprob": -0.1343633793602305, "compression_ratio": 1.649805447470817, "no_speech_prob": 0.0006878170534037054}, {"id": 934, "seek": 277776, "start": 2797.6800000000003, "end": 2799.6000000000004, "text": " That kind of paints a picture of some of the things", "tokens": [51360, 663, 733, 295, 28076, 257, 3036, 295, 512, 295, 264, 721, 51456], "temperature": 0.0, "avg_logprob": -0.1343633793602305, "compression_ratio": 1.649805447470817, "no_speech_prob": 0.0006878170534037054}, {"id": 935, "seek": 277776, "start": 2799.6000000000004, "end": 2801.36, "text": " that are similar and different.", "tokens": [51456, 300, 366, 2531, 293, 819, 13, 51544], "temperature": 0.0, "avg_logprob": -0.1343633793602305, "compression_ratio": 1.649805447470817, "no_speech_prob": 0.0006878170534037054}, {"id": 936, "seek": 277776, "start": 2801.36, "end": 2804.2000000000003, "text": " And let's go ahead and open up, for instance,", "tokens": [51544, 400, 718, 311, 352, 2286, 293, 1269, 493, 11, 337, 5197, 11, 51686], "temperature": 0.0, "avg_logprob": -0.1343633793602305, "compression_ratio": 1.649805447470817, "no_speech_prob": 0.0006878170534037054}, {"id": 937, "seek": 280420, "start": 2804.24, "end": 2809.56, "text": " overflow.c from some weeks ago, splitting our windows again.", "tokens": [50366, 37772, 13, 66, 490, 512, 3259, 2057, 11, 30348, 527, 9309, 797, 13, 50632], "temperature": 0.0, "avg_logprob": -0.1608492796086083, "compression_ratio": 1.753968253968254, "no_speech_prob": 0.03845749422907829}, {"id": 938, "seek": 280420, "start": 2809.56, "end": 2813.2, "text": " And then on the right-hand side, let me open up something called overflow.pi,", "tokens": [50632, 400, 550, 322, 264, 558, 12, 5543, 1252, 11, 718, 385, 1269, 493, 746, 1219, 37772, 13, 22630, 11, 50814], "temperature": 0.0, "avg_logprob": -0.1608492796086083, "compression_ratio": 1.753968253968254, "no_speech_prob": 0.03845749422907829}, {"id": 939, "seek": 280420, "start": 2813.2, "end": 2815.4399999999996, "text": " which I put together in advance.", "tokens": [50814, 597, 286, 829, 1214, 294, 7295, 13, 50926], "temperature": 0.0, "avg_logprob": -0.1608492796086083, "compression_ratio": 1.753968253968254, "no_speech_prob": 0.03845749422907829}, {"id": 940, "seek": 280420, "start": 2815.4399999999996, "end": 2821.6, "text": " So here, we have on the left an example of integer overflow, whereby", "tokens": [50926, 407, 510, 11, 321, 362, 322, 264, 1411, 364, 1365, 295, 24922, 37772, 11, 36998, 51234], "temperature": 0.0, "avg_logprob": -0.1608492796086083, "compression_ratio": 1.753968253968254, "no_speech_prob": 0.03845749422907829}, {"id": 941, "seek": 280420, "start": 2821.6, "end": 2825.48, "text": " if I start counting at 1 and then don't even have a condition,", "tokens": [51234, 498, 286, 722, 13251, 412, 502, 293, 550, 500, 380, 754, 362, 257, 4188, 11, 51428], "temperature": 0.0, "avg_logprob": -0.1608492796086083, "compression_ratio": 1.753968253968254, "no_speech_prob": 0.03845749422907829}, {"id": 942, "seek": 280420, "start": 2825.48, "end": 2829.24, "text": " and I just keep multiplying i by 2, by 2, by 2, doubling it, doubling it,", "tokens": [51428, 293, 286, 445, 1066, 30955, 741, 538, 568, 11, 538, 568, 11, 538, 568, 11, 33651, 309, 11, 33651, 309, 11, 51616], "temperature": 0.0, "avg_logprob": -0.1608492796086083, "compression_ratio": 1.753968253968254, "no_speech_prob": 0.03845749422907829}, {"id": 943, "seek": 280420, "start": 2829.24, "end": 2832.24, "text": " doubling it, doubling it, we know from c that bad things happen.", "tokens": [51616, 33651, 309, 11, 33651, 309, 11, 321, 458, 490, 269, 300, 1578, 721, 1051, 13, 51766], "temperature": 0.0, "avg_logprob": -0.1608492796086083, "compression_ratio": 1.753968253968254, "no_speech_prob": 0.03845749422907829}, {"id": 944, "seek": 283224, "start": 2832.2799999999997, "end": 2836.12, "text": " And if you just kind of keep incrementing something without any boundary in sight.", "tokens": [50366, 400, 498, 291, 445, 733, 295, 1066, 26200, 278, 746, 1553, 604, 12866, 294, 7860, 13, 50558], "temperature": 0.0, "avg_logprob": -0.1497595937628495, "compression_ratio": 1.7598784194528876, "no_speech_prob": 0.006903237663209438}, {"id": 945, "seek": 283224, "start": 2836.12, "end": 2838.68, "text": " So this program is just going to print out each of those values.", "tokens": [50558, 407, 341, 1461, 307, 445, 516, 281, 4482, 484, 1184, 295, 729, 4190, 13, 50686], "temperature": 0.0, "avg_logprob": -0.1497595937628495, "compression_ratio": 1.7598784194528876, "no_speech_prob": 0.006903237663209438}, {"id": 946, "seek": 283224, "start": 2838.68, "end": 2840.7999999999997, "text": " And it's going to sleep one second in between.", "tokens": [50686, 400, 309, 311, 516, 281, 2817, 472, 1150, 294, 1296, 13, 50792], "temperature": 0.0, "avg_logprob": -0.1497595937628495, "compression_ratio": 1.7598784194528876, "no_speech_prob": 0.006903237663209438}, {"id": 947, "seek": 283224, "start": 2840.7999999999997, "end": 2843.0, "text": " Same program in Python looks pretty similar.", "tokens": [50792, 10635, 1461, 294, 15329, 1542, 1238, 2531, 13, 50902], "temperature": 0.0, "avg_logprob": -0.1497595937628495, "compression_ratio": 1.7598784194528876, "no_speech_prob": 0.006903237663209438}, {"id": 948, "seek": 283224, "start": 2843.0, "end": 2847.3199999999997, "text": " But notice I'm initializing i to 1, doing the following forever,", "tokens": [50902, 583, 3449, 286, 478, 5883, 3319, 741, 281, 502, 11, 884, 264, 3480, 5680, 11, 51118], "temperature": 0.0, "avg_logprob": -0.1497595937628495, "compression_ratio": 1.7598784194528876, "no_speech_prob": 0.006903237663209438}, {"id": 949, "seek": 283224, "start": 2847.3199999999997, "end": 2852.2799999999997, "text": " printing out i, multiplying i by 2, and then sleeping for one second.", "tokens": [51118, 14699, 484, 741, 11, 30955, 741, 538, 568, 11, 293, 550, 8296, 337, 472, 1150, 13, 51366], "temperature": 0.0, "avg_logprob": -0.1497595937628495, "compression_ratio": 1.7598784194528876, "no_speech_prob": 0.006903237663209438}, {"id": 950, "seek": 283224, "start": 2852.2799999999997, "end": 2855.6, "text": " But sleep is also not built into Python in the way that print is.", "tokens": [51366, 583, 2817, 307, 611, 406, 3094, 666, 15329, 294, 264, 636, 300, 4482, 307, 13, 51532], "temperature": 0.0, "avg_logprob": -0.1497595937628495, "compression_ratio": 1.7598784194528876, "no_speech_prob": 0.006903237663209438}, {"id": 951, "seek": 283224, "start": 2855.6, "end": 2857.2799999999997, "text": " Notice what I had to include up here.", "tokens": [51532, 13428, 437, 286, 632, 281, 4090, 493, 510, 13, 51616], "temperature": 0.0, "avg_logprob": -0.1497595937628495, "compression_ratio": 1.7598784194528876, "no_speech_prob": 0.006903237663209438}, {"id": 952, "seek": 283224, "start": 2857.2799999999997, "end": 2858.4799999999996, "text": " And I wasn't sure what that was.", "tokens": [51616, 400, 286, 2067, 380, 988, 437, 300, 390, 13, 51676], "temperature": 0.0, "avg_logprob": -0.1497595937628495, "compression_ratio": 1.7598784194528876, "no_speech_prob": 0.006903237663209438}, {"id": 953, "seek": 283224, "start": 2858.4799999999996, "end": 2862.16, "text": " And so honestly, just a few days ago, I Googled to sleep one second", "tokens": [51676, 400, 370, 6095, 11, 445, 257, 1326, 1708, 2057, 11, 286, 45005, 1493, 281, 2817, 472, 1150, 51860], "temperature": 0.0, "avg_logprob": -0.1497595937628495, "compression_ratio": 1.7598784194528876, "no_speech_prob": 0.006903237663209438}, {"id": 954, "seek": 286216, "start": 2862.16, "end": 2866.08, "text": " in Python, saw that there's this time library inside of which is a sleep", "tokens": [50364, 294, 15329, 11, 1866, 300, 456, 311, 341, 565, 6405, 1854, 295, 597, 307, 257, 2817, 50560], "temperature": 0.0, "avg_logprob": -0.17733416064032193, "compression_ratio": 1.6693877551020408, "no_speech_prob": 0.006487536244094372}, {"id": 955, "seek": 286216, "start": 2866.08, "end": 2866.68, "text": " function.", "tokens": [50560, 2445, 13, 50590], "temperature": 0.0, "avg_logprob": -0.17733416064032193, "compression_ratio": 1.6693877551020408, "no_speech_prob": 0.006487536244094372}, {"id": 956, "seek": 286216, "start": 2866.68, "end": 2870.0, "text": " And that's how I knew which library to actually include.", "tokens": [50590, 400, 300, 311, 577, 286, 2586, 597, 6405, 281, 767, 4090, 13, 50756], "temperature": 0.0, "avg_logprob": -0.17733416064032193, "compression_ratio": 1.6693877551020408, "no_speech_prob": 0.006487536244094372}, {"id": 957, "seek": 286216, "start": 2870.0, "end": 2872.16, "text": " And so just as there are man pages for c,", "tokens": [50756, 400, 370, 445, 382, 456, 366, 587, 7183, 337, 269, 11, 50864], "temperature": 0.0, "avg_logprob": -0.17733416064032193, "compression_ratio": 1.6693877551020408, "no_speech_prob": 0.006487536244094372}, {"id": 958, "seek": 286216, "start": 2872.16, "end": 2875.6, "text": " there's a whole documentation website for Python", "tokens": [50864, 456, 311, 257, 1379, 14333, 3144, 337, 15329, 51036], "temperature": 0.0, "avg_logprob": -0.17733416064032193, "compression_ratio": 1.6693877551020408, "no_speech_prob": 0.006487536244094372}, {"id": 959, "seek": 286216, "start": 2875.6, "end": 2877.56, "text": " that has all of this information as well.", "tokens": [51036, 300, 575, 439, 295, 341, 1589, 382, 731, 13, 51134], "temperature": 0.0, "avg_logprob": -0.17733416064032193, "compression_ratio": 1.6693877551020408, "no_speech_prob": 0.006487536244094372}, {"id": 960, "seek": 286216, "start": 2877.56, "end": 2878.7999999999997, "text": " So let me go ahead and do this.", "tokens": [51134, 407, 718, 385, 352, 2286, 293, 360, 341, 13, 51196], "temperature": 0.0, "avg_logprob": -0.17733416064032193, "compression_ratio": 1.6693877551020408, "no_speech_prob": 0.006487536244094372}, {"id": 961, "seek": 286216, "start": 2878.7999999999997, "end": 2883.56, "text": " And let me actually try to create two windows here.", "tokens": [51196, 400, 718, 385, 767, 853, 281, 1884, 732, 9309, 510, 13, 51434], "temperature": 0.0, "avg_logprob": -0.17733416064032193, "compression_ratio": 1.6693877551020408, "no_speech_prob": 0.006487536244094372}, {"id": 962, "seek": 286216, "start": 2883.56, "end": 2887.3199999999997, "text": " What's the best way for me to do this?", "tokens": [51434, 708, 311, 264, 1151, 636, 337, 385, 281, 360, 341, 30, 51622], "temperature": 0.0, "avg_logprob": -0.17733416064032193, "compression_ratio": 1.6693877551020408, "no_speech_prob": 0.006487536244094372}, {"id": 963, "seek": 286216, "start": 2887.3199999999997, "end": 2889.44, "text": " Split 1 to 2.", "tokens": [51622, 45111, 502, 281, 568, 13, 51728], "temperature": 0.0, "avg_logprob": -0.17733416064032193, "compression_ratio": 1.6693877551020408, "no_speech_prob": 0.006487536244094372}, {"id": 964, "seek": 288944, "start": 2889.44, "end": 2893.64, "text": " OK, so let's do this just so I can run this in the same place.", "tokens": [50364, 2264, 11, 370, 718, 311, 360, 341, 445, 370, 286, 393, 1190, 341, 294, 264, 912, 1081, 13, 50574], "temperature": 0.0, "avg_logprob": -0.21897690205634396, "compression_ratio": 1.5974025974025974, "no_speech_prob": 0.004609148018062115}, {"id": 965, "seek": 288944, "start": 2893.64, "end": 2902.64, "text": " So if I go into my source 8 directory, and I go into weeks and 1,", "tokens": [50574, 407, 498, 286, 352, 666, 452, 4009, 1649, 21120, 11, 293, 286, 352, 666, 3259, 293, 502, 11, 51024], "temperature": 0.0, "avg_logprob": -0.21897690205634396, "compression_ratio": 1.5974025974025974, "no_speech_prob": 0.004609148018062115}, {"id": 966, "seek": 288944, "start": 2902.64, "end": 2911.32, "text": " and I make overflow, nope, sorry, week 1.", "tokens": [51024, 293, 286, 652, 37772, 11, 23444, 11, 2597, 11, 1243, 502, 13, 51458], "temperature": 0.0, "avg_logprob": -0.21897690205634396, "compression_ratio": 1.5974025974025974, "no_speech_prob": 0.004609148018062115}, {"id": 967, "seek": 288944, "start": 2911.32, "end": 2917.04, "text": " OK, so if I go into source 1, and I do make overflow, which is kind of cute", "tokens": [51458, 2264, 11, 370, 498, 286, 352, 666, 4009, 502, 11, 293, 286, 360, 652, 37772, 11, 597, 307, 733, 295, 4052, 51744], "temperature": 0.0, "avg_logprob": -0.21897690205634396, "compression_ratio": 1.5974025974025974, "no_speech_prob": 0.004609148018062115}, {"id": 968, "seek": 291704, "start": 2917.04, "end": 2920.88, "text": " semantically, I'm now going to be able to run a program called overflow.", "tokens": [50364, 4361, 49505, 11, 286, 478, 586, 516, 281, 312, 1075, 281, 1190, 257, 1461, 1219, 37772, 13, 50556], "temperature": 0.0, "avg_logprob": -0.2677146867773999, "compression_ratio": 1.441860465116279, "no_speech_prob": 0.008846362121403217}, {"id": 969, "seek": 291704, "start": 2920.88, "end": 2928.64, "text": " Meanwhile, over here, let me go ahead and split this window 2.", "tokens": [50556, 13879, 11, 670, 510, 11, 718, 385, 352, 2286, 293, 7472, 341, 4910, 568, 13, 50944], "temperature": 0.0, "avg_logprob": -0.2677146867773999, "compression_ratio": 1.441860465116279, "no_speech_prob": 0.008846362121403217}, {"id": 970, "seek": 291704, "start": 2928.64, "end": 2930.36, "text": " Damn it, not there.", "tokens": [50944, 11907, 309, 11, 406, 456, 13, 51030], "temperature": 0.0, "avg_logprob": -0.2677146867773999, "compression_ratio": 1.441860465116279, "no_speech_prob": 0.008846362121403217}, {"id": 971, "seek": 291704, "start": 2930.36, "end": 2934.64, "text": " Let's put this over here.", "tokens": [51030, 961, 311, 829, 341, 670, 510, 13, 51244], "temperature": 0.0, "avg_logprob": -0.2677146867773999, "compression_ratio": 1.441860465116279, "no_speech_prob": 0.008846362121403217}, {"id": 972, "seek": 291704, "start": 2934.64, "end": 2935.32, "text": " Oh, no.", "tokens": [51244, 876, 11, 572, 13, 51278], "temperature": 0.0, "avg_logprob": -0.2677146867773999, "compression_ratio": 1.441860465116279, "no_speech_prob": 0.008846362121403217}, {"id": 973, "seek": 291704, "start": 2940.64, "end": 2942.52, "text": " OK, one second, sorry.", "tokens": [51544, 2264, 11, 472, 1150, 11, 2597, 13, 51638], "temperature": 0.0, "avg_logprob": -0.2677146867773999, "compression_ratio": 1.441860465116279, "no_speech_prob": 0.008846362121403217}, {"id": 974, "seek": 291704, "start": 2942.52, "end": 2944.0, "text": " Overflow.py.", "tokens": [51638, 4886, 10565, 13, 8200, 13, 51712], "temperature": 0.0, "avg_logprob": -0.2677146867773999, "compression_ratio": 1.441860465116279, "no_speech_prob": 0.008846362121403217}, {"id": 975, "seek": 291704, "start": 2944.0, "end": 2945.68, "text": " OK, so now we're back.", "tokens": [51712, 2264, 11, 370, 586, 321, 434, 646, 13, 51796], "temperature": 0.0, "avg_logprob": -0.2677146867773999, "compression_ratio": 1.441860465116279, "no_speech_prob": 0.008846362121403217}, {"id": 976, "seek": 294568, "start": 2945.68, "end": 2946.56, "text": " No, I lost the other window.", "tokens": [50364, 883, 11, 286, 2731, 264, 661, 4910, 13, 50408], "temperature": 0.0, "avg_logprob": -0.19624501717190782, "compression_ratio": 1.6944444444444444, "no_speech_prob": 0.00016864665667526424}, {"id": 977, "seek": 294568, "start": 2949.7599999999998, "end": 2950.48, "text": " Oh, that's cool.", "tokens": [50568, 876, 11, 300, 311, 1627, 13, 50604], "temperature": 0.0, "avg_logprob": -0.19624501717190782, "compression_ratio": 1.6944444444444444, "no_speech_prob": 0.00016864665667526424}, {"id": 978, "seek": 294568, "start": 2950.48, "end": 2954.08, "text": " OK, so let's do this.", "tokens": [50604, 2264, 11, 370, 718, 311, 360, 341, 13, 50784], "temperature": 0.0, "avg_logprob": -0.19624501717190782, "compression_ratio": 1.6944444444444444, "no_speech_prob": 0.00016864665667526424}, {"id": 979, "seek": 294568, "start": 2954.08, "end": 2957.64, "text": " OK, now I know how to use the ID.", "tokens": [50784, 2264, 11, 586, 286, 458, 577, 281, 764, 264, 7348, 13, 50962], "temperature": 0.0, "avg_logprob": -0.19624501717190782, "compression_ratio": 1.6944444444444444, "no_speech_prob": 0.00016864665667526424}, {"id": 980, "seek": 294568, "start": 2957.64, "end": 2960.8399999999997, "text": " All right, so on the left-hand side, I'm about to run overflow.", "tokens": [50962, 1057, 558, 11, 370, 322, 264, 1411, 12, 5543, 1252, 11, 286, 478, 466, 281, 1190, 37772, 13, 51122], "temperature": 0.0, "avg_logprob": -0.19624501717190782, "compression_ratio": 1.6944444444444444, "no_speech_prob": 0.00016864665667526424}, {"id": 981, "seek": 294568, "start": 2960.8399999999997, "end": 2963.64, "text": " And then lastly, without generating that beep again,", "tokens": [51122, 400, 550, 16386, 11, 1553, 17746, 300, 28678, 797, 11, 51262], "temperature": 0.0, "avg_logprob": -0.19624501717190782, "compression_ratio": 1.6944444444444444, "no_speech_prob": 0.00016864665667526424}, {"id": 982, "seek": 294568, "start": 2963.64, "end": 2969.7999999999997, "text": " I'm going to go in here, and I'm about to run Python of overflow.py.", "tokens": [51262, 286, 478, 516, 281, 352, 294, 510, 11, 293, 286, 478, 466, 281, 1190, 15329, 295, 37772, 13, 8200, 13, 51570], "temperature": 0.0, "avg_logprob": -0.19624501717190782, "compression_ratio": 1.6944444444444444, "no_speech_prob": 0.00016864665667526424}, {"id": 983, "seek": 294568, "start": 2969.7999999999997, "end": 2971.68, "text": " And so the left will run the C version.", "tokens": [51570, 400, 370, 264, 1411, 486, 1190, 264, 383, 3037, 13, 51664], "temperature": 0.0, "avg_logprob": -0.19624501717190782, "compression_ratio": 1.6944444444444444, "no_speech_prob": 0.00016864665667526424}, {"id": 984, "seek": 294568, "start": 2971.68, "end": 2973.68, "text": " The right will run the Python version.", "tokens": [51664, 440, 558, 486, 1190, 264, 15329, 3037, 13, 51764], "temperature": 0.0, "avg_logprob": -0.19624501717190782, "compression_ratio": 1.6944444444444444, "no_speech_prob": 0.00016864665667526424}, {"id": 985, "seek": 297368, "start": 2973.68, "end": 2982.2, "text": " And we'll start to see, no pun intended, what happens with these programs.", "tokens": [50364, 400, 321, 603, 722, 281, 536, 11, 572, 4468, 10226, 11, 437, 2314, 365, 613, 4268, 13, 50790], "temperature": 0.0, "avg_logprob": -0.31657185761824896, "compression_ratio": 1.36875, "no_speech_prob": 0.000273704354185611}, {"id": 986, "seek": 297368, "start": 2982.2, "end": 2983.12, "text": " Oh, damn it, I got to scroll.", "tokens": [50790, 876, 11, 8151, 309, 11, 286, 658, 281, 11369, 13, 50836], "temperature": 0.0, "avg_logprob": -0.31657185761824896, "compression_ratio": 1.36875, "no_speech_prob": 0.000273704354185611}, {"id": 987, "seek": 297368, "start": 2987.68, "end": 2989.44, "text": " OK, so I'll just keep scrolling for us.", "tokens": [51064, 2264, 11, 370, 286, 603, 445, 1066, 29053, 337, 505, 13, 51152], "temperature": 0.0, "avg_logprob": -0.31657185761824896, "compression_ratio": 1.36875, "no_speech_prob": 0.000273704354185611}, {"id": 988, "seek": 297368, "start": 2992.24, "end": 2992.8799999999997, "text": " This is fun.", "tokens": [51292, 639, 307, 1019, 13, 51324], "temperature": 0.0, "avg_logprob": -0.31657185761824896, "compression_ratio": 1.36875, "no_speech_prob": 0.000273704354185611}, {"id": 989, "seek": 297368, "start": 2999.3999999999996, "end": 3003.12, "text": " OK, next time, Google how to sleep for half a second instead.", "tokens": [51650, 2264, 11, 958, 565, 11, 3329, 577, 281, 2817, 337, 1922, 257, 1150, 2602, 13, 51836], "temperature": 0.0, "avg_logprob": -0.31657185761824896, "compression_ratio": 1.36875, "no_speech_prob": 0.000273704354185611}, {"id": 990, "seek": 300312, "start": 3003.12, "end": 3005.04, "text": " OK, so there we go.", "tokens": [50364, 2264, 11, 370, 456, 321, 352, 13, 50460], "temperature": 0.0, "avg_logprob": -0.1742283265982101, "compression_ratio": 1.6044303797468353, "no_speech_prob": 0.0001686461764620617}, {"id": 991, "seek": 300312, "start": 3005.04, "end": 3007.08, "text": " Something bad has happened here.", "tokens": [50460, 6595, 1578, 575, 2011, 510, 13, 50562], "temperature": 0.0, "avg_logprob": -0.1742283265982101, "compression_ratio": 1.6044303797468353, "no_speech_prob": 0.0001686461764620617}, {"id": 992, "seek": 300312, "start": 3007.08, "end": 3009.3199999999997, "text": " And now C is just completely choking.", "tokens": [50562, 400, 586, 383, 307, 445, 2584, 48540, 13, 50674], "temperature": 0.0, "avg_logprob": -0.1742283265982101, "compression_ratio": 1.6044303797468353, "no_speech_prob": 0.0001686461764620617}, {"id": 993, "seek": 300312, "start": 3009.3199999999997, "end": 3011.44, "text": " Things are in a funky state.", "tokens": [50674, 9514, 366, 294, 257, 33499, 1785, 13, 50780], "temperature": 0.0, "avg_logprob": -0.1742283265982101, "compression_ratio": 1.6044303797468353, "no_speech_prob": 0.0001686461764620617}, {"id": 994, "seek": 300312, "start": 3011.44, "end": 3015.2799999999997, "text": " So what happened on the left before the answer scrolls away?", "tokens": [50780, 407, 437, 2011, 322, 264, 1411, 949, 264, 1867, 11369, 82, 1314, 30, 50972], "temperature": 0.0, "avg_logprob": -0.1742283265982101, "compression_ratio": 1.6044303797468353, "no_speech_prob": 0.0001686461764620617}, {"id": 995, "seek": 300312, "start": 3015.2799999999997, "end": 3016.2799999999997, "text": " Integer overflow, right?", "tokens": [50972, 5681, 30744, 37772, 11, 558, 30, 51022], "temperature": 0.0, "avg_logprob": -0.1742283265982101, "compression_ratio": 1.6044303797468353, "no_speech_prob": 0.0001686461764620617}, {"id": 996, "seek": 300312, "start": 3016.2799999999997, "end": 3019.6, "text": " We had so many bits becoming ones that eventually it", "tokens": [51022, 492, 632, 370, 867, 9239, 5617, 2306, 300, 4728, 309, 51188], "temperature": 0.0, "avg_logprob": -0.1742283265982101, "compression_ratio": 1.6044303797468353, "no_speech_prob": 0.0001686461764620617}, {"id": 997, "seek": 300312, "start": 3019.6, "end": 3021.7599999999998, "text": " was mistaken for a negative number temporarily,", "tokens": [51188, 390, 21333, 337, 257, 3671, 1230, 23750, 11, 51296], "temperature": 0.0, "avg_logprob": -0.1742283265982101, "compression_ratio": 1.6044303797468353, "no_speech_prob": 0.0001686461764620617}, {"id": 998, "seek": 300312, "start": 3021.7599999999998, "end": 3025.2799999999997, "text": " and then the whole thing just kind of got confused and became permanently", "tokens": [51296, 293, 550, 264, 1379, 551, 445, 733, 295, 658, 9019, 293, 3062, 24042, 51472], "temperature": 0.0, "avg_logprob": -0.1742283265982101, "compression_ratio": 1.6044303797468353, "no_speech_prob": 0.0001686461764620617}, {"id": 999, "seek": 300312, "start": 3025.2799999999997, "end": 3029.48, "text": " zeroes, whereas on the right-hand side, like, yeah, Python, look at you go.", "tokens": [51472, 4018, 279, 11, 9735, 322, 264, 558, 12, 5543, 1252, 11, 411, 11, 1338, 11, 15329, 11, 574, 412, 291, 352, 13, 51682], "temperature": 0.0, "avg_logprob": -0.1742283265982101, "compression_ratio": 1.6044303797468353, "no_speech_prob": 0.0001686461764620617}, {"id": 1000, "seek": 300312, "start": 3029.48, "end": 3032.7599999999998, "text": " Like, still counting higher and higher and higher.", "tokens": [51682, 1743, 11, 920, 13251, 2946, 293, 2946, 293, 2946, 13, 51846], "temperature": 0.0, "avg_logprob": -0.1742283265982101, "compression_ratio": 1.6044303797468353, "no_speech_prob": 0.0001686461764620617}, {"id": 1001, "seek": 303276, "start": 3032.76, "end": 3035.4, "text": " And even though we haven't talked about the underlying representation", "tokens": [50364, 400, 754, 1673, 321, 2378, 380, 2825, 466, 264, 14217, 10290, 50496], "temperature": 0.0, "avg_logprob": -0.18094882835336282, "compression_ratio": 1.6568627450980393, "no_speech_prob": 0.0013669097097590566}, {"id": 1002, "seek": 303276, "start": 3035.4, "end": 3039.2000000000003, "text": " of these types in Python, like, what can we infer from the apparent", "tokens": [50496, 295, 613, 3467, 294, 15329, 11, 411, 11, 437, 393, 321, 13596, 490, 264, 18335, 50686], "temperature": 0.0, "avg_logprob": -0.18094882835336282, "compression_ratio": 1.6568627450980393, "no_speech_prob": 0.0013669097097590566}, {"id": 1003, "seek": 303276, "start": 3039.2000000000003, "end": 3043.6000000000004, "text": " better correctness of the version on the right in Python?", "tokens": [50686, 1101, 3006, 1287, 295, 264, 3037, 322, 264, 558, 294, 15329, 30, 50906], "temperature": 0.0, "avg_logprob": -0.18094882835336282, "compression_ratio": 1.6568627450980393, "no_speech_prob": 0.0013669097097590566}, {"id": 1004, "seek": 303276, "start": 3043.6000000000004, "end": 3045.2000000000003, "text": " It's not an 8-bit representation.", "tokens": [50906, 467, 311, 406, 364, 1649, 12, 5260, 10290, 13, 50986], "temperature": 0.0, "avg_logprob": -0.18094882835336282, "compression_ratio": 1.6568627450980393, "no_speech_prob": 0.0013669097097590566}, {"id": 1005, "seek": 303276, "start": 3045.2000000000003, "end": 3047.6800000000003, "text": " And even C, to be fair, uses 32 bits for its ints.", "tokens": [50986, 400, 754, 383, 11, 281, 312, 3143, 11, 4960, 8858, 9239, 337, 1080, 560, 82, 13, 51110], "temperature": 0.0, "avg_logprob": -0.18094882835336282, "compression_ratio": 1.6568627450980393, "no_speech_prob": 0.0013669097097590566}, {"id": 1006, "seek": 303276, "start": 3047.6800000000003, "end": 3050.96, "text": " And that's why we got as high as 2 billion or 4 billion in total.", "tokens": [51110, 400, 300, 311, 983, 321, 658, 382, 1090, 382, 568, 5218, 420, 1017, 5218, 294, 3217, 13, 51274], "temperature": 0.0, "avg_logprob": -0.18094882835336282, "compression_ratio": 1.6568627450980393, "no_speech_prob": 0.0013669097097590566}, {"id": 1007, "seek": 303276, "start": 3050.96, "end": 3054.32, "text": " But same idea, how many bits must Python be using?", "tokens": [51274, 583, 912, 1558, 11, 577, 867, 9239, 1633, 15329, 312, 1228, 30, 51442], "temperature": 0.0, "avg_logprob": -0.18094882835336282, "compression_ratio": 1.6568627450980393, "no_speech_prob": 0.0013669097097590566}, {"id": 1008, "seek": 303276, "start": 3054.32, "end": 3055.32, "text": " 64?", "tokens": [51442, 12145, 30, 51492], "temperature": 0.0, "avg_logprob": -0.18094882835336282, "compression_ratio": 1.6568627450980393, "no_speech_prob": 0.0013669097097590566}, {"id": 1009, "seek": 303276, "start": 3055.32, "end": 3056.6000000000004, "text": " Yeah, maybe 64.", "tokens": [51492, 865, 11, 1310, 12145, 13, 51556], "temperature": 0.0, "avg_logprob": -0.18094882835336282, "compression_ratio": 1.6568627450980393, "no_speech_prob": 0.0013669097097590566}, {"id": 1010, "seek": 303276, "start": 3056.6000000000004, "end": 3059.2400000000002, "text": " I don't know exactly, but I know it's not 32,", "tokens": [51556, 286, 500, 380, 458, 2293, 11, 457, 286, 458, 309, 311, 406, 8858, 11, 51688], "temperature": 0.0, "avg_logprob": -0.18094882835336282, "compression_ratio": 1.6568627450980393, "no_speech_prob": 0.0013669097097590566}, {"id": 1011, "seek": 303276, "start": 3059.2400000000002, "end": 3061.2400000000002, "text": " because it keeps counting up and up and up.", "tokens": [51688, 570, 309, 5965, 13251, 493, 293, 493, 293, 493, 13, 51788], "temperature": 0.0, "avg_logprob": -0.18094882835336282, "compression_ratio": 1.6568627450980393, "no_speech_prob": 0.0013669097097590566}, {"id": 1012, "seek": 306124, "start": 3061.24, "end": 3063.08, "text": " And so this is another feature of Python,", "tokens": [50364, 400, 370, 341, 307, 1071, 4111, 295, 15329, 11, 50456], "temperature": 0.0, "avg_logprob": -0.13452083446361401, "compression_ratio": 1.6615384615384616, "no_speech_prob": 0.002322975778952241}, {"id": 1013, "seek": 306124, "start": 3063.08, "end": 3066.24, "text": " whereas int in C has typically been for us 32 bits,", "tokens": [50456, 9735, 560, 294, 383, 575, 5850, 668, 337, 505, 8858, 9239, 11, 50614], "temperature": 0.0, "avg_logprob": -0.13452083446361401, "compression_ratio": 1.6615384615384616, "no_speech_prob": 0.002322975778952241}, {"id": 1014, "seek": 306124, "start": 3066.24, "end": 3068.7599999999998, "text": " although that is technically machine-specific.", "tokens": [50614, 4878, 300, 307, 12120, 3479, 12, 29258, 13, 50740], "temperature": 0.0, "avg_logprob": -0.13452083446361401, "compression_ratio": 1.6615384615384616, "no_speech_prob": 0.002322975778952241}, {"id": 1015, "seek": 306124, "start": 3068.7599999999998, "end": 3071.6, "text": " Python integers are now going to be 64, which just", "tokens": [50740, 15329, 41674, 366, 586, 516, 281, 312, 12145, 11, 597, 445, 50882], "temperature": 0.0, "avg_logprob": -0.13452083446361401, "compression_ratio": 1.6615384615384616, "no_speech_prob": 0.002322975778952241}, {"id": 1016, "seek": 306124, "start": 3071.6, "end": 3074.0, "text": " means we can do much bigger math, which is great for various data", "tokens": [50882, 1355, 321, 393, 360, 709, 3801, 5221, 11, 597, 307, 869, 337, 3683, 1412, 51002], "temperature": 0.0, "avg_logprob": -0.13452083446361401, "compression_ratio": 1.6615384615384616, "no_speech_prob": 0.002322975778952241}, {"id": 1017, "seek": 306124, "start": 3074.0, "end": 3075.68, "text": " science applications and stats and whatnot,", "tokens": [51002, 3497, 5821, 293, 18152, 293, 25882, 11, 51086], "temperature": 0.0, "avg_logprob": -0.13452083446361401, "compression_ratio": 1.6615384615384616, "no_speech_prob": 0.002322975778952241}, {"id": 1018, "seek": 306124, "start": 3075.68, "end": 3079.04, "text": " where you actually might have some large data sets to deal with.", "tokens": [51086, 689, 291, 767, 1062, 362, 512, 2416, 1412, 6352, 281, 2028, 365, 13, 51254], "temperature": 0.0, "avg_logprob": -0.13452083446361401, "compression_ratio": 1.6615384615384616, "no_speech_prob": 0.002322975778952241}, {"id": 1019, "seek": 306124, "start": 3079.04, "end": 3081.9199999999996, "text": " Unfortunately, we still have some issues of imprecision.", "tokens": [51254, 8590, 11, 321, 920, 362, 512, 2663, 295, 704, 13867, 1991, 13, 51398], "temperature": 0.0, "avg_logprob": -0.13452083446361401, "compression_ratio": 1.6615384615384616, "no_speech_prob": 0.002322975778952241}, {"id": 1020, "seek": 306124, "start": 3081.9199999999996, "end": 3084.4799999999996, "text": " Let me go ahead and close a whole bunch of these windows", "tokens": [51398, 961, 385, 352, 2286, 293, 1998, 257, 1379, 3840, 295, 613, 9309, 51526], "temperature": 0.0, "avg_logprob": -0.13452083446361401, "compression_ratio": 1.6615384615384616, "no_speech_prob": 0.002322975778952241}, {"id": 1021, "seek": 306124, "start": 3084.4799999999996, "end": 3090.3199999999997, "text": " and go ahead and open up, for instance, just this one here.", "tokens": [51526, 293, 352, 2286, 293, 1269, 493, 11, 337, 5197, 11, 445, 341, 472, 510, 13, 51818], "temperature": 0.0, "avg_logprob": -0.13452083446361401, "compression_ratio": 1.6615384615384616, "no_speech_prob": 0.002322975778952241}, {"id": 1022, "seek": 309032, "start": 3091.04, "end": 3094.6000000000004, "text": " No, I'm going to skip this and do something slightly more fun, which", "tokens": [50400, 883, 11, 286, 478, 516, 281, 10023, 341, 293, 360, 746, 4748, 544, 1019, 11, 597, 50578], "temperature": 0.0, "avg_logprob": -0.18458496752402764, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.001987653784453869}, {"id": 1023, "seek": 309032, "start": 3094.6000000000004, "end": 3095.28, "text": " is this.", "tokens": [50578, 307, 341, 13, 50612], "temperature": 0.0, "avg_logprob": -0.18458496752402764, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.001987653784453869}, {"id": 1024, "seek": 309032, "start": 3095.28, "end": 3098.84, "text": " So in Python here, let's do a quick warm-up.", "tokens": [50612, 407, 294, 15329, 510, 11, 718, 311, 360, 257, 1702, 4561, 12, 1010, 13, 50790], "temperature": 0.0, "avg_logprob": -0.18458496752402764, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.001987653784453869}, {"id": 1025, "seek": 309032, "start": 3098.84, "end": 3101.4, "text": " This is going to print for me what?", "tokens": [50790, 639, 307, 516, 281, 4482, 337, 385, 437, 30, 50918], "temperature": 0.0, "avg_logprob": -0.18458496752402764, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.001987653784453869}, {"id": 1026, "seek": 309032, "start": 3101.4, "end": 3102.48, "text": " Four question marks, right?", "tokens": [50918, 7451, 1168, 10640, 11, 558, 30, 50972], "temperature": 0.0, "avg_logprob": -0.18458496752402764, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.001987653784453869}, {"id": 1027, "seek": 309032, "start": 3102.48, "end": 3103.44, "text": " And this is reminiscent.", "tokens": [50972, 400, 341, 307, 44304, 13, 51020], "temperature": 0.0, "avg_logprob": -0.18458496752402764, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.001987653784453869}, {"id": 1028, "seek": 309032, "start": 3103.44, "end": 3106.56, "text": " This is a really cheap version of Super Mario Brothers.", "tokens": [51020, 639, 307, 257, 534, 7084, 3037, 295, 4548, 9343, 19886, 13, 51176], "temperature": 0.0, "avg_logprob": -0.18458496752402764, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.001987653784453869}, {"id": 1029, "seek": 309032, "start": 3106.56, "end": 3109.6000000000004, "text": " And if you think back to week one, where we explored this,", "tokens": [51176, 400, 498, 291, 519, 646, 281, 1243, 472, 11, 689, 321, 24016, 341, 11, 51328], "temperature": 0.0, "avg_logprob": -0.18458496752402764, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.001987653784453869}, {"id": 1030, "seek": 309032, "start": 3109.6000000000004, "end": 3111.92, "text": " there was a screenshot I had of Super Mario Brothers, one", "tokens": [51328, 456, 390, 257, 27712, 286, 632, 295, 4548, 9343, 19886, 11, 472, 51444], "temperature": 0.0, "avg_logprob": -0.18458496752402764, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.001987653784453869}, {"id": 1031, "seek": 309032, "start": 3111.92, "end": 3115.44, "text": " of the worlds, where we just had four question marks, which Mario could", "tokens": [51444, 295, 264, 13401, 11, 689, 321, 445, 632, 1451, 1168, 10640, 11, 597, 9343, 727, 51620], "temperature": 0.0, "avg_logprob": -0.18458496752402764, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.001987653784453869}, {"id": 1032, "seek": 309032, "start": 3115.44, "end": 3117.56, "text": " hit his head against to actually generate a coin.", "tokens": [51620, 2045, 702, 1378, 1970, 281, 767, 8460, 257, 11464, 13, 51726], "temperature": 0.0, "avg_logprob": -0.18458496752402764, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.001987653784453869}, {"id": 1033, "seek": 311756, "start": 3117.6, "end": 3120.52, "text": " So we stepped up from there in C to do this instead.", "tokens": [50366, 407, 321, 15251, 493, 490, 456, 294, 383, 281, 360, 341, 2602, 13, 50512], "temperature": 0.0, "avg_logprob": -0.1565408906736574, "compression_ratio": 1.6550522648083623, "no_speech_prob": 6.814762309659272e-05}, {"id": 1034, "seek": 311756, "start": 3120.52, "end": 3122.32, "text": " And this is going to give us another feature.", "tokens": [50512, 400, 341, 307, 516, 281, 976, 505, 1071, 4111, 13, 50602], "temperature": 0.0, "avg_logprob": -0.1565408906736574, "compression_ratio": 1.6550522648083623, "no_speech_prob": 6.814762309659272e-05}, {"id": 1035, "seek": 311756, "start": 3122.32, "end": 3125.96, "text": " But let's see if we can't start to infer from context what these programs do.", "tokens": [50602, 583, 718, 311, 536, 498, 321, 393, 380, 722, 281, 13596, 490, 4319, 437, 613, 4268, 360, 13, 50784], "temperature": 0.0, "avg_logprob": -0.1565408906736574, "compression_ratio": 1.6550522648083623, "no_speech_prob": 6.814762309659272e-05}, {"id": 1036, "seek": 311756, "start": 3125.96, "end": 3127.32, "text": " Here's another one, Mario 1.", "tokens": [50784, 1692, 311, 1071, 472, 11, 9343, 502, 13, 50852], "temperature": 0.0, "avg_logprob": -0.1565408906736574, "compression_ratio": 1.6550522648083623, "no_speech_prob": 6.814762309659272e-05}, {"id": 1037, "seek": 311756, "start": 3127.32, "end": 3127.92, "text": " What's this do?", "tokens": [50852, 708, 311, 341, 360, 30, 50882], "temperature": 0.0, "avg_logprob": -0.1565408906736574, "compression_ratio": 1.6550522648083623, "no_speech_prob": 6.814762309659272e-05}, {"id": 1038, "seek": 311756, "start": 3132.08, "end": 3133.52, "text": " It's using a loop, for sure.", "tokens": [51090, 467, 311, 1228, 257, 6367, 11, 337, 988, 13, 51162], "temperature": 0.0, "avg_logprob": -0.1565408906736574, "compression_ratio": 1.6550522648083623, "no_speech_prob": 6.814762309659272e-05}, {"id": 1039, "seek": 311756, "start": 3133.52, "end": 3135.96, "text": " And it's using how many iterations, apparently?", "tokens": [51162, 400, 309, 311, 1228, 577, 867, 36540, 11, 7970, 30, 51284], "temperature": 0.0, "avg_logprob": -0.1565408906736574, "compression_ratio": 1.6550522648083623, "no_speech_prob": 6.814762309659272e-05}, {"id": 1040, "seek": 311756, "start": 3135.96, "end": 3138.92, "text": " Four, so from 0 to 1 to 2 to 3, total.", "tokens": [51284, 7451, 11, 370, 490, 1958, 281, 502, 281, 568, 281, 805, 11, 3217, 13, 51432], "temperature": 0.0, "avg_logprob": -0.1565408906736574, "compression_ratio": 1.6550522648083623, "no_speech_prob": 6.814762309659272e-05}, {"id": 1041, "seek": 311756, "start": 3138.92, "end": 3142.0, "text": " Each time, it's going to print out, apparently, a question mark.", "tokens": [51432, 6947, 565, 11, 309, 311, 516, 281, 4482, 484, 11, 7970, 11, 257, 1168, 1491, 13, 51586], "temperature": 0.0, "avg_logprob": -0.1565408906736574, "compression_ratio": 1.6550522648083623, "no_speech_prob": 6.814762309659272e-05}, {"id": 1042, "seek": 311756, "start": 3142.0, "end": 3143.7999999999997, "text": " But now, just infer from this.", "tokens": [51586, 583, 586, 11, 445, 13596, 490, 341, 13, 51676], "temperature": 0.0, "avg_logprob": -0.1565408906736574, "compression_ratio": 1.6550522648083623, "no_speech_prob": 6.814762309659272e-05}, {"id": 1043, "seek": 311756, "start": 3143.7999999999997, "end": 3145.52, "text": " I haven't answered this question already.", "tokens": [51676, 286, 2378, 380, 10103, 341, 1168, 1217, 13, 51762], "temperature": 0.0, "avg_logprob": -0.1565408906736574, "compression_ratio": 1.6550522648083623, "no_speech_prob": 6.814762309659272e-05}, {"id": 1044, "seek": 314552, "start": 3145.56, "end": 3147.56, "text": " What else is going on on line four and why?", "tokens": [50366, 708, 1646, 307, 516, 322, 322, 1622, 1451, 293, 983, 30, 50466], "temperature": 0.0, "avg_logprob": -0.16097556567582927, "compression_ratio": 1.6074074074074074, "no_speech_prob": 0.0010322120506316423}, {"id": 1045, "seek": 314552, "start": 3150.68, "end": 3152.2, "text": " Not going to a new line, right?", "tokens": [50622, 1726, 516, 281, 257, 777, 1622, 11, 558, 30, 50698], "temperature": 0.0, "avg_logprob": -0.16097556567582927, "compression_ratio": 1.6074074074074074, "no_speech_prob": 0.0010322120506316423}, {"id": 1046, "seek": 314552, "start": 3152.2, "end": 3155.4, "text": " So there's always this trade-off in programming and CS more generally,", "tokens": [50698, 407, 456, 311, 1009, 341, 4923, 12, 4506, 294, 9410, 293, 9460, 544, 5101, 11, 50858], "temperature": 0.0, "avg_logprob": -0.16097556567582927, "compression_ratio": 1.6074074074074074, "no_speech_prob": 0.0010322120506316423}, {"id": 1047, "seek": 314552, "start": 3155.4, "end": 3158.84, "text": " like, yay, we took away the backslash n, which was annoying to type.", "tokens": [50858, 411, 11, 23986, 11, 321, 1890, 1314, 264, 646, 10418, 1299, 297, 11, 597, 390, 11304, 281, 2010, 13, 51030], "temperature": 0.0, "avg_logprob": -0.16097556567582927, "compression_ratio": 1.6074074074074074, "no_speech_prob": 0.0010322120506316423}, {"id": 1048, "seek": 314552, "start": 3158.84, "end": 3162.12, "text": " But now, if it's always there, how do you turn it off?", "tokens": [51030, 583, 586, 11, 498, 309, 311, 1009, 456, 11, 577, 360, 291, 1261, 309, 766, 30, 51194], "temperature": 0.0, "avg_logprob": -0.16097556567582927, "compression_ratio": 1.6074074074074074, "no_speech_prob": 0.0010322120506316423}, {"id": 1049, "seek": 314552, "start": 3162.12, "end": 3164.2, "text": " So this is one way to do that.", "tokens": [51194, 407, 341, 307, 472, 636, 281, 360, 300, 13, 51298], "temperature": 0.0, "avg_logprob": -0.16097556567582927, "compression_ratio": 1.6074074074074074, "no_speech_prob": 0.0010322120506316423}, {"id": 1050, "seek": 314552, "start": 3164.2, "end": 3168.36, "text": " And it also reveals another fundamental feature of Python.", "tokens": [51298, 400, 309, 611, 20893, 1071, 8088, 4111, 295, 15329, 13, 51506], "temperature": 0.0, "avg_logprob": -0.16097556567582927, "compression_ratio": 1.6074074074074074, "no_speech_prob": 0.0010322120506316423}, {"id": 1051, "seek": 314552, "start": 3168.36, "end": 3172.32, "text": " Notice that print apparently takes, in this case, more than one argument.", "tokens": [51506, 13428, 300, 4482, 7970, 2516, 11, 294, 341, 1389, 11, 544, 813, 472, 6770, 13, 51704], "temperature": 0.0, "avg_logprob": -0.16097556567582927, "compression_ratio": 1.6074074074074074, "no_speech_prob": 0.0010322120506316423}, {"id": 1052, "seek": 317232, "start": 3172.32, "end": 3175.92, "text": " The first is a string, literally, quote, unquote, and a question mark.", "tokens": [50364, 440, 700, 307, 257, 6798, 11, 3736, 11, 6513, 11, 37557, 11, 293, 257, 1168, 1491, 13, 50544], "temperature": 0.0, "avg_logprob": -0.14801529813403927, "compression_ratio": 1.6566037735849057, "no_speech_prob": 0.00011235185957048088}, {"id": 1053, "seek": 317232, "start": 3175.92, "end": 3178.52, "text": " The second is a little funkier.", "tokens": [50544, 440, 1150, 307, 257, 707, 26476, 811, 13, 50674], "temperature": 0.0, "avg_logprob": -0.14801529813403927, "compression_ratio": 1.6566037735849057, "no_speech_prob": 0.00011235185957048088}, {"id": 1054, "seek": 317232, "start": 3178.52, "end": 3183.92, "text": " It's like a word, and it's then an equal sign, and then it's a quote mark.", "tokens": [50674, 467, 311, 411, 257, 1349, 11, 293, 309, 311, 550, 364, 2681, 1465, 11, 293, 550, 309, 311, 257, 6513, 1491, 13, 50944], "temperature": 0.0, "avg_logprob": -0.14801529813403927, "compression_ratio": 1.6566037735849057, "no_speech_prob": 0.00011235185957048088}, {"id": 1055, "seek": 317232, "start": 3183.92, "end": 3185.32, "text": " So what is this here?", "tokens": [50944, 407, 437, 307, 341, 510, 30, 51014], "temperature": 0.0, "avg_logprob": -0.14801529813403927, "compression_ratio": 1.6566037735849057, "no_speech_prob": 0.00011235185957048088}, {"id": 1056, "seek": 317232, "start": 3185.32, "end": 3189.56, "text": " So it turns out, Python supports what are called named parameters.", "tokens": [51014, 407, 309, 4523, 484, 11, 15329, 9346, 437, 366, 1219, 4926, 9834, 13, 51226], "temperature": 0.0, "avg_logprob": -0.14801529813403927, "compression_ratio": 1.6566037735849057, "no_speech_prob": 0.00011235185957048088}, {"id": 1057, "seek": 317232, "start": 3189.56, "end": 3192.52, "text": " So in C, any parameters you pass through a function", "tokens": [51226, 407, 294, 383, 11, 604, 9834, 291, 1320, 807, 257, 2445, 51374], "temperature": 0.0, "avg_logprob": -0.14801529813403927, "compression_ratio": 1.6566037735849057, "no_speech_prob": 0.00011235185957048088}, {"id": 1058, "seek": 317232, "start": 3192.52, "end": 3196.0800000000004, "text": " are defined, ultimately, by way of their order.", "tokens": [51374, 366, 7642, 11, 6284, 11, 538, 636, 295, 641, 1668, 13, 51552], "temperature": 0.0, "avg_logprob": -0.14801529813403927, "compression_ratio": 1.6566037735849057, "no_speech_prob": 0.00011235185957048088}, {"id": 1059, "seek": 317232, "start": 3196.0800000000004, "end": 3200.2000000000003, "text": " Because even if a function takes arguments that have names, like x and y", "tokens": [51552, 1436, 754, 498, 257, 2445, 2516, 12869, 300, 362, 5288, 11, 411, 2031, 293, 288, 51758], "temperature": 0.0, "avg_logprob": -0.14801529813403927, "compression_ratio": 1.6566037735849057, "no_speech_prob": 0.00011235185957048088}, {"id": 1060, "seek": 320020, "start": 3200.2, "end": 3203.68, "text": " or a and b or whatever, when you call the function,", "tokens": [50364, 420, 257, 293, 272, 420, 2035, 11, 562, 291, 818, 264, 2445, 11, 50538], "temperature": 0.0, "avg_logprob": -0.11927789207396468, "compression_ratio": 1.7962264150943397, "no_speech_prob": 0.002251628553494811}, {"id": 1061, "seek": 320020, "start": 3203.68, "end": 3205.8399999999997, "text": " you do not mention those names.", "tokens": [50538, 291, 360, 406, 2152, 729, 5288, 13, 50646], "temperature": 0.0, "avg_logprob": -0.11927789207396468, "compression_ratio": 1.7962264150943397, "no_speech_prob": 0.002251628553494811}, {"id": 1062, "seek": 320020, "start": 3205.8399999999997, "end": 3208.08, "text": " You know they exist, and that's how you think about them", "tokens": [50646, 509, 458, 436, 2514, 11, 293, 300, 311, 577, 291, 519, 466, 552, 50758], "temperature": 0.0, "avg_logprob": -0.11927789207396468, "compression_ratio": 1.7962264150943397, "no_speech_prob": 0.002251628553494811}, {"id": 1063, "seek": 320020, "start": 3208.08, "end": 3210.7999999999997, "text": " in the documentation or in the original code.", "tokens": [50758, 294, 264, 14333, 420, 294, 264, 3380, 3089, 13, 50894], "temperature": 0.0, "avg_logprob": -0.11927789207396468, "compression_ratio": 1.7962264150943397, "no_speech_prob": 0.002251628553494811}, {"id": 1064, "seek": 320020, "start": 3210.7999999999997, "end": 3215.16, "text": " But you don't name the arguments as you pass them in and call a function.", "tokens": [50894, 583, 291, 500, 380, 1315, 264, 12869, 382, 291, 1320, 552, 294, 293, 818, 257, 2445, 13, 51112], "temperature": 0.0, "avg_logprob": -0.11927789207396468, "compression_ratio": 1.7962264150943397, "no_speech_prob": 0.002251628553494811}, {"id": 1065, "seek": 320020, "start": 3215.16, "end": 3218.48, "text": " You instead pass them in in the appropriate order per the man page", "tokens": [51112, 509, 2602, 1320, 552, 294, 294, 264, 6854, 1668, 680, 264, 587, 3028, 51278], "temperature": 0.0, "avg_logprob": -0.11927789207396468, "compression_ratio": 1.7962264150943397, "no_speech_prob": 0.002251628553494811}, {"id": 1066, "seek": 320020, "start": 3218.48, "end": 3220.48, "text": " or per the documentation.", "tokens": [51278, 420, 680, 264, 14333, 13, 51378], "temperature": 0.0, "avg_logprob": -0.11927789207396468, "compression_ratio": 1.7962264150943397, "no_speech_prob": 0.002251628553494811}, {"id": 1067, "seek": 320020, "start": 3220.48, "end": 3223.6, "text": " So in Python, you can actually be a little more flexible.", "tokens": [51378, 407, 294, 15329, 11, 291, 393, 767, 312, 257, 707, 544, 11358, 13, 51534], "temperature": 0.0, "avg_logprob": -0.11927789207396468, "compression_ratio": 1.7962264150943397, "no_speech_prob": 0.002251628553494811}, {"id": 1068, "seek": 320020, "start": 3223.6, "end": 3227.64, "text": " If a function takes multiple arguments, all of which have names,", "tokens": [51534, 759, 257, 2445, 2516, 3866, 12869, 11, 439, 295, 597, 362, 5288, 11, 51736], "temperature": 0.0, "avg_logprob": -0.11927789207396468, "compression_ratio": 1.7962264150943397, "no_speech_prob": 0.002251628553494811}, {"id": 1069, "seek": 322764, "start": 3227.64, "end": 3231.7999999999997, "text": " you can actually mention the names explicitly, thereby freeing you", "tokens": [50364, 291, 393, 767, 2152, 264, 5288, 20803, 11, 28281, 1737, 278, 291, 50572], "temperature": 0.0, "avg_logprob": -0.1153158216334101, "compression_ratio": 1.8101694915254238, "no_speech_prob": 0.0019266576273366809}, {"id": 1070, "seek": 322764, "start": 3231.7999999999997, "end": 3235.2, "text": " from the minor inconvenience of having to remember and always get right", "tokens": [50572, 490, 264, 6696, 28752, 1182, 295, 1419, 281, 1604, 293, 1009, 483, 558, 50742], "temperature": 0.0, "avg_logprob": -0.1153158216334101, "compression_ratio": 1.8101694915254238, "no_speech_prob": 0.0019266576273366809}, {"id": 1071, "seek": 322764, "start": 3235.2, "end": 3237.6, "text": " the actual order of arguments.", "tokens": [50742, 264, 3539, 1668, 295, 12869, 13, 50862], "temperature": 0.0, "avg_logprob": -0.1153158216334101, "compression_ratio": 1.8101694915254238, "no_speech_prob": 0.0019266576273366809}, {"id": 1072, "seek": 322764, "start": 3237.6, "end": 3241.64, "text": " So in this case, print apparently takes at least two arguments in this case,", "tokens": [50862, 407, 294, 341, 1389, 11, 4482, 7970, 2516, 412, 1935, 732, 12869, 294, 341, 1389, 11, 51064], "temperature": 0.0, "avg_logprob": -0.1153158216334101, "compression_ratio": 1.8101694915254238, "no_speech_prob": 0.0019266576273366809}, {"id": 1073, "seek": 322764, "start": 3241.64, "end": 3243.12, "text": " one of which is called end.", "tokens": [51064, 472, 295, 597, 307, 1219, 917, 13, 51138], "temperature": 0.0, "avg_logprob": -0.1153158216334101, "compression_ratio": 1.8101694915254238, "no_speech_prob": 0.0019266576273366809}, {"id": 1074, "seek": 322764, "start": 3243.12, "end": 3246.7999999999997, "text": " And if you want to use that one, which is clearly optional because I haven't", "tokens": [51138, 400, 498, 291, 528, 281, 764, 300, 472, 11, 597, 307, 4448, 17312, 570, 286, 2378, 380, 51322], "temperature": 0.0, "avg_logprob": -0.1153158216334101, "compression_ratio": 1.8101694915254238, "no_speech_prob": 0.0019266576273366809}, {"id": 1075, "seek": 322764, "start": 3246.7999999999997, "end": 3250.64, "text": " used it yet, you can literally mention it by name, set an equal sign,", "tokens": [51322, 1143, 309, 1939, 11, 291, 393, 3736, 2152, 309, 538, 1315, 11, 992, 364, 2681, 1465, 11, 51514], "temperature": 0.0, "avg_logprob": -0.1153158216334101, "compression_ratio": 1.8101694915254238, "no_speech_prob": 0.0019266576273366809}, {"id": 1076, "seek": 322764, "start": 3250.64, "end": 3253.04, "text": " and then specify the value that you want to pass in.", "tokens": [51514, 293, 550, 16500, 264, 2158, 300, 291, 528, 281, 1320, 294, 13, 51634], "temperature": 0.0, "avg_logprob": -0.1153158216334101, "compression_ratio": 1.8101694915254238, "no_speech_prob": 0.0019266576273366809}, {"id": 1077, "seek": 322764, "start": 3253.04, "end": 3257.04, "text": " So if I actually now go into this and go into weeks and one", "tokens": [51634, 407, 498, 286, 767, 586, 352, 666, 341, 293, 352, 666, 3259, 293, 472, 51834], "temperature": 0.0, "avg_logprob": -0.1153158216334101, "compression_ratio": 1.8101694915254238, "no_speech_prob": 0.0019266576273366809}, {"id": 1078, "seek": 325704, "start": 3257.04, "end": 3265.7599999999998, "text": " and do Python of mario1.py, whoops, I'll still get in week two.", "tokens": [50364, 293, 360, 15329, 295, 1849, 1004, 16, 13, 8200, 11, 567, 3370, 11, 286, 603, 920, 483, 294, 1243, 732, 13, 50800], "temperature": 0.0, "avg_logprob": -0.16420143694917033, "compression_ratio": 1.6571428571428573, "no_speech_prob": 0.014954997226595879}, {"id": 1079, "seek": 325704, "start": 3265.7599999999998, "end": 3270.52, "text": " If I get mario1.py, I still get four question marks.", "tokens": [50800, 759, 286, 483, 1849, 1004, 16, 13, 8200, 11, 286, 920, 483, 1451, 1168, 10640, 13, 51038], "temperature": 0.0, "avg_logprob": -0.16420143694917033, "compression_ratio": 1.6571428571428573, "no_speech_prob": 0.014954997226595879}, {"id": 1080, "seek": 325704, "start": 3270.52, "end": 3274.92, "text": " But that's the result of printing this with a line ending of quote unquote.", "tokens": [51038, 583, 300, 311, 264, 1874, 295, 14699, 341, 365, 257, 1622, 8121, 295, 6513, 37557, 13, 51258], "temperature": 0.0, "avg_logprob": -0.16420143694917033, "compression_ratio": 1.6571428571428573, "no_speech_prob": 0.014954997226595879}, {"id": 1081, "seek": 325704, "start": 3274.92, "end": 3278.08, "text": " If I do this, meanwhile, it's a little stupid because I'm", "tokens": [51258, 759, 286, 360, 341, 11, 29252, 11, 309, 311, 257, 707, 6631, 570, 286, 478, 51416], "temperature": 0.0, "avg_logprob": -0.16420143694917033, "compression_ratio": 1.6571428571428573, "no_speech_prob": 0.014954997226595879}, {"id": 1082, "seek": 325704, "start": 3278.08, "end": 3280.72, "text": " going to get that for free if I just omit it all together.", "tokens": [51416, 516, 281, 483, 300, 337, 1737, 498, 286, 445, 3406, 270, 309, 439, 1214, 13, 51548], "temperature": 0.0, "avg_logprob": -0.16420143694917033, "compression_ratio": 1.6571428571428573, "no_speech_prob": 0.014954997226595879}, {"id": 1083, "seek": 325704, "start": 3280.72, "end": 3282.52, "text": " But now I get four question marks here.", "tokens": [51548, 583, 586, 286, 483, 1451, 1168, 10640, 510, 13, 51638], "temperature": 0.0, "avg_logprob": -0.16420143694917033, "compression_ratio": 1.6571428571428573, "no_speech_prob": 0.014954997226595879}, {"id": 1084, "seek": 325704, "start": 3282.52, "end": 3286.2, "text": " And if you really want to be funky, you can do something", "tokens": [51638, 400, 498, 291, 534, 528, 281, 312, 33499, 11, 291, 393, 360, 746, 51822], "temperature": 0.0, "avg_logprob": -0.16420143694917033, "compression_ratio": 1.6571428571428573, "no_speech_prob": 0.014954997226595879}, {"id": 1085, "seek": 328620, "start": 3286.24, "end": 3292.56, "text": " like this, which is just going to be taken literally to give you that instead.", "tokens": [50366, 411, 341, 11, 597, 307, 445, 516, 281, 312, 2726, 3736, 281, 976, 291, 300, 2602, 13, 50682], "temperature": 0.0, "avg_logprob": -0.20892247432420233, "compression_ratio": 1.570921985815603, "no_speech_prob": 0.0032727497164160013}, {"id": 1086, "seek": 328620, "start": 3292.56, "end": 3299.3199999999997, "text": " Unclear utility of taking this approach, but that's all, sorry, that's going on.", "tokens": [50682, 12347, 289, 14877, 295, 1940, 341, 3109, 11, 457, 300, 311, 439, 11, 2597, 11, 300, 311, 516, 322, 13, 51020], "temperature": 0.0, "avg_logprob": -0.20892247432420233, "compression_ratio": 1.570921985815603, "no_speech_prob": 0.0032727497164160013}, {"id": 1087, "seek": 328620, "start": 3299.3199999999997, "end": 3300.8799999999997, "text": " Let's take a look at mario2.", "tokens": [51020, 961, 311, 747, 257, 574, 412, 1849, 1004, 17, 13, 51098], "temperature": 0.0, "avg_logprob": -0.20892247432420233, "compression_ratio": 1.570921985815603, "no_speech_prob": 0.0032727497164160013}, {"id": 1088, "seek": 328620, "start": 3300.8799999999997, "end": 3302.64, "text": " This one works a little differently as well.", "tokens": [51098, 639, 472, 1985, 257, 707, 7614, 382, 731, 13, 51186], "temperature": 0.0, "avg_logprob": -0.20892247432420233, "compression_ratio": 1.570921985815603, "no_speech_prob": 0.0032727497164160013}, {"id": 1089, "seek": 328620, "start": 3302.64, "end": 3305.68, "text": " And how would you describe the feature offered by this version of mario?", "tokens": [51186, 400, 577, 576, 291, 6786, 264, 4111, 8059, 538, 341, 3037, 295, 1849, 1004, 30, 51338], "temperature": 0.0, "avg_logprob": -0.20892247432420233, "compression_ratio": 1.570921985815603, "no_speech_prob": 0.0032727497164160013}, {"id": 1090, "seek": 328620, "start": 3309.3599999999997, "end": 3311.2799999999997, "text": " Print any number of question marks perfectly.", "tokens": [51522, 34439, 604, 1230, 295, 1168, 10640, 6239, 13, 51618], "temperature": 0.0, "avg_logprob": -0.20892247432420233, "compression_ratio": 1.570921985815603, "no_speech_prob": 0.0032727497164160013}, {"id": 1091, "seek": 328620, "start": 3311.2799999999997, "end": 3313.7999999999997, "text": " So it's parameterized by first getting an int from the user,", "tokens": [51618, 407, 309, 311, 13075, 1602, 538, 700, 1242, 364, 560, 490, 264, 4195, 11, 51744], "temperature": 0.0, "avg_logprob": -0.20892247432420233, "compression_ratio": 1.570921985815603, "no_speech_prob": 0.0032727497164160013}, {"id": 1092, "seek": 328620, "start": 3313.7999999999997, "end": 3315.68, "text": " using CS50's getInt function.", "tokens": [51744, 1228, 9460, 2803, 311, 483, 25597, 2445, 13, 51838], "temperature": 0.0, "avg_logprob": -0.20892247432420233, "compression_ratio": 1.570921985815603, "no_speech_prob": 0.0032727497164160013}, {"id": 1093, "seek": 331568, "start": 3315.68, "end": 3319.7599999999998, "text": " And now I'm iterating from i to the range of n, whatever that is,", "tokens": [50364, 400, 586, 286, 478, 17138, 990, 490, 741, 281, 264, 3613, 295, 297, 11, 2035, 300, 307, 11, 50568], "temperature": 0.0, "avg_logprob": -0.16149507030364005, "compression_ratio": 1.5773584905660378, "no_speech_prob": 0.00015355573850683868}, {"id": 1094, "seek": 331568, "start": 3319.7599999999998, "end": 3322.68, "text": " and then actually printing out the question marks.", "tokens": [50568, 293, 550, 767, 14699, 484, 264, 1168, 10640, 13, 50714], "temperature": 0.0, "avg_logprob": -0.16149507030364005, "compression_ratio": 1.5773584905660378, "no_speech_prob": 0.00015355573850683868}, {"id": 1095, "seek": 331568, "start": 3322.68, "end": 3326.8399999999997, "text": " Meanwhile, in mario3.py, a little fancier still,", "tokens": [50714, 13879, 11, 294, 1849, 1004, 18, 13, 8200, 11, 257, 707, 3429, 27674, 920, 11, 50922], "temperature": 0.0, "avg_logprob": -0.16149507030364005, "compression_ratio": 1.5773584905660378, "no_speech_prob": 0.00015355573850683868}, {"id": 1096, "seek": 331568, "start": 3326.8399999999997, "end": 3328.6, "text": " but what am I doing a little better now?", "tokens": [50922, 457, 437, 669, 286, 884, 257, 707, 1101, 586, 30, 51010], "temperature": 0.0, "avg_logprob": -0.16149507030364005, "compression_ratio": 1.5773584905660378, "no_speech_prob": 0.00015355573850683868}, {"id": 1097, "seek": 331568, "start": 3336.48, "end": 3338.2799999999997, "text": " Yeah, I'm just making sure that the n is positive.", "tokens": [51404, 865, 11, 286, 478, 445, 1455, 988, 300, 264, 297, 307, 3353, 13, 51494], "temperature": 0.0, "avg_logprob": -0.16149507030364005, "compression_ratio": 1.5773584905660378, "no_speech_prob": 0.00015355573850683868}, {"id": 1098, "seek": 331568, "start": 3338.2799999999997, "end": 3341.64, "text": " So I didn't bother implementing a whole function called getPositiveAnt.", "tokens": [51494, 407, 286, 994, 380, 8677, 18114, 257, 1379, 2445, 1219, 483, 47, 329, 2187, 35807, 13, 51662], "temperature": 0.0, "avg_logprob": -0.16149507030364005, "compression_ratio": 1.5773584905660378, "no_speech_prob": 0.00015355573850683868}, {"id": 1099, "seek": 331568, "start": 3341.64, "end": 3342.2, "text": " I don't need that.", "tokens": [51662, 286, 500, 380, 643, 300, 13, 51690], "temperature": 0.0, "avg_logprob": -0.16149507030364005, "compression_ratio": 1.5773584905660378, "no_speech_prob": 0.00015355573850683868}, {"id": 1100, "seek": 331568, "start": 3342.2, "end": 3343.64, "text": " This is a super short program.", "tokens": [51690, 639, 307, 257, 1687, 2099, 1461, 13, 51762], "temperature": 0.0, "avg_logprob": -0.16149507030364005, "compression_ratio": 1.5773584905660378, "no_speech_prob": 0.00015355573850683868}, {"id": 1101, "seek": 331568, "start": 3343.64, "end": 3345.52, "text": " I'm just using the same logic up here.", "tokens": [51762, 286, 478, 445, 1228, 264, 912, 9952, 493, 510, 13, 51856], "temperature": 0.0, "avg_logprob": -0.16149507030364005, "compression_ratio": 1.5773584905660378, "no_speech_prob": 0.00015355573850683868}, {"id": 1102, "seek": 334552, "start": 3345.52, "end": 3348.08, "text": " Inducing deliberately an infinite loop, breaking out of it", "tokens": [50364, 2333, 1311, 278, 23506, 364, 13785, 6367, 11, 7697, 484, 295, 309, 50492], "temperature": 0.0, "avg_logprob": -0.16010223037895116, "compression_ratio": 1.567099567099567, "no_speech_prob": 0.0018100497545674443}, {"id": 1103, "seek": 334552, "start": 3348.08, "end": 3350.24, "text": " only when I've gotten back a positive integer,", "tokens": [50492, 787, 562, 286, 600, 5768, 646, 257, 3353, 24922, 11, 50600], "temperature": 0.0, "avg_logprob": -0.16010223037895116, "compression_ratio": 1.567099567099567, "no_speech_prob": 0.0018100497545674443}, {"id": 1104, "seek": 334552, "start": 3350.24, "end": 3354.7599999999998, "text": " and then printing out that many of hashtags reminiscent of the bricks", "tokens": [50600, 293, 550, 14699, 484, 300, 867, 295, 50016, 44304, 295, 264, 25497, 50826], "temperature": 0.0, "avg_logprob": -0.16010223037895116, "compression_ratio": 1.567099567099567, "no_speech_prob": 0.0018100497545674443}, {"id": 1105, "seek": 334552, "start": 3354.7599999999998, "end": 3355.6, "text": " in mario.", "tokens": [50826, 294, 1849, 1004, 13, 50868], "temperature": 0.0, "avg_logprob": -0.16010223037895116, "compression_ratio": 1.567099567099567, "no_speech_prob": 0.0018100497545674443}, {"id": 1106, "seek": 334552, "start": 3355.6, "end": 3359.72, "text": " And then lastly, we have this slightly more sophisticated version that", "tokens": [50868, 400, 550, 16386, 11, 321, 362, 341, 4748, 544, 16950, 3037, 300, 51074], "temperature": 0.0, "avg_logprob": -0.16010223037895116, "compression_ratio": 1.567099567099567, "no_speech_prob": 0.0018100497545674443}, {"id": 1107, "seek": 334552, "start": 3359.72, "end": 3363.16, "text": " actually prints out a different shape altogether.", "tokens": [51074, 767, 22305, 484, 257, 819, 3909, 19051, 13, 51246], "temperature": 0.0, "avg_logprob": -0.16010223037895116, "compression_ratio": 1.567099567099567, "no_speech_prob": 0.0018100497545674443}, {"id": 1108, "seek": 334552, "start": 3363.16, "end": 3366.0, "text": " You can infer from the comments, but focus more on why.", "tokens": [51246, 509, 393, 13596, 490, 264, 3053, 11, 457, 1879, 544, 322, 983, 13, 51388], "temperature": 0.0, "avg_logprob": -0.16010223037895116, "compression_ratio": 1.567099567099567, "no_speech_prob": 0.0018100497545674443}, {"id": 1109, "seek": 336600, "start": 3366.0, "end": 3377.24, "text": " So this first line 12 iterates from i to n, whatever n is, that the user typed in.", "tokens": [50364, 407, 341, 700, 1622, 2272, 17138, 1024, 490, 741, 281, 297, 11, 2035, 297, 307, 11, 300, 264, 4195, 33941, 294, 13, 50926], "temperature": 0.0, "avg_logprob": -0.2159513390582541, "compression_ratio": 1.705069124423963, "no_speech_prob": 0.0003353389329276979}, {"id": 1110, "seek": 336600, "start": 3377.24, "end": 3384.16, "text": " Meanwhile, line 15, indented, iterates from j from 0 up to n as well.", "tokens": [50926, 13879, 11, 1622, 2119, 11, 1016, 6003, 11, 17138, 1024, 490, 361, 490, 1958, 493, 281, 297, 382, 731, 13, 51272], "temperature": 0.0, "avg_logprob": -0.2159513390582541, "compression_ratio": 1.705069124423963, "no_speech_prob": 0.0003353389329276979}, {"id": 1111, "seek": 336600, "start": 3384.16, "end": 3387.84, "text": " So this is kind of like our canonical forint i gets 0, dot, dot, dot,", "tokens": [51272, 407, 341, 307, 733, 295, 411, 527, 46491, 337, 686, 741, 2170, 1958, 11, 5893, 11, 5893, 11, 5893, 11, 51456], "temperature": 0.0, "avg_logprob": -0.2159513390582541, "compression_ratio": 1.705069124423963, "no_speech_prob": 0.0003353389329276979}, {"id": 1112, "seek": 336600, "start": 3387.84, "end": 3391.64, "text": " forint j gets 0, dot, dot, dot, where we've had nested loops in the past.", "tokens": [51456, 337, 686, 361, 2170, 1958, 11, 5893, 11, 5893, 11, 5893, 11, 689, 321, 600, 632, 15646, 292, 16121, 294, 264, 1791, 13, 51646], "temperature": 0.0, "avg_logprob": -0.2159513390582541, "compression_ratio": 1.705069124423963, "no_speech_prob": 0.0003353389329276979}, {"id": 1113, "seek": 336600, "start": 3391.64, "end": 3394.88, "text": " So notice, now that we have this building block, which is a line of code,", "tokens": [51646, 407, 3449, 11, 586, 300, 321, 362, 341, 2390, 3461, 11, 597, 307, 257, 1622, 295, 3089, 11, 51808], "temperature": 0.0, "avg_logprob": -0.2159513390582541, "compression_ratio": 1.705069124423963, "no_speech_prob": 0.0003353389329276979}, {"id": 1114, "seek": 339488, "start": 3394.88, "end": 3396.76, "text": " or kind of conceptually just a scratch piece,", "tokens": [50364, 420, 733, 295, 3410, 671, 445, 257, 8459, 2522, 11, 50458], "temperature": 0.0, "avg_logprob": -0.1406113030253977, "compression_ratio": 1.6942446043165467, "no_speech_prob": 0.013221328146755695}, {"id": 1115, "seek": 339488, "start": 3396.76, "end": 3398.6400000000003, "text": " we can embed one inside of the other.", "tokens": [50458, 321, 393, 12240, 472, 1854, 295, 264, 661, 13, 50552], "temperature": 0.0, "avg_logprob": -0.1406113030253977, "compression_ratio": 1.6942446043165467, "no_speech_prob": 0.013221328146755695}, {"id": 1116, "seek": 339488, "start": 3398.6400000000003, "end": 3401.6, "text": " Here, I can print out a hashtag, making sure not to put a new line", "tokens": [50552, 1692, 11, 286, 393, 4482, 484, 257, 20379, 11, 1455, 988, 406, 281, 829, 257, 777, 1622, 50700], "temperature": 0.0, "avg_logprob": -0.1406113030253977, "compression_ratio": 1.6942446043165467, "no_speech_prob": 0.013221328146755695}, {"id": 1117, "seek": 339488, "start": 3401.6, "end": 3406.32, "text": " after every single hashtag I print out, only printing out a new line,", "tokens": [50700, 934, 633, 2167, 20379, 286, 4482, 484, 11, 787, 14699, 484, 257, 777, 1622, 11, 50936], "temperature": 0.0, "avg_logprob": -0.1406113030253977, "compression_ratio": 1.6942446043165467, "no_speech_prob": 0.013221328146755695}, {"id": 1118, "seek": 339488, "start": 3406.32, "end": 3410.0, "text": " on line 17, on each iteration of the outer loop.", "tokens": [50936, 322, 1622, 3282, 11, 322, 1184, 24784, 295, 264, 10847, 6367, 13, 51120], "temperature": 0.0, "avg_logprob": -0.1406113030253977, "compression_ratio": 1.6942446043165467, "no_speech_prob": 0.013221328146755695}, {"id": 1119, "seek": 339488, "start": 3410.0, "end": 3414.6, "text": " And now notice, whereas in C, we would have done this historically,", "tokens": [51120, 400, 586, 3449, 11, 9735, 294, 383, 11, 321, 576, 362, 1096, 341, 16180, 11, 51350], "temperature": 0.0, "avg_logprob": -0.1406113030253977, "compression_ratio": 1.6942446043165467, "no_speech_prob": 0.013221328146755695}, {"id": 1120, "seek": 339488, "start": 3414.6, "end": 3415.6400000000003, "text": " and that's fine.", "tokens": [51350, 293, 300, 311, 2489, 13, 51402], "temperature": 0.0, "avg_logprob": -0.1406113030253977, "compression_ratio": 1.6942446043165467, "no_speech_prob": 0.013221328146755695}, {"id": 1121, "seek": 339488, "start": 3415.6400000000003, "end": 3419.6800000000003, "text": " In Python, we don't need the f, and we also don't need the backslash n.", "tokens": [51402, 682, 15329, 11, 321, 500, 380, 643, 264, 283, 11, 293, 321, 611, 500, 380, 643, 264, 646, 10418, 1299, 297, 13, 51604], "temperature": 0.0, "avg_logprob": -0.1406113030253977, "compression_ratio": 1.6942446043165467, "no_speech_prob": 0.013221328146755695}, {"id": 1122, "seek": 339488, "start": 3419.6800000000003, "end": 3421.6800000000003, "text": " So ergo, you can simply do print, and you'll", "tokens": [51604, 407, 1189, 1571, 11, 291, 393, 2935, 360, 4482, 11, 293, 291, 603, 51704], "temperature": 0.0, "avg_logprob": -0.1406113030253977, "compression_ratio": 1.6942446043165467, "no_speech_prob": 0.013221328146755695}, {"id": 1123, "seek": 342168, "start": 3421.68, "end": 3425.08, "text": " get, if nothing else, a backslash n automatically,", "tokens": [50364, 483, 11, 498, 1825, 1646, 11, 257, 646, 10418, 1299, 297, 6772, 11, 50534], "temperature": 0.0, "avg_logprob": -0.18401727858622363, "compression_ratio": 1.6545961002785516, "no_speech_prob": 0.009411568753421307}, {"id": 1124, "seek": 342168, "start": 3425.08, "end": 3427.56, "text": " so that now, when I run this version of Mario,", "tokens": [50534, 370, 300, 586, 11, 562, 286, 1190, 341, 3037, 295, 9343, 11, 50658], "temperature": 0.0, "avg_logprob": -0.18401727858622363, "compression_ratio": 1.6545961002785516, "no_speech_prob": 0.009411568753421307}, {"id": 1125, "seek": 342168, "start": 3427.56, "end": 3429.2799999999997, "text": " we now get something more interesting.", "tokens": [50658, 321, 586, 483, 746, 544, 1880, 13, 50744], "temperature": 0.0, "avg_logprob": -0.18401727858622363, "compression_ratio": 1.6545961002785516, "no_speech_prob": 0.009411568753421307}, {"id": 1126, "seek": 342168, "start": 3429.2799999999997, "end": 3431.64, "text": " And I'll increase the size of my terminal window for this,", "tokens": [50744, 400, 286, 603, 3488, 264, 2744, 295, 452, 14709, 4910, 337, 341, 11, 50862], "temperature": 0.0, "avg_logprob": -0.18401727858622363, "compression_ratio": 1.6545961002785516, "no_speech_prob": 0.009411568753421307}, {"id": 1127, "seek": 342168, "start": 3431.64, "end": 3434.44, "text": " so that I can enter a positive number like this, and print 10.", "tokens": [50862, 370, 300, 286, 393, 3242, 257, 3353, 1230, 411, 341, 11, 293, 4482, 1266, 13, 51002], "temperature": 0.0, "avg_logprob": -0.18401727858622363, "compression_ratio": 1.6545961002785516, "no_speech_prob": 0.009411568753421307}, {"id": 1128, "seek": 342168, "start": 3434.44, "end": 3435.9199999999996, "text": " And now we've got a whole block.", "tokens": [51002, 400, 586, 321, 600, 658, 257, 1379, 3461, 13, 51076], "temperature": 0.0, "avg_logprob": -0.18401727858622363, "compression_ratio": 1.6545961002785516, "no_speech_prob": 0.009411568753421307}, {"id": 1129, "seek": 342168, "start": 3435.9199999999996, "end": 3436.7999999999997, "text": " So that was a lot.", "tokens": [51076, 407, 300, 390, 257, 688, 13, 51120], "temperature": 0.0, "avg_logprob": -0.18401727858622363, "compression_ratio": 1.6545961002785516, "no_speech_prob": 0.009411568753421307}, {"id": 1130, "seek": 342168, "start": 3436.7999999999997, "end": 3439.3199999999997, "text": " Let's go ahead and take our five minute break here, and we'll come back.", "tokens": [51120, 961, 311, 352, 2286, 293, 747, 527, 1732, 3456, 1821, 510, 11, 293, 321, 603, 808, 646, 13, 51246], "temperature": 0.0, "avg_logprob": -0.18401727858622363, "compression_ratio": 1.6545961002785516, "no_speech_prob": 0.009411568753421307}, {"id": 1131, "seek": 342168, "start": 3439.3199999999997, "end": 3442.04, "text": " We'll look at some more sophisticated examples still.", "tokens": [51246, 492, 603, 574, 412, 512, 544, 16950, 5110, 920, 13, 51382], "temperature": 0.0, "avg_logprob": -0.18401727858622363, "compression_ratio": 1.6545961002785516, "no_speech_prob": 0.009411568753421307}, {"id": 1132, "seek": 342168, "start": 3442.04, "end": 3442.9199999999996, "text": " All right.", "tokens": [51382, 1057, 558, 13, 51426], "temperature": 0.0, "avg_logprob": -0.18401727858622363, "compression_ratio": 1.6545961002785516, "no_speech_prob": 0.009411568753421307}, {"id": 1133, "seek": 342168, "start": 3442.9199999999996, "end": 3448.04, "text": " So let's begin to start to transition to actually solving problems with Python", "tokens": [51426, 407, 718, 311, 1841, 281, 722, 281, 6034, 281, 767, 12606, 2740, 365, 15329, 51682], "temperature": 0.0, "avg_logprob": -0.18401727858622363, "compression_ratio": 1.6545961002785516, "no_speech_prob": 0.009411568753421307}, {"id": 1134, "seek": 342168, "start": 3448.04, "end": 3450.3599999999997, "text": " after introducing just a couple of additional features that aren't", "tokens": [51682, 934, 15424, 445, 257, 1916, 295, 4497, 4122, 300, 3212, 380, 51798], "temperature": 0.0, "avg_logprob": -0.18401727858622363, "compression_ratio": 1.6545961002785516, "no_speech_prob": 0.009411568753421307}, {"id": 1135, "seek": 345036, "start": 3450.36, "end": 3454.1200000000003, "text": " so much syntactic, but actual features of the language.", "tokens": [50364, 370, 709, 23980, 19892, 11, 457, 3539, 4122, 295, 264, 2856, 13, 50552], "temperature": 0.0, "avg_logprob": -0.1434622151511056, "compression_ratio": 1.5769230769230769, "no_speech_prob": 0.03020622208714485}, {"id": 1136, "seek": 345036, "start": 3454.1200000000003, "end": 3458.56, "text": " So here on the left was an old program we wrote in week three called argv0.c.", "tokens": [50552, 407, 510, 322, 264, 1411, 390, 364, 1331, 1461, 321, 4114, 294, 1243, 1045, 1219, 3882, 85, 15, 13, 66, 13, 50774], "temperature": 0.0, "avg_logprob": -0.1434622151511056, "compression_ratio": 1.5769230769230769, "no_speech_prob": 0.03020622208714485}, {"id": 1137, "seek": 345036, "start": 3458.56, "end": 3461.6800000000003, "text": " And its purpose in life was simply to allow you to run a command line", "tokens": [50774, 400, 1080, 4334, 294, 993, 390, 2935, 281, 2089, 291, 281, 1190, 257, 5622, 1622, 50930], "temperature": 0.0, "avg_logprob": -0.1434622151511056, "compression_ratio": 1.5769230769230769, "no_speech_prob": 0.03020622208714485}, {"id": 1138, "seek": 345036, "start": 3461.6800000000003, "end": 3463.2000000000003, "text": " argument for the very first time.", "tokens": [50930, 6770, 337, 264, 588, 700, 565, 13, 51006], "temperature": 0.0, "avg_logprob": -0.1434622151511056, "compression_ratio": 1.5769230769230769, "no_speech_prob": 0.03020622208714485}, {"id": 1139, "seek": 345036, "start": 3463.2000000000003, "end": 3465.2400000000002, "text": " And that was a nice tool to have in our toolkit.", "tokens": [51006, 400, 300, 390, 257, 1481, 2290, 281, 362, 294, 527, 40167, 13, 51108], "temperature": 0.0, "avg_logprob": -0.1434622151511056, "compression_ratio": 1.5769230769230769, "no_speech_prob": 0.03020622208714485}, {"id": 1140, "seek": 345036, "start": 3465.2400000000002, "end": 3467.0, "text": " So how might we go ahead and map this?", "tokens": [51108, 407, 577, 1062, 321, 352, 2286, 293, 4471, 341, 30, 51196], "temperature": 0.0, "avg_logprob": -0.1434622151511056, "compression_ratio": 1.5769230769230769, "no_speech_prob": 0.03020622208714485}, {"id": 1141, "seek": 345036, "start": 3467.0, "end": 3470.7200000000003, "text": " Well, we actually need to know how Python works a little bit differently", "tokens": [51196, 1042, 11, 321, 767, 643, 281, 458, 577, 15329, 1985, 257, 707, 857, 7614, 51382], "temperature": 0.0, "avg_logprob": -0.1434622151511056, "compression_ratio": 1.5769230769230769, "no_speech_prob": 0.03020622208714485}, {"id": 1142, "seek": 345036, "start": 3470.7200000000003, "end": 3471.52, "text": " as follows.", "tokens": [51382, 382, 10002, 13, 51422], "temperature": 0.0, "avg_logprob": -0.1434622151511056, "compression_ratio": 1.5769230769230769, "no_speech_prob": 0.03020622208714485}, {"id": 1143, "seek": 347152, "start": 3471.52, "end": 3483.92, "text": " If I go ahead and open a new file called, let's call it argv0.py,", "tokens": [50364, 759, 286, 352, 2286, 293, 1269, 257, 777, 3991, 1219, 11, 718, 311, 818, 309, 3882, 85, 15, 13, 8200, 11, 50984], "temperature": 0.0, "avg_logprob": -0.14103456338246664, "compression_ratio": 1.5642857142857143, "no_speech_prob": 0.01912272721529007}, {"id": 1144, "seek": 347152, "start": 3483.92, "end": 3486.88, "text": " I'm going to go ahead and translate this just as we did earlier.", "tokens": [50984, 286, 478, 516, 281, 352, 2286, 293, 13799, 341, 445, 382, 321, 630, 3071, 13, 51132], "temperature": 0.0, "avg_logprob": -0.14103456338246664, "compression_ratio": 1.5642857142857143, "no_speech_prob": 0.01912272721529007}, {"id": 1145, "seek": 347152, "start": 3486.88, "end": 3492.36, "text": " So I'm going to go ahead and want to use the following.", "tokens": [51132, 407, 286, 478, 516, 281, 352, 2286, 293, 528, 281, 764, 264, 3480, 13, 51406], "temperature": 0.0, "avg_logprob": -0.14103456338246664, "compression_ratio": 1.5642857142857143, "no_speech_prob": 0.01912272721529007}, {"id": 1146, "seek": 347152, "start": 3492.36, "end": 3496.4, "text": " So if argc, so there is no argc.", "tokens": [51406, 407, 498, 3882, 66, 11, 370, 456, 307, 572, 3882, 66, 13, 51608], "temperature": 0.0, "avg_logprob": -0.14103456338246664, "compression_ratio": 1.5642857142857143, "no_speech_prob": 0.01912272721529007}, {"id": 1147, "seek": 349640, "start": 3497.1600000000003, "end": 3501.48, "text": " So def main, there was also no argc or argv.", "tokens": [50402, 407, 1060, 2135, 11, 456, 390, 611, 572, 3882, 66, 420, 3882, 85, 13, 50618], "temperature": 0.0, "avg_logprob": -0.1307249290998592, "compression_ratio": 1.6914893617021276, "no_speech_prob": 0.01450226828455925}, {"id": 1148, "seek": 349640, "start": 3501.48, "end": 3506.32, "text": " And it's not actually correct to do this and this, as you might assume.", "tokens": [50618, 400, 309, 311, 406, 767, 3006, 281, 360, 341, 293, 341, 11, 382, 291, 1062, 6552, 13, 50860], "temperature": 0.0, "avg_logprob": -0.1307249290998592, "compression_ratio": 1.6914893617021276, "no_speech_prob": 0.01450226828455925}, {"id": 1149, "seek": 349640, "start": 3506.32, "end": 3509.84, "text": " It turns out that the feature command line arguments are provided by a Python", "tokens": [50860, 467, 4523, 484, 300, 264, 4111, 5622, 1622, 12869, 366, 5649, 538, 257, 15329, 51036], "temperature": 0.0, "avg_logprob": -0.1307249290998592, "compression_ratio": 1.6914893617021276, "no_speech_prob": 0.01450226828455925}, {"id": 1150, "seek": 349640, "start": 3509.84, "end": 3514.04, "text": " package, so to speak, or a library, much like the CS50 library is a package", "tokens": [51036, 7372, 11, 370, 281, 1710, 11, 420, 257, 6405, 11, 709, 411, 264, 9460, 2803, 6405, 307, 257, 7372, 51246], "temperature": 0.0, "avg_logprob": -0.1307249290998592, "compression_ratio": 1.6914893617021276, "no_speech_prob": 0.01450226828455925}, {"id": 1151, "seek": 349640, "start": 3514.04, "end": 3516.08, "text": " that you can import in Python speak.", "tokens": [51246, 300, 291, 393, 974, 294, 15329, 1710, 13, 51348], "temperature": 0.0, "avg_logprob": -0.1307249290998592, "compression_ratio": 1.6914893617021276, "no_speech_prob": 0.01450226828455925}, {"id": 1152, "seek": 349640, "start": 3516.08, "end": 3518.44, "text": " So to do this, I actually need to do this.", "tokens": [51348, 407, 281, 360, 341, 11, 286, 767, 643, 281, 360, 341, 13, 51466], "temperature": 0.0, "avg_logprob": -0.1307249290998592, "compression_ratio": 1.6914893617021276, "no_speech_prob": 0.01450226828455925}, {"id": 1153, "seek": 349640, "start": 3518.44, "end": 3522.2400000000002, "text": " Import sys, which gives me access to a whole bunch of system related stuff", "tokens": [51466, 26391, 262, 749, 11, 597, 2709, 385, 2105, 281, 257, 1379, 3840, 295, 1185, 4077, 1507, 51656], "temperature": 0.0, "avg_logprob": -0.1307249290998592, "compression_ratio": 1.6914893617021276, "no_speech_prob": 0.01450226828455925}, {"id": 1154, "seek": 349640, "start": 3522.2400000000002, "end": 3524.56, "text": " like what the user has typed at the command prompt.", "tokens": [51656, 411, 437, 264, 4195, 575, 33941, 412, 264, 5622, 12391, 13, 51772], "temperature": 0.0, "avg_logprob": -0.1307249290998592, "compression_ratio": 1.6914893617021276, "no_speech_prob": 0.01450226828455925}, {"id": 1155, "seek": 352456, "start": 3524.6, "end": 3528.96, "text": " And if I want to check if the number of words that the human typed at the prompt", "tokens": [50366, 400, 498, 286, 528, 281, 1520, 498, 264, 1230, 295, 2283, 300, 264, 1952, 33941, 412, 264, 12391, 50584], "temperature": 0.0, "avg_logprob": -0.1631565420036642, "compression_ratio": 1.6485355648535565, "no_speech_prob": 0.0011335151502862573}, {"id": 1156, "seek": 352456, "start": 3528.96, "end": 3531.48, "text": " is 2, I actually am going to do this.", "tokens": [50584, 307, 568, 11, 286, 767, 669, 516, 281, 360, 341, 13, 50710], "temperature": 0.0, "avg_logprob": -0.1631565420036642, "compression_ratio": 1.6485355648535565, "no_speech_prob": 0.0011335151502862573}, {"id": 1157, "seek": 352456, "start": 3531.48, "end": 3537.6, "text": " If the length of sys.argv equals 2, then I'm", "tokens": [50710, 759, 264, 4641, 295, 262, 749, 13, 33544, 85, 6915, 568, 11, 550, 286, 478, 51016], "temperature": 0.0, "avg_logprob": -0.1631565420036642, "compression_ratio": 1.6485355648535565, "no_speech_prob": 0.0011335151502862573}, {"id": 1158, "seek": 352456, "start": 3537.6, "end": 3543.88, "text": " going to go ahead and print out, quote unquote, hello, comma,", "tokens": [51016, 516, 281, 352, 2286, 293, 4482, 484, 11, 6513, 37557, 11, 7751, 11, 22117, 11, 51330], "temperature": 0.0, "avg_logprob": -0.1631565420036642, "compression_ratio": 1.6485355648535565, "no_speech_prob": 0.0011335151502862573}, {"id": 1159, "seek": 352456, "start": 3543.88, "end": 3545.92, "text": " and then a placeholder here.", "tokens": [51330, 293, 550, 257, 1081, 20480, 510, 13, 51432], "temperature": 0.0, "avg_logprob": -0.1631565420036642, "compression_ratio": 1.6485355648535565, "no_speech_prob": 0.0011335151502862573}, {"id": 1160, "seek": 352456, "start": 3545.92, "end": 3548.92, "text": " I know for placeholders I need to turn this into a formatted string,", "tokens": [51432, 286, 458, 337, 1081, 12916, 286, 643, 281, 1261, 341, 666, 257, 1254, 32509, 6798, 11, 51582], "temperature": 0.0, "avg_logprob": -0.1631565420036642, "compression_ratio": 1.6485355648535565, "no_speech_prob": 0.0011335151502862573}, {"id": 1161, "seek": 352456, "start": 3548.92, "end": 3550.56, "text": " so an f string there.", "tokens": [51582, 370, 364, 283, 6798, 456, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1631565420036642, "compression_ratio": 1.6485355648535565, "no_speech_prob": 0.0011335151502862573}, {"id": 1162, "seek": 352456, "start": 3550.56, "end": 3553.68, "text": " And now inside of the curly braces, it turns out", "tokens": [51664, 400, 586, 1854, 295, 264, 32066, 41537, 11, 309, 4523, 484, 51820], "temperature": 0.0, "avg_logprob": -0.1631565420036642, "compression_ratio": 1.6485355648535565, "no_speech_prob": 0.0011335151502862573}, {"id": 1163, "seek": 355368, "start": 3553.68, "end": 3558.24, "text": " I can do sys.argv bracket 1.", "tokens": [50364, 286, 393, 360, 262, 749, 13, 33544, 85, 16904, 502, 13, 50592], "temperature": 0.0, "avg_logprob": -0.1357155164082845, "compression_ratio": 1.5431654676258992, "no_speech_prob": 0.0012842449359595776}, {"id": 1164, "seek": 355368, "start": 3558.24, "end": 3561.6, "text": " So it's a little different from before, but notice I'm barring almost", "tokens": [50592, 407, 309, 311, 257, 707, 819, 490, 949, 11, 457, 3449, 286, 478, 2159, 2937, 1920, 50760], "temperature": 0.0, "avg_logprob": -0.1357155164082845, "compression_ratio": 1.5431654676258992, "no_speech_prob": 0.0012842449359595776}, {"id": 1165, "seek": 355368, "start": 3561.6, "end": 3565.44, "text": " all the same ideas as earlier, including how we're printing out strings.", "tokens": [50760, 439, 264, 912, 3487, 382, 3071, 11, 3009, 577, 321, 434, 14699, 484, 13985, 13, 50952], "temperature": 0.0, "avg_logprob": -0.1357155164082845, "compression_ratio": 1.5431654676258992, "no_speech_prob": 0.0012842449359595776}, {"id": 1166, "seek": 355368, "start": 3565.44, "end": 3567.3199999999997, "text": " And even though this is a little more verbose, what", "tokens": [50952, 400, 754, 1673, 341, 307, 257, 707, 544, 9595, 541, 11, 437, 51046], "temperature": 0.0, "avg_logprob": -0.1357155164082845, "compression_ratio": 1.5431654676258992, "no_speech_prob": 0.0012842449359595776}, {"id": 1167, "seek": 355368, "start": 3567.3199999999997, "end": 3569.16, "text": " is between these two curly braces?", "tokens": [51046, 307, 1296, 613, 732, 32066, 41537, 30, 51138], "temperature": 0.0, "avg_logprob": -0.1357155164082845, "compression_ratio": 1.5431654676258992, "no_speech_prob": 0.0012842449359595776}, {"id": 1168, "seek": 355368, "start": 3569.16, "end": 3573.16, "text": " Well, it's the result of looking in the system package, which has a variable", "tokens": [51138, 1042, 11, 309, 311, 264, 1874, 295, 1237, 294, 264, 1185, 7372, 11, 597, 575, 257, 7006, 51338], "temperature": 0.0, "avg_logprob": -0.1357155164082845, "compression_ratio": 1.5431654676258992, "no_speech_prob": 0.0012842449359595776}, {"id": 1169, "seek": 355368, "start": 3573.16, "end": 3574.9199999999996, "text": " called argv for argument vector.", "tokens": [51338, 1219, 3882, 85, 337, 6770, 8062, 13, 51426], "temperature": 0.0, "avg_logprob": -0.1357155164082845, "compression_ratio": 1.5431654676258992, "no_speech_prob": 0.0012842449359595776}, {"id": 1170, "seek": 355368, "start": 3574.9199999999996, "end": 3579.3999999999996, "text": " Just like in C, it is itself an array, aka a list in Python.", "tokens": [51426, 1449, 411, 294, 383, 11, 309, 307, 2564, 364, 10225, 11, 28042, 257, 1329, 294, 15329, 13, 51650], "temperature": 0.0, "avg_logprob": -0.1357155164082845, "compression_ratio": 1.5431654676258992, "no_speech_prob": 0.0012842449359595776}, {"id": 1171, "seek": 357940, "start": 3579.4, "end": 3584.1600000000003, "text": " And here we have the result of indexing into element 1 of that list.", "tokens": [50364, 400, 510, 321, 362, 264, 1874, 295, 8186, 278, 666, 4478, 502, 295, 300, 1329, 13, 50602], "temperature": 0.0, "avg_logprob": -0.1315926560410508, "compression_ratio": 1.5515873015873016, "no_speech_prob": 0.00446809409186244}, {"id": 1172, "seek": 357940, "start": 3584.1600000000003, "end": 3589.04, "text": " And the way that I have access to this is because I've imported that whole package.", "tokens": [50602, 400, 264, 636, 300, 286, 362, 2105, 281, 341, 307, 570, 286, 600, 25524, 300, 1379, 7372, 13, 50846], "temperature": 0.0, "avg_logprob": -0.1315926560410508, "compression_ratio": 1.5515873015873016, "no_speech_prob": 0.00446809409186244}, {"id": 1173, "seek": 357940, "start": 3589.04, "end": 3593.1600000000003, "text": " So if on the right hand side here, I go ahead after saving that file,", "tokens": [50846, 407, 498, 322, 264, 558, 1011, 1252, 510, 11, 286, 352, 2286, 934, 6816, 300, 3991, 11, 51052], "temperature": 0.0, "avg_logprob": -0.1315926560410508, "compression_ratio": 1.5515873015873016, "no_speech_prob": 0.00446809409186244}, {"id": 1174, "seek": 357940, "start": 3593.1600000000003, "end": 3597.88, "text": " and I do Python of argv0.py, I see nothing.", "tokens": [51052, 293, 286, 360, 15329, 295, 3882, 85, 15, 13, 8200, 11, 286, 536, 1825, 13, 51288], "temperature": 0.0, "avg_logprob": -0.1315926560410508, "compression_ratio": 1.5515873015873016, "no_speech_prob": 0.00446809409186244}, {"id": 1175, "seek": 357940, "start": 3597.88, "end": 3601.6800000000003, "text": " But if I actually say, like, my name here, I see hello.david.", "tokens": [51288, 583, 498, 286, 767, 584, 11, 411, 11, 452, 1315, 510, 11, 286, 536, 7751, 13, 67, 706, 327, 13, 51478], "temperature": 0.0, "avg_logprob": -0.1315926560410508, "compression_ratio": 1.5515873015873016, "no_speech_prob": 0.00446809409186244}, {"id": 1176, "seek": 357940, "start": 3601.6800000000003, "end": 3605.76, "text": " So very similar program, but implemented a little differently.", "tokens": [51478, 407, 588, 2531, 1461, 11, 457, 12270, 257, 707, 7614, 13, 51682], "temperature": 0.0, "avg_logprob": -0.1315926560410508, "compression_ratio": 1.5515873015873016, "no_speech_prob": 0.00446809409186244}, {"id": 1177, "seek": 360576, "start": 3605.76, "end": 3610.36, "text": " And you'll notice, too, that the length of an array, henceforth known", "tokens": [50364, 400, 291, 603, 3449, 11, 886, 11, 300, 264, 4641, 295, 364, 10225, 11, 16678, 44779, 2570, 50594], "temperature": 0.0, "avg_logprob": -0.14799735216590448, "compression_ratio": 1.6404494382022472, "no_speech_prob": 0.005219749640673399}, {"id": 1178, "seek": 360576, "start": 3610.36, "end": 3614.7000000000003, "text": " as a list, is not something that you yourself have to remember or keep", "tokens": [50594, 382, 257, 1329, 11, 307, 406, 746, 300, 291, 1803, 362, 281, 1604, 420, 1066, 50811], "temperature": 0.0, "avg_logprob": -0.14799735216590448, "compression_ratio": 1.6404494382022472, "no_speech_prob": 0.005219749640673399}, {"id": 1179, "seek": 360576, "start": 3614.7000000000003, "end": 3615.2000000000003, "text": " around.", "tokens": [50811, 926, 13, 50836], "temperature": 0.0, "avg_logprob": -0.14799735216590448, "compression_ratio": 1.6404494382022472, "no_speech_prob": 0.005219749640673399}, {"id": 1180, "seek": 360576, "start": 3615.2000000000003, "end": 3620.0, "text": " You can just ask a list how long it is by calling the lang, or len,", "tokens": [50836, 509, 393, 445, 1029, 257, 1329, 577, 938, 309, 307, 538, 5141, 264, 2265, 11, 420, 40116, 11, 51076], "temperature": 0.0, "avg_logprob": -0.14799735216590448, "compression_ratio": 1.6404494382022472, "no_speech_prob": 0.005219749640673399}, {"id": 1181, "seek": 360576, "start": 3620.0, "end": 3623.6000000000004, "text": " for length function, passing it in as an argument.", "tokens": [51076, 337, 4641, 2445, 11, 8437, 309, 294, 382, 364, 6770, 13, 51256], "temperature": 0.0, "avg_logprob": -0.14799735216590448, "compression_ratio": 1.6404494382022472, "no_speech_prob": 0.005219749640673399}, {"id": 1182, "seek": 360576, "start": 3623.6000000000004, "end": 3625.6000000000004, "text": " So that's one of the takeaways there.", "tokens": [51256, 407, 300, 311, 472, 295, 264, 45584, 456, 13, 51356], "temperature": 0.0, "avg_logprob": -0.14799735216590448, "compression_ratio": 1.6404494382022472, "no_speech_prob": 0.005219749640673399}, {"id": 1183, "seek": 360576, "start": 3625.6000000000004, "end": 3628.0, "text": " And if we actually want to do something a little more clever,", "tokens": [51356, 400, 498, 321, 767, 528, 281, 360, 746, 257, 707, 544, 13494, 11, 51476], "temperature": 0.0, "avg_logprob": -0.14799735216590448, "compression_ratio": 1.6404494382022472, "no_speech_prob": 0.005219749640673399}, {"id": 1184, "seek": 360576, "start": 3628.0, "end": 3632.7200000000003, "text": " like print out all of the strings in argv, well, back in the day in C,", "tokens": [51476, 411, 4482, 484, 439, 295, 264, 13985, 294, 3882, 85, 11, 731, 11, 646, 294, 264, 786, 294, 383, 11, 51712], "temperature": 0.0, "avg_logprob": -0.14799735216590448, "compression_ratio": 1.6404494382022472, "no_speech_prob": 0.005219749640673399}, {"id": 1185, "seek": 363272, "start": 3632.72, "end": 3637.3599999999997, "text": " you might recall this example, argv1.c, wherein I had this for loop,", "tokens": [50364, 291, 1062, 9901, 341, 1365, 11, 3882, 85, 16, 13, 66, 11, 43531, 286, 632, 341, 337, 6367, 11, 50596], "temperature": 0.0, "avg_logprob": -0.12088230436882086, "compression_ratio": 1.5950413223140496, "no_speech_prob": 0.006097251549363136}, {"id": 1186, "seek": 363272, "start": 3637.3599999999997, "end": 3640.9399999999996, "text": " and I iterated from 0 on up to argc, the argument count,", "tokens": [50596, 293, 286, 17138, 770, 490, 1958, 322, 493, 281, 3882, 66, 11, 264, 6770, 1207, 11, 50775], "temperature": 0.0, "avg_logprob": -0.12088230436882086, "compression_ratio": 1.5950413223140496, "no_speech_prob": 0.006097251549363136}, {"id": 1187, "seek": 363272, "start": 3640.9399999999996, "end": 3644.3999999999996, "text": " printing out each of the arguments in that vector.", "tokens": [50775, 14699, 484, 1184, 295, 264, 12869, 294, 300, 8062, 13, 50948], "temperature": 0.0, "avg_logprob": -0.12088230436882086, "compression_ratio": 1.5950413223140496, "no_speech_prob": 0.006097251549363136}, {"id": 1188, "seek": 363272, "start": 3644.3999999999996, "end": 3648.12, "text": " Python actually makes even something like this even simpler.", "tokens": [50948, 15329, 767, 1669, 754, 746, 411, 341, 754, 18587, 13, 51134], "temperature": 0.0, "avg_logprob": -0.12088230436882086, "compression_ratio": 1.5950413223140496, "no_speech_prob": 0.006097251549363136}, {"id": 1189, "seek": 363272, "start": 3648.12, "end": 3650.3999999999996, "text": " Let me go ahead and create a new file here,", "tokens": [51134, 961, 385, 352, 2286, 293, 1884, 257, 777, 3991, 510, 11, 51248], "temperature": 0.0, "avg_logprob": -0.12088230436882086, "compression_ratio": 1.5950413223140496, "no_speech_prob": 0.006097251549363136}, {"id": 1190, "seek": 363272, "start": 3650.3999999999996, "end": 3653.56, "text": " and I'll call this, say, argv1.py.", "tokens": [51248, 293, 286, 603, 818, 341, 11, 584, 11, 3882, 85, 16, 13, 8200, 13, 51406], "temperature": 0.0, "avg_logprob": -0.12088230436882086, "compression_ratio": 1.5950413223140496, "no_speech_prob": 0.006097251549363136}, {"id": 1191, "seek": 363272, "start": 3653.56, "end": 3658.48, "text": " And it turns out in Python, I can similarly just import sys, and then", "tokens": [51406, 400, 309, 4523, 484, 294, 15329, 11, 286, 393, 14138, 445, 974, 262, 749, 11, 293, 550, 51652], "temperature": 0.0, "avg_logprob": -0.12088230436882086, "compression_ratio": 1.5950413223140496, "no_speech_prob": 0.006097251549363136}, {"id": 1192, "seek": 365848, "start": 3658.48, "end": 3666.8, "text": " do, honestly, for s in sys.argv, print s, done.", "tokens": [50364, 360, 11, 6095, 11, 337, 262, 294, 262, 749, 13, 33544, 85, 11, 4482, 262, 11, 1096, 13, 50780], "temperature": 0.0, "avg_logprob": -0.14999653498331705, "compression_ratio": 1.6348547717842323, "no_speech_prob": 0.0035934182815253735}, {"id": 1193, "seek": 365848, "start": 3666.8, "end": 3668.84, "text": " So again, kind of just says what it means.", "tokens": [50780, 407, 797, 11, 733, 295, 445, 1619, 437, 309, 1355, 13, 50882], "temperature": 0.0, "avg_logprob": -0.14999653498331705, "compression_ratio": 1.6348547717842323, "no_speech_prob": 0.0035934182815253735}, {"id": 1194, "seek": 365848, "start": 3668.84, "end": 3671.92, "text": " So I've imported the system library, sys.argv,", "tokens": [50882, 407, 286, 600, 25524, 264, 1185, 6405, 11, 262, 749, 13, 33544, 85, 11, 51036], "temperature": 0.0, "avg_logprob": -0.14999653498331705, "compression_ratio": 1.6348547717842323, "no_speech_prob": 0.0035934182815253735}, {"id": 1195, "seek": 365848, "start": 3671.92, "end": 3674.52, "text": " I know to be a list, apparently, of command line arguments,", "tokens": [51036, 286, 458, 281, 312, 257, 1329, 11, 7970, 11, 295, 5622, 1622, 12869, 11, 51166], "temperature": 0.0, "avg_logprob": -0.14999653498331705, "compression_ratio": 1.6348547717842323, "no_speech_prob": 0.0035934182815253735}, {"id": 1196, "seek": 365848, "start": 3674.52, "end": 3678.2, "text": " for something in something is a new syntax we have for for loop.", "tokens": [51166, 337, 746, 294, 746, 307, 257, 777, 28431, 321, 362, 337, 337, 6367, 13, 51350], "temperature": 0.0, "avg_logprob": -0.14999653498331705, "compression_ratio": 1.6348547717842323, "no_speech_prob": 0.0035934182815253735}, {"id": 1197, "seek": 365848, "start": 3678.2, "end": 3683.52, "text": " So for some variable s inside of this list, go ahead and print it.", "tokens": [51350, 407, 337, 512, 7006, 262, 1854, 295, 341, 1329, 11, 352, 2286, 293, 4482, 309, 13, 51616], "temperature": 0.0, "avg_logprob": -0.14999653498331705, "compression_ratio": 1.6348547717842323, "no_speech_prob": 0.0035934182815253735}, {"id": 1198, "seek": 365848, "start": 3683.52, "end": 3686.8, "text": " And so it's a much cleaner, much more succinct way of, honestly,", "tokens": [51616, 400, 370, 309, 311, 257, 709, 16532, 11, 709, 544, 21578, 5460, 636, 295, 11, 6095, 11, 51780], "temperature": 0.0, "avg_logprob": -0.14999653498331705, "compression_ratio": 1.6348547717842323, "no_speech_prob": 0.0035934182815253735}, {"id": 1199, "seek": 368680, "start": 3686.8, "end": 3689.6800000000003, "text": " getting rid of all of the complexity of this", "tokens": [50364, 1242, 3973, 295, 439, 295, 264, 14024, 295, 341, 50508], "temperature": 0.0, "avg_logprob": -0.13678823001142862, "compression_ratio": 1.8503649635036497, "no_speech_prob": 0.0018100986490026116}, {"id": 1200, "seek": 368680, "start": 3689.6800000000003, "end": 3692.2000000000003, "text": " by just saying, instead, what we mean.", "tokens": [50508, 538, 445, 1566, 11, 2602, 11, 437, 321, 914, 13, 50634], "temperature": 0.0, "avg_logprob": -0.13678823001142862, "compression_ratio": 1.8503649635036497, "no_speech_prob": 0.0018100986490026116}, {"id": 1201, "seek": 368680, "start": 3692.2000000000003, "end": 3694.2400000000002, "text": " Meanwhile, if I wanted to print out every character,", "tokens": [50634, 13879, 11, 498, 286, 1415, 281, 4482, 484, 633, 2517, 11, 50736], "temperature": 0.0, "avg_logprob": -0.13678823001142862, "compression_ratio": 1.8503649635036497, "no_speech_prob": 0.0018100986490026116}, {"id": 1202, "seek": 368680, "start": 3694.2400000000002, "end": 3695.96, "text": " I can take this one step further.", "tokens": [50736, 286, 393, 747, 341, 472, 1823, 3052, 13, 50822], "temperature": 0.0, "avg_logprob": -0.13678823001142862, "compression_ratio": 1.8503649635036497, "no_speech_prob": 0.0018100986490026116}, {"id": 1203, "seek": 368680, "start": 3695.96, "end": 3698.52, "text": " So back in the day, in C, if I wanted to print out", "tokens": [50822, 407, 646, 294, 264, 786, 11, 294, 383, 11, 498, 286, 1415, 281, 4482, 484, 50950], "temperature": 0.0, "avg_logprob": -0.13678823001142862, "compression_ratio": 1.8503649635036497, "no_speech_prob": 0.0018100986490026116}, {"id": 1204, "seek": 368680, "start": 3698.52, "end": 3702.1600000000003, "text": " every command line argument and every character therein,", "tokens": [50950, 633, 5622, 1622, 6770, 293, 633, 2517, 456, 259, 11, 51132], "temperature": 0.0, "avg_logprob": -0.13678823001142862, "compression_ratio": 1.8503649635036497, "no_speech_prob": 0.0018100986490026116}, {"id": 1205, "seek": 368680, "start": 3702.1600000000003, "end": 3703.04, "text": " I could do this.", "tokens": [51132, 286, 727, 360, 341, 13, 51176], "temperature": 0.0, "avg_logprob": -0.13678823001142862, "compression_ratio": 1.8503649635036497, "no_speech_prob": 0.0018100986490026116}, {"id": 1206, "seek": 368680, "start": 3703.04, "end": 3706.52, "text": " I just need a couple of nested loops wherein, via the outer loop,", "tokens": [51176, 286, 445, 643, 257, 1916, 295, 15646, 292, 16121, 43531, 11, 5766, 264, 10847, 6367, 11, 51350], "temperature": 0.0, "avg_logprob": -0.13678823001142862, "compression_ratio": 1.8503649635036497, "no_speech_prob": 0.0018100986490026116}, {"id": 1207, "seek": 368680, "start": 3706.52, "end": 3709.96, "text": " I iterate over all of the arguments passed in.", "tokens": [51350, 286, 44497, 670, 439, 295, 264, 12869, 4678, 294, 13, 51522], "temperature": 0.0, "avg_logprob": -0.13678823001142862, "compression_ratio": 1.8503649635036497, "no_speech_prob": 0.0018100986490026116}, {"id": 1208, "seek": 368680, "start": 3709.96, "end": 3713.4, "text": " And on the inner loop, I iterate over the current string length", "tokens": [51522, 400, 322, 264, 7284, 6367, 11, 286, 44497, 670, 264, 2190, 6798, 4641, 51694], "temperature": 0.0, "avg_logprob": -0.13678823001142862, "compression_ratio": 1.8503649635036497, "no_speech_prob": 0.0018100986490026116}, {"id": 1209, "seek": 368680, "start": 3713.4, "end": 3715.32, "text": " of whatever argument I'm printing.", "tokens": [51694, 295, 2035, 6770, 286, 478, 14699, 13, 51790], "temperature": 0.0, "avg_logprob": -0.13678823001142862, "compression_ratio": 1.8503649635036497, "no_speech_prob": 0.0018100986490026116}, {"id": 1210, "seek": 371532, "start": 3715.36, "end": 3718.76, "text": " And this had the effect of printing out all of the command line arguments", "tokens": [50366, 400, 341, 632, 264, 1802, 295, 14699, 484, 439, 295, 264, 5622, 1622, 12869, 50536], "temperature": 0.0, "avg_logprob": -0.16008039351997025, "compression_ratio": 1.5571428571428572, "no_speech_prob": 0.00036828467273153365}, {"id": 1211, "seek": 371532, "start": 3718.76, "end": 3721.04, "text": " letters one at a time.", "tokens": [50536, 7825, 472, 412, 257, 565, 13, 50650], "temperature": 0.0, "avg_logprob": -0.16008039351997025, "compression_ratio": 1.5571428571428572, "no_speech_prob": 0.00036828467273153365}, {"id": 1212, "seek": 371532, "start": 3721.04, "end": 3723.48, "text": " I can do this in Python, honestly, so much easier.", "tokens": [50650, 286, 393, 360, 341, 294, 15329, 11, 6095, 11, 370, 709, 3571, 13, 50772], "temperature": 0.0, "avg_logprob": -0.16008039351997025, "compression_ratio": 1.5571428571428572, "no_speech_prob": 0.00036828467273153365}, {"id": 1213, "seek": 371532, "start": 3723.48, "end": 3725.0, "text": " So let me go over here.", "tokens": [50772, 407, 718, 385, 352, 670, 510, 13, 50848], "temperature": 0.0, "avg_logprob": -0.16008039351997025, "compression_ratio": 1.5571428571428572, "no_speech_prob": 0.00036828467273153365}, {"id": 1214, "seek": 371532, "start": 3725.0, "end": 3730.1600000000003, "text": " Let me create a new file called argv2.py.", "tokens": [50848, 961, 385, 1884, 257, 777, 3991, 1219, 3882, 85, 17, 13, 8200, 13, 51106], "temperature": 0.0, "avg_logprob": -0.16008039351997025, "compression_ratio": 1.5571428571428572, "no_speech_prob": 0.00036828467273153365}, {"id": 1215, "seek": 371532, "start": 3730.1600000000003, "end": 3731.84, "text": " Let me import sys as I did.", "tokens": [51106, 961, 385, 974, 262, 749, 382, 286, 630, 13, 51190], "temperature": 0.0, "avg_logprob": -0.16008039351997025, "compression_ratio": 1.5571428571428572, "no_speech_prob": 0.00036828467273153365}, {"id": 1216, "seek": 371532, "start": 3731.84, "end": 3741.44, "text": " So import sys and then for snsys.argv, for cns, print c, done.", "tokens": [51190, 407, 974, 262, 749, 293, 550, 337, 262, 3695, 749, 13, 33544, 85, 11, 337, 269, 3695, 11, 4482, 269, 11, 1096, 13, 51670], "temperature": 0.0, "avg_logprob": -0.16008039351997025, "compression_ratio": 1.5571428571428572, "no_speech_prob": 0.00036828467273153365}, {"id": 1217, "seek": 371532, "start": 3741.44, "end": 3742.7200000000003, "text": " So what is this doing?", "tokens": [51670, 407, 437, 307, 341, 884, 30, 51734], "temperature": 0.0, "avg_logprob": -0.16008039351997025, "compression_ratio": 1.5571428571428572, "no_speech_prob": 0.00036828467273153365}, {"id": 1218, "seek": 374272, "start": 3742.72, "end": 3747.7599999999998, "text": " Gone is all of the overhead of four int i and four int j and so forth.", "tokens": [50364, 39068, 307, 439, 295, 264, 19922, 295, 1451, 560, 741, 293, 1451, 560, 361, 293, 370, 5220, 13, 50616], "temperature": 0.0, "avg_logprob": -0.1741296582751804, "compression_ratio": 1.810035842293907, "no_speech_prob": 0.00026947600417770445}, {"id": 1219, "seek": 374272, "start": 3747.7599999999998, "end": 3753.48, "text": " For snsys.argv, iterates over all of the elements of that list, one string at a time.", "tokens": [50616, 1171, 262, 3695, 749, 13, 33544, 85, 11, 17138, 1024, 670, 439, 295, 264, 4959, 295, 300, 1329, 11, 472, 6798, 412, 257, 565, 13, 50902], "temperature": 0.0, "avg_logprob": -0.1741296582751804, "compression_ratio": 1.810035842293907, "no_speech_prob": 0.00026947600417770445}, {"id": 1220, "seek": 374272, "start": 3753.48, "end": 3758.48, "text": " For cns is a little different, because s is technically a string or a stir object,", "tokens": [50902, 1171, 269, 3695, 307, 257, 707, 819, 11, 570, 262, 307, 12120, 257, 6798, 420, 257, 8946, 2657, 11, 51152], "temperature": 0.0, "avg_logprob": -0.1741296582751804, "compression_ratio": 1.810035842293907, "no_speech_prob": 0.00026947600417770445}, {"id": 1221, "seek": 374272, "start": 3758.48, "end": 3759.72, "text": " as we're going to start calling it.", "tokens": [51152, 382, 321, 434, 516, 281, 722, 5141, 309, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1741296582751804, "compression_ratio": 1.810035842293907, "no_speech_prob": 0.00026947600417770445}, {"id": 1222, "seek": 374272, "start": 3759.72, "end": 3762.52, "text": " But at the end of the day, a string is just a sequence of characters,", "tokens": [51214, 583, 412, 264, 917, 295, 264, 786, 11, 257, 6798, 307, 445, 257, 8310, 295, 4342, 11, 51354], "temperature": 0.0, "avg_logprob": -0.1741296582751804, "compression_ratio": 1.810035842293907, "no_speech_prob": 0.00026947600417770445}, {"id": 1223, "seek": 374272, "start": 3762.52, "end": 3766.12, "text": " and turns out Python supports out of the box the ability to use a for loop,", "tokens": [51354, 293, 4523, 484, 15329, 9346, 484, 295, 264, 2424, 264, 3485, 281, 764, 257, 337, 6367, 11, 51534], "temperature": 0.0, "avg_logprob": -0.1741296582751804, "compression_ratio": 1.810035842293907, "no_speech_prob": 0.00026947600417770445}, {"id": 1224, "seek": 374272, "start": 3766.12, "end": 3768.6, "text": " even to iterate over all of the characters in a string.", "tokens": [51534, 754, 281, 44497, 670, 439, 295, 264, 4342, 294, 257, 6798, 13, 51658], "temperature": 0.0, "avg_logprob": -0.1741296582751804, "compression_ratio": 1.810035842293907, "no_speech_prob": 0.00026947600417770445}, {"id": 1225, "seek": 374272, "start": 3768.6, "end": 3770.0, "text": " And so c, I just mean char.", "tokens": [51658, 400, 370, 269, 11, 286, 445, 914, 1290, 13, 51728], "temperature": 0.0, "avg_logprob": -0.1741296582751804, "compression_ratio": 1.810035842293907, "no_speech_prob": 0.00026947600417770445}, {"id": 1226, "seek": 377000, "start": 3770.0, "end": 3773.36, "text": " So for cns, that gives me each of the characters.", "tokens": [50364, 407, 337, 269, 3695, 11, 300, 2709, 385, 1184, 295, 264, 4342, 13, 50532], "temperature": 0.0, "avg_logprob": -0.12915357971191407, "compression_ratio": 1.619607843137255, "no_speech_prob": 0.0037069935351610184}, {"id": 1227, "seek": 377000, "start": 3773.36, "end": 3781.24, "text": " So now with the end here, if I go ahead and run Python of argv2.py with nothing,", "tokens": [50532, 407, 586, 365, 264, 917, 510, 11, 498, 286, 352, 2286, 293, 1190, 15329, 295, 3882, 85, 17, 13, 8200, 365, 1825, 11, 50926], "temperature": 0.0, "avg_logprob": -0.12915357971191407, "compression_ratio": 1.619607843137255, "no_speech_prob": 0.0037069935351610184}, {"id": 1228, "seek": 377000, "start": 3781.24, "end": 3784.52, "text": " I get just the program's name, because that's, of course,", "tokens": [50926, 286, 483, 445, 264, 1461, 311, 1315, 11, 570, 300, 311, 11, 295, 1164, 11, 51090], "temperature": 0.0, "avg_logprob": -0.12915357971191407, "compression_ratio": 1.619607843137255, "no_speech_prob": 0.0037069935351610184}, {"id": 1229, "seek": 377000, "start": 3784.52, "end": 3786.92, "text": " the very first thing in argv as in C.", "tokens": [51090, 264, 588, 700, 551, 294, 3882, 85, 382, 294, 383, 13, 51210], "temperature": 0.0, "avg_logprob": -0.12915357971191407, "compression_ratio": 1.619607843137255, "no_speech_prob": 0.0037069935351610184}, {"id": 1230, "seek": 377000, "start": 3786.92, "end": 3789.92, "text": " And if I write, say, a word like Maria here,", "tokens": [51210, 400, 498, 286, 2464, 11, 584, 11, 257, 1349, 411, 12734, 510, 11, 51360], "temperature": 0.0, "avg_logprob": -0.12915357971191407, "compression_ratio": 1.619607843137255, "no_speech_prob": 0.0037069935351610184}, {"id": 1231, "seek": 377000, "start": 3789.92, "end": 3795.72, "text": " I get argv2.py Maria all in one long column,", "tokens": [51360, 286, 483, 3882, 85, 17, 13, 8200, 12734, 439, 294, 472, 938, 7738, 11, 51650], "temperature": 0.0, "avg_logprob": -0.12915357971191407, "compression_ratio": 1.619607843137255, "no_speech_prob": 0.0037069935351610184}, {"id": 1232, "seek": 377000, "start": 3795.72, "end": 3798.92, "text": " because of the additional prints that are happening in the implicit new lines.", "tokens": [51650, 570, 295, 264, 4497, 22305, 300, 366, 2737, 294, 264, 26947, 777, 3876, 13, 51810], "temperature": 0.0, "avg_logprob": -0.12915357971191407, "compression_ratio": 1.619607843137255, "no_speech_prob": 0.0037069935351610184}, {"id": 1233, "seek": 377000, "start": 3798.92, "end": 3799.64, "text": " So any questions?", "tokens": [51810, 407, 604, 1651, 30, 51846], "temperature": 0.0, "avg_logprob": -0.12915357971191407, "compression_ratio": 1.619607843137255, "no_speech_prob": 0.0037069935351610184}, {"id": 1234, "seek": 379964, "start": 3799.68, "end": 3805.96, "text": " Before we proceed on this use of a package called sys, using these libraries,", "tokens": [50366, 4546, 321, 8991, 322, 341, 764, 295, 257, 7372, 1219, 262, 749, 11, 1228, 613, 15148, 11, 50680], "temperature": 0.0, "avg_logprob": -0.21146673905222038, "compression_ratio": 1.6968503937007875, "no_speech_prob": 0.002396447816863656}, {"id": 1235, "seek": 379964, "start": 3805.96, "end": 3808.08, "text": " rather using these functions therein.", "tokens": [50680, 2831, 1228, 613, 6828, 456, 259, 13, 50786], "temperature": 0.0, "avg_logprob": -0.21146673905222038, "compression_ratio": 1.6968503937007875, "no_speech_prob": 0.002396447816863656}, {"id": 1236, "seek": 379964, "start": 3808.08, "end": 3813.56, "text": " All right, so let me skip ahead then to something slightly familiar too.", "tokens": [50786, 1057, 558, 11, 370, 718, 385, 10023, 2286, 550, 281, 746, 4748, 4963, 886, 13, 51060], "temperature": 0.0, "avg_logprob": -0.21146673905222038, "compression_ratio": 1.6968503937007875, "no_speech_prob": 0.002396447816863656}, {"id": 1237, "seek": 379964, "start": 3813.56, "end": 3819.52, "text": " Let me go ahead, and you might recall, initials.c from some time ago,", "tokens": [51060, 961, 385, 352, 2286, 11, 293, 291, 1062, 9901, 11, 5883, 82, 13, 66, 490, 512, 565, 2057, 11, 51358], "temperature": 0.0, "avg_logprob": -0.21146673905222038, "compression_ratio": 1.6968503937007875, "no_speech_prob": 0.002396447816863656}, {"id": 1238, "seek": 379964, "start": 3819.52, "end": 3824.68, "text": " wherein we accepted as a command line argument a user rather as an input", "tokens": [51358, 43531, 321, 9035, 382, 257, 5622, 1622, 6770, 257, 4195, 2831, 382, 364, 4846, 51616], "temperature": 0.0, "avg_logprob": -0.21146673905222038, "compression_ratio": 1.6968503937007875, "no_speech_prob": 0.002396447816863656}, {"id": 1239, "seek": 379964, "start": 3824.68, "end": 3827.4, "text": " to get string, a user's name, and then we printed out their initial.", "tokens": [51616, 281, 483, 6798, 11, 257, 4195, 311, 1315, 11, 293, 550, 321, 13567, 484, 641, 5883, 13, 51752], "temperature": 0.0, "avg_logprob": -0.21146673905222038, "compression_ratio": 1.6968503937007875, "no_speech_prob": 0.002396447816863656}, {"id": 1240, "seek": 379964, "start": 3827.4, "end": 3828.52, "text": " So let's go ahead and do that.", "tokens": [51752, 407, 718, 311, 352, 2286, 293, 360, 300, 13, 51808], "temperature": 0.0, "avg_logprob": -0.21146673905222038, "compression_ratio": 1.6968503937007875, "no_speech_prob": 0.002396447816863656}, {"id": 1241, "seek": 382852, "start": 3828.52, "end": 3832.0, "text": " So from cs50, let me go ahead and import, get string.", "tokens": [50364, 407, 490, 28277, 2803, 11, 718, 385, 352, 2286, 293, 974, 11, 483, 6798, 13, 50538], "temperature": 0.0, "avg_logprob": -0.14509557996477399, "compression_ratio": 1.8185483870967742, "no_speech_prob": 0.0002531514619477093}, {"id": 1242, "seek": 382852, "start": 3832.0, "end": 3834.8, "text": " Then let me go ahead and say, get me a string,", "tokens": [50538, 1396, 718, 385, 352, 2286, 293, 584, 11, 483, 385, 257, 6798, 11, 50678], "temperature": 0.0, "avg_logprob": -0.14509557996477399, "compression_ratio": 1.8185483870967742, "no_speech_prob": 0.0002531514619477093}, {"id": 1243, "seek": 382852, "start": 3834.8, "end": 3839.88, "text": " and I want the user to be prompted for their name, as we might do here.", "tokens": [50678, 293, 286, 528, 264, 4195, 281, 312, 31042, 337, 641, 1315, 11, 382, 321, 1062, 360, 510, 13, 50932], "temperature": 0.0, "avg_logprob": -0.14509557996477399, "compression_ratio": 1.8185483870967742, "no_speech_prob": 0.0002531514619477093}, {"id": 1244, "seek": 382852, "start": 3839.88, "end": 3842.92, "text": " Then let me go ahead and say, all right, there are initials.", "tokens": [50932, 1396, 718, 385, 352, 2286, 293, 584, 11, 439, 558, 11, 456, 366, 5883, 82, 13, 51084], "temperature": 0.0, "avg_logprob": -0.14509557996477399, "compression_ratio": 1.8185483870967742, "no_speech_prob": 0.0002531514619477093}, {"id": 1245, "seek": 382852, "start": 3842.92, "end": 3846.28, "text": " I don't know what they are yet, so let me just initialize an empty string,", "tokens": [51084, 286, 500, 380, 458, 437, 436, 366, 1939, 11, 370, 718, 385, 445, 5883, 1125, 364, 6707, 6798, 11, 51252], "temperature": 0.0, "avg_logprob": -0.14509557996477399, "compression_ratio": 1.8185483870967742, "no_speech_prob": 0.0002531514619477093}, {"id": 1246, "seek": 382852, "start": 3846.28, "end": 3847.32, "text": " but then do this.", "tokens": [51252, 457, 550, 360, 341, 13, 51304], "temperature": 0.0, "avg_logprob": -0.14509557996477399, "compression_ratio": 1.8185483870967742, "no_speech_prob": 0.0002531514619477093}, {"id": 1247, "seek": 382852, "start": 3847.32, "end": 3853.08, "text": " For c in s, which is for each character in the person's name, if,", "tokens": [51304, 1171, 269, 294, 262, 11, 597, 307, 337, 1184, 2517, 294, 264, 954, 311, 1315, 11, 498, 11, 51592], "temperature": 0.0, "avg_logprob": -0.14509557996477399, "compression_ratio": 1.8185483870967742, "no_speech_prob": 0.0002531514619477093}, {"id": 1248, "seek": 382852, "start": 3853.08, "end": 3857.88, "text": " and I don't know how to say this yet, if c is an uppercase", "tokens": [51592, 293, 286, 500, 380, 458, 577, 281, 584, 341, 1939, 11, 498, 269, 307, 364, 11775, 2869, 651, 51832], "temperature": 0.0, "avg_logprob": -0.14509557996477399, "compression_ratio": 1.8185483870967742, "no_speech_prob": 0.0002531514619477093}, {"id": 1249, "seek": 385788, "start": 3857.88, "end": 3864.92, "text": " letter, then go ahead and append c to initials,", "tokens": [50364, 5063, 11, 550, 352, 2286, 293, 34116, 269, 281, 5883, 82, 11, 50716], "temperature": 0.0, "avg_logprob": -0.13925893463357522, "compression_ratio": 1.6088560885608856, "no_speech_prob": 0.0010004183277487755}, {"id": 1250, "seek": 385788, "start": 3864.92, "end": 3866.7200000000003, "text": " and then down here, print initials.", "tokens": [50716, 293, 550, 760, 510, 11, 4482, 5883, 82, 13, 50806], "temperature": 0.0, "avg_logprob": -0.13925893463357522, "compression_ratio": 1.6088560885608856, "no_speech_prob": 0.0010004183277487755}, {"id": 1251, "seek": 385788, "start": 3866.7200000000003, "end": 3868.04, "text": " So I've left a couple of blanks.", "tokens": [50806, 407, 286, 600, 1411, 257, 1916, 295, 8247, 82, 13, 50872], "temperature": 0.0, "avg_logprob": -0.13925893463357522, "compression_ratio": 1.6088560885608856, "no_speech_prob": 0.0010004183277487755}, {"id": 1252, "seek": 385788, "start": 3868.04, "end": 3869.88, "text": " That's just pseudocode for the moment.", "tokens": [50872, 663, 311, 445, 25505, 532, 905, 1429, 337, 264, 1623, 13, 50964], "temperature": 0.0, "avg_logprob": -0.13925893463357522, "compression_ratio": 1.6088560885608856, "no_speech_prob": 0.0010004183277487755}, {"id": 1253, "seek": 385788, "start": 3869.88, "end": 3873.48, "text": " But this line five, just to be clear, is doing what for me?", "tokens": [50964, 583, 341, 1622, 1732, 11, 445, 281, 312, 1850, 11, 307, 884, 437, 337, 385, 30, 51144], "temperature": 0.0, "avg_logprob": -0.13925893463357522, "compression_ratio": 1.6088560885608856, "no_speech_prob": 0.0010004183277487755}, {"id": 1254, "seek": 385788, "start": 3873.48, "end": 3875.56, "text": " What is being iterated over?", "tokens": [51144, 708, 307, 885, 17138, 770, 670, 30, 51248], "temperature": 0.0, "avg_logprob": -0.13925893463357522, "compression_ratio": 1.6088560885608856, "no_speech_prob": 0.0010004183277487755}, {"id": 1255, "seek": 385788, "start": 3875.56, "end": 3876.0, "text": " The string.", "tokens": [51248, 440, 6798, 13, 51270], "temperature": 0.0, "avg_logprob": -0.13925893463357522, "compression_ratio": 1.6088560885608856, "no_speech_prob": 0.0010004183277487755}, {"id": 1256, "seek": 385788, "start": 3876.0, "end": 3879.88, "text": " So for each character in the string, for c in s,", "tokens": [51270, 407, 337, 1184, 2517, 294, 264, 6798, 11, 337, 269, 294, 262, 11, 51464], "temperature": 0.0, "avg_logprob": -0.13925893463357522, "compression_ratio": 1.6088560885608856, "no_speech_prob": 0.0010004183277487755}, {"id": 1257, "seek": 385788, "start": 3879.88, "end": 3881.2000000000003, "text": " I'm going to ask two questions.", "tokens": [51464, 286, 478, 516, 281, 1029, 732, 1651, 13, 51530], "temperature": 0.0, "avg_logprob": -0.13925893463357522, "compression_ratio": 1.6088560885608856, "no_speech_prob": 0.0010004183277487755}, {"id": 1258, "seek": 385788, "start": 3881.2000000000003, "end": 3884.32, "text": " So in c, we did this in a couple of different ways.", "tokens": [51530, 407, 294, 269, 11, 321, 630, 341, 294, 257, 1916, 295, 819, 2098, 13, 51686], "temperature": 0.0, "avg_logprob": -0.13925893463357522, "compression_ratio": 1.6088560885608856, "no_speech_prob": 0.0010004183277487755}, {"id": 1259, "seek": 385788, "start": 3884.32, "end": 3886.28, "text": " We can actually do it with kind of arithmetic,", "tokens": [51686, 492, 393, 767, 360, 309, 365, 733, 295, 42973, 11, 51784], "temperature": 0.0, "avg_logprob": -0.13925893463357522, "compression_ratio": 1.6088560885608856, "no_speech_prob": 0.0010004183277487755}, {"id": 1260, "seek": 388628, "start": 3886.28, "end": 3889.28, "text": " assuming rather with inequality checks and actually considering", "tokens": [50364, 11926, 2831, 365, 16970, 13834, 293, 767, 8079, 50514], "temperature": 0.0, "avg_logprob": -0.14698988492371606, "compression_ratio": 1.6700680272108843, "no_speech_prob": 0.0024724239483475685}, {"id": 1261, "seek": 388628, "start": 3889.28, "end": 3890.96, "text": " what the underlying ASCII values are.", "tokens": [50514, 437, 264, 14217, 7469, 34, 9503, 4190, 366, 13, 50598], "temperature": 0.0, "avg_logprob": -0.14698988492371606, "compression_ratio": 1.6700680272108843, "no_speech_prob": 0.0024724239483475685}, {"id": 1262, "seek": 388628, "start": 3890.96, "end": 3895.0, "text": " The c type library had that is upper function and is lower that we use.", "tokens": [50598, 440, 269, 2010, 6405, 632, 300, 307, 6597, 2445, 293, 307, 3126, 300, 321, 764, 13, 50800], "temperature": 0.0, "avg_logprob": -0.14698988492371606, "compression_ratio": 1.6700680272108843, "no_speech_prob": 0.0024724239483475685}, {"id": 1263, "seek": 388628, "start": 3895.0, "end": 3900.7200000000003, "text": " Well, it turns out, because c is itself not a char,", "tokens": [50800, 1042, 11, 309, 4523, 484, 11, 570, 269, 307, 2564, 406, 257, 1290, 11, 51086], "temperature": 0.0, "avg_logprob": -0.14698988492371606, "compression_ratio": 1.6700680272108843, "no_speech_prob": 0.0024724239483475685}, {"id": 1264, "seek": 388628, "start": 3900.7200000000003, "end": 3904.0800000000004, "text": " there is no such thing technically as a char in Python.", "tokens": [51086, 456, 307, 572, 1270, 551, 12120, 382, 257, 1290, 294, 15329, 13, 51254], "temperature": 0.0, "avg_logprob": -0.14698988492371606, "compression_ratio": 1.6700680272108843, "no_speech_prob": 0.0024724239483475685}, {"id": 1265, "seek": 388628, "start": 3904.0800000000004, "end": 3906.4, "text": " You have only strings of length one.", "tokens": [51254, 509, 362, 787, 13985, 295, 4641, 472, 13, 51370], "temperature": 0.0, "avg_logprob": -0.14698988492371606, "compression_ratio": 1.6700680272108843, "no_speech_prob": 0.0024724239483475685}, {"id": 1266, "seek": 388628, "start": 3906.4, "end": 3909.48, "text": " And this is why single quotes no longer have any special meaning.", "tokens": [51370, 400, 341, 307, 983, 2167, 19963, 572, 2854, 362, 604, 2121, 3620, 13, 51524], "temperature": 0.0, "avg_logprob": -0.14698988492371606, "compression_ratio": 1.6700680272108843, "no_speech_prob": 0.0024724239483475685}, {"id": 1267, "seek": 388628, "start": 3909.48, "end": 3913.48, "text": " It turns out c is technically just a one character string.", "tokens": [51524, 467, 4523, 484, 269, 307, 12120, 445, 257, 472, 2517, 6798, 13, 51724], "temperature": 0.0, "avg_logprob": -0.14698988492371606, "compression_ratio": 1.6700680272108843, "no_speech_prob": 0.0024724239483475685}, {"id": 1268, "seek": 388628, "start": 3913.48, "end": 3916.1600000000003, "text": " Strings are what we've started calling objects,", "tokens": [51724, 8251, 1109, 366, 437, 321, 600, 1409, 5141, 6565, 11, 51858], "temperature": 0.0, "avg_logprob": -0.14698988492371606, "compression_ratio": 1.6700680272108843, "no_speech_prob": 0.0024724239483475685}, {"id": 1269, "seek": 391616, "start": 3916.2, "end": 3918.24, "text": " which is a fancier name for struct.", "tokens": [50366, 597, 307, 257, 3429, 27674, 1315, 337, 6594, 13, 50468], "temperature": 0.0, "avg_logprob": -0.17097836156045237, "compression_ratio": 1.727626459143969, "no_speech_prob": 0.00035695399856194854}, {"id": 1270, "seek": 391616, "start": 3918.24, "end": 3921.8799999999997, "text": " So inside of an object, like a string, is functionality.", "tokens": [50468, 407, 1854, 295, 364, 2657, 11, 411, 257, 6798, 11, 307, 14980, 13, 50650], "temperature": 0.0, "avg_logprob": -0.17097836156045237, "compression_ratio": 1.727626459143969, "no_speech_prob": 0.00035695399856194854}, {"id": 1271, "seek": 391616, "start": 3921.8799999999997, "end": 3926.08, "text": " And we saw one piece of functionality earlier, which was what?", "tokens": [50650, 400, 321, 1866, 472, 2522, 295, 14980, 3071, 11, 597, 390, 437, 30, 50860], "temperature": 0.0, "avg_logprob": -0.17097836156045237, "compression_ratio": 1.727626459143969, "no_speech_prob": 0.00035695399856194854}, {"id": 1272, "seek": 391616, "start": 3926.08, "end": 3933.04, "text": " Not length, but though that is another one, it was format.", "tokens": [50860, 1726, 4641, 11, 457, 1673, 300, 307, 1071, 472, 11, 309, 390, 7877, 13, 51208], "temperature": 0.0, "avg_logprob": -0.17097836156045237, "compression_ratio": 1.727626459143969, "no_speech_prob": 0.00035695399856194854}, {"id": 1273, "seek": 391616, "start": 3933.04, "end": 3934.12, "text": " We saw it briefly.", "tokens": [51208, 492, 1866, 309, 10515, 13, 51262], "temperature": 0.0, "avg_logprob": -0.17097836156045237, "compression_ratio": 1.727626459143969, "no_speech_prob": 0.00035695399856194854}, {"id": 1274, "seek": 391616, "start": 3934.12, "end": 3936.92, "text": " But when I did the string.format, I proposed", "tokens": [51262, 583, 562, 286, 630, 264, 6798, 13, 837, 267, 11, 286, 10348, 51402], "temperature": 0.0, "avg_logprob": -0.17097836156045237, "compression_ratio": 1.727626459143969, "no_speech_prob": 0.00035695399856194854}, {"id": 1275, "seek": 391616, "start": 3936.92, "end": 3939.2, "text": " that there's actually built-in functionality to a string called", "tokens": [51402, 300, 456, 311, 767, 3094, 12, 259, 14980, 281, 257, 6798, 1219, 51516], "temperature": 0.0, "avg_logprob": -0.17097836156045237, "compression_ratio": 1.727626459143969, "no_speech_prob": 0.00035695399856194854}, {"id": 1276, "seek": 391616, "start": 3939.2, "end": 3939.96, "text": " format.", "tokens": [51516, 7877, 13, 51554], "temperature": 0.0, "avg_logprob": -0.17097836156045237, "compression_ratio": 1.727626459143969, "no_speech_prob": 0.00035695399856194854}, {"id": 1277, "seek": 391616, "start": 3939.96, "end": 3940.68, "text": " Well, you know what?", "tokens": [51554, 1042, 11, 291, 458, 437, 30, 51590], "temperature": 0.0, "avg_logprob": -0.17097836156045237, "compression_ratio": 1.727626459143969, "no_speech_prob": 0.00035695399856194854}, {"id": 1278, "seek": 391616, "start": 3940.68, "end": 3945.6, "text": " It turns out there is a method or a function inside of the string class,", "tokens": [51590, 467, 4523, 484, 456, 307, 257, 3170, 420, 257, 2445, 1854, 295, 264, 6798, 1508, 11, 51836], "temperature": 0.0, "avg_logprob": -0.17097836156045237, "compression_ratio": 1.727626459143969, "no_speech_prob": 0.00035695399856194854}, {"id": 1279, "seek": 394560, "start": 3945.64, "end": 3947.4, "text": " also called isUpper.", "tokens": [50366, 611, 1219, 307, 52, 3717, 13, 50454], "temperature": 0.0, "avg_logprob": -0.2350024519295528, "compression_ratio": 1.569060773480663, "no_speech_prob": 0.00505910674110055}, {"id": 1280, "seek": 394560, "start": 3947.4, "end": 3951.7999999999997, "text": " And I can ask the very string I'm looking at that question by saying,", "tokens": [50454, 400, 286, 393, 1029, 264, 588, 6798, 286, 478, 1237, 412, 300, 1168, 538, 1566, 11, 50674], "temperature": 0.0, "avg_logprob": -0.2350024519295528, "compression_ratio": 1.569060773480663, "no_speech_prob": 0.00505910674110055}, {"id": 1281, "seek": 394560, "start": 3951.7999999999997, "end": 3957.64, "text": " if c.isUpper is true, then go ahead and append c to initials.", "tokens": [50674, 498, 269, 13, 271, 52, 3717, 307, 2074, 11, 550, 352, 2286, 293, 34116, 269, 281, 5883, 82, 13, 50966], "temperature": 0.0, "avg_logprob": -0.2350024519295528, "compression_ratio": 1.569060773480663, "no_speech_prob": 0.00505910674110055}, {"id": 1282, "seek": 394560, "start": 3957.64, "end": 3963.72, "text": " So in c, if initials were technically a string,", "tokens": [50966, 407, 294, 269, 11, 498, 5883, 82, 645, 12120, 257, 6798, 11, 51270], "temperature": 0.0, "avg_logprob": -0.2350024519295528, "compression_ratio": 1.569060773480663, "no_speech_prob": 0.00505910674110055}, {"id": 1283, "seek": 394560, "start": 3963.72, "end": 3967.4, "text": " how could you go about appending another character to a string in c?", "tokens": [51270, 577, 727, 291, 352, 466, 724, 2029, 1071, 2517, 281, 257, 6798, 294, 269, 30, 51454], "temperature": 0.0, "avg_logprob": -0.2350024519295528, "compression_ratio": 1.569060773480663, "no_speech_prob": 0.00505910674110055}, {"id": 1284, "seek": 394560, "start": 3970.4, "end": 3972.16, "text": " C dot appends?", "tokens": [51604, 383, 5893, 724, 2581, 30, 51692], "temperature": 0.0, "avg_logprob": -0.2350024519295528, "compression_ratio": 1.569060773480663, "no_speech_prob": 0.00505910674110055}, {"id": 1285, "seek": 397216, "start": 3972.16, "end": 3974.2, "text": " Not in c.", "tokens": [50364, 1726, 294, 269, 13, 50466], "temperature": 0.0, "avg_logprob": -0.1640654040921119, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.0019875483121722937}, {"id": 1286, "seek": 397216, "start": 3974.2, "end": 3977.3599999999997, "text": " Oh, so in c, the language.", "tokens": [50466, 876, 11, 370, 294, 269, 11, 264, 2856, 13, 50624], "temperature": 0.0, "avg_logprob": -0.1640654040921119, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.0019875483121722937}, {"id": 1287, "seek": 397216, "start": 3977.3599999999997, "end": 3978.68, "text": " OK, so what's a string in c?", "tokens": [50624, 2264, 11, 370, 437, 311, 257, 6798, 294, 269, 30, 50690], "temperature": 0.0, "avg_logprob": -0.1640654040921119, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.0019875483121722937}, {"id": 1288, "seek": 397216, "start": 3978.68, "end": 3981.64, "text": " A string in c is a sequence of characters, the last one of which", "tokens": [50690, 316, 6798, 294, 269, 307, 257, 8310, 295, 4342, 11, 264, 1036, 472, 295, 597, 50838], "temperature": 0.0, "avg_logprob": -0.1640654040921119, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.0019875483121722937}, {"id": 1289, "seek": 397216, "start": 3981.64, "end": 3984.0, "text": " is backslash 0.", "tokens": [50838, 307, 646, 10418, 1299, 1958, 13, 50956], "temperature": 0.0, "avg_logprob": -0.1640654040921119, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.0019875483121722937}, {"id": 1290, "seek": 397216, "start": 3984.0, "end": 3986.64, "text": " All right, so it's an array of characters, last of which is backslash 0.", "tokens": [50956, 1057, 558, 11, 370, 309, 311, 364, 10225, 295, 4342, 11, 1036, 295, 597, 307, 646, 10418, 1299, 1958, 13, 51088], "temperature": 0.0, "avg_logprob": -0.1640654040921119, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.0019875483121722937}, {"id": 1291, "seek": 397216, "start": 3986.64, "end": 3989.72, "text": " So if I, for instance, typed in my first name, David,", "tokens": [51088, 407, 498, 286, 11, 337, 5197, 11, 33941, 294, 452, 700, 1315, 11, 4389, 11, 51242], "temperature": 0.0, "avg_logprob": -0.1640654040921119, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.0019875483121722937}, {"id": 1292, "seek": 397216, "start": 3989.72, "end": 3992.44, "text": " and now I want to append mail-in to the end of it,", "tokens": [51242, 293, 586, 286, 528, 281, 34116, 10071, 12, 259, 281, 264, 917, 295, 309, 11, 51378], "temperature": 0.0, "avg_logprob": -0.1640654040921119, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.0019875483121722937}, {"id": 1293, "seek": 397216, "start": 3992.44, "end": 3993.48, "text": " how do I do that in c?", "tokens": [51378, 577, 360, 286, 360, 300, 294, 269, 30, 51430], "temperature": 0.0, "avg_logprob": -0.1640654040921119, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.0019875483121722937}, {"id": 1294, "seek": 397216, "start": 3996.12, "end": 3997.7999999999997, "text": " Exactly, it's like an utter pain in the neck.", "tokens": [51562, 7587, 11, 309, 311, 411, 364, 17567, 1822, 294, 264, 6189, 13, 51646], "temperature": 0.0, "avg_logprob": -0.1640654040921119, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.0019875483121722937}, {"id": 1295, "seek": 397216, "start": 3997.7999999999997, "end": 4001.24, "text": " You have to create a new array that's bigger, that can fit both words,", "tokens": [51646, 509, 362, 281, 1884, 257, 777, 10225, 300, 311, 3801, 11, 300, 393, 3318, 1293, 2283, 11, 51818], "temperature": 0.0, "avg_logprob": -0.1640654040921119, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.0019875483121722937}, {"id": 1296, "seek": 400124, "start": 4001.2799999999997, "end": 4004.8199999999997, "text": " copy the David into the new array, then copy the last name in,", "tokens": [50366, 5055, 264, 4389, 666, 264, 777, 10225, 11, 550, 5055, 264, 1036, 1315, 294, 11, 50543], "temperature": 0.0, "avg_logprob": -0.1484373899606558, "compression_ratio": 1.7378048780487805, "no_speech_prob": 0.0022516832686960697}, {"id": 1297, "seek": 400124, "start": 4004.8199999999997, "end": 4006.64, "text": " then put the null terminator at the new array,", "tokens": [50543, 550, 829, 264, 18184, 10761, 1639, 412, 264, 777, 10225, 11, 50634], "temperature": 0.0, "avg_logprob": -0.1484373899606558, "compression_ratio": 1.7378048780487805, "no_speech_prob": 0.0022516832686960697}, {"id": 1298, "seek": 400124, "start": 4006.64, "end": 4008.6, "text": " then free, probably, the original memory.", "tokens": [50634, 550, 1737, 11, 1391, 11, 264, 3380, 4675, 13, 50732], "temperature": 0.0, "avg_logprob": -0.1484373899606558, "compression_ratio": 1.7378048780487805, "no_speech_prob": 0.0022516832686960697}, {"id": 1299, "seek": 400124, "start": 4008.6, "end": 4010.8399999999997, "text": " I mean, it's a ridiculous number of hoops to jump through.", "tokens": [50732, 286, 914, 11, 309, 311, 257, 11083, 1230, 295, 1106, 3370, 281, 3012, 807, 13, 50844], "temperature": 0.0, "avg_logprob": -0.1484373899606558, "compression_ratio": 1.7378048780487805, "no_speech_prob": 0.0022516832686960697}, {"id": 1300, "seek": 400124, "start": 4010.8399999999997, "end": 4013.6, "text": " And you've done this on occasion, especially for things like, perhaps,", "tokens": [50844, 400, 291, 600, 1096, 341, 322, 9674, 11, 2318, 337, 721, 411, 11, 4317, 11, 50982], "temperature": 0.0, "avg_logprob": -0.1484373899606558, "compression_ratio": 1.7378048780487805, "no_speech_prob": 0.0022516832686960697}, {"id": 1301, "seek": 400124, "start": 4013.6, "end": 4014.7999999999997, "text": " problem set five.", "tokens": [50982, 1154, 992, 1732, 13, 51042], "temperature": 0.0, "avg_logprob": -0.1484373899606558, "compression_ratio": 1.7378048780487805, "no_speech_prob": 0.0022516832686960697}, {"id": 1302, "seek": 400124, "start": 4014.7999999999997, "end": 4016.56, "text": " But my god, we're kind of past that.", "tokens": [51042, 583, 452, 3044, 11, 321, 434, 733, 295, 1791, 300, 13, 51130], "temperature": 0.0, "avg_logprob": -0.1484373899606558, "compression_ratio": 1.7378048780487805, "no_speech_prob": 0.0022516832686960697}, {"id": 1303, "seek": 400124, "start": 4016.56, "end": 4020.8799999999997, "text": " Just go ahead and append to the array the character you care about.", "tokens": [51130, 1449, 352, 2286, 293, 34116, 281, 264, 10225, 264, 2517, 291, 1127, 466, 13, 51346], "temperature": 0.0, "avg_logprob": -0.1484373899606558, "compression_ratio": 1.7378048780487805, "no_speech_prob": 0.0022516832686960697}, {"id": 1304, "seek": 400124, "start": 4020.8799999999997, "end": 4023.56, "text": " So in this case, not an array, but a list.", "tokens": [51346, 407, 294, 341, 1389, 11, 406, 364, 10225, 11, 457, 257, 1329, 13, 51480], "temperature": 0.0, "avg_logprob": -0.1484373899606558, "compression_ratio": 1.7378048780487805, "no_speech_prob": 0.0022516832686960697}, {"id": 1305, "seek": 400124, "start": 4023.56, "end": 4028.0, "text": " Sorry, not an array, but a string object that's initially blank.", "tokens": [51480, 4919, 11, 406, 364, 10225, 11, 457, 257, 6798, 2657, 300, 311, 9105, 8247, 13, 51702], "temperature": 0.0, "avg_logprob": -0.1484373899606558, "compression_ratio": 1.7378048780487805, "no_speech_prob": 0.0022516832686960697}, {"id": 1306, "seek": 400124, "start": 4028.0, "end": 4031.16, "text": " It turns out that Python supports this syntax plus equals", "tokens": [51702, 467, 4523, 484, 300, 15329, 9346, 341, 28431, 1804, 6915, 51860], "temperature": 0.0, "avg_logprob": -0.1484373899606558, "compression_ratio": 1.7378048780487805, "no_speech_prob": 0.0022516832686960697}, {"id": 1307, "seek": 403116, "start": 4031.16, "end": 4034.44, "text": " typically means arithmetic and add one number to another,", "tokens": [50364, 5850, 1355, 42973, 293, 909, 472, 1230, 281, 1071, 11, 50528], "temperature": 0.0, "avg_logprob": -0.13328200120192307, "compression_ratio": 1.7792642140468227, "no_speech_prob": 0.0013249119510874152}, {"id": 1308, "seek": 403116, "start": 4034.44, "end": 4036.08, "text": " but it also means append.", "tokens": [50528, 457, 309, 611, 1355, 34116, 13, 50610], "temperature": 0.0, "avg_logprob": -0.13328200120192307, "compression_ratio": 1.7792642140468227, "no_speech_prob": 0.0013249119510874152}, {"id": 1309, "seek": 403116, "start": 4036.08, "end": 4040.96, "text": " So you can simply append two initials by doing plus equals c,", "tokens": [50610, 407, 291, 393, 2935, 34116, 732, 5883, 82, 538, 884, 1804, 6915, 269, 11, 50854], "temperature": 0.0, "avg_logprob": -0.13328200120192307, "compression_ratio": 1.7792642140468227, "no_speech_prob": 0.0013249119510874152}, {"id": 1310, "seek": 403116, "start": 4040.96, "end": 4042.08, "text": " one additional character.", "tokens": [50854, 472, 4497, 2517, 13, 50910], "temperature": 0.0, "avg_logprob": -0.13328200120192307, "compression_ratio": 1.7792642140468227, "no_speech_prob": 0.0013249119510874152}, {"id": 1311, "seek": 403116, "start": 4042.08, "end": 4044.92, "text": " So even though the string starts like this in this big in memory,", "tokens": [50910, 407, 754, 1673, 264, 6798, 3719, 411, 341, 294, 341, 955, 294, 4675, 11, 51052], "temperature": 0.0, "avg_logprob": -0.13328200120192307, "compression_ratio": 1.7792642140468227, "no_speech_prob": 0.0013249119510874152}, {"id": 1312, "seek": 403116, "start": 4044.92, "end": 4046.56, "text": " it's then going to grow for one character,", "tokens": [51052, 309, 311, 550, 516, 281, 1852, 337, 472, 2517, 11, 51134], "temperature": 0.0, "avg_logprob": -0.13328200120192307, "compression_ratio": 1.7792642140468227, "no_speech_prob": 0.0013249119510874152}, {"id": 1313, "seek": 403116, "start": 4046.56, "end": 4050.6, "text": " grow, grow, grow, grow until it has all of the user's initials.", "tokens": [51134, 1852, 11, 1852, 11, 1852, 11, 1852, 1826, 309, 575, 439, 295, 264, 4195, 311, 5883, 82, 13, 51336], "temperature": 0.0, "avg_logprob": -0.13328200120192307, "compression_ratio": 1.7792642140468227, "no_speech_prob": 0.0013249119510874152}, {"id": 1314, "seek": 403116, "start": 4050.6, "end": 4053.8799999999997, "text": " And as for where that memory is coming from, who cares?", "tokens": [51336, 400, 382, 337, 689, 300, 4675, 307, 1348, 490, 11, 567, 12310, 30, 51500], "temperature": 0.0, "avg_logprob": -0.13328200120192307, "compression_ratio": 1.7792642140468227, "no_speech_prob": 0.0013249119510874152}, {"id": 1315, "seek": 403116, "start": 4053.8799999999997, "end": 4056.12, "text": " This is the point that we're now past.", "tokens": [51500, 639, 307, 264, 935, 300, 321, 434, 586, 1791, 13, 51612], "temperature": 0.0, "avg_logprob": -0.13328200120192307, "compression_ratio": 1.7792642140468227, "no_speech_prob": 0.0013249119510874152}, {"id": 1316, "seek": 403116, "start": 4056.12, "end": 4057.56, "text": " You leave it to the language.", "tokens": [51612, 509, 1856, 309, 281, 264, 2856, 13, 51684], "temperature": 0.0, "avg_logprob": -0.13328200120192307, "compression_ratio": 1.7792642140468227, "no_speech_prob": 0.0013249119510874152}, {"id": 1317, "seek": 403116, "start": 4057.56, "end": 4060.52, "text": " You leave it to the computer to start to manage those details.", "tokens": [51684, 509, 1856, 309, 281, 264, 3820, 281, 722, 281, 3067, 729, 4365, 13, 51832], "temperature": 0.0, "avg_logprob": -0.13328200120192307, "compression_ratio": 1.7792642140468227, "no_speech_prob": 0.0013249119510874152}, {"id": 1318, "seek": 406052, "start": 4060.52, "end": 4062.64, "text": " And yes, if it needs to call Malek, fine, do it.", "tokens": [50364, 400, 2086, 11, 498, 309, 2203, 281, 818, 5746, 916, 11, 2489, 11, 360, 309, 13, 50470], "temperature": 0.0, "avg_logprob": -0.14816477639334544, "compression_ratio": 1.6564625850340136, "no_speech_prob": 0.0035932189784944057}, {"id": 1319, "seek": 406052, "start": 4062.64, "end": 4064.28, "text": " Don't bother me with that detail.", "tokens": [50470, 1468, 380, 8677, 385, 365, 300, 2607, 13, 50552], "temperature": 0.0, "avg_logprob": -0.14816477639334544, "compression_ratio": 1.6564625850340136, "no_speech_prob": 0.0035932189784944057}, {"id": 1320, "seek": 406052, "start": 4064.28, "end": 4066.88, "text": " We can now start thinking and writing code sort of conceptually", "tokens": [50552, 492, 393, 586, 722, 1953, 293, 3579, 3089, 1333, 295, 3410, 671, 50682], "temperature": 0.0, "avg_logprob": -0.14816477639334544, "compression_ratio": 1.6564625850340136, "no_speech_prob": 0.0035932189784944057}, {"id": 1321, "seek": 406052, "start": 4066.88, "end": 4069.48, "text": " at this level instead of at this level.", "tokens": [50682, 412, 341, 1496, 2602, 295, 412, 341, 1496, 13, 50812], "temperature": 0.0, "avg_logprob": -0.14816477639334544, "compression_ratio": 1.6564625850340136, "no_speech_prob": 0.0035932189784944057}, {"id": 1322, "seek": 406052, "start": 4069.48, "end": 4072.36, "text": " So again, we're sort of abstracting away what a string even is", "tokens": [50812, 407, 797, 11, 321, 434, 1333, 295, 12649, 278, 1314, 437, 257, 6798, 754, 307, 50956], "temperature": 0.0, "avg_logprob": -0.14816477639334544, "compression_ratio": 1.6564625850340136, "no_speech_prob": 0.0035932189784944057}, {"id": 1323, "seek": 406052, "start": 4072.36, "end": 4074.4, "text": " and leaving it to the language itself.", "tokens": [50956, 293, 5012, 309, 281, 264, 2856, 2564, 13, 51058], "temperature": 0.0, "avg_logprob": -0.14816477639334544, "compression_ratio": 1.6564625850340136, "no_speech_prob": 0.0035932189784944057}, {"id": 1324, "seek": 406052, "start": 4074.4, "end": 4078.36, "text": " So if I now go ahead and run Python of initials.py and type in,", "tokens": [51058, 407, 498, 286, 586, 352, 2286, 293, 1190, 15329, 295, 5883, 82, 13, 8200, 293, 2010, 294, 11, 51256], "temperature": 0.0, "avg_logprob": -0.14816477639334544, "compression_ratio": 1.6564625850340136, "no_speech_prob": 0.0035932189784944057}, {"id": 1325, "seek": 406052, "start": 4078.36, "end": 4085.0, "text": " for instance, Maria Zlatkova here with a capital M and a capital Z,", "tokens": [51256, 337, 5197, 11, 12734, 1176, 14087, 4093, 2757, 510, 365, 257, 4238, 376, 293, 257, 4238, 1176, 11, 51588], "temperature": 0.0, "avg_logprob": -0.14816477639334544, "compression_ratio": 1.6564625850340136, "no_speech_prob": 0.0035932189784944057}, {"id": 1326, "seek": 406052, "start": 4085.0, "end": 4088.0, "text": " I then see her names because I've plucked out the middle initials.", "tokens": [51588, 286, 550, 536, 720, 5288, 570, 286, 600, 41514, 292, 484, 264, 2808, 5883, 82, 13, 51738], "temperature": 0.0, "avg_logprob": -0.14816477639334544, "compression_ratio": 1.6564625850340136, "no_speech_prob": 0.0035932189784944057}, {"id": 1327, "seek": 408800, "start": 4088.0, "end": 4092.08, "text": " And if we do something else like David J. Malen, even with a period in there,", "tokens": [50364, 400, 498, 321, 360, 746, 1646, 411, 4389, 508, 13, 376, 21745, 11, 754, 365, 257, 2896, 294, 456, 11, 50568], "temperature": 0.0, "avg_logprob": -0.16898469002016128, "compression_ratio": 1.6172413793103448, "no_speech_prob": 0.001597787020727992}, {"id": 1328, "seek": 408800, "start": 4092.08, "end": 4095.88, "text": " it infers from the capitalization what my initials should actually be.", "tokens": [50568, 309, 1536, 433, 490, 264, 4238, 2144, 437, 452, 5883, 82, 820, 767, 312, 13, 50758], "temperature": 0.0, "avg_logprob": -0.16898469002016128, "compression_ratio": 1.6172413793103448, "no_speech_prob": 0.001597787020727992}, {"id": 1329, "seek": 408800, "start": 4095.88, "end": 4098.44, "text": " So again, a much tighter way of doing things.", "tokens": [50758, 407, 797, 11, 257, 709, 30443, 636, 295, 884, 721, 13, 50886], "temperature": 0.0, "avg_logprob": -0.16898469002016128, "compression_ratio": 1.6172413793103448, "no_speech_prob": 0.001597787020727992}, {"id": 1330, "seek": 408800, "start": 4098.44, "end": 4100.42, "text": " Let me go ahead and now open up another example.", "tokens": [50886, 961, 385, 352, 2286, 293, 586, 1269, 493, 1071, 1365, 13, 50985], "temperature": 0.0, "avg_logprob": -0.16898469002016128, "compression_ratio": 1.6172413793103448, "no_speech_prob": 0.001597787020727992}, {"id": 1331, "seek": 408800, "start": 4100.42, "end": 4102.6, "text": " We didn't see a few weeks ago, though it was included", "tokens": [50985, 492, 994, 380, 536, 257, 1326, 3259, 2057, 11, 1673, 309, 390, 5556, 51094], "temperature": 0.0, "avg_logprob": -0.16898469002016128, "compression_ratio": 1.6172413793103448, "no_speech_prob": 0.001597787020727992}, {"id": 1332, "seek": 408800, "start": 4102.6, "end": 4106.16, "text": " in some of our distribution code, if you wanted to look.", "tokens": [51094, 294, 512, 295, 527, 7316, 3089, 11, 498, 291, 1415, 281, 574, 13, 51272], "temperature": 0.0, "avg_logprob": -0.16898469002016128, "compression_ratio": 1.6172413793103448, "no_speech_prob": 0.001597787020727992}, {"id": 1333, "seek": 408800, "start": 4106.16, "end": 4110.04, "text": " Some weeks ago, we had this program among the distribution code,", "tokens": [51272, 2188, 3259, 2057, 11, 321, 632, 341, 1461, 3654, 264, 7316, 3089, 11, 51466], "temperature": 0.0, "avg_logprob": -0.16898469002016128, "compression_ratio": 1.6172413793103448, "no_speech_prob": 0.001597787020727992}, {"id": 1334, "seek": 408800, "start": 4110.04, "end": 4114.8, "text": " where I declared an array of strings called book.", "tokens": [51466, 689, 286, 15489, 364, 10225, 295, 13985, 1219, 1446, 13, 51704], "temperature": 0.0, "avg_logprob": -0.16898469002016128, "compression_ratio": 1.6172413793103448, "no_speech_prob": 0.001597787020727992}, {"id": 1335, "seek": 411480, "start": 4114.8, "end": 4118.6, "text": " And I proposed that there were these several names in the phone book,", "tokens": [50364, 400, 286, 10348, 300, 456, 645, 613, 2940, 5288, 294, 264, 2593, 1446, 11, 50554], "temperature": 0.0, "avg_logprob": -0.14306386824577086, "compression_ratio": 1.6771929824561405, "no_speech_prob": 0.0020506184082478285}, {"id": 1336, "seek": 411480, "start": 4118.6, "end": 4123.08, "text": " so to speak, all of the past instructors of CS50 sorted alphabetically.", "tokens": [50554, 370, 281, 1710, 11, 439, 295, 264, 1791, 28367, 295, 9460, 2803, 25462, 23339, 984, 13, 50778], "temperature": 0.0, "avg_logprob": -0.14306386824577086, "compression_ratio": 1.6771929824561405, "no_speech_prob": 0.0020506184082478285}, {"id": 1337, "seek": 411480, "start": 4123.08, "end": 4127.16, "text": " And then down below in this C program, I used that global variable called", "tokens": [50778, 400, 550, 760, 2507, 294, 341, 383, 1461, 11, 286, 1143, 300, 4338, 7006, 1219, 50982], "temperature": 0.0, "avg_logprob": -0.14306386824577086, "compression_ratio": 1.6771929824561405, "no_speech_prob": 0.0020506184082478285}, {"id": 1338, "seek": 411480, "start": 4127.16, "end": 4131.16, "text": " book to implement, it seems, linear search.", "tokens": [50982, 1446, 281, 4445, 11, 309, 2544, 11, 8213, 3164, 13, 51182], "temperature": 0.0, "avg_logprob": -0.14306386824577086, "compression_ratio": 1.6771929824561405, "no_speech_prob": 0.0020506184082478285}, {"id": 1339, "seek": 411480, "start": 4131.16, "end": 4134.68, "text": " And to implement linear search in C, I'm going to need, of course,", "tokens": [51182, 400, 281, 4445, 8213, 3164, 294, 383, 11, 286, 478, 516, 281, 643, 11, 295, 1164, 11, 51358], "temperature": 0.0, "avg_logprob": -0.14306386824577086, "compression_ratio": 1.6771929824561405, "no_speech_prob": 0.0020506184082478285}, {"id": 1340, "seek": 411480, "start": 4134.68, "end": 4137.08, "text": " a loop to iterate over all of the strings.", "tokens": [51358, 257, 6367, 281, 44497, 670, 439, 295, 264, 13985, 13, 51478], "temperature": 0.0, "avg_logprob": -0.14306386824577086, "compression_ratio": 1.6771929824561405, "no_speech_prob": 0.0020506184082478285}, {"id": 1341, "seek": 411480, "start": 4137.08, "end": 4139.72, "text": " This line 26 does exactly that.", "tokens": [51478, 639, 1622, 7551, 775, 2293, 300, 13, 51610], "temperature": 0.0, "avg_logprob": -0.14306386824577086, "compression_ratio": 1.6771929824561405, "no_speech_prob": 0.0020506184082478285}, {"id": 1342, "seek": 411480, "start": 4139.72, "end": 4143.08, "text": " I then in C recall how to use stir compare because remember, we tripped over", "tokens": [51610, 286, 550, 294, 383, 9901, 577, 281, 764, 8946, 6794, 570, 1604, 11, 321, 1376, 3320, 670, 51778], "temperature": 0.0, "avg_logprob": -0.14306386824577086, "compression_ratio": 1.6771929824561405, "no_speech_prob": 0.0020506184082478285}, {"id": 1343, "seek": 414308, "start": 4143.08, "end": 4146.04, "text": " this issue early on where you can't just compare two strings in C", "tokens": [50364, 341, 2734, 2440, 322, 689, 291, 393, 380, 445, 6794, 732, 13985, 294, 383, 50512], "temperature": 0.0, "avg_logprob": -0.16580467513113312, "compression_ratio": 1.6421404682274248, "no_speech_prob": 0.01798369735479355}, {"id": 1344, "seek": 414308, "start": 4146.04, "end": 4150.32, "text": " because you'd be comparing accidentally their addresses, their pointers,", "tokens": [50512, 570, 291, 1116, 312, 15763, 15715, 641, 16862, 11, 641, 44548, 11, 50726], "temperature": 0.0, "avg_logprob": -0.16580467513113312, "compression_ratio": 1.6421404682274248, "no_speech_prob": 0.01798369735479355}, {"id": 1345, "seek": 414308, "start": 4150.32, "end": 4151.28, "text": " not the actual value.", "tokens": [50726, 406, 264, 3539, 2158, 13, 50774], "temperature": 0.0, "avg_logprob": -0.16580467513113312, "compression_ratio": 1.6421404682274248, "no_speech_prob": 0.01798369735479355}, {"id": 1346, "seek": 414308, "start": 4151.28, "end": 4154.68, "text": " So we use stir compare, and I can pass in the name that I'm looking for", "tokens": [50774, 407, 321, 764, 8946, 6794, 11, 293, 286, 393, 1320, 294, 264, 1315, 300, 286, 478, 1237, 337, 50944], "temperature": 0.0, "avg_logprob": -0.16580467513113312, "compression_ratio": 1.6421404682274248, "no_speech_prob": 0.01798369735479355}, {"id": 1347, "seek": 414308, "start": 4154.68, "end": 4158.2, "text": " and the ith book one at a time, checking for equals zero.", "tokens": [50944, 293, 264, 309, 71, 1446, 472, 412, 257, 565, 11, 8568, 337, 6915, 4018, 13, 51120], "temperature": 0.0, "avg_logprob": -0.16580467513113312, "compression_ratio": 1.6421404682274248, "no_speech_prob": 0.01798369735479355}, {"id": 1348, "seek": 414308, "start": 4158.2, "end": 4161.5599999999995, "text": " And then I can call Mike or David or whoever I'm trying to call,", "tokens": [51120, 400, 550, 286, 393, 818, 6602, 420, 4389, 420, 11387, 286, 478, 1382, 281, 818, 11, 51288], "temperature": 0.0, "avg_logprob": -0.16580467513113312, "compression_ratio": 1.6421404682274248, "no_speech_prob": 0.01798369735479355}, {"id": 1349, "seek": 414308, "start": 4161.5599999999995, "end": 4164.2, "text": " or just quit if the user isn't found.", "tokens": [51288, 420, 445, 10366, 498, 264, 4195, 1943, 380, 1352, 13, 51420], "temperature": 0.0, "avg_logprob": -0.16580467513113312, "compression_ratio": 1.6421404682274248, "no_speech_prob": 0.01798369735479355}, {"id": 1350, "seek": 414308, "start": 4164.2, "end": 4165.96, "text": " So what did this program actually do?", "tokens": [51420, 407, 437, 630, 341, 1461, 767, 360, 30, 51508], "temperature": 0.0, "avg_logprob": -0.16580467513113312, "compression_ratio": 1.6421404682274248, "no_speech_prob": 0.01798369735479355}, {"id": 1351, "seek": 414308, "start": 4165.96, "end": 4171.08, "text": " If I go into this example, which again was from week three,", "tokens": [51508, 759, 286, 352, 666, 341, 1365, 11, 597, 797, 390, 490, 1243, 1045, 11, 51764], "temperature": 0.0, "avg_logprob": -0.16580467513113312, "compression_ratio": 1.6421404682274248, "no_speech_prob": 0.01798369735479355}, {"id": 1352, "seek": 417108, "start": 4171.08, "end": 4176.84, "text": " and I do make linear, nope, not that make, oh, wrong directory again.", "tokens": [50364, 293, 286, 360, 652, 8213, 11, 23444, 11, 406, 300, 652, 11, 1954, 11, 2085, 21120, 797, 13, 50652], "temperature": 0.0, "avg_logprob": -0.16290957587105886, "compression_ratio": 1.6008064516129032, "no_speech_prob": 0.0008295643492601812}, {"id": 1353, "seek": 417108, "start": 4176.84, "end": 4180.68, "text": " If I go into source three and make linear,", "tokens": [50652, 759, 286, 352, 666, 4009, 1045, 293, 652, 8213, 11, 50844], "temperature": 0.0, "avg_logprob": -0.16290957587105886, "compression_ratio": 1.6008064516129032, "no_speech_prob": 0.0008295643492601812}, {"id": 1354, "seek": 417108, "start": 4180.68, "end": 4183.16, "text": " this program is supposed to behave as follows.", "tokens": [50844, 341, 1461, 307, 3442, 281, 15158, 382, 10002, 13, 50968], "temperature": 0.0, "avg_logprob": -0.16290957587105886, "compression_ratio": 1.6008064516129032, "no_speech_prob": 0.0008295643492601812}, {"id": 1355, "seek": 417108, "start": 4183.16, "end": 4187.88, "text": " So if I go ahead and run dot slash linear, look for our old friend Smith.", "tokens": [50968, 407, 498, 286, 352, 2286, 293, 1190, 5893, 17330, 8213, 11, 574, 337, 527, 1331, 1277, 8538, 13, 51204], "temperature": 0.0, "avg_logprob": -0.16290957587105886, "compression_ratio": 1.6008064516129032, "no_speech_prob": 0.0008295643492601812}, {"id": 1356, "seek": 417108, "start": 4187.88, "end": 4192.6, "text": " If found Smith, if I go ahead and search for, say, Jones, who did not previously", "tokens": [51204, 759, 1352, 8538, 11, 498, 286, 352, 2286, 293, 3164, 337, 11, 584, 11, 10512, 11, 567, 630, 406, 8046, 51440], "temperature": 0.0, "avg_logprob": -0.16290957587105886, "compression_ratio": 1.6008064516129032, "no_speech_prob": 0.0008295643492601812}, {"id": 1357, "seek": 417108, "start": 4192.6, "end": 4194.28, "text": " teach CS50, it says quitting.", "tokens": [51440, 2924, 9460, 2803, 11, 309, 1619, 42789, 13, 51524], "temperature": 0.0, "avg_logprob": -0.16290957587105886, "compression_ratio": 1.6008064516129032, "no_speech_prob": 0.0008295643492601812}, {"id": 1358, "seek": 417108, "start": 4194.28, "end": 4198.36, "text": " All right, so meanwhile, in Python, bless its heart,", "tokens": [51524, 1057, 558, 11, 370, 29252, 11, 294, 15329, 11, 5227, 1080, 1917, 11, 51728], "temperature": 0.0, "avg_logprob": -0.16290957587105886, "compression_ratio": 1.6008064516129032, "no_speech_prob": 0.0008295643492601812}, {"id": 1359, "seek": 419836, "start": 4198.36, "end": 4200.679999999999, "text": " we can get rid of all of that.", "tokens": [50364, 321, 393, 483, 3973, 295, 439, 295, 300, 13, 50480], "temperature": 0.0, "avg_logprob": -0.1813232763026788, "compression_ratio": 1.6532846715328466, "no_speech_prob": 0.0017545016016811132}, {"id": 1360, "seek": 419836, "start": 4200.679999999999, "end": 4205.5199999999995, "text": " And in our source eight directory here and our sub directory three,", "tokens": [50480, 400, 294, 527, 4009, 3180, 21120, 510, 293, 527, 1422, 21120, 1045, 11, 50722], "temperature": 0.0, "avg_logprob": -0.1813232763026788, "compression_ratio": 1.6532846715328466, "no_speech_prob": 0.0017545016016811132}, {"id": 1361, "seek": 419836, "start": 4205.5199999999995, "end": 4208.599999999999, "text": " let me go ahead and open this instead.", "tokens": [50722, 718, 385, 352, 2286, 293, 1269, 341, 2602, 13, 50876], "temperature": 0.0, "avg_logprob": -0.1813232763026788, "compression_ratio": 1.6532846715328466, "no_speech_prob": 0.0017545016016811132}, {"id": 1362, "seek": 419836, "start": 4208.599999999999, "end": 4213.0, "text": " In Python, I can declare an array, otherwise known as a list, almost", "tokens": [50876, 682, 15329, 11, 286, 393, 19710, 364, 10225, 11, 5911, 2570, 382, 257, 1329, 11, 1920, 51096], "temperature": 0.0, "avg_logprob": -0.1813232763026788, "compression_ratio": 1.6532846715328466, "no_speech_prob": 0.0017545016016811132}, {"id": 1363, "seek": 419836, "start": 4213.0, "end": 4216.719999999999, "text": " in the same way, but what's different just to be super clear?", "tokens": [51096, 294, 264, 912, 636, 11, 457, 437, 311, 819, 445, 281, 312, 1687, 1850, 30, 51282], "temperature": 0.0, "avg_logprob": -0.1813232763026788, "compression_ratio": 1.6532846715328466, "no_speech_prob": 0.0017545016016811132}, {"id": 1364, "seek": 419836, "start": 4216.719999999999, "end": 4217.92, "text": " Brackets?", "tokens": [51282, 1603, 501, 1385, 30, 51342], "temperature": 0.0, "avg_logprob": -0.1813232763026788, "compression_ratio": 1.6532846715328466, "no_speech_prob": 0.0017545016016811132}, {"id": 1365, "seek": 419836, "start": 4217.92, "end": 4220.599999999999, "text": " So the brackets are now square brackets instead of curly braces.", "tokens": [51342, 407, 264, 26179, 366, 586, 3732, 26179, 2602, 295, 32066, 41537, 13, 51476], "temperature": 0.0, "avg_logprob": -0.1813232763026788, "compression_ratio": 1.6532846715328466, "no_speech_prob": 0.0017545016016811132}, {"id": 1366, "seek": 419836, "start": 4220.599999999999, "end": 4224.2, "text": " And frankly, unless you statically initialized an array in C,", "tokens": [51476, 400, 11939, 11, 5969, 291, 2219, 984, 5883, 1602, 364, 10225, 294, 383, 11, 51656], "temperature": 0.0, "avg_logprob": -0.1813232763026788, "compression_ratio": 1.6532846715328466, "no_speech_prob": 0.0017545016016811132}, {"id": 1367, "seek": 419836, "start": 4224.2, "end": 4226.2, "text": " like hard coded the values for your array in C,", "tokens": [51656, 411, 1152, 34874, 264, 4190, 337, 428, 10225, 294, 383, 11, 51756], "temperature": 0.0, "avg_logprob": -0.1813232763026788, "compression_ratio": 1.6532846715328466, "no_speech_prob": 0.0017545016016811132}, {"id": 1368, "seek": 422620, "start": 4226.2, "end": 4228.599999999999, "text": " you might not even have known you could use curly braces.", "tokens": [50364, 291, 1062, 406, 754, 362, 2570, 291, 727, 764, 32066, 41537, 13, 50484], "temperature": 0.0, "avg_logprob": -0.22476024012411794, "compression_ratio": 1.5955882352941178, "no_speech_prob": 0.0006666423287242651}, {"id": 1369, "seek": 422620, "start": 4228.599999999999, "end": 4230.08, "text": " So that's not a huge deal here.", "tokens": [50484, 407, 300, 311, 406, 257, 2603, 2028, 510, 13, 50558], "temperature": 0.0, "avg_logprob": -0.22476024012411794, "compression_ratio": 1.5955882352941178, "no_speech_prob": 0.0006666423287242651}, {"id": 1370, "seek": 422620, "start": 4230.08, "end": 4233.24, "text": " But in Python, square brackets here and here", "tokens": [50558, 583, 294, 15329, 11, 3732, 26179, 510, 293, 510, 50716], "temperature": 0.0, "avg_logprob": -0.22476024012411794, "compression_ratio": 1.5955882352941178, "no_speech_prob": 0.0006666423287242651}, {"id": 1371, "seek": 422620, "start": 4233.24, "end": 4236.08, "text": " represent a list of elements, literally.", "tokens": [50716, 2906, 257, 1329, 295, 4959, 11, 3736, 13, 50858], "temperature": 0.0, "avg_logprob": -0.22476024012411794, "compression_ratio": 1.5955882352941178, "no_speech_prob": 0.0006666423287242651}, {"id": 1372, "seek": 422620, "start": 4236.08, "end": 4239.5199999999995, "text": " And what else is different?", "tokens": [50858, 400, 437, 1646, 307, 819, 30, 51030], "temperature": 0.0, "avg_logprob": -0.22476024012411794, "compression_ratio": 1.5955882352941178, "no_speech_prob": 0.0006666423287242651}, {"id": 1373, "seek": 422620, "start": 4239.5199999999995, "end": 4240.8, "text": " Didn't declare the size of the array.", "tokens": [51030, 11151, 380, 19710, 264, 2744, 295, 264, 10225, 13, 51094], "temperature": 0.0, "avg_logprob": -0.22476024012411794, "compression_ratio": 1.5955882352941178, "no_speech_prob": 0.0006666423287242651}, {"id": 1374, "seek": 422620, "start": 4240.8, "end": 4242.639999999999, "text": " And I technically don't have to do that in C either", "tokens": [51094, 400, 286, 12120, 500, 380, 362, 281, 360, 300, 294, 383, 2139, 51186], "temperature": 0.0, "avg_logprob": -0.22476024012411794, "compression_ratio": 1.5955882352941178, "no_speech_prob": 0.0006666423287242651}, {"id": 1375, "seek": 422620, "start": 4242.639999999999, "end": 4245.639999999999, "text": " if you're hard coding all of the values all at once.", "tokens": [51186, 498, 291, 434, 1152, 17720, 439, 295, 264, 4190, 439, 412, 1564, 13, 51336], "temperature": 0.0, "avg_logprob": -0.22476024012411794, "compression_ratio": 1.5955882352941178, "no_speech_prob": 0.0006666423287242651}, {"id": 1376, "seek": 422620, "start": 4245.639999999999, "end": 4248.84, "text": " But there is something missing on line seven.", "tokens": [51336, 583, 456, 307, 746, 5361, 322, 1622, 3407, 13, 51496], "temperature": 0.0, "avg_logprob": -0.22476024012411794, "compression_ratio": 1.5955882352941178, "no_speech_prob": 0.0006666423287242651}, {"id": 1377, "seek": 422620, "start": 4248.84, "end": 4251.2, "text": " Sorry?", "tokens": [51496, 4919, 30, 51614], "temperature": 0.0, "avg_logprob": -0.22476024012411794, "compression_ratio": 1.5955882352941178, "no_speech_prob": 0.0006666423287242651}, {"id": 1378, "seek": 422620, "start": 4251.2, "end": 4251.76, "text": " The type.", "tokens": [51614, 440, 2010, 13, 51642], "temperature": 0.0, "avg_logprob": -0.22476024012411794, "compression_ratio": 1.5955882352941178, "no_speech_prob": 0.0006666423287242651}, {"id": 1379, "seek": 422620, "start": 4251.76, "end": 4252.92, "text": " I didn't specify string.", "tokens": [51642, 286, 994, 380, 16500, 6798, 13, 51700], "temperature": 0.0, "avg_logprob": -0.22476024012411794, "compression_ratio": 1.5955882352941178, "no_speech_prob": 0.0006666423287242651}, {"id": 1380, "seek": 425292, "start": 4252.92, "end": 4256.28, "text": " But otherwise, this is pretty similar to what we've done in C.", "tokens": [50364, 583, 5911, 11, 341, 307, 1238, 2531, 281, 437, 321, 600, 1096, 294, 383, 13, 50532], "temperature": 0.0, "avg_logprob": -0.13056885250031003, "compression_ratio": 1.6627906976744187, "no_speech_prob": 0.00048781608347781}, {"id": 1381, "seek": 425292, "start": 4256.28, "end": 4261.2, "text": " But what's beautiful here, and let me go ahead and hide that for just a second,", "tokens": [50532, 583, 437, 311, 2238, 510, 11, 293, 718, 385, 352, 2286, 293, 6479, 300, 337, 445, 257, 1150, 11, 50778], "temperature": 0.0, "avg_logprob": -0.13056885250031003, "compression_ratio": 1.6627906976744187, "no_speech_prob": 0.00048781608347781}, {"id": 1382, "seek": 425292, "start": 4261.2, "end": 4265.16, "text": " let me go ahead and prompt the user for his or her name.", "tokens": [50778, 718, 385, 352, 2286, 293, 12391, 264, 4195, 337, 702, 420, 720, 1315, 13, 50976], "temperature": 0.0, "avg_logprob": -0.13056885250031003, "compression_ratio": 1.6627906976744187, "no_speech_prob": 0.00048781608347781}, {"id": 1383, "seek": 425292, "start": 4265.16, "end": 4267.12, "text": " So let's ask for the name here.", "tokens": [50976, 407, 718, 311, 1029, 337, 264, 1315, 510, 13, 51074], "temperature": 0.0, "avg_logprob": -0.13056885250031003, "compression_ratio": 1.6627906976744187, "no_speech_prob": 0.00048781608347781}, {"id": 1384, "seek": 425292, "start": 4267.12, "end": 4270.68, "text": " And then if I want to search the book, which is just a list of names,", "tokens": [51074, 400, 550, 498, 286, 528, 281, 3164, 264, 1446, 11, 597, 307, 445, 257, 1329, 295, 5288, 11, 51252], "temperature": 0.0, "avg_logprob": -0.13056885250031003, "compression_ratio": 1.6627906976744187, "no_speech_prob": 0.00048781608347781}, {"id": 1385, "seek": 425292, "start": 4270.68, "end": 4272.32, "text": " how do I implement linear search?", "tokens": [51252, 577, 360, 286, 4445, 8213, 3164, 30, 51334], "temperature": 0.0, "avg_logprob": -0.13056885250031003, "compression_ratio": 1.6627906976744187, "no_speech_prob": 0.00048781608347781}, {"id": 1386, "seek": 425292, "start": 4272.32, "end": 4280.68, "text": " Well, I could just do if name in book, print, calling, name,", "tokens": [51334, 1042, 11, 286, 727, 445, 360, 498, 1315, 294, 1446, 11, 4482, 11, 5141, 11, 1315, 11, 51752], "temperature": 0.0, "avg_logprob": -0.13056885250031003, "compression_ratio": 1.6627906976744187, "no_speech_prob": 0.00048781608347781}, {"id": 1387, "seek": 425292, "start": 4280.68, "end": 4282.52, "text": " and let's make this an F string.", "tokens": [51752, 293, 718, 311, 652, 341, 364, 479, 6798, 13, 51844], "temperature": 0.0, "avg_logprob": -0.13056885250031003, "compression_ratio": 1.6627906976744187, "no_speech_prob": 0.00048781608347781}, {"id": 1388, "seek": 428252, "start": 4282.52, "end": 4285.320000000001, "text": " And then down here, that's it.", "tokens": [50364, 400, 550, 760, 510, 11, 300, 311, 309, 13, 50504], "temperature": 0.0, "avg_logprob": -0.13646025481047452, "compression_ratio": 1.7412587412587412, "no_speech_prob": 0.00032501635723747313}, {"id": 1389, "seek": 428252, "start": 4285.320000000001, "end": 4287.56, "text": " So that's how you implement linear search in Python.", "tokens": [50504, 407, 300, 311, 577, 291, 4445, 8213, 3164, 294, 15329, 13, 50616], "temperature": 0.0, "avg_logprob": -0.13646025481047452, "compression_ratio": 1.7412587412587412, "no_speech_prob": 0.00032501635723747313}, {"id": 1390, "seek": 428252, "start": 4287.56, "end": 4288.6, "text": " You don't need a loop.", "tokens": [50616, 509, 500, 380, 643, 257, 6367, 13, 50668], "temperature": 0.0, "avg_logprob": -0.13646025481047452, "compression_ratio": 1.7412587412587412, "no_speech_prob": 0.00032501635723747313}, {"id": 1391, "seek": 428252, "start": 4288.6, "end": 4290.84, "text": " You can just ask the question yourself.", "tokens": [50668, 509, 393, 445, 1029, 264, 1168, 1803, 13, 50780], "temperature": 0.0, "avg_logprob": -0.13646025481047452, "compression_ratio": 1.7412587412587412, "no_speech_prob": 0.00032501635723747313}, {"id": 1392, "seek": 428252, "start": 4290.84, "end": 4295.4800000000005, "text": " So if book is a list, and name is the string that you're looking for,", "tokens": [50780, 407, 498, 1446, 307, 257, 1329, 11, 293, 1315, 307, 264, 6798, 300, 291, 434, 1237, 337, 11, 51012], "temperature": 0.0, "avg_logprob": -0.13646025481047452, "compression_ratio": 1.7412587412587412, "no_speech_prob": 0.00032501635723747313}, {"id": 1393, "seek": 428252, "start": 4295.4800000000005, "end": 4297.88, "text": " just ask the language to figure this out for you.", "tokens": [51012, 445, 1029, 264, 2856, 281, 2573, 341, 484, 337, 291, 13, 51132], "temperature": 0.0, "avg_logprob": -0.13646025481047452, "compression_ratio": 1.7412587412587412, "no_speech_prob": 0.00032501635723747313}, {"id": 1394, "seek": 428252, "start": 4297.88, "end": 4303.280000000001, "text": " If name in book is the syntax you can use to ask literally that question.", "tokens": [51132, 759, 1315, 294, 1446, 307, 264, 28431, 291, 393, 764, 281, 1029, 3736, 300, 1168, 13, 51402], "temperature": 0.0, "avg_logprob": -0.13646025481047452, "compression_ratio": 1.7412587412587412, "no_speech_prob": 0.00032501635723747313}, {"id": 1395, "seek": 428252, "start": 4303.280000000001, "end": 4306.88, "text": " And in Python, we'll use probably linear search over that list,", "tokens": [51402, 400, 294, 15329, 11, 321, 603, 764, 1391, 8213, 3164, 670, 300, 1329, 11, 51582], "temperature": 0.0, "avg_logprob": -0.13646025481047452, "compression_ratio": 1.7412587412587412, "no_speech_prob": 0.00032501635723747313}, {"id": 1396, "seek": 428252, "start": 4306.88, "end": 4308.96, "text": " because it doesn't necessarily know it's sorted,", "tokens": [51582, 570, 309, 1177, 380, 4725, 458, 309, 311, 25462, 11, 51686], "temperature": 0.0, "avg_logprob": -0.13646025481047452, "compression_ratio": 1.7412587412587412, "no_speech_prob": 0.00032501635723747313}, {"id": 1397, "seek": 428252, "start": 4308.96, "end": 4310.76, "text": " even though it happens to be alphabetically.", "tokens": [51686, 754, 1673, 309, 2314, 281, 312, 23339, 984, 13, 51776], "temperature": 0.0, "avg_logprob": -0.13646025481047452, "compression_ratio": 1.7412587412587412, "no_speech_prob": 0.00032501635723747313}, {"id": 1398, "seek": 431076, "start": 4310.76, "end": 4314.68, "text": " But it will find it for you, thereby saving us a lot of the complexity", "tokens": [50364, 583, 309, 486, 915, 309, 337, 291, 11, 28281, 6816, 505, 257, 688, 295, 264, 14024, 50560], "temperature": 0.0, "avg_logprob": -0.15856277241426356, "compression_ratio": 1.5807860262008733, "no_speech_prob": 0.001810094341635704}, {"id": 1399, "seek": 431076, "start": 4314.68, "end": 4318.2, "text": " and time of having had to implement that ourselves.", "tokens": [50560, 293, 565, 295, 1419, 632, 281, 4445, 300, 4175, 13, 50736], "temperature": 0.0, "avg_logprob": -0.15856277241426356, "compression_ratio": 1.5807860262008733, "no_speech_prob": 0.001810094341635704}, {"id": 1400, "seek": 431076, "start": 4318.2, "end": 4323.04, "text": " Meanwhile, if I want to compare two strings, let me propose this.", "tokens": [50736, 13879, 11, 498, 286, 528, 281, 6794, 732, 13985, 11, 718, 385, 17421, 341, 13, 50978], "temperature": 0.0, "avg_logprob": -0.15856277241426356, "compression_ratio": 1.5807860262008733, "no_speech_prob": 0.001810094341635704}, {"id": 1401, "seek": 431076, "start": 4323.04, "end": 4324.76, "text": " Let me write a quick program here.", "tokens": [50978, 961, 385, 2464, 257, 1702, 1461, 510, 13, 51064], "temperature": 0.0, "avg_logprob": -0.15856277241426356, "compression_ratio": 1.5807860262008733, "no_speech_prob": 0.001810094341635704}, {"id": 1402, "seek": 431076, "start": 4324.76, "end": 4326.52, "text": " Compare 1.py.", "tokens": [51064, 48523, 502, 13, 8200, 13, 51152], "temperature": 0.0, "avg_logprob": -0.15856277241426356, "compression_ratio": 1.5807860262008733, "no_speech_prob": 0.001810094341635704}, {"id": 1403, "seek": 431076, "start": 4326.52, "end": 4331.08, "text": " And let me go ahead and from CS50 import, get string as before.", "tokens": [51152, 400, 718, 385, 352, 2286, 293, 490, 9460, 2803, 974, 11, 483, 6798, 382, 949, 13, 51380], "temperature": 0.0, "avg_logprob": -0.15856277241426356, "compression_ratio": 1.5807860262008733, "no_speech_prob": 0.001810094341635704}, {"id": 1404, "seek": 431076, "start": 4331.08, "end": 4336.22, "text": " And now let me go ahead and get one string that I'll call S.", "tokens": [51380, 400, 586, 718, 385, 352, 2286, 293, 483, 472, 6798, 300, 286, 603, 818, 318, 13, 51637], "temperature": 0.0, "avg_logprob": -0.15856277241426356, "compression_ratio": 1.5807860262008733, "no_speech_prob": 0.001810094341635704}, {"id": 1405, "seek": 433622, "start": 4336.22, "end": 4342.5, "text": " And let me get another string that I shall call T, just as we did a few weeks ago.", "tokens": [50364, 400, 718, 385, 483, 1071, 6798, 300, 286, 4393, 818, 314, 11, 445, 382, 321, 630, 257, 1326, 3259, 2057, 13, 50678], "temperature": 0.0, "avg_logprob": -0.15877817939309513, "compression_ratio": 1.4793814432989691, "no_speech_prob": 0.0003353360516484827}, {"id": 1406, "seek": 433622, "start": 4342.5, "end": 4347.14, "text": " And now in C, this was buggy.", "tokens": [50678, 400, 586, 294, 383, 11, 341, 390, 7426, 1480, 13, 50910], "temperature": 0.0, "avg_logprob": -0.15877817939309513, "compression_ratio": 1.4793814432989691, "no_speech_prob": 0.0003353360516484827}, {"id": 1407, "seek": 433622, "start": 4347.14, "end": 4352.38, "text": " If I print same, else I print different.", "tokens": [50910, 759, 286, 4482, 912, 11, 1646, 286, 4482, 819, 13, 51172], "temperature": 0.0, "avg_logprob": -0.15877817939309513, "compression_ratio": 1.4793814432989691, "no_speech_prob": 0.0003353360516484827}, {"id": 1408, "seek": 433622, "start": 4352.38, "end": 4356.780000000001, "text": " So in C, just to be super clear, why was this incorrect,", "tokens": [51172, 407, 294, 383, 11, 445, 281, 312, 1687, 1850, 11, 983, 390, 341, 18424, 11, 51392], "temperature": 0.0, "avg_logprob": -0.15877817939309513, "compression_ratio": 1.4793814432989691, "no_speech_prob": 0.0003353360516484827}, {"id": 1409, "seek": 433622, "start": 4356.780000000001, "end": 4359.54, "text": " this general idea of using equals equals?", "tokens": [51392, 341, 2674, 1558, 295, 1228, 6915, 6915, 30, 51530], "temperature": 0.0, "avg_logprob": -0.15877817939309513, "compression_ratio": 1.4793814432989691, "no_speech_prob": 0.0003353360516484827}, {"id": 1410, "seek": 433622, "start": 4362.9400000000005, "end": 4364.42, "text": " Yeah, they're comparing addresses.", "tokens": [51700, 865, 11, 436, 434, 15763, 16862, 13, 51774], "temperature": 0.0, "avg_logprob": -0.15877817939309513, "compression_ratio": 1.4793814432989691, "no_speech_prob": 0.0003353360516484827}, {"id": 1411, "seek": 436442, "start": 4364.42, "end": 4367.06, "text": " This was like the day before we peeled back", "tokens": [50364, 639, 390, 411, 264, 786, 949, 321, 39033, 646, 50496], "temperature": 0.0, "avg_logprob": -0.15206822731512057, "compression_ratio": 1.7114754098360656, "no_speech_prob": 0.0001313471293542534}, {"id": 1412, "seek": 436442, "start": 4367.06, "end": 4369.34, "text": " the layer of what a string actually is.", "tokens": [50496, 264, 4583, 295, 437, 257, 6798, 767, 307, 13, 50610], "temperature": 0.0, "avg_logprob": -0.15206822731512057, "compression_ratio": 1.7114754098360656, "no_speech_prob": 0.0001313471293542534}, {"id": 1413, "seek": 436442, "start": 4369.34, "end": 4373.1, "text": " And it turns out that S and T in C were char stars or addresses,", "tokens": [50610, 400, 309, 4523, 484, 300, 318, 293, 314, 294, 383, 645, 1290, 6105, 420, 16862, 11, 50798], "temperature": 0.0, "avg_logprob": -0.15206822731512057, "compression_ratio": 1.7114754098360656, "no_speech_prob": 0.0001313471293542534}, {"id": 1414, "seek": 436442, "start": 4373.1, "end": 4375.26, "text": " which means, certainly, if you get two different strings,", "tokens": [50798, 597, 1355, 11, 3297, 11, 498, 291, 483, 732, 819, 13985, 11, 50906], "temperature": 0.0, "avg_logprob": -0.15206822731512057, "compression_ratio": 1.7114754098360656, "no_speech_prob": 0.0001313471293542534}, {"id": 1415, "seek": 436442, "start": 4375.26, "end": 4376.86, "text": " even if you've typed the same characters,", "tokens": [50906, 754, 498, 291, 600, 33941, 264, 912, 4342, 11, 50986], "temperature": 0.0, "avg_logprob": -0.15206822731512057, "compression_ratio": 1.7114754098360656, "no_speech_prob": 0.0001313471293542534}, {"id": 1416, "seek": 436442, "start": 4376.86, "end": 4378.74, "text": " you're going to be comparing two different addresses.", "tokens": [50986, 291, 434, 516, 281, 312, 15763, 732, 819, 16862, 13, 51080], "temperature": 0.0, "avg_logprob": -0.15206822731512057, "compression_ratio": 1.7114754098360656, "no_speech_prob": 0.0001313471293542534}, {"id": 1417, "seek": 436442, "start": 4378.74, "end": 4380.02, "text": " They're not going to be the same.", "tokens": [51080, 814, 434, 406, 516, 281, 312, 264, 912, 13, 51144], "temperature": 0.0, "avg_logprob": -0.15206822731512057, "compression_ratio": 1.7114754098360656, "no_speech_prob": 0.0001313471293542534}, {"id": 1418, "seek": 436442, "start": 4380.02, "end": 4382.82, "text": " Now you can perhaps infer from the theme of today,", "tokens": [51144, 823, 291, 393, 4317, 13596, 490, 264, 6314, 295, 965, 11, 51284], "temperature": 0.0, "avg_logprob": -0.15206822731512057, "compression_ratio": 1.7114754098360656, "no_speech_prob": 0.0001313471293542534}, {"id": 1419, "seek": 436442, "start": 4382.82, "end": 4387.22, "text": " what is Python going to do if asked if S and T are equal?", "tokens": [51284, 437, 307, 15329, 516, 281, 360, 498, 2351, 498, 318, 293, 314, 366, 2681, 30, 51504], "temperature": 0.0, "avg_logprob": -0.15206822731512057, "compression_ratio": 1.7114754098360656, "no_speech_prob": 0.0001313471293542534}, {"id": 1420, "seek": 436442, "start": 4387.22, "end": 4391.26, "text": " It's going to ask and answer that question as you would expect as the human.", "tokens": [51504, 467, 311, 516, 281, 1029, 293, 1867, 300, 1168, 382, 291, 576, 2066, 382, 264, 1952, 13, 51706], "temperature": 0.0, "avg_logprob": -0.15206822731512057, "compression_ratio": 1.7114754098360656, "no_speech_prob": 0.0001313471293542534}, {"id": 1421, "seek": 439126, "start": 4391.26, "end": 4394.900000000001, "text": " Equals equals now in Python is going to compare S and T,", "tokens": [50364, 15624, 1124, 6915, 586, 294, 15329, 307, 516, 281, 6794, 318, 293, 314, 11, 50546], "temperature": 0.0, "avg_logprob": -0.1533440203706095, "compression_ratio": 1.8095238095238095, "no_speech_prob": 0.010651422664523125}, {"id": 1422, "seek": 439126, "start": 4394.900000000001, "end": 4397.7, "text": " look at their actual values, because they are strings,", "tokens": [50546, 574, 412, 641, 3539, 4190, 11, 570, 436, 366, 13985, 11, 50686], "temperature": 0.0, "avg_logprob": -0.1533440203706095, "compression_ratio": 1.8095238095238095, "no_speech_prob": 0.010651422664523125}, {"id": 1423, "seek": 439126, "start": 4397.7, "end": 4401.5, "text": " and return same if you literally type the same words.", "tokens": [50686, 293, 2736, 912, 498, 291, 3736, 2010, 264, 912, 2283, 13, 50876], "temperature": 0.0, "avg_logprob": -0.1533440203706095, "compression_ratio": 1.8095238095238095, "no_speech_prob": 0.010651422664523125}, {"id": 1424, "seek": 439126, "start": 4401.5, "end": 4406.66, "text": " So in here, if I go in here, and I do Python of compare 1.py,", "tokens": [50876, 407, 294, 510, 11, 498, 286, 352, 294, 510, 11, 293, 286, 360, 15329, 295, 6794, 502, 13, 8200, 11, 51134], "temperature": 0.0, "avg_logprob": -0.1533440203706095, "compression_ratio": 1.8095238095238095, "no_speech_prob": 0.010651422664523125}, {"id": 1425, "seek": 439126, "start": 4406.66, "end": 4412.38, "text": " and I type in, for instance, Maria, and then I type in Maria,", "tokens": [51134, 293, 286, 2010, 294, 11, 337, 5197, 11, 12734, 11, 293, 550, 286, 2010, 294, 12734, 11, 51420], "temperature": 0.0, "avg_logprob": -0.1533440203706095, "compression_ratio": 1.8095238095238095, "no_speech_prob": 0.010651422664523125}, {"id": 1426, "seek": 439126, "start": 4412.38, "end": 4413.34, "text": " they're indeed the same.", "tokens": [51420, 436, 434, 6451, 264, 912, 13, 51468], "temperature": 0.0, "avg_logprob": -0.1533440203706095, "compression_ratio": 1.8095238095238095, "no_speech_prob": 0.010651422664523125}, {"id": 1427, "seek": 439126, "start": 4413.34, "end": 4416.780000000001, "text": " If I type in Maria and say Stelios, they're different,", "tokens": [51468, 759, 286, 2010, 294, 12734, 293, 584, 745, 338, 2717, 11, 436, 434, 819, 11, 51640], "temperature": 0.0, "avg_logprob": -0.1533440203706095, "compression_ratio": 1.8095238095238095, "no_speech_prob": 0.010651422664523125}, {"id": 1428, "seek": 439126, "start": 4416.780000000001, "end": 4419.18, "text": " because it's actually now comparing the strings,", "tokens": [51640, 570, 309, 311, 767, 586, 15763, 264, 13985, 11, 51760], "temperature": 0.0, "avg_logprob": -0.1533440203706095, "compression_ratio": 1.8095238095238095, "no_speech_prob": 0.010651422664523125}, {"id": 1429, "seek": 441918, "start": 4419.18, "end": 4421.900000000001, "text": " as we would have hoped some time ago.", "tokens": [50364, 382, 321, 576, 362, 19737, 512, 565, 2057, 13, 50500], "temperature": 0.0, "avg_logprob": -0.18158671831843828, "compression_ratio": 1.493273542600897, "no_speech_prob": 0.0012842206051573157}, {"id": 1430, "seek": 441918, "start": 4421.900000000001, "end": 4424.0, "text": " So let's take a look at another that kind of led", "tokens": [50500, 407, 718, 311, 747, 257, 574, 412, 1071, 300, 733, 295, 4684, 50605], "temperature": 0.0, "avg_logprob": -0.18158671831843828, "compression_ratio": 1.493273542600897, "no_speech_prob": 0.0012842206051573157}, {"id": 1431, "seek": 441918, "start": 4424.0, "end": 4425.58, "text": " to some interesting quandaries.", "tokens": [50605, 281, 512, 1880, 6932, 4889, 13, 50684], "temperature": 0.0, "avg_logprob": -0.18158671831843828, "compression_ratio": 1.493273542600897, "no_speech_prob": 0.0012842206051573157}, {"id": 1432, "seek": 441918, "start": 4425.58, "end": 4430.700000000001, "text": " You might recall in week four, we had this example in C.", "tokens": [50684, 509, 1062, 9901, 294, 1243, 1451, 11, 321, 632, 341, 1365, 294, 383, 13, 50940], "temperature": 0.0, "avg_logprob": -0.18158671831843828, "compression_ratio": 1.493273542600897, "no_speech_prob": 0.0012842206051573157}, {"id": 1433, "seek": 441918, "start": 4430.700000000001, "end": 4434.780000000001, "text": " No swap, so named, because this just did not work.", "tokens": [50940, 883, 18135, 11, 370, 4926, 11, 570, 341, 445, 630, 406, 589, 13, 51144], "temperature": 0.0, "avg_logprob": -0.18158671831843828, "compression_ratio": 1.493273542600897, "no_speech_prob": 0.0012842206051573157}, {"id": 1434, "seek": 441918, "start": 4434.780000000001, "end": 4437.42, "text": " It was logically, seemingly correct.", "tokens": [51144, 467, 390, 38887, 11, 18709, 3006, 13, 51276], "temperature": 0.0, "avg_logprob": -0.18158671831843828, "compression_ratio": 1.493273542600897, "no_speech_prob": 0.0012842206051573157}, {"id": 1435, "seek": 441918, "start": 4437.42, "end": 4442.58, "text": " But swap did not actually swap x and y, but it did swap a and b.", "tokens": [51276, 583, 18135, 630, 406, 767, 18135, 2031, 293, 288, 11, 457, 309, 630, 18135, 257, 293, 272, 13, 51534], "temperature": 0.0, "avg_logprob": -0.18158671831843828, "compression_ratio": 1.493273542600897, "no_speech_prob": 0.0012842206051573157}, {"id": 1436, "seek": 441918, "start": 4442.58, "end": 4443.08, "text": " Why?", "tokens": [51534, 1545, 30, 51559], "temperature": 0.0, "avg_logprob": -0.18158671831843828, "compression_ratio": 1.493273542600897, "no_speech_prob": 0.0012842206051573157}, {"id": 1437, "seek": 444308, "start": 4443.84, "end": 4449.84, "text": " The memory locations were different.", "tokens": [50402, 440, 4675, 9253, 645, 819, 13, 50702], "temperature": 0.0, "avg_logprob": -0.1736621175493513, "compression_ratio": 1.7272727272727273, "no_speech_prob": 8.750125562073663e-05}, {"id": 1438, "seek": 444308, "start": 4449.84, "end": 4452.88, "text": " So x and y, recall, are variables in C that", "tokens": [50702, 407, 2031, 293, 288, 11, 9901, 11, 366, 9102, 294, 383, 300, 50854], "temperature": 0.0, "avg_logprob": -0.1736621175493513, "compression_ratio": 1.7272727272727273, "no_speech_prob": 8.750125562073663e-05}, {"id": 1439, "seek": 444308, "start": 4452.88, "end": 4456.08, "text": " exist in a certain slice of memory that we called a frame on the stack,", "tokens": [50854, 2514, 294, 257, 1629, 13153, 295, 4675, 300, 321, 1219, 257, 3920, 322, 264, 8630, 11, 51014], "temperature": 0.0, "avg_logprob": -0.1736621175493513, "compression_ratio": 1.7272727272727273, "no_speech_prob": 8.750125562073663e-05}, {"id": 1440, "seek": 444308, "start": 4456.08, "end": 4458.08, "text": " main's frame on the stack.", "tokens": [51014, 2135, 311, 3920, 322, 264, 8630, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1736621175493513, "compression_ratio": 1.7272727272727273, "no_speech_prob": 8.750125562073663e-05}, {"id": 1441, "seek": 444308, "start": 4458.08, "end": 4462.12, "text": " Meanwhile, a and b are from a slightly different location in memory.", "tokens": [51114, 13879, 11, 257, 293, 272, 366, 490, 257, 4748, 819, 4914, 294, 4675, 13, 51316], "temperature": 0.0, "avg_logprob": -0.1736621175493513, "compression_ratio": 1.7272727272727273, "no_speech_prob": 8.750125562073663e-05}, {"id": 1442, "seek": 444308, "start": 4462.12, "end": 4463.84, "text": " We sort of kept drawing it slightly above,", "tokens": [51316, 492, 1333, 295, 4305, 6316, 309, 4748, 3673, 11, 51402], "temperature": 0.0, "avg_logprob": -0.1736621175493513, "compression_ratio": 1.7272727272727273, "no_speech_prob": 8.750125562073663e-05}, {"id": 1443, "seek": 444308, "start": 4463.84, "end": 4468.08, "text": " like a tray at the dining hall on the so-called stack.", "tokens": [51402, 411, 257, 16027, 412, 264, 17874, 6500, 322, 264, 370, 12, 11880, 8630, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1736621175493513, "compression_ratio": 1.7272727272727273, "no_speech_prob": 8.750125562073663e-05}, {"id": 1444, "seek": 444308, "start": 4468.08, "end": 4472.0, "text": " A and b had the same values of x and y, one and two,", "tokens": [51614, 316, 293, 272, 632, 264, 912, 4190, 295, 2031, 293, 288, 11, 472, 293, 732, 11, 51810], "temperature": 0.0, "avg_logprob": -0.1736621175493513, "compression_ratio": 1.7272727272727273, "no_speech_prob": 8.750125562073663e-05}, {"id": 1445, "seek": 447200, "start": 4472.0, "end": 4473.36, "text": " but their own copies of them.", "tokens": [50364, 457, 641, 1065, 14341, 295, 552, 13, 50432], "temperature": 0.0, "avg_logprob": -0.1705477855823658, "compression_ratio": 1.680327868852459, "no_speech_prob": 0.00027802580734714866}, {"id": 1446, "seek": 447200, "start": 4473.36, "end": 4477.16, "text": " So even though we logically, as with Kate, I think with the Gatorade,", "tokens": [50432, 407, 754, 1673, 321, 38887, 11, 382, 365, 16251, 11, 286, 519, 365, 264, 460, 1639, 762, 11, 50622], "temperature": 0.0, "avg_logprob": -0.1705477855823658, "compression_ratio": 1.680327868852459, "no_speech_prob": 0.00027802580734714866}, {"id": 1447, "seek": 447200, "start": 4477.16, "end": 4481.28, "text": " swap the two values, we ultimately swap the wrong two values", "tokens": [50622, 18135, 264, 732, 4190, 11, 321, 6284, 18135, 264, 2085, 732, 4190, 50828], "temperature": 0.0, "avg_logprob": -0.1705477855823658, "compression_ratio": 1.680327868852459, "no_speech_prob": 0.00027802580734714866}, {"id": 1448, "seek": 447200, "start": 4481.28, "end": 4485.36, "text": " without actually permanently mutating the original x and y.", "tokens": [50828, 1553, 767, 24042, 5839, 990, 264, 3380, 2031, 293, 288, 13, 51032], "temperature": 0.0, "avg_logprob": -0.1705477855823658, "compression_ratio": 1.680327868852459, "no_speech_prob": 0.00027802580734714866}, {"id": 1449, "seek": 447200, "start": 4485.36, "end": 4488.6, "text": " So unfortunately, and unfortunately in Python,", "tokens": [51032, 407, 7015, 11, 293, 7015, 294, 15329, 11, 51194], "temperature": 0.0, "avg_logprob": -0.1705477855823658, "compression_ratio": 1.680327868852459, "no_speech_prob": 0.00027802580734714866}, {"id": 1450, "seek": 447200, "start": 4488.6, "end": 4490.36, "text": " there is no such thing as a pointer.", "tokens": [51194, 456, 307, 572, 1270, 551, 382, 257, 23918, 13, 51282], "temperature": 0.0, "avg_logprob": -0.1705477855823658, "compression_ratio": 1.680327868852459, "no_speech_prob": 0.00027802580734714866}, {"id": 1451, "seek": 447200, "start": 4490.36, "end": 4491.76, "text": " So those are now gone.", "tokens": [51282, 407, 729, 366, 586, 2780, 13, 51352], "temperature": 0.0, "avg_logprob": -0.1705477855823658, "compression_ratio": 1.680327868852459, "no_speech_prob": 0.00027802580734714866}, {"id": 1452, "seek": 447200, "start": 4491.76, "end": 4493.88, "text": " So we no longer have the expressiveness with which", "tokens": [51352, 407, 321, 572, 2854, 362, 264, 5109, 8477, 365, 597, 51458], "temperature": 0.0, "avg_logprob": -0.1705477855823658, "compression_ratio": 1.680327868852459, "no_speech_prob": 0.00027802580734714866}, {"id": 1453, "seek": 447200, "start": 4493.88, "end": 4495.8, "text": " to solve this problem that way.", "tokens": [51458, 281, 5039, 341, 1154, 300, 636, 13, 51554], "temperature": 0.0, "avg_logprob": -0.1705477855823658, "compression_ratio": 1.680327868852459, "no_speech_prob": 0.00027802580734714866}, {"id": 1454, "seek": 449580, "start": 4495.8, "end": 4501.96, "text": " But let me propose that we do it in oh, so clever of another way.", "tokens": [50364, 583, 718, 385, 17421, 300, 321, 360, 309, 294, 1954, 11, 370, 13494, 295, 1071, 636, 13, 50672], "temperature": 0.0, "avg_logprob": -0.14452378712003194, "compression_ratio": 1.6680497925311204, "no_speech_prob": 0.00028684758581221104}, {"id": 1455, "seek": 449580, "start": 4501.96, "end": 4506.0, "text": " Here, let me go ahead and declare x is 1, y is 2.", "tokens": [50672, 1692, 11, 718, 385, 352, 2286, 293, 19710, 2031, 307, 502, 11, 288, 307, 568, 13, 50874], "temperature": 0.0, "avg_logprob": -0.14452378712003194, "compression_ratio": 1.6680497925311204, "no_speech_prob": 0.00028684758581221104}, {"id": 1456, "seek": 449580, "start": 4506.0, "end": 4507.72, "text": " Let me go ahead and print out as much.", "tokens": [50874, 961, 385, 352, 2286, 293, 4482, 484, 382, 709, 13, 50960], "temperature": 0.0, "avg_logprob": -0.14452378712003194, "compression_ratio": 1.6680497925311204, "no_speech_prob": 0.00028684758581221104}, {"id": 1457, "seek": 449580, "start": 4507.72, "end": 4513.360000000001, "text": " So with a format string, I'm going to go ahead and say x is x, y is y,", "tokens": [50960, 407, 365, 257, 7877, 6798, 11, 286, 478, 516, 281, 352, 2286, 293, 584, 2031, 307, 2031, 11, 288, 307, 288, 11, 51242], "temperature": 0.0, "avg_logprob": -0.14452378712003194, "compression_ratio": 1.6680497925311204, "no_speech_prob": 0.00028684758581221104}, {"id": 1458, "seek": 449580, "start": 4513.360000000001, "end": 4515.24, "text": " plugging in their respective values.", "tokens": [51242, 42975, 294, 641, 23649, 4190, 13, 51336], "temperature": 0.0, "avg_logprob": -0.14452378712003194, "compression_ratio": 1.6680497925311204, "no_speech_prob": 0.00028684758581221104}, {"id": 1459, "seek": 449580, "start": 4515.24, "end": 4516.68, "text": " I'm going to do that twice.", "tokens": [51336, 286, 478, 516, 281, 360, 300, 6091, 13, 51408], "temperature": 0.0, "avg_logprob": -0.14452378712003194, "compression_ratio": 1.6680497925311204, "no_speech_prob": 0.00028684758581221104}, {"id": 1460, "seek": 449580, "start": 4516.68, "end": 4519.52, "text": " But in between, I'm going to try to perform this swap.", "tokens": [51408, 583, 294, 1296, 11, 286, 478, 516, 281, 853, 281, 2042, 341, 18135, 13, 51550], "temperature": 0.0, "avg_logprob": -0.14452378712003194, "compression_ratio": 1.6680497925311204, "no_speech_prob": 0.00028684758581221104}, {"id": 1461, "seek": 449580, "start": 4519.52, "end": 4524.92, "text": " And if your mind's ready to be blown, do that in Python.", "tokens": [51550, 400, 498, 428, 1575, 311, 1919, 281, 312, 16479, 11, 360, 300, 294, 15329, 13, 51820], "temperature": 0.0, "avg_logprob": -0.14452378712003194, "compression_ratio": 1.6680497925311204, "no_speech_prob": 0.00028684758581221104}, {"id": 1462, "seek": 452492, "start": 4524.96, "end": 4527.4400000000005, "text": " Do the old switcheroo in Python.", "tokens": [50366, 1144, 264, 1331, 3679, 260, 1986, 294, 15329, 13, 50490], "temperature": 0.0, "avg_logprob": -0.14293134534681165, "compression_ratio": 1.7298136645962734, "no_speech_prob": 0.002182559110224247}, {"id": 1463, "seek": 452492, "start": 4527.4400000000005, "end": 4530.4400000000005, "text": " And this actually does swap the two values as you would expect.", "tokens": [50490, 400, 341, 767, 775, 18135, 264, 732, 4190, 382, 291, 576, 2066, 13, 50640], "temperature": 0.0, "avg_logprob": -0.14293134534681165, "compression_ratio": 1.7298136645962734, "no_speech_prob": 0.002182559110224247}, {"id": 1464, "seek": 452492, "start": 4530.4400000000005, "end": 4531.92, "text": " Now, this is not a very common case.", "tokens": [50640, 823, 11, 341, 307, 406, 257, 588, 2689, 1389, 13, 50714], "temperature": 0.0, "avg_logprob": -0.14293134534681165, "compression_ratio": 1.7298136645962734, "no_speech_prob": 0.002182559110224247}, {"id": 1465, "seek": 452492, "start": 4531.92, "end": 4534.4800000000005, "text": " And to be fair, this is an incredibly contrived example.", "tokens": [50714, 400, 281, 312, 3143, 11, 341, 307, 364, 6252, 660, 470, 937, 1365, 13, 50842], "temperature": 0.0, "avg_logprob": -0.14293134534681165, "compression_ratio": 1.7298136645962734, "no_speech_prob": 0.002182559110224247}, {"id": 1466, "seek": 452492, "start": 4534.4800000000005, "end": 4536.76, "text": " Because if you needed them swapped, well, maybe you", "tokens": [50842, 1436, 498, 291, 2978, 552, 50011, 11, 731, 11, 1310, 291, 50956], "temperature": 0.0, "avg_logprob": -0.14293134534681165, "compression_ratio": 1.7298136645962734, "no_speech_prob": 0.002182559110224247}, {"id": 1467, "seek": 452492, "start": 4536.76, "end": 4538.56, "text": " should have just done this in the first place.", "tokens": [50956, 820, 362, 445, 1096, 341, 294, 264, 700, 1081, 13, 51046], "temperature": 0.0, "avg_logprob": -0.14293134534681165, "compression_ratio": 1.7298136645962734, "no_speech_prob": 0.002182559110224247}, {"id": 1468, "seek": 452492, "start": 4538.56, "end": 4540.96, "text": " But it does speak to one of the features of Python", "tokens": [51046, 583, 309, 775, 1710, 281, 472, 295, 264, 4122, 295, 15329, 51166], "temperature": 0.0, "avg_logprob": -0.14293134534681165, "compression_ratio": 1.7298136645962734, "no_speech_prob": 0.002182559110224247}, {"id": 1469, "seek": 452492, "start": 4540.96, "end": 4544.16, "text": " where you can actually do something like that.", "tokens": [51166, 689, 291, 393, 767, 360, 746, 411, 300, 13, 51326], "temperature": 0.0, "avg_logprob": -0.14293134534681165, "compression_ratio": 1.7298136645962734, "no_speech_prob": 0.002182559110224247}, {"id": 1470, "seek": 452492, "start": 4544.16, "end": 4549.76, "text": " Let me introduce now one additional feature that we only recently acquired in C.", "tokens": [51326, 961, 385, 5366, 586, 472, 4497, 4111, 300, 321, 787, 3938, 17554, 294, 383, 13, 51606], "temperature": 0.0, "avg_logprob": -0.14293134534681165, "compression_ratio": 1.7298136645962734, "no_speech_prob": 0.002182559110224247}, {"id": 1471, "seek": 452492, "start": 4549.76, "end": 4551.32, "text": " And that's the notion of a struct.", "tokens": [51606, 400, 300, 311, 264, 10710, 295, 257, 6594, 13, 51684], "temperature": 0.0, "avg_logprob": -0.14293134534681165, "compression_ratio": 1.7298136645962734, "no_speech_prob": 0.002182559110224247}, {"id": 1472, "seek": 452492, "start": 4551.32, "end": 4554.2, "text": " And let me go ahead and do this in code from scratch.", "tokens": [51684, 400, 718, 385, 352, 2286, 293, 360, 341, 294, 3089, 490, 8459, 13, 51828], "temperature": 0.0, "avg_logprob": -0.14293134534681165, "compression_ratio": 1.7298136645962734, "no_speech_prob": 0.002182559110224247}, {"id": 1473, "seek": 455420, "start": 4554.24, "end": 4558.4, "text": " So let me go ahead and save this file proactively as struct0.py,", "tokens": [50366, 407, 718, 385, 352, 2286, 293, 3155, 341, 3991, 447, 45679, 382, 6594, 15, 13, 8200, 11, 50574], "temperature": 0.0, "avg_logprob": -0.15958540094723492, "compression_ratio": 1.7894736842105263, "no_speech_prob": 0.0004442092031240463}, {"id": 1474, "seek": 455420, "start": 4558.4, "end": 4560.639999999999, "text": " reminiscent of one of our older programs.", "tokens": [50574, 44304, 295, 472, 295, 527, 4906, 4268, 13, 50686], "temperature": 0.0, "avg_logprob": -0.15958540094723492, "compression_ratio": 1.7894736842105263, "no_speech_prob": 0.0004442092031240463}, {"id": 1475, "seek": 455420, "start": 4560.639999999999, "end": 4562.08, "text": " And let me go ahead and do this.", "tokens": [50686, 400, 718, 385, 352, 2286, 293, 360, 341, 13, 50758], "temperature": 0.0, "avg_logprob": -0.15958540094723492, "compression_ratio": 1.7894736842105263, "no_speech_prob": 0.0004442092031240463}, {"id": 1476, "seek": 455420, "start": 4562.08, "end": 4565.72, "text": " From cs50, import getString.", "tokens": [50758, 3358, 28277, 2803, 11, 974, 483, 4520, 2937, 13, 50940], "temperature": 0.0, "avg_logprob": -0.15958540094723492, "compression_ratio": 1.7894736842105263, "no_speech_prob": 0.0004442092031240463}, {"id": 1477, "seek": 455420, "start": 4565.72, "end": 4567.84, "text": " And then let me give myself an empty list.", "tokens": [50940, 400, 550, 718, 385, 976, 2059, 364, 6707, 1329, 13, 51046], "temperature": 0.0, "avg_logprob": -0.15958540094723492, "compression_ratio": 1.7894736842105263, "no_speech_prob": 0.0004442092031240463}, {"id": 1478, "seek": 455420, "start": 4567.84, "end": 4569.84, "text": " So that would be a conventional way of giving yourself", "tokens": [51046, 407, 300, 576, 312, 257, 16011, 636, 295, 2902, 1803, 51146], "temperature": 0.0, "avg_logprob": -0.15958540094723492, "compression_ratio": 1.7894736842105263, "no_speech_prob": 0.0004442092031240463}, {"id": 1479, "seek": 455420, "start": 4569.84, "end": 4571.4, "text": " an empty list in Python.", "tokens": [51146, 364, 6707, 1329, 294, 15329, 13, 51224], "temperature": 0.0, "avg_logprob": -0.15958540094723492, "compression_ratio": 1.7894736842105263, "no_speech_prob": 0.0004442092031240463}, {"id": 1480, "seek": 455420, "start": 4571.4, "end": 4574.88, "text": " And much like in C, you can declare an empty array.", "tokens": [51224, 400, 709, 411, 294, 383, 11, 291, 393, 19710, 364, 6707, 10225, 13, 51398], "temperature": 0.0, "avg_logprob": -0.15958540094723492, "compression_ratio": 1.7894736842105263, "no_speech_prob": 0.0004442092031240463}, {"id": 1481, "seek": 455420, "start": 4574.88, "end": 4576.76, "text": " But in C, you have to know the size of it.", "tokens": [51398, 583, 294, 383, 11, 291, 362, 281, 458, 264, 2744, 295, 309, 13, 51492], "temperature": 0.0, "avg_logprob": -0.15958540094723492, "compression_ratio": 1.7894736842105263, "no_speech_prob": 0.0004442092031240463}, {"id": 1482, "seek": 455420, "start": 4576.76, "end": 4578.32, "text": " Or if not, you have to use a pointer.", "tokens": [51492, 1610, 498, 406, 11, 291, 362, 281, 764, 257, 23918, 13, 51570], "temperature": 0.0, "avg_logprob": -0.15958540094723492, "compression_ratio": 1.7894736842105263, "no_speech_prob": 0.0004442092031240463}, {"id": 1483, "seek": 455420, "start": 4578.32, "end": 4579.32, "text": " And then you have to mallet.", "tokens": [51570, 400, 550, 291, 362, 281, 16026, 302, 13, 51620], "temperature": 0.0, "avg_logprob": -0.15958540094723492, "compression_ratio": 1.7894736842105263, "no_speech_prob": 0.0004442092031240463}, {"id": 1484, "seek": 455420, "start": 4579.32, "end": 4581.0, "text": " No, all of that is gone.", "tokens": [51620, 883, 11, 439, 295, 300, 307, 2780, 13, 51704], "temperature": 0.0, "avg_logprob": -0.15958540094723492, "compression_ratio": 1.7894736842105263, "no_speech_prob": 0.0004442092031240463}, {"id": 1485, "seek": 455420, "start": 4581.0, "end": 4582.5199999999995, "text": " Now in Python, you want a list?", "tokens": [51704, 823, 294, 15329, 11, 291, 528, 257, 1329, 30, 51780], "temperature": 0.0, "avg_logprob": -0.15958540094723492, "compression_ratio": 1.7894736842105263, "no_speech_prob": 0.0004442092031240463}, {"id": 1486, "seek": 458252, "start": 4582.52, "end": 4585.8, "text": " Just say you need a list, and it will grow and shrink as you need.", "tokens": [50364, 1449, 584, 291, 643, 257, 1329, 11, 293, 309, 486, 1852, 293, 23060, 382, 291, 643, 13, 50528], "temperature": 0.0, "avg_logprob": -0.15137364314152643, "compression_ratio": 1.6566523605150214, "no_speech_prob": 0.003824050771072507}, {"id": 1487, "seek": 458252, "start": 4585.8, "end": 4590.360000000001, "text": " Now I'm going to go ahead and just three times arbitrarily for i in the range of three.", "tokens": [50528, 823, 286, 478, 516, 281, 352, 2286, 293, 445, 1045, 1413, 19071, 3289, 337, 741, 294, 264, 3613, 295, 1045, 13, 50756], "temperature": 0.0, "avg_logprob": -0.15137364314152643, "compression_ratio": 1.6566523605150214, "no_speech_prob": 0.003824050771072507}, {"id": 1488, "seek": 458252, "start": 4590.360000000001, "end": 4594.6, "text": " Let me go ahead and ask the user for a name using getString.", "tokens": [50756, 961, 385, 352, 2286, 293, 1029, 264, 4195, 337, 257, 1315, 1228, 483, 4520, 2937, 13, 50968], "temperature": 0.0, "avg_logprob": -0.15137364314152643, "compression_ratio": 1.6566523605150214, "no_speech_prob": 0.003824050771072507}, {"id": 1489, "seek": 458252, "start": 4594.6, "end": 4596.76, "text": " And I'll ask him or her if their name.", "tokens": [50968, 400, 286, 603, 1029, 796, 420, 720, 498, 641, 1315, 13, 51076], "temperature": 0.0, "avg_logprob": -0.15137364314152643, "compression_ratio": 1.6566523605150214, "no_speech_prob": 0.003824050771072507}, {"id": 1490, "seek": 458252, "start": 4596.76, "end": 4599.56, "text": " Dorm will use getString as well.", "tokens": [51076, 413, 687, 486, 764, 483, 4520, 2937, 382, 731, 13, 51216], "temperature": 0.0, "avg_logprob": -0.15137364314152643, "compression_ratio": 1.6566523605150214, "no_speech_prob": 0.003824050771072507}, {"id": 1491, "seek": 458252, "start": 4599.56, "end": 4600.64, "text": " Dorm here.", "tokens": [51216, 413, 687, 510, 13, 51270], "temperature": 0.0, "avg_logprob": -0.15137364314152643, "compression_ratio": 1.6566523605150214, "no_speech_prob": 0.003824050771072507}, {"id": 1492, "seek": 458252, "start": 4600.64, "end": 4605.200000000001, "text": " And then I want to append to the array this student.", "tokens": [51270, 400, 550, 286, 528, 281, 34116, 281, 264, 10225, 341, 3107, 13, 51498], "temperature": 0.0, "avg_logprob": -0.15137364314152643, "compression_ratio": 1.6566523605150214, "no_speech_prob": 0.003824050771072507}, {"id": 1493, "seek": 458252, "start": 4605.200000000001, "end": 4608.280000000001, "text": " So I could do something like this.", "tokens": [51498, 407, 286, 727, 360, 746, 411, 341, 13, 51652], "temperature": 0.0, "avg_logprob": -0.15137364314152643, "compression_ratio": 1.6566523605150214, "no_speech_prob": 0.003824050771072507}, {"id": 1494, "seek": 460828, "start": 4608.28, "end": 4612.24, "text": " Students.append name.", "tokens": [50364, 17244, 13, 1746, 521, 1315, 13, 50562], "temperature": 0.0, "avg_logprob": -0.1715477992148295, "compression_ratio": 1.7632508833922262, "no_speech_prob": 0.007576663512736559}, {"id": 1495, "seek": 460828, "start": 4612.24, "end": 4614.48, "text": " And it turns out, and we've not said this yet,", "tokens": [50562, 400, 309, 4523, 484, 11, 293, 321, 600, 406, 848, 341, 1939, 11, 50674], "temperature": 0.0, "avg_logprob": -0.1715477992148295, "compression_ratio": 1.7632508833922262, "no_speech_prob": 0.007576663512736559}, {"id": 1496, "seek": 460828, "start": 4614.48, "end": 4619.759999999999, "text": " but there is inside of the list data type a method that is function built", "tokens": [50674, 457, 456, 307, 1854, 295, 264, 1329, 1412, 2010, 257, 3170, 300, 307, 2445, 3094, 50938], "temperature": 0.0, "avg_logprob": -0.1715477992148295, "compression_ratio": 1.7632508833922262, "no_speech_prob": 0.007576663512736559}, {"id": 1497, "seek": 460828, "start": 4619.759999999999, "end": 4622.5199999999995, "text": " into it called append that literally does that.", "tokens": [50938, 666, 309, 1219, 34116, 300, 3736, 775, 300, 13, 51076], "temperature": 0.0, "avg_logprob": -0.1715477992148295, "compression_ratio": 1.7632508833922262, "no_speech_prob": 0.007576663512736559}, {"id": 1498, "seek": 460828, "start": 4622.5199999999995, "end": 4625.4, "text": " So if you've got an otherwise empty list,", "tokens": [51076, 407, 498, 291, 600, 658, 364, 5911, 6707, 1329, 11, 51220], "temperature": 0.0, "avg_logprob": -0.1715477992148295, "compression_ratio": 1.7632508833922262, "no_speech_prob": 0.007576663512736559}, {"id": 1499, "seek": 460828, "start": 4625.4, "end": 4629.2, "text": " and you call that list's name.append, you'll add something to the end of the list.", "tokens": [51220, 293, 291, 818, 300, 1329, 311, 1315, 13, 1746, 521, 11, 291, 603, 909, 746, 281, 264, 917, 295, 264, 1329, 13, 51410], "temperature": 0.0, "avg_logprob": -0.1715477992148295, "compression_ratio": 1.7632508833922262, "no_speech_prob": 0.007576663512736559}, {"id": 1500, "seek": 460828, "start": 4629.2, "end": 4630.92, "text": " And if there's not enough memory for it, no big deal.", "tokens": [51410, 400, 498, 456, 311, 406, 1547, 4675, 337, 309, 11, 572, 955, 2028, 13, 51496], "temperature": 0.0, "avg_logprob": -0.1715477992148295, "compression_ratio": 1.7632508833922262, "no_speech_prob": 0.007576663512736559}, {"id": 1501, "seek": 460828, "start": 4630.92, "end": 4634.24, "text": " Python will find you the memory, allocate it, move everything in it,", "tokens": [51496, 15329, 486, 915, 291, 264, 4675, 11, 35713, 309, 11, 1286, 1203, 294, 309, 11, 51662], "temperature": 0.0, "avg_logprob": -0.1715477992148295, "compression_ratio": 1.7632508833922262, "no_speech_prob": 0.007576663512736559}, {"id": 1502, "seek": 460828, "start": 4634.24, "end": 4637.16, "text": " and you move on your way without having to worry about that.", "tokens": [51662, 293, 291, 1286, 322, 428, 636, 1553, 1419, 281, 3292, 466, 300, 13, 51808], "temperature": 0.0, "avg_logprob": -0.1715477992148295, "compression_ratio": 1.7632508833922262, "no_speech_prob": 0.007576663512736559}, {"id": 1503, "seek": 463716, "start": 4637.16, "end": 4639.32, "text": " But I don't want to store just the name.", "tokens": [50364, 583, 286, 500, 380, 528, 281, 3531, 445, 264, 1315, 13, 50472], "temperature": 0.0, "avg_logprob": -0.1045361600180929, "compression_ratio": 1.7591836734693878, "no_speech_prob": 0.00031502582714892924}, {"id": 1504, "seek": 463716, "start": 4639.32, "end": 4641.5199999999995, "text": " I want to store the name and the dorm.", "tokens": [50472, 286, 528, 281, 3531, 264, 1315, 293, 264, 12521, 13, 50582], "temperature": 0.0, "avg_logprob": -0.1045361600180929, "compression_ratio": 1.7591836734693878, "no_speech_prob": 0.00031502582714892924}, {"id": 1505, "seek": 463716, "start": 4641.5199999999995, "end": 4643.08, "text": " So I could do this.", "tokens": [50582, 407, 286, 727, 360, 341, 13, 50660], "temperature": 0.0, "avg_logprob": -0.1045361600180929, "compression_ratio": 1.7591836734693878, "no_speech_prob": 0.00031502582714892924}, {"id": 1506, "seek": 463716, "start": 4643.08, "end": 4645.76, "text": " I could do, well, maybe this isn't really students.", "tokens": [50660, 286, 727, 360, 11, 731, 11, 1310, 341, 1943, 380, 534, 1731, 13, 50794], "temperature": 0.0, "avg_logprob": -0.1045361600180929, "compression_ratio": 1.7591836734693878, "no_speech_prob": 0.00031502582714892924}, {"id": 1507, "seek": 463716, "start": 4645.76, "end": 4647.72, "text": " Maybe this is now dorms.", "tokens": [50794, 2704, 341, 307, 586, 12521, 82, 13, 50892], "temperature": 0.0, "avg_logprob": -0.1045361600180929, "compression_ratio": 1.7591836734693878, "no_speech_prob": 0.00031502582714892924}, {"id": 1508, "seek": 463716, "start": 4647.72, "end": 4652.92, "text": " And then here I could do dorms.append dorm.", "tokens": [50892, 400, 550, 510, 286, 727, 360, 12521, 82, 13, 1746, 521, 12521, 13, 51152], "temperature": 0.0, "avg_logprob": -0.1045361600180929, "compression_ratio": 1.7591836734693878, "no_speech_prob": 0.00031502582714892924}, {"id": 1509, "seek": 463716, "start": 4652.92, "end": 4656.76, "text": " But why is this devolving now into bad design", "tokens": [51152, 583, 983, 307, 341, 1905, 401, 798, 586, 666, 1578, 1715, 51344], "temperature": 0.0, "avg_logprob": -0.1045361600180929, "compression_ratio": 1.7591836734693878, "no_speech_prob": 0.00031502582714892924}, {"id": 1510, "seek": 463716, "start": 4656.76, "end": 4660.24, "text": " if my goal was to associate a student with his or her dorm", "tokens": [51344, 498, 452, 3387, 390, 281, 14644, 257, 3107, 365, 702, 420, 720, 12521, 51518], "temperature": 0.0, "avg_logprob": -0.1045361600180929, "compression_ratio": 1.7591836734693878, "no_speech_prob": 0.00031502582714892924}, {"id": 1511, "seek": 463716, "start": 4660.24, "end": 4662.28, "text": " and then keep those values together?", "tokens": [51518, 293, 550, 1066, 729, 4190, 1214, 30, 51620], "temperature": 0.0, "avg_logprob": -0.1045361600180929, "compression_ratio": 1.7591836734693878, "no_speech_prob": 0.00031502582714892924}, {"id": 1512, "seek": 463716, "start": 4662.28, "end": 4666.32, "text": " Why is this not the best approach in Python or back in the day, even", "tokens": [51620, 1545, 307, 341, 406, 264, 1151, 3109, 294, 15329, 420, 646, 294, 264, 786, 11, 754, 51822], "temperature": 0.0, "avg_logprob": -0.1045361600180929, "compression_ratio": 1.7591836734693878, "no_speech_prob": 0.00031502582714892924}, {"id": 1513, "seek": 466632, "start": 4666.32, "end": 4670.28, "text": " in C, to have two separate arrays?", "tokens": [50364, 294, 383, 11, 281, 362, 732, 4994, 41011, 30, 50562], "temperature": 0.0, "avg_logprob": -0.2705960573849978, "compression_ratio": 1.7736625514403292, "no_speech_prob": 0.02095671370625496}, {"id": 1514, "seek": 466632, "start": 4670.28, "end": 4671.48, "text": " By struct.", "tokens": [50562, 3146, 6594, 13, 50622], "temperature": 0.0, "avg_logprob": -0.2705960573849978, "compression_ratio": 1.7736625514403292, "no_speech_prob": 0.02095671370625496}, {"id": 1515, "seek": 466632, "start": 4671.48, "end": 4671.98, "text": " What's that?", "tokens": [50622, 708, 311, 300, 30, 50647], "temperature": 0.0, "avg_logprob": -0.2705960573849978, "compression_ratio": 1.7736625514403292, "no_speech_prob": 0.02095671370625496}, {"id": 1516, "seek": 466632, "start": 4671.98, "end": 4673.16, "text": " Struct.", "tokens": [50647, 745, 1757, 13, 50706], "temperature": 0.0, "avg_logprob": -0.2705960573849978, "compression_ratio": 1.7736625514403292, "no_speech_prob": 0.02095671370625496}, {"id": 1517, "seek": 466632, "start": 4673.16, "end": 4677.4, "text": " So well, you have to, like, twice as many things to maintain, for sure.", "tokens": [50706, 407, 731, 11, 291, 362, 281, 11, 411, 11, 6091, 382, 867, 721, 281, 6909, 11, 337, 988, 13, 50918], "temperature": 0.0, "avg_logprob": -0.2705960573849978, "compression_ratio": 1.7736625514403292, "no_speech_prob": 0.02095671370625496}, {"id": 1518, "seek": 466632, "start": 4677.4, "end": 4678.4, "text": " And what else?", "tokens": [50918, 400, 437, 1646, 30, 50968], "temperature": 0.0, "avg_logprob": -0.2705960573849978, "compression_ratio": 1.7736625514403292, "no_speech_prob": 0.02095671370625496}, {"id": 1519, "seek": 466632, "start": 4678.4, "end": 4679.96, "text": " You can't map one to the other.", "tokens": [50968, 509, 393, 380, 4471, 472, 281, 264, 661, 13, 51046], "temperature": 0.0, "avg_logprob": -0.2705960573849978, "compression_ratio": 1.7736625514403292, "no_speech_prob": 0.02095671370625496}, {"id": 1520, "seek": 466632, "start": 4679.96, "end": 4681.16, "text": " You can't map one to the other.", "tokens": [51046, 509, 393, 380, 4471, 472, 281, 264, 661, 13, 51106], "temperature": 0.0, "avg_logprob": -0.2705960573849978, "compression_ratio": 1.7736625514403292, "no_speech_prob": 0.02095671370625496}, {"id": 1521, "seek": 466632, "start": 4681.16, "end": 4683.28, "text": " It's just, it's like, it's very arbitrary.", "tokens": [51106, 467, 311, 445, 11, 309, 311, 411, 11, 309, 311, 588, 23211, 13, 51212], "temperature": 0.0, "avg_logprob": -0.2705960573849978, "compression_ratio": 1.7736625514403292, "no_speech_prob": 0.02095671370625496}, {"id": 1522, "seek": 466632, "start": 4683.28, "end": 4686.04, "text": " Like, it's sort of this social contract that I will just", "tokens": [51212, 1743, 11, 309, 311, 1333, 295, 341, 2093, 4364, 300, 286, 486, 445, 51350], "temperature": 0.0, "avg_logprob": -0.2705960573849978, "compression_ratio": 1.7736625514403292, "no_speech_prob": 0.02095671370625496}, {"id": 1523, "seek": 466632, "start": 4686.04, "end": 4690.04, "text": " assume that student zero lives in dorm zero.", "tokens": [51350, 6552, 300, 3107, 4018, 2909, 294, 12521, 4018, 13, 51550], "temperature": 0.0, "avg_logprob": -0.2705960573849978, "compression_ratio": 1.7736625514403292, "no_speech_prob": 0.02095671370625496}, {"id": 1524, "seek": 466632, "start": 4690.04, "end": 4692.5599999999995, "text": " And student one lives in dorm one.", "tokens": [51550, 400, 3107, 472, 2909, 294, 12521, 472, 13, 51676], "temperature": 0.0, "avg_logprob": -0.2705960573849978, "compression_ratio": 1.7736625514403292, "no_speech_prob": 0.02095671370625496}, {"id": 1525, "seek": 466632, "start": 4692.5599999999995, "end": 4693.2, "text": " And that's fine.", "tokens": [51676, 400, 300, 311, 2489, 13, 51708], "temperature": 0.0, "avg_logprob": -0.2705960573849978, "compression_ratio": 1.7736625514403292, "no_speech_prob": 0.02095671370625496}, {"id": 1526, "seek": 466632, "start": 4693.2, "end": 4694.12, "text": " And that's true.", "tokens": [51708, 400, 300, 311, 2074, 13, 51754], "temperature": 0.0, "avg_logprob": -0.2705960573849978, "compression_ratio": 1.7736625514403292, "no_speech_prob": 0.02095671370625496}, {"id": 1527, "seek": 469412, "start": 4694.12, "end": 4696.8, "text": " But one of the features of programming and computer science", "tokens": [50364, 583, 472, 295, 264, 4122, 295, 9410, 293, 3820, 3497, 50498], "temperature": 0.0, "avg_logprob": -0.15113547150517853, "compression_ratio": 1.66996699669967, "no_speech_prob": 0.0001535572373541072}, {"id": 1528, "seek": 469412, "start": 4696.8, "end": 4700.24, "text": " is this idea of encapsulation, like, associate-related memory with each", "tokens": [50498, 307, 341, 1558, 295, 38745, 2776, 11, 411, 11, 14644, 12, 12004, 4675, 365, 1184, 50670], "temperature": 0.0, "avg_logprob": -0.15113547150517853, "compression_ratio": 1.66996699669967, "no_speech_prob": 0.0001535572373541072}, {"id": 1529, "seek": 469412, "start": 4700.24, "end": 4700.8, "text": " other.", "tokens": [50670, 661, 13, 50698], "temperature": 0.0, "avg_logprob": -0.15113547150517853, "compression_ratio": 1.66996699669967, "no_speech_prob": 0.0001535572373541072}, {"id": 1530, "seek": 469412, "start": 4700.8, "end": 4702.5199999999995, "text": " And so what did we do in C instead?", "tokens": [50698, 400, 370, 437, 630, 321, 360, 294, 383, 2602, 30, 50784], "temperature": 0.0, "avg_logprob": -0.15113547150517853, "compression_ratio": 1.66996699669967, "no_speech_prob": 0.0001535572373541072}, {"id": 1531, "seek": 469412, "start": 4702.5199999999995, "end": 4705.72, "text": " We did not have two arrays.", "tokens": [50784, 492, 630, 406, 362, 732, 41011, 13, 50944], "temperature": 0.0, "avg_logprob": -0.15113547150517853, "compression_ratio": 1.66996699669967, "no_speech_prob": 0.0001535572373541072}, {"id": 1532, "seek": 469412, "start": 4705.72, "end": 4707.04, "text": " Yeah, we had a struct.", "tokens": [50944, 865, 11, 321, 632, 257, 6594, 13, 51010], "temperature": 0.0, "avg_logprob": -0.15113547150517853, "compression_ratio": 1.66996699669967, "no_speech_prob": 0.0001535572373541072}, {"id": 1533, "seek": 469412, "start": 4707.04, "end": 4710.08, "text": " And so Python doesn't have structs per se.", "tokens": [51010, 400, 370, 15329, 1177, 380, 362, 6594, 82, 680, 369, 13, 51162], "temperature": 0.0, "avg_logprob": -0.15113547150517853, "compression_ratio": 1.66996699669967, "no_speech_prob": 0.0001535572373541072}, {"id": 1534, "seek": 469412, "start": 4710.08, "end": 4712.0, "text": " It instead has what are called classes.", "tokens": [51162, 467, 2602, 575, 437, 366, 1219, 5359, 13, 51258], "temperature": 0.0, "avg_logprob": -0.15113547150517853, "compression_ratio": 1.66996699669967, "no_speech_prob": 0.0001535572373541072}, {"id": 1535, "seek": 469412, "start": 4712.0, "end": 4714.36, "text": " And it has a few other things like tuples and name tuples,", "tokens": [51258, 400, 309, 575, 257, 1326, 661, 721, 411, 2604, 2622, 293, 1315, 2604, 2622, 11, 51376], "temperature": 0.0, "avg_logprob": -0.15113547150517853, "compression_ratio": 1.66996699669967, "no_speech_prob": 0.0001535572373541072}, {"id": 1536, "seek": 469412, "start": 4714.36, "end": 4716.24, "text": " but more on those some other time.", "tokens": [51376, 457, 544, 322, 729, 512, 661, 565, 13, 51470], "temperature": 0.0, "avg_logprob": -0.15113547150517853, "compression_ratio": 1.66996699669967, "no_speech_prob": 0.0001535572373541072}, {"id": 1537, "seek": 469412, "start": 4716.24, "end": 4721.04, "text": " So it turns out I could actually implement my own notion of a student.", "tokens": [51470, 407, 309, 4523, 484, 286, 727, 767, 4445, 452, 1065, 10710, 295, 257, 3107, 13, 51710], "temperature": 0.0, "avg_logprob": -0.15113547150517853, "compression_ratio": 1.66996699669967, "no_speech_prob": 0.0001535572373541072}, {"id": 1538, "seek": 469412, "start": 4721.04, "end": 4723.0, "text": " And I could import it like this.", "tokens": [51710, 400, 286, 727, 974, 309, 411, 341, 13, 51808], "temperature": 0.0, "avg_logprob": -0.15113547150517853, "compression_ratio": 1.66996699669967, "no_speech_prob": 0.0001535572373541072}, {"id": 1539, "seek": 472300, "start": 4723.04, "end": 4726.4, "text": " The convention in Python is if you create your own struct,", "tokens": [50366, 440, 10286, 294, 15329, 307, 498, 291, 1884, 428, 1065, 6594, 11, 50534], "temperature": 0.0, "avg_logprob": -0.13655209011501737, "compression_ratio": 1.7, "no_speech_prob": 4.133415859541856e-05}, {"id": 1540, "seek": 472300, "start": 4726.4, "end": 4730.44, "text": " henceforth called a class, you capitalize the name of it by convention.", "tokens": [50534, 16678, 44779, 1219, 257, 1508, 11, 291, 48114, 264, 1315, 295, 309, 538, 10286, 13, 50736], "temperature": 0.0, "avg_logprob": -0.13655209011501737, "compression_ratio": 1.7, "no_speech_prob": 4.133415859541856e-05}, {"id": 1541, "seek": 472300, "start": 4730.44, "end": 4732.36, "text": " So a little different from C conventions.", "tokens": [50736, 407, 257, 707, 819, 490, 383, 33520, 13, 50832], "temperature": 0.0, "avg_logprob": -0.13655209011501737, "compression_ratio": 1.7, "no_speech_prob": 4.133415859541856e-05}, {"id": 1542, "seek": 472300, "start": 4732.36, "end": 4734.36, "text": " So what is a student going to look like?", "tokens": [50832, 407, 437, 307, 257, 3107, 516, 281, 574, 411, 30, 50932], "temperature": 0.0, "avg_logprob": -0.13655209011501737, "compression_ratio": 1.7, "no_speech_prob": 4.133415859541856e-05}, {"id": 1543, "seek": 472300, "start": 4734.36, "end": 4737.0, "text": " This is perhaps the most complex syntax that we'll have today,", "tokens": [50932, 639, 307, 4317, 264, 881, 3997, 28431, 300, 321, 603, 362, 965, 11, 51064], "temperature": 0.0, "avg_logprob": -0.13655209011501737, "compression_ratio": 1.7, "no_speech_prob": 4.133415859541856e-05}, {"id": 1544, "seek": 472300, "start": 4737.0, "end": 4739.04, "text": " but it just has a few lines.", "tokens": [51064, 457, 309, 445, 575, 257, 1326, 3876, 13, 51166], "temperature": 0.0, "avg_logprob": -0.13655209011501737, "compression_ratio": 1.7, "no_speech_prob": 4.133415859541856e-05}, {"id": 1545, "seek": 472300, "start": 4739.04, "end": 4741.92, "text": " If you want to implement the notion of a student, how", "tokens": [51166, 759, 291, 528, 281, 4445, 264, 10710, 295, 257, 3107, 11, 577, 51310], "temperature": 0.0, "avg_logprob": -0.13655209011501737, "compression_ratio": 1.7, "no_speech_prob": 4.133415859541856e-05}, {"id": 1546, "seek": 472300, "start": 4741.92, "end": 4742.96, "text": " might you do this?", "tokens": [51310, 1062, 291, 360, 341, 30, 51362], "temperature": 0.0, "avg_logprob": -0.13655209011501737, "compression_ratio": 1.7, "no_speech_prob": 4.133415859541856e-05}, {"id": 1547, "seek": 472300, "start": 4742.96, "end": 4748.0, "text": " Well, in Python, you literally say class student, where class is similar in spirit", "tokens": [51362, 1042, 11, 294, 15329, 11, 291, 3736, 584, 1508, 3107, 11, 689, 1508, 307, 2531, 294, 3797, 51614], "temperature": 0.0, "avg_logprob": -0.13655209011501737, "compression_ratio": 1.7, "no_speech_prob": 4.133415859541856e-05}, {"id": 1548, "seek": 472300, "start": 4748.0, "end": 4751.24, "text": " to, just to be clear, struct or type def struct.", "tokens": [51614, 281, 11, 445, 281, 312, 1850, 11, 6594, 420, 2010, 1060, 6594, 13, 51776], "temperature": 0.0, "avg_logprob": -0.13655209011501737, "compression_ratio": 1.7, "no_speech_prob": 4.133415859541856e-05}, {"id": 1549, "seek": 475124, "start": 4751.24, "end": 4753.599999999999, "text": " But in Python, we're just saying class.", "tokens": [50364, 583, 294, 15329, 11, 321, 434, 445, 1566, 1508, 13, 50482], "temperature": 0.0, "avg_logprob": -0.12428881987085882, "compression_ratio": 1.6023622047244095, "no_speech_prob": 0.00022340677969623357}, {"id": 1550, "seek": 475124, "start": 4753.599999999999, "end": 4755.5199999999995, "text": " And then this is the funky part.", "tokens": [50482, 400, 550, 341, 307, 264, 33499, 644, 13, 50578], "temperature": 0.0, "avg_logprob": -0.12428881987085882, "compression_ratio": 1.6023622047244095, "no_speech_prob": 0.00022340677969623357}, {"id": 1551, "seek": 475124, "start": 4755.5199999999995, "end": 4759.48, "text": " You can declare a function that by convention", "tokens": [50578, 509, 393, 19710, 257, 2445, 300, 538, 10286, 50776], "temperature": 0.0, "avg_logprob": -0.12428881987085882, "compression_ratio": 1.6023622047244095, "no_speech_prob": 0.00022340677969623357}, {"id": 1552, "seek": 475124, "start": 4759.48, "end": 4764.36, "text": " must be called init for initialize, that takes as its first argument", "tokens": [50776, 1633, 312, 1219, 3157, 337, 5883, 1125, 11, 300, 2516, 382, 1080, 700, 6770, 51020], "temperature": 0.0, "avg_logprob": -0.12428881987085882, "compression_ratio": 1.6023622047244095, "no_speech_prob": 0.00022340677969623357}, {"id": 1553, "seek": 475124, "start": 4764.36, "end": 4770.16, "text": " a keyword called self, and then any number of other arguments like this.", "tokens": [51020, 257, 20428, 1219, 2698, 11, 293, 550, 604, 1230, 295, 661, 12869, 411, 341, 13, 51310], "temperature": 0.0, "avg_logprob": -0.12428881987085882, "compression_ratio": 1.6023622047244095, "no_speech_prob": 0.00022340677969623357}, {"id": 1554, "seek": 475124, "start": 4770.16, "end": 4774.599999999999, "text": " And then, for reasons that will hopefully be clear momentarily,", "tokens": [51310, 400, 550, 11, 337, 4112, 300, 486, 4696, 312, 1850, 1623, 3289, 11, 51532], "temperature": 0.0, "avg_logprob": -0.12428881987085882, "compression_ratio": 1.6023622047244095, "no_speech_prob": 0.00022340677969623357}, {"id": 1555, "seek": 475124, "start": 4774.599999999999, "end": 4776.88, "text": " I can write some code inside of this method.", "tokens": [51532, 286, 393, 2464, 512, 3089, 1854, 295, 341, 3170, 13, 51646], "temperature": 0.0, "avg_logprob": -0.12428881987085882, "compression_ratio": 1.6023622047244095, "no_speech_prob": 0.00022340677969623357}, {"id": 1556, "seek": 475124, "start": 4776.88, "end": 4779.08, "text": " So long story short, what am I doing?", "tokens": [51646, 407, 938, 1657, 2099, 11, 437, 669, 286, 884, 30, 51756], "temperature": 0.0, "avg_logprob": -0.12428881987085882, "compression_ratio": 1.6023622047244095, "no_speech_prob": 0.00022340677969623357}, {"id": 1557, "seek": 477908, "start": 4779.08, "end": 4782.8, "text": " I have declared a new type of data structure called student.", "tokens": [50364, 286, 362, 15489, 257, 777, 2010, 295, 1412, 3877, 1219, 3107, 13, 50550], "temperature": 0.0, "avg_logprob": -0.12317963115504531, "compression_ratio": 1.8379446640316206, "no_speech_prob": 0.00023781358322594315}, {"id": 1558, "seek": 477908, "start": 4782.8, "end": 4785.4, "text": " And implicitly inside of this data structure,", "tokens": [50550, 400, 26947, 356, 1854, 295, 341, 1412, 3877, 11, 50680], "temperature": 0.0, "avg_logprob": -0.12317963115504531, "compression_ratio": 1.8379446640316206, "no_speech_prob": 0.00023781358322594315}, {"id": 1559, "seek": 477908, "start": 4785.4, "end": 4789.08, "text": " there are two things inside of itself, something called name and something", "tokens": [50680, 456, 366, 732, 721, 1854, 295, 2564, 11, 746, 1219, 1315, 293, 746, 50864], "temperature": 0.0, "avg_logprob": -0.12317963115504531, "compression_ratio": 1.8379446640316206, "no_speech_prob": 0.00023781358322594315}, {"id": 1560, "seek": 477908, "start": 4789.08, "end": 4790.36, "text": " called dorm.", "tokens": [50864, 1219, 12521, 13, 50928], "temperature": 0.0, "avg_logprob": -0.12317963115504531, "compression_ratio": 1.8379446640316206, "no_speech_prob": 0.00023781358322594315}, {"id": 1561, "seek": 477908, "start": 4790.36, "end": 4793.5199999999995, "text": " And this is how you would, in a C struct, typically do things", "tokens": [50928, 400, 341, 307, 577, 291, 576, 11, 294, 257, 383, 6594, 11, 5850, 360, 721, 51086], "temperature": 0.0, "avg_logprob": -0.12317963115504531, "compression_ratio": 1.8379446640316206, "no_speech_prob": 0.00023781358322594315}, {"id": 1562, "seek": 477908, "start": 4793.5199999999995, "end": 4796.76, "text": " with the data types and semicolons inside of the curly braces.", "tokens": [51086, 365, 264, 1412, 3467, 293, 27515, 401, 892, 1854, 295, 264, 32066, 41537, 13, 51248], "temperature": 0.0, "avg_logprob": -0.12317963115504531, "compression_ratio": 1.8379446640316206, "no_speech_prob": 0.00023781358322594315}, {"id": 1563, "seek": 477908, "start": 4796.76, "end": 4799.24, "text": " Meanwhile, there's this method here.", "tokens": [51248, 13879, 11, 456, 311, 341, 3170, 510, 13, 51372], "temperature": 0.0, "avg_logprob": -0.12317963115504531, "compression_ratio": 1.8379446640316206, "no_speech_prob": 0.00023781358322594315}, {"id": 1564, "seek": 477908, "start": 4799.24, "end": 4802.8, "text": " And it's a method in so far as it is inside of a class.", "tokens": [51372, 400, 309, 311, 257, 3170, 294, 370, 1400, 382, 309, 307, 1854, 295, 257, 1508, 13, 51550], "temperature": 0.0, "avg_logprob": -0.12317963115504531, "compression_ratio": 1.8379446640316206, "no_speech_prob": 0.00023781358322594315}, {"id": 1565, "seek": 477908, "start": 4802.8, "end": 4805.5199999999995, "text": " Otherwise, it's a function just by a different name.", "tokens": [51550, 10328, 11, 309, 311, 257, 2445, 445, 538, 257, 819, 1315, 13, 51686], "temperature": 0.0, "avg_logprob": -0.12317963115504531, "compression_ratio": 1.8379446640316206, "no_speech_prob": 0.00023781358322594315}, {"id": 1566, "seek": 480552, "start": 4805.52, "end": 4809.96, "text": " This method init takes whatever self is, more on that another time,", "tokens": [50364, 639, 3170, 3157, 2516, 2035, 2698, 307, 11, 544, 322, 300, 1071, 565, 11, 50586], "temperature": 0.0, "avg_logprob": -0.14588694478951247, "compression_ratio": 1.6864406779661016, "no_speech_prob": 0.00010229848703602329}, {"id": 1567, "seek": 480552, "start": 4809.96, "end": 4813.0, "text": " but it then takes zero more custom arguments that you can provide.", "tokens": [50586, 457, 309, 550, 2516, 4018, 544, 2375, 12869, 300, 291, 393, 2893, 13, 50738], "temperature": 0.0, "avg_logprob": -0.14588694478951247, "compression_ratio": 1.6864406779661016, "no_speech_prob": 0.00010229848703602329}, {"id": 1568, "seek": 480552, "start": 4813.0, "end": 4814.68, "text": " And I called it name and dorm.", "tokens": [50738, 400, 286, 1219, 309, 1315, 293, 12521, 13, 50822], "temperature": 0.0, "avg_logprob": -0.14588694478951247, "compression_ratio": 1.6864406779661016, "no_speech_prob": 0.00010229848703602329}, {"id": 1569, "seek": 480552, "start": 4814.68, "end": 4818.160000000001, "text": " So it turns out this special method init is a function that's", "tokens": [50822, 407, 309, 4523, 484, 341, 2121, 3170, 3157, 307, 257, 2445, 300, 311, 50996], "temperature": 0.0, "avg_logprob": -0.14588694478951247, "compression_ratio": 1.6864406779661016, "no_speech_prob": 0.00010229848703602329}, {"id": 1570, "seek": 480552, "start": 4818.160000000001, "end": 4821.400000000001, "text": " going to be called automatically for you any time you", "tokens": [50996, 516, 281, 312, 1219, 6772, 337, 291, 604, 565, 291, 51158], "temperature": 0.0, "avg_logprob": -0.14588694478951247, "compression_ratio": 1.6864406779661016, "no_speech_prob": 0.00010229848703602329}, {"id": 1571, "seek": 480552, "start": 4821.400000000001, "end": 4824.120000000001, "text": " create a student object.", "tokens": [51158, 1884, 257, 3107, 2657, 13, 51294], "temperature": 0.0, "avg_logprob": -0.14588694478951247, "compression_ratio": 1.6864406779661016, "no_speech_prob": 0.00010229848703602329}, {"id": 1572, "seek": 480552, "start": 4824.120000000001, "end": 4825.96, "text": " So what does that actually mean?", "tokens": [51294, 407, 437, 775, 300, 767, 914, 30, 51386], "temperature": 0.0, "avg_logprob": -0.14588694478951247, "compression_ratio": 1.6864406779661016, "no_speech_prob": 0.00010229848703602329}, {"id": 1573, "seek": 480552, "start": 4825.96, "end": 4830.120000000001, "text": " That means in your code, what you can actually do is this.", "tokens": [51386, 663, 1355, 294, 428, 3089, 11, 437, 291, 393, 767, 360, 307, 341, 13, 51594], "temperature": 0.0, "avg_logprob": -0.14588694478951247, "compression_ratio": 1.6864406779661016, "no_speech_prob": 0.00010229848703602329}, {"id": 1574, "seek": 483012, "start": 4830.12, "end": 4836.84, "text": " I can create a student in memory by saying s gets capital student passing", "tokens": [50364, 286, 393, 1884, 257, 3107, 294, 4675, 538, 1566, 262, 2170, 4238, 3107, 8437, 50700], "temperature": 0.0, "avg_logprob": -0.1425630357530382, "compression_ratio": 1.783882783882784, "no_speech_prob": 0.002251711906865239}, {"id": 1575, "seek": 483012, "start": 4836.84, "end": 4838.08, "text": " in name and dorm.", "tokens": [50700, 294, 1315, 293, 12521, 13, 50762], "temperature": 0.0, "avg_logprob": -0.1425630357530382, "compression_ratio": 1.783882783882784, "no_speech_prob": 0.002251711906865239}, {"id": 1576, "seek": 483012, "start": 4838.08, "end": 4841.68, "text": " And we don't have this feature in C. On the right hand side,", "tokens": [50762, 400, 321, 500, 380, 362, 341, 4111, 294, 383, 13, 1282, 264, 558, 1011, 1252, 11, 50942], "temperature": 0.0, "avg_logprob": -0.1425630357530382, "compression_ratio": 1.783882783882784, "no_speech_prob": 0.002251711906865239}, {"id": 1577, "seek": 483012, "start": 4841.68, "end": 4844.24, "text": " what I've highlighted is the name of the class", "tokens": [50942, 437, 286, 600, 17173, 307, 264, 1315, 295, 264, 1508, 51070], "temperature": 0.0, "avg_logprob": -0.1425630357530382, "compression_ratio": 1.783882783882784, "no_speech_prob": 0.002251711906865239}, {"id": 1578, "seek": 483012, "start": 4844.24, "end": 4846.68, "text": " and its two arguments, name and dorm, which", "tokens": [51070, 293, 1080, 732, 12869, 11, 1315, 293, 12521, 11, 597, 51192], "temperature": 0.0, "avg_logprob": -0.1425630357530382, "compression_ratio": 1.783882783882784, "no_speech_prob": 0.002251711906865239}, {"id": 1579, "seek": 483012, "start": 4846.68, "end": 4849.88, "text": " are just what the user has typed in.", "tokens": [51192, 366, 445, 437, 264, 4195, 575, 33941, 294, 13, 51352], "temperature": 0.0, "avg_logprob": -0.1425630357530382, "compression_ratio": 1.783882783882784, "no_speech_prob": 0.002251711906865239}, {"id": 1580, "seek": 483012, "start": 4849.88, "end": 4853.5199999999995, "text": " What this class does for me now is it allocates memory underneath the hood", "tokens": [51352, 708, 341, 1508, 775, 337, 385, 586, 307, 309, 12660, 1024, 4675, 7223, 264, 13376, 51534], "temperature": 0.0, "avg_logprob": -0.1425630357530382, "compression_ratio": 1.783882783882784, "no_speech_prob": 0.002251711906865239}, {"id": 1581, "seek": 483012, "start": 4853.5199999999995, "end": 4854.08, "text": " for a student.", "tokens": [51534, 337, 257, 3107, 13, 51562], "temperature": 0.0, "avg_logprob": -0.1425630357530382, "compression_ratio": 1.783882783882784, "no_speech_prob": 0.002251711906865239}, {"id": 1582, "seek": 483012, "start": 4854.08, "end": 4856.44, "text": " It's got to be big enough for their name and big enough for their dorm.", "tokens": [51562, 467, 311, 658, 281, 312, 955, 1547, 337, 641, 1315, 293, 955, 1547, 337, 641, 12521, 13, 51680], "temperature": 0.0, "avg_logprob": -0.1425630357530382, "compression_ratio": 1.783882783882784, "no_speech_prob": 0.002251711906865239}, {"id": 1583, "seek": 483012, "start": 4856.44, "end": 4858.599999999999, "text": " So it's like yay big in memory, so to speak.", "tokens": [51680, 407, 309, 311, 411, 23986, 955, 294, 4675, 11, 370, 281, 1710, 13, 51788], "temperature": 0.0, "avg_logprob": -0.1425630357530382, "compression_ratio": 1.783882783882784, "no_speech_prob": 0.002251711906865239}, {"id": 1584, "seek": 485860, "start": 4858.6, "end": 4862.240000000001, "text": " It then puts in the name and the dorm strings into that object", "tokens": [50364, 467, 550, 8137, 294, 264, 1315, 293, 264, 12521, 13985, 666, 300, 2657, 50546], "temperature": 0.0, "avg_logprob": -0.09062581143136751, "compression_ratio": 1.8666666666666667, "no_speech_prob": 0.0003053346008528024}, {"id": 1585, "seek": 485860, "start": 4862.240000000001, "end": 4864.56, "text": " and then returns the whole object.", "tokens": [50546, 293, 550, 11247, 264, 1379, 2657, 13, 50662], "temperature": 0.0, "avg_logprob": -0.09062581143136751, "compression_ratio": 1.8666666666666667, "no_speech_prob": 0.0003053346008528024}, {"id": 1586, "seek": 485860, "start": 4864.56, "end": 4868.72, "text": " So you can kind of think of this as a much fancier version of malloc.", "tokens": [50662, 407, 291, 393, 733, 295, 519, 295, 341, 382, 257, 709, 3429, 27674, 3037, 295, 16026, 905, 13, 50870], "temperature": 0.0, "avg_logprob": -0.09062581143136751, "compression_ratio": 1.8666666666666667, "no_speech_prob": 0.0003053346008528024}, {"id": 1587, "seek": 485860, "start": 4868.72, "end": 4870.92, "text": " So this is allocating all the memory you need,", "tokens": [50870, 407, 341, 307, 12660, 990, 439, 264, 4675, 291, 643, 11, 50980], "temperature": 0.0, "avg_logprob": -0.09062581143136751, "compression_ratio": 1.8666666666666667, "no_speech_prob": 0.0003053346008528024}, {"id": 1588, "seek": 485860, "start": 4870.92, "end": 4874.68, "text": " but it's also installing inside of that memory the name and the dorm.", "tokens": [50980, 457, 309, 311, 611, 20762, 1854, 295, 300, 4675, 264, 1315, 293, 264, 12521, 13, 51168], "temperature": 0.0, "avg_logprob": -0.09062581143136751, "compression_ratio": 1.8666666666666667, "no_speech_prob": 0.0003053346008528024}, {"id": 1589, "seek": 485860, "start": 4874.68, "end": 4878.84, "text": " And it's bundling it up inside of not just an arbitrary chunk of memory,", "tokens": [51168, 400, 309, 311, 13882, 1688, 309, 493, 1854, 295, 406, 445, 364, 23211, 16635, 295, 4675, 11, 51376], "temperature": 0.0, "avg_logprob": -0.09062581143136751, "compression_ratio": 1.8666666666666667, "no_speech_prob": 0.0003053346008528024}, {"id": 1590, "seek": 485860, "start": 4878.84, "end": 4883.92, "text": " but something you can call a student object.", "tokens": [51376, 457, 746, 291, 393, 818, 257, 3107, 2657, 13, 51630], "temperature": 0.0, "avg_logprob": -0.09062581143136751, "compression_ratio": 1.8666666666666667, "no_speech_prob": 0.0003053346008528024}, {"id": 1591, "seek": 485860, "start": 4883.92, "end": 4886.76, "text": " And all that means that now for our students,", "tokens": [51630, 400, 439, 300, 1355, 300, 586, 337, 527, 1731, 11, 51772], "temperature": 0.0, "avg_logprob": -0.09062581143136751, "compression_ratio": 1.8666666666666667, "no_speech_prob": 0.0003053346008528024}, {"id": 1592, "seek": 488676, "start": 4886.76, "end": 4890.400000000001, "text": " we can just go ahead and append that student to the list.", "tokens": [50364, 321, 393, 445, 352, 2286, 293, 34116, 300, 3107, 281, 264, 1329, 13, 50546], "temperature": 0.0, "avg_logprob": -0.17395755721301567, "compression_ratio": 1.7391304347826086, "no_speech_prob": 0.0049048555083572865}, {"id": 1593, "seek": 488676, "start": 4890.400000000001, "end": 4896.4400000000005, "text": " So now, if later, I want to iterate over for student in students,", "tokens": [50546, 407, 586, 11, 498, 1780, 11, 286, 528, 281, 44497, 670, 337, 3107, 294, 1731, 11, 50848], "temperature": 0.0, "avg_logprob": -0.17395755721301567, "compression_ratio": 1.7391304347826086, "no_speech_prob": 0.0049048555083572865}, {"id": 1594, "seek": 488676, "start": 4896.4400000000005, "end": 4898.4800000000005, "text": " I can go ahead and print out, for instance,", "tokens": [50848, 286, 393, 352, 2286, 293, 4482, 484, 11, 337, 5197, 11, 50950], "temperature": 0.0, "avg_logprob": -0.17395755721301567, "compression_ratio": 1.7391304347826086, "no_speech_prob": 0.0049048555083572865}, {"id": 1595, "seek": 488676, "start": 4898.4800000000005, "end": 4907.08, "text": " that student.name lives in student.dorm, close quote.", "tokens": [50950, 300, 3107, 13, 16344, 2909, 294, 3107, 13, 67, 687, 11, 1998, 6513, 13, 51380], "temperature": 0.0, "avg_logprob": -0.17395755721301567, "compression_ratio": 1.7391304347826086, "no_speech_prob": 0.0049048555083572865}, {"id": 1596, "seek": 488676, "start": 4907.08, "end": 4912.280000000001, "text": " And if now over here, oops, close that, and now over here,", "tokens": [51380, 400, 498, 586, 670, 510, 11, 34166, 11, 1998, 300, 11, 293, 586, 670, 510, 11, 51640], "temperature": 0.0, "avg_logprob": -0.17395755721301567, "compression_ratio": 1.7391304347826086, "no_speech_prob": 0.0049048555083572865}, {"id": 1597, "seek": 491228, "start": 4912.28, "end": 4916.48, "text": " if I go ahead and run Python on struct0.py.", "tokens": [50364, 498, 286, 352, 2286, 293, 1190, 15329, 322, 6594, 15, 13, 8200, 13, 50574], "temperature": 0.0, "avg_logprob": -0.29993933074328366, "compression_ratio": 1.536723163841808, "no_speech_prob": 0.012429691851139069}, {"id": 1598, "seek": 491228, "start": 4916.48, "end": 4919.48, "text": " Oh, no.", "tokens": [50574, 876, 11, 572, 13, 50724], "temperature": 0.0, "avg_logprob": -0.29993933074328366, "compression_ratio": 1.536723163841808, "no_speech_prob": 0.012429691851139069}, {"id": 1599, "seek": 491228, "start": 4919.48, "end": 4921.88, "text": " Oh, thank you.", "tokens": [50724, 876, 11, 1309, 291, 13, 50844], "temperature": 0.0, "avg_logprob": -0.29993933074328366, "compression_ratio": 1.536723163841808, "no_speech_prob": 0.012429691851139069}, {"id": 1600, "seek": 491228, "start": 4921.88, "end": 4923.2, "text": " That goes there.", "tokens": [50844, 663, 1709, 456, 13, 50910], "temperature": 0.0, "avg_logprob": -0.29993933074328366, "compression_ratio": 1.536723163841808, "no_speech_prob": 0.012429691851139069}, {"id": 1601, "seek": 491228, "start": 4923.2, "end": 4924.48, "text": " So now, damn it.", "tokens": [50910, 407, 586, 11, 8151, 309, 13, 50974], "temperature": 0.0, "avg_logprob": -0.29993933074328366, "compression_ratio": 1.536723163841808, "no_speech_prob": 0.012429691851139069}, {"id": 1602, "seek": 491228, "start": 4927.4, "end": 4928.2, "text": " Missing curly.", "tokens": [51120, 5275, 278, 32066, 13, 51160], "temperature": 0.0, "avg_logprob": -0.29993933074328366, "compression_ratio": 1.536723163841808, "no_speech_prob": 0.012429691851139069}, {"id": 1603, "seek": 491228, "start": 4928.2, "end": 4928.759999999999, "text": " Oh, thank you.", "tokens": [51160, 876, 11, 1309, 291, 13, 51188], "temperature": 0.0, "avg_logprob": -0.29993933074328366, "compression_ratio": 1.536723163841808, "no_speech_prob": 0.012429691851139069}, {"id": 1604, "seek": 491228, "start": 4931.5199999999995, "end": 4935.5599999999995, "text": " OK, so now if I want to go ahead and type Maria and Cabot and David and", "tokens": [51326, 2264, 11, 370, 586, 498, 286, 528, 281, 352, 2286, 293, 2010, 12734, 293, 14704, 310, 293, 4389, 293, 51528], "temperature": 0.0, "avg_logprob": -0.29993933074328366, "compression_ratio": 1.536723163841808, "no_speech_prob": 0.012429691851139069}, {"id": 1605, "seek": 491228, "start": 4935.5599999999995, "end": 4940.8, "text": " Mather and Rob and say Kirkland, now we get all three of those names.", "tokens": [51528, 376, 1172, 293, 5424, 293, 584, 27834, 1661, 11, 586, 321, 483, 439, 1045, 295, 729, 5288, 13, 51790], "temperature": 0.0, "avg_logprob": -0.29993933074328366, "compression_ratio": 1.536723163841808, "no_speech_prob": 0.012429691851139069}, {"id": 1606, "seek": 494080, "start": 4940.8, "end": 4945.08, "text": " And there's other ways, too, if we want to actually store this thing on disk.", "tokens": [50364, 400, 456, 311, 661, 2098, 11, 886, 11, 498, 321, 528, 281, 767, 3531, 341, 551, 322, 12355, 13, 50578], "temperature": 0.0, "avg_logprob": -0.15566950396072765, "compression_ratio": 1.6006944444444444, "no_speech_prob": 0.0015976782888174057}, {"id": 1607, "seek": 494080, "start": 4945.08, "end": 4947.4400000000005, "text": " But I'll defer that to an example online.", "tokens": [50578, 583, 286, 603, 25704, 300, 281, 364, 1365, 2950, 13, 50696], "temperature": 0.0, "avg_logprob": -0.15566950396072765, "compression_ratio": 1.6006944444444444, "no_speech_prob": 0.0015976782888174057}, {"id": 1608, "seek": 494080, "start": 4947.4400000000005, "end": 4951.72, "text": " Let's look at one final example that will hopefully either make you regret", "tokens": [50696, 961, 311, 574, 412, 472, 2572, 1365, 300, 486, 4696, 2139, 652, 291, 10879, 50910], "temperature": 0.0, "avg_logprob": -0.15566950396072765, "compression_ratio": 1.6006944444444444, "no_speech_prob": 0.0015976782888174057}, {"id": 1609, "seek": 494080, "start": 4951.72, "end": 4955.64, "text": " the past several weeks or embrace the next several instead.", "tokens": [50910, 264, 1791, 2940, 3259, 420, 14038, 264, 958, 2940, 2602, 13, 51106], "temperature": 0.0, "avg_logprob": -0.15566950396072765, "compression_ratio": 1.6006944444444444, "no_speech_prob": 0.0015976782888174057}, {"id": 1610, "seek": 494080, "start": 4955.64, "end": 4960.56, "text": " So you'll recall that, though the former I suppose could be true,", "tokens": [51106, 407, 291, 603, 9901, 300, 11, 1673, 264, 5819, 286, 7297, 727, 312, 2074, 11, 51352], "temperature": 0.0, "avg_logprob": -0.15566950396072765, "compression_ratio": 1.6006944444444444, "no_speech_prob": 0.0015976782888174057}, {"id": 1611, "seek": 494080, "start": 4960.56, "end": 4965.28, "text": " even without my help, so if I go into now, today's distribution code,", "tokens": [51352, 754, 1553, 452, 854, 11, 370, 498, 286, 352, 666, 586, 11, 965, 311, 7316, 3089, 11, 51588], "temperature": 0.0, "avg_logprob": -0.15566950396072765, "compression_ratio": 1.6006944444444444, "no_speech_prob": 0.0015976782888174057}, {"id": 1612, "seek": 494080, "start": 4965.28, "end": 4966.320000000001, "text": " you will see this program.", "tokens": [51588, 291, 486, 536, 341, 1461, 13, 51640], "temperature": 0.0, "avg_logprob": -0.15566950396072765, "compression_ratio": 1.6006944444444444, "no_speech_prob": 0.0015976782888174057}, {"id": 1613, "seek": 494080, "start": 4966.320000000001, "end": 4968.2, "text": " And we won't walk through all of its lines,", "tokens": [51640, 400, 321, 1582, 380, 1792, 807, 439, 295, 1080, 3876, 11, 51734], "temperature": 0.0, "avg_logprob": -0.15566950396072765, "compression_ratio": 1.6006944444444444, "no_speech_prob": 0.0015976782888174057}, {"id": 1614, "seek": 496820, "start": 4968.24, "end": 4971.4, "text": " but this is a program written in Python called Speller.", "tokens": [50366, 457, 341, 307, 257, 1461, 3720, 294, 15329, 1219, 3550, 4658, 13, 50524], "temperature": 0.0, "avg_logprob": -0.12221856425992018, "compression_ratio": 1.7516129032258065, "no_speech_prob": 0.0009109467500820756}, {"id": 1615, "seek": 496820, "start": 4971.4, "end": 4974.84, "text": " And what I did was literally sit down with Speller.c from problem set", "tokens": [50524, 400, 437, 286, 630, 390, 3736, 1394, 760, 365, 3550, 4658, 13, 66, 490, 1154, 992, 50696], "temperature": 0.0, "avg_logprob": -0.12221856425992018, "compression_ratio": 1.7516129032258065, "no_speech_prob": 0.0009109467500820756}, {"id": 1616, "seek": 496820, "start": 4974.84, "end": 4978.84, "text": " 5, and I just converted it from left to right from c to Python,", "tokens": [50696, 1025, 11, 293, 286, 445, 16424, 309, 490, 1411, 281, 558, 490, 269, 281, 15329, 11, 50896], "temperature": 0.0, "avg_logprob": -0.12221856425992018, "compression_ratio": 1.7516129032258065, "no_speech_prob": 0.0009109467500820756}, {"id": 1617, "seek": 496820, "start": 4978.84, "end": 4983.28, "text": " implementing it in Python in as close to an identical way as I could,", "tokens": [50896, 18114, 309, 294, 15329, 294, 382, 1998, 281, 364, 14800, 636, 382, 286, 727, 11, 51118], "temperature": 0.0, "avg_logprob": -0.12221856425992018, "compression_ratio": 1.7516129032258065, "no_speech_prob": 0.0009109467500820756}, {"id": 1618, "seek": 496820, "start": 4983.28, "end": 4985.2, "text": " just using features of Python.", "tokens": [51118, 445, 1228, 4122, 295, 15329, 13, 51214], "temperature": 0.0, "avg_logprob": -0.12221856425992018, "compression_ratio": 1.7516129032258065, "no_speech_prob": 0.0009109467500820756}, {"id": 1619, "seek": 496820, "start": 4985.2, "end": 4988.44, "text": " So just skimming this, you'll see that apparently my implementation", "tokens": [51214, 407, 445, 1110, 40471, 341, 11, 291, 603, 536, 300, 7970, 452, 11420, 51376], "temperature": 0.0, "avg_logprob": -0.12221856425992018, "compression_ratio": 1.7516129032258065, "no_speech_prob": 0.0009109467500820756}, {"id": 1620, "seek": 496820, "start": 4988.44, "end": 4992.48, "text": " of Speller in Python has a class called dictionary, which is very similar in spirit", "tokens": [51376, 295, 3550, 4658, 294, 15329, 575, 257, 1508, 1219, 25890, 11, 597, 307, 588, 2531, 294, 3797, 51578], "temperature": 0.0, "avg_logprob": -0.12221856425992018, "compression_ratio": 1.7516129032258065, "no_speech_prob": 0.0009109467500820756}, {"id": 1621, "seek": 496820, "start": 4992.48, "end": 4994.36, "text": " to dictionary.h and c.", "tokens": [51578, 281, 25890, 13, 71, 293, 269, 13, 51672], "temperature": 0.0, "avg_logprob": -0.12221856425992018, "compression_ratio": 1.7516129032258065, "no_speech_prob": 0.0009109467500820756}, {"id": 1622, "seek": 496820, "start": 4994.36, "end": 4997.4, "text": " Notice that I still have a constant here, or it's not technically a constant,", "tokens": [51672, 13428, 300, 286, 920, 362, 257, 5754, 510, 11, 420, 309, 311, 406, 12120, 257, 5754, 11, 51824], "temperature": 0.0, "avg_logprob": -0.12221856425992018, "compression_ratio": 1.7516129032258065, "no_speech_prob": 0.0009109467500820756}, {"id": 1623, "seek": 499740, "start": 4997.4, "end": 5001.12, "text": " but a variable called length equals 45, like hardcoded in dictionary", "tokens": [50364, 457, 257, 7006, 1219, 4641, 6915, 6905, 11, 411, 1152, 66, 12340, 294, 25890, 50550], "temperature": 0.0, "avg_logprob": -0.11458521419101292, "compression_ratio": 1.7215189873417722, "no_speech_prob": 0.000687811931129545}, {"id": 1624, "seek": 499740, "start": 5001.12, "end": 5003.5199999999995, "text": " slash large as Speller.c did too.", "tokens": [50550, 17330, 2416, 382, 3550, 4658, 13, 66, 630, 886, 13, 50670], "temperature": 0.0, "avg_logprob": -0.11458521419101292, "compression_ratio": 1.7215189873417722, "no_speech_prob": 0.000687811931129545}, {"id": 1625, "seek": 499740, "start": 5003.5199999999995, "end": 5006.2, "text": " I'm using command line arguments as we saw earlier,", "tokens": [50670, 286, 478, 1228, 5622, 1622, 12869, 382, 321, 1866, 3071, 11, 50804], "temperature": 0.0, "avg_logprob": -0.11458521419101292, "compression_ratio": 1.7215189873417722, "no_speech_prob": 0.000687811931129545}, {"id": 1626, "seek": 499740, "start": 5006.2, "end": 5008.719999999999, "text": " but this time in Python instead of c.", "tokens": [50804, 457, 341, 565, 294, 15329, 2602, 295, 269, 13, 50930], "temperature": 0.0, "avg_logprob": -0.11458521419101292, "compression_ratio": 1.7215189873417722, "no_speech_prob": 0.000687811931129545}, {"id": 1627, "seek": 499740, "start": 5008.719999999999, "end": 5011.2, "text": " Notice you can do funky things like this, which", "tokens": [50930, 13428, 291, 393, 360, 33499, 721, 411, 341, 11, 597, 51054], "temperature": 0.0, "avg_logprob": -0.11458521419101292, "compression_ratio": 1.7215189873417722, "no_speech_prob": 0.000687811931129545}, {"id": 1628, "seek": 499740, "start": 5011.2, "end": 5013.92, "text": " is reminiscent of our swap trick just a little bit ago.", "tokens": [51054, 307, 44304, 295, 527, 18135, 4282, 445, 257, 707, 857, 2057, 13, 51190], "temperature": 0.0, "avg_logprob": -0.11458521419101292, "compression_ratio": 1.7215189873417722, "no_speech_prob": 0.000687811931129545}, {"id": 1629, "seek": 499740, "start": 5013.92, "end": 5016.96, "text": " If you want to declare multiple variables all on the same line", "tokens": [51190, 759, 291, 528, 281, 19710, 3866, 9102, 439, 322, 264, 912, 1622, 51342], "temperature": 0.0, "avg_logprob": -0.11458521419101292, "compression_ratio": 1.7215189873417722, "no_speech_prob": 0.000687811931129545}, {"id": 1630, "seek": 499740, "start": 5016.96, "end": 5020.2, "text": " and initialize them, you can just enumerate them all with commas.", "tokens": [51342, 293, 5883, 1125, 552, 11, 291, 393, 445, 465, 15583, 473, 552, 439, 365, 800, 296, 13, 51504], "temperature": 0.0, "avg_logprob": -0.11458521419101292, "compression_ratio": 1.7215189873417722, "no_speech_prob": 0.000687811931129545}, {"id": 1631, "seek": 499740, "start": 5020.2, "end": 5022.32, "text": " Then on the other side of the equal sign,", "tokens": [51504, 1396, 322, 264, 661, 1252, 295, 264, 2681, 1465, 11, 51610], "temperature": 0.0, "avg_logprob": -0.11458521419101292, "compression_ratio": 1.7215189873417722, "no_speech_prob": 0.000687811931129545}, {"id": 1632, "seek": 499740, "start": 5022.32, "end": 5026.28, "text": " enumerate with commas the values that you want to assign to those variables.", "tokens": [51610, 465, 15583, 473, 365, 800, 296, 264, 4190, 300, 291, 528, 281, 6269, 281, 729, 9102, 13, 51808], "temperature": 0.0, "avg_logprob": -0.11458521419101292, "compression_ratio": 1.7215189873417722, "no_speech_prob": 0.000687811931129545}, {"id": 1633, "seek": 502628, "start": 5026.28, "end": 5029.4, "text": " And then down here, if I keep scrolling, you'll", "tokens": [50364, 400, 550, 760, 510, 11, 498, 286, 1066, 29053, 11, 291, 603, 50520], "temperature": 0.0, "avg_logprob": -0.13521918716964187, "compression_ratio": 1.7721518987341771, "no_speech_prob": 0.0006263012182898819}, {"id": 1634, "seek": 502628, "start": 5029.4, "end": 5032.96, "text": " see code that we won't get into the weeds of, but some familiar phrases.", "tokens": [50520, 536, 3089, 300, 321, 1582, 380, 483, 666, 264, 26370, 295, 11, 457, 512, 4963, 20312, 13, 50698], "temperature": 0.0, "avg_logprob": -0.13521918716964187, "compression_ratio": 1.7721518987341771, "no_speech_prob": 0.0006263012182898819}, {"id": 1635, "seek": 502628, "start": 5032.96, "end": 5038.36, "text": " So this is the program that actually runs a student's dictionary on some input,", "tokens": [50698, 407, 341, 307, 264, 1461, 300, 767, 6676, 257, 3107, 311, 25890, 322, 512, 4846, 11, 50968], "temperature": 0.0, "avg_logprob": -0.13521918716964187, "compression_ratio": 1.7721518987341771, "no_speech_prob": 0.0006263012182898819}, {"id": 1636, "seek": 502628, "start": 5038.36, "end": 5043.759999999999, "text": " and then prints out per all this stuff at the bottom all of the familiar phrases", "tokens": [50968, 293, 550, 22305, 484, 680, 439, 341, 1507, 412, 264, 2767, 439, 295, 264, 4963, 20312, 51238], "temperature": 0.0, "avg_logprob": -0.13521918716964187, "compression_ratio": 1.7721518987341771, "no_speech_prob": 0.0006263012182898819}, {"id": 1637, "seek": 502628, "start": 5043.759999999999, "end": 5046.04, "text": " that you might recall from problem set five.", "tokens": [51238, 300, 291, 1062, 9901, 490, 1154, 992, 1732, 13, 51352], "temperature": 0.0, "avg_logprob": -0.13521918716964187, "compression_ratio": 1.7721518987341771, "no_speech_prob": 0.0006263012182898819}, {"id": 1638, "seek": 502628, "start": 5046.04, "end": 5048.759999999999, "text": " So this took a lot of work, most likely, to implement in c.", "tokens": [51352, 407, 341, 1890, 257, 688, 295, 589, 11, 881, 3700, 11, 281, 4445, 294, 269, 13, 51488], "temperature": 0.0, "avg_logprob": -0.13521918716964187, "compression_ratio": 1.7721518987341771, "no_speech_prob": 0.0006263012182898819}, {"id": 1639, "seek": 502628, "start": 5048.759999999999, "end": 5051.36, "text": " And understandably, you might have used a linked list initially,", "tokens": [51488, 400, 1223, 1188, 11, 291, 1062, 362, 1143, 257, 9408, 1329, 9105, 11, 51618], "temperature": 0.0, "avg_logprob": -0.13521918716964187, "compression_ratio": 1.7721518987341771, "no_speech_prob": 0.0006263012182898819}, {"id": 1640, "seek": 502628, "start": 5051.36, "end": 5053.759999999999, "text": " or ultimately, you might have used a hash table, or a try,", "tokens": [51618, 420, 6284, 11, 291, 1062, 362, 1143, 257, 22019, 3199, 11, 420, 257, 853, 11, 51738], "temperature": 0.0, "avg_logprob": -0.13521918716964187, "compression_ratio": 1.7721518987341771, "no_speech_prob": 0.0006263012182898819}, {"id": 1641, "seek": 502628, "start": 5053.759999999999, "end": 5055.8, "text": " or struggled with something in between those two.", "tokens": [51738, 420, 19023, 365, 746, 294, 1296, 729, 732, 13, 51840], "temperature": 0.0, "avg_logprob": -0.13521918716964187, "compression_ratio": 1.7721518987341771, "no_speech_prob": 0.0006263012182898819}, {"id": 1642, "seek": 505580, "start": 5055.8, "end": 5058.24, "text": " And that is a function of c.", "tokens": [50364, 400, 300, 307, 257, 2445, 295, 269, 13, 50486], "temperature": 0.0, "avg_logprob": -0.16791192875352018, "compression_ratio": 1.6805555555555556, "no_speech_prob": 0.003482981352135539}, {"id": 1643, "seek": 505580, "start": 5058.24, "end": 5059.28, "text": " C is difficult.", "tokens": [50486, 383, 307, 2252, 13, 50538], "temperature": 0.0, "avg_logprob": -0.16791192875352018, "compression_ratio": 1.6805555555555556, "no_speech_prob": 0.003482981352135539}, {"id": 1644, "seek": 505580, "start": 5059.28, "end": 5061.92, "text": " C is challenging, because you have to do everything yourself.", "tokens": [50538, 383, 307, 7595, 11, 570, 291, 362, 281, 360, 1203, 1803, 13, 50670], "temperature": 0.0, "avg_logprob": -0.16791192875352018, "compression_ratio": 1.6805555555555556, "no_speech_prob": 0.003482981352135539}, {"id": 1645, "seek": 505580, "start": 5061.92, "end": 5063.76, "text": " And upside, though, of it is that you end up", "tokens": [50670, 400, 14119, 11, 1673, 11, 295, 309, 307, 300, 291, 917, 493, 50762], "temperature": 0.0, "avg_logprob": -0.16791192875352018, "compression_ratio": 1.6805555555555556, "no_speech_prob": 0.003482981352135539}, {"id": 1646, "seek": 505580, "start": 5063.76, "end": 5066.72, "text": " getting a lot of great performance, theoretically.", "tokens": [50762, 1242, 257, 688, 295, 869, 3389, 11, 29400, 13, 50910], "temperature": 0.0, "avg_logprob": -0.16791192875352018, "compression_ratio": 1.6805555555555556, "no_speech_prob": 0.003482981352135539}, {"id": 1647, "seek": 505580, "start": 5066.72, "end": 5068.64, "text": " Like, once you have implemented the code,", "tokens": [50910, 1743, 11, 1564, 291, 362, 12270, 264, 3089, 11, 51006], "temperature": 0.0, "avg_logprob": -0.16791192875352018, "compression_ratio": 1.6805555555555556, "no_speech_prob": 0.003482981352135539}, {"id": 1648, "seek": 505580, "start": 5068.64, "end": 5070.76, "text": " you're kind of as close to the hardware as possible.", "tokens": [51006, 291, 434, 733, 295, 382, 1998, 281, 264, 8837, 382, 1944, 13, 51112], "temperature": 0.0, "avg_logprob": -0.16791192875352018, "compression_ratio": 1.6805555555555556, "no_speech_prob": 0.003482981352135539}, {"id": 1649, "seek": 505580, "start": 5070.76, "end": 5073.92, "text": " And so your code runs pretty darn well, and is dependent only then", "tokens": [51112, 400, 370, 428, 3089, 6676, 1238, 29063, 731, 11, 293, 307, 12334, 787, 550, 51270], "temperature": 0.0, "avg_logprob": -0.16791192875352018, "compression_ratio": 1.6805555555555556, "no_speech_prob": 0.003482981352135539}, {"id": 1650, "seek": 505580, "start": 5073.92, "end": 5077.4400000000005, "text": " on your algorithms, not on your choice of language.", "tokens": [51270, 322, 428, 14642, 11, 406, 322, 428, 3922, 295, 2856, 13, 51446], "temperature": 0.0, "avg_logprob": -0.16791192875352018, "compression_ratio": 1.6805555555555556, "no_speech_prob": 0.003482981352135539}, {"id": 1651, "seek": 505580, "start": 5077.4400000000005, "end": 5080.96, "text": " So here, let me go ahead and implement a file called dictionary.py.", "tokens": [51446, 407, 510, 11, 718, 385, 352, 2286, 293, 4445, 257, 3991, 1219, 25890, 13, 8200, 13, 51622], "temperature": 0.0, "avg_logprob": -0.16791192875352018, "compression_ratio": 1.6805555555555556, "no_speech_prob": 0.003482981352135539}, {"id": 1652, "seek": 508096, "start": 5081.0, "end": 5088.96, "text": " And let me propose that the words, the equivalent, sorry, of dictionary.h", "tokens": [50366, 400, 718, 385, 17421, 300, 264, 2283, 11, 264, 10344, 11, 2597, 11, 295, 25890, 13, 71, 50764], "temperature": 0.0, "avg_logprob": -0.15446330070495606, "compression_ratio": 1.9375, "no_speech_prob": 0.0013669357867911458}, {"id": 1653, "seek": 508096, "start": 5088.96, "end": 5090.4, "text": " would be this file here.", "tokens": [50764, 576, 312, 341, 3991, 510, 13, 50836], "temperature": 0.0, "avg_logprob": -0.15446330070495606, "compression_ratio": 1.9375, "no_speech_prob": 0.0013669357867911458}, {"id": 1654, "seek": 508096, "start": 5090.4, "end": 5094.4, "text": " And it's going to have a key word, a function called check,", "tokens": [50836, 400, 309, 311, 516, 281, 362, 257, 2141, 1349, 11, 257, 2445, 1219, 1520, 11, 51036], "temperature": 0.0, "avg_logprob": -0.15446330070495606, "compression_ratio": 1.9375, "no_speech_prob": 0.0013669357867911458}, {"id": 1655, "seek": 508096, "start": 5094.4, "end": 5097.04, "text": " which takes an argument called word.", "tokens": [51036, 597, 2516, 364, 6770, 1219, 1349, 13, 51168], "temperature": 0.0, "avg_logprob": -0.15446330070495606, "compression_ratio": 1.9375, "no_speech_prob": 0.0013669357867911458}, {"id": 1656, "seek": 508096, "start": 5097.04, "end": 5101.4800000000005, "text": " It's going to have a function called load, which takes in an argument called", "tokens": [51168, 467, 311, 516, 281, 362, 257, 2445, 1219, 3677, 11, 597, 2516, 294, 364, 6770, 1219, 51390], "temperature": 0.0, "avg_logprob": -0.15446330070495606, "compression_ratio": 1.9375, "no_speech_prob": 0.0013669357867911458}, {"id": 1657, "seek": 508096, "start": 5101.4800000000005, "end": 5102.4800000000005, "text": " dictionary.", "tokens": [51390, 25890, 13, 51440], "temperature": 0.0, "avg_logprob": -0.15446330070495606, "compression_ratio": 1.9375, "no_speech_prob": 0.0013669357867911458}, {"id": 1658, "seek": 508096, "start": 5102.4800000000005, "end": 5109.6, "text": " It's going to have a method called size, which takes in no arguments other", "tokens": [51440, 467, 311, 516, 281, 362, 257, 3170, 1219, 2744, 11, 597, 2516, 294, 572, 12869, 661, 51796], "temperature": 0.0, "avg_logprob": -0.15446330070495606, "compression_ratio": 1.9375, "no_speech_prob": 0.0013669357867911458}, {"id": 1659, "seek": 508096, "start": 5109.6, "end": 5110.68, "text": " than itself.", "tokens": [51796, 813, 2564, 13, 51850], "temperature": 0.0, "avg_logprob": -0.15446330070495606, "compression_ratio": 1.9375, "no_speech_prob": 0.0013669357867911458}, {"id": 1660, "seek": 511068, "start": 5110.68, "end": 5113.320000000001, "text": " And then it's going to have a method called unload, which also takes", "tokens": [50364, 400, 550, 309, 311, 516, 281, 362, 257, 3170, 1219, 32165, 11, 597, 611, 2516, 50496], "temperature": 0.0, "avg_logprob": -0.17706038620298273, "compression_ratio": 1.7202380952380953, "no_speech_prob": 0.0007096395129337907}, {"id": 1661, "seek": 511068, "start": 5113.320000000001, "end": 5114.96, "text": " no arguments other than itself.", "tokens": [50496, 572, 12869, 661, 813, 2564, 13, 50578], "temperature": 0.0, "avg_logprob": -0.17706038620298273, "compression_ratio": 1.7202380952380953, "no_speech_prob": 0.0007096395129337907}, {"id": 1662, "seek": 511068, "start": 5114.96, "end": 5118.240000000001, "text": " So if we were instead to have assigned problems at 5 in Python,", "tokens": [50578, 407, 498, 321, 645, 2602, 281, 362, 13279, 2740, 412, 1025, 294, 15329, 11, 50742], "temperature": 0.0, "avg_logprob": -0.17706038620298273, "compression_ratio": 1.7202380952380953, "no_speech_prob": 0.0007096395129337907}, {"id": 1663, "seek": 511068, "start": 5118.240000000001, "end": 5121.04, "text": " we essentially would have given you a file called dictionary.py", "tokens": [50742, 321, 4476, 576, 362, 2212, 291, 257, 3991, 1219, 25890, 13, 8200, 50882], "temperature": 0.0, "avg_logprob": -0.17706038620298273, "compression_ratio": 1.7202380952380953, "no_speech_prob": 0.0007096395129337907}, {"id": 1664, "seek": 511068, "start": 5121.04, "end": 5122.400000000001, "text": " with these placeholders for you.", "tokens": [50882, 365, 613, 1081, 12916, 337, 291, 13, 50950], "temperature": 0.0, "avg_logprob": -0.17706038620298273, "compression_ratio": 1.7202380952380953, "no_speech_prob": 0.0007096395129337907}, {"id": 1665, "seek": 511068, "start": 5122.400000000001, "end": 5125.240000000001, "text": " Because recall, in pset5, those were all to dos.", "tokens": [50950, 1436, 9901, 11, 294, 280, 3854, 20, 11, 729, 645, 439, 281, 4491, 13, 51092], "temperature": 0.0, "avg_logprob": -0.17706038620298273, "compression_ratio": 1.7202380952380953, "no_speech_prob": 0.0007096395129337907}, {"id": 1666, "seek": 511068, "start": 5125.240000000001, "end": 5127.68, "text": " Strictly speaking, there would be one other here.", "tokens": [51092, 745, 3740, 356, 4124, 11, 456, 576, 312, 472, 661, 510, 13, 51214], "temperature": 0.0, "avg_logprob": -0.17706038620298273, "compression_ratio": 1.7202380952380953, "no_speech_prob": 0.0007096395129337907}, {"id": 1667, "seek": 511068, "start": 5127.68, "end": 5131.240000000001, "text": " We would probably have a def init, because every class in Python", "tokens": [51214, 492, 576, 1391, 362, 257, 1060, 3157, 11, 570, 633, 1508, 294, 15329, 51392], "temperature": 0.0, "avg_logprob": -0.17706038620298273, "compression_ratio": 1.7202380952380953, "no_speech_prob": 0.0007096395129337907}, {"id": 1668, "seek": 511068, "start": 5131.240000000001, "end": 5134.360000000001, "text": " we'll see will typically have this init method, where we just", "tokens": [51392, 321, 603, 536, 486, 5850, 362, 341, 3157, 3170, 11, 689, 321, 445, 51548], "temperature": 0.0, "avg_logprob": -0.17706038620298273, "compression_ratio": 1.7202380952380953, "no_speech_prob": 0.0007096395129337907}, {"id": 1669, "seek": 511068, "start": 5134.360000000001, "end": 5138.400000000001, "text": " are able to do something to initialize the data structure.", "tokens": [51548, 366, 1075, 281, 360, 746, 281, 5883, 1125, 264, 1412, 3877, 13, 51750], "temperature": 0.0, "avg_logprob": -0.17706038620298273, "compression_ratio": 1.7202380952380953, "no_speech_prob": 0.0007096395129337907}, {"id": 1670, "seek": 511068, "start": 5138.400000000001, "end": 5139.72, "text": " So let me go ahead and do this.", "tokens": [51750, 407, 718, 385, 352, 2286, 293, 360, 341, 13, 51816], "temperature": 0.0, "avg_logprob": -0.17706038620298273, "compression_ratio": 1.7202380952380953, "no_speech_prob": 0.0007096395129337907}, {"id": 1671, "seek": 513972, "start": 5139.72, "end": 5141.76, "text": " We don't know that much Python yet, and we're", "tokens": [50364, 492, 500, 380, 458, 300, 709, 15329, 1939, 11, 293, 321, 434, 50466], "temperature": 0.0, "avg_logprob": -0.11783811024257115, "compression_ratio": 1.654275092936803, "no_speech_prob": 0.0001442546781618148}, {"id": 1672, "seek": 513972, "start": 5141.76, "end": 5144.360000000001, "text": " taking for granted that Speller, in fact, works.", "tokens": [50466, 1940, 337, 12344, 300, 3550, 4658, 11, 294, 1186, 11, 1985, 13, 50596], "temperature": 0.0, "avg_logprob": -0.11783811024257115, "compression_ratio": 1.654275092936803, "no_speech_prob": 0.0001442546781618148}, {"id": 1673, "seek": 513972, "start": 5144.360000000001, "end": 5146.84, "text": " But let me go ahead and load some words in a dictionary.", "tokens": [50596, 583, 718, 385, 352, 2286, 293, 3677, 512, 2283, 294, 257, 25890, 13, 50720], "temperature": 0.0, "avg_logprob": -0.11783811024257115, "compression_ratio": 1.654275092936803, "no_speech_prob": 0.0001442546781618148}, {"id": 1674, "seek": 513972, "start": 5146.84, "end": 5149.12, "text": " So here is my method called load.", "tokens": [50720, 407, 510, 307, 452, 3170, 1219, 3677, 13, 50834], "temperature": 0.0, "avg_logprob": -0.11783811024257115, "compression_ratio": 1.654275092936803, "no_speech_prob": 0.0001442546781618148}, {"id": 1675, "seek": 513972, "start": 5149.12, "end": 5151.360000000001, "text": " Dictionary is going to be the name of the dictionary to load.", "tokens": [50834, 413, 4105, 822, 307, 516, 281, 312, 264, 1315, 295, 264, 25890, 281, 3677, 13, 50946], "temperature": 0.0, "avg_logprob": -0.11783811024257115, "compression_ratio": 1.654275092936803, "no_speech_prob": 0.0001442546781618148}, {"id": 1676, "seek": 513972, "start": 5151.360000000001, "end": 5155.84, "text": " So you guys implemented this yourself by loading those files from disk.", "tokens": [50946, 407, 291, 1074, 12270, 341, 1803, 538, 15114, 729, 7098, 490, 12355, 13, 51170], "temperature": 0.0, "avg_logprob": -0.11783811024257115, "compression_ratio": 1.654275092936803, "no_speech_prob": 0.0001442546781618148}, {"id": 1677, "seek": 513972, "start": 5155.84, "end": 5158.12, "text": " In Python, I'm going to do this as follows.", "tokens": [51170, 682, 15329, 11, 286, 478, 516, 281, 360, 341, 382, 10002, 13, 51284], "temperature": 0.0, "avg_logprob": -0.11783811024257115, "compression_ratio": 1.654275092936803, "no_speech_prob": 0.0001442546781618148}, {"id": 1678, "seek": 513972, "start": 5158.12, "end": 5162.08, "text": " Give me a file and open it in read mode.", "tokens": [51284, 5303, 385, 257, 3991, 293, 1269, 309, 294, 1401, 4391, 13, 51482], "temperature": 0.0, "avg_logprob": -0.11783811024257115, "compression_ratio": 1.654275092936803, "no_speech_prob": 0.0001442546781618148}, {"id": 1679, "seek": 513972, "start": 5162.08, "end": 5165.8, "text": " I'll iterate over each line in the file.", "tokens": [51482, 286, 603, 44497, 670, 1184, 1622, 294, 264, 3991, 13, 51668], "temperature": 0.0, "avg_logprob": -0.11783811024257115, "compression_ratio": 1.654275092936803, "no_speech_prob": 0.0001442546781618148}, {"id": 1680, "seek": 516580, "start": 5165.8, "end": 5172.0, "text": " Then go ahead and add to my set called words the result of that line", "tokens": [50364, 1396, 352, 2286, 293, 909, 281, 452, 992, 1219, 2283, 264, 1874, 295, 300, 1622, 50674], "temperature": 0.0, "avg_logprob": -0.16131461750377307, "compression_ratio": 1.5775862068965518, "no_speech_prob": 0.0004044669622089714}, {"id": 1681, "seek": 516580, "start": 5172.0, "end": 5176.24, "text": " by stripping off the end of it, backslash 0.", "tokens": [50674, 538, 3575, 3759, 766, 264, 917, 295, 309, 11, 646, 10418, 1299, 1958, 13, 50886], "temperature": 0.0, "avg_logprob": -0.16131461750377307, "compression_ratio": 1.5775862068965518, "no_speech_prob": 0.0004044669622089714}, {"id": 1682, "seek": 516580, "start": 5176.24, "end": 5180.96, "text": " Then go ahead and close the file, and then return true,", "tokens": [50886, 1396, 352, 2286, 293, 1998, 264, 3991, 11, 293, 550, 2736, 2074, 11, 51122], "temperature": 0.0, "avg_logprob": -0.16131461750377307, "compression_ratio": 1.5775862068965518, "no_speech_prob": 0.0004044669622089714}, {"id": 1683, "seek": 516580, "start": 5180.96, "end": 5183.320000000001, "text": " because I'm done implementing load.", "tokens": [51122, 570, 286, 478, 1096, 18114, 3677, 13, 51240], "temperature": 0.0, "avg_logprob": -0.16131461750377307, "compression_ratio": 1.5775862068965518, "no_speech_prob": 0.0004044669622089714}, {"id": 1684, "seek": 516580, "start": 5183.320000000001, "end": 5187.8, "text": " So that is the load method in Python.", "tokens": [51240, 407, 300, 307, 264, 3677, 3170, 294, 15329, 13, 51464], "temperature": 0.0, "avg_logprob": -0.16131461750377307, "compression_ratio": 1.5775862068965518, "no_speech_prob": 0.0004044669622089714}, {"id": 1685, "seek": 516580, "start": 5187.8, "end": 5188.4800000000005, "text": " Happy, yes.", "tokens": [51464, 8277, 11, 2086, 13, 51498], "temperature": 0.0, "avg_logprob": -0.16131461750377307, "compression_ratio": 1.5775862068965518, "no_speech_prob": 0.0004044669622089714}, {"id": 1686, "seek": 516580, "start": 5188.4800000000005, "end": 5189.76, "text": " OK, so check.", "tokens": [51498, 2264, 11, 370, 1520, 13, 51562], "temperature": 0.0, "avg_logprob": -0.16131461750377307, "compression_ratio": 1.5775862068965518, "no_speech_prob": 0.0004044669622089714}, {"id": 1687, "seek": 516580, "start": 5189.76, "end": 5191.16, "text": " Check was a struggle too, right?", "tokens": [51562, 6881, 390, 257, 7799, 886, 11, 558, 30, 51632], "temperature": 0.0, "avg_logprob": -0.16131461750377307, "compression_ratio": 1.5775862068965518, "no_speech_prob": 0.0004044669622089714}, {"id": 1688, "seek": 516580, "start": 5191.16, "end": 5193.56, "text": " Because once you had your hash table, or once you had your try,", "tokens": [51632, 1436, 1564, 291, 632, 428, 22019, 3199, 11, 420, 1564, 291, 632, 428, 853, 11, 51752], "temperature": 0.0, "avg_logprob": -0.16131461750377307, "compression_ratio": 1.5775862068965518, "no_speech_prob": 0.0004044669622089714}, {"id": 1689, "seek": 519356, "start": 5193.56, "end": 5195.84, "text": " now you had to actually navigate that structure in memory,", "tokens": [50364, 586, 291, 632, 281, 767, 12350, 300, 3877, 294, 4675, 11, 50478], "temperature": 0.0, "avg_logprob": -0.21020083957248265, "compression_ratio": 1.5675675675675675, "no_speech_prob": 0.00029594197985716164}, {"id": 1690, "seek": 519356, "start": 5195.84, "end": 5198.76, "text": " maybe recursively, maybe iteratively, following lots of pointers and the", "tokens": [50478, 1310, 20560, 3413, 11, 1310, 17138, 19020, 11, 3480, 3195, 295, 44548, 293, 264, 50624], "temperature": 0.0, "avg_logprob": -0.21020083957248265, "compression_ratio": 1.5675675675675675, "no_speech_prob": 0.00029594197985716164}, {"id": 1691, "seek": 519356, "start": 5198.76, "end": 5200.240000000001, "text": " like, following a linked list.", "tokens": [50624, 411, 11, 3480, 257, 9408, 1329, 13, 50698], "temperature": 0.0, "avg_logprob": -0.21020083957248265, "compression_ratio": 1.5675675675675675, "no_speech_prob": 0.00029594197985716164}, {"id": 1692, "seek": 519356, "start": 5200.240000000001, "end": 5211.72, "text": " How about I just do, let's just say, if word lowercase in self.words,", "tokens": [50698, 1012, 466, 286, 445, 360, 11, 718, 311, 445, 584, 11, 498, 1349, 3126, 9765, 294, 2698, 13, 13832, 11, 51272], "temperature": 0.0, "avg_logprob": -0.21020083957248265, "compression_ratio": 1.5675675675675675, "no_speech_prob": 0.00029594197985716164}, {"id": 1693, "seek": 519356, "start": 5211.72, "end": 5219.320000000001, "text": " return true, else return false, done.", "tokens": [51272, 2736, 2074, 11, 1646, 2736, 7908, 11, 1096, 13, 51652], "temperature": 0.0, "avg_logprob": -0.21020083957248265, "compression_ratio": 1.5675675675675675, "no_speech_prob": 0.00029594197985716164}, {"id": 1694, "seek": 519356, "start": 5219.320000000001, "end": 5221.200000000001, "text": " So that one's done.", "tokens": [51652, 407, 300, 472, 311, 1096, 13, 51746], "temperature": 0.0, "avg_logprob": -0.21020083957248265, "compression_ratio": 1.5675675675675675, "no_speech_prob": 0.00029594197985716164}, {"id": 1695, "seek": 522120, "start": 5221.2, "end": 5224.16, "text": " On size, we actually can kind of infer how to do this,", "tokens": [50364, 1282, 2744, 11, 321, 767, 393, 733, 295, 13596, 577, 281, 360, 341, 11, 50512], "temperature": 0.0, "avg_logprob": -0.20074863144845673, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.003272806294262409}, {"id": 1696, "seek": 522120, "start": 5224.16, "end": 5226.599999999999, "text": " return the length of the words.", "tokens": [50512, 2736, 264, 4641, 295, 264, 2283, 13, 50634], "temperature": 0.0, "avg_logprob": -0.20074863144845673, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.003272806294262409}, {"id": 1697, "seek": 522120, "start": 5226.599999999999, "end": 5227.599999999999, "text": " That's done.", "tokens": [50634, 663, 311, 1096, 13, 50684], "temperature": 0.0, "avg_logprob": -0.20074863144845673, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.003272806294262409}, {"id": 1698, "seek": 522120, "start": 5227.599999999999, "end": 5231.4, "text": " Unload, don't have to worry about memory in Python, so that's done.", "tokens": [50684, 1156, 2907, 11, 500, 380, 362, 281, 3292, 466, 4675, 294, 15329, 11, 370, 300, 311, 1096, 13, 50874], "temperature": 0.0, "avg_logprob": -0.20074863144845673, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.003272806294262409}, {"id": 1699, "seek": 522120, "start": 5231.4, "end": 5234.84, "text": " And there you have problem set five.", "tokens": [50874, 400, 456, 291, 362, 1154, 992, 1732, 13, 51046], "temperature": 0.0, "avg_logprob": -0.20074863144845673, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.003272806294262409}, {"id": 1700, "seek": 522120, "start": 5234.84, "end": 5236.32, "text": " Thank you.", "tokens": [51046, 1044, 291, 13, 51120], "temperature": 0.0, "avg_logprob": -0.20074863144845673, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.003272806294262409}, {"id": 1701, "seek": 522120, "start": 5236.32, "end": 5238.96, "text": " So what then are the takeaways?", "tokens": [51120, 407, 437, 550, 366, 264, 45584, 30, 51252], "temperature": 0.0, "avg_logprob": -0.20074863144845673, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.003272806294262409}, {"id": 1702, "seek": 522120, "start": 5238.96, "end": 5241.4, "text": " Either great elation that you now have this power,", "tokens": [51252, 13746, 869, 806, 399, 300, 291, 586, 362, 341, 1347, 11, 51374], "temperature": 0.0, "avg_logprob": -0.20074863144845673, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.003272806294262409}, {"id": 1703, "seek": 522120, "start": 5241.4, "end": 5244.04, "text": " or great sadness that you had to implement this first and see,", "tokens": [51374, 420, 869, 22462, 300, 291, 632, 281, 4445, 341, 700, 293, 536, 11, 51506], "temperature": 0.0, "avg_logprob": -0.20074863144845673, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.003272806294262409}, {"id": 1704, "seek": 522120, "start": 5244.04, "end": 5246.44, "text": " but this was really ultimately meant to be thematic.", "tokens": [51506, 457, 341, 390, 534, 6284, 4140, 281, 312, 552, 2399, 13, 51626], "temperature": 0.0, "avg_logprob": -0.20074863144845673, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.003272806294262409}, {"id": 1705, "seek": 522120, "start": 5246.44, "end": 5249.04, "text": " Like hopefully moving forward, even if you struggled with any number", "tokens": [51626, 1743, 4696, 2684, 2128, 11, 754, 498, 291, 19023, 365, 604, 1230, 51756], "temperature": 0.0, "avg_logprob": -0.20074863144845673, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.003272806294262409}, {"id": 1706, "seek": 524904, "start": 5249.08, "end": 5251.72, "text": " of these topics, linked list, and hash tables, and pointers, and the like,", "tokens": [50366, 295, 613, 8378, 11, 9408, 1329, 11, 293, 22019, 8020, 11, 293, 44548, 11, 293, 264, 411, 11, 50498], "temperature": 0.0, "avg_logprob": -0.14820318857828776, "compression_ratio": 1.815426997245179, "no_speech_prob": 0.06951890885829926}, {"id": 1707, "seek": 524904, "start": 5251.72, "end": 5254.68, "text": " like hopefully you have a general understanding of some of these fundamentals", "tokens": [50498, 411, 4696, 291, 362, 257, 2674, 3701, 295, 512, 295, 613, 29505, 50646], "temperature": 0.0, "avg_logprob": -0.14820318857828776, "compression_ratio": 1.815426997245179, "no_speech_prob": 0.06951890885829926}, {"id": 1708, "seek": 524904, "start": 5254.68, "end": 5256.88, "text": " and what computers are doing underneath the hood.", "tokens": [50646, 293, 437, 10807, 366, 884, 7223, 264, 13376, 13, 50756], "temperature": 0.0, "avg_logprob": -0.14820318857828776, "compression_ratio": 1.815426997245179, "no_speech_prob": 0.06951890885829926}, {"id": 1709, "seek": 524904, "start": 5256.88, "end": 5260.76, "text": " And now with languages like Python, and soon with JavaScript and SQL,", "tokens": [50756, 400, 586, 365, 8650, 411, 15329, 11, 293, 2321, 365, 15778, 293, 19200, 11, 50950], "temperature": 0.0, "avg_logprob": -0.14820318857828776, "compression_ratio": 1.815426997245179, "no_speech_prob": 0.06951890885829926}, {"id": 1710, "seek": 524904, "start": 5260.76, "end": 5264.08, "text": " with a little bit of HTML and CSS mixed in for our user interfaces,", "tokens": [50950, 365, 257, 707, 857, 295, 17995, 293, 24387, 7467, 294, 337, 527, 4195, 28416, 11, 51116], "temperature": 0.0, "avg_logprob": -0.14820318857828776, "compression_ratio": 1.815426997245179, "no_speech_prob": 0.06951890885829926}, {"id": 1711, "seek": 524904, "start": 5264.08, "end": 5266.84, "text": " do you have the ability to now solve problems taking for granted", "tokens": [51116, 360, 291, 362, 264, 3485, 281, 586, 5039, 2740, 1940, 337, 12344, 51254], "temperature": 0.0, "avg_logprob": -0.14820318857828776, "compression_ratio": 1.815426997245179, "no_speech_prob": 0.06951890885829926}, {"id": 1712, "seek": 524904, "start": 5266.84, "end": 5269.04, "text": " both your understanding of those topics", "tokens": [51254, 1293, 428, 3701, 295, 729, 8378, 51364], "temperature": 0.0, "avg_logprob": -0.14820318857828776, "compression_ratio": 1.815426997245179, "no_speech_prob": 0.06951890885829926}, {"id": 1713, "seek": 524904, "start": 5269.04, "end": 5273.08, "text": " and the reality that someone else has now implemented those concepts for you", "tokens": [51364, 293, 264, 4103, 300, 1580, 1646, 575, 586, 12270, 729, 10392, 337, 291, 51566], "temperature": 0.0, "avg_logprob": -0.14820318857828776, "compression_ratio": 1.815426997245179, "no_speech_prob": 0.06951890885829926}, {"id": 1714, "seek": 524904, "start": 5273.08, "end": 5275.88, "text": " so that when it comes to solving problems that's six and seven and eight,", "tokens": [51566, 370, 300, 562, 309, 1487, 281, 12606, 2740, 300, 311, 2309, 293, 3407, 293, 3180, 11, 51706], "temperature": 0.0, "avg_logprob": -0.14820318857828776, "compression_ratio": 1.815426997245179, "no_speech_prob": 0.06951890885829926}, {"id": 1715, "seek": 524904, "start": 5275.88, "end": 5278.64, "text": " and then leaving CS50 and solving problems in your own domain,", "tokens": [51706, 293, 550, 5012, 9460, 2803, 293, 12606, 2740, 294, 428, 1065, 9274, 11, 51844], "temperature": 0.0, "avg_logprob": -0.14820318857828776, "compression_ratio": 1.815426997245179, "no_speech_prob": 0.06951890885829926}, {"id": 1716, "seek": 527864, "start": 5278.64, "end": 5280.92, "text": " you have so many more tools in your toolkit.", "tokens": [50364, 291, 362, 370, 867, 544, 3873, 294, 428, 40167, 13, 50478], "temperature": 0.0, "avg_logprob": -0.21079363141741073, "compression_ratio": 1.4431137724550898, "no_speech_prob": 0.0010986622655764222}, {"id": 1717, "seek": 527864, "start": 5280.92, "end": 5283.200000000001, "text": " And the goal really for you is going to be", "tokens": [50478, 400, 264, 3387, 534, 337, 291, 307, 516, 281, 312, 50592], "temperature": 0.0, "avg_logprob": -0.21079363141741073, "compression_ratio": 1.4431137724550898, "no_speech_prob": 0.0010986622655764222}, {"id": 1718, "seek": 527864, "start": 5283.200000000001, "end": 5285.72, "text": " to pick whichever one is most appropriate.", "tokens": [50592, 281, 1888, 24123, 472, 307, 881, 6854, 13, 50718], "temperature": 0.0, "avg_logprob": -0.21079363141741073, "compression_ratio": 1.4431137724550898, "no_speech_prob": 0.0010986622655764222}, {"id": 1719, "seek": 527864, "start": 5285.72, "end": 5286.76, "text": " So let's adjourn here.", "tokens": [50718, 407, 718, 311, 46236, 77, 510, 13, 50770], "temperature": 0.0, "avg_logprob": -0.21079363141741073, "compression_ratio": 1.4431137724550898, "no_speech_prob": 0.0010986622655764222}, {"id": 1720, "seek": 527864, "start": 5286.76, "end": 5289.08, "text": " I'll stick around for questions, and we'll see you next time.", "tokens": [50770, 286, 603, 2897, 926, 337, 1651, 11, 293, 321, 603, 536, 291, 958, 565, 13, 50886], "temperature": 0.0, "avg_logprob": -0.21079363141741073, "compression_ratio": 1.4431137724550898, "no_speech_prob": 0.0010986622655764222}, {"id": 1721, "seek": 527864, "start": 5289.08, "end": 5291.4800000000005, "text": " Best of luck on the test.", "tokens": [50886, 9752, 295, 3668, 322, 264, 1500, 13, 51006], "temperature": 0.0, "avg_logprob": -0.21079363141741073, "compression_ratio": 1.4431137724550898, "no_speech_prob": 0.0010986622655764222}], "language": "en"}