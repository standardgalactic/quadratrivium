I assume that everyone in the room knows something about BFO.
What I'm going to do now is provide a basic introduction to the contents of BFO, a basic
introduction to how it's being used and by whom and why, a basic introduction to what's
happening in Washington DC as we speak almost, to make BFO what we hope will be something
like the government ontology or rather the top level of the government ontology and by
that I do not mean that the only government is the one that's in Washington DC.
BFO is used by many groups and when people start building an ontology for a specific
purpose they very often examine different top level ontologies.
BFO is just one of a small number and some of them then say that they reject using BFO
because it does X and if you check you will find that usually it doesn't do X, in other
words they misunderstood something in BFO and thought they had a reason for not using
it.
Now one reason that people give for not using BFO is that BFO is a realist ontology and
I'm going to explain what that means and why some people think that that's a bad thing
and that they're not mistaken and there are reasons why a realist ontology might be a
bad thing.
Then I'll go over why people think they need ontologies and specifically top level ontologies.
I'll give some examples of successes and failures and I'll try and give a sufficient survey
that you will all go away feeling that you've learned something.
Alright so what does it mean that an ontology is a realist ontology?
So I need to start by saying that when we say BFO is a top level ontology what that
means is that it can be applied to any domain whatsoever.
Now in creating the ISO standard we had to specify what that might mean, can be applied
to any domain whatsoever.
If we have time today you will see that there are domains which BFO cannot be applied to
and I'll give you a clue, it begins with the letter Q and it's part of physics, that we
have three seconds to work out that.
So BFO is not entirely the main neutral, I think now I would say that it's the main neutral
for all areas of common sense and all areas of classical physics and all areas where we
collect empirical data and we'll leave Q to one side for the moment.
Now secondly we need to mention the requirement that BFO is realist in the sense that BFO requires
that all the classes in BFO have instances.
So we have the class object and I am an instance of the class object and I exist in space and
time.
Now I will explain why some people might think that we do not want to insist that all classes
have instances.
Now so BFO as all the classes have instances, we're not now talking about classes like protein
or person or planet, we're talking about classes like generically dependent continuum which
we'll come back to later on.
All BFO classes have instances.
Now people use BFO as a domain neutral ontology because it provides a good starting point
we think for making domain specific ontologies.
So if we take the cell ontology, the cell ontology is all about cells and all cells are objects
in the BFO sense of object.
And so all cells in the entire universe and in the entire history of the entire universe
are instances of the BFO class object.
Now a realist ontology is only interested in classes which have instances and when I
say have I might mean or have and I'm not going to say anything about the future.
We can worry about that later.
All right now we have evidence that cells exist.
We have evidence that instances of the class cell exist and therefore we have evidence
that instances of the BFO class object exist.
They all exist in space and time and we know this because that's what established science
says and we want BFO ontologies to be consistent with established science.
Some people I'm not in France now and so I won't mention French philosophers but some
people think that it's actually not a good criterion or something that it should be
conformant to established science.
I did say I wouldn't mention French philosophers so I won't.
Now but there are for different reasons BFO conformant domain ontologies which do not
satisfy the principle that all classes have to be instantiated by instances in space and
time.
For instance you might be building an ontology for military planning which is all about the
future and future things might never exist so some plans are realized that entities
inscribed by those plans and by the corresponding plan ontologies then exist but many plans
are not realized and you want a planning ontology to work independently of whether the plans
that you use the ontology to describe or represent or define are actually realized.
So planning is a good example where the realist ontology approach in the narrow sense does
not work.
Another example and so some people like to build ontologies of fiction or myth.
I don't want to talk about those frequently but there are chemists who try to synthesize
molecule which never gets synthesized and so a good chemistry ontology probably would
have to include classes which have no instances either in the past or in the present or in
the future because there are quite conceivably molecule diagrams which are chemically legal
but which are never actually synthesized because they're not synthesizable.
But in fact this fact is not a problem for BFO.
So BFO encourages people to build BFO conformant domain ontologies which satisfy the instantiation
principle but people can build other ontologies and they would still be conformant with BFO.
Realism is a kind of metaphysical slogan.
I think it's a very useful slogan when you're building ontologies.
You don't want to build ontologies which are not in the real world but if you have to build
ontologies for unsynthesized molecules you can still use BFO and it works perfectly well.
And in fact we have now methods which we've developed to help people who are working in
areas where for instance plans are not realized.
Just for those people who want to follow up on this, this goes under the heading of the
modal relation ontologies.
The modal relation ontology is an extension of BFO which works while working with things
like plans and other kinds of application domains where instantiation is not universal.
All right this is BFO, it's quite small.
I'm not going to go through every single piece of it.
What we have here is what we call the backbone taxonomy of BFO, in other words it is a hierarchy.
Now there are other relations in BFO which are lateral, so these are vertical relations,
they go from the bottom to the top.
So every Fiat surface is a continuous Fiat boundary.
I'll explain some of what that means in a minute.
That is our relation takes you from the bottom of BFO all the way to the very top because
everything, every class in BFO is a subclass of the class entity.
Now but there are relations such as is part of which does not go from bottom to top, it
goes from one side to the other and there are other lateral relations like that.
And an ontology in our view is a backbone taxonomy plus lateral relations.
The taxonomy is ISA and then you have maybe many lateral relations, sometimes called object
properties which connect the classes together in different ways.
So I'll just give you examples, immaterial entity in BFO is a subclass of independent
continuum, a continuum is something which exists through time and independent continuum
is something which does not require a bearer in which it inheres.
Qualities for instance require bearers, so the redness of your cheek can only exist if
you exist.
You are an independent continuum, the redness is a dependent continuum, the redness of your
cheek is an instance of the kind of redness which is a subkind of the BFO kind quality.
Alright so immaterial entities for BFO include boundaries are not made in matter, spatial
regions are also not made in matter and sites.
And for the sake of saving time I would just say that holes with an H are the principal
examples of sites.
So the interior of my mouth, the interior of this room are both examples of sites.
And now I'll take one more example, realizable entity, a quality is not realizable, if you
have a red cheek you just have a red cheek and that's it.
But a potential, a disposition or a function are realizable.
So if the function of my iPhone is to send and receive telephone messages, that function
is realized occasionally, but it's not always realized.
And so for some of the time it's just realizable.
And I'll be talking more about realisables in the course of the rest of this presentation.
And then I'll say something about fiat object parts.
So my arm is a part of me.
But it's not an object, it's a fiat part because the line or the plane between my arm and the
rest of me is a matter of our fiat, in other words our decision.
So fiat parts are parts which reflect decisions, that's somewhat simplified, but you can illustrate
it by saying that everything to the left of this boundary here is the smoking zone, kind
of cockles coming to you.
And then on the right of this line is the non-smoking zone, so that's a fiat boundary.
Now the boundary between Poland and Germany is also a fiat boundary.
All right, so now ontology was used by philosophers, so they tell me, for a long time, starting
in about 1652 in Germany as a Latin translation of, or a Latin word to correspond to the Greek
word metaphysics.
In around 1970 it started to be used by AI and robotics scientists, primarily in Stanford.
And basically they thought that the way to train a robot to behave like a human being
would be to describe human common sense using first order logic and then feed the first order
logic description of human common sense into the robot and then the robot would be able
to mimic human behavior.
And the behavior that they used as their prime example was buying, sorry, not buying salad.
Yeah, buying salad from a salad bar, this was the era of salad bars.
And so the robot would have to know how to pick up tomatoes using plastic implements
without squashing the tomato too much.
And it would have to learn that you can knock into a chair and you don't need to apologize
to the chair, but if you knock into a human being, you do need to apologize.
Those were the things that the robot had to learn.
The formal, the first order logic, formal representation of human common sense was called an ontology.
Sometimes it was called a folk ontology.
And the word ontology, they almost certainly took over from Quine.
So those of you who know some philosophy who are in the room will know that Quine had a very special
approach to ontology, which was, it led to the coinage of this word, folk ontology.
And then the next step was the fact that you have different groups building ontologies
and they needed to be able to compare them.
And so they invented something called knowledge interchange format.
And by a long, long set of stages, the knowledge interchange format eventually became what we now call OWL.
All right, now a famous man in all of this, another Stanford man from this group who is still alive and still selling his thing.
It was Doug Lennett who created a big database called Psyche, which is short for encyclopedia.
He now sometimes calls Psyche an ontology.
And it's full of folk knowledge, such as Albany is the capital of New York State and other such pieces of knowledge.
And as I say, he now calls it an ontology and it's sometimes regarded as being a successful, very large ontology.
It's, BFO is a very small ontology.
We don't try and describe everything.
He is basically trying to describe everything, including the virgin birth.
There are facts, not the facts, but the virgin birth is an object which is described at some length in the axioms of Psyche.
One big problem with Psyche is that the axioms are not consistent.
And Doug Lennett says that's exactly as it should be because common sense is not consistent.
Now, BFO is consistently proved, isn't it?
All right, come back to that later.
So the first really interesting contribution to all of this was by Patrick Hayes in his naive physics manifesto,
which described the methodology of robotics that I just hinted at, but he described it in a formal theoretical way.
And I believe that it was Patrick Hayes' naive physics manifesto and accompanied by a paper called Ontology of Liquids,
which is the true origin of modern day ontology.
And they're still really interesting pieces.
And then we get knowledge interchange format.
Tom Gruber was an important person in the knowledge interchange format world.
And he, he, it was the begetter of Ciri.
So you all have, Ciri is an ontology app.
So you all have ontologies in your pockets, like it or not.
And this is what an ontology in Ciri might look like.
So you have universal for things like real event or movie event.
And then you have instances of things like cities where you might see movies or eat meals.
And this is, this is what I was talking about when I said that all classes in BFO have instances.
The ancient instances are the particulars, the city's particulars, zip codes and so on.
The classes are the universals, which are in the top of the diagram here.
All right, now the knowledge information format is being made more and more mature.
And Tim Berners-Lee and his colleagues in 1994 introduced the idea of the semantic web.
The idea was that now that we have a somewhat coherent version of owl, the web ontology language,
which is a kind of formalized version of HTML.
It's a long, long gap between HTML and owl.
But by 1994, we have something which can serve as the basis for a new kind of web, a semantic web.
And it's semantic because it's described using a formal language with a semantics in the classical model, model theoretic sense.
And it would be nice if we had a semantic web, wouldn't it?
Said the people in the paper in Scientific American in 1994.
And I agree, it would be nice, but we don't have anything like it.
We have a lot of things going on under the heading of semantic web.
Too many things going on under the heading of semantic web.
And some of it is good.
And then we have the resource description framework.
Then we have protege.
And then we have the first real version of owl in 2004.
And then we have the whoosh of linked open data.
And nowadays we have knowledge graphs, some of which is really good.
All right, now, but they all failed.
All of those ontologies are built, including psych, if you look at it.
They all failed.
So most semantic web ontologies fail.
And it's hard to think of ones that succeed.
And there are lots of reasons why they fail.
One reason is it's easy to build the damn things.
And so everybody wants to build one.
And so everybody has their own ontology.
And then people say, oh, ontology, no, they're brittle.
You use them once, and then you drop them, because they're obviously useless.
And so there are many reasons why they fail.
There were bad languages out there.
I mean, really bad languages.
And they didn't understand what definitions were.
And people today don't understand what definitions are.
And the ontologies were of poor quality.
There was no documentation.
All the links are broken.
Dolce is not bad.
I'm not including Dolce under this heading.
It's bad under other headings, but then so is BFO.
So they're all bad.
And this was ontology winter.
And I know that we are now, and thanks to this gentleman here,
we're in ontology high summer.
But there will be another winter.
He won't live forever.
All right, now.
So now I come into the picture.
Is he my throat?
It's got almost better.
In the 1990s, we had the Human Genome Project.
Now, the Human Genome Project was many projects.
And there were many institutions across the planet
who were collecting genomic and proteomic and toxicogenomics
and so on data.
And they were creating registries for these data.
And there was panic because every country
had its own collection of registries.
And even within a single country,
the registries would not be collected
and described in a consistent way.
And this was going to correct all the goals
of the Human Genome Project because it
meant that we really didn't have a consistent representation
of all the different human and fly and so on genomes
and all the proteomes and so on.
And so a group of four biologists, all of them
high up in the genome project world,
one of them was a fly person, one of them
was a mouse person, one of them was a fish person,
and the other was a person person.
And this was in, I believe it was in Montreal.
It was either in Montreal or in Melbourne, I forget.
They're in a pub.
The fly person, Michael Ashburner,
who is my hero in every possible way,
and he's still alive, but he's very sick.
Michael Ashburner was basically the head of the fly genome.
And he wrote down on the back of a cigarette
packet with a heavy smoker, which is relevant still
because he is still alive, but only just.
He wrote down a list of gene functions.
For instance, cell division might be on the list.
And he said, this list is going to serve as the basis
for creating order in all of these registers.
They're all going to use these words to describe gene
function.
Now there are, I don't know, 13,000 items
on the list of gene functions, or molecular functions
they're called.
And then there are other items on two other lists
for biological processes and for cellular constituents.
So that list on the back of that cigarette packet
became the gene ontology.
And the gene ontology has gone from strength to strength
ever since.
Upwards of $3 billion have been spent on the gene ontology,
not on building the ontology, but on using it
to regiment all the data.
All the data in biology, practically speaking,
gets touched somehow by the gene ontology.
All right, so this was the first success
in the ontology world.
And then because of this success, and because of,
well, no, Propagate actually was not causing problems
at this stage.
They had their own language for building ontologies,
which was a simple database language.
And I've forgotten what it's called.
Can anyone remind me?
Anyway, they have their own language.
They use OWL now.
So they were building ontologies.
So we have the gene ontology.
It's really good.
Now we need an anatomy ontology.
We need a fly anatomy ontology.
And we need a protein ontology.
We need a gene sequence ontology.
And they were right.
We didn't need all of those things.
So they started to build them.
But now they started to slip back into the old,
oh, I downloaded Propagate.
Now I can build an ontology, and then they built crap.
In 2002, I received a prize from the German government,
a lot of money, to found an institute for medical ontology.
I did not know anything about medicine.
I did not know anything about biology.
Somebody approached me very early on in my institute.
I had an institute in Leipzig.
And they said, what do you think is the gene ontology?
And I had never heard of the gene ontology.
And I looked at it.
And within 15 seconds, I realized three things.
Not all of which turned out to be true.
First thing was, within five seconds,
I realized that I would spend the rest of my life working
on the gene ontology.
But that isn't true, this is.
But that came into my head immediately.
The second thing which came into my head
was the gene ontology is exactly what we need.
This is what my new institute should be based on.
And that came true.
And then the third thing that I realized is that it's crap.
And it's crap because it's full of logical mistakes.
And I could talk for two hours just
listing the logical mistakes that they were making.
And so I had money.
I invited the leadership of the gene ontology to Leipzig.
They already knew about me.
I think I published a short paper on problems
with the gene ontology.
And they wanted to come and see what I was doing.
So they came and we had a workshop,
which was historically interesting for reasons
having to do with 2001.
And I presented a talk at this meeting.
So the gene ontology is called the GO, G-O.
And so my talk was called STOP, which
is short for smart terminology through ontological principles.
And I just went through all the mistakes
in the logic of the gene ontology.
And after this talk, Michael Ashburner
went, took me behind the curtain.
And he said, Barry, I will do a deal with you.
I will put you in charge of the logic of the gene ontology.
And in return, you will promise never
to criticize the gene ontology in public.
And I did the deal.
I sold my soul.
And you have just decided to follow up.
Oh, well, now that was moved to a new millennium question.
Now, I'm only criticizing as it was then.
So I think that the gene ontology community will admit
that I did clean up the gene ontology
from a logical point of view and that that was useful.
But in cleaning up the gene ontology,
I ended up cleaning up also some of the other ontologies
to make them fit the gene ontology in a proper logical way.
And that is the oboe foundry, the open biological and biomedical
ontology's foundry.
It's a collection of ontologies which
have been cleaned up logically so that they fit together.
And Michael wanted to call it the oboe smithing.
But I put my foot down on that.
And so we came to the idea of calling it the oboe foundry.
The idea is that to build these foundries is really hard work.
And it's hard work in the sense that you
have to ban things and people with hammers and things.
All right, so how do we do it?
How do we link them all together?
The answer is BFO.
So this is the original picture of the foundry.
The gene ontology is the yellow part.
And at the very top, we have the core of BFO.
We have independent continuance such as molecules and cells
and organism, dependent continuance such as qualities
and function, and occurrence, processes, which
corresponds exactly to the three parts of the gene ontology
biological processes, molecular functions,
and cellular development.
BFO is a reverse engineering of the genome's policy
to apply to everything, apart from things
beginning with Q. And so BFO grew in the course of creating
the oboe foundry.
And there are now, it's gone up.
It's probably about 490 ontologies
which are using BFO.
And you can find there's a list of users of BFO, which
we update periodically.
And not all of these ontologies are any good.
I wouldn't say that most of them are not very good,
but some of them are very good.
And the fact they use BFO helps, even
if they don't always use it correctly,
because at least they're trying to do something which
would be interoperable with other ontologies using BFO.
And they're also drawing on the talent
of people who have experienced building ontologies using BFO.
Now, in the beginning, which is to say, until about four
or five years ago, that all of these ontologies
practically speaking were biology or biomedicine
or something like that.
So now we have more foundries.
And not all of them have anything to do with biology.
And I'm going to be talking about the foundry
at the bottom, the diode foundry,
towards the end of this presentation.
So now we have more ontologies built using the BFO principles
and following the idea that you have to build ontologies
so that they work logically together in at least all
of these areas.
In fact, there are some more, which I will also talk about.
Now, one of them is called the common core ontologies, which
you can think of as a set of mid-level ontologies
for things like artifacts, events, relations, units
of measure.
And then we have many, many domain ontologies, many of which
have been funded by one or other military project, which
have been defined within the framework of the common core
mid-level ontology for various sorts of military applications
and intelligence community applications.
And now my view of what BFO is doing in all of this
gets more, I hope, more sophisticated as time goes by.
Now I like to compare BFO to the QWERTY keyboard.
It's a standard.
Lots of people like to use this standard.
They become skilled at using this standard.
And so you can't change it very easily
because you get very bad reactions from existing users.
It's not necessarily the best ontology or the best top-level
ontology, but it's certainly the most often used
top-level ontology.
And I think that it's a good idea to think of ontology
as being, in part, not an attempt to describe what is,
but an attempt to legislate about how we will describe what is.
And I'm not sure whether that's helpful,
just stated in this form.
But I know from my own experience
that very often when I'm arguing with people
in the course of building ontologies collectively,
that I repeatedly reach the point where I say,
here we just legislate.
It's like driving on the left.
It's obviously, it's not obviously the right side
of the road to drive, but you need to make a choice.
And that choice is a matter of legislation
and that kind of choice is very often necessary
when building ontology.
All right, so the ISO standard will exist pretty soon
in four parts, part one and part two already exist.
As you can see down there, you spend 118 francs.
You can get a PDF copy.
That's about 18 pages long.
But if you click on the link in the blue box here,
you can get it for free.
And that's because ISO gives away ISO standards free
if they are used to create other standards.
And this particular ISO standard, both part one and two,
and I assume this will apply to parts three and four,
also are used to build other standards.
That's what they're there for, and so they're free.
So this describes the requirements
for being a top-level ontology.
Part two describes BFO and shows that BFO
also meets those requirements.
And this part two, you can also get free
by pressing on the blue button.
And now this is a part of a list of ontologies today,
which is to say within the two years
of the appearance of the ISO standard,
which are outside biology and medicine.
So in other words, where BFO was initially used
primarily in the medical and biological sphere,
it's now used in many other spheres.
Not all of these are post-ISO,
but many of them are, and the more important ones are,
because people in different domains,
not just in biology and medicine,
but also in other domains, and I, military,
I keep repeating, they need ontology too,
and they have discovered that if you need ontology,
then you need ontologies, which are organized
in some kind of suite, and then you need a top-level
in order to give logical coherence to the suite.
All right, so let's, I was going to have a slide,
which would be my only French slide,
which said question, but I forgot, so any question?
I have a very ontological question.
Your example about the arm being a truantist part.
And your arm is kind of independent continuance,
even being attached to the body,
because it has a concept, this flow of personality.
Yes, the issue is exclusively the nature of the boundary.
If you tear off the arm, you have an object.
It's independent, so the criteria is the connection.
I have some for the discussion.
All right, we can go back to that.
Think of the no-smoking zone.
No, that's a boys' case, the boys' one.
Well, it's the same.
The left side of the room.
An arm belonging, and a not arm belonging zone,
and the arm belonging zone is up here.
And the line between them is here.
All right, so now let's go back to the BFO.
At the very top, we have continuance and occurrence.
So continuance exists through time, occurrence occur in time,
and the test is whether something has temporal parts.
Your life has temporal parts.
Your youth is a temporal part of your life.
It's not a part of you, it's a part of your life.
You do not have any temporal parts.
You have physical parts, or three-dimensional parts,
or spatial parts, your arm, for instance.
But your youth is not a part of you,
it's a part of your life.
So the life is an occurrence.
You are a continuance.
And we now distinguish between independent continuance
and dependent continuance.
Now, thing, object, and so on are words
which can be used to describe independent continuance,
and people use words like attribute or property
and so forth to describe dependent continuance.
We will talk about the different kinds
of dependent continuance in a minute.
And then occurrence are things like processes,
events, happenings, things we go on,
sometimes processes in which nothing goes on.
So the process of these lights being switched on
is an occurrence in BFO terms,
because it has temporal parts,
namely the morning lights being switched on
and the afternoon lights being switched on.
This is called a state or a stasis
in some people's dialect.
And now, qualities and roles are the two big groups
of attributes, and the qualities would be something
like your temperature, your height, your weight.
And every quality, every attribute demands a bearer.
So there is no height or weight or temperature
unless it is the height or weight
or temperature of some object.
So the dependent continuance depends on some bearer.
And then we have occurrence,
and the occurrence also depends.
Every event depends on some participant.
There are no events, no processes, no incidents,
no happenings which take place
unless there is some independent continuance
in which or between which they happen.
And all of these are axioms in the BFO axiom set.
And now we have instances which do not belong to BFO.
BFO is above the line, and then all the instances,
all the cells, all the molecules,
all the planets, all the galaxies,
are instances of the BFO kind object.
And so above the line we have what we sometimes call classes,
I think I use the word kind already, types, universals,
that really those words all mean the same thing.
They are what is general,
and then the instances are what is particular.
And qualities have instances.
Your weight is an instance of the kind weight,
and my weight is an instance of the kind weight.
And now databases typically are about instances
where ontologies again, typically are about types
or classes or categories or universals or generals.
And then we use the ontologies to tag the instance data.
So this is a very, very crude dichotomy.
We put the two together, we get knowledge back.
And now Ryan Ricucci again, I should change this slide.
Is an instance of the kind human being.
So that is actually him, it's not a photo of him.
Actually you can see it.
He is an instance of the kind human being,
which is a subkind of the kind object,
which is a subkind of the kind independent continuum.
And then there are lots of occurrences
which are instances of process.
And now we have more complicated examples,
the Hoover Dam and the resilience of the Hoover Dam.
Those are instances.
And the decline in resilience of the Hoover Dam over time
is an instance of the kind process.
So now we have a process, which is a change
in an attribute of an object,
rather than a process, which is an example
of an instantiation of change in an object.
Change in attributes means it gets less and less resilient.
Change in object means that it loses stones,
gradually becomes smaller.
So on the left we have what is
and on the right we have what happens.
And Ryan's here again.
So Ryan's temperature is an instance of the kind temperature,
which is a subclass or subkind of the kind quality.
And Ryan's life is an instance of the kind life.
And we can put all of those together with information.
So information entities are about all of these other things
and they come in different varieties
such as name, address, telephone number,
and they have instances too,
namely Ryan's name, Ryan's telephone number.
And there are seven Ryan Rikuchi's known to man,
I'm assuming there are at least seven,
but there's only one name of this Ryan Rikuchi.
It looks exactly the same as the other six names
of the other Ryan Rikuchi's,
but there are in fact seven names
of the seven Ryan Rikuchi and so on.
And that's a picture of Ryan, it's not him.
That's a picture of him.
All right, and then we've done this.
Oh yeah, realisables.
I mentioned realisable earlier
and I'll say something about them again.
So dispositions are the most interesting example
of realisable.
So dispositions are potentials, tendencies.
I have a disposition to lose hair.
Bananas have a disposition to get ripe and so on.
So they're tendencies, potentials.
We don't really know much about dispositions.
There are many of them.
There's lots of junk dispositions everywhere.
We don't have names for many of them.
Science is about them, diseases are dispositions.
Which snow med doesn't quite get.
But now some dispositions are really special
and that there are fewer of these.
And these are the dispositions which crudely speaking,
we want to have, we want there to be dispositions like this
and we call them capabilities.
So your car can play music.
I'm assuming you have a stereo in your car.
But that's not the function of your car.
It's just a capability and so on.
So people do the washing up
but that's not the function of people.
And you can use a screwdriver as a weapon
but that's not the function of a screwdriver.
So capabilities are dispositions which are like functions.
It's good to have them but they're not functions.
They are side effects, if you like.
And we're still trying to work out
a good definition of capability.
We don't, capability is not yet a term in BFO.
Disposition is in BFO and function is in BFO.
Capability, it might take 10 years
before we are really happy with the constitution.
And so that means that BFO develops slowly.
People who know a lot about BFO have been trained
to be really evil when it comes to finding arguments
against decisions.
And so that means decisions are made very slowly
and carefully, we'd like to think.
All right, now functions are a bit easier.
A function is the reason for the existence of its bearer.
So the function of a screwdriver is to screw screws.
That's why we have screwdriver.
The function of cars is to transport passengers.
Function of eyes is to see.
Function of your digestive system is to digest.
Functions are easy.
Capabilities are like functions but they're difficult.
And one definition of biological capability
is that they are dispositions
which contribute to the realization
of biological functions.
So you can go away and think about that.
All right, so we get the same kind of picture.
So we realize the function of John's eye
in John's seeing, which is a process.
And now only certain kinds of entities have functions.
And I don't know of any kinds of entities
other than the ones on this list.
So perhaps worker beings have functions.
And queen bees and worker ants and so-called carpenter ants.
I don't know, but organisms in general do not have function.
It is not my function to do on top of it.
I'm sure about that, even though it sometimes seems
not to be the case for me.
All right, now maybe companies, organizations have functions
but they're a bit like colonial organisms in this way, maybe.
So there are many more capabilities
than there are functions.
And this is how it might look.
The future BFO might look like this.
So we have dispositions of the broad class,
capabilities are a subclass
and then functions are a subclass of that subclass.
But now there are two kinds of realizable entities.
In addition to dispositions, we also have roles.
Now dispositions are defined
on the basis of the physics of the bearer.
So the reason why I have a disposition to go of all
is because of the physics of my head's metabolism, I don't know.
I don't know why I have that.
Roles are defined externally by decisions,
by demarcations, by stymings of contracts and so forth.
And so roles are the products of social organization, basically.
Being employed is a role, being fired is a role.
You can be employed because your contract
that you signed four days ago comes into effect
at midnight in a week.
You do not change physically at all at midnight in a week,
at all in a way which is relevant to being an employee,
but you have the role at that point in time
because that's what the contract is.
So roles are not a matter of physics,
they're a matter of a certain entity being
in certain social institutional circumstances
and in virtue of being in that set of circumstances
such as being the object described in an employment contract
you acquire or lose a certain role.
And this just repeats what I just said.
Now interestingly, there are roles which form systems.
These are examples of two-sided mutual dependence among roles,
which are rather simple ones and then there are more complicated ones.
Now, BFO has been used in many areas.
One area where we still do not have anything like usable ontology content
is the law.
We're working a little bit on economics,
but we don't have a good ontology of law.
This may be one way of starting the ontology of law in terms of role.
And there is an ontology called de-act, document act ontology,
which is following something like this line.
That may be where we start, but it's not established itself
in the way that it should establish itself as the ontology of law,
which is what we want.
And this is the authority ontology, or an authority ontology,
which again might serve as a starting point.
All right, so this is another picture of BFO.
I left out all the space and time and location.
I just have the things that we've talked about so far,
like qualities, roles and so forth.
And this gives us another opportunity to have question.
What are your thoughts on the genesis?
Yes, so Ryan Rikuchi's name is not just a string of letters.
It's in so many ways, it's not just a string of letters.
It came into existence at a certain time in history for instance.
And the string of letters existed prior to that.
There are almost certainly older Ryan Rikuchi somewhere out there.
I'm not sure about the Ryan part.
There is certainly other Rikuchi.
But I'll give you a puzzle.
John's credit card number is token for token identical
with Frank's social security number.
They're not the same number, they're not the same entity.
But regardless of strings, they are by definition the same string.
So this is the social objects get complicated very quickly.
Yes.
Yes.
So every child has at least two parents, I guess.
That would be a first guess.
But it doesn't go in the opposite direction.
Not every adult male human has a child.
Not every adult female human has a child.
Not every pair of adult males and females have a child.
So here you have one-sided dependence.
The example I gave on the screen were two-sided dependence.
Oh no, yes, you're right.
Not all of these dependence relations are going to be roles.
Now, when you adopt though, if you adopt a child, that would be a role.
Yes.
So having a child is biology, which is physics in the end.
Adoption is partly biology and partly physics, but the core of it is a role kind of phenomenon.
And there might be other similar role phenomena having to do with parents and children.
So, well, I don't want to think too hard about it.
Kidnapping.
All right, any more?
So we've seen this picture already, but now we have green at the top.
And I just mentioned that we have a granularity axis.
So molecules of small cells and cellular components are larger than organs and organisms are larger.
And then we have populations which are not on this chart.
But we've been adding to the elbow foundry over the years.
This is still the 2005 version.
Even then, this is something of an idealization even then.
First of all, we added the environment ontology, which covers all granularities because there are molecular environments.
There are cellular environments or environments of organisms.
Organisms, there are environments, all populations, tribe and so forth.
And then there is the ontology for biomedical investigations.
OB, which is one of the best of all the oboe foundry ontology when it comes to the quality of the engineering of the ontology.
And this is about experimental processes.
So it goes on the occurrence side.
So what happened was that the biologists in the world of the genome project knew that they needed ontologies of biological entities, processes, cells and so forth.
But then they discovered at a certain point in time, and I was at the meetings where this discovery was made.
It wasn't my idea.
They discovered that they needed ontologies to describe the experiments.
And they needed ontologies to describe the ontologies to describe the data coming from those experiments because how you interpret a biological argument or a biological hypothesis or a biological conclusion in a biological paper depends on the methods which were used to reach that conclusion.
And so you needed to have an ontology of experimental methods.
And that's what OB is.
It's an ontology, not just the methods, but also equipment, hypotheses, parameters, inputs, outputs, data, data processing, material processing processes.
Sometimes in biology, you do experiments by looking at data and processing.
And you have an output.
You have input is data, output is data.
Sometimes you do experiments by taking material as input, and then you have data as output data about that material.
Then they realized that they needed an ontology of the evidence that would be generated by an experiment.
So there is something called the evidence ontology, which distinguishes, for instance, between conclusions which were drawn by direct observation, conclusions drawn from computational computation.
And then I think one of them is something like inference drawn from paper.
So that it's not a very, not all of the codes in the evidence code ontology describe strong evidence.
The idea is that if you have multiple kinds of evidence for a given biological conclusion, then you should be able to document that in something like an ontology.
All right, so then we, so we have the ontology for biomedical investigation.
And we realized, and here I was involved directly in the decision making, we realized that we needed terms for things like footnotes, or sentences, or vowels, or instructions, or papers, or grants, or grant submission documents and so forth.
And so they were happily using protege to add all of these terms into OB.
But then I said footnotes are not biological. They don't belong in a biology ontology.
So it's not only biological investigations with biomedical investigations which use footnotes or vowels.
And so we, we started building an information artifact ontology.
And here too, I'm not sure this is a good thing, but here too I played a role as this decision. I named the ontology for biomedical investigations incidentally.
Originally it was a joke name for FUMO or something, functional genomics, something, FUGO, something.
And I said, no, it's not only about functional genomics. It's about all biomedical investigations. And so we should call it the ontology for biomedical investigations.
In fact, we should have called it the ontology for investigation because it can be applied to physics.
Maybe we should have called it the ontology for data and material processing activities because it can be applied to manufacturing.
And in fact, here you have inputs which are material and outputs which are material and that that kind of input output chain falls under OB2.
But anyway, we can't have everything.
But we could have, now what would we call it, the information what ontology, if we call it the information ontology, we commit what I argue for legislative purposes, not because it's true.
Although it is true.
I argue that you should never use mass nouns when building an ontology.
So if you think of sugar, sugar can mean the chemical substance, which is a kind of abstract universal, or it can mean two lumps of sugar, or it can mean all the sugar on the planet, or it can mean all the sugar ever in the history of the universe.
And it's completely ambiguous what sugar means. But if you say lump of sugar, which is not a mass noun, it's a count noun, then you have something with the meaning of which you know.
And if you look at snowmen, not today, but in the early days of snowmen, you find that they made mistakes because they used mass noun by blood.
And they didn't because they were using a mass now they made certain characteristic errors which people make when they use mass now. So I say never use mass now.
Information is a mass now.
And indeed, if you use the mass now information you make mistakes.
So people who say that the genome is information are making a mistake.
A sequence, which is created by a sequencer and a computer and printed out or printed on a screen or just stored in a database. That is a piece of information.
The other structures which that piece of information in somebody's hard drive picture or represent is not information it's biology molecules in patterns.
So many people, maybe fewer now than then but in that era, the idea that genomics was a branch of computer science or information science was very popular.
We wanted to work against that. And so we kind I coined the term for the ontology information artifact ontology so that we made it clear that we're dealing with artifacts, which is to say things made by human beings, streams, databases,
footnotes, grant submissions, addresses names, telephone numbers and so on. These are all information.
And that's what the information artifact ontology is all about.
I mean the information artifact ontology terms are representing instances, which are about instances of disease processes and all of the other things that biologists care about.
And that's the key term in the information artifact ontology and information artifact ontology is roughly speaking a copyable entity, which is about something.
We have modular suites of ontologies, like the over foundry. What do they bring us? Well, first of all, we have a division of labor.
I will do proteins and you will do RNA. And we won't that we will thereby have a clear boundary between what you do and what I do.
This also means that anyone who needs a protein ontology knows where to find it because it's called the protein ontology.
That's another rule that people often break.
So instead of calling their ontology the spider affordance ontology or, well, let's say the spider activity ontology in honor of the building that we're in.
Instead of calling the spider activity ontology, they call it the Santa Barbara something.
And nobody knows what it is. And so nobody uses it outside Santa Barbara.
All right, then it because people are working on modular suites of ontologies, they're using BFO over and over again, they become experts at using BFO over and over again.
Because somebody is in charge of the protein ontology and is known to be in charge of the protein ontology that somebody has a special reason to be devoting a great deal of scientific expertise and effort to make sure that protein ontology is done properly.
Also, users will be motivated to use the ontology and to find errors in and report those errors because if they're using the ontology they want the ontology to be good.
If it's if it's going to be good and you find an error you have to tell the ontology editors about the error.
That makes it better, which means gives you an even better motive for using it yourself in a kind of virtuous circle.
And I won't go through this. So there have been four versions of BFO.
Version number one was released in 2001.
And it nothing changed for six years but then we added the information artifact ontology.
And once we did that we realized that we needed a term in BFO, which would be the parent of information artifact.
And we didn't have one.
And so we created one and I'll talk about that in a minute.
In 2015, I'll to came out and so we did an overhaul of BFO 1.1 to make it conform with BFO 2.
And then in 20 in 2020, we released BFO 2020, which was released to take account of the fact that in the ISO standard data that so there is data associated with the ISO standard.
About the first order logic formalization of BFO and also about the consistency proof, which is part of the accompanying data to the ISO standard.
And so that is the core for the changes which we made in 2020 BFO itself.
The picture that you saw has changed hardly at all.
The definitions are a bit tidier.
The most important changes that we now have a first order logic formalization.
Alright, so that's the picture again.
And now I'm going to talk about how we dealt with information artifacts.
And so we've already seen this.
There are two kinds of specifically dependent continuance.
There are qualities, which include patterns, pattern of a chessboard, for instance, would be a pattern and a pattern in the BFO sense, which is a continuum.
And then there are realisables like functions and roles.
And now notice that we say that these are specifically dependent continuance.
In the Middle Ages, the philosophers who dealt with these questions had various axioms.
One axiom was accidents do not migrate.
So they had substances and they had accidents.
And one famous Italian metaphysician concluded, this was in the time of the plague, concluded from this axiom that the plague does not exist.
Because accidents do not migrate.
They couldn't see the bacteria or the virus.
I don't know if you are.
And so they didn't know that they were there.
They just saw the accidents, presumably the symptoms and so forth in the people.
Since accidents don't migrate, there can be no play.
This argument was seriously put forward and it's the motto for an Italian novel of some repute called You Promise Those Both Me.
Anyway, I recommend the novel and the motto is about why the plague does not exist.
Now the plague does exist because viruses can move around and bacteria can move around.
But specifically dependent continuance cannot migrate.
I cannot have your headed.
I cannot have your height.
I cannot have your name.
I cannot have your capabilities.
Even if my capabilities are qualitatively identical to your capability, my capabilities are mine and your capabilities are yours.
They are specifically dependent on their bear.
But there are some dependent continuance which can migrate and they are generically dependent on their bearers.
And an example would be, well, the PDF file on my laptop.
I have a certain PDF file.
I send it to Ryan and now the very same PDF file is in two places.
It's copyable.
And if I now destroy the PDF file on my laptop, the PDF file still exists because it's on his laptop.
And that's what we mean by generically dependent continuance.
We mean continuance which are dependent upon some independent, continuant bearer such as a hard drive, but which are not specifically dependent on any bearer.
All you need is one, but it could move around.
Typically there will be many copies.
So a novel is a specifically dependent, is a generically dependent continuance because the novel exists in many copies.
Emails that you send are generically dependent continuance because they exist both on the sender and on the receiver side.
And DNA sequences are generically dependent continuance.
Two, both in both senses, both the sense of the sequence in the sequence database and the sense of sequence as meaning a molecular pattern, which is copied as we all know trillions of times in every human being.
Alright, so that's where we get information artifacts into BFO.
They're all children of the new kind, new type, new universal that we introduced in BFO 2.0, namely generically dependent continuum.
Now we did not introduce the new kind information artifact because generically dependent continuance are entities which are domain neutral.
You can in principle find generically dependent continuance in any domain, but information artifacts are restricted to domains where there are entities like people who make copies of things like email.
And so we added the term generically dependent continuance because it was of the appropriate level to go into a top level ontology.
And now I don't think I'll go into this one maybe.
So in we now realize that we needed to add a new relation.
So let's suppose you make a plan, you maybe write it down, and it's in your head.
And you're going to deal and you have a team of people ready to follow the specification that you dictate.
Then the plan is concretized in patterns of ink on your printed document where you've been writing out or written document.
In other words, it's made concrete, it's turned into something which is more like a specifically dependent continuum.
Patterns of ink, different piles of ink, raised levels of ink, we call letters of the alphabet.
And also when you read the plan specification in your head, and there's something like a concretization of the plan in your head.
And that's what you will realize that will be the starting point for your realizing plan when you say you read it and you say to yourself I like this plan.
Let's realize this plan and then you tell all your underlings to go forth and realize.
And so we added the relation of concretization to BFO and the whole story looks like this.
So we have generic independent continuance, then there are information entities, there are things like gene sequences on the other side, the biological side.
And these are all examples of information artifacts.
So a symphony by that we mean that which is concretized in the score.
And sort of in the performance too. The performance is not so important, it's the score which matters.
And poems are the same.
And then we have information bearing entities, which are material entities, they have patterns according to what has been written onto them.
The pattern on your hard drive is an information quality entity, which is a kind of quality, which is a kind of specifically dependent continuum.
And then the information content, so the information artifact is concretized by the information quality entity which depends upon the information bearing entity.
All right. And that's the definition.
So an artifact is something created deliberately and an information artifact is an artifact that can be the bearer of information.
All right. Now we have more time for question. Anybody.
So my question is regarding the, you mentioned that UFO is a realist.
Yeah.
But we're wondering like, which isn't do you think it's the presentism or the universe.
We're wondering maybe you can affect all the plants that are there.
So I hate four-dimensionalists. And so there are some people who develop four-dimensionalist ontologies.
And we could talk for an hour about this.
And the oil industry actually is the principle hunting ground of these people.
I was a, for a time, a hero of our oil engineers in Norway because they were being forced to use a four-dimensional ontology and it made their life much more difficult than it needed to be made.
I don't like four-dimensionalist ontologies. And I think that they are incoherent.
And it's interesting that of all the ontologies which have been, which have some sort of a track record, namely psych, dolce, BFO, GFO, UFO, sumo, they're all three plus one dimensional.
In other words, three spatial and one temporal ontology.
None of them are four-dimensional. Four-dimensional ontology says that everything is a process.
So you are a process of, what's your name? Eric.
You're a process of continual erring. Continual erring going on over in that corner.
And that's silly. And it's really silly if you want to apply it to oil industry plant because the plant is not a process.
Also maybe like you have a present system that you just have a present and growing growth that you have a present and a past.
Yeah. So I guess I'd lean a little way towards the block version, but I left open the issue of reality in the future.
And I also left open the big Q question, which if we got time, we will actually address.
I was wondering about the generically dependent continuum.
On the one hand, we have some very simple examples of patterns, which are universal.
And maybe the chessboard pattern could be regarded as a universal. It's simply.
But if you take the pattern, which is the fields of Norway, that's too complicated to be a university.
It has to be thrown together by accidents. We know that it was by accidents and glaciation.
Many millennia, I guess.
Now, Tolstoy's war and peace was more like the Theodos of Norway.
And even a relatively short poem is more like Theodos of Norway.
And even the president of Italy, the president, the office is more like the Theodos of Norway.
Now, where is the line between Theodos of Norway type things on the one hand and universal, like square or triangle or vowel or...
I don't know. DNA.
Well, DNA, I think is on the Norway side of things.
So the DNA molecule is a universal.
But this DNA molecule, for which we need 36,000 lines of code or something in order to capture, that is not the universe.
Even though it's repeated many times, war and peace is repeated many times.
But that doesn't mean it's the universe.
War and peace is an instance. It's an instance of the type novel.
A copy of war and peace is an instance.
It's an instance of the type copy of war and peace.
But copy of war and peace is not going to count as a real university.
It's going to be a defining class. It's going to be a convenience class.
Okay, so now I'm going to talk about foundry.
So this is a hub and spokes picture that I like.
The idea is that when we build a foundry, we're networking ontology.
So the networking arises in a number of different ways.
So first of all, you start with the hub, which in many cases is BFO.
And then you define domain ontology terms by using the hub.
So you'd use the word object as a starting point for defining a cell.
And then you create all the different kinds of cells and you package the whole thing as a cell ontology.
And you do that for many other things. And it is being done for many other things.
But now in each case, when you introduce a new term and thereby a new class in your ontology,
you define that term.
And very often you will use terms from other ontologies in your network.
And all of these terms, both the terms as defined and the terms as they appear in definitions,
will be associated with IRI.
So they will be networked together within the internet.
But also they will be networked together because the same term might be used in 17 different definitions
from 14 different ontologies.
And so there are networking effects across ontologies through terms and through internet connections.
And the oboe foundry now has reached the point where it can maintain the ontologies as a whole,
where you make one change in one term.
Then that means that when that change is made, it may have impacts on the 14 other places where that term is used.
And they can control how these impacts are spread through the entire network in a very impressive way.
All right. Now, how do we go about building a top-level ontology?
So I was in a meeting in somewhere in, I can't remember where it was, in Europe, not long ago.
And there was a poster session.
And in the poster session, there were seven young ontologists.
All of them were working on slightly different aspects of, I don't know, lasers or something.
And they all had sort of interesting results and interesting bits of a laser process ontology.
But they were all working independently of each other.
And I said, it's clear that you are all working on the same arena of topics.
You should get together and build some kind of a foundry.
Or you should find other people who have already built a relevant foundry.
So you want to build a foundry.
You've decided that you don't want to continue to build small snippets of bits of ontology for yourself.
You want to do things which will contribute to science in the public sense.
And so you choose your top level, which should be small and well-documented and so forth.
So BFO might be chosen.
And your top level should have understandable definitions.
We're working on that, but we think we do pretty well, given the complexity of some of our needs.
It should be well formalized.
Well, we think we're doing pretty well on that front.
And this is the crucial thing.
It should be easily extendable by domain ontology.
So you need to know what a laser is.
Well, a laser is an object in BFO terms.
What is laser light?
What is the operation of a laser?
Well, you can find BFO terms for those things too.
And you can define them in such a way that you link the terms in your laser ontologies together through BFO.
And then because you're using BFO, you'll have people like me who can look at what you're doing and tell you that you're doing it wrong.
Or right even.
Where if you have your own secret methodology, then probably no one will ever tell you that you're doing it wrong.
And BFO also changes only slowly, which means you can trust it to have a half-life of five years.
And even then the change will be quite small.
And BFO is aggressively quality controlled.
And there are various principles that we impose upon the ontologies in the foundry.
So you have to have a top level.
There are some foundries which have been developed, which didn't have top levels, but they had relatively short half-lives.
You want to create ontology modules which are consistently developed,
which means that each group of developers of ontology A will be comparing notes with the developers of ontologies B, C and D,
because they are in neighboring domains to ensure consistency.
But you will also be communicating with the BCD people to make sure that there are no overlaps.
And the reason for that is that you want everybody to know where you find the ontology for proteins.
And if there are protein ontology terms in the RNA ontology or in the cell ontology,
then that will mean that people will be disappointed when they find that they've been using the protein ontology for seven years.
And no one told them about those proteins which, for forgotten reasons, were dealt with in cell ontology.
So, non-overlapping ontology modules which are developed in such a way as to be consistent.
And then what you need is users who will find gaps and errors and who will help you create useful documentation.
And I talked already about the virtuous cycle which arises when you have many users who point out mistakes in your ontology or gaps in your ontology.
And for that, and this is also an important principle, you need an effective feedback loop.
So, I don't know how it is today, but in the olden days, the gene ontology had a commitment to its users that they would have a response to feedback within 48 hours.
Now, the response was not always an answer to the question, but it would be at least an answer of the form.
We are now exploring the question you raised, but very often they gave answers to questions directly.
The most common answer would be the term you are looking for is already there.
It's just four lines lower down and three lines across.
So, effective feedback loops between the users and the developers.
And that too creates a virtuous cycle.
All right, so there are many foundries.
This is the digital construction ontology's foundry which goes on in Finland.
And they have all of these ontologies which are about bin, which is building information management, modeling.
Anyway, they have a lot of data.
And they have these ontologies which are developed in just the way that I am recommending as modules in a BFO framework.
And you can see the BFO here is a pancake shaped or amoeba shaped grouping in blue at the top and then all the building terms descend from there.
So, asset roll descends from roll, for instance, legal person roll descends from roll.
We have a disaster response ontologies foundry which has been developed in France for the French disaster relief agencies.
And now most importantly, we have the dialogue foundry.
I say most importantly, partly for purely chronological reasons.
So, we've been working for 12 years to get the dialogue foundry ontologies recognition on the part of the...
So, dialogue means the Department of Defense and the intelligence community.
So, the work was ignored or forgotten.
The working group was very active and then it died and then it became active again.
Finally, in June of this year, just a few days ago, we got definitive approval from high level officers,
not just of the intelligence community, but also from the Department of Defense, Digital and Artificial Intelligence Office,
formally recognizing the foundry projects or the foundry project plus a number of sub-projects
put forward by various DoD and IC agencies with a bit of help from ontology people on the academic side like me,
that they were going to be accepted as the standard across the DoD and the IC.
Now, next comes NATO.
That's next week. Actually, no, next week.
There is a NATO meeting at which this idea will be presented.
We only get 15 minutes in a three-day meeting, but it's the beginning.
And who knows what comes after NATO?
Well, this is what it might look like.
So this is the daiko verse like universe, but daiko is the Defense Intelligence Core ontology.
This is a group of ontologies, some of which don't exist yet, but there are teams of people who are building them or planning to build them,
some of which are already in use, the green ones are already in use.
And the idea is that the one of the ideas is that if you have a foundry like this,
and this is a small version in different colors of the same foundry,
then this will create not just interoperability among data, but also cross-organizational knowledge.
So people working in the process activity ontology world will know to some degree what's going on in the geographic features domain
because they're both building ontologies which use the same top level and they form part of the same foundry,
which means that they communicate with each other at regular meetings.
So I think I'd better say something about time.
So as you can hear from my throat, I won't be able to do this forever.
I'm not planning on any changes, but there might be changes in the future.
And so we have a kind of succession plan for BFO.
So the replacement king of ontology or king of BFO more precisely, you will hear from him in a few minutes.
He's going to give a short talk about current developments in the BFO world.
His name is John Beverly and he was just hired in our department in Buffalo.
Before that he worked for the Applied Physics Lab, which is a very large physics faculty which runs on government money.
They do physics for the government, for the DOD, but they have an ontology group which is populated primarily by former students of mine.
And he is one of them, but he's coming back to Buffalo because he believes in this succession plan.
But there is another member of the BFO succession, which he will not be talking today, but his name is Alan Rottenberg.
Now Alan Rottenberg is a pain in the neck, but he's also brilliant.
So John Beverly is brilliant. He's not a pain in the neck.
Alan is a pain in the neck because he wants to get everything right.
Owl has a problem. It's very hard to get time right in owl.
And BFO is not a four-dimensionalist ontology. It's a three plus T dimensional ontology.
In other three spaces, of course, one central dimension, we want to get time right.
One solution is not to use owl, but to use first-order logic. It's easy to get time right using first-order logic.
It's very hard to get time right in owl because owl will only allow two-place relations.
So you can say John loves Mary, you can say Mary loves John, but you can't say Mary loves John yesterday or tomorrow in owl because then you have a three-place relation.
Now Alan first of all understands owl probably better than anybody else.
So he plays three-dimensional chess with owl where the chess games extend into five years into the future.
So he knows what problems lurk behind the scenes.
And he knows that the current treatment of time in BFO actually and in any other ontology based on owl is problematic.
And for that reason, we released a version. It wasn't an official release.
It was a version released for public debate, which just deleted all the temporal relations which are affected by these out problems from the ontology.
So the classes were there, there is a hierarchy was there, all the time relations involving processes were there, but all the time relations involving occurrence were deleted.
And people hated that and they said, oh, BFO, it's become chaotic.
In fact, we were trying to be very, very careful and avoiding logical problems which we knew lay down the road.
And if I had more time, I could describe those logical problems.
Now we have found a way which keeps everybody happy.
So we're going to have a release version and John Beverly will talk a little bit about that when he joins us in half an hour or so.
But let me just describe Alan's solution. Alan's solution to these problems is indeed a solution.
No one will like it very much because it's more complicated than what they like to see.
But the solution goes like this. You can't say John does Mary at time t because that's a three place relation.
But if you define a new relation called loves at some time.
And another universe, another new relation called loves at all time, then you can say John loves Mary at all times and that's a two place relation.
Loves at all times is a two place relation. John and Mary are the two places fillers.
And John loves Mary sometimes is also a two place relation where John and Mary fill the two places in loves at all times.
Now you can generalize that you can generalize it to include John loves Mary at all times when the lights are switched on or when the grandmother is aware of you can generalize it but it gets more complicated.
And so no one likes it. And so Alan is working with John Beverly and with other people on finding a solution to this temporary relation problem that everyone will be happy with.
Now, the old version, before we deleted some of the relations in this inspection version worked.
So it had logical, small logical time bombs, small time loss built in, but it worked.
No one noticed. No one had examples where these time bombs made any difference.
Very hard to find examples where these time bombs make a difference and they're usually quite artificial.
So it's not a big problem in the practical sense. It's only a problem in the logical sense. If we want to get the logic right, we have to address temporalized relations.
So I'm not going to say anything more about that. I'm just filling you in on what goes on behind the scenes.
The piece that John Beverly will talk about in a few minutes is logically in good shape and it's also practically in good shape and the sense that you can understand it quite quickly and it seems natural.
All right. So now summary on BFO. I seem to remember that I have 200 slides here. So I'm not going to finish.
So BFO is very small. It evolves slowly. It has an active user forum. It has a really large user base and there are lots of people who know how to use it.
And we've seen the examples of suites. We've seen the Common Core ontologies. We've seen the principles. Talked about this already. I don't want to do all of this again.
This is more about the dates when these decisions were made. I keep repeating this. I must like it.
And this is one more piece that the Office of the Director of National Intelligence has approved recommending BFO as the standard.
And the problem is if you work with the intelligence community, you can't always know what they're doing and they can't always know what to do.
But he's created a space where ontologies can be developed with all the classification rules in place and maintained by people who know what they're doing.
And now the final piece in this puzzle is that Ryan Rikuchi over here, put your hand up, Ryan.
Ryan Rikuchi is in charge of a working group in the Department of Homeland Security to do for the Department of Homeland Security, which is, I don't know, 32 agencies or something like that.
What the DoDIC ontology working group is doing for the Department of Defense and the intelligence community. And he knows what he's talking about and he's very effective.
And E2 is going to be using BFO and it's going to be covering areas like infrastructure, cyber security and so forth. Do you want to add anything?
You might as well.
Well, I would say that we have two successful test events. We're working prototype for surveillance-enabled pattern recognition for sensors to be able to detect and reason autonomously about things in the air and take out,
human-in-a-loop tasks and then automate analyst queries for the routine things. We don't want to ask again and again that we can use computers to do instead of people because people are prone to error and so on.
And the second thing that we have going, we have five different ontology lines of effort that are not just thinking about it or talking about it. We're off the whiteboard into practical application.
And the second thing is working out in person-centric ontology so we can reason about the different types of people that come into our care to automate determining what they're entitled for resources and how we consume resources to then inform a classic optimization problem.
What to do with people in the walk order with the transportation logistics and self-capacities and medical care to treat people as expeditiously safe and humanely as possible.
So those are the type of problems that we're working on, time out with practical applications that we want to extend and then across the agency we're thinking about how to go about the next making sense of this big conglomeration of agencies that all have overlapping missions but very unique roles and we share work and leverage the virtuous cycle of development.
Thanks very much.
I will be here till the end of these two weeks.
So he's already given, I was going to say take away two of my students by giving them jobs.
The way of viewing an ontology is that it's a computable lexicon. So a lot of what I've been talking about is getting people in different groups to use terms consistently, which means to use terms that have definitions which people share.
And the terms are almost, no, I was in very many cases, ordinary terms that ordinary people understand. In biology you have, you very quickly move into very technical terms, but even there they are terms which ordinary biologists understand.
And this is one big difference between ontology and databases. So if ontology is a regulation of the lexicon and if the lexicon changes rather slowly, then that means that you can find in ontology a kind of infrastructure which will last for many years as long as
people who use those terms in that way last databases on the other hand move very quickly, but database technology database hardware and database software changes very quickly.
And you can make up database codes and new database structures also rather easily, which means that it doesn't provide this kind of foundation over long periods of time, which we find if we look at the ordinary lexicon.
So ontology tries to have the best of both worlds wants to have the kind of logical coherence that you find in database structures but conjoined with the kind of stability that you get from the lexicon.
And then that is how ontologies get to be used in large enterprises, including the Department of Defense. In large enterprises currently where data models dominate of one sort or another, the data models that people understand in one
enterprise will be completely unintelligible to data models used by people in such to the users of data model from other parts of the enterprise and every large enterprise data manager realizes these problems.
The Department of Defense realizes them. And that's one of the reasons for the tiny enthusiasm that they'd be begun to show about introducing ontology. I mean, in the Department of Homeland Security, there is a lot of enthusiasm, but in the Department of Defense, it's taken 12 years to get where we are.
All right. Now, so we solve the failures of interoperability across large organizations by introducing terminological consistency. So common terms used consistently with common definitions, both in natural language, not dictionary definitions, but form but semi formal natural
definitions and then logical definitions in logical languages like our own and first order logic, for instance. And so I've said something about this. Now, let's look at definitions, which is the important part. Now, if you look at definitions, and this is true in many, many highly reputable organizations, they are really impressingly bad.
They don't really know what a definition is commonly. So they're worse than dictionary definition. But look at many of the W3C publications and see what they, how they define basic words. So RDF, Army's resource.
Look at what, look at the definition of resource in the official RBS specification. It's not, it doesn't tell you anything. Maybe because the word resource is not meant to tell you.
All right. So we want formal definitions for computer reasoning and we want natural language definitions for human use. And in both cases, we want real definitions. Now, what is a real definition?
Well, it, I'm talking now about definitions for the terms in the ontology, not for the relations. In other words, not for the object, just for the terms in the is a hierarchy.
Definitions should be each definition should be a statement of individually necessary and jointly sufficient conditions.
Now, what does that mean? Well, look at the definition for a triangle at the bottom here. A triangle is a closed figure. It has exactly three sides. Each of these sizes straight and it lies in a plane.
It may be that we have too much here, but we can simplify it a little bit. But all of these are necessary.
In other words, every triangle is a closed figure. It is necessary of a triangle that it is a closed figure.
And all of them together are jointly sufficient. That is to say anything which satisfies everything on the right hand side is a triangle.
Now, this is what a definition should look like how to build definitions like this is coming next.
So this is a slightly simplified version of what we had before. And now here we have a certain form X is a triangle means X is a closed figure, which.
And now we can assume that a closed figure is going to be the parent of triangle in the backbone taxonomy of geometrical figures, along with square and the other ones rectangle circle.
They're all closed figures.
Now that's the key to a good definition. A good definition is a definition which specifies of its parent term.
What are the necessary features that an instance of that parent term has to have if it's going to be an instance of the term on the left.
So I'll repeat that.
I won't. I will repeat it in a minute.
So in the philosophical position, the which clause is called the specific difference.
The term that you're defining is called the species and the parent term is called the genus.
An example would be human being is defined as an animal.
That's the parent term, which is rational.
That's what Aristotle said.
Every definition should be an Aristotelian definition in just that sense when it's a definition of a term, except now we come to the the following issue.
Namely, there are some terms which are just so basic that you can't specify a parent term that would give you any additional meaning in the way in which human is a rational animal gives you additional meaning to the term animal.
Or triangle is a closed figure, which has exactly three sides, gives you additional meaning to closed figure.
You can't do that with object.
I can't explain what an object is by telling you that it's a thing which is object or thing which is connected or an entity which just one object is too basic.
And so every ontology is going to have primitive terms, which cannot be defined, and they will come at the very top of the relevant or near the very top of the relevant ontology tree, the back bone taxonomy.
And it's not that we are completely dumb or dumbfounded when it comes to primitive terms, but we can only provide what we call elucidations.
They're not definitions.
They are just necessary conditions, plus maybe some examples of how the term is to be used.
All right, now this is the recipe.
For a good definition, you have a parent term, you have the term you want to define, which is B in this case, and you have the specific difference, which is C.
And then you define B as an A which sees.
And this is, it's such a simple approach, but 99% of the definitions in otherwise highly reputable ontologies do not use this recipe.
And the recipe has the neat consequence that writing definitions is a good check on the quality of your taxonomy.
But also the taxonomy that you're building is a good step towards creating good definitions for the terms it contains.
So you, in principle, you get the best of both worlds.
All right, and now it doesn't work. That's the problem.
It doesn't work in every case, but this too is not necessarily a bad thing.
So this is the Aristotle example.
This is what we want.
We want our trees to look like this.
Every term or every class in the is a taxonomy has exactly one parent except for the very highest classes, which don't have any.
As long as every class has exactly one parent, we can use the Aristotelian rule for definitions without any problems.
But some, some people build ontologies and they have diamonds in them.
And by that, I do not mean diamonds in the rough.
I mean diamonds, which cause the rough and and the Department of Homeland Security has ontologies, which are full of diamonds.
And no, actually, which are suspiciously many times.
And so a dam is a water asset, but it's also an electric power asset.
Now, that's not quite true.
Not every dam is an electric power asset.
And so we have, we can easily chop away this one and just have water asset.
Every dam is a water asset.
And that's another general rule in good ontology building is always means every.
So if you say a is a B, you mean every a is a B.
If you say a is part of B, it's slightly different.
If you say a is part of B, you mean every a is part of some B.
And if you say a has part B, you mean every a is such that there is some B, which is a part of it.
And then the sum goes before a hidden instance of so a is part of B means every instance of a has some.
It is part of some instance of B.
This is called the all some rule.
So if there is a, it's just all every for other relations for lateral relations is all some every a is part of some B.
Every a is just adjacent to some B.
And so on.
All right.
Now, I think I'll just give you pictures of knowledge across.
Oh, there's Ryan again.
And more knowledge graphs.
And so knowledge graphs give you some of the benefits of ontology together with some of the benefits of databases.
Now, one of the reasons why the military in America and the AI part of the military in America are so interested in ontologies is because they think that on knowledge graphs are the way forward in collecting useful data.
And to have well behaved knowledge perhaps it's very good to have coherently structured ontologies.
And this is the physics part.
I think I so should I finish with the physics part of the AI part.
I guess I'll do the physics part.
So although I can't do physics in 13 minutes.
So, since the beginning of BFO.
And actually, you were doing something very similar with your snow med question.
I would receive requests from people that they needed a BFO conformant ontology of mathematics.
And my response was, you don't need an ontology of mathematics.
You just go to the supermarket.
You can get your money.
It's already there.
It's all been done.
There are no problems.
And but now we need at least an ontology of units of measure.
And if we're going to understand quantum physics, I use the keyword, then we're going to have to understand the mathematics of quantum physics because there isn't really much that you can understand outside mathematics when you're trying to do quantum physics.
I think that at the moment, maybe things will get better.
So we wrote this paper and I just mentioned that I co-authored with this man, Jobs Landkreber, a book which came out last year.
Basically the book about the ontology of systems, both simple systems such as the solar system and a laptop and complex systems such as your digestive system or the government of Ukraine.
You can't predict the behaviors of complex systems for complex reasons, which we document in the book.
And therefore you can't build a Turing machine which can emulate the behaviors of complex systems.
And therefore artificial general intelligence, that is to say artificial intelligence, which would be equal in power or superior in power to human intelligence is impossible.
That's the argument of the book.
All right, so in order to build a quantum physics ontology, we need to build a mathematics ontology.
And mathematics is basically set theory.
But understanding set theory ontologically is not trivial.
And we didn't want everything to be set.
So we wanted there to be some things which are part of the object domain of mathematics, which are not sets.
Because there has to be a starting point for building the set theoretic structures, which are the various kinds of structures which mathematicians like to deal with.
And we call these things monads.
And we give examples of monad zero on constant a variable and a geometric point.
We're not very happy with this selection, but we are confident that there has to be something like monads.
We're going to build coherent ontology mathematics.
Everything else is set theory or everything else is what you need to get set theory off the ground.
For instance, the set constructor, which takes a mathematical predicate and turns it into a set.
This is the structure corner.
So this here is a function.
Every mathematical function has this structure.
Every mathematical operator has this structure.
That's the field of real numbers and there are other fields of natural numbers and so forth.
None of these things fit into BFO.
What we're doing, and we have to do something like this, we have BFO.
We don't create math O as a child ontology BFO.
We create it as a sibling.
And we have physics, which will be a sibling of math.
But there are some areas of overlap.
So when it comes to physics, we have experiments and we have experimental results.
They fall under BFO experiments are processes in the BFO send.
So there are connections, even with the quantum world connection.
All right, so these are functionals and operators.
And now we already have some ontology to deal with some physics.
These are just for, I'm sure that there are others.
OB is already a BFO conformant ontology.
The open energy ontology is BFO conformant.
The physics based simulation ontology is very small, but it is also BFO conformant.
And the ontology of physics for biology, it wants to be BFO conformant.
So we may use some of the content here in due course.
But for the moment, we're working on the fundamental.
And this is where systems come in.
So systems form the heart of the AI book, simple systems and complex systems.
And we think that there are three important kinds of physics entity.
In other words, important in the sense that we believe that if we get three kinds of entity right,
then we will have dealt with all of the important kinds of entities in the realm of physics.
System entities are three kinds.
They're a system element.
When it says weight here, it does not mean the measurement weight.
It means that an actual lump of metal used with a weight.
And so we have elements such as weights or people or planets.
Planets are parts of systems.
Then we have interactions between these elements such as electromagnetic interaction or gravity.
And then we have the system itself, which is in the case we had in mind in the paper, is a weight on a spring.
So the harmonic oscillator, you have a spring and you have a weight.
And the weight goes up and down harmonically.
And the harmonic oscillator is a very important physical system,
which is found also in biology and chemistry everywhere,
and which we document in the paper ontologically as our example of classical physics.
And then we have magnitudes.
This was always a very hard problem.
And we still haven't corrected completely for BFO how to understand things like velocity or acceleration.
Because for complex reasons, BFO only allows continuance to have quality.
It doesn't allow qualities of processing and velocity sound like the quality of a process.
And so we just introduced the idea of a process.
We don't call it a process quality.
We call it a process factoristic.
That is a term which was already being used by the Eauble foundry.
And acceleration would be an example of a process characteristic.
And I think what we're doing here is pretty coherent.
It's not rocket science, but it's at least coherent.
And then finally, we have models.
And this brings it back to the oscillator.
So if you have a spring and you have a weight at the end of spring,
you pull the weight, it will vibrate for a while.
And then because of friction, it will come to rest.
That's a real thing, a real process.
But physics doesn't describe real processes.
Physics describes idealized, even mathematicized counterparts of those real processes.
So a force oscillated with dampening is never realized in the real world.
Just as the mathematical closed figure called a circle is never realized in the real world.
There are no circles.
Meaning there are no perfect circles in the mathematical sense.
And similarly, there are no force oscillators.
What we mean by force oscillator, the idealized case described by the equations of physics.
So models are important because they describe the idealization.
And now we do experiments in order to work out whether these idealizations in fact capture reality.
And if they do, we get our little green badge and we're a physicist.
And if they don't, we go back to work to do more experiments.
So models on this view are essential features of physics because physics deals not with reality, but with models.
All right.
And so, well, we've seen all of that.
These are some examples of systems.
So systems, simple systems like these are such that the system behavior can be predicted using classical physics.
And so the behavior of simple systems may be church during computable.
In other words, it may be that we can have computer can emulate the simple system, but complex systems are not going to be emulated by a machine.
And these are the, these are some examples of complex systems.
And the New York Stock Exchange.
And this is the book again.
And then now we're back to physics.
So magnitudes in classical physics are described here.
And I don't have time to go through this.
This is our ontology of magnitudes.
Oh, sorry.
This is what we had before just with examples that you can read now.
This is more on models, what models are, how we build them.
The models are built by people.
And that's all classical physics, roughly pre 1906.
Modern physics is general relativity theory plus quantum physics.
And the heart of quantum physics anyway is the idea of a Hilbert space, which we can already fit into our original mathematics ontology.
So a Hilbert space is a sub kind of the kind metric space, which is sub kind of the kind vector space, which is a sub kind of the kind algebraic structure, which is a sub kind of the kind structure, all of that is in the mathematics ontology.
And you can't do quantum physics without physics.
And, well, this is more, you can't do quantum physics without the idea of inner product.
And without the idea of operators and projectors and so on.
And so the Feynman said, if you think you understand quantum mechanics, you don't understand quantum mechanics.
They say, in fact, I think what he really said was this, that we can safely say that nobody understands quantum mechanics.
Now, what did he mean?
So what are the domains which we can understand?
Now, I think we can understand the domain of mathematics.
Mathematicians understand mathematics.
There's no mystery about that.
They build it and they understand.
What else can we understand apart from mathematics?
Answer is the domain of everything which falls under BFO.
That's it.
And so that's why we can't understand quantum mechanics because it doesn't fall under BFO.
And so some mathematics common sense.
So what is the common sense domain?
Now, we didn't make this up.
There is a certain amount of theory on common sense.
It goes under the name primary theory.
Primary, and this actually gets deep into the heart of ISOIC to want to create that too.
Robin Horton was an anthropologist who lived in Africa.
I think he was born in Africa.
He worked on the worldviews of different cultures, both Western and non-Western.
And he decided that there were two kinds of worldviews which you can formulate as theories.
One is primary theory and that is a theory which is about the common sense world.
The boats and snowballs and leaves and food and drinks and so on.
The things that you need in order to survive and behave in an everyday world.
And then secondary theory are theories which you only find in one culture or another which are not shared by every culture.
Examples of secondary theory would be quantum mechanics, Catholicism, Pythagoreans, which is the view that everything is made of nuns.
Panpsychism, which is the view that everything in the universe is conscious.
And solipsism, which is the view that only I exist.
All of these are secondary theories.
And now primary theory, common sense, is definable.
It's that which all cultures share.
And that is, roughly speaking, what you find in BFO, roughly speaking.
Mathematics is in the one side of...
Well, little bits of mathematics, but not much.
There are some cultures which are very small amounts of mathematics.
And so it goes like this.
You can study this while we...
Can we see if we can contact John?
He should by now be...
Oh, I'm here.
So that's John.
No, fine.
Yeah, this is...
Hi, I'm John.
Well, let me find the slides for...
Here we go.
Hi, everybody.
John Beverly, that's me at the top.
And also on your screen.
I'm going to be talking today about implementations of BFO.
Because there's sometimes some confusion about the difference between BFOs
used as a broad data model and BFO in its actual, you know, everyday hour.
And so I'm here to shed some light and illuminate that.
As you see, John Beverly, professor at the University of Buffalo,
colleague of Barry's, speaking here in capacity,
VP for the National Center of Ontological Research
and representative of the BFO community.
So here's what we'll do.
I'm going to talk about BFO ontology repo updates,
repo, a GitHub repo, because we have a lot of our...
We have our artifacts on a GitHub repo.
I'll also talk about clarification around some implementations of BFO,
what it means to implement BFO.
I'll do this real quick.
I know you guys probably want to go eat some pizza.
I saw the schedules pizza day.
I won't keep you from it.
Then we'll talk about a core BFO file and then temporal extensions.
And this is where it's going to get interesting.
So if you know anything about BFO,
you can probably already tell why it's going to be interesting.
And if you don't, well, hold on to your horses.
Okay. Here we go.
Clarifications.
So there has been some confusion concerning which BFO file
and the repo folks should use.
And that, that makes sense.
If you go to the GitHub repo,
I have a screenshot of what it used to look like over there,
right here on the right.
It's a little confusing.
You got the 21838-2, definitely ISO.
Good reference to ISO.
But you also see file or directories like common logic model
and a bunch of the files in different formats named BFO.
It's a little hard to parse sometimes.
Not the best documentation.
This is not knocking Alan.
I love Alan.
Alan did amazing work, but you know,
documentation is important.
So we're clarifying, cleaning this up.
So here's, here's the new structure.
And I'll walk through it real quick.
The development team, myself included work to clear this up
that is easier to understand.
It's on a fork right now.
I'm going to merge it shortly,
but here's the structure over on the right.
It should be clear.
And if it's not, hold on.
So we know that BFO is described in the standard
and described in this building ontology,
the basic formal ontology book,
describes a theory that outstrips the,
the, the expressivity of owl, right?
Which is what we typically use when we,
we're dealing with BFO or any ontologies, really.
So there, there are lots of different implementations of BFO.
Some of which more accurately, accurately represent or reflect
that broader model that is described in that,
the ISO standard in the text, right?
Common logic is one implementation of it.
It's a formal language.
It's a fan.
It's, I think it's actually Cliff,
but it's a representative and one of among your family
for first order logics that's used in computational reasoning.
First order logic.
This is a rather, a rather clearer, I would say,
if I had to measure a clear representation of first order logic
in this syntax, common logics, a little tough to parse,
usually used for documentation.
L-A-D-R, this is a less known syntax,
the library for automated deduction research.
This is used in model checking,
in particular with MACE for improver nine,
which Alan Ruttenberg had used to generate the consistency proof
for the broader theory.
Just, just pointing at these,
you probably don't care that much unless you're a nerd about logic like I am,
but what you're probably more interested in is this OWL file here.
So, so this is what folks typically mean,
or when they're talking about BFO in the wild,
they want to, they want to focus on this specific file.
So here, here's the updates, guys.
Okay, okay, calm down.
I see you're too excited.
Let's relax.
Okay, here's the updates.
So over here, the BFO implementation in OWL,
we're switching the name.
It's the core file.
Now BFO core OWL, and it,
it's switched from the previous file name,
which was not, wasn't the,
wasn't the full, full gamut of temporal and space and time and all that,
but it was called the BFO 2020 without some all times dot OWL file.
And this was basically all the classes, all the relations, et cetera,
but without the all and sometimes object properties.
Okay, so this, you see here, this again,
all the BFO classes in the 21A, or 21A38-2,
and all the binary relations that do not require a third index for time.
That's the important part.
Okay.
Why?
To remain computationally tractable.
OWL doesn't permit representing relations that hold between more than two things.
I assume you know that, but if not, blow in your mind, right?
John is next to Sally, fine and OWL.
John has armnet on Tuesday, not fine and OWL.
We can't represent that.
So representing time with only binary relations has been a persistent challenge
for the ontology community in general.
We have been working on this, on attempts to, to represent this information.
One of those attempts was Allen's temporalized relations strategy.
There are others.
There's, for instance, the Common Quarantology Suite,
and their team has developed an approach to this, this model,
a set of modeling patterns that kind of revolves around Stacey's,
which is like unchanging dependent continuance over time
that are related to histories and whatnot.
So here's some examples, temporalized relations,
location of at all times, located in at all times, the inverse.
You also have some times versions of these.
On the other hand, Stacey's, you just kind of get to use the same object properties
that you would see in the relations ontology, for instance,
location of and located in just with some more formal structure somewhere else
in your design pattern.
So temporalized relations, that strategy that was, that Allen developed,
it provides a semantically rich representation of time
and it does support sophisticated reasoning about time,
but it's hard to use, real hard to use.
Folks at a challenging time, like just, just trying to figure out when
located in at all times holds versus located in at some times.
And I can tell you, having worked in industry with folks,
subject matter experts who would, you know, task to represent stuff
with ontologies or like their domain with ontology,
they would typically just defer to using the sometimes relation
because it's the weakest and because they wouldn't know when all times held,
like when is something a part of something else at all times,
harder to say than when something is a part of something else at some times.
The problem is sometimes is, is logically weak.
It says almost nothing.
You don't get transitivity.
You don't, you don't get much, right?
It's just basically a tag.
The stasis approach developed by CCO,
it provides a semantically weak or weaker version of representation of time,
but it is easier to deploy and there are fewer mistakes and users have another
easier time understanding how to use it.
This is not just motivated by like practical considerations of users,
though, like sometimes some domains, I mean, domains do treat time differently.
Economists treat time as discrete physicists that continuous and some don't
even treat time at all.
Not all domains need require semantically rich representations of time.
Like a lot of folks in the logo foundry, for instance,
use disease ontologies to just tag articles with terms and dates.
They just do not need that kind of robot.
I mean, maybe in an ideal world, if they were really using reasoning over,
over these sorts of temporal structures, they, you know,
they would need this kind of robust semantics, but they don't.
They just kind of tack stuff.
So it's a lot, it's, it's a lot of work to get the time right.
So they're not interested in doing that, especially for their specifically for
their use cases.
Now other, other foundries do need this corner representation of time.
The industrial ontology foundry terms, they use temporalized relations.
They need this semantic, this ability to reason more than just tagging data or
date or terms and date times.
They need that semantic structure that can run reasoners over when they're
handling manufacturing and engineering content.
Okay.
So upshot here that temporalized relations strategy.
The thing with the all times and the sometimes that was previously part of
the approved version of BFO owl.
So that was like, when you use, when you were in conformance with BFO,
you were you, and you were using the owl file, you had to use that one.
Again, tough.
People used it incorrectly.
Got a lot of pushback.
We're taking a more flexible approach now.
Now we are backing up a little and saying, depending on your use case,
depending on your domain, you might need that not might not need that robust
theory of time.
You could also use Stacey's and potentially other extensions.
We'll call them temporal extensions of the BFO core.
But you are not necessarily required to use the temporalized relations version.
You are required to use one of the extensions.
Not just not, not a specific one.
So roughly speaking, or broadly speaking, then the core implementation of BFO and owl
is agnostic about representations of time that require more than binary relations.
So as you see over here in the right hand side, this, this is, this is the core.
These are the core relations.
You see this in the BFO core file.
They do not require reference to time.
Some of them are temporal, but they don't require a third index.
The temporal extensions of the core implementation of BFO, such as the temporalized relations
extension or the stasis extension, they provide representations of time which users can select
based on, from based on their needs.
So here are some examples.
You should see the temporalized relations on the right.
Aero pointing up is carry of it sometime carrier of it all times, et cetera.
Same for Stacey's you have generically depends on has part has member.
And again, the structure, the temporal structure there for Stacey's is it's, it's the semantics
of some, it's weaker than the temporalized relations representation.
There is additional structure for the Stacey's stuff.
It's just not built into the object property, the way the temporalized relations is it's
somewhere else is relying on like histories and this, this class called stasis.
So temporal extensions of the BFO core, they will import BFO core owl and add relations
for the purposes of representing relations holding at times and conformance to BFO now
requires using that core, of course, which nobody has problem with, and at least one
of those temporal extensions.
And then this is important because users deploying BFO can largely do so as they have.
So if you are using temporalized relations continue, if you are not, if you are using
something like RO, which CCO, the common core ontologies, which those are the developers
stasis, they are, they use RO too.
So if you are using those, and you are wanting to stay conformant with BFO, if you adopt
what, what the CCO, what CCO is doing with those RO relations, you will also be in conformance
with BFO, because you will in that way be adopting that temporal extension.
So in addition, lastly, the BFO development team will create mappings across these extensions.
So that is to say in this case between stasis and the temporalized relations, so that you
don't have drift of uses, like we don't want people like one group to use this temporalized
extension and another group to use another one.
And then they go off and do their modeling, and then they're not interoperable.
So we're creating mappings between them so that it really is, you know, choose, choose
your own adventure sort of situation and we'll, we'll map them together in the, in the back
end.
All right.
So in summary, core BFO file taxonomy specified in 21, 8, 3, 8, 2, and relations that don't
require temporal indexing extension, temporal extensions, import that core adding relations
that provide richer representations of time, some more rich than others in the development
team will provide guidance for selecting the temporal extension based on need and will
secure interoperability across extensions via mapping.
Look at that.
I did it and I have what, seven minutes left.
Can you hear me, John?
I can.
So you better explain what RO is.
Oh, I thought you already did it.
It's the relations ontology.
So relations ontology is a large number of ontology or a large number of object properties
that are used very often used by oboe foundry ontologies.
So they have things they include a lot of proper object properties like part of, but
they also have some more specific object properties for biological phenomena like, I don't know
what's a biology term, his titrate or something.
What's that?
Spider's leg.
Spider's leg.
Spider's leg.
Spider's leg.
Yeah.
Was there anything, any other clarifications?
I ran through that quick.
I didn't want to get in the way of you and Pete.
Yeah.
Go ahead.
I guess I need to control the audience.
So we'll start over there.
Are you going to question if a new vehicle goes over the oboe foundry?
Because you have seen a vehicle, too, and a written number of it.
I think that's the one that you thought.
Shall I do that one?
I couldn't hear him.
So yeah.
Okay.
So the question is, are we going to bring these goodies to the oboe foundry?
Three wise men.
I mean, you're going to try.
I'm trying.
I've been talking to Chris.
I was talking to Chris the other day, trying to, like, just, you know, finesse a little
bit.
We got to go through the, we got to go through the process of like vetting.
Like that's his big thing.
And I understand.
So yeah.
Complete what John just describes convincingly and then take it to the other country.
So there are members of the oboe foundry who I would like the whole foundry to be running
on both all the logic.
And in the first of the logic, you don't have any problems.
They all go away.
And that in a way, that's my dream of.
Yeah.
Thank you for that clarification.
What I do find a pity, however, is that in this new version, you have the so-called
temporary relations because they are not temporary relations.
They are, they're in labor only, but they cannot actually be admitted what you think
you are representing.
Because you need the temporal logic for that.
It's a labor lane work allowance.
That actually having a temporal logic.
There are, it's a central extension to our, if you don't want to go to the group first
or the logic for instance, there are alternatives to being almost to what the label actually
would mean.
So yeah.
I find it disappointing to see that that actually made it in there.
Are you to convert into a question?
Are you going to go to a powerful version that will be properly using a temporary logic
so that you can do the actual reasoning with it and the consistency checking of what you
think you are representing?
I mean, I think ultimately we have to, I share your dissatisfaction.
I mean, the temporalized relations, any representation of time, you go look at it, you can, you know,
you got the restrictions of hour so strong.
I mean, almost anything interesting is a non-simple property.
Like suddenly you can't say much.
Like we say, hey, I'm representing the Allen interval calculus.
No, you're not.
Hush.
Not an hour.
She can't.
So like, I totally understand the first order logic though, we have that intense logic or temporal logic.
We could represent the sorts of structures.
I think ultimately we're going to have to because ultimately I think that sort of temporal reasoning
or sophisticated temporal reasoning that hasn't really been a set like within use cases of ontology
are becoming more and more necessary.
Like the use cases that we're seeing now do want that kind of temporal reasoning.
They do want that semantic rich representation.
So we've been getting away for too long without it.
We have to appeal to some more tools.
So some folks have been working like Fabian.
I'm not sure Fabian's here.
Fabian has, Neuhaus has been developing some, some tools that are allow you kind of put kind of to put first order logic axioms on top of some owl axioms and, you know, generate a combine them,
generate a model and prove some theorems using vampire in that setting.
And then I think maybe there allows for a conversion back in the owl some to some extent.
I'm not sure.
So there's some research in that direction.
I myself have been trying to finesse shackle in combination with owl.
So using the expressivity of shackle with, you know, because it can also use sparkle with embedded within its shapes to try to maybe approach or get make some more progress towards representing temporal logic.
Really just work in progress.
I share your dissatisfaction is the answer.
And I also share the need.
One more.
Okay.
One minute.
Come on guys.
No other questions.
Yes.
Yes.
I do shave.
That's correct.
I know you're also going to.
All right.
Thank you all very much.
Thank you.
I guess.
