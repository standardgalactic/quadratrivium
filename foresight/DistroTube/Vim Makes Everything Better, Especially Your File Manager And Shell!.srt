1
00:00:00,000 --> 00:00:08,960
VIM. VIM is more than a text editor. VIM really is a way of life. And the more I've used it,

2
00:00:08,960 --> 00:00:14,720
the more I've become kind of proficient with VIM. The more difficult it is to use anything

3
00:00:14,720 --> 00:00:19,240
other than VIM. I can't really use any other text editor other than VIM. In fact, I find

4
00:00:19,240 --> 00:00:24,640
it difficult to use programs that are not even text editors because, you know, I'm going

5
00:00:24,640 --> 00:00:29,920
to hit the VIM key bindings for different things. For example, if my email client doesn't

6
00:00:29,920 --> 00:00:36,200
allow me to compose my email in VIM. Sometimes I find it difficult to do that because I'm

7
00:00:36,200 --> 00:00:42,480
hitting the keyboard commands to change word or delete a line or copy and paste and none

8
00:00:42,480 --> 00:00:48,360
of that works the way it does in VIM. So find it difficult to use email programs. I find

9
00:00:48,360 --> 00:00:53,920
it difficult to use forms on websites. You know, if I'm sending a message to somebody

10
00:00:53,920 --> 00:01:00,160
on a web page, find it difficult to use certain chat clients, IRC chat clients, because I'm

11
00:01:00,160 --> 00:01:05,000
constantly wanting to do things the VIM way. I want to navigate with the VIM keys, you know,

12
00:01:05,000 --> 00:01:12,040
HJKL. I want to, you know, delete with DD and you go to the top of the document with GG.

13
00:01:12,040 --> 00:01:17,560
In fact, the other day I was playing a game on Steam and somebody in the Steam chat typed

14
00:01:17,560 --> 00:01:22,200
GG for good game. And for some reason I was wondering why this guy was trying to go to

15
00:01:22,320 --> 00:01:28,480
the top of the document in Steam. So VIM has really kind of penetrated my life in a pretty

16
00:01:28,480 --> 00:01:35,560
big way. So those of you like me, you're using VIM. Maybe you recently discovered VIM or you've

17
00:01:35,560 --> 00:01:42,520
been using VIM for years. If you're a VIM user, you really should take a look at a file manager

18
00:01:42,520 --> 00:01:48,520
called VIFVM. It's become my preferred file manager. VIFVM uses all the VIM key bindings. It

19
00:01:48,520 --> 00:01:52,960
even has modes just like VIM. I'm going to show you a little bit of what you can do with VIFVM

20
00:01:52,960 --> 00:02:00,000
today. Also, if you're a VIM user, you really should enable VIM mode. There is a VI mode or a

21
00:02:00,000 --> 00:02:08,640
VIM mode in both Bash and ZSH. So enable VIM mode in your shell. Now all of a sudden the standard VIM

22
00:02:08,640 --> 00:02:14,160
commands you're used to work in your shell prompt. For example, in normal mode in the shell,

23
00:02:14,160 --> 00:02:18,480
you'll be able to type zero on the keyboard and go to the beginning of the line or dollar symbol.

24
00:02:18,480 --> 00:02:23,720
To go to the end of the line or DD to delete the line you just wrote. So all your standard VIM

25
00:02:23,720 --> 00:02:37,320
key bindings work in the shell. So let's get started. And the first thing I want to discuss with

26
00:02:37,320 --> 00:02:46,360
you guys is VIFVM. VIFVM is a file manager, a terminal based file manager. It uses all the

27
00:02:46,360 --> 00:02:53,400
standard VIM key bindings. It has modes just like VIM such as visual mode. I can already hear some

28
00:02:53,400 --> 00:02:59,000
of you folks asking why in the world would I use a terminal based file manager? Why wouldn't I just

29
00:02:59,000 --> 00:03:05,440
use a graphical file manager like Nautilus or Dolphin? And then I hear some other folks going

30
00:03:05,440 --> 00:03:10,240
why would I use a terminal based file manager when I can just do everything in the shell? You

31
00:03:10,240 --> 00:03:15,920
know change directory and make files, delete files, make directories, delete directories. I don't

32
00:03:15,960 --> 00:03:21,960
need a file manager, a graphical or terminal based file manager to do anything. No, well, that's

33
00:03:21,960 --> 00:03:27,320
true. You can do everything in the shell. But having a file manager makes some tasks, some

34
00:03:27,320 --> 00:03:33,040
complicated tasks much easier than doing it in the shell. Because really complicated tasks in

35
00:03:33,040 --> 00:03:38,080
the shell are going to require you to use things like grepsid, all regular expressions. We're

36
00:03:38,080 --> 00:03:44,000
having a file manager make some of these tasks a little easier. Why a terminal based file manager

37
00:03:44,040 --> 00:03:49,160
rather than a graphical file manager? Well, graphical applications are going to be heavier than

38
00:03:49,160 --> 00:03:54,320
terminal based applications, heavier on resources, graphical applications, of course, require you

39
00:03:54,320 --> 00:03:59,120
to have X on the system, a terminal based application, you could open up in a TTY prompt,

40
00:03:59,120 --> 00:04:05,520
you don't even have to have X or running, or even installed on the system. Graphical applications

41
00:04:05,520 --> 00:04:11,440
also expect you to have a keyboard and mouse on hand. I mean, they expect you to input with the

42
00:04:11,440 --> 00:04:17,560
mouse sometimes where terminal based applications are often the primary, sometimes the only way to

43
00:04:17,560 --> 00:04:24,920
input stuff into them is with the keyboard. So terminal applications make sense in a lot of

44
00:04:24,920 --> 00:04:33,920
situations. So this is my desktop. Let me open up my file manager of choice here. There is VIFM,

45
00:04:34,560 --> 00:04:42,080
VIFM, the VI file manager. Sorry, guys. I'm in Herb's look today struggling with some of the

46
00:04:42,080 --> 00:04:48,400
key bindings for Herb's look, but this is VIFM out of the box. Now, VIFM, as I told you, uses all

47
00:04:48,400 --> 00:04:54,160
the standard VM key bindings right now in my home directory. Capital G goes to the bottom,

48
00:04:54,160 --> 00:04:59,680
the very last file, you know, same as in VM, Capital G goes to the last line of the document,

49
00:04:59,680 --> 00:05:05,840
GG goes to the first line of the document. We can give it a number, say 5G, to go to the fifth

50
00:05:05,840 --> 00:05:12,480
line, you know, the fifth thing here in the file manager. It does include the dot-dot in that.

51
00:05:12,480 --> 00:05:18,400
The dot-dot, of course, is an alias for the parent directory. Of course, you can copy something with

52
00:05:18,400 --> 00:05:25,280
YY for Yank. You can delete something DD for delete, just like in VM. You can do bulk rename. Now,

53
00:05:25,280 --> 00:05:31,600
this is a really neat thing that you can do in a terminal-based file manager like VIFM. You can

54
00:05:31,600 --> 00:05:35,840
also do it in terminal-based file managers like Ranger and, I think, Midnight Commander, and I'm

55
00:05:35,840 --> 00:05:42,720
sure others. Let me show you. So, I have a folder on here somewhere called Scrot for screenshots.

56
00:05:43,360 --> 00:05:51,760
They enter into that, and the pictures are not going to look good because they're 5760 by 1080

57
00:05:51,760 --> 00:05:55,680
screen resolution. So, the previews are really scrunched up. So, I'm just going to turn the

58
00:05:55,680 --> 00:06:01,040
previews off. No reason to see them because it's not going to look right anyway. But, you see,

59
00:06:01,040 --> 00:06:07,040
I have all of these screenshots, and they are named with a timestamp, the screen resolution,

60
00:06:07,040 --> 00:06:15,360
5760 by 1080 underscore scrot dot ping. What if I wanted to rename all of these files? Well,

61
00:06:15,360 --> 00:06:19,760
in a graphical file manager, it would be kind of tedious. You would have to probably do them one

62
00:06:19,760 --> 00:06:25,120
at a time. Most graphical file managers, some of the graphical file managers are extensible,

63
00:06:25,120 --> 00:06:30,640
but it's kind of hard to figure out how to do that in a graphical file manager. Things like

64
00:06:30,640 --> 00:06:37,360
Nautilus, for example. But in something like VIFM, because you know it takes all the standard VIM

65
00:06:37,360 --> 00:06:45,680
commands, you could go into visual mode right now, so shift V. And now, as I go down with J,

66
00:06:45,760 --> 00:06:51,440
J is the down key, I am selecting every single file. I wanted to select maybe for a bulk rename.

67
00:06:51,440 --> 00:06:55,760
I don't have to J a million times though. Again, capital G goes all the way to the

68
00:06:55,760 --> 00:07:01,040
bottom of the document. So, now I've selected everything in this directory. How do we rename it?

69
00:07:01,040 --> 00:07:11,120
Well, C for change, CW, change word. And now it opens up all of those file names in a VIM document.

70
00:07:11,120 --> 00:07:16,960
Basically, we have a VIM document here with all those file names. And now, because I'm in VIM,

71
00:07:16,960 --> 00:07:22,960
it makes it very easy to change these file names. So, if I wanted to do a bulk rename here,

72
00:07:24,080 --> 00:07:31,840
one thing I could do is I could do visual mode, so control V. Control V in VIM gets you into a

73
00:07:31,840 --> 00:07:37,520
block mode, a block visual mode. And capital G gets me to the bottom of the document here,

74
00:07:37,520 --> 00:07:42,400
so all the way to the last line. So, it selected lines one through however many

75
00:07:42,400 --> 00:07:47,520
file names were here. I think there were about 250 file names. And now, if I move over to the right

76
00:07:47,520 --> 00:07:53,600
with the L key, the standard VIM navigation keys. And if I wanted to, I could select all of those

77
00:07:53,600 --> 00:08:00,480
that block of text. And then a simple D for delete makes all of that timestamp information go away.

78
00:08:00,480 --> 00:08:07,120
Now, that would be rather poor renaming since all 250 something files in this directory now

79
00:08:07,120 --> 00:08:13,280
are going to be named the same thing 5760 by 1080 underscore scrot dot ping. So, let's undo that.

80
00:08:13,280 --> 00:08:18,800
That doesn't make sense. But what I could do is let me move over. So, if I wanted to, I'm going to

81
00:08:19,600 --> 00:08:24,720
keep the timestamp because the timestamp is unique. But I don't need the rest of this information.

82
00:08:24,720 --> 00:08:31,120
I don't need 5760 by 1080 underscore scrot for sure. So, let's control V again to get into the

83
00:08:31,120 --> 00:08:36,240
visual block mode. Going to capital G again to go all the way to the bottom of the document.

84
00:08:37,280 --> 00:08:44,880
And this time, I'm going to go in this direction and highlight all of that D to delete. And now,

85
00:08:44,880 --> 00:08:50,160
we've made those file names a little shorter. I got rid of the superfluous information that I

86
00:08:50,160 --> 00:08:54,400
don't really care about. I don't care about the screen resolution. I didn't care to have scrot

87
00:08:54,400 --> 00:08:59,680
in the name. I know it's a screenshot because the directory that I'm in is called scrot.

88
00:09:00,480 --> 00:09:06,000
But we do need some kind of unique name for each screenshot here. So, I did leave the timestamp

89
00:09:07,120 --> 00:09:13,360
if I wanted to. I could have, instead of doing visual mode, I could have just did a quick substitute.

90
00:09:13,360 --> 00:09:20,240
So, I undo this. So, to do that same change instead of using visual mode, just doing

91
00:09:20,960 --> 00:09:28,480
command using the substitute command nvm colon to get into command line mode here nvm. And then

92
00:09:29,360 --> 00:09:35,200
percent sign s for substitute and then slash what do we want it to substitute? Well, I wanted

93
00:09:35,280 --> 00:09:43,200
to substitute underscore 5760 by 1080 underscore scrot. I want that information to be substituted

94
00:09:43,200 --> 00:09:50,000
with nothing. I just wanted to go away. So, normally, you would put some information here

95
00:09:50,000 --> 00:09:54,880
and then another slash, but I'm just going to do two slashes with no information. I don't want to

96
00:09:54,880 --> 00:10:00,480
replace it with anything. The last thing I want to do is type g at the end to make sure that it

97
00:10:00,480 --> 00:10:05,760
changes this everywhere in the document. Hit enter and there you go. That's how you could do that with

98
00:10:05,760 --> 00:10:13,840
substitute both equally as fast whether you use visual mode or substitute. So, that is a little

99
00:10:13,840 --> 00:10:20,240
bit of the power of something like vifm because, you know, it's so vim like all the standard gem

100
00:10:20,240 --> 00:10:25,760
stuff you're used to, such as modes, insert mode, normal mode and visual mode and all your commands,

101
00:10:25,760 --> 00:10:33,280
delete commands and copy and paste and substitute, they just all work. Now, I could write and quit

102
00:10:33,280 --> 00:10:38,880
right now because I'm happy with this and that gets me back into vifm here. If I wanted to go

103
00:10:38,880 --> 00:10:45,200
back to my home directory right now, I'm in that scrot directory. I have a bookmark, a leader key h,

104
00:10:46,240 --> 00:10:51,040
gets me back into my home directory gg, gets me back to the top of that directory and of course,

105
00:10:51,040 --> 00:10:57,360
colon q, gets me out of vifm completely. So, that's vifm. If you're not using vifm and you're a vim

106
00:10:57,360 --> 00:11:03,680
user, you really, really should check it out. It's fantastic. The best file manager are none.

107
00:11:05,600 --> 00:11:09,840
Now, one other thing, if you're a vim user, you need to do, you need to have

108
00:11:10,560 --> 00:11:20,160
vi mode or vim mode enabled and whatever shell you use. There are vi modes in bash and zsh. I have

109
00:11:20,160 --> 00:11:27,760
both bash and zsh on my system, so I know that they exist on those shells and they work just as

110
00:11:27,760 --> 00:11:34,480
expected. I think there's also a vi mode in fish. I think there's a vi mode in the seashell, probably a

111
00:11:34,480 --> 00:11:40,240
vi mode in all the standard shields. It's kind of a common feature. Most people don't know about it.

112
00:11:40,240 --> 00:11:47,600
I don't know why most people don't know about it, but so let me open up a terminal here and this is

113
00:11:48,160 --> 00:11:57,440
the zshell. So, this is zsh. Let me zoom in and I am going to show my zshrc file here. Let's open it

114
00:11:57,440 --> 00:12:03,920
up in vimg to get to the bottom of the document because on the last line, right here, bind key

115
00:12:03,920 --> 00:12:13,760
dash v. So, bind key space dash v basically gets us into vim mode. That's all you need to do. Add

116
00:12:13,760 --> 00:12:22,080
that line to your zshrc file and now you have vim mode in zshrc. What is vim mode? Well, by default,

117
00:12:22,080 --> 00:12:27,760
when you open up your terminal, you are in insert mode, meaning I can actually type something. This

118
00:12:27,760 --> 00:12:36,400
is a line of text, right? Now, if I hit escape right now and now try to type something. Yeah,

119
00:12:36,400 --> 00:12:42,080
well, I typed i so I haven't gotten back into insert mode, but let me escape. Nothing really works.

120
00:12:42,080 --> 00:12:49,200
Now, hjkl worked because that's the vim keys, l to move right, h to move left. I wanted to change

121
00:12:49,200 --> 00:12:58,240
word. So, how about cw? This is a block of text. Escape to get back into normal mode. Of course,

122
00:12:58,240 --> 00:13:03,200
I could delete a word. I could dw. Well, let me get to the beginning of the word though. So,

123
00:13:03,200 --> 00:13:08,160
let me move over with the navigation keys, dw. Of course, I could undo with u. I could delete

124
00:13:08,160 --> 00:13:15,120
the line with dd. I could p4 paste. I could undo and get all of that back to where I was originally.

125
00:13:15,840 --> 00:13:22,480
I could zero to get to the beginning of the line. I could dollar sign to get to the end of the line.

126
00:13:22,480 --> 00:13:28,720
So, that is vi mode and of course, i to get me back into insert mode so I can actually continue to type.

127
00:13:28,880 --> 00:13:39,360
All right. So, that is vi mode here in zsh. What about vi mode and bash? Well, let me

128
00:13:40,960 --> 00:13:47,120
get back over to bash. Why can I? Oh, that's because I created this in vi mode. It won't let me.

129
00:13:48,240 --> 00:13:52,080
Let me get back into normal mode. I can't get rid of this line of text, but if I get back into

130
00:13:52,080 --> 00:13:58,240
normal mode and dd. All right. And now back into insert mode, bash. It's kind of complicated

131
00:13:58,240 --> 00:14:02,960
because I don't have anything visually in my prompt telling me when I'm in normal mode and

132
00:14:02,960 --> 00:14:10,000
insert mode. All right. So, I'm going to switch over to bash here and now vm.bashrc. Let's check

133
00:14:10,000 --> 00:14:16,160
out my bashrc and capital G to go to the end of the document here and vm and the very last line

134
00:14:16,160 --> 00:14:24,960
set space dash o space vi. That enables vi mode and bash colon q to quit out of vm. So,

135
00:14:24,960 --> 00:14:31,440
this is the same. So, if I, well, let me clear everything here. So, if I, this is a line of

136
00:14:31,440 --> 00:14:35,600
text. So, by default, of course, when you're in the shell in the bash shell,

137
00:14:35,600 --> 00:14:42,240
same thing, you're in insert mode. But if I hit escape, now, you know, I am using the vm navigation

138
00:14:42,240 --> 00:14:47,760
keys hnl. Pretty much everything else on the keyboard is disabled other than I didn't get

139
00:14:47,760 --> 00:14:54,240
into insert mode. So, again, oh, it gets me to the beginning of the line dollar symbol gets me to

140
00:14:54,240 --> 00:14:59,680
the end of the line. All the other stuff works as expected. So, I could, you know, dd to delete the

141
00:14:59,680 --> 00:15:09,040
line p to put move back over here and I could, you know, change word for new word. So, that is

142
00:15:09,120 --> 00:15:13,600
all I wanted to share with you guys today is just I wanted to share with you a little bit of the

143
00:15:13,600 --> 00:15:21,360
power of vm and how you can get more out of other applications such as your file manager and your

144
00:15:21,360 --> 00:15:30,240
shell such as bash zsh fish by using vm and by enabling vm modes if they have such a mode available.

145
00:15:30,560 --> 00:15:39,680
For me, and I know for many of you, vm has become kind of a way of life. Vm, it's so much more than

146
00:15:39,680 --> 00:15:45,120
a text editor. It's not, it's not like emacs. Emacs is almost like an operating system. It does

147
00:15:45,120 --> 00:15:50,960
so much stuff. I mean, you can play games in emacs. Vm, it doesn't take it to that level,

148
00:15:50,960 --> 00:15:56,320
but certainly vm, again, it's kind of a way of life. And the more you get into vm,

149
00:15:56,320 --> 00:16:05,040
the harder it is to do things that don't involve the vm key bindings. So, I'm going to keep

150
00:16:05,040 --> 00:16:11,440
doing this with any program I can. I want to navigate with the vm keys. I want dd to delete

151
00:16:11,440 --> 00:16:18,800
and p to paste. I want nothing but vm key bindings in all my programs. This show was made possible

152
00:16:18,800 --> 00:16:23,040
by Ansem, Carlos, Chris, Douglas, Dylan, Leo, Rob, Robert and Tony. They are the producers of the

153
00:16:23,040 --> 00:16:28,000
show. They're my highest tier patrons over on Patreon. Without them, this show would not be

154
00:16:28,000 --> 00:16:32,880
possible. The show was also brought to you by all those fine ladies and gentlemen. You guys see

155
00:16:32,880 --> 00:16:37,120
those names on the screen that help support my work over on Patreon. I want to thank each and

156
00:16:37,120 --> 00:16:41,600
every one of those guys. If you'd like to support my work, please consider doing so. You'll find

157
00:16:41,600 --> 00:16:52,960
me at DistroTube over on Patreon. Alright guys, peace.

