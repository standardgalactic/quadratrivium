WEBVTT

00:00.000 --> 00:05.240
One of my favorite kinds of videos to make is where I solve a real-world problem

00:05.240 --> 00:10.000
through the use of shell scripting, because a lot of Linux users, especially

00:10.000 --> 00:13.680
those of you that are new to Linux, shell scripting seems like it's something

00:13.680 --> 00:18.680
that's really hard, it's complicated, you know, you got to learn a ton of stuff to

00:18.680 --> 00:22.280
get this stuff to work, but really once you start playing around a little bit with

00:22.280 --> 00:27.120
the terminal and the command line, you can quickly figure out a lot of the basic

00:27.120 --> 00:31.000
command line utilities that are needed to create these shell scripts, and you can

00:31.000 --> 00:34.800
really start solving a lot of problems through the use of shell scripting. So

00:34.800 --> 00:38.920
what is the problem that I'm going to solve today? Well, it involves your key

00:38.920 --> 00:43.200
bindings in your tiling window managers. A lot of people want an easy way to bring

00:43.200 --> 00:47.200
up a list of all their key bindings for their tiling window manager, and the

00:47.200 --> 00:51.000
reason people ask about this all the time is because there's one tiling

00:51.000 --> 00:55.040
window manager that really gets this right, the awesome tiling window manager.

00:55.280 --> 00:59.600
The awesome window manager, you hold the super key, and a window pops up and it

00:59.600 --> 01:04.800
lists all your key bindings for the awesome window manager. And now everybody

01:04.800 --> 01:09.520
that runs all these other tiling window managers want that same feature in their

01:09.520 --> 01:13.120
window manager, but of course these other window managers don't have that feature.

01:13.120 --> 01:16.760
Well, you know what? We can kind of create something with a simple shell script.

01:16.760 --> 01:21.440
So let me switch over to my desktop, and today I'm running the Xmonad window

01:21.440 --> 01:26.000
manager, and I've already pulled up my Xmonad config here inside Doom Emacs,

01:26.000 --> 01:30.440
because what I want to do is I want to be able to grab all of the key bindings

01:30.440 --> 01:35.040
and the commands they run from my Xmonad config. So what I'm going to do is I'm

01:35.040 --> 01:39.120
actually just going to page down here. Actually, I went a little too far.

01:40.520 --> 01:45.400
This is my key bindings. It's in this statement that says my keys equals, and

01:45.400 --> 01:49.720
then I've got a very long list of key bindings here in Xmonad. What I would

01:49.720 --> 01:53.840
like to do is find some way to pull all of these key bindings out, you know,

01:53.840 --> 01:58.480
just basically everything that was in that my keys block. I don't need the rest

01:58.480 --> 02:02.080
of the config, obviously, printed out, because we just want a window that pops

02:02.080 --> 02:05.640
up that shows us the key bindings. So what's the best way to do this? I don't

02:05.640 --> 02:09.960
know the best way. I'm not a professional programmer. You know, I just do this as a

02:09.960 --> 02:16.920
hobby, but I know that CID has the ability to give you a number of lines from,

02:16.960 --> 02:20.640
well, you give it a starting statement and an ending statement, and it pulls out

02:20.640 --> 02:23.840
all the lines from each of those statements. So what I'm going to do is I'm

02:23.840 --> 02:27.680
just going to create some special comments here. Now, comments in Haskell

02:27.680 --> 02:31.520
begin with dashes, two dashes. So I'm going to do dash dash space. And I'm just

02:31.520 --> 02:36.680
going to do start underscore keys, all caps. And then I'm going to escape. I'm

02:36.680 --> 02:41.520
going to page down to the end of my key bindings here. And let's go back up.

02:42.720 --> 02:46.160
That was the end of the key bindings. And then I'm going to just go ahead and

02:46.160 --> 02:51.040
create one more comment here. I'm going to do dash dash space end underscore

02:51.120 --> 02:58.440
keys and escape. So let me go ahead and save this to my xmonad.hs config file.

02:58.440 --> 03:03.040
So I went ahead and did colon w to write and I'm going to do a key binding I

03:03.040 --> 03:08.200
have for org babble tangle here inside doom emacs. And then now that I've saved

03:08.200 --> 03:11.760
that, what I'm going to do is I'm going to open a terminal. Let's go ahead and

03:11.760 --> 03:15.880
zoom way in here in the terminal as well. So you guys can see this. What I'm

03:15.880 --> 03:20.280
going to do is I'm going to run the command said dash in. And then inside

03:20.280 --> 03:25.080
single quotes, I'm going to do slash start underscore keys because that's the

03:25.160 --> 03:29.440
the starting comment that we wanted. So I want to pull all lines starting with

03:29.440 --> 03:36.240
start underscore keys and then slash comma slash and then in underscore keys

03:36.360 --> 03:40.760
and then the ending slash and then the command I want to run on this. I want to

03:40.760 --> 03:45.240
run the print command P. And then we need to give it the path to my xmonad

03:45.280 --> 03:50.280
config. So that would be in my home directory slash dot xmonad because it's

03:50.280 --> 03:56.360
a hidden directory slash and then xmonad.hs. And that prints out. Let me

03:56.360 --> 04:01.080
make this full screen that prints out every line between a start underscore

04:01.080 --> 04:05.920
keys and in underscore keys. Now, of course, many of these lines don't we

04:05.920 --> 04:09.240
don't need necessarily because some of these are just comments. Really, some of

04:09.240 --> 04:12.600
them are useless comments. We could get rid of some of that. We could also get

04:12.600 --> 04:17.400
rid of some of the extra notation and syntax and things. We could clean this

04:17.440 --> 04:20.120
up a little bit. And that's what I'm going to do. So what I'm going to do is

04:20.120 --> 04:23.440
I'm going to up arrow and I'm going to run the same said command, you know, to

04:23.440 --> 04:27.160
get all of these lines from start keys to end keys. And then I'm going to pipe

04:27.160 --> 04:32.120
it into grip because grip will allow us to do some interesting stuff here. For

04:32.120 --> 04:36.440
example, if I wanted to, I only want to get the lines that actually have the

04:36.440 --> 04:40.040
actual key bindings and the actual lines that have key bindings looks like all

04:40.040 --> 04:45.840
of them start with comma space, opening parentheses, and then a double quote. So

04:45.840 --> 04:50.840
why don't I just grip that? So we do grip and then inside single quotes, comma

04:50.840 --> 04:56.720
space, opening parentheses, double quote. And now when I run that it's a lot

04:56.720 --> 04:59.960
cleaner, right? Because all of those comments, which were lines that started

04:59.960 --> 05:04.720
with dash dash or no longer output it here, actually looking at it. That's not

05:04.720 --> 05:08.680
entirely true. We do have some commented lines that were returned because some of

05:08.680 --> 05:13.480
the commented lines that started with dash dash also had the string comma

05:13.480 --> 05:17.960
space, opening parentheses, double quotes, because these were key bindings that

05:17.960 --> 05:22.000
I've disabled by commenting them out. I don't want those returned. If I'm not

05:22.000 --> 05:25.240
currently using the key binding, you know, it's a commented key binding. I don't

05:25.240 --> 05:30.080
want that to be listed either. So I'm going to up arrow and we did grip. Let's

05:30.080 --> 05:34.080
go ahead and grip one more time. I will pipe all of this into grip one more

05:34.080 --> 05:38.320
time. And this time I'm going to do a inverse grip. So I'm going to do dash V

05:38.320 --> 05:43.040
meaning return all the lines that set the ones that have this string. So I'm

05:43.040 --> 05:48.000
going to do inside single quotes again. I'm going to do dash dash space and then

05:48.000 --> 05:53.000
comma space, opening parentheses, single quotes. So these lines here that started

05:53.000 --> 05:57.560
with that string, I want to get rid of those. So return all the lines that don't

05:57.560 --> 06:02.840
have this pattern. That's what the dash V flag does for us. And now that did not

06:02.880 --> 06:06.880
quite work. And I actually got an error message because grip does not like the

06:06.880 --> 06:11.880
dash dash pattern. We need to escape that. So I need to do a backslash dash

06:11.920 --> 06:17.280
backslash dash that actually grip will understand that as being dash dash in

06:17.280 --> 06:21.600
the document. Now when I run that, we get exactly what we wanted. It looks like I

06:21.600 --> 06:26.080
still have one more commented line that didn't get filtered out is because I

06:26.080 --> 06:30.120
didn't keep the same pattern instead of dash dash space comma space. That

06:30.120 --> 06:34.600
particular line is dash dash comma without a space. I could actually just

06:34.600 --> 06:39.720
fix that in the config since that's really my fault for not keeping the same

06:39.720 --> 06:43.480
pattern for all of my commented lines. I'm just going to fix that right here in

06:43.480 --> 06:51.840
the config. And now when I run the grip command again. Now that commented line

06:52.200 --> 06:56.800
is actually no longer returned. So I'm just going to scroll through here. Yeah,

06:56.840 --> 07:01.280
it doesn't look like we have any commented lines now. So already this is a

07:01.280 --> 07:05.800
pretty clean layout. It gives me the key binding and the command it runs. And then

07:05.800 --> 07:09.480
at the end of the line, I did have some comments for those of you that are using

07:09.480 --> 07:14.120
my config to more specifically explain exactly what the commands are in case

07:14.120 --> 07:18.680
you don't understand, you know, what the actual commands in X mode and do. For

07:18.680 --> 07:23.680
example, if you didn't know that the spawn X mode and restart command restarts

07:23.680 --> 07:27.840
X monad, I went ahead and commented it out specifically, you know, so explicitly

07:27.840 --> 07:32.120
for you guys. Now one thing that is a problem I noticed is the very first

07:32.120 --> 07:36.680
key binding that is returned here is actually the second key binding in my

07:36.840 --> 07:41.440
X monad config. Let me make the X monad config full screen. You see, because

07:41.600 --> 07:45.960
that's the one key binding that doesn't start with comma space of opening

07:45.960 --> 07:50.440
parentheses. It actually starts with opening bracket space opening parentheses.

07:50.600 --> 07:55.040
So I need to take that into account here. So what I'm going to do, I'm going to

07:55.040 --> 07:58.400
up arrow and let's go ahead and add a rule for that. What I'm going to do is

07:58.400 --> 08:02.320
I'm going to go back here to this first grip here. I'm going to add the dash E

08:02.320 --> 08:07.080
flag because we're going to do multiple grips here. So I'm going to do dash E

08:07.080 --> 08:11.760
again. And then inside single quotes, I want to grip for the opening bracket. I

08:11.760 --> 08:18.080
have to escape that. So do a backslash bracket space parentheses. And then I

08:18.080 --> 08:22.480
think that should work. Now, if I run that and let's scroll back up and see if

08:22.480 --> 08:26.800
we actually get, yeah, now we actually get the very first key binding as well.

08:26.800 --> 08:31.000
So now we're actually seeing every single key binding. Now I've still got some

08:31.000 --> 08:35.320
work to do on cleaning this up, but this single line at the command line is going

08:35.320 --> 08:38.320
to start getting very long. So what I'm going to do is I'm actually just going to

08:38.320 --> 08:42.680
do a copy because let's go ahead and put this in a real script. So I'm going to

08:42.680 --> 08:47.280
go ahead and create a new file here inside a doom Emacs. So I'm going to do a

08:47.280 --> 08:51.560
space period because inside my .xmonad directory, which we're currently in

08:51.560 --> 08:55.880
because we're looking at xmonad.hs, I'm going to go ahead and create a shell

08:55.880 --> 09:02.040
script. I'm going to name it xmonad underscore keys .sh. And then it creates

09:02.040 --> 09:07.360
this new bash script here because by default, I've got my Emacs setup to

09:07.360 --> 09:11.640
where anytime I create a shell script, it gives me the user bin ENV bash

09:11.640 --> 09:16.200
shebang. So it's going to be a bash script. Let me zoom in. And what I'm going to do

09:16.240 --> 09:20.360
is I'm just going to paste what we had had in the terminal before. And let's go

09:20.360 --> 09:24.280
ahead and clean this up so it looks a little better. So let's do some line

09:24.280 --> 09:28.560
breaks. So in shell scripting, or even at the command line running this, you

09:28.560 --> 09:32.080
could actually create some line breaks with the backslash character. So that's

09:32.080 --> 09:37.360
what I'm going to do is I'm just going to go ahead and put a few backslashes just

09:37.360 --> 09:43.320
to make this a little more readable. I'm going to go ahead and do colon W to write

09:43.360 --> 09:49.120
that. And I'm going to open up a new terminal here and I'm going to cd into .xmonad,

09:49.120 --> 09:53.800
that directory. If I did a ls, you see xmonad underscore keys. So what we need

09:53.800 --> 09:58.760
to do is run the command chmod plus x because we want to make this script

09:58.760 --> 10:03.040
executable because it will not run if it's not executable. And now that I've

10:03.040 --> 10:07.400
done that, you know, we could actually run this if we wanted to. And you see how

10:07.400 --> 10:11.440
that works. Let me go ahead and zoom in on this terminal because this will be the

10:11.480 --> 10:16.440
terminal we use from here on out. Let me go back to the other terminal here. I'll

10:16.440 --> 10:21.080
just close that out. Now we'll just play around in this shell script instead of

10:21.080 --> 10:24.600
doing this at the command line. It'll be easier to read this way. Now one thing I

10:24.600 --> 10:29.480
didn't like about the output from this command is the fact that every line has

10:29.480 --> 10:34.680
a whole bunch of leading spaces. So I want to get rid of that. So and the reason

10:34.680 --> 10:38.440
it has leading spaces is because the lines it's actually pulling out of my

10:38.440 --> 10:42.120
config have leading spaces because they have to. You know, I can't have these

10:42.120 --> 10:45.760
lines starting at the beginning of the line because Haskell's really picky

10:45.760 --> 10:49.640
about spacing. So I actually need the spaces in the config file, but I want to

10:49.640 --> 10:53.200
get rid of the spaces when I actually have this printed out in the terminal.

10:53.200 --> 10:57.200
And we can do this with a regular expression here. What I want to do, I

10:57.200 --> 11:01.600
probably want to do this with sed. Let me get back into insert mode and I'm going

11:01.600 --> 11:06.960
to pipe all of this into sed this time. And we'll do sed-y because we may do

11:06.960 --> 11:10.960
multiple sed statements. And then we're going to do single quotes S because we're

11:10.960 --> 11:14.240
going to do a substitution. What do I want to substitute? I want to substitute

11:14.240 --> 11:18.000
the carrot symbol which signifies the beginning of the line and then inside

11:18.000 --> 11:23.400
brackets I want to do a space or tab and then the asterisk symbol. What this

11:23.400 --> 11:27.040
signifies is find the beginning of the line. If everything at the beginning of

11:27.040 --> 11:32.680
the line is tabs or spaces, I want you to replace it with what? With nothing. And I

11:32.680 --> 11:36.400
think that's really all I want to do there. So let me go ahead and write and

11:36.400 --> 11:41.240
then get back to the terminal and let's go ahead and rerun our script and see if

11:41.240 --> 11:45.080
that actually works. It did. It removed all of those leading spaces. To clean it

11:45.080 --> 11:49.320
up a little further, I think I would want to get rid of the leading comma space on

11:49.320 --> 11:54.160
each line as well. So let's get back to the script here. Let me get into insert

11:54.160 --> 11:57.680
mode. I'm just going to do another dash-y. We're going to continue with sed

11:57.680 --> 12:02.640
substitutions here and then we're going to do a substitution for the comma space

12:02.640 --> 12:08.080
parentheses and then what we want to substitute that for is just parentheses

12:08.080 --> 12:12.800
and then do the trailing slash at the end. And if I do colon w and then get

12:12.800 --> 12:18.080
back to the terminal and run that, that did not work because I obviously made a

12:18.080 --> 12:24.520
mistake here because I didn't add the backslash to signify a line break there.

12:24.520 --> 12:28.880
So let me put that in its place and then go back to the terminal and rerun that

12:28.880 --> 12:33.680
and now we get rid of the opening comma space that was at the beginning of each

12:33.680 --> 12:38.040
line. Of course remember there is the one line that's not going to look right

12:38.040 --> 12:42.000
because the very beginning line had a bracket and of course we could take that

12:42.000 --> 12:45.880
into account as well if I get back into the script. Once again let's go ahead

12:45.880 --> 12:51.360
and create a new line here and we'll do dash-e because we'll continue on with sed.

12:51.520 --> 12:55.840
This time what are we going to substitute? We are going to substitute an opening bracket

12:55.840 --> 13:01.200
space opening parentheses and we're going to substitute that with just opening

13:01.200 --> 13:06.000
parentheses and then do the trailing slash emax. Annoyingly anytime you do

13:06.000 --> 13:10.040
anything with brackets parentheses it likes to add the closing one which is

13:10.040 --> 13:13.760
great sometimes but in this particular case it's actually getting in my way. I

13:13.760 --> 13:18.360
can actually turn that off but I won't bother. And now when I run the script

13:18.360 --> 13:23.040
let's see if it fixes the very first line and now the very first line looks

13:23.040 --> 13:26.480
the same as the rest of the lines. Now one thing I don't like about this

13:26.480 --> 13:31.880
gigantic list of key bindings is it's all one big block of text there's no real

13:31.880 --> 13:37.480
breaks. One thing I would find interesting is if I could actually group the

13:37.480 --> 13:42.000
key bindings which I've grouped them in my config file right? I've grouped them

13:42.000 --> 13:46.800
by category for example all of the d-menu key bindings are in one section

13:46.960 --> 13:52.160
and all of the emax key bindings are in one section etc. And I want to keep that

13:52.160 --> 13:56.200
and I would like those comments for the types of key bindings to actually be

13:56.200 --> 14:00.600
outputted as well. But remember we stripped out all the comments everything

14:00.600 --> 14:04.160
that began with dash dash. But I think we could fix this if we just add a

14:04.160 --> 14:08.440
specific string that we can you know do something with grip or said with later.

14:08.440 --> 14:12.880
So once again I'll do all caps and I'll just create a tag essentially I'll do kb

14:12.880 --> 14:18.080
for key binding underscore group. So these will be key binding groups here and

14:18.080 --> 14:22.760
then the name of the group in this case these are X-monad key bindings and I

14:22.760 --> 14:27.080
could go down here and do the same thing so once again I'll add kb underscore

14:27.080 --> 14:32.400
group. What I probably should do is just get into visual mode here and actually

14:32.400 --> 14:36.880
yank that and just copy it that way I can go down here and just paste it a

14:36.880 --> 14:41.480
million times so that I've got each category here. I'm gonna write that I'm

14:41.480 --> 14:45.400
not gonna go through and do it to every single group here I'll just do four of

14:45.400 --> 14:49.280
them just to see if this actually works and then what I want to do is get back

14:49.280 --> 14:53.600
into our script. What I want to do is I want to go back to where we were gripping

14:53.600 --> 14:57.920
with the dash E flag I want to create a new line let's do dash E one more time

14:57.920 --> 15:03.440
this time I want to grip this particular string kb underscore group and

15:03.440 --> 15:07.320
let's write that and let's go to the terminal run the script and now let's

15:07.360 --> 15:11.880
go back to the top of the document and see if that worked for us and it did not

15:11.880 --> 15:18.360
so obviously we made a mistake there obviously I needed to add a pipe and then

15:18.360 --> 15:22.440
of course let's make sure we get the line break there with the backslash let

15:22.440 --> 15:26.360
me write that again so that was just a dumb mistake on my part let's rerun the

15:26.360 --> 15:32.760
script and now we get an error the dash E command is not found so now we had the

15:32.760 --> 15:37.040
pipe on this line that doesn't need to be there so we only need to pipe when we're

15:37.040 --> 15:41.240
actually piping into grip or said we don't need a pipe symbol when we're

15:41.240 --> 15:47.480
just continuing on with dash E so now let's run the script the script actually

15:47.480 --> 15:51.480
works this time let's see if we actually have the group headings the lines with

15:51.480 --> 15:56.440
the group names no we do not so we keep making mistakes but that's fine I leave

15:56.440 --> 16:00.000
all the mistakes in the videos because that's part of learning is saying

16:00.000 --> 16:04.640
somebody screw up and you guys hopefully don't do this when you're doing your

16:04.640 --> 16:08.080
scripting but honestly when you're doing one of these scripts on the fly

16:08.080 --> 16:13.080
there's a lot of trial and error with them and looking at this I really think

16:13.080 --> 16:16.560
this should have worked I'm not seeing the error the others you know when they

16:16.560 --> 16:20.000
didn't work I obvious I immediately spotted the error but this looks like

16:20.000 --> 16:24.080
it should work so what I'm thinking yeah I know what it is I'm an idiot I

16:24.080 --> 16:29.840
changed my config file I didn't write it and then I need to run a org babble

16:29.840 --> 16:35.520
tangle to have that output to Xmonad.hs and I'm betting now the script

16:35.520 --> 16:41.360
actually works if I go back here and run the script and let me scroll back up

16:41.360 --> 16:47.920
and now yeah we actually get the group name Xmonad run prompt other D menu

16:47.920 --> 16:52.840
prompts of course we also get dash dash KB group so now what we need to do is get

16:52.840 --> 16:58.520
into the script and what we need to do is get rid of dash dash space KB group

16:58.520 --> 17:02.720
on those lines I think how I want to play that is I'm just gonna go ahead and

17:02.720 --> 17:07.560
do this with SID so I'm gonna add the backslash for line break just continue

17:07.560 --> 17:12.080
on dash E here and then inside single quotes we'll do a substitution again

17:12.080 --> 17:16.800
what am I substituting I'm gonna substitute dash dash space KB underscore

17:16.800 --> 17:22.200
group space because I want to get rid of the space after KB underscore group as

17:22.200 --> 17:25.840
well and then slash and then what do I want to replace this with I actually

17:25.880 --> 17:31.000
want to replace it could I replace it with a new line slash let's see that if

17:31.000 --> 17:35.200
that works I'm gonna write that let's go ahead and get back to the terminal and

17:35.200 --> 17:40.360
run that and see how that looks scroll back up and that looks really really

17:40.360 --> 17:46.320
nice right because I added a line break before the group name and one thing I

17:46.320 --> 17:50.440
don't like is I don't like that I have the comma separating the key binding from

17:50.440 --> 17:54.160
the command it runs I'd rather that not be a comma I want it something more

17:54.760 --> 17:58.000
something that stands out a little bit more visually I think I'd rather change

17:58.000 --> 18:02.360
that maybe to a colon so let me get back into the script and what I'm gonna do

18:02.360 --> 18:07.120
is I'm just gonna go ahead and add another said substitution so let's go

18:07.120 --> 18:12.000
ahead and substitute a double quote comma space because that was the pattern

18:12.000 --> 18:17.640
and I would rather that be a double quote space colon space and then I'm gonna

18:17.640 --> 18:22.600
do the trailing slash and then the trailing single quote and let's see if

18:22.640 --> 18:27.600
that actually works for so let me rerun the script and yeah I think that is a

18:27.600 --> 18:32.200
little bit more easier to read I think that visually that stands out a little

18:32.200 --> 18:35.520
more than having that comma right behind the double quotes now we have space

18:35.520 --> 18:40.360
colon space and if I wanted this to line up even better what I could do is I

18:40.360 --> 18:46.560
can actually change the space I could do something like a change the space to a

18:46.800 --> 18:53.000
tab and let's see how that looks rerun the script and yeah and now that's

18:53.000 --> 18:56.760
even better as far as visually separating the key binding from the

18:56.760 --> 19:00.360
commands now the next thing I want to do is I don't want this information to

19:00.360 --> 19:05.320
have to always be output in a terminal I would rather this output in a graphical

19:05.320 --> 19:11.000
window a dialogue box and on Linux the most common dialogue box program is a

19:11.000 --> 19:15.040
program called yet which stands for yet another dialogue and what I'm gonna do

19:15.040 --> 19:19.640
is we're just gonna pipe all of this information and let me go ahead and add

19:19.640 --> 19:22.960
the pipe symbol and I'll go ahead and create a line break as well I'm gonna

19:22.960 --> 19:29.520
pipe this into yet dash dash text dash info and that is the type of box we're

19:29.520 --> 19:34.240
creating with the yet dialogue box program is it's a text info box because

19:34.240 --> 19:38.760
there's a whole bunch of windows you can create with yet you can create message

19:38.760 --> 19:43.720
windows and and things like that so I'm gonna go ahead and do a colon W to write

19:43.760 --> 19:48.160
that and then go back to the terminal and now run the script and it opens this

19:48.160 --> 19:52.440
yet dialogue box it opens it full screen because we were in full screen mode but

19:52.440 --> 19:56.960
if I was in tiling mode it would just be a standard tiling window now I don't

19:56.960 --> 20:01.360
want that to actually be tiling I don't want it to be full screen either what I

20:01.360 --> 20:07.000
would like is I would like to have that open at a specific size and centered on

20:07.000 --> 20:11.640
the screen so what I'm gonna do is I'm gonna get back into insert mode here and

20:11.640 --> 20:14.520
another thing I want to do is I want to change the colors because I didn't like

20:14.520 --> 20:20.800
the GTK color scheme of those windows I'd rather it respect kind of like my emacs

20:20.800 --> 20:25.800
color scheme or my terminal color scheme and in this program yet you can

20:25.800 --> 20:30.000
actually specify a background color and a foreground color so I could do dash dash

20:30.000 --> 20:36.000
back equals and then give it a background color I'm gonna do 282c34 that's the

20:36.000 --> 20:39.960
background color that I use in emacs and in my terminal color schemes and then

20:39.960 --> 20:44.520
I'm gonna do dash dash four equals for a foreground color and for that I'm gonna

20:44.520 --> 20:53.440
do 46d9ff and then what I want to do is do dash dash geometry equals and I

20:53.440 --> 20:59.480
want this to be 1200 pixels by 800 pixels in size and then let me do colon

20:59.480 --> 21:05.000
W to write that and then let me go ahead and run that and see how that looks it's

21:05.000 --> 21:09.640
still full screen if I was in tiling mode it would still be tiling the

21:09.640 --> 21:14.400
problem here is you know setting the geometry works fine if we were in a

21:14.400 --> 21:18.520
floating window manager but a tiling window manager always forces things to

21:18.520 --> 21:22.840
tile so this is not a problem with the script necessarily it's a problem with

21:22.840 --> 21:28.280
my Xmonad config I need to set a window rule that all YAD windows are floating

21:28.280 --> 21:32.640
so what I need to do is get into my Xmonad config and then I'm gonna page

21:32.640 --> 21:37.360
up to where I have some window rules settings and you see things like class

21:37.440 --> 21:42.360
name equals and then the name of the the windows and then do float these are

21:42.360 --> 21:46.480
all the windows that I want to always be floating such as gimp for example class

21:46.480 --> 21:51.360
name equals gimp do float so I'm just gonna go in here and I'm gonna YY to

21:51.360 --> 21:56.160
copy and P to paste and then I'm gonna create class name equals and I'm gonna

21:56.160 --> 22:00.800
do YAD I'm assuming that the window name is actually YAD and then I'm gonna do

22:00.800 --> 22:06.880
do float but really what I want to do is do center float because Xmonad has the

22:06.880 --> 22:11.520
ability to force a floated window to also be in the center of the screen now

22:11.520 --> 22:18.240
if I do colon W to write that and then let me write that to Xmonad.hs and I'm

22:18.240 --> 22:23.880
gonna restart Xmonad and I get an error message and the good thing about Xmonad

22:23.880 --> 22:28.120
is it's really good about error messages as far as it tells you exactly what the

22:28.120 --> 22:33.160
problem is the problem is do center float I didn't import a library that has a

22:33.160 --> 22:36.600
do center float module it actually tells me that right here it tells me I

22:36.600 --> 22:42.880
should have imported Xmonad.hs.manageHelpers do center float so let me

22:42.880 --> 22:46.800
get back into my config I'm gonna go to the top of the document here because

22:46.800 --> 22:52.880
that's where my imports are and I need to import Xmonad.hs.manageHelpers which

22:52.880 --> 22:57.180
I've already got but I specified only two modules is full screen and do full

22:57.180 --> 23:02.600
float I need to go ahead and add do center float let me go ahead and write

23:02.600 --> 23:09.920
that Xmonad restarted without any errors so now when I run the script it

23:09.920 --> 23:13.440
should open in the center of the screen so let me just run that from the

23:13.440 --> 23:18.040
terminal here and I'm in tiling mode and let's see if it actually yes it forces

23:18.040 --> 23:22.800
the window centered in the middle of the screen with 1200 by 800 pixels for the

23:22.800 --> 23:27.560
size and it respected my background color and the foreground color I chose so

23:27.560 --> 23:31.640
that is how I would do that the last thing I probably would do for purposes

23:31.640 --> 23:35.360
of this video I don't want to run this from a command line I don't want to run

23:35.360 --> 23:39.360
this from a run launcher you know I want a key binding to where I hit a key

23:39.360 --> 23:43.160
binding and this window with all of my key bindings pops up so what I need to

23:43.160 --> 23:47.920
do is I need to put that of course in my Xmonad config so let me go down to where

23:47.920 --> 23:51.920
all of my key bindings are and I'm just gonna add a new one let me find the very

23:51.920 --> 23:56.320
beginning of my key binding list because it needs to go in the key binding

23:56.320 --> 24:00.320
group for the Xmonad key binding so I'm just going to go ahead and create a new

24:00.320 --> 24:04.640
one so I'm gonna do comma and then inside parentheses here inside double quotes

24:04.640 --> 24:11.400
I'm gonna do mod shift slash now my shift slash is really mod question mark

24:11.400 --> 24:15.440
because the question mark is typically the key you hit in many programs to get

24:15.440 --> 24:19.640
help so it makes sense for this key binding to actually be mod shift slash

24:19.640 --> 24:23.840
or mod question mark and I need to do a comma behind that and then the command

24:23.840 --> 24:28.080
we're gonna run the command we're gonna run of course needs to be spawn and then

24:28.080 --> 24:32.600
what are we spawning we are gonna spawn the path to that script which is in my

24:32.600 --> 24:41.280
home directory slash dot Xmonad slash Xmonad underscore keys dot sh and let me

24:41.280 --> 24:49.880
escape and let me write that and now let me restart Xmonad and now let me do

24:49.880 --> 24:55.880
mod question mark and now mod question mark brings up the window with our key

24:55.880 --> 25:00.320
bindings how cool is that that's very nice and of course I could clean this

25:00.320 --> 25:05.000
script up a lot more and make the you know this look a little bit better

25:05.000 --> 25:10.080
because honestly I could format that a lot better but really this works I mean

25:10.080 --> 25:14.880
if you had a problem figuring out what your Xmonad key bindings this works I

25:14.880 --> 25:19.760
mean I can easily read this figure out what key binding does what and of course

25:19.760 --> 25:24.960
just because I did this in Xmonad I mean you could write a script to grip and set

25:25.000 --> 25:30.960
out all that information for Qtile or i3 or BSPWM or whatever window manager you

25:30.960 --> 25:34.920
use now obviously that was a very quick and dirty script I didn't spend what 10

25:34.920 --> 25:39.320
15 minutes and we just kind of going at where we're winging it right and I did

25:39.320 --> 25:43.620
everything with said and grip which I purposefully was trying to do said and

25:43.620 --> 25:46.960
grip I was trying to actually avoid using alt because I use typically use

25:46.960 --> 25:51.280
alt a lot in my scripts and people complain man you using alt why didn't

25:51.280 --> 25:55.360
you use said for that what in use grip for that well here you go and honestly

25:55.360 --> 26:00.880
I'm not even sure shell scripting is the best way to accomplish this ideally

26:00.880 --> 26:04.600
what you would want to do is if you actually knew Haskell because Xmonads

26:04.600 --> 26:08.000
written in Haskell the config files written in Haskell it would be great if

26:08.000 --> 26:12.360
I knew enough Haskell where I could actually get this information by adding

26:12.360 --> 26:17.440
some Haskell code to my config but I am nowhere near a Haskell master it's a

26:17.440 --> 26:21.680
lot easier just to quickly throw together this quick shell script now

26:21.680 --> 26:24.760
before I go I need to think a few special people I need to think the

26:24.760 --> 26:28.400
producers of this episode as he gave James Mitchell Paul West a commie Allen

26:28.400 --> 26:31.640
Chuck Gurt David Dylan Gregory Hico Eryon Alexander peace arch and fedora

26:31.640 --> 26:35.880
Polytech raver red Prophet Scott Steven and Willie these guys they're my

26:35.880 --> 26:39.760
highest tiered patrons over on patreon without these guys this episode that you

26:39.760 --> 26:43.080
just watched would not have been possible the shows also brought to you by

26:43.080 --> 26:46.160
each and every one of these ladies and gentlemen as well all these names you're

26:46.160 --> 26:49.640
seeing on the screen each and every one of these ladies and gentlemen help

26:49.640 --> 26:52.920
support me over on patreon because I don't have any corporate sponsors I'm

26:52.920 --> 26:57.400
sponsored by you guys the community if you like my work you want to help me out

26:57.400 --> 27:01.440
please consider subscribing to distro tube over on patreon all right guys

27:01.440 --> 27:08.040
peace and yes I'll push the script to my get lab

