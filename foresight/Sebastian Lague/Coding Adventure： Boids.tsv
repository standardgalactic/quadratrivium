start	end	text
0	6480	Hi everyone, in this episode of Coding Adventures, I'd like to play around with some boys.
6480	10480	This rather strange term is what Craig Reynolds uses to describe bird-like objects in his
10480	13340	paper on flocks, herds and schools.
13340	17080	So once I'd read through that, I created some little flying triangles to represent these
17080	18080	creatures.
18080	22640	To do anything interesting though, they are going to need an awareness of their surroundings,
22640	26480	so I'll highlight one of them to be our subject of study.
26480	30320	This bird should be able to sense the others inside the circle, which is its radius of
30320	31520	vision.
31520	36320	We can also define a view angle so that it can't see directly behind itself.
36320	41280	Now the paper describes three rules that determine the behaviour of each bird.
41280	47480	Rule number one is to steer away from any nearby birds to hopefully avoid crashing into them.
47480	51640	So with this rule enabled, you can see them fairly successfully dodging and swerving to
51640	53760	avoid one another.
53760	59040	Just rule number two tells them to steer to move in the same direction as nearby birds.
59040	62840	This alignment also helps them to avoid bumping into one another, and of course makes them
62840	65760	behave more like an actual flock of birds.
65760	72120	Finally rule number three, this rule is to steer towards the centre of any nearby birds.
72120	76880	By itself this can cause them to form little swirling patterns, but let me now add the
76880	78400	other rules back in.
78400	82680	Suddenly the birds are trying to not crash into one another, while also simultaneously
82680	88720	trying to align directions, and sort of jostle for position at the centre of their flockmates.
88720	93120	I think it's really cool how these three simple rules, commonly referred to as separation,
93120	99040	alignment and cohesion, combine to give rise to what looks like fairly complex and coordinated
99040	100680	behaviour.
100680	104680	These rules can also be applied to a three-dimensional world.
104680	107800	Currently the birds are just transported to the other side of the cube when they hit a
107800	112360	wall, but I wanted them to instead avoid the walls, as well as any other obstacles that
112360	113960	there might be.
113960	119320	My idea was to simply cast rays out at increasing angles until a clear path is found.
119320	123880	To apply this to three dimensions I needed a good way of generating points on a sphere,
123880	127880	and after surfing the web a little I found an approach where we first generate points
127880	129640	inside a disk.
129640	133800	So I start with a loop for the number of points I want, and inside there I define a distance
133800	136720	which will just go from zero to one over the course of the loop.
136720	142120	I'll then have an angle, and each iteration that'll turn some fraction of a circle.
142120	146280	The distance in the angle can then be used to calculate a point, so I'll have x is equal
146280	150700	to distance times the cosine of the angle, and y is equal to distance times the sine
150700	155620	of the angle, and then I'll plot that point.
155620	160320	So initially all the points are just in a straight line, but as the turn fraction increases,
160320	163880	we can start to see the spiral forming.
163880	168640	We can play around with different values, for example at 0.5 we get two ends, which makes
168680	172440	sense since we're making a half turn each iteration, and these sort of wrap around each
172440	175920	other as the turn fraction increases.
175920	179840	To get a good distribution of points we want to avoid any of them lining up, and so we
179840	183520	should use a nice irrational number as the turn fraction.
183520	187200	What's recommended in particular is the golden ratio.
187200	191400	In case like me you only have vague recollections of what that is, essentially say you have
191400	195720	a line segment called A, and another shorter segment called B.
195720	199840	Given the length of both segments together, divided by the length of the long segment
199840	204720	is equal to the long one divided by the short one, that's the golden ratio, represented
204720	208240	by this very fancy symbol phi.
208240	212920	If we then do some maths, we can find that the positive solution to this equation is
212920	218120	1 plus the square root of 5 over 2, or about 1.618.
218120	222200	So let's plug that in as the turn fraction, and as you can see this gives us a really
222200	225120	nice distribution of points.
225120	228360	I wanted to play around with this some more because I think it looks kind of interesting,
228360	233440	so I added some code for highlighting every nth point by checking if i plus some offset
233440	238640	mod the highlight value is equal to 0.
238640	242440	So here we can see what it looks like with every second point highlighted, every third
242440	244920	point, and so on.
244920	249880	Now I know people have been talking about sunflowers and the Fibonacci sequence for ages, but I've
249880	254200	never paid much attention to what the connection actually is, so in case you're also a little
254200	258320	late to the party, what we can do is list the first few numbers in the Fibonacci sequence
258320	264240	over here, and I'll now highlight every 34th point, or seed, in the case of a sunflower.
264240	268280	This shows a curve coming from the edge of the disk to the centre.
268280	272760	If I add an offset of 13, we hop over to the next curve.
272760	277360	Notice that 13 is also a Fibonacci number, two spots below 34.
277360	284880	So hopping 30 in each time, we can count the number of curves.
284880	287560	As you can see there are 34 of them.
287560	291860	If I now highlight every 55th, which is the next Fibonacci number up, we get a curve going
291860	293080	in the other direction.
293080	299720	I'll make the offset 21, and if we count again, we'll see that there are 55.
299720	304240	So pretty fascinating I think how these Fibonacci numbers are sort of embedded in the pattern,
304240	309560	with 55 arms going this way, and 34 the other way.
309560	314280	It's perhaps not surprising then that 55 divided by 34 is pretty close to the golden
314280	318200	ratio, and that's actually a property of the Fibonacci sequence that you get more and more
318200	322520	accurate approximations of the golden ratio the higher up you go.
322520	325360	Ok, I've got a little sidetracked.
325360	329760	What I need to do now is stop the points from being so bunched up in the centre, so I'll
329760	332700	raise the distance to some power in the code here.
332700	336620	That power is currently 1, but if I lower it to 0.5, which is the same as taking the
336620	340940	square root, you can see how the distribution gets corrected.
340940	345860	Making the power negative looks pretty cool too, but I should probably get back on topic.
345860	349400	So projecting this to a sphere requires a few modifications, and I'll link to the
349400	352460	write up I followed in case you want to read more about it.
352460	355420	I'm apparently not very good at following instructions though, because I first ended
355420	360100	up with this highly unspherical shape, I then swapped some signs and cosines around and
360100	367140	got this, and then finally, after a bit of trial and error, it worked.
367140	370420	It's kind of fun to play around with this tone fraction again now that it's a sphere,
370420	372780	but I should really get back to the voids.
372780	377580	So I can now specify the number of collision rays along with the view angle, and this generates
377580	380140	an array of vectors once at the start.
380140	384500	The voids then have a function that uses this array to perform collision checks, at increasing
384500	389380	angles from their own forward direction, until an unobstructed direction is found.
389380	394580	I tried testing this with a single void, moving a block around to block its path, and it seemed
394580	396180	to work pretty well.
396180	400380	I then let a bunch of them fly around an empty room to see how this new obstacle avoidance
400380	405780	force would interact with their existing separation alignment and cohesion forces, and it seemed
405780	408900	like they were still behaving quite nicely.
408900	412380	Another thing I experimented with was adding a targeting force, so that they try to fly
412380	415620	towards the sphere as I moved it around.
415620	420060	Finally I wanted to test the obstacle avoidance in a more elaborate setup, so I created a
420060	435460	little course with an arch and some hoops, and let the voids fly loose in there.
435460	438860	I was having a big issue with performance though, because each void had to loop over
438860	441780	every other void to find the ones nearby.
441780	446580	So I spent a while creating a spatial partitioning scheme, where each void is placed into a cell
446580	448540	based on its position.
448540	453020	Voids then only need to worry about the other voids in neighbouring cells.
453020	456180	While this did help a lot, I found it was actually faster to just do the crude loop
456180	460580	over all voids, but inside a compute shader so that it could be done in parallel.
460580	464740	Of course, combining the partitioning with the shader would be way way faster, but I'm
464740	468140	going to need to learn some more before I'm ready to tackle that.
468140	472740	Now a little while back I made this underwater scene during my marching cubes adventure,
472740	476060	and many of you in the comments suggested bringing it to life with some fish.
476060	481060	Well, voids is the perfect approach for that, so I downloaded a little fish model, and found
481060	485580	a shader online that wiggles the vertices of the model to make it look like it's swimming.
485580	487500	I'll link to that in the description.
487500	490540	So now I just need to board my submarine, and go swimming with the fishes.
498140	506660	Alright, that's everything for this coding adventure.
506660	507660	Thanks for watching.
507660	507940	Cheers.
