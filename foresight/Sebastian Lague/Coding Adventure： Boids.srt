1
00:00:00,000 --> 00:00:06,480
Hi everyone, in this episode of Coding Adventures, I'd like to play around with some boys.

2
00:00:06,480 --> 00:00:10,480
This rather strange term is what Craig Reynolds uses to describe bird-like objects in his

3
00:00:10,480 --> 00:00:13,340
paper on flocks, herds and schools.

4
00:00:13,340 --> 00:00:17,080
So once I'd read through that, I created some little flying triangles to represent these

5
00:00:17,080 --> 00:00:18,080
creatures.

6
00:00:18,080 --> 00:00:22,640
To do anything interesting though, they are going to need an awareness of their surroundings,

7
00:00:22,640 --> 00:00:26,480
so I'll highlight one of them to be our subject of study.

8
00:00:26,480 --> 00:00:30,320
This bird should be able to sense the others inside the circle, which is its radius of

9
00:00:30,320 --> 00:00:31,520
vision.

10
00:00:31,520 --> 00:00:36,320
We can also define a view angle so that it can't see directly behind itself.

11
00:00:36,320 --> 00:00:41,280
Now the paper describes three rules that determine the behaviour of each bird.

12
00:00:41,280 --> 00:00:47,480
Rule number one is to steer away from any nearby birds to hopefully avoid crashing into them.

13
00:00:47,480 --> 00:00:51,640
So with this rule enabled, you can see them fairly successfully dodging and swerving to

14
00:00:51,640 --> 00:00:53,760
avoid one another.

15
00:00:53,760 --> 00:00:59,040
Just rule number two tells them to steer to move in the same direction as nearby birds.

16
00:00:59,040 --> 00:01:02,840
This alignment also helps them to avoid bumping into one another, and of course makes them

17
00:01:02,840 --> 00:01:05,760
behave more like an actual flock of birds.

18
00:01:05,760 --> 00:01:12,120
Finally rule number three, this rule is to steer towards the centre of any nearby birds.

19
00:01:12,120 --> 00:01:16,880
By itself this can cause them to form little swirling patterns, but let me now add the

20
00:01:16,880 --> 00:01:18,400
other rules back in.

21
00:01:18,400 --> 00:01:22,680
Suddenly the birds are trying to not crash into one another, while also simultaneously

22
00:01:22,680 --> 00:01:28,720
trying to align directions, and sort of jostle for position at the centre of their flockmates.

23
00:01:28,720 --> 00:01:33,120
I think it's really cool how these three simple rules, commonly referred to as separation,

24
00:01:33,120 --> 00:01:39,040
alignment and cohesion, combine to give rise to what looks like fairly complex and coordinated

25
00:01:39,040 --> 00:01:40,680
behaviour.

26
00:01:40,680 --> 00:01:44,680
These rules can also be applied to a three-dimensional world.

27
00:01:44,680 --> 00:01:47,800
Currently the birds are just transported to the other side of the cube when they hit a

28
00:01:47,800 --> 00:01:52,360
wall, but I wanted them to instead avoid the walls, as well as any other obstacles that

29
00:01:52,360 --> 00:01:53,960
there might be.

30
00:01:53,960 --> 00:01:59,320
My idea was to simply cast rays out at increasing angles until a clear path is found.

31
00:01:59,320 --> 00:02:03,880
To apply this to three dimensions I needed a good way of generating points on a sphere,

32
00:02:03,880 --> 00:02:07,880
and after surfing the web a little I found an approach where we first generate points

33
00:02:07,880 --> 00:02:09,640
inside a disk.

34
00:02:09,640 --> 00:02:13,800
So I start with a loop for the number of points I want, and inside there I define a distance

35
00:02:13,800 --> 00:02:16,720
which will just go from zero to one over the course of the loop.

36
00:02:16,720 --> 00:02:22,120
I'll then have an angle, and each iteration that'll turn some fraction of a circle.

37
00:02:22,120 --> 00:02:26,280
The distance in the angle can then be used to calculate a point, so I'll have x is equal

38
00:02:26,280 --> 00:02:30,700
to distance times the cosine of the angle, and y is equal to distance times the sine

39
00:02:30,700 --> 00:02:35,620
of the angle, and then I'll plot that point.

40
00:02:35,620 --> 00:02:40,320
So initially all the points are just in a straight line, but as the turn fraction increases,

41
00:02:40,320 --> 00:02:43,880
we can start to see the spiral forming.

42
00:02:43,880 --> 00:02:48,640
We can play around with different values, for example at 0.5 we get two ends, which makes

43
00:02:48,680 --> 00:02:52,440
sense since we're making a half turn each iteration, and these sort of wrap around each

44
00:02:52,440 --> 00:02:55,920
other as the turn fraction increases.

45
00:02:55,920 --> 00:02:59,840
To get a good distribution of points we want to avoid any of them lining up, and so we

46
00:02:59,840 --> 00:03:03,520
should use a nice irrational number as the turn fraction.

47
00:03:03,520 --> 00:03:07,200
What's recommended in particular is the golden ratio.

48
00:03:07,200 --> 00:03:11,400
In case like me you only have vague recollections of what that is, essentially say you have

49
00:03:11,400 --> 00:03:15,720
a line segment called A, and another shorter segment called B.

50
00:03:15,720 --> 00:03:19,840
Given the length of both segments together, divided by the length of the long segment

51
00:03:19,840 --> 00:03:24,720
is equal to the long one divided by the short one, that's the golden ratio, represented

52
00:03:24,720 --> 00:03:28,240
by this very fancy symbol phi.

53
00:03:28,240 --> 00:03:32,920
If we then do some maths, we can find that the positive solution to this equation is

54
00:03:32,920 --> 00:03:38,120
1 plus the square root of 5 over 2, or about 1.618.

55
00:03:38,120 --> 00:03:42,200
So let's plug that in as the turn fraction, and as you can see this gives us a really

56
00:03:42,200 --> 00:03:45,120
nice distribution of points.

57
00:03:45,120 --> 00:03:48,360
I wanted to play around with this some more because I think it looks kind of interesting,

58
00:03:48,360 --> 00:03:53,440
so I added some code for highlighting every nth point by checking if i plus some offset

59
00:03:53,440 --> 00:03:58,640
mod the highlight value is equal to 0.

60
00:03:58,640 --> 00:04:02,440
So here we can see what it looks like with every second point highlighted, every third

61
00:04:02,440 --> 00:04:04,920
point, and so on.

62
00:04:04,920 --> 00:04:09,880
Now I know people have been talking about sunflowers and the Fibonacci sequence for ages, but I've

63
00:04:09,880 --> 00:04:14,200
never paid much attention to what the connection actually is, so in case you're also a little

64
00:04:14,200 --> 00:04:18,320
late to the party, what we can do is list the first few numbers in the Fibonacci sequence

65
00:04:18,320 --> 00:04:24,240
over here, and I'll now highlight every 34th point, or seed, in the case of a sunflower.

66
00:04:24,240 --> 00:04:28,280
This shows a curve coming from the edge of the disk to the centre.

67
00:04:28,280 --> 00:04:32,760
If I add an offset of 13, we hop over to the next curve.

68
00:04:32,760 --> 00:04:37,360
Notice that 13 is also a Fibonacci number, two spots below 34.

69
00:04:37,360 --> 00:04:44,880
So hopping 30 in each time, we can count the number of curves.

70
00:04:44,880 --> 00:04:47,560
As you can see there are 34 of them.

71
00:04:47,560 --> 00:04:51,860
If I now highlight every 55th, which is the next Fibonacci number up, we get a curve going

72
00:04:51,860 --> 00:04:53,080
in the other direction.

73
00:04:53,080 --> 00:04:59,720
I'll make the offset 21, and if we count again, we'll see that there are 55.

74
00:04:59,720 --> 00:05:04,240
So pretty fascinating I think how these Fibonacci numbers are sort of embedded in the pattern,

75
00:05:04,240 --> 00:05:09,560
with 55 arms going this way, and 34 the other way.

76
00:05:09,560 --> 00:05:14,280
It's perhaps not surprising then that 55 divided by 34 is pretty close to the golden

77
00:05:14,280 --> 00:05:18,200
ratio, and that's actually a property of the Fibonacci sequence that you get more and more

78
00:05:18,200 --> 00:05:22,520
accurate approximations of the golden ratio the higher up you go.

79
00:05:22,520 --> 00:05:25,360
Ok, I've got a little sidetracked.

80
00:05:25,360 --> 00:05:29,760
What I need to do now is stop the points from being so bunched up in the centre, so I'll

81
00:05:29,760 --> 00:05:32,700
raise the distance to some power in the code here.

82
00:05:32,700 --> 00:05:36,620
That power is currently 1, but if I lower it to 0.5, which is the same as taking the

83
00:05:36,620 --> 00:05:40,940
square root, you can see how the distribution gets corrected.

84
00:05:40,940 --> 00:05:45,860
Making the power negative looks pretty cool too, but I should probably get back on topic.

85
00:05:45,860 --> 00:05:49,400
So projecting this to a sphere requires a few modifications, and I'll link to the

86
00:05:49,400 --> 00:05:52,460
write up I followed in case you want to read more about it.

87
00:05:52,460 --> 00:05:55,420
I'm apparently not very good at following instructions though, because I first ended

88
00:05:55,420 --> 00:06:00,100
up with this highly unspherical shape, I then swapped some signs and cosines around and

89
00:06:00,100 --> 00:06:07,140
got this, and then finally, after a bit of trial and error, it worked.

90
00:06:07,140 --> 00:06:10,420
It's kind of fun to play around with this tone fraction again now that it's a sphere,

91
00:06:10,420 --> 00:06:12,780
but I should really get back to the voids.

92
00:06:12,780 --> 00:06:17,580
So I can now specify the number of collision rays along with the view angle, and this generates

93
00:06:17,580 --> 00:06:20,140
an array of vectors once at the start.

94
00:06:20,140 --> 00:06:24,500
The voids then have a function that uses this array to perform collision checks, at increasing

95
00:06:24,500 --> 00:06:29,380
angles from their own forward direction, until an unobstructed direction is found.

96
00:06:29,380 --> 00:06:34,580
I tried testing this with a single void, moving a block around to block its path, and it seemed

97
00:06:34,580 --> 00:06:36,180
to work pretty well.

98
00:06:36,180 --> 00:06:40,380
I then let a bunch of them fly around an empty room to see how this new obstacle avoidance

99
00:06:40,380 --> 00:06:45,780
force would interact with their existing separation alignment and cohesion forces, and it seemed

100
00:06:45,780 --> 00:06:48,900
like they were still behaving quite nicely.

101
00:06:48,900 --> 00:06:52,380
Another thing I experimented with was adding a targeting force, so that they try to fly

102
00:06:52,380 --> 00:06:55,620
towards the sphere as I moved it around.

103
00:06:55,620 --> 00:07:00,060
Finally I wanted to test the obstacle avoidance in a more elaborate setup, so I created a

104
00:07:00,060 --> 00:07:15,460
little course with an arch and some hoops, and let the voids fly loose in there.

105
00:07:15,460 --> 00:07:18,860
I was having a big issue with performance though, because each void had to loop over

106
00:07:18,860 --> 00:07:21,780
every other void to find the ones nearby.

107
00:07:21,780 --> 00:07:26,580
So I spent a while creating a spatial partitioning scheme, where each void is placed into a cell

108
00:07:26,580 --> 00:07:28,540
based on its position.

109
00:07:28,540 --> 00:07:33,020
Voids then only need to worry about the other voids in neighbouring cells.

110
00:07:33,020 --> 00:07:36,180
While this did help a lot, I found it was actually faster to just do the crude loop

111
00:07:36,180 --> 00:07:40,580
over all voids, but inside a compute shader so that it could be done in parallel.

112
00:07:40,580 --> 00:07:44,740
Of course, combining the partitioning with the shader would be way way faster, but I'm

113
00:07:44,740 --> 00:07:48,140
going to need to learn some more before I'm ready to tackle that.

114
00:07:48,140 --> 00:07:52,740
Now a little while back I made this underwater scene during my marching cubes adventure,

115
00:07:52,740 --> 00:07:56,060
and many of you in the comments suggested bringing it to life with some fish.

116
00:07:56,060 --> 00:08:01,060
Well, voids is the perfect approach for that, so I downloaded a little fish model, and found

117
00:08:01,060 --> 00:08:05,580
a shader online that wiggles the vertices of the model to make it look like it's swimming.

118
00:08:05,580 --> 00:08:07,500
I'll link to that in the description.

119
00:08:07,500 --> 00:08:10,540
So now I just need to board my submarine, and go swimming with the fishes.

120
00:08:18,140 --> 00:08:26,660
Alright, that's everything for this coding adventure.

121
00:08:26,660 --> 00:08:27,660
Thanks for watching.

122
00:08:27,660 --> 00:08:27,940
Cheers.

