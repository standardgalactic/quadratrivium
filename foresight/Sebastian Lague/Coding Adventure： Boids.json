{"text": " Hi everyone, in this episode of Coding Adventures, I'd like to play around with some boys. This rather strange term is what Craig Reynolds uses to describe bird-like objects in his paper on flocks, herds and schools. So once I'd read through that, I created some little flying triangles to represent these creatures. To do anything interesting though, they are going to need an awareness of their surroundings, so I'll highlight one of them to be our subject of study. This bird should be able to sense the others inside the circle, which is its radius of vision. We can also define a view angle so that it can't see directly behind itself. Now the paper describes three rules that determine the behaviour of each bird. Rule number one is to steer away from any nearby birds to hopefully avoid crashing into them. So with this rule enabled, you can see them fairly successfully dodging and swerving to avoid one another. Just rule number two tells them to steer to move in the same direction as nearby birds. This alignment also helps them to avoid bumping into one another, and of course makes them behave more like an actual flock of birds. Finally rule number three, this rule is to steer towards the centre of any nearby birds. By itself this can cause them to form little swirling patterns, but let me now add the other rules back in. Suddenly the birds are trying to not crash into one another, while also simultaneously trying to align directions, and sort of jostle for position at the centre of their flockmates. I think it's really cool how these three simple rules, commonly referred to as separation, alignment and cohesion, combine to give rise to what looks like fairly complex and coordinated behaviour. These rules can also be applied to a three-dimensional world. Currently the birds are just transported to the other side of the cube when they hit a wall, but I wanted them to instead avoid the walls, as well as any other obstacles that there might be. My idea was to simply cast rays out at increasing angles until a clear path is found. To apply this to three dimensions I needed a good way of generating points on a sphere, and after surfing the web a little I found an approach where we first generate points inside a disk. So I start with a loop for the number of points I want, and inside there I define a distance which will just go from zero to one over the course of the loop. I'll then have an angle, and each iteration that'll turn some fraction of a circle. The distance in the angle can then be used to calculate a point, so I'll have x is equal to distance times the cosine of the angle, and y is equal to distance times the sine of the angle, and then I'll plot that point. So initially all the points are just in a straight line, but as the turn fraction increases, we can start to see the spiral forming. We can play around with different values, for example at 0.5 we get two ends, which makes sense since we're making a half turn each iteration, and these sort of wrap around each other as the turn fraction increases. To get a good distribution of points we want to avoid any of them lining up, and so we should use a nice irrational number as the turn fraction. What's recommended in particular is the golden ratio. In case like me you only have vague recollections of what that is, essentially say you have a line segment called A, and another shorter segment called B. Given the length of both segments together, divided by the length of the long segment is equal to the long one divided by the short one, that's the golden ratio, represented by this very fancy symbol phi. If we then do some maths, we can find that the positive solution to this equation is 1 plus the square root of 5 over 2, or about 1.618. So let's plug that in as the turn fraction, and as you can see this gives us a really nice distribution of points. I wanted to play around with this some more because I think it looks kind of interesting, so I added some code for highlighting every nth point by checking if i plus some offset mod the highlight value is equal to 0. So here we can see what it looks like with every second point highlighted, every third point, and so on. Now I know people have been talking about sunflowers and the Fibonacci sequence for ages, but I've never paid much attention to what the connection actually is, so in case you're also a little late to the party, what we can do is list the first few numbers in the Fibonacci sequence over here, and I'll now highlight every 34th point, or seed, in the case of a sunflower. This shows a curve coming from the edge of the disk to the centre. If I add an offset of 13, we hop over to the next curve. Notice that 13 is also a Fibonacci number, two spots below 34. So hopping 30 in each time, we can count the number of curves. As you can see there are 34 of them. If I now highlight every 55th, which is the next Fibonacci number up, we get a curve going in the other direction. I'll make the offset 21, and if we count again, we'll see that there are 55. So pretty fascinating I think how these Fibonacci numbers are sort of embedded in the pattern, with 55 arms going this way, and 34 the other way. It's perhaps not surprising then that 55 divided by 34 is pretty close to the golden ratio, and that's actually a property of the Fibonacci sequence that you get more and more accurate approximations of the golden ratio the higher up you go. Ok, I've got a little sidetracked. What I need to do now is stop the points from being so bunched up in the centre, so I'll raise the distance to some power in the code here. That power is currently 1, but if I lower it to 0.5, which is the same as taking the square root, you can see how the distribution gets corrected. Making the power negative looks pretty cool too, but I should probably get back on topic. So projecting this to a sphere requires a few modifications, and I'll link to the write up I followed in case you want to read more about it. I'm apparently not very good at following instructions though, because I first ended up with this highly unspherical shape, I then swapped some signs and cosines around and got this, and then finally, after a bit of trial and error, it worked. It's kind of fun to play around with this tone fraction again now that it's a sphere, but I should really get back to the voids. So I can now specify the number of collision rays along with the view angle, and this generates an array of vectors once at the start. The voids then have a function that uses this array to perform collision checks, at increasing angles from their own forward direction, until an unobstructed direction is found. I tried testing this with a single void, moving a block around to block its path, and it seemed to work pretty well. I then let a bunch of them fly around an empty room to see how this new obstacle avoidance force would interact with their existing separation alignment and cohesion forces, and it seemed like they were still behaving quite nicely. Another thing I experimented with was adding a targeting force, so that they try to fly towards the sphere as I moved it around. Finally I wanted to test the obstacle avoidance in a more elaborate setup, so I created a little course with an arch and some hoops, and let the voids fly loose in there. I was having a big issue with performance though, because each void had to loop over every other void to find the ones nearby. So I spent a while creating a spatial partitioning scheme, where each void is placed into a cell based on its position. Voids then only need to worry about the other voids in neighbouring cells. While this did help a lot, I found it was actually faster to just do the crude loop over all voids, but inside a compute shader so that it could be done in parallel. Of course, combining the partitioning with the shader would be way way faster, but I'm going to need to learn some more before I'm ready to tackle that. Now a little while back I made this underwater scene during my marching cubes adventure, and many of you in the comments suggested bringing it to life with some fish. Well, voids is the perfect approach for that, so I downloaded a little fish model, and found a shader online that wiggles the vertices of the model to make it look like it's swimming. I'll link to that in the description. So now I just need to board my submarine, and go swimming with the fishes. Alright, that's everything for this coding adventure. Thanks for watching. Cheers.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 6.48, "text": " Hi everyone, in this episode of Coding Adventures, I'd like to play around with some boys.", "tokens": [50364, 2421, 1518, 11, 294, 341, 3500, 295, 383, 8616, 48818, 11, 286, 1116, 411, 281, 862, 926, 365, 512, 6347, 13, 50688], "temperature": 0.0, "avg_logprob": -0.13667825230380945, "compression_ratio": 1.625, "no_speech_prob": 0.23240964114665985}, {"id": 1, "seek": 0, "start": 6.48, "end": 10.48, "text": " This rather strange term is what Craig Reynolds uses to describe bird-like objects in his", "tokens": [50688, 639, 2831, 5861, 1433, 307, 437, 19732, 29516, 4960, 281, 6786, 5255, 12, 4092, 6565, 294, 702, 50888], "temperature": 0.0, "avg_logprob": -0.13667825230380945, "compression_ratio": 1.625, "no_speech_prob": 0.23240964114665985}, {"id": 2, "seek": 0, "start": 10.48, "end": 13.34, "text": " paper on flocks, herds and schools.", "tokens": [50888, 3035, 322, 2591, 2761, 11, 720, 16063, 293, 4656, 13, 51031], "temperature": 0.0, "avg_logprob": -0.13667825230380945, "compression_ratio": 1.625, "no_speech_prob": 0.23240964114665985}, {"id": 3, "seek": 0, "start": 13.34, "end": 17.080000000000002, "text": " So once I'd read through that, I created some little flying triangles to represent these", "tokens": [51031, 407, 1564, 286, 1116, 1401, 807, 300, 11, 286, 2942, 512, 707, 7137, 29896, 281, 2906, 613, 51218], "temperature": 0.0, "avg_logprob": -0.13667825230380945, "compression_ratio": 1.625, "no_speech_prob": 0.23240964114665985}, {"id": 4, "seek": 0, "start": 17.080000000000002, "end": 18.080000000000002, "text": " creatures.", "tokens": [51218, 12281, 13, 51268], "temperature": 0.0, "avg_logprob": -0.13667825230380945, "compression_ratio": 1.625, "no_speech_prob": 0.23240964114665985}, {"id": 5, "seek": 0, "start": 18.080000000000002, "end": 22.64, "text": " To do anything interesting though, they are going to need an awareness of their surroundings,", "tokens": [51268, 1407, 360, 1340, 1880, 1673, 11, 436, 366, 516, 281, 643, 364, 8888, 295, 641, 25314, 11, 51496], "temperature": 0.0, "avg_logprob": -0.13667825230380945, "compression_ratio": 1.625, "no_speech_prob": 0.23240964114665985}, {"id": 6, "seek": 0, "start": 22.64, "end": 26.48, "text": " so I'll highlight one of them to be our subject of study.", "tokens": [51496, 370, 286, 603, 5078, 472, 295, 552, 281, 312, 527, 3983, 295, 2979, 13, 51688], "temperature": 0.0, "avg_logprob": -0.13667825230380945, "compression_ratio": 1.625, "no_speech_prob": 0.23240964114665985}, {"id": 7, "seek": 2648, "start": 26.48, "end": 30.32, "text": " This bird should be able to sense the others inside the circle, which is its radius of", "tokens": [50364, 639, 5255, 820, 312, 1075, 281, 2020, 264, 2357, 1854, 264, 6329, 11, 597, 307, 1080, 15845, 295, 50556], "temperature": 0.0, "avg_logprob": -0.15726502736409506, "compression_ratio": 1.628158844765343, "no_speech_prob": 0.056137654930353165}, {"id": 8, "seek": 2648, "start": 30.32, "end": 31.52, "text": " vision.", "tokens": [50556, 5201, 13, 50616], "temperature": 0.0, "avg_logprob": -0.15726502736409506, "compression_ratio": 1.628158844765343, "no_speech_prob": 0.056137654930353165}, {"id": 9, "seek": 2648, "start": 31.52, "end": 36.32, "text": " We can also define a view angle so that it can't see directly behind itself.", "tokens": [50616, 492, 393, 611, 6964, 257, 1910, 5802, 370, 300, 309, 393, 380, 536, 3838, 2261, 2564, 13, 50856], "temperature": 0.0, "avg_logprob": -0.15726502736409506, "compression_ratio": 1.628158844765343, "no_speech_prob": 0.056137654930353165}, {"id": 10, "seek": 2648, "start": 36.32, "end": 41.28, "text": " Now the paper describes three rules that determine the behaviour of each bird.", "tokens": [50856, 823, 264, 3035, 15626, 1045, 4474, 300, 6997, 264, 17229, 295, 1184, 5255, 13, 51104], "temperature": 0.0, "avg_logprob": -0.15726502736409506, "compression_ratio": 1.628158844765343, "no_speech_prob": 0.056137654930353165}, {"id": 11, "seek": 2648, "start": 41.28, "end": 47.480000000000004, "text": " Rule number one is to steer away from any nearby birds to hopefully avoid crashing into them.", "tokens": [51104, 27533, 1230, 472, 307, 281, 30814, 1314, 490, 604, 11184, 9009, 281, 4696, 5042, 26900, 666, 552, 13, 51414], "temperature": 0.0, "avg_logprob": -0.15726502736409506, "compression_ratio": 1.628158844765343, "no_speech_prob": 0.056137654930353165}, {"id": 12, "seek": 2648, "start": 47.480000000000004, "end": 51.64, "text": " So with this rule enabled, you can see them fairly successfully dodging and swerving to", "tokens": [51414, 407, 365, 341, 4978, 15172, 11, 291, 393, 536, 552, 6457, 10727, 13886, 3249, 293, 262, 1554, 798, 281, 51622], "temperature": 0.0, "avg_logprob": -0.15726502736409506, "compression_ratio": 1.628158844765343, "no_speech_prob": 0.056137654930353165}, {"id": 13, "seek": 2648, "start": 51.64, "end": 53.760000000000005, "text": " avoid one another.", "tokens": [51622, 5042, 472, 1071, 13, 51728], "temperature": 0.0, "avg_logprob": -0.15726502736409506, "compression_ratio": 1.628158844765343, "no_speech_prob": 0.056137654930353165}, {"id": 14, "seek": 5376, "start": 53.76, "end": 59.04, "text": " Just rule number two tells them to steer to move in the same direction as nearby birds.", "tokens": [50364, 1449, 4978, 1230, 732, 5112, 552, 281, 30814, 281, 1286, 294, 264, 912, 3513, 382, 11184, 9009, 13, 50628], "temperature": 0.0, "avg_logprob": -0.12158873121617204, "compression_ratio": 1.7657342657342658, "no_speech_prob": 0.0006065622437745333}, {"id": 15, "seek": 5376, "start": 59.04, "end": 62.839999999999996, "text": " This alignment also helps them to avoid bumping into one another, and of course makes them", "tokens": [50628, 639, 18515, 611, 3665, 552, 281, 5042, 9961, 278, 666, 472, 1071, 11, 293, 295, 1164, 1669, 552, 50818], "temperature": 0.0, "avg_logprob": -0.12158873121617204, "compression_ratio": 1.7657342657342658, "no_speech_prob": 0.0006065622437745333}, {"id": 16, "seek": 5376, "start": 62.839999999999996, "end": 65.75999999999999, "text": " behave more like an actual flock of birds.", "tokens": [50818, 15158, 544, 411, 364, 3539, 34819, 295, 9009, 13, 50964], "temperature": 0.0, "avg_logprob": -0.12158873121617204, "compression_ratio": 1.7657342657342658, "no_speech_prob": 0.0006065622437745333}, {"id": 17, "seek": 5376, "start": 65.75999999999999, "end": 72.12, "text": " Finally rule number three, this rule is to steer towards the centre of any nearby birds.", "tokens": [50964, 6288, 4978, 1230, 1045, 11, 341, 4978, 307, 281, 30814, 3030, 264, 10093, 295, 604, 11184, 9009, 13, 51282], "temperature": 0.0, "avg_logprob": -0.12158873121617204, "compression_ratio": 1.7657342657342658, "no_speech_prob": 0.0006065622437745333}, {"id": 18, "seek": 5376, "start": 72.12, "end": 76.88, "text": " By itself this can cause them to form little swirling patterns, but let me now add the", "tokens": [51282, 3146, 2564, 341, 393, 3082, 552, 281, 1254, 707, 30310, 278, 8294, 11, 457, 718, 385, 586, 909, 264, 51520], "temperature": 0.0, "avg_logprob": -0.12158873121617204, "compression_ratio": 1.7657342657342658, "no_speech_prob": 0.0006065622437745333}, {"id": 19, "seek": 5376, "start": 76.88, "end": 78.4, "text": " other rules back in.", "tokens": [51520, 661, 4474, 646, 294, 13, 51596], "temperature": 0.0, "avg_logprob": -0.12158873121617204, "compression_ratio": 1.7657342657342658, "no_speech_prob": 0.0006065622437745333}, {"id": 20, "seek": 5376, "start": 78.4, "end": 82.68, "text": " Suddenly the birds are trying to not crash into one another, while also simultaneously", "tokens": [51596, 21194, 264, 9009, 366, 1382, 281, 406, 8252, 666, 472, 1071, 11, 1339, 611, 16561, 51810], "temperature": 0.0, "avg_logprob": -0.12158873121617204, "compression_ratio": 1.7657342657342658, "no_speech_prob": 0.0006065622437745333}, {"id": 21, "seek": 8268, "start": 82.68, "end": 88.72000000000001, "text": " trying to align directions, and sort of jostle for position at the centre of their flockmates.", "tokens": [50364, 1382, 281, 7975, 11095, 11, 293, 1333, 295, 361, 555, 306, 337, 2535, 412, 264, 10093, 295, 641, 34819, 10977, 13, 50666], "temperature": 0.0, "avg_logprob": -0.18760032963946582, "compression_ratio": 1.697749196141479, "no_speech_prob": 0.0017255290877074003}, {"id": 22, "seek": 8268, "start": 88.72000000000001, "end": 93.12, "text": " I think it's really cool how these three simple rules, commonly referred to as separation,", "tokens": [50666, 286, 519, 309, 311, 534, 1627, 577, 613, 1045, 2199, 4474, 11, 12719, 10839, 281, 382, 14634, 11, 50886], "temperature": 0.0, "avg_logprob": -0.18760032963946582, "compression_ratio": 1.697749196141479, "no_speech_prob": 0.0017255290877074003}, {"id": 23, "seek": 8268, "start": 93.12, "end": 99.04, "text": " alignment and cohesion, combine to give rise to what looks like fairly complex and coordinated", "tokens": [50886, 18515, 293, 598, 38571, 11, 10432, 281, 976, 6272, 281, 437, 1542, 411, 6457, 3997, 293, 29591, 51182], "temperature": 0.0, "avg_logprob": -0.18760032963946582, "compression_ratio": 1.697749196141479, "no_speech_prob": 0.0017255290877074003}, {"id": 24, "seek": 8268, "start": 99.04, "end": 100.68, "text": " behaviour.", "tokens": [51182, 17229, 13, 51264], "temperature": 0.0, "avg_logprob": -0.18760032963946582, "compression_ratio": 1.697749196141479, "no_speech_prob": 0.0017255290877074003}, {"id": 25, "seek": 8268, "start": 100.68, "end": 104.68, "text": " These rules can also be applied to a three-dimensional world.", "tokens": [51264, 1981, 4474, 393, 611, 312, 6456, 281, 257, 1045, 12, 18759, 1002, 13, 51464], "temperature": 0.0, "avg_logprob": -0.18760032963946582, "compression_ratio": 1.697749196141479, "no_speech_prob": 0.0017255290877074003}, {"id": 26, "seek": 8268, "start": 104.68, "end": 107.80000000000001, "text": " Currently the birds are just transported to the other side of the cube when they hit a", "tokens": [51464, 19964, 264, 9009, 366, 445, 29373, 281, 264, 661, 1252, 295, 264, 13728, 562, 436, 2045, 257, 51620], "temperature": 0.0, "avg_logprob": -0.18760032963946582, "compression_ratio": 1.697749196141479, "no_speech_prob": 0.0017255290877074003}, {"id": 27, "seek": 8268, "start": 107.80000000000001, "end": 112.36000000000001, "text": " wall, but I wanted them to instead avoid the walls, as well as any other obstacles that", "tokens": [51620, 2929, 11, 457, 286, 1415, 552, 281, 2602, 5042, 264, 7920, 11, 382, 731, 382, 604, 661, 17735, 300, 51848], "temperature": 0.0, "avg_logprob": -0.18760032963946582, "compression_ratio": 1.697749196141479, "no_speech_prob": 0.0017255290877074003}, {"id": 28, "seek": 11236, "start": 112.36, "end": 113.96, "text": " there might be.", "tokens": [50364, 456, 1062, 312, 13, 50444], "temperature": 0.0, "avg_logprob": -0.14021829017122886, "compression_ratio": 1.705128205128205, "no_speech_prob": 0.023132700473070145}, {"id": 29, "seek": 11236, "start": 113.96, "end": 119.32, "text": " My idea was to simply cast rays out at increasing angles until a clear path is found.", "tokens": [50444, 1222, 1558, 390, 281, 2935, 4193, 24417, 484, 412, 5662, 14708, 1826, 257, 1850, 3100, 307, 1352, 13, 50712], "temperature": 0.0, "avg_logprob": -0.14021829017122886, "compression_ratio": 1.705128205128205, "no_speech_prob": 0.023132700473070145}, {"id": 30, "seek": 11236, "start": 119.32, "end": 123.88, "text": " To apply this to three dimensions I needed a good way of generating points on a sphere,", "tokens": [50712, 1407, 3079, 341, 281, 1045, 12819, 286, 2978, 257, 665, 636, 295, 17746, 2793, 322, 257, 16687, 11, 50940], "temperature": 0.0, "avg_logprob": -0.14021829017122886, "compression_ratio": 1.705128205128205, "no_speech_prob": 0.023132700473070145}, {"id": 31, "seek": 11236, "start": 123.88, "end": 127.88, "text": " and after surfing the web a little I found an approach where we first generate points", "tokens": [50940, 293, 934, 34181, 264, 3670, 257, 707, 286, 1352, 364, 3109, 689, 321, 700, 8460, 2793, 51140], "temperature": 0.0, "avg_logprob": -0.14021829017122886, "compression_ratio": 1.705128205128205, "no_speech_prob": 0.023132700473070145}, {"id": 32, "seek": 11236, "start": 127.88, "end": 129.64, "text": " inside a disk.", "tokens": [51140, 1854, 257, 12355, 13, 51228], "temperature": 0.0, "avg_logprob": -0.14021829017122886, "compression_ratio": 1.705128205128205, "no_speech_prob": 0.023132700473070145}, {"id": 33, "seek": 11236, "start": 129.64, "end": 133.8, "text": " So I start with a loop for the number of points I want, and inside there I define a distance", "tokens": [51228, 407, 286, 722, 365, 257, 6367, 337, 264, 1230, 295, 2793, 286, 528, 11, 293, 1854, 456, 286, 6964, 257, 4560, 51436], "temperature": 0.0, "avg_logprob": -0.14021829017122886, "compression_ratio": 1.705128205128205, "no_speech_prob": 0.023132700473070145}, {"id": 34, "seek": 11236, "start": 133.8, "end": 136.72, "text": " which will just go from zero to one over the course of the loop.", "tokens": [51436, 597, 486, 445, 352, 490, 4018, 281, 472, 670, 264, 1164, 295, 264, 6367, 13, 51582], "temperature": 0.0, "avg_logprob": -0.14021829017122886, "compression_ratio": 1.705128205128205, "no_speech_prob": 0.023132700473070145}, {"id": 35, "seek": 11236, "start": 136.72, "end": 142.12, "text": " I'll then have an angle, and each iteration that'll turn some fraction of a circle.", "tokens": [51582, 286, 603, 550, 362, 364, 5802, 11, 293, 1184, 24784, 300, 603, 1261, 512, 14135, 295, 257, 6329, 13, 51852], "temperature": 0.0, "avg_logprob": -0.14021829017122886, "compression_ratio": 1.705128205128205, "no_speech_prob": 0.023132700473070145}, {"id": 36, "seek": 14212, "start": 142.12, "end": 146.28, "text": " The distance in the angle can then be used to calculate a point, so I'll have x is equal", "tokens": [50364, 440, 4560, 294, 264, 5802, 393, 550, 312, 1143, 281, 8873, 257, 935, 11, 370, 286, 603, 362, 2031, 307, 2681, 50572], "temperature": 0.0, "avg_logprob": -0.10111599637750994, "compression_ratio": 1.785425101214575, "no_speech_prob": 0.00043653970351442695}, {"id": 37, "seek": 14212, "start": 146.28, "end": 150.70000000000002, "text": " to distance times the cosine of the angle, and y is equal to distance times the sine", "tokens": [50572, 281, 4560, 1413, 264, 23565, 295, 264, 5802, 11, 293, 288, 307, 2681, 281, 4560, 1413, 264, 18609, 50793], "temperature": 0.0, "avg_logprob": -0.10111599637750994, "compression_ratio": 1.785425101214575, "no_speech_prob": 0.00043653970351442695}, {"id": 38, "seek": 14212, "start": 150.70000000000002, "end": 155.62, "text": " of the angle, and then I'll plot that point.", "tokens": [50793, 295, 264, 5802, 11, 293, 550, 286, 603, 7542, 300, 935, 13, 51039], "temperature": 0.0, "avg_logprob": -0.10111599637750994, "compression_ratio": 1.785425101214575, "no_speech_prob": 0.00043653970351442695}, {"id": 39, "seek": 14212, "start": 155.62, "end": 160.32, "text": " So initially all the points are just in a straight line, but as the turn fraction increases,", "tokens": [51039, 407, 9105, 439, 264, 2793, 366, 445, 294, 257, 2997, 1622, 11, 457, 382, 264, 1261, 14135, 8637, 11, 51274], "temperature": 0.0, "avg_logprob": -0.10111599637750994, "compression_ratio": 1.785425101214575, "no_speech_prob": 0.00043653970351442695}, {"id": 40, "seek": 14212, "start": 160.32, "end": 163.88, "text": " we can start to see the spiral forming.", "tokens": [51274, 321, 393, 722, 281, 536, 264, 25165, 15745, 13, 51452], "temperature": 0.0, "avg_logprob": -0.10111599637750994, "compression_ratio": 1.785425101214575, "no_speech_prob": 0.00043653970351442695}, {"id": 41, "seek": 14212, "start": 163.88, "end": 168.64000000000001, "text": " We can play around with different values, for example at 0.5 we get two ends, which makes", "tokens": [51452, 492, 393, 862, 926, 365, 819, 4190, 11, 337, 1365, 412, 1958, 13, 20, 321, 483, 732, 5314, 11, 597, 1669, 51690], "temperature": 0.0, "avg_logprob": -0.10111599637750994, "compression_ratio": 1.785425101214575, "no_speech_prob": 0.00043653970351442695}, {"id": 42, "seek": 16864, "start": 168.67999999999998, "end": 172.44, "text": " sense since we're making a half turn each iteration, and these sort of wrap around each", "tokens": [50366, 2020, 1670, 321, 434, 1455, 257, 1922, 1261, 1184, 24784, 11, 293, 613, 1333, 295, 7019, 926, 1184, 50554], "temperature": 0.0, "avg_logprob": -0.11580896792204484, "compression_ratio": 1.7545787545787546, "no_speech_prob": 0.050835780799388885}, {"id": 43, "seek": 16864, "start": 172.44, "end": 175.92, "text": " other as the turn fraction increases.", "tokens": [50554, 661, 382, 264, 1261, 14135, 8637, 13, 50728], "temperature": 0.0, "avg_logprob": -0.11580896792204484, "compression_ratio": 1.7545787545787546, "no_speech_prob": 0.050835780799388885}, {"id": 44, "seek": 16864, "start": 175.92, "end": 179.83999999999997, "text": " To get a good distribution of points we want to avoid any of them lining up, and so we", "tokens": [50728, 1407, 483, 257, 665, 7316, 295, 2793, 321, 528, 281, 5042, 604, 295, 552, 19628, 493, 11, 293, 370, 321, 50924], "temperature": 0.0, "avg_logprob": -0.11580896792204484, "compression_ratio": 1.7545787545787546, "no_speech_prob": 0.050835780799388885}, {"id": 45, "seek": 16864, "start": 179.83999999999997, "end": 183.51999999999998, "text": " should use a nice irrational number as the turn fraction.", "tokens": [50924, 820, 764, 257, 1481, 39914, 1230, 382, 264, 1261, 14135, 13, 51108], "temperature": 0.0, "avg_logprob": -0.11580896792204484, "compression_ratio": 1.7545787545787546, "no_speech_prob": 0.050835780799388885}, {"id": 46, "seek": 16864, "start": 183.51999999999998, "end": 187.2, "text": " What's recommended in particular is the golden ratio.", "tokens": [51108, 708, 311, 9628, 294, 1729, 307, 264, 9729, 8509, 13, 51292], "temperature": 0.0, "avg_logprob": -0.11580896792204484, "compression_ratio": 1.7545787545787546, "no_speech_prob": 0.050835780799388885}, {"id": 47, "seek": 16864, "start": 187.2, "end": 191.39999999999998, "text": " In case like me you only have vague recollections of what that is, essentially say you have", "tokens": [51292, 682, 1389, 411, 385, 291, 787, 362, 24247, 39495, 557, 626, 295, 437, 300, 307, 11, 4476, 584, 291, 362, 51502], "temperature": 0.0, "avg_logprob": -0.11580896792204484, "compression_ratio": 1.7545787545787546, "no_speech_prob": 0.050835780799388885}, {"id": 48, "seek": 16864, "start": 191.39999999999998, "end": 195.72, "text": " a line segment called A, and another shorter segment called B.", "tokens": [51502, 257, 1622, 9469, 1219, 316, 11, 293, 1071, 11639, 9469, 1219, 363, 13, 51718], "temperature": 0.0, "avg_logprob": -0.11580896792204484, "compression_ratio": 1.7545787545787546, "no_speech_prob": 0.050835780799388885}, {"id": 49, "seek": 19572, "start": 195.72, "end": 199.84, "text": " Given the length of both segments together, divided by the length of the long segment", "tokens": [50364, 18600, 264, 4641, 295, 1293, 19904, 1214, 11, 6666, 538, 264, 4641, 295, 264, 938, 9469, 50570], "temperature": 0.0, "avg_logprob": -0.12674308424236394, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.03593689575791359}, {"id": 50, "seek": 19572, "start": 199.84, "end": 204.72, "text": " is equal to the long one divided by the short one, that's the golden ratio, represented", "tokens": [50570, 307, 2681, 281, 264, 938, 472, 6666, 538, 264, 2099, 472, 11, 300, 311, 264, 9729, 8509, 11, 10379, 50814], "temperature": 0.0, "avg_logprob": -0.12674308424236394, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.03593689575791359}, {"id": 51, "seek": 19572, "start": 204.72, "end": 208.24, "text": " by this very fancy symbol phi.", "tokens": [50814, 538, 341, 588, 10247, 5986, 13107, 13, 50990], "temperature": 0.0, "avg_logprob": -0.12674308424236394, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.03593689575791359}, {"id": 52, "seek": 19572, "start": 208.24, "end": 212.92, "text": " If we then do some maths, we can find that the positive solution to this equation is", "tokens": [50990, 759, 321, 550, 360, 512, 36287, 11, 321, 393, 915, 300, 264, 3353, 3827, 281, 341, 5367, 307, 51224], "temperature": 0.0, "avg_logprob": -0.12674308424236394, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.03593689575791359}, {"id": 53, "seek": 19572, "start": 212.92, "end": 218.12, "text": " 1 plus the square root of 5 over 2, or about 1.618.", "tokens": [51224, 502, 1804, 264, 3732, 5593, 295, 1025, 670, 568, 11, 420, 466, 502, 13, 21, 6494, 13, 51484], "temperature": 0.0, "avg_logprob": -0.12674308424236394, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.03593689575791359}, {"id": 54, "seek": 19572, "start": 218.12, "end": 222.2, "text": " So let's plug that in as the turn fraction, and as you can see this gives us a really", "tokens": [51484, 407, 718, 311, 5452, 300, 294, 382, 264, 1261, 14135, 11, 293, 382, 291, 393, 536, 341, 2709, 505, 257, 534, 51688], "temperature": 0.0, "avg_logprob": -0.12674308424236394, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.03593689575791359}, {"id": 55, "seek": 19572, "start": 222.2, "end": 225.12, "text": " nice distribution of points.", "tokens": [51688, 1481, 7316, 295, 2793, 13, 51834], "temperature": 0.0, "avg_logprob": -0.12674308424236394, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.03593689575791359}, {"id": 56, "seek": 22512, "start": 225.12, "end": 228.36, "text": " I wanted to play around with this some more because I think it looks kind of interesting,", "tokens": [50364, 286, 1415, 281, 862, 926, 365, 341, 512, 544, 570, 286, 519, 309, 1542, 733, 295, 1880, 11, 50526], "temperature": 0.0, "avg_logprob": -0.13528927480141947, "compression_ratio": 1.6742671009771988, "no_speech_prob": 0.0004785784403793514}, {"id": 57, "seek": 22512, "start": 228.36, "end": 233.44, "text": " so I added some code for highlighting every nth point by checking if i plus some offset", "tokens": [50526, 370, 286, 3869, 512, 3089, 337, 26551, 633, 297, 392, 935, 538, 8568, 498, 741, 1804, 512, 18687, 50780], "temperature": 0.0, "avg_logprob": -0.13528927480141947, "compression_ratio": 1.6742671009771988, "no_speech_prob": 0.0004785784403793514}, {"id": 58, "seek": 22512, "start": 233.44, "end": 238.64000000000001, "text": " mod the highlight value is equal to 0.", "tokens": [50780, 1072, 264, 5078, 2158, 307, 2681, 281, 1958, 13, 51040], "temperature": 0.0, "avg_logprob": -0.13528927480141947, "compression_ratio": 1.6742671009771988, "no_speech_prob": 0.0004785784403793514}, {"id": 59, "seek": 22512, "start": 238.64000000000001, "end": 242.44, "text": " So here we can see what it looks like with every second point highlighted, every third", "tokens": [51040, 407, 510, 321, 393, 536, 437, 309, 1542, 411, 365, 633, 1150, 935, 17173, 11, 633, 2636, 51230], "temperature": 0.0, "avg_logprob": -0.13528927480141947, "compression_ratio": 1.6742671009771988, "no_speech_prob": 0.0004785784403793514}, {"id": 60, "seek": 22512, "start": 242.44, "end": 244.92000000000002, "text": " point, and so on.", "tokens": [51230, 935, 11, 293, 370, 322, 13, 51354], "temperature": 0.0, "avg_logprob": -0.13528927480141947, "compression_ratio": 1.6742671009771988, "no_speech_prob": 0.0004785784403793514}, {"id": 61, "seek": 22512, "start": 244.92000000000002, "end": 249.88, "text": " Now I know people have been talking about sunflowers and the Fibonacci sequence for ages, but I've", "tokens": [51354, 823, 286, 458, 561, 362, 668, 1417, 466, 3295, 10565, 433, 293, 264, 479, 897, 266, 43870, 8310, 337, 12357, 11, 457, 286, 600, 51602], "temperature": 0.0, "avg_logprob": -0.13528927480141947, "compression_ratio": 1.6742671009771988, "no_speech_prob": 0.0004785784403793514}, {"id": 62, "seek": 22512, "start": 249.88, "end": 254.20000000000002, "text": " never paid much attention to what the connection actually is, so in case you're also a little", "tokens": [51602, 1128, 4835, 709, 3202, 281, 437, 264, 4984, 767, 307, 11, 370, 294, 1389, 291, 434, 611, 257, 707, 51818], "temperature": 0.0, "avg_logprob": -0.13528927480141947, "compression_ratio": 1.6742671009771988, "no_speech_prob": 0.0004785784403793514}, {"id": 63, "seek": 25420, "start": 254.2, "end": 258.32, "text": " late to the party, what we can do is list the first few numbers in the Fibonacci sequence", "tokens": [50364, 3469, 281, 264, 3595, 11, 437, 321, 393, 360, 307, 1329, 264, 700, 1326, 3547, 294, 264, 479, 897, 266, 43870, 8310, 50570], "temperature": 0.0, "avg_logprob": -0.11772840590704055, "compression_ratio": 1.5336134453781514, "no_speech_prob": 0.10900483280420303}, {"id": 64, "seek": 25420, "start": 258.32, "end": 264.24, "text": " over here, and I'll now highlight every 34th point, or seed, in the case of a sunflower.", "tokens": [50570, 670, 510, 11, 293, 286, 603, 586, 5078, 633, 12790, 392, 935, 11, 420, 8871, 11, 294, 264, 1389, 295, 257, 48215, 13, 50866], "temperature": 0.0, "avg_logprob": -0.11772840590704055, "compression_ratio": 1.5336134453781514, "no_speech_prob": 0.10900483280420303}, {"id": 65, "seek": 25420, "start": 264.24, "end": 268.28, "text": " This shows a curve coming from the edge of the disk to the centre.", "tokens": [50866, 639, 3110, 257, 7605, 1348, 490, 264, 4691, 295, 264, 12355, 281, 264, 10093, 13, 51068], "temperature": 0.0, "avg_logprob": -0.11772840590704055, "compression_ratio": 1.5336134453781514, "no_speech_prob": 0.10900483280420303}, {"id": 66, "seek": 25420, "start": 268.28, "end": 272.76, "text": " If I add an offset of 13, we hop over to the next curve.", "tokens": [51068, 759, 286, 909, 364, 18687, 295, 3705, 11, 321, 3818, 670, 281, 264, 958, 7605, 13, 51292], "temperature": 0.0, "avg_logprob": -0.11772840590704055, "compression_ratio": 1.5336134453781514, "no_speech_prob": 0.10900483280420303}, {"id": 67, "seek": 25420, "start": 272.76, "end": 277.36, "text": " Notice that 13 is also a Fibonacci number, two spots below 34.", "tokens": [51292, 13428, 300, 3705, 307, 611, 257, 479, 897, 266, 43870, 1230, 11, 732, 10681, 2507, 12790, 13, 51522], "temperature": 0.0, "avg_logprob": -0.11772840590704055, "compression_ratio": 1.5336134453781514, "no_speech_prob": 0.10900483280420303}, {"id": 68, "seek": 27736, "start": 277.36, "end": 284.88, "text": " So hopping 30 in each time, we can count the number of curves.", "tokens": [50364, 407, 47199, 2217, 294, 1184, 565, 11, 321, 393, 1207, 264, 1230, 295, 19490, 13, 50740], "temperature": 0.0, "avg_logprob": -0.11601700914015464, "compression_ratio": 1.6083333333333334, "no_speech_prob": 0.027087608352303505}, {"id": 69, "seek": 27736, "start": 284.88, "end": 287.56, "text": " As you can see there are 34 of them.", "tokens": [50740, 1018, 291, 393, 536, 456, 366, 12790, 295, 552, 13, 50874], "temperature": 0.0, "avg_logprob": -0.11601700914015464, "compression_ratio": 1.6083333333333334, "no_speech_prob": 0.027087608352303505}, {"id": 70, "seek": 27736, "start": 287.56, "end": 291.86, "text": " If I now highlight every 55th, which is the next Fibonacci number up, we get a curve going", "tokens": [50874, 759, 286, 586, 5078, 633, 12330, 392, 11, 597, 307, 264, 958, 479, 897, 266, 43870, 1230, 493, 11, 321, 483, 257, 7605, 516, 51089], "temperature": 0.0, "avg_logprob": -0.11601700914015464, "compression_ratio": 1.6083333333333334, "no_speech_prob": 0.027087608352303505}, {"id": 71, "seek": 27736, "start": 291.86, "end": 293.08000000000004, "text": " in the other direction.", "tokens": [51089, 294, 264, 661, 3513, 13, 51150], "temperature": 0.0, "avg_logprob": -0.11601700914015464, "compression_ratio": 1.6083333333333334, "no_speech_prob": 0.027087608352303505}, {"id": 72, "seek": 27736, "start": 293.08000000000004, "end": 299.72, "text": " I'll make the offset 21, and if we count again, we'll see that there are 55.", "tokens": [51150, 286, 603, 652, 264, 18687, 5080, 11, 293, 498, 321, 1207, 797, 11, 321, 603, 536, 300, 456, 366, 12330, 13, 51482], "temperature": 0.0, "avg_logprob": -0.11601700914015464, "compression_ratio": 1.6083333333333334, "no_speech_prob": 0.027087608352303505}, {"id": 73, "seek": 27736, "start": 299.72, "end": 304.24, "text": " So pretty fascinating I think how these Fibonacci numbers are sort of embedded in the pattern,", "tokens": [51482, 407, 1238, 10343, 286, 519, 577, 613, 479, 897, 266, 43870, 3547, 366, 1333, 295, 16741, 294, 264, 5102, 11, 51708], "temperature": 0.0, "avg_logprob": -0.11601700914015464, "compression_ratio": 1.6083333333333334, "no_speech_prob": 0.027087608352303505}, {"id": 74, "seek": 30424, "start": 304.24, "end": 309.56, "text": " with 55 arms going this way, and 34 the other way.", "tokens": [50364, 365, 12330, 5812, 516, 341, 636, 11, 293, 12790, 264, 661, 636, 13, 50630], "temperature": 0.0, "avg_logprob": -0.16883226013183594, "compression_ratio": 1.6501766784452296, "no_speech_prob": 0.024741314351558685}, {"id": 75, "seek": 30424, "start": 309.56, "end": 314.28000000000003, "text": " It's perhaps not surprising then that 55 divided by 34 is pretty close to the golden", "tokens": [50630, 467, 311, 4317, 406, 8830, 550, 300, 12330, 6666, 538, 12790, 307, 1238, 1998, 281, 264, 9729, 50866], "temperature": 0.0, "avg_logprob": -0.16883226013183594, "compression_ratio": 1.6501766784452296, "no_speech_prob": 0.024741314351558685}, {"id": 76, "seek": 30424, "start": 314.28000000000003, "end": 318.2, "text": " ratio, and that's actually a property of the Fibonacci sequence that you get more and more", "tokens": [50866, 8509, 11, 293, 300, 311, 767, 257, 4707, 295, 264, 479, 897, 266, 43870, 8310, 300, 291, 483, 544, 293, 544, 51062], "temperature": 0.0, "avg_logprob": -0.16883226013183594, "compression_ratio": 1.6501766784452296, "no_speech_prob": 0.024741314351558685}, {"id": 77, "seek": 30424, "start": 318.2, "end": 322.52, "text": " accurate approximations of the golden ratio the higher up you go.", "tokens": [51062, 8559, 8542, 763, 295, 264, 9729, 8509, 264, 2946, 493, 291, 352, 13, 51278], "temperature": 0.0, "avg_logprob": -0.16883226013183594, "compression_ratio": 1.6501766784452296, "no_speech_prob": 0.024741314351558685}, {"id": 78, "seek": 30424, "start": 322.52, "end": 325.36, "text": " Ok, I've got a little sidetracked.", "tokens": [51278, 3477, 11, 286, 600, 658, 257, 707, 20822, 27965, 25949, 13, 51420], "temperature": 0.0, "avg_logprob": -0.16883226013183594, "compression_ratio": 1.6501766784452296, "no_speech_prob": 0.024741314351558685}, {"id": 79, "seek": 30424, "start": 325.36, "end": 329.76, "text": " What I need to do now is stop the points from being so bunched up in the centre, so I'll", "tokens": [51420, 708, 286, 643, 281, 360, 586, 307, 1590, 264, 2793, 490, 885, 370, 3840, 292, 493, 294, 264, 10093, 11, 370, 286, 603, 51640], "temperature": 0.0, "avg_logprob": -0.16883226013183594, "compression_ratio": 1.6501766784452296, "no_speech_prob": 0.024741314351558685}, {"id": 80, "seek": 30424, "start": 329.76, "end": 332.7, "text": " raise the distance to some power in the code here.", "tokens": [51640, 5300, 264, 4560, 281, 512, 1347, 294, 264, 3089, 510, 13, 51787], "temperature": 0.0, "avg_logprob": -0.16883226013183594, "compression_ratio": 1.6501766784452296, "no_speech_prob": 0.024741314351558685}, {"id": 81, "seek": 33270, "start": 332.7, "end": 336.62, "text": " That power is currently 1, but if I lower it to 0.5, which is the same as taking the", "tokens": [50364, 663, 1347, 307, 4362, 502, 11, 457, 498, 286, 3126, 309, 281, 1958, 13, 20, 11, 597, 307, 264, 912, 382, 1940, 264, 50560], "temperature": 0.0, "avg_logprob": -0.13404612754707906, "compression_ratio": 1.6398809523809523, "no_speech_prob": 0.0013096857583150268}, {"id": 82, "seek": 33270, "start": 336.62, "end": 340.94, "text": " square root, you can see how the distribution gets corrected.", "tokens": [50560, 3732, 5593, 11, 291, 393, 536, 577, 264, 7316, 2170, 31687, 13, 50776], "temperature": 0.0, "avg_logprob": -0.13404612754707906, "compression_ratio": 1.6398809523809523, "no_speech_prob": 0.0013096857583150268}, {"id": 83, "seek": 33270, "start": 340.94, "end": 345.86, "text": " Making the power negative looks pretty cool too, but I should probably get back on topic.", "tokens": [50776, 14595, 264, 1347, 3671, 1542, 1238, 1627, 886, 11, 457, 286, 820, 1391, 483, 646, 322, 4829, 13, 51022], "temperature": 0.0, "avg_logprob": -0.13404612754707906, "compression_ratio": 1.6398809523809523, "no_speech_prob": 0.0013096857583150268}, {"id": 84, "seek": 33270, "start": 345.86, "end": 349.4, "text": " So projecting this to a sphere requires a few modifications, and I'll link to the", "tokens": [51022, 407, 43001, 341, 281, 257, 16687, 7029, 257, 1326, 26881, 11, 293, 286, 603, 2113, 281, 264, 51199], "temperature": 0.0, "avg_logprob": -0.13404612754707906, "compression_ratio": 1.6398809523809523, "no_speech_prob": 0.0013096857583150268}, {"id": 85, "seek": 33270, "start": 349.4, "end": 352.46, "text": " write up I followed in case you want to read more about it.", "tokens": [51199, 2464, 493, 286, 6263, 294, 1389, 291, 528, 281, 1401, 544, 466, 309, 13, 51352], "temperature": 0.0, "avg_logprob": -0.13404612754707906, "compression_ratio": 1.6398809523809523, "no_speech_prob": 0.0013096857583150268}, {"id": 86, "seek": 33270, "start": 352.46, "end": 355.41999999999996, "text": " I'm apparently not very good at following instructions though, because I first ended", "tokens": [51352, 286, 478, 7970, 406, 588, 665, 412, 3480, 9415, 1673, 11, 570, 286, 700, 4590, 51500], "temperature": 0.0, "avg_logprob": -0.13404612754707906, "compression_ratio": 1.6398809523809523, "no_speech_prob": 0.0013096857583150268}, {"id": 87, "seek": 33270, "start": 355.41999999999996, "end": 360.09999999999997, "text": " up with this highly unspherical shape, I then swapped some signs and cosines around and", "tokens": [51500, 493, 365, 341, 5405, 2693, 79, 34340, 3909, 11, 286, 550, 50011, 512, 7880, 293, 3792, 1652, 926, 293, 51734], "temperature": 0.0, "avg_logprob": -0.13404612754707906, "compression_ratio": 1.6398809523809523, "no_speech_prob": 0.0013096857583150268}, {"id": 88, "seek": 36010, "start": 360.1, "end": 367.14000000000004, "text": " got this, and then finally, after a bit of trial and error, it worked.", "tokens": [50364, 658, 341, 11, 293, 550, 2721, 11, 934, 257, 857, 295, 7308, 293, 6713, 11, 309, 2732, 13, 50716], "temperature": 0.0, "avg_logprob": -0.13759429695070252, "compression_ratio": 1.7297297297297298, "no_speech_prob": 0.0071807620115578175}, {"id": 89, "seek": 36010, "start": 367.14000000000004, "end": 370.42, "text": " It's kind of fun to play around with this tone fraction again now that it's a sphere,", "tokens": [50716, 467, 311, 733, 295, 1019, 281, 862, 926, 365, 341, 8027, 14135, 797, 586, 300, 309, 311, 257, 16687, 11, 50880], "temperature": 0.0, "avg_logprob": -0.13759429695070252, "compression_ratio": 1.7297297297297298, "no_speech_prob": 0.0071807620115578175}, {"id": 90, "seek": 36010, "start": 370.42, "end": 372.78000000000003, "text": " but I should really get back to the voids.", "tokens": [50880, 457, 286, 820, 534, 483, 646, 281, 264, 1650, 3742, 13, 50998], "temperature": 0.0, "avg_logprob": -0.13759429695070252, "compression_ratio": 1.7297297297297298, "no_speech_prob": 0.0071807620115578175}, {"id": 91, "seek": 36010, "start": 372.78000000000003, "end": 377.58000000000004, "text": " So I can now specify the number of collision rays along with the view angle, and this generates", "tokens": [50998, 407, 286, 393, 586, 16500, 264, 1230, 295, 24644, 24417, 2051, 365, 264, 1910, 5802, 11, 293, 341, 23815, 51238], "temperature": 0.0, "avg_logprob": -0.13759429695070252, "compression_ratio": 1.7297297297297298, "no_speech_prob": 0.0071807620115578175}, {"id": 92, "seek": 36010, "start": 377.58000000000004, "end": 380.14000000000004, "text": " an array of vectors once at the start.", "tokens": [51238, 364, 10225, 295, 18875, 1564, 412, 264, 722, 13, 51366], "temperature": 0.0, "avg_logprob": -0.13759429695070252, "compression_ratio": 1.7297297297297298, "no_speech_prob": 0.0071807620115578175}, {"id": 93, "seek": 36010, "start": 380.14000000000004, "end": 384.5, "text": " The voids then have a function that uses this array to perform collision checks, at increasing", "tokens": [51366, 440, 1650, 3742, 550, 362, 257, 2445, 300, 4960, 341, 10225, 281, 2042, 24644, 13834, 11, 412, 5662, 51584], "temperature": 0.0, "avg_logprob": -0.13759429695070252, "compression_ratio": 1.7297297297297298, "no_speech_prob": 0.0071807620115578175}, {"id": 94, "seek": 36010, "start": 384.5, "end": 389.38, "text": " angles from their own forward direction, until an unobstructed direction is found.", "tokens": [51584, 14708, 490, 641, 1065, 2128, 3513, 11, 1826, 364, 517, 996, 372, 1757, 292, 3513, 307, 1352, 13, 51828], "temperature": 0.0, "avg_logprob": -0.13759429695070252, "compression_ratio": 1.7297297297297298, "no_speech_prob": 0.0071807620115578175}, {"id": 95, "seek": 38938, "start": 389.38, "end": 394.58, "text": " I tried testing this with a single void, moving a block around to block its path, and it seemed", "tokens": [50364, 286, 3031, 4997, 341, 365, 257, 2167, 22009, 11, 2684, 257, 3461, 926, 281, 3461, 1080, 3100, 11, 293, 309, 6576, 50624], "temperature": 0.0, "avg_logprob": -0.15090219953418832, "compression_ratio": 1.7282608695652173, "no_speech_prob": 0.000896347570233047}, {"id": 96, "seek": 38938, "start": 394.58, "end": 396.18, "text": " to work pretty well.", "tokens": [50624, 281, 589, 1238, 731, 13, 50704], "temperature": 0.0, "avg_logprob": -0.15090219953418832, "compression_ratio": 1.7282608695652173, "no_speech_prob": 0.000896347570233047}, {"id": 97, "seek": 38938, "start": 396.18, "end": 400.38, "text": " I then let a bunch of them fly around an empty room to see how this new obstacle avoidance", "tokens": [50704, 286, 550, 718, 257, 3840, 295, 552, 3603, 926, 364, 6707, 1808, 281, 536, 577, 341, 777, 23112, 5042, 719, 50914], "temperature": 0.0, "avg_logprob": -0.15090219953418832, "compression_ratio": 1.7282608695652173, "no_speech_prob": 0.000896347570233047}, {"id": 98, "seek": 38938, "start": 400.38, "end": 405.78, "text": " force would interact with their existing separation alignment and cohesion forces, and it seemed", "tokens": [50914, 3464, 576, 4648, 365, 641, 6741, 14634, 18515, 293, 598, 38571, 5874, 11, 293, 309, 6576, 51184], "temperature": 0.0, "avg_logprob": -0.15090219953418832, "compression_ratio": 1.7282608695652173, "no_speech_prob": 0.000896347570233047}, {"id": 99, "seek": 38938, "start": 405.78, "end": 408.9, "text": " like they were still behaving quite nicely.", "tokens": [51184, 411, 436, 645, 920, 35263, 1596, 9594, 13, 51340], "temperature": 0.0, "avg_logprob": -0.15090219953418832, "compression_ratio": 1.7282608695652173, "no_speech_prob": 0.000896347570233047}, {"id": 100, "seek": 38938, "start": 408.9, "end": 412.38, "text": " Another thing I experimented with was adding a targeting force, so that they try to fly", "tokens": [51340, 3996, 551, 286, 5120, 292, 365, 390, 5127, 257, 17918, 3464, 11, 370, 300, 436, 853, 281, 3603, 51514], "temperature": 0.0, "avg_logprob": -0.15090219953418832, "compression_ratio": 1.7282608695652173, "no_speech_prob": 0.000896347570233047}, {"id": 101, "seek": 38938, "start": 412.38, "end": 415.62, "text": " towards the sphere as I moved it around.", "tokens": [51514, 3030, 264, 16687, 382, 286, 4259, 309, 926, 13, 51676], "temperature": 0.0, "avg_logprob": -0.15090219953418832, "compression_ratio": 1.7282608695652173, "no_speech_prob": 0.000896347570233047}, {"id": 102, "seek": 41562, "start": 415.62, "end": 420.06, "text": " Finally I wanted to test the obstacle avoidance in a more elaborate setup, so I created a", "tokens": [50364, 6288, 286, 1415, 281, 1500, 264, 23112, 5042, 719, 294, 257, 544, 20945, 8657, 11, 370, 286, 2942, 257, 50586], "temperature": 0.0, "avg_logprob": -0.1268405278523763, "compression_ratio": 1.563157894736842, "no_speech_prob": 0.0011604223400354385}, {"id": 103, "seek": 41562, "start": 420.06, "end": 435.46, "text": " little course with an arch and some hoops, and let the voids fly loose in there.", "tokens": [50586, 707, 1164, 365, 364, 3912, 293, 512, 1106, 3370, 11, 293, 718, 264, 1650, 3742, 3603, 9612, 294, 456, 13, 51356], "temperature": 0.0, "avg_logprob": -0.1268405278523763, "compression_ratio": 1.563157894736842, "no_speech_prob": 0.0011604223400354385}, {"id": 104, "seek": 41562, "start": 435.46, "end": 438.86, "text": " I was having a big issue with performance though, because each void had to loop over", "tokens": [51356, 286, 390, 1419, 257, 955, 2734, 365, 3389, 1673, 11, 570, 1184, 22009, 632, 281, 6367, 670, 51526], "temperature": 0.0, "avg_logprob": -0.1268405278523763, "compression_ratio": 1.563157894736842, "no_speech_prob": 0.0011604223400354385}, {"id": 105, "seek": 41562, "start": 438.86, "end": 441.78000000000003, "text": " every other void to find the ones nearby.", "tokens": [51526, 633, 661, 22009, 281, 915, 264, 2306, 11184, 13, 51672], "temperature": 0.0, "avg_logprob": -0.1268405278523763, "compression_ratio": 1.563157894736842, "no_speech_prob": 0.0011604223400354385}, {"id": 106, "seek": 44178, "start": 441.78, "end": 446.58, "text": " So I spent a while creating a spatial partitioning scheme, where each void is placed into a cell", "tokens": [50364, 407, 286, 4418, 257, 1339, 4084, 257, 23598, 24808, 278, 12232, 11, 689, 1184, 22009, 307, 7074, 666, 257, 2815, 50604], "temperature": 0.0, "avg_logprob": -0.13354760950261896, "compression_ratio": 1.7157190635451505, "no_speech_prob": 0.027520744130015373}, {"id": 107, "seek": 44178, "start": 446.58, "end": 448.53999999999996, "text": " based on its position.", "tokens": [50604, 2361, 322, 1080, 2535, 13, 50702], "temperature": 0.0, "avg_logprob": -0.13354760950261896, "compression_ratio": 1.7157190635451505, "no_speech_prob": 0.027520744130015373}, {"id": 108, "seek": 44178, "start": 448.53999999999996, "end": 453.02, "text": " Voids then only need to worry about the other voids in neighbouring cells.", "tokens": [50702, 7518, 3742, 550, 787, 643, 281, 3292, 466, 264, 661, 1650, 3742, 294, 19755, 278, 5438, 13, 50926], "temperature": 0.0, "avg_logprob": -0.13354760950261896, "compression_ratio": 1.7157190635451505, "no_speech_prob": 0.027520744130015373}, {"id": 109, "seek": 44178, "start": 453.02, "end": 456.17999999999995, "text": " While this did help a lot, I found it was actually faster to just do the crude loop", "tokens": [50926, 3987, 341, 630, 854, 257, 688, 11, 286, 1352, 309, 390, 767, 4663, 281, 445, 360, 264, 30796, 6367, 51084], "temperature": 0.0, "avg_logprob": -0.13354760950261896, "compression_ratio": 1.7157190635451505, "no_speech_prob": 0.027520744130015373}, {"id": 110, "seek": 44178, "start": 456.17999999999995, "end": 460.58, "text": " over all voids, but inside a compute shader so that it could be done in parallel.", "tokens": [51084, 670, 439, 1650, 3742, 11, 457, 1854, 257, 14722, 5744, 260, 370, 300, 309, 727, 312, 1096, 294, 8952, 13, 51304], "temperature": 0.0, "avg_logprob": -0.13354760950261896, "compression_ratio": 1.7157190635451505, "no_speech_prob": 0.027520744130015373}, {"id": 111, "seek": 44178, "start": 460.58, "end": 464.73999999999995, "text": " Of course, combining the partitioning with the shader would be way way faster, but I'm", "tokens": [51304, 2720, 1164, 11, 21928, 264, 24808, 278, 365, 264, 5744, 260, 576, 312, 636, 636, 4663, 11, 457, 286, 478, 51512], "temperature": 0.0, "avg_logprob": -0.13354760950261896, "compression_ratio": 1.7157190635451505, "no_speech_prob": 0.027520744130015373}, {"id": 112, "seek": 44178, "start": 464.73999999999995, "end": 468.14, "text": " going to need to learn some more before I'm ready to tackle that.", "tokens": [51512, 516, 281, 643, 281, 1466, 512, 544, 949, 286, 478, 1919, 281, 14896, 300, 13, 51682], "temperature": 0.0, "avg_logprob": -0.13354760950261896, "compression_ratio": 1.7157190635451505, "no_speech_prob": 0.027520744130015373}, {"id": 113, "seek": 46814, "start": 468.14, "end": 472.74, "text": " Now a little while back I made this underwater scene during my marching cubes adventure,", "tokens": [50364, 823, 257, 707, 1339, 646, 286, 1027, 341, 20967, 4145, 1830, 452, 30523, 25415, 9868, 11, 50594], "temperature": 0.0, "avg_logprob": -0.1565989266454646, "compression_ratio": 1.6245614035087719, "no_speech_prob": 0.17267772555351257}, {"id": 114, "seek": 46814, "start": 472.74, "end": 476.06, "text": " and many of you in the comments suggested bringing it to life with some fish.", "tokens": [50594, 293, 867, 295, 291, 294, 264, 3053, 10945, 5062, 309, 281, 993, 365, 512, 3506, 13, 50760], "temperature": 0.0, "avg_logprob": -0.1565989266454646, "compression_ratio": 1.6245614035087719, "no_speech_prob": 0.17267772555351257}, {"id": 115, "seek": 46814, "start": 476.06, "end": 481.06, "text": " Well, voids is the perfect approach for that, so I downloaded a little fish model, and found", "tokens": [50760, 1042, 11, 1650, 3742, 307, 264, 2176, 3109, 337, 300, 11, 370, 286, 21748, 257, 707, 3506, 2316, 11, 293, 1352, 51010], "temperature": 0.0, "avg_logprob": -0.1565989266454646, "compression_ratio": 1.6245614035087719, "no_speech_prob": 0.17267772555351257}, {"id": 116, "seek": 46814, "start": 481.06, "end": 485.58, "text": " a shader online that wiggles the vertices of the model to make it look like it's swimming.", "tokens": [51010, 257, 5744, 260, 2950, 300, 261, 19469, 264, 32053, 295, 264, 2316, 281, 652, 309, 574, 411, 309, 311, 11989, 13, 51236], "temperature": 0.0, "avg_logprob": -0.1565989266454646, "compression_ratio": 1.6245614035087719, "no_speech_prob": 0.17267772555351257}, {"id": 117, "seek": 46814, "start": 485.58, "end": 487.5, "text": " I'll link to that in the description.", "tokens": [51236, 286, 603, 2113, 281, 300, 294, 264, 3855, 13, 51332], "temperature": 0.0, "avg_logprob": -0.1565989266454646, "compression_ratio": 1.6245614035087719, "no_speech_prob": 0.17267772555351257}, {"id": 118, "seek": 46814, "start": 487.5, "end": 490.53999999999996, "text": " So now I just need to board my submarine, and go swimming with the fishes.", "tokens": [51332, 407, 586, 286, 445, 643, 281, 3150, 452, 33995, 11, 293, 352, 11989, 365, 264, 41734, 13, 51484], "temperature": 0.0, "avg_logprob": -0.1565989266454646, "compression_ratio": 1.6245614035087719, "no_speech_prob": 0.17267772555351257}, {"id": 119, "seek": 49814, "start": 498.14, "end": 506.65999999999997, "text": " Alright, that's everything for this coding adventure.", "tokens": [50364, 2798, 11, 300, 311, 1203, 337, 341, 17720, 9868, 13, 50790], "temperature": 0.0, "avg_logprob": -0.41693417922310205, "compression_ratio": 1.0123456790123457, "no_speech_prob": 0.14631016552448273}, {"id": 120, "seek": 49814, "start": 506.65999999999997, "end": 507.65999999999997, "text": " Thanks for watching.", "tokens": [50790, 2561, 337, 1976, 13, 50840], "temperature": 0.0, "avg_logprob": -0.41693417922310205, "compression_ratio": 1.0123456790123457, "no_speech_prob": 0.14631016552448273}, {"id": 121, "seek": 49814, "start": 507.65999999999997, "end": 507.94, "text": " Cheers.", "tokens": [50840, 13006, 13, 50854], "temperature": 0.0, "avg_logprob": -0.41693417922310205, "compression_ratio": 1.0123456790123457, "no_speech_prob": 0.14631016552448273}], "language": "en"}