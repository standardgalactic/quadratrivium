start	end	text
0	5360	Hello everyone, in this video I will show you how you can make interesting art in Microsoft
5360	10240	Paint as well as how you can automate almost anything on your computer and significantly
10240	12200	boost your productivity.
12200	13200	Sounds interesting?
13200	15960	Then let's get to it.
15960	19920	Working in any program, often times you have to press the same shortcuts again and again
19920	24600	or perform repetitive combinations which sometimes can hinder your workflow and take a lot of
24600	26480	time long term.
26480	31280	But what if I say that each of these actions, including moving your mouse and typing a text,
31280	34840	can be performed by just pressing a single key at a time?
34840	40480	In this tutorial I'm gonna show you how using free software called AutoHotKey or AHK you
40480	45440	can assign any combination of keys or mouse moves to any key either on the second keyboard
45440	48340	or on your main keyboard or mouse.
48340	52400	You may want to apply this method to a second keyboard because if there are many things
52400	58740	that can be automated it's not always convenient to override your current keys or existing shortcuts.
58740	62840	So this will allow you to separate the inputs from different devices which is not possible
62840	64840	in Windows by default.
64840	68880	If you're already familiar with AHK you might want to skip to the part where I specifically
68880	72320	set up a second keyboard with AHI.
72320	76060	Now let me quickly demonstrate what is possible with this program.
76060	80320	For this tutorial I'm gonna be using something that everyone is familiar with, Microsoft
80320	82320	Paint and Notepad.
82320	86400	I will also show you a couple of tricks in a free version of a video editing software
86400	88160	called DaVinci Resolve.
88160	92640	But AHK can be virtually used with any program that you would like to automate.
92640	97960	In Microsoft programs like Word, Excel and others including Paint itself you can reach
97960	106040	almost any tool or function by pressing an Alt key and then entering a certain combination.
106040	113280	In Paint for example you can enable a pencil tool by entering Alt, H, P and 1.
113280	117680	Of course you can also just move your cursor to the pencil sign and click on it.
117680	119800	But why do we have to do any of that?
119800	121920	Let's make our computer do that for us.
121920	125720	At the end of the day, isn't it what computers were designed for?
125720	129480	Here I have the script that I wrote with which it becomes possible to do the things we were
129480	130920	talking about.
130920	134960	With experience you'll be able to write similar scripts like it's a piece of cake.
134960	137680	And for now let's just see what it can do.
137680	140520	Let's say I feel like drawing with a pencil.
140520	145640	On my second keyboard I press the insert key for that which by the way could be any key.
145640	149480	Here I have a pencil enabled, let's draw a circle.
149480	154760	Now why don't we fill a circle with some color, we press the home key for that one.
154760	157880	Maybe the circle is alive and it has a name.
157880	161720	Let's enable the text tool and call this blob Richard.
161720	164720	Now when it's alive and has a name, let's give it vision.
164720	170880	For that we enable the eraser tool by pressing delete and simply erase two little spots.
170880	174680	Heck, let's give it a mouth too.
174680	177600	Let's give it hands using the line shape tool.
177600	183200	Perfect, maybe it will be easier for Richard to move around if it has legs.
183200	187120	Let's give him a pair with the curve shape tool.
187120	189880	Excellent.
189880	193760	Now what if it's not an actual Richard but a picture of him, let's draw a nice little
193760	200960	frame with the rounded rectangle shape tool and let's choose the size of it to our liking.
200960	206280	And here we have it, the art of a happy blob Richard, how beautiful is that?
206280	210640	And you can do that too and I'll explain how later in the video.
210640	214720	But let me show you one more trick that I've discovered automating paint, not that it's
214720	217680	really demonstrative, it's just cool.
217680	222400	With some basic math I was able to write a script for drawing perfect circles, here's
222400	227360	how it happens, but the real magic begins when you move your mouse during the process.
227360	231580	By doing that you can get these interesting spiky circles which you probably remember
231580	234200	from the thumbnail of this video.
234200	239200	Now let me show you some real automation for Da Vinci Resolve, the software that I mentioned
239200	240760	earlier.
240760	244100	In the timeline you can see the video you're watching being edited.
244100	247780	If you remember this part of the video, here I have 4 different keys that appear on the
247780	249960	screen one by one.
249960	254220	When initially imported the size of a single key takes up the whole frame so I shrink them
254220	258540	down with this zoom setting to 22% of their initial size.
258540	262460	I also spread them along the screen with this position setting.
262460	266180	Let's break down the whole process step by step.
266180	270780	First you select a clip in a timeline, then move the cursor to the field next to the needed
270780	271780	setting.
271780	274140	Then you press and hold the left mouse button.
274140	276780	And then you move your mouse left or right.
276780	281820	Then you release the mouse button and probably move your cursor somewhere else.
281820	285500	Not to mention you have to physically run with your eyes across the screen when you
285500	289900	move your cursor and when you look at the result in a different area of the screen.
289900	293980	That's quite a lot of actions for such a simple task if you think.
293980	298980	Then I thought, wouldn't it be cool to just be able to move a selected clip with something
298980	301380	like arrow keys on a second keyboard?
301380	303940	Well, that's exactly what I did.
303940	309560	With the help of auto-holding reception and another useful add-on called tap hold manager.
309560	313860	Now I can simply select a clip and move it naturally with the arrow keys on my second
313860	316860	keyboard without ever bothering to move my mouse.
316860	319340	AHK does everything for me.
319340	324140	Applying same principles now using page up and page down keys I can easily resize a
324140	325140	selected clip.
325140	330100	I don't know about you but I was impressed when I first saw this in action.
330100	334260	One last thing that I really want to show you is this quite simple automation but it
334260	338860	just goes to show how much time you can really save using AHK.
338860	341940	Right now I'm creating the subtitles for this video.
341940	346580	Almost for every sentence I have to create a distinct clip and as you can see there are
346580	348500	quite a lot of them.
348500	351380	Now what would it look like without a script?
351380	357340	First I need to select a needed line of text, then I press control C, then go to DaVinci
357340	360060	and click right button on the timeline.
360060	366140	In a little menu I select add subtitle, then I go over to this text field where I double
366140	371420	click and press control V and then finally move my cursor back to adjust the length of
371420	372820	the clip.
372820	377500	With the AHK all I have to do is to select the needed line of the script and press a
377500	379180	single key.
379180	384020	And like a charm it creates this subtitle clip that I just need to adjust.
384020	388420	This is actually crazy if I would have to go and do all those repetitive actions for
388420	390700	every single small clip.
390700	394500	I hope that with all the examples I managed to show you that the software can be extremely
394500	399300	useful even for the smallest tasks and that it has huge potential in general.
399300	402660	But now the question is what do we need to set it all up?
402660	407540	So for automation purposes we're gonna be using a free software called AHK which stands
407540	409460	for AutoHotKey.
409460	413900	This program allows you to run your own scripts to automate many different actions on your
413900	414900	PC.
414900	419900	This software is extremely diverse and in my opinion greatly underrated, but however
419900	423580	diverse it is we will need only a small portion of it.
423580	427100	To use AHK you don't need to have multiple devices connected.
427100	432260	AHK works great for some simple automation which we will learn about just in a second.
432260	436500	However, if you want to send the input from several devices separately which is the main
436500	442260	focus of this video, you will need to set up AHI or AutoHot Interception.
442260	447440	Simply put, AHI is based on a driver that allows you to intercept any input coming into your
447440	452460	computer and it is the thing that will allow us to differentiate our keyboards.
452460	454300	Now let's get down to business.
454300	458580	Go to AutoHotKey.com and download the current version of the software.
458580	462300	Run the installation file and select the Express installation.
462300	467260	After AHK is installed, you are now able to create AHK files by clicking right button
467260	471220	either on your desktop or inside the file explorer.
471220	477260	Select New and then select AHK script which will create a file with AHK extension.
477260	482060	Alternatively, you can create and write a text file in a default Windows Notepad and
482060	485780	then manually change the txt extension to AHK.
485780	490300	Now the fun begins, let's create a simple script to familiarize ourselves with this
490300	491300	software.
491300	495140	First, create a file called script.ahk.
495140	499700	Now we need to open it, again you can do that with Notepad but I advise you to download
499700	504620	the script editor specifically designed for AHK which will make the process easier but
504620	506980	as I said, it is not necessary.
506980	512860	To download the editor, go to AutoHotKey.com, Cintillatex editor for AHK and click installer
512860	514860	to download the installer file.
514860	519420	Then go through a simple installation process and leave all checkmarks by default.
519420	523380	When it's done, now you should be able to click on your script with the right button
523380	528660	and see an option, edit script, press on it and it will open the editor.
528660	533060	If you wonder how to customize the color scheme, download the properties and user settings
533060	535700	files from the description of the video.
535700	542860	Go to see, users, your username, documents, AutoHotKey, Cintillatex editor and replace
542860	548460	Cintillatex editor users.properties and then go to styles and insert style 1 into this
548460	549660	folder.
549660	555260	Then open your script, go to tools, Cintillatex editor for AutoHotKey settings and in the
555260	559100	style menu select style 1 and press update.
559100	563100	While doing that, I also advise you to uncheck the auto backup feature for the program to
563100	569340	not create backup files all the time but this is up to you.
569340	571220	Now let's try to learn the basics.
571220	576060	If you have your script open, you should see a default header which we're not gonna change.
576060	578620	Now let's write a very simple script below.
578620	581060	Why don't we make computer type something for us?
581060	584740	Let's choose a key we're gonna assign our text to, let it be 1.
584740	590260	To assign something to a key you need to type the name of the key and then type colon twice.
590260	594400	The list of the keys and a lot of other useful information can be found by clicking on an
594400	599660	active AHK script on your taskbar which will appear after we run our first script by right
599660	602020	clicking and pressing help.
602020	607140	Then expand usage and syntax in the content bar on the right and select list of keys.
607140	610540	Here you can find all the keys you might need in your script.
610540	613100	Numbers and letters are used as they are.
613100	617540	Note again that for the icon to appear you need to run a non-empty script.
617540	619320	So let's fix that part.
619320	621780	We wrote 1 and double colon.
621780	624900	Now on a new string we're gonna use a command send.
624900	628740	It is the main function you need to know in order to create any shortcuts.
628740	632580	Mainly it is used to send input from keys and their values.
632580	635300	Let's type send and then the following text.
635300	637240	This is an AHK script.
637240	642940	So what it will do is when you press 1 it will type this exact string of text for you.
642940	646940	But don't forget to type return in the end of a shortcut for the script to move on to
646940	650620	other shortcuts otherwise the script might get stuck.
650620	655340	Now when the script is ready click file, save or simply press ctrl s.
655340	657100	Now you can close the script.
657100	659460	Now click on your script in order to run it.
659460	662460	Now you can see the icon has appeared on your taskbar.
662460	667860	From here you can right click on it and open help page, exit the script, reload the script
667860	671300	or open windows pi which will come to later.
671300	674340	Now let's open notepad and try to press 1.
674340	677220	Wonderful, now we have our script working.
677220	678980	Now let's have some more fun.
678980	683660	Let's open the script by right clicking on the AHK icon and pressing edit the script.
683660	688260	Now we're gonna learn how to send key combinations such as selecting all text.
688260	690580	Let's type 2 and double colon.
690580	694660	Now let's type send, comma and now we need to use braces.
694660	699020	Braces are used to send keys as though they were actually pressed unlike sending the copy
699020	701260	of the text we typed previously.
701260	708100	Type this, ctrl down inside of the braces, A inside of the braces and ctrl up also inside
708100	709620	of the braces.
709620	714740	So what it does, it will press down the ctrl key, then while the ctrl key is being pressed
714740	719420	it will press and release A and then it will release the ctrl key.
719420	724740	So we have a well-known ctrl A combination and don't forget to type return.
724740	726660	Let's go ahead and save our script.
726660	730900	Now the script is still running so in order for changes to be applied you need to reload
730900	731980	the script.
731980	736060	Now once it reloaded you can go ahead and try to select our previously typed string of
736060	738860	text in notepad by pressing 2.
738860	740100	And now we have it.
740100	744780	The last thing let's create this shortcut, ctrl and 3.
744780	753460	Double colon, send ctrl down, A ctrl up, send ctrl down, C ctrl up for copying the text,
753460	759100	send right to set the cursor at the end of the string, send enter to enter a new line
759100	766260	of text, send ctrl down, V ctrl up to paste a copied text and return.
766260	771140	Now save the script and reload it and if we open the notepad and press the newly created
771140	776140	shortcut ctrl plus 3 it basically duplicates whatever text is written.
776140	780900	You can do that as many times as you want and as a fun math fact the number of strings
780900	785380	will grow according to an exponential function with a base equal to the initial number of
785380	786380	strings.
786380	790420	Essentially, these are the basics you need to know to have some understanding of how
790420	795740	this script writing program works and how to run your own simple scripts in AHK.
795740	801700	Starting from AHK to AHI all these principles transfer directly without any changes.
801700	805780	If you want to learn more I encourage you to go and read the help manual.
805780	810700	There you can find some other examples and tutorials about how AHK functions.
810700	814100	Search tab can be extremely useful at times too.
814100	817460	For now let's move on.
817460	821980	So we want to set up a second keyboard so that when we press the button on it a certain
821980	827420	combination will be performed and we don't want to take up the keys on our main keyboard.
827420	832660	First thing I'm gonna ask you to do is to create a folder on your desktop called AHK.
832660	836060	This is done to simplify and organize the whole process.
836060	838420	Next we need to install the interception driver.
838420	842700	The detailed description of the installation process can be found on a github page from
842700	844980	where we're gonna download the AHI.
844980	847300	You can find the link in the description below.
847300	851540	To download the driver itself though you need to go to a different github page the link
851540	853940	to which will also be in the description.
853940	859780	When downloaded extract the zip archive.
859780	864340	After that copy this folder to our AHK desktop folder.
864340	867940	Inside locate the commonline installer folder and open it.
867940	872900	Here you can see the installation file called installinterception.exe.
872900	875580	But to install the driver you can just double click on it.
875580	878700	You need to open the commonline as an administrator.
878700	884620	For this in the windows search on the taskbar type cmd and press run as administrator.
884620	889340	From here you need to navigate inside the commonline to the installinterception.exe
889340	890340	file.
890340	895140	To do that type cd which stands for change directory and then press space.
895140	900340	Now go to the file explorer and copy the path to the installer as it is shown.
900340	903140	Paste it to cmd and press enter.
903140	905380	Now we can run our installer.
905380	913740	Copy and paste the full name of it and then type forward slash install and press enter.
913740	917540	The installation should be complete after you reboot your PC.
917540	925180	Now go to hi github page and from there download the hi archive of a 0.5.2 version and this
925180	931180	is important as there is a crucial file missing in the 0.5.3 version.
931180	935300	Extract it and copy the folder to our AHK desktop folder.
935300	942020	Now what we need to do is to copy two folders from desktop, AHK, interception, library folder
942020	948660	and paste them into desktop, AHK, autohot, interception, library folder.
948660	953660	You might need to run the unlockr ps1 file but let's check if it's needed first.
953660	960420	In a desktop, AHK, autohot, interception folder, find monitor.ahk file and simply double click
960420	961420	on it.
961420	964580	If everything is correct, a large window should pop up.
964580	966340	You can close it for now.
966340	971340	If the window did not appear, try running the unlockr ps1 file as administrator.
971340	975700	For more information, you can read the installation guide on the github page.
975700	981540	Now to make our life easier, let's copy the content of library folder to see users, your
981540	987460	username, documents, autohot key, library so that we can run our scripts from any place
987460	990660	outside of this autohot interception folder.
990660	993180	Also you need to be aware of your script's header.
993180	997820	The include section should have autohot interception in angled brackets.
997820	1003460	When we're done with this, open the AHK folder and go to the autohot interception folder.
1003460	1006580	There open the monitor.ahk file again.
1006580	1010900	In the opened window, you can see the list of devices connected to our computer.
1010900	1015340	I should say that each device has its own unique ID number so when copied once, you
1015340	1018620	don't need to check and change it every time you run your script.
1018620	1020180	This is very useful.
1020180	1025060	So to see which ID is assigned to a particular device, you need to consecutively activate
1025060	1027620	each of these devices one by one.
1027620	1030380	Let's start with the first, ID1.
1030380	1034540	Inside of the windows, there are unique IDs that are assigned to any device and these
1034540	1040180	IDs change every time you plug and unplug different devices, but the unique device's ID remains
1040180	1041180	the same.
1041180	1044140	Let's activate device number one.
1044140	1048780	Now I've got two keyboards connected to my laptop, one of them is an inbuilt keyboard.
1048780	1052700	When I try to press any key on this keyboard, we can see that this is the keyboard number
1052700	1056260	one, as the keys that I pressed showed up in the window below.
1056260	1060140	Now we need to figure out what's the ID of the second keyboard that is connected to my
1060140	1061500	computer.
1061500	1064900	So we check the first keyboard and check the second one.
1064900	1069460	If I try press keys on my second keyboard, I can see keys showing up on the screen in
1069460	1070700	the window below.
1070700	1074540	So that means that the unique ID number of my keyboard is this.
1074540	1079340	You may need to go further if you have more devices or if your second keyboard has a different
1079340	1081380	ID inside the windows.
1081380	1084340	But since we found it, we don't need to go further.
1084340	1088380	Let's go ahead and copy the number by pressing the copy button right next to it.
1088380	1092780	Let's open notepad and paste this number so that it won't get lost.
1092780	1096980	When we figured out what's the ID of our second keyboard, we can close the window.
1096980	1102820	Now inside of the same folder, open the file, subscribe allexample.ahk, press the right
1102820	1105520	button and select edit script.
1105520	1109500	Now you can see the default structure of the script that we're going to be using.
1109500	1113900	To create our own script, in our case we don't want to use any mouse like devices, so we
1113900	1116700	may delete all mouse related strings.
1116700	1121820	Now let's change the ID inside of the brackets in the get keyboard ID function.
1121820	1126200	Let's go ahead and copy the ID we pasted previously into our notepad.
1126200	1129060	Let's paste the ID inside of these brackets.
1129060	1133780	Now we have our template ready and we can save the file onto our desktop.
1133780	1138740	Press save, go to your desktop and rename it as second keyboard.
1138740	1144260	What I recommend is opening your initialscript.ahk and copying the header from there into our
1144260	1145980	newly created template.
1145980	1150060	I'm not sure if this is necessary, but for the sake of compatibility I think it is worth
1150060	1151060	doing it.
1151060	1155460	Now, since our keyboard has its own unique number, every key on it has its own unique
1155460	1156460	number too.
1156780	1161100	So to figure out what's the number of every key, we simply need to run the template script
1161100	1165660	that we've just created, as it already contains a function specifically for defining a number
1165660	1169900	of every key which will be shown in a small box near your cursor.
1169900	1171540	Let's go ahead and do that.
1171540	1173540	Run the script by double clicking on it.
1173540	1177220	Now let's go ahead and try to press any key on the keyboard.
1177220	1181660	When I press an H key, it shows that the number of the key is 35.
1181660	1186580	Now what I advise you to do is to create a cheat sheet of all keys on your keyboard.
1186580	1190100	It's gonna be a long process writing this all down, but I hope that the file that I'm
1190100	1193260	gonna provide you with will help you with this task.
1193260	1197700	As you can see, in my cheat sheet file, I've written down all the numbers of all the keys
1197700	1199260	on my keyboard.
1199260	1203500	One thing to note, if you wanna fold something inside the script editor, in the first string
1203500	1208700	of the area that you wanna fold, you need to type semicolon and then a left brace.
1208700	1213580	And in the end of the area, you need to type semicolon and a right brace.
1213580	1217660	Semicolon is used to create a common string so that everything that goes after it will
1217660	1219820	not be perceived by the compiler.
1219820	1224380	To fold the area, simply press the minus button next to the first line.
1224380	1228540	After you've figured out what are the unique IDs of the keys that you need, we can open
1228540	1232260	our second keyboard.ahk file again.
1232260	1237700	Next we can try to assign certain key combination to our keys using their unique IDs.
1237700	1241260	In the description of the video, there are gonna be a link to all the files that are
1241260	1245100	shown in this video, including my working current script.
1245100	1249180	In this script, let's take a look at some simple example that we can break down.
1249180	1253940	First, all the shortcuts should be inside of this main function called key event and
1253940	1257560	our function is located inside these main braces.
1257560	1261740	In the beginning of the video, I showed you how you can enable the pencil tool by pressing
1261740	1264660	an insert key on the second keyboard.
1264660	1266100	Here's the script for it.
1266100	1271900	So you simply need to type if then type state, which is actually state equals one to create
1271900	1277260	the condition for the function that if the key is pressed and the sign and the ID of
1277260	1282140	the key is 338, which we figured out through our previous script, then we're gonna run
1282140	1284060	this piece of the script.
1284060	1289380	So just to remind you what actions you need to perform in order to enable the pencil tool,
1289380	1293060	you need to press Alt, H, P and 1.
1293060	1299020	So here it is, you just type send, Alt, H, P and 1.
1299020	1300180	That's all?
1300180	1301640	That's all there is to it?
1301640	1304580	Not much different from our first script, right?
1304580	1309260	But note that here you don't have to type return because we're operating with a function
1309260	1314500	and this function has no value to return nor does any cycle needs to be broken.
1314500	1319100	It is due to how functions work in general, but it doesn't really matter now.
1319100	1323940	Going back to our script, there are definitely functions that are more complex than this.
1323940	1327620	Sometimes you can't just substitute several keys for one, sometimes you need to include
1327620	1329940	some mouse moves and clicks.
1329940	1334980	For example, as I've already shown, not only we can make our computer tap for us, but we
1334980	1336900	can make it draw for us.
1336900	1339420	Let's try to make something more practical though.
1339420	1343920	Instead of enabling a pencil tool by entering a combination of keys, we can make our computer
1343920	1347420	move the cursor to a pencil sign and press on it.
1347420	1351580	Like here, I press the right alt key and it does exactly that.
1351580	1354380	For this, we will need to use a window spy.
1354380	1359700	As previously shown, window spy can be opened by right clicking on an HK icon in a taskbar
1359700	1361740	and selecting window spy.
1361740	1365620	For now, all we are interested in is the mouse position window.
1365620	1369020	The numbers represent the current coordinates of your cursor.
1369020	1373100	The screen coordinates are relative to the upper left corner of your screen.
1373100	1377420	The window coordinates are relative to the same corner of a specific window, including
1377420	1381900	the title bar, menu bar, status bar and etc.
1381900	1384100	Client excluding them.
1384100	1389700	Using functions like mouse move or mouse click, you can move and click anywhere on the screen.
1389700	1391380	So let's write a script.
1391380	1392940	First off, we choose a key.
1392940	1395040	Let it be right all this time.
1395040	1399220	Then we set the default mouse speed to 0 for it to move instantly.
1399220	1403460	And with mouse get position command, we save our current cursor position on the screen
1403460	1404940	as an anchor point.
1404940	1407360	We set the coordinate mode as client.
1407360	1411300	So that when we are not in the full screen mode, we will still be able to use the script
1411300	1415380	unless we make the window too small and the icons are minimized.
1415380	1419340	Now using window spy, let's determine the position of the pencil tool relative to the
1419340	1423820	client and save them in X1 and Y1 parameters.
1423820	1428580	Then we finally move our mouse to the position of the pencil sign using mouse move command
1428900	1431700	and then we click on it with a click command.
1431700	1436420	Note that in mouse move, we need to enter values rather than variables, so to access
1436420	1440580	the value of X1 for example, we put it inside person signs.
1440580	1444980	Alternatively, you can use mouse click command, which is a combination of the two strings
1444980	1445980	above.
1445980	1449140	For this function, you need to enter the actual variables.
1449140	1453340	For these syntax details, use a search tab in a help manual.
1453340	1457580	After clicking on the sign, we return our cursor to its initial position with the mouse
1457580	1460980	move command and type return at the end.
1460980	1461980	That's all.
1461980	1465340	That easy you can automate any mouse moves on your computer.
1465340	1467700	Now, a couple of words needs to be said.
1467700	1472460	For some reason in Microsoft Paint, it shows that the starting point of the window is outside
1472460	1477860	of it, so in cases like that, you just need to test this stuff and see which one Windows
1477860	1481180	or client coordinates work for your program.
1481180	1485660	You also need to be careful with this method because it is much less stable and universal
1485660	1487380	and often times limited.
1487380	1490900	Despite the screen resolution changes, for example, you'll need to tweak your script
1490900	1492380	for it to work.
1492380	1497220	You also might not be able to access items in your program when it's not full screen,
1497220	1502300	so just be aware that this is an alternative and sometimes an unavoidable one, but it's
1502300	1503940	not without its flows.
1503940	1506620	It's always good to know both methods.
1506620	1510620	Another extremely important thing to know, because sometimes a certain combination cannot
1510620	1515100	be performed instantly, be it due to your computer being old and slow or because of
1515100	1519820	the program being slow itself, likely sometimes you will need a small delay between some of
1519820	1521020	the actions.
1521020	1526420	The function for delay in HK is sleep and after a comma, you need to type a number of
1526420	1529540	milliseconds that you want your script to wait for.
1529540	1535100	My advice using a delay, if delay is not obvious and if your script is supposed to work but
1535100	1538580	it doesn't, try using delay whenever possible.
1538580	1544300	You might be surprised by where delay sometimes happens to be used.
1544300	1548300	Now since in the beginning of the video I showed you the example with DaVinci Resolve,
1548300	1552820	I gotta mention one useful feature that you can integrate into AHK.
1552820	1557220	The feature is called tap hold manager and it basically tells your computer if the key
1557220	1560460	was either pressed or if it is being held.
1560460	1565220	The thing is that in Windows if you press and hold a key, it sends it once and after
1565220	1570340	a short delay, it starts spamming this key repeatedly, so Windows automatically runs
1570340	1575940	its own cycle and with each iteration it sends the key that you press, so you don't
1575940	1578420	have much control over the process.
1578420	1581260	And essentially there are two ways of looking at it.
1581260	1585540	You may say that you are fine with it and simply replace a key for some other action
1585540	1588060	that will be repeated automatically.
1588060	1593460	Like for example I can replace a left arrow key for a small mouse movement and if I hold
1593460	1598900	it, the key is getting spammed by default and we get this mouse movement.
1598900	1603020	However, another way of looking at it is when you wanna have more control.
1603020	1608500	So with AHK it is possible to set up your own cycle where you'll be in charge of how
1608500	1612780	fast iterations happen using sleep command for example.
1612780	1615820	Will there be a delay in the beginning or not?
1615820	1618860	And even here there are several ways of doing that.
1618860	1622900	Some of them might be better in one case, some might be better in another, it's just
1622900	1625460	too much to explain for a single video.
1625460	1628300	I just wanna show you that this is possible.
1628300	1630900	But I'm going to show you one way of doing it.
1630900	1635540	And the advantage of this method is that not only you get more control, it becomes possible
1635540	1641340	to recognize how much times the key was pressed and run different scripts accordingly.
1641340	1642740	This simplest example.
1642740	1647660	In Notepad, if I tap control once, it types hello.
1647660	1652780	If I tap control two times, it types my name is Richard.
1652780	1656620	And if I tap it three times, it types what is your name?
1656620	1659940	Well, we're not gonna leave Richard without an answer, right?
1659940	1664420	For that I hold the control key and it types my name is Sarah.
1664420	1670020	And finally if I tap it once and then hold it, we get a nice to meet you.
1670020	1674780	And here we have a complete conversation with just a single button.
1674780	1675780	Isn't that amazing?
1675780	1677780	Let's take a look at the script.
1677780	1680980	The main thing that we need to look at is this string.
1680980	1685820	Here I tell the computer that everything related to a control key will be handled by this
1685820	1687820	function number one.
1687820	1692260	Inside of the function number one, as you can see, we have five different conditions.
1692260	1697100	In the first one, we have a condition that we're not holding the key is hold equals
1697100	1698420	one.
1698420	1704180	Then that we tapped it once, taps equals one, and that at the end we're gonna react
1704180	1708020	to only when the key was pressed, state equals one.
1708020	1711660	And inside we have a simple send comment sending a text.
1711660	1716700	For other four cases, you simply change is hold and taps parameters.
1716700	1718100	And here we have it.
1718100	1722580	Just don't forget to include tap hold manager in the include section and you're good to
1722580	1723580	go.
1723580	1728180	In the example with DaVinci Resolve, all that's different is that we additionally include
1728180	1735980	interception tap hold library and change the new tap hold manager to the new interception
1735980	1738820	tap hold H I keyboard ID.
1738820	1741060	Essentially this is all the difference.
1741060	1746220	Of course, the script itself is different, but the base is almost identical.
1746220	1753180	In this script, I use set timer and go sub comments for initializing the cycle or loop.
1753180	1759980	Set timer sets the time between each iteration and go sub sends you to a label called move
1759980	1761420	right.
1761420	1766340	Once it's initialized, the script under the label gets repeatedly run.
1766340	1769580	In our case, it is moving mouse cursor to the right.
1769580	1773060	The script is initialized with the same if condition.
1773060	1778020	That is, when you press the button, we want to break this loop when the key is released.
1778020	1782340	Hence, we create this if condition or return of the timer.
1782340	1788460	One small detail is that here inside of this add function, I included two additional parameters.
1788460	1793780	I basically set the timer of registering a hold to zero, so that as soon as the key
1793780	1797780	is pressed, it is considered a hold, not a tap.
1797780	1802980	It is done to remove the initial small default delay before registering a hold.
1802980	1806340	Accordingly, I set the if conditions.
1806340	1810060	Download the script from the description and use it as a template.
1810060	1814700	You can download the tab hold manager from the GitHub page, the link to which is as always
1814700	1816700	in the description of the video.
1816700	1821180	Copy the content of the library folder to your folder in the documents folder, the same
1821180	1826860	as with H I. Inside of the archive, you can also open the included examples and use them
1826860	1829660	as a template as well.
1829660	1834100	In this video, I'm not gonna go into all the details of script writing, so feel free
1834100	1838260	to download the files from the link in the description and as always, go and read the
1838260	1843700	help manual for more functions and other useful information, like targeting a specific window,
1843700	1844700	for example.
1844700	1848960	Now, rounding this up, let me give you a couple more tips.
1848960	1853140	One good advice would be is to not always try and go for an obvious solution.
1853140	1857060	For example, in pain, there was a problem that when I choose a certain shape from the
1857060	1861260	list, the position of selection is bound to a current shape, which means that you need
1861260	1866580	to store the information about your current column and row in a global variable.
1866580	1870780	In addition to that, the amount of times you need to press right and down vary depending
1870780	1872940	on which row your currently are.
1872940	1878380	Also, if you wanna get from the first three rows to the fourth, you need to first go over
1878380	1885700	columns, then rows, and the opposite if you're moving from the fourth row to the first three.
1885700	1891260	And I did that with a lot of different conditions and it worked, but there was a much easier
1891260	1892260	solution.
1892260	1897300	To reset the selection, you can simply enable another tool like Pencil and then start from
1897300	1900180	the first both row and column.
1900180	1902900	These are the tricks you need to look for.
1902900	1907260	If you wanna be able to reload your script fast, at the end of the script you can bind
1907260	1912740	a comment, reload, to any key like I did in this script for example.
1912740	1917140	Use Ctrl plus Q to comment and uncomment selected lines.
1917140	1922180	Again, use the following structure to fold big chunks of a script.
1922180	1926700	Once again, I cannot possibly cover all the details and examples in a single video without
1926700	1931660	making it ridiculously long, so I hope that what I showed you will get you started and
1931660	1936420	make your learning process easier because when I started out, I wish there was a tutorial
1936420	1937900	like that.
1937900	1942180	But all in all, be creative with your scripts and keep learning.
1942180	1943260	Thanks for watching!
