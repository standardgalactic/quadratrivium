WEBVTT

00:00.000 --> 00:05.360
Hello everyone, in this video I will show you how you can make interesting art in Microsoft

00:05.360 --> 00:10.240
Paint as well as how you can automate almost anything on your computer and significantly

00:10.240 --> 00:12.200
boost your productivity.

00:12.200 --> 00:13.200
Sounds interesting?

00:13.200 --> 00:15.960
Then let's get to it.

00:15.960 --> 00:19.920
Working in any program, often times you have to press the same shortcuts again and again

00:19.920 --> 00:24.600
or perform repetitive combinations which sometimes can hinder your workflow and take a lot of

00:24.600 --> 00:26.480
time long term.

00:26.480 --> 00:31.280
But what if I say that each of these actions, including moving your mouse and typing a text,

00:31.280 --> 00:34.840
can be performed by just pressing a single key at a time?

00:34.840 --> 00:40.480
In this tutorial I'm gonna show you how using free software called AutoHotKey or AHK you

00:40.480 --> 00:45.440
can assign any combination of keys or mouse moves to any key either on the second keyboard

00:45.440 --> 00:48.340
or on your main keyboard or mouse.

00:48.340 --> 00:52.400
You may want to apply this method to a second keyboard because if there are many things

00:52.400 --> 00:58.740
that can be automated it's not always convenient to override your current keys or existing shortcuts.

00:58.740 --> 01:02.840
So this will allow you to separate the inputs from different devices which is not possible

01:02.840 --> 01:04.840
in Windows by default.

01:04.840 --> 01:08.880
If you're already familiar with AHK you might want to skip to the part where I specifically

01:08.880 --> 01:12.320
set up a second keyboard with AHI.

01:12.320 --> 01:16.060
Now let me quickly demonstrate what is possible with this program.

01:16.060 --> 01:20.320
For this tutorial I'm gonna be using something that everyone is familiar with, Microsoft

01:20.320 --> 01:22.320
Paint and Notepad.

01:22.320 --> 01:26.400
I will also show you a couple of tricks in a free version of a video editing software

01:26.400 --> 01:28.160
called DaVinci Resolve.

01:28.160 --> 01:32.640
But AHK can be virtually used with any program that you would like to automate.

01:32.640 --> 01:37.960
In Microsoft programs like Word, Excel and others including Paint itself you can reach

01:37.960 --> 01:46.040
almost any tool or function by pressing an Alt key and then entering a certain combination.

01:46.040 --> 01:53.280
In Paint for example you can enable a pencil tool by entering Alt, H, P and 1.

01:53.280 --> 01:57.680
Of course you can also just move your cursor to the pencil sign and click on it.

01:57.680 --> 01:59.800
But why do we have to do any of that?

01:59.800 --> 02:01.920
Let's make our computer do that for us.

02:01.920 --> 02:05.720
At the end of the day, isn't it what computers were designed for?

02:05.720 --> 02:09.480
Here I have the script that I wrote with which it becomes possible to do the things we were

02:09.480 --> 02:10.920
talking about.

02:10.920 --> 02:14.960
With experience you'll be able to write similar scripts like it's a piece of cake.

02:14.960 --> 02:17.680
And for now let's just see what it can do.

02:17.680 --> 02:20.520
Let's say I feel like drawing with a pencil.

02:20.520 --> 02:25.640
On my second keyboard I press the insert key for that which by the way could be any key.

02:25.640 --> 02:29.480
Here I have a pencil enabled, let's draw a circle.

02:29.480 --> 02:34.760
Now why don't we fill a circle with some color, we press the home key for that one.

02:34.760 --> 02:37.880
Maybe the circle is alive and it has a name.

02:37.880 --> 02:41.720
Let's enable the text tool and call this blob Richard.

02:41.720 --> 02:44.720
Now when it's alive and has a name, let's give it vision.

02:44.720 --> 02:50.880
For that we enable the eraser tool by pressing delete and simply erase two little spots.

02:50.880 --> 02:54.680
Heck, let's give it a mouth too.

02:54.680 --> 02:57.600
Let's give it hands using the line shape tool.

02:57.600 --> 03:03.200
Perfect, maybe it will be easier for Richard to move around if it has legs.

03:03.200 --> 03:07.120
Let's give him a pair with the curve shape tool.

03:07.120 --> 03:09.880
Excellent.

03:09.880 --> 03:13.760
Now what if it's not an actual Richard but a picture of him, let's draw a nice little

03:13.760 --> 03:20.960
frame with the rounded rectangle shape tool and let's choose the size of it to our liking.

03:20.960 --> 03:26.280
And here we have it, the art of a happy blob Richard, how beautiful is that?

03:26.280 --> 03:30.640
And you can do that too and I'll explain how later in the video.

03:30.640 --> 03:34.720
But let me show you one more trick that I've discovered automating paint, not that it's

03:34.720 --> 03:37.680
really demonstrative, it's just cool.

03:37.680 --> 03:42.400
With some basic math I was able to write a script for drawing perfect circles, here's

03:42.400 --> 03:47.360
how it happens, but the real magic begins when you move your mouse during the process.

03:47.360 --> 03:51.580
By doing that you can get these interesting spiky circles which you probably remember

03:51.580 --> 03:54.200
from the thumbnail of this video.

03:54.200 --> 03:59.200
Now let me show you some real automation for Da Vinci Resolve, the software that I mentioned

03:59.200 --> 04:00.760
earlier.

04:00.760 --> 04:04.100
In the timeline you can see the video you're watching being edited.

04:04.100 --> 04:07.780
If you remember this part of the video, here I have 4 different keys that appear on the

04:07.780 --> 04:09.960
screen one by one.

04:09.960 --> 04:14.220
When initially imported the size of a single key takes up the whole frame so I shrink them

04:14.220 --> 04:18.540
down with this zoom setting to 22% of their initial size.

04:18.540 --> 04:22.460
I also spread them along the screen with this position setting.

04:22.460 --> 04:26.180
Let's break down the whole process step by step.

04:26.180 --> 04:30.780
First you select a clip in a timeline, then move the cursor to the field next to the needed

04:30.780 --> 04:31.780
setting.

04:31.780 --> 04:34.140
Then you press and hold the left mouse button.

04:34.140 --> 04:36.780
And then you move your mouse left or right.

04:36.780 --> 04:41.820
Then you release the mouse button and probably move your cursor somewhere else.

04:41.820 --> 04:45.500
Not to mention you have to physically run with your eyes across the screen when you

04:45.500 --> 04:49.900
move your cursor and when you look at the result in a different area of the screen.

04:49.900 --> 04:53.980
That's quite a lot of actions for such a simple task if you think.

04:53.980 --> 04:58.980
Then I thought, wouldn't it be cool to just be able to move a selected clip with something

04:58.980 --> 05:01.380
like arrow keys on a second keyboard?

05:01.380 --> 05:03.940
Well, that's exactly what I did.

05:03.940 --> 05:09.560
With the help of auto-holding reception and another useful add-on called tap hold manager.

05:09.560 --> 05:13.860
Now I can simply select a clip and move it naturally with the arrow keys on my second

05:13.860 --> 05:16.860
keyboard without ever bothering to move my mouse.

05:16.860 --> 05:19.340
AHK does everything for me.

05:19.340 --> 05:24.140
Applying same principles now using page up and page down keys I can easily resize a

05:24.140 --> 05:25.140
selected clip.

05:25.140 --> 05:30.100
I don't know about you but I was impressed when I first saw this in action.

05:30.100 --> 05:34.260
One last thing that I really want to show you is this quite simple automation but it

05:34.260 --> 05:38.860
just goes to show how much time you can really save using AHK.

05:38.860 --> 05:41.940
Right now I'm creating the subtitles for this video.

05:41.940 --> 05:46.580
Almost for every sentence I have to create a distinct clip and as you can see there are

05:46.580 --> 05:48.500
quite a lot of them.

05:48.500 --> 05:51.380
Now what would it look like without a script?

05:51.380 --> 05:57.340
First I need to select a needed line of text, then I press control C, then go to DaVinci

05:57.340 --> 06:00.060
and click right button on the timeline.

06:00.060 --> 06:06.140
In a little menu I select add subtitle, then I go over to this text field where I double

06:06.140 --> 06:11.420
click and press control V and then finally move my cursor back to adjust the length of

06:11.420 --> 06:12.820
the clip.

06:12.820 --> 06:17.500
With the AHK all I have to do is to select the needed line of the script and press a

06:17.500 --> 06:19.180
single key.

06:19.180 --> 06:24.020
And like a charm it creates this subtitle clip that I just need to adjust.

06:24.020 --> 06:28.420
This is actually crazy if I would have to go and do all those repetitive actions for

06:28.420 --> 06:30.700
every single small clip.

06:30.700 --> 06:34.500
I hope that with all the examples I managed to show you that the software can be extremely

06:34.500 --> 06:39.300
useful even for the smallest tasks and that it has huge potential in general.

06:39.300 --> 06:42.660
But now the question is what do we need to set it all up?

06:42.660 --> 06:47.540
So for automation purposes we're gonna be using a free software called AHK which stands

06:47.540 --> 06:49.460
for AutoHotKey.

06:49.460 --> 06:53.900
This program allows you to run your own scripts to automate many different actions on your

06:53.900 --> 06:54.900
PC.

06:54.900 --> 06:59.900
This software is extremely diverse and in my opinion greatly underrated, but however

06:59.900 --> 07:03.580
diverse it is we will need only a small portion of it.

07:03.580 --> 07:07.100
To use AHK you don't need to have multiple devices connected.

07:07.100 --> 07:12.260
AHK works great for some simple automation which we will learn about just in a second.

07:12.260 --> 07:16.500
However, if you want to send the input from several devices separately which is the main

07:16.500 --> 07:22.260
focus of this video, you will need to set up AHI or AutoHot Interception.

07:22.260 --> 07:27.440
Simply put, AHI is based on a driver that allows you to intercept any input coming into your

07:27.440 --> 07:32.460
computer and it is the thing that will allow us to differentiate our keyboards.

07:32.460 --> 07:34.300
Now let's get down to business.

07:34.300 --> 07:38.580
Go to AutoHotKey.com and download the current version of the software.

07:38.580 --> 07:42.300
Run the installation file and select the Express installation.

07:42.300 --> 07:47.260
After AHK is installed, you are now able to create AHK files by clicking right button

07:47.260 --> 07:51.220
either on your desktop or inside the file explorer.

07:51.220 --> 07:57.260
Select New and then select AHK script which will create a file with AHK extension.

07:57.260 --> 08:02.060
Alternatively, you can create and write a text file in a default Windows Notepad and

08:02.060 --> 08:05.780
then manually change the txt extension to AHK.

08:05.780 --> 08:10.300
Now the fun begins, let's create a simple script to familiarize ourselves with this

08:10.300 --> 08:11.300
software.

08:11.300 --> 08:15.140
First, create a file called script.ahk.

08:15.140 --> 08:19.700
Now we need to open it, again you can do that with Notepad but I advise you to download

08:19.700 --> 08:24.620
the script editor specifically designed for AHK which will make the process easier but

08:24.620 --> 08:26.980
as I said, it is not necessary.

08:26.980 --> 08:32.860
To download the editor, go to AutoHotKey.com, Cintillatex editor for AHK and click installer

08:32.860 --> 08:34.860
to download the installer file.

08:34.860 --> 08:39.420
Then go through a simple installation process and leave all checkmarks by default.

08:39.420 --> 08:43.380
When it's done, now you should be able to click on your script with the right button

08:43.380 --> 08:48.660
and see an option, edit script, press on it and it will open the editor.

08:48.660 --> 08:53.060
If you wonder how to customize the color scheme, download the properties and user settings

08:53.060 --> 08:55.700
files from the description of the video.

08:55.700 --> 09:02.860
Go to see, users, your username, documents, AutoHotKey, Cintillatex editor and replace

09:02.860 --> 09:08.460
Cintillatex editor users.properties and then go to styles and insert style 1 into this

09:08.460 --> 09:09.660
folder.

09:09.660 --> 09:15.260
Then open your script, go to tools, Cintillatex editor for AutoHotKey settings and in the

09:15.260 --> 09:19.100
style menu select style 1 and press update.

09:19.100 --> 09:23.100
While doing that, I also advise you to uncheck the auto backup feature for the program to

09:23.100 --> 09:29.340
not create backup files all the time but this is up to you.

09:29.340 --> 09:31.220
Now let's try to learn the basics.

09:31.220 --> 09:36.060
If you have your script open, you should see a default header which we're not gonna change.

09:36.060 --> 09:38.620
Now let's write a very simple script below.

09:38.620 --> 09:41.060
Why don't we make computer type something for us?

09:41.060 --> 09:44.740
Let's choose a key we're gonna assign our text to, let it be 1.

09:44.740 --> 09:50.260
To assign something to a key you need to type the name of the key and then type colon twice.

09:50.260 --> 09:54.400
The list of the keys and a lot of other useful information can be found by clicking on an

09:54.400 --> 09:59.660
active AHK script on your taskbar which will appear after we run our first script by right

09:59.660 --> 10:02.020
clicking and pressing help.

10:02.020 --> 10:07.140
Then expand usage and syntax in the content bar on the right and select list of keys.

10:07.140 --> 10:10.540
Here you can find all the keys you might need in your script.

10:10.540 --> 10:13.100
Numbers and letters are used as they are.

10:13.100 --> 10:17.540
Note again that for the icon to appear you need to run a non-empty script.

10:17.540 --> 10:19.320
So let's fix that part.

10:19.320 --> 10:21.780
We wrote 1 and double colon.

10:21.780 --> 10:24.900
Now on a new string we're gonna use a command send.

10:24.900 --> 10:28.740
It is the main function you need to know in order to create any shortcuts.

10:28.740 --> 10:32.580
Mainly it is used to send input from keys and their values.

10:32.580 --> 10:35.300
Let's type send and then the following text.

10:35.300 --> 10:37.240
This is an AHK script.

10:37.240 --> 10:42.940
So what it will do is when you press 1 it will type this exact string of text for you.

10:42.940 --> 10:46.940
But don't forget to type return in the end of a shortcut for the script to move on to

10:46.940 --> 10:50.620
other shortcuts otherwise the script might get stuck.

10:50.620 --> 10:55.340
Now when the script is ready click file, save or simply press ctrl s.

10:55.340 --> 10:57.100
Now you can close the script.

10:57.100 --> 10:59.460
Now click on your script in order to run it.

10:59.460 --> 11:02.460
Now you can see the icon has appeared on your taskbar.

11:02.460 --> 11:07.860
From here you can right click on it and open help page, exit the script, reload the script

11:07.860 --> 11:11.300
or open windows pi which will come to later.

11:11.300 --> 11:14.340
Now let's open notepad and try to press 1.

11:14.340 --> 11:17.220
Wonderful, now we have our script working.

11:17.220 --> 11:18.980
Now let's have some more fun.

11:18.980 --> 11:23.660
Let's open the script by right clicking on the AHK icon and pressing edit the script.

11:23.660 --> 11:28.260
Now we're gonna learn how to send key combinations such as selecting all text.

11:28.260 --> 11:30.580
Let's type 2 and double colon.

11:30.580 --> 11:34.660
Now let's type send, comma and now we need to use braces.

11:34.660 --> 11:39.020
Braces are used to send keys as though they were actually pressed unlike sending the copy

11:39.020 --> 11:41.260
of the text we typed previously.

11:41.260 --> 11:48.100
Type this, ctrl down inside of the braces, A inside of the braces and ctrl up also inside

11:48.100 --> 11:49.620
of the braces.

11:49.620 --> 11:54.740
So what it does, it will press down the ctrl key, then while the ctrl key is being pressed

11:54.740 --> 11:59.420
it will press and release A and then it will release the ctrl key.

11:59.420 --> 12:04.740
So we have a well-known ctrl A combination and don't forget to type return.

12:04.740 --> 12:06.660
Let's go ahead and save our script.

12:06.660 --> 12:10.900
Now the script is still running so in order for changes to be applied you need to reload

12:10.900 --> 12:11.980
the script.

12:11.980 --> 12:16.060
Now once it reloaded you can go ahead and try to select our previously typed string of

12:16.060 --> 12:18.860
text in notepad by pressing 2.

12:18.860 --> 12:20.100
And now we have it.

12:20.100 --> 12:24.780
The last thing let's create this shortcut, ctrl and 3.

12:24.780 --> 12:33.460
Double colon, send ctrl down, A ctrl up, send ctrl down, C ctrl up for copying the text,

12:33.460 --> 12:39.100
send right to set the cursor at the end of the string, send enter to enter a new line

12:39.100 --> 12:46.260
of text, send ctrl down, V ctrl up to paste a copied text and return.

12:46.260 --> 12:51.140
Now save the script and reload it and if we open the notepad and press the newly created

12:51.140 --> 12:56.140
shortcut ctrl plus 3 it basically duplicates whatever text is written.

12:56.140 --> 13:00.900
You can do that as many times as you want and as a fun math fact the number of strings

13:00.900 --> 13:05.380
will grow according to an exponential function with a base equal to the initial number of

13:05.380 --> 13:06.380
strings.

13:06.380 --> 13:10.420
Essentially, these are the basics you need to know to have some understanding of how

13:10.420 --> 13:15.740
this script writing program works and how to run your own simple scripts in AHK.

13:15.740 --> 13:21.700
Starting from AHK to AHI all these principles transfer directly without any changes.

13:21.700 --> 13:25.780
If you want to learn more I encourage you to go and read the help manual.

13:25.780 --> 13:30.700
There you can find some other examples and tutorials about how AHK functions.

13:30.700 --> 13:34.100
Search tab can be extremely useful at times too.

13:34.100 --> 13:37.460
For now let's move on.

13:37.460 --> 13:41.980
So we want to set up a second keyboard so that when we press the button on it a certain

13:41.980 --> 13:47.420
combination will be performed and we don't want to take up the keys on our main keyboard.

13:47.420 --> 13:52.660
First thing I'm gonna ask you to do is to create a folder on your desktop called AHK.

13:52.660 --> 13:56.060
This is done to simplify and organize the whole process.

13:56.060 --> 13:58.420
Next we need to install the interception driver.

13:58.420 --> 14:02.700
The detailed description of the installation process can be found on a github page from

14:02.700 --> 14:04.980
where we're gonna download the AHI.

14:04.980 --> 14:07.300
You can find the link in the description below.

14:07.300 --> 14:11.540
To download the driver itself though you need to go to a different github page the link

14:11.540 --> 14:13.940
to which will also be in the description.

14:13.940 --> 14:19.780
When downloaded extract the zip archive.

14:19.780 --> 14:24.340
After that copy this folder to our AHK desktop folder.

14:24.340 --> 14:27.940
Inside locate the commonline installer folder and open it.

14:27.940 --> 14:32.900
Here you can see the installation file called installinterception.exe.

14:32.900 --> 14:35.580
But to install the driver you can just double click on it.

14:35.580 --> 14:38.700
You need to open the commonline as an administrator.

14:38.700 --> 14:44.620
For this in the windows search on the taskbar type cmd and press run as administrator.

14:44.620 --> 14:49.340
From here you need to navigate inside the commonline to the installinterception.exe

14:49.340 --> 14:50.340
file.

14:50.340 --> 14:55.140
To do that type cd which stands for change directory and then press space.

14:55.140 --> 15:00.340
Now go to the file explorer and copy the path to the installer as it is shown.

15:00.340 --> 15:03.140
Paste it to cmd and press enter.

15:03.140 --> 15:05.380
Now we can run our installer.

15:05.380 --> 15:13.740
Copy and paste the full name of it and then type forward slash install and press enter.

15:13.740 --> 15:17.540
The installation should be complete after you reboot your PC.

15:17.540 --> 15:25.180
Now go to hi github page and from there download the hi archive of a 0.5.2 version and this

15:25.180 --> 15:31.180
is important as there is a crucial file missing in the 0.5.3 version.

15:31.180 --> 15:35.300
Extract it and copy the folder to our AHK desktop folder.

15:35.300 --> 15:42.020
Now what we need to do is to copy two folders from desktop, AHK, interception, library folder

15:42.020 --> 15:48.660
and paste them into desktop, AHK, autohot, interception, library folder.

15:48.660 --> 15:53.660
You might need to run the unlockr ps1 file but let's check if it's needed first.

15:53.660 --> 16:00.420
In a desktop, AHK, autohot, interception folder, find monitor.ahk file and simply double click

16:00.420 --> 16:01.420
on it.

16:01.420 --> 16:04.580
If everything is correct, a large window should pop up.

16:04.580 --> 16:06.340
You can close it for now.

16:06.340 --> 16:11.340
If the window did not appear, try running the unlockr ps1 file as administrator.

16:11.340 --> 16:15.700
For more information, you can read the installation guide on the github page.

16:15.700 --> 16:21.540
Now to make our life easier, let's copy the content of library folder to see users, your

16:21.540 --> 16:27.460
username, documents, autohot key, library so that we can run our scripts from any place

16:27.460 --> 16:30.660
outside of this autohot interception folder.

16:30.660 --> 16:33.180
Also you need to be aware of your script's header.

16:33.180 --> 16:37.820
The include section should have autohot interception in angled brackets.

16:37.820 --> 16:43.460
When we're done with this, open the AHK folder and go to the autohot interception folder.

16:43.460 --> 16:46.580
There open the monitor.ahk file again.

16:46.580 --> 16:50.900
In the opened window, you can see the list of devices connected to our computer.

16:50.900 --> 16:55.340
I should say that each device has its own unique ID number so when copied once, you

16:55.340 --> 16:58.620
don't need to check and change it every time you run your script.

16:58.620 --> 17:00.180
This is very useful.

17:00.180 --> 17:05.060
So to see which ID is assigned to a particular device, you need to consecutively activate

17:05.060 --> 17:07.620
each of these devices one by one.

17:07.620 --> 17:10.380
Let's start with the first, ID1.

17:10.380 --> 17:14.540
Inside of the windows, there are unique IDs that are assigned to any device and these

17:14.540 --> 17:20.180
IDs change every time you plug and unplug different devices, but the unique device's ID remains

17:20.180 --> 17:21.180
the same.

17:21.180 --> 17:24.140
Let's activate device number one.

17:24.140 --> 17:28.780
Now I've got two keyboards connected to my laptop, one of them is an inbuilt keyboard.

17:28.780 --> 17:32.700
When I try to press any key on this keyboard, we can see that this is the keyboard number

17:32.700 --> 17:36.260
one, as the keys that I pressed showed up in the window below.

17:36.260 --> 17:40.140
Now we need to figure out what's the ID of the second keyboard that is connected to my

17:40.140 --> 17:41.500
computer.

17:41.500 --> 17:44.900
So we check the first keyboard and check the second one.

17:44.900 --> 17:49.460
If I try press keys on my second keyboard, I can see keys showing up on the screen in

17:49.460 --> 17:50.700
the window below.

17:50.700 --> 17:54.540
So that means that the unique ID number of my keyboard is this.

17:54.540 --> 17:59.340
You may need to go further if you have more devices or if your second keyboard has a different

17:59.340 --> 18:01.380
ID inside the windows.

18:01.380 --> 18:04.340
But since we found it, we don't need to go further.

18:04.340 --> 18:08.380
Let's go ahead and copy the number by pressing the copy button right next to it.

18:08.380 --> 18:12.780
Let's open notepad and paste this number so that it won't get lost.

18:12.780 --> 18:16.980
When we figured out what's the ID of our second keyboard, we can close the window.

18:16.980 --> 18:22.820
Now inside of the same folder, open the file, subscribe allexample.ahk, press the right

18:22.820 --> 18:25.520
button and select edit script.

18:25.520 --> 18:29.500
Now you can see the default structure of the script that we're going to be using.

18:29.500 --> 18:33.900
To create our own script, in our case we don't want to use any mouse like devices, so we

18:33.900 --> 18:36.700
may delete all mouse related strings.

18:36.700 --> 18:41.820
Now let's change the ID inside of the brackets in the get keyboard ID function.

18:41.820 --> 18:46.200
Let's go ahead and copy the ID we pasted previously into our notepad.

18:46.200 --> 18:49.060
Let's paste the ID inside of these brackets.

18:49.060 --> 18:53.780
Now we have our template ready and we can save the file onto our desktop.

18:53.780 --> 18:58.740
Press save, go to your desktop and rename it as second keyboard.

18:58.740 --> 19:04.260
What I recommend is opening your initialscript.ahk and copying the header from there into our

19:04.260 --> 19:05.980
newly created template.

19:05.980 --> 19:10.060
I'm not sure if this is necessary, but for the sake of compatibility I think it is worth

19:10.060 --> 19:11.060
doing it.

19:11.060 --> 19:15.460
Now, since our keyboard has its own unique number, every key on it has its own unique

19:15.460 --> 19:16.460
number too.

19:16.780 --> 19:21.100
So to figure out what's the number of every key, we simply need to run the template script

19:21.100 --> 19:25.660
that we've just created, as it already contains a function specifically for defining a number

19:25.660 --> 19:29.900
of every key which will be shown in a small box near your cursor.

19:29.900 --> 19:31.540
Let's go ahead and do that.

19:31.540 --> 19:33.540
Run the script by double clicking on it.

19:33.540 --> 19:37.220
Now let's go ahead and try to press any key on the keyboard.

19:37.220 --> 19:41.660
When I press an H key, it shows that the number of the key is 35.

19:41.660 --> 19:46.580
Now what I advise you to do is to create a cheat sheet of all keys on your keyboard.

19:46.580 --> 19:50.100
It's gonna be a long process writing this all down, but I hope that the file that I'm

19:50.100 --> 19:53.260
gonna provide you with will help you with this task.

19:53.260 --> 19:57.700
As you can see, in my cheat sheet file, I've written down all the numbers of all the keys

19:57.700 --> 19:59.260
on my keyboard.

19:59.260 --> 20:03.500
One thing to note, if you wanna fold something inside the script editor, in the first string

20:03.500 --> 20:08.700
of the area that you wanna fold, you need to type semicolon and then a left brace.

20:08.700 --> 20:13.580
And in the end of the area, you need to type semicolon and a right brace.

20:13.580 --> 20:17.660
Semicolon is used to create a common string so that everything that goes after it will

20:17.660 --> 20:19.820
not be perceived by the compiler.

20:19.820 --> 20:24.380
To fold the area, simply press the minus button next to the first line.

20:24.380 --> 20:28.540
After you've figured out what are the unique IDs of the keys that you need, we can open

20:28.540 --> 20:32.260
our second keyboard.ahk file again.

20:32.260 --> 20:37.700
Next we can try to assign certain key combination to our keys using their unique IDs.

20:37.700 --> 20:41.260
In the description of the video, there are gonna be a link to all the files that are

20:41.260 --> 20:45.100
shown in this video, including my working current script.

20:45.100 --> 20:49.180
In this script, let's take a look at some simple example that we can break down.

20:49.180 --> 20:53.940
First, all the shortcuts should be inside of this main function called key event and

20:53.940 --> 20:57.560
our function is located inside these main braces.

20:57.560 --> 21:01.740
In the beginning of the video, I showed you how you can enable the pencil tool by pressing

21:01.740 --> 21:04.660
an insert key on the second keyboard.

21:04.660 --> 21:06.100
Here's the script for it.

21:06.100 --> 21:11.900
So you simply need to type if then type state, which is actually state equals one to create

21:11.900 --> 21:17.260
the condition for the function that if the key is pressed and the sign and the ID of

21:17.260 --> 21:22.140
the key is 338, which we figured out through our previous script, then we're gonna run

21:22.140 --> 21:24.060
this piece of the script.

21:24.060 --> 21:29.380
So just to remind you what actions you need to perform in order to enable the pencil tool,

21:29.380 --> 21:33.060
you need to press Alt, H, P and 1.

21:33.060 --> 21:39.020
So here it is, you just type send, Alt, H, P and 1.

21:39.020 --> 21:40.180
That's all?

21:40.180 --> 21:41.640
That's all there is to it?

21:41.640 --> 21:44.580
Not much different from our first script, right?

21:44.580 --> 21:49.260
But note that here you don't have to type return because we're operating with a function

21:49.260 --> 21:54.500
and this function has no value to return nor does any cycle needs to be broken.

21:54.500 --> 21:59.100
It is due to how functions work in general, but it doesn't really matter now.

21:59.100 --> 22:03.940
Going back to our script, there are definitely functions that are more complex than this.

22:03.940 --> 22:07.620
Sometimes you can't just substitute several keys for one, sometimes you need to include

22:07.620 --> 22:09.940
some mouse moves and clicks.

22:09.940 --> 22:14.980
For example, as I've already shown, not only we can make our computer tap for us, but we

22:14.980 --> 22:16.900
can make it draw for us.

22:16.900 --> 22:19.420
Let's try to make something more practical though.

22:19.420 --> 22:23.920
Instead of enabling a pencil tool by entering a combination of keys, we can make our computer

22:23.920 --> 22:27.420
move the cursor to a pencil sign and press on it.

22:27.420 --> 22:31.580
Like here, I press the right alt key and it does exactly that.

22:31.580 --> 22:34.380
For this, we will need to use a window spy.

22:34.380 --> 22:39.700
As previously shown, window spy can be opened by right clicking on an HK icon in a taskbar

22:39.700 --> 22:41.740
and selecting window spy.

22:41.740 --> 22:45.620
For now, all we are interested in is the mouse position window.

22:45.620 --> 22:49.020
The numbers represent the current coordinates of your cursor.

22:49.020 --> 22:53.100
The screen coordinates are relative to the upper left corner of your screen.

22:53.100 --> 22:57.420
The window coordinates are relative to the same corner of a specific window, including

22:57.420 --> 23:01.900
the title bar, menu bar, status bar and etc.

23:01.900 --> 23:04.100
Client excluding them.

23:04.100 --> 23:09.700
Using functions like mouse move or mouse click, you can move and click anywhere on the screen.

23:09.700 --> 23:11.380
So let's write a script.

23:11.380 --> 23:12.940
First off, we choose a key.

23:12.940 --> 23:15.040
Let it be right all this time.

23:15.040 --> 23:19.220
Then we set the default mouse speed to 0 for it to move instantly.

23:19.220 --> 23:23.460
And with mouse get position command, we save our current cursor position on the screen

23:23.460 --> 23:24.940
as an anchor point.

23:24.940 --> 23:27.360
We set the coordinate mode as client.

23:27.360 --> 23:31.300
So that when we are not in the full screen mode, we will still be able to use the script

23:31.300 --> 23:35.380
unless we make the window too small and the icons are minimized.

23:35.380 --> 23:39.340
Now using window spy, let's determine the position of the pencil tool relative to the

23:39.340 --> 23:43.820
client and save them in X1 and Y1 parameters.

23:43.820 --> 23:48.580
Then we finally move our mouse to the position of the pencil sign using mouse move command

23:48.900 --> 23:51.700
and then we click on it with a click command.

23:51.700 --> 23:56.420
Note that in mouse move, we need to enter values rather than variables, so to access

23:56.420 --> 24:00.580
the value of X1 for example, we put it inside person signs.

24:00.580 --> 24:04.980
Alternatively, you can use mouse click command, which is a combination of the two strings

24:04.980 --> 24:05.980
above.

24:05.980 --> 24:09.140
For this function, you need to enter the actual variables.

24:09.140 --> 24:13.340
For these syntax details, use a search tab in a help manual.

24:13.340 --> 24:17.580
After clicking on the sign, we return our cursor to its initial position with the mouse

24:17.580 --> 24:20.980
move command and type return at the end.

24:20.980 --> 24:21.980
That's all.

24:21.980 --> 24:25.340
That easy you can automate any mouse moves on your computer.

24:25.340 --> 24:27.700
Now, a couple of words needs to be said.

24:27.700 --> 24:32.460
For some reason in Microsoft Paint, it shows that the starting point of the window is outside

24:32.460 --> 24:37.860
of it, so in cases like that, you just need to test this stuff and see which one Windows

24:37.860 --> 24:41.180
or client coordinates work for your program.

24:41.180 --> 24:45.660
You also need to be careful with this method because it is much less stable and universal

24:45.660 --> 24:47.380
and often times limited.

24:47.380 --> 24:50.900
Despite the screen resolution changes, for example, you'll need to tweak your script

24:50.900 --> 24:52.380
for it to work.

24:52.380 --> 24:57.220
You also might not be able to access items in your program when it's not full screen,

24:57.220 --> 25:02.300
so just be aware that this is an alternative and sometimes an unavoidable one, but it's

25:02.300 --> 25:03.940
not without its flows.

25:03.940 --> 25:06.620
It's always good to know both methods.

25:06.620 --> 25:10.620
Another extremely important thing to know, because sometimes a certain combination cannot

25:10.620 --> 25:15.100
be performed instantly, be it due to your computer being old and slow or because of

25:15.100 --> 25:19.820
the program being slow itself, likely sometimes you will need a small delay between some of

25:19.820 --> 25:21.020
the actions.

25:21.020 --> 25:26.420
The function for delay in HK is sleep and after a comma, you need to type a number of

25:26.420 --> 25:29.540
milliseconds that you want your script to wait for.

25:29.540 --> 25:35.100
My advice using a delay, if delay is not obvious and if your script is supposed to work but

25:35.100 --> 25:38.580
it doesn't, try using delay whenever possible.

25:38.580 --> 25:44.300
You might be surprised by where delay sometimes happens to be used.

25:44.300 --> 25:48.300
Now since in the beginning of the video I showed you the example with DaVinci Resolve,

25:48.300 --> 25:52.820
I gotta mention one useful feature that you can integrate into AHK.

25:52.820 --> 25:57.220
The feature is called tap hold manager and it basically tells your computer if the key

25:57.220 --> 26:00.460
was either pressed or if it is being held.

26:00.460 --> 26:05.220
The thing is that in Windows if you press and hold a key, it sends it once and after

26:05.220 --> 26:10.340
a short delay, it starts spamming this key repeatedly, so Windows automatically runs

26:10.340 --> 26:15.940
its own cycle and with each iteration it sends the key that you press, so you don't

26:15.940 --> 26:18.420
have much control over the process.

26:18.420 --> 26:21.260
And essentially there are two ways of looking at it.

26:21.260 --> 26:25.540
You may say that you are fine with it and simply replace a key for some other action

26:25.540 --> 26:28.060
that will be repeated automatically.

26:28.060 --> 26:33.460
Like for example I can replace a left arrow key for a small mouse movement and if I hold

26:33.460 --> 26:38.900
it, the key is getting spammed by default and we get this mouse movement.

26:38.900 --> 26:43.020
However, another way of looking at it is when you wanna have more control.

26:43.020 --> 26:48.500
So with AHK it is possible to set up your own cycle where you'll be in charge of how

26:48.500 --> 26:52.780
fast iterations happen using sleep command for example.

26:52.780 --> 26:55.820
Will there be a delay in the beginning or not?

26:55.820 --> 26:58.860
And even here there are several ways of doing that.

26:58.860 --> 27:02.900
Some of them might be better in one case, some might be better in another, it's just

27:02.900 --> 27:05.460
too much to explain for a single video.

27:05.460 --> 27:08.300
I just wanna show you that this is possible.

27:08.300 --> 27:10.900
But I'm going to show you one way of doing it.

27:10.900 --> 27:15.540
And the advantage of this method is that not only you get more control, it becomes possible

27:15.540 --> 27:21.340
to recognize how much times the key was pressed and run different scripts accordingly.

27:21.340 --> 27:22.740
This simplest example.

27:22.740 --> 27:27.660
In Notepad, if I tap control once, it types hello.

27:27.660 --> 27:32.780
If I tap control two times, it types my name is Richard.

27:32.780 --> 27:36.620
And if I tap it three times, it types what is your name?

27:36.620 --> 27:39.940
Well, we're not gonna leave Richard without an answer, right?

27:39.940 --> 27:44.420
For that I hold the control key and it types my name is Sarah.

27:44.420 --> 27:50.020
And finally if I tap it once and then hold it, we get a nice to meet you.

27:50.020 --> 27:54.780
And here we have a complete conversation with just a single button.

27:54.780 --> 27:55.780
Isn't that amazing?

27:55.780 --> 27:57.780
Let's take a look at the script.

27:57.780 --> 28:00.980
The main thing that we need to look at is this string.

28:00.980 --> 28:05.820
Here I tell the computer that everything related to a control key will be handled by this

28:05.820 --> 28:07.820
function number one.

28:07.820 --> 28:12.260
Inside of the function number one, as you can see, we have five different conditions.

28:12.260 --> 28:17.100
In the first one, we have a condition that we're not holding the key is hold equals

28:17.100 --> 28:18.420
one.

28:18.420 --> 28:24.180
Then that we tapped it once, taps equals one, and that at the end we're gonna react

28:24.180 --> 28:28.020
to only when the key was pressed, state equals one.

28:28.020 --> 28:31.660
And inside we have a simple send comment sending a text.

28:31.660 --> 28:36.700
For other four cases, you simply change is hold and taps parameters.

28:36.700 --> 28:38.100
And here we have it.

28:38.100 --> 28:42.580
Just don't forget to include tap hold manager in the include section and you're good to

28:42.580 --> 28:43.580
go.

28:43.580 --> 28:48.180
In the example with DaVinci Resolve, all that's different is that we additionally include

28:48.180 --> 28:55.980
interception tap hold library and change the new tap hold manager to the new interception

28:55.980 --> 28:58.820
tap hold H I keyboard ID.

28:58.820 --> 29:01.060
Essentially this is all the difference.

29:01.060 --> 29:06.220
Of course, the script itself is different, but the base is almost identical.

29:06.220 --> 29:13.180
In this script, I use set timer and go sub comments for initializing the cycle or loop.

29:13.180 --> 29:19.980
Set timer sets the time between each iteration and go sub sends you to a label called move

29:19.980 --> 29:21.420
right.

29:21.420 --> 29:26.340
Once it's initialized, the script under the label gets repeatedly run.

29:26.340 --> 29:29.580
In our case, it is moving mouse cursor to the right.

29:29.580 --> 29:33.060
The script is initialized with the same if condition.

29:33.060 --> 29:38.020
That is, when you press the button, we want to break this loop when the key is released.

29:38.020 --> 29:42.340
Hence, we create this if condition or return of the timer.

29:42.340 --> 29:48.460
One small detail is that here inside of this add function, I included two additional parameters.

29:48.460 --> 29:53.780
I basically set the timer of registering a hold to zero, so that as soon as the key

29:53.780 --> 29:57.780
is pressed, it is considered a hold, not a tap.

29:57.780 --> 30:02.980
It is done to remove the initial small default delay before registering a hold.

30:02.980 --> 30:06.340
Accordingly, I set the if conditions.

30:06.340 --> 30:10.060
Download the script from the description and use it as a template.

30:10.060 --> 30:14.700
You can download the tab hold manager from the GitHub page, the link to which is as always

30:14.700 --> 30:16.700
in the description of the video.

30:16.700 --> 30:21.180
Copy the content of the library folder to your folder in the documents folder, the same

30:21.180 --> 30:26.860
as with H I. Inside of the archive, you can also open the included examples and use them

30:26.860 --> 30:29.660
as a template as well.

30:29.660 --> 30:34.100
In this video, I'm not gonna go into all the details of script writing, so feel free

30:34.100 --> 30:38.260
to download the files from the link in the description and as always, go and read the

30:38.260 --> 30:43.700
help manual for more functions and other useful information, like targeting a specific window,

30:43.700 --> 30:44.700
for example.

30:44.700 --> 30:48.960
Now, rounding this up, let me give you a couple more tips.

30:48.960 --> 30:53.140
One good advice would be is to not always try and go for an obvious solution.

30:53.140 --> 30:57.060
For example, in pain, there was a problem that when I choose a certain shape from the

30:57.060 --> 31:01.260
list, the position of selection is bound to a current shape, which means that you need

31:01.260 --> 31:06.580
to store the information about your current column and row in a global variable.

31:06.580 --> 31:10.780
In addition to that, the amount of times you need to press right and down vary depending

31:10.780 --> 31:12.940
on which row your currently are.

31:12.940 --> 31:18.380
Also, if you wanna get from the first three rows to the fourth, you need to first go over

31:18.380 --> 31:25.700
columns, then rows, and the opposite if you're moving from the fourth row to the first three.

31:25.700 --> 31:31.260
And I did that with a lot of different conditions and it worked, but there was a much easier

31:31.260 --> 31:32.260
solution.

31:32.260 --> 31:37.300
To reset the selection, you can simply enable another tool like Pencil and then start from

31:37.300 --> 31:40.180
the first both row and column.

31:40.180 --> 31:42.900
These are the tricks you need to look for.

31:42.900 --> 31:47.260
If you wanna be able to reload your script fast, at the end of the script you can bind

31:47.260 --> 31:52.740
a comment, reload, to any key like I did in this script for example.

31:52.740 --> 31:57.140
Use Ctrl plus Q to comment and uncomment selected lines.

31:57.140 --> 32:02.180
Again, use the following structure to fold big chunks of a script.

32:02.180 --> 32:06.700
Once again, I cannot possibly cover all the details and examples in a single video without

32:06.700 --> 32:11.660
making it ridiculously long, so I hope that what I showed you will get you started and

32:11.660 --> 32:16.420
make your learning process easier because when I started out, I wish there was a tutorial

32:16.420 --> 32:17.900
like that.

32:17.900 --> 32:22.180
But all in all, be creative with your scripts and keep learning.

32:22.180 --> 32:23.260
Thanks for watching!

