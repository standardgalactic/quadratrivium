1
00:00:00,000 --> 00:00:15,360
I love these headset mics. I feel like I should be standing here with my fingers

2
00:00:15,360 --> 00:00:19,040
stifled saying stuff like, you know, we have machine learning, but do we have

3
00:00:19,040 --> 00:00:30,480
machine understanding? Anyway, hello! Everybody's really excited for custom

4
00:00:30,480 --> 00:00:35,400
elements. I'm Luke. I came here from Manhattan Beach, California, which is

5
00:00:35,400 --> 00:00:42,480
right near Lebron, excuse me, Los Angeles. I work at No Red Ink on the

6
00:00:42,480 --> 00:00:49,000
internal team right now, converting all of our Elm code to Elm0.19. Very fun.

7
00:00:49,120 --> 00:00:53,440
I also work on Elie and contribute to Elm in other ways. One of the things that

8
00:00:53,440 --> 00:00:59,240
I do among those three things is hang out in Slack and watch the beginners

9
00:00:59,240 --> 00:01:05,840
channel. Something that frequently comes up as a question is, I have this JavaScript

10
00:01:05,840 --> 00:01:09,680
library that I have to use, but I want to build an Elm app. How do I do these

11
00:01:09,680 --> 00:01:14,560
things together? There's a lot of reasons to need to do that. You can't do

12
00:01:14,560 --> 00:01:19,560
everything with Elm. For instance, this is how many web APIs there are. That's

13
00:01:19,560 --> 00:01:26,000
not how many Elm packages there are. Can anybody in the audience who has been

14
00:01:26,000 --> 00:01:29,160
in the Elm community for a while tell me how you might go about using one of

15
00:01:29,160 --> 00:01:39,160
these if it's not in the Elm platform? Yeah, use the word. It's kind of become

16
00:01:39,160 --> 00:01:44,200
almost a meme at this point in the Elm community that the response to how do I

17
00:01:44,240 --> 00:01:49,440
use JavaScript is to use a port. It's kind of a closed question almost. What I

18
00:01:49,440 --> 00:01:58,240
want to do in this talk is reopen it just a little bit. Probably the world

19
00:01:58,240 --> 00:02:13,880
won't end, but we'll see. This has nothing to do with anything. I forgot to take

20
00:02:13,880 --> 00:02:23,240
this slide out. I don't remember what it was for. Let's see if I can work it

21
00:02:23,240 --> 00:02:31,280
in. There are more reasons to want to use JavaScript in the browser than making

22
00:02:31,280 --> 00:02:38,840
calls to your growth hacking AI blockchain client. Equally as often or

23
00:02:38,840 --> 00:02:42,400
possibly more, you might want to render a map in case you forget where the

24
00:02:42,400 --> 00:02:47,920
conference is and you want to build an Elm program to remind you. Or maybe you

25
00:02:47,920 --> 00:02:52,360
want to build a compiler into a browser platform and you need a text

26
00:02:52,400 --> 00:02:56,640
editor for people to share code and tell them where you can check out their

27
00:02:56,640 --> 00:03:02,360
mix tape. You can do this with ports. You can do anything with ports. It would be

28
00:03:02,360 --> 00:03:05,760
hard to get me on record saying you can't do something with ports. If you've

29
00:03:05,760 --> 00:03:11,080
interacted with me online, you know that to be true. The way we would go about

30
00:03:11,080 --> 00:03:16,440
building maybe this with ports is we would first make a div and we give it an

31
00:03:16,440 --> 00:03:21,280
ID, like text editor. We make some ports and we tag it with some string that we

32
00:03:21,280 --> 00:03:25,280
can read in JavaScript and send some data as a value sometimes. We have a port

33
00:03:25,280 --> 00:03:29,120
coming in where we can tag some information with a string and pass it as a

34
00:03:29,120 --> 00:03:33,440
value and deal with it in Elm in a subscription. When we initialize our

35
00:03:33,440 --> 00:03:38,840
application, we have to set up the initial model and send out in a knit command and

36
00:03:38,840 --> 00:03:43,440
handle that in JavaScript so we subscribe and we get the type and we do request

37
00:03:43,440 --> 00:03:47,240
animation frames so we can wait until the Elm version is rendering and then we

38
00:03:47,360 --> 00:03:51,360
look at the element and hopefully it's there. Who knows what we do if it's not?

39
00:03:51,360 --> 00:03:56,840
I certainly don't. Then we make the editor. Assuming the element is there and

40
00:03:56,840 --> 00:03:59,360
then we attach the editor to the elements so we don't have to remake it every

41
00:03:59,360 --> 00:04:03,760
time. And then we listen for changes on the editor. We send those back in

42
00:04:03,760 --> 00:04:08,760
through the port, call a value, update it as a string tag, get the value from the

43
00:04:08,760 --> 00:04:14,200
editor, make a code-changed message so that we can capture that into our update

44
00:04:14,200 --> 00:04:19,080
function, handle that message, set the code in the model and then subscribe to

45
00:04:19,080 --> 00:04:23,080
text editor in, look up the type, see if it's value updated, decode the data. If it

46
00:04:23,080 --> 00:04:30,920
fails, if it's something else, that works. That's fine. And then maybe also we want

47
00:04:30,920 --> 00:04:34,640
to do things like reset the code from within the Elm application if the user

48
00:04:34,640 --> 00:04:39,480
clicks a button so we make a reset the code message and then in our model, in

49
00:04:39,480 --> 00:04:42,640
our update function, we reset the code in the model, we send a message out

50
00:04:42,720 --> 00:04:47,440
through text editor out, give it the name value updated, pass it as a string and in

51
00:04:47,440 --> 00:04:51,840
our subscription in JavaScript, we look for the element again, hopefully it's

52
00:04:51,840 --> 00:04:57,440
there. Look for the editor, hopefully that's there. And then we set the data and

53
00:04:57,440 --> 00:04:58,840
then we're done.

54
00:04:58,840 --> 00:05:13,400
What if we have more than one text editor in our application? If we're not

55
00:05:13,400 --> 00:05:17,560
writing code, this is how we get text input from the user. It's just a text

56
00:05:17,560 --> 00:05:23,200
area and we use an HTML attribute to say that this is what the code is and we use

57
00:05:23,200 --> 00:05:29,520
text on input to handle the event from HTML. This is like a pretty good way to

58
00:05:29,520 --> 00:05:38,280
represent some visual component, excuse me, some visual element of our user

59
00:05:38,280 --> 00:05:43,320
interface that can be interacted with by the user. So wouldn't it be cool if we

60
00:05:43,320 --> 00:05:48,120
also had these? We could just say give me a code editor element and then put these

61
00:05:48,120 --> 00:05:52,880
attributes on it and let me listen for editor changes. Obviously these functions

62
00:05:52,960 --> 00:06:02,920
don't exist in the HTML package, but false. Turns out you can do this. What? You

63
00:06:02,920 --> 00:06:06,440
could do it with just today's element and the web platform as it currently

64
00:06:06,440 --> 00:06:23,280
exists right now. So let's do it. This is, like I said, these functions don't

65
00:06:23,280 --> 00:06:28,960
exist in the HTML package, but these functions do. HTML node, which lets us

66
00:06:28,960 --> 00:06:34,840
pick any tag name we want and we have HTML.attributes.property, which lets us

67
00:06:34,920 --> 00:06:40,360
assign any JSON value to any JavaScript property of that element. Similarly,

68
00:06:40,360 --> 00:06:46,760
HTML.events.on lets us listen to any event. So here's that same code in the text

69
00:06:46,760 --> 00:06:57,640
editor and here is that element rendered. So we can see we're assigning editor value

70
00:06:57,640 --> 00:07:03,160
here. The value of that should be hello world according to our Elm program and it

71
00:07:03,160 --> 00:07:09,880
is. And then if we go back to the elements tab of Chrome's dev tools and take a look at

72
00:07:09,880 --> 00:07:13,840
our event listeners here, we see that there's an editor changed event. You can

73
00:07:13,840 --> 00:07:24,560
just do this. It's pretty cool. So right now we have a nice gray rectangle, which as

74
00:07:24,560 --> 00:07:28,200
much as I'd love for that to be the way that my text editor looks some days, it's

75
00:07:28,240 --> 00:07:33,600
not super useful right now. So we actually have to explain to the browser how to deal

76
00:07:33,600 --> 00:07:38,000
with this and the way we do that is with the custom elements API. So we do custom

77
00:07:38,000 --> 00:07:43,720
elements.define. So this was code editor and we're going to write a class that

78
00:07:43,720 --> 00:07:51,440
extends HTML elements. Oh, my gosh, VS code. We get it. So the one thing that we

79
00:07:51,440 --> 00:07:57,240
absolutely have to do to get started is write this connected callback method. This

80
00:07:57,240 --> 00:08:01,800
method is called by the custom elements API in the browser. Whenever the elements

81
00:08:01,800 --> 00:08:06,120
been inserted into the DOM or it's been discovered in the DOM before this definition was

82
00:08:06,120 --> 00:08:11,960
defined. So it guarantees us that all of the DOM APIs are going to be ready for us by

83
00:08:11,960 --> 00:08:19,600
the time this code is executed. So we'll say this.editor equals code mirror this and

84
00:08:19,600 --> 00:08:27,120
we'll do some options. We'll do indent unit before. We'll do mode. Elm. We'll do line

85
00:08:27,120 --> 00:08:40,360
numbers. True. And we'll do value. Artcoded to module. Main. Exposing all. We'll save

86
00:08:40,360 --> 00:08:52,240
it. And webpack will surely be very fast and recompile this for us. There it is. So

87
00:08:52,240 --> 00:09:00,480
there's, yeah, that's pretty cool. Thank you for applauding. But unfortunately, that's

88
00:09:00,480 --> 00:09:04,720
not the text that we said we should have in our Elm program. So it's not super useful

89
00:09:04,720 --> 00:09:11,800
yet. So what we need to do is set up a property getter and setter to intercept the virtual

90
00:09:11,800 --> 00:09:17,120
DOM's behavior of getting and setting this property. So the first thing that we will

91
00:09:17,120 --> 00:09:25,120
do is set up an instructor and we have to call Suver because JavaScript says so. Make

92
00:09:25,120 --> 00:09:30,760
an editor value backing store. This should be familiar to anybody who's done a lot of

93
00:09:30,800 --> 00:09:38,160
C sharp programming. We'll put that default value up in the constructor and we will set

94
00:09:38,160 --> 00:09:48,800
this to editor value. And now when we get editor value, we'll return this.editor value

95
00:09:48,800 --> 00:09:59,160
and when we set it, the real magic happens. So not only can we assign here, we can also

96
00:09:59,160 --> 00:10:05,000
check that our editor exists. And this time it's totally cool if it doesn't because we're

97
00:10:05,000 --> 00:10:09,880
guaranteed for this method to run and we always know that the latest value that we've said

98
00:10:09,880 --> 00:10:15,960
is going to be used. So that's fine. So we can just return here. And if it does exist,

99
00:10:15,960 --> 00:10:22,440
we set value. And then the last thing that I like to make sure to do is avoid doing any

100
00:10:22,440 --> 00:10:27,520
unnecessary work. So if the value is already equal to the thing that was set, we're not

101
00:10:27,560 --> 00:10:33,360
going to do anything. So now I'll save it and we'll stand here awkwardly with our arms folded

102
00:10:33,360 --> 00:10:44,120
while it recompiles. So France is cool. There it is. Hello, world. You don't have to clap

103
00:10:44,120 --> 00:10:51,760
every time. I'll let you know when to clap after I'm finished writing. I'm a regular

104
00:10:51,840 --> 00:11:01,680
Jeb Bush. Okay. So we can type in here and CodeMirror is fine with that, but as you can see, no

105
00:11:01,680 --> 00:11:06,440
messages are being triggered. We have this whole elaborate listener setup, but nothing coming

106
00:11:06,440 --> 00:11:12,880
in. So the way that we deal with this is to go down to where we define our editor. And if you'll

107
00:11:12,880 --> 00:11:17,760
remember from before when I was talking really fast about ports, we listened to on changes to

108
00:11:17,760 --> 00:11:24,920
find out when CodeMirror has changed. And this time, we will first sync our backing store with

109
00:11:24,920 --> 00:11:35,880
the CodeMirror instance. And then we'll dispatch an event. This is a built-in function. With a new

110
00:11:35,880 --> 00:11:46,440
custom event. This is a built-in constructor. And we said it was editor changed. I'll save it. I hope

111
00:11:46,480 --> 00:11:56,000
the syntax is right. Looks like it. I think this is the last time we're going to do this. That's

112
00:11:56,000 --> 00:12:07,920
fine. And now, when I expose everything from main, we can see there's some messages there and it's

113
00:12:08,000 --> 00:12:20,960
filling in character by character. That's how you use the custom element with Elm. When I figured

114
00:12:20,960 --> 00:12:30,520
out how to do this, I was pretty psyched. I was like, hell, yeah, dude. Remember that. It's not all

115
00:12:30,520 --> 00:12:34,880
fun and games, though. It's not all jokes. There's some things you need to be aware of when you're

116
00:12:34,920 --> 00:12:40,360
doing this, even though I totally recommend that you do. The first thing, warning number one, is that

117
00:12:40,360 --> 00:12:46,040
the Elm virtual DOM is always right. It's always going to have the last say about what's actually in

118
00:12:46,040 --> 00:12:55,120
the DOM. So to illustrate my point, when I teach this to people, sometimes they ask, maybe they're

119
00:12:55,120 --> 00:13:00,440
coming from React and they ask, if I have a Google Maps element, can I put markers in the map as

120
00:13:00,480 --> 00:13:07,040
nested elements? That kind of looks the way that I think that should look. And I agree that it looks

121
00:13:07,040 --> 00:13:15,040
nice. This is pretty cool. The problem is the top code is what Elm thinks you're asking for when you

122
00:13:15,040 --> 00:13:22,080
do this and these markers represent elements. This is what Elm thinks that you want it to be. And

123
00:13:22,080 --> 00:13:25,640
when you render your map into the custom element, this is what it's actually going to be. So you have

124
00:13:25,680 --> 00:13:30,720
this conflict here and virtual DOM is always going to overwrite what's in there that you've put in

125
00:13:30,720 --> 00:13:36,000
there kind of outside of its knowledge. So what you should do instead when you have situations like

126
00:13:36,000 --> 00:13:44,320
this is either use the Shadow DOM if your browser space supports it. Unfortunately, it probably

127
00:13:44,320 --> 00:13:51,000
doesn't. And unfortunately, this is not really possible to polyfill completely. So we have some

128
00:13:51,040 --> 00:13:57,720
waiting to do there. Or what I recommend that you do is represent your markers, represent your nested

129
00:13:57,720 --> 00:14:03,600
data as some other kind of structured data and encode it to JSON and pass it as a property and

130
00:14:03,600 --> 00:14:09,400
interpret it in JavaScript that works just as well. One of the number two is that virtual DOM

131
00:14:09,400 --> 00:14:17,280
uses notes. This is kind of weird and it's hard to explain why it happens. You'll know it when you

132
00:14:17,320 --> 00:14:21,720
see it. And I'll give you an example. So maybe if you go down this path and you encounter something

133
00:14:21,720 --> 00:14:26,200
that's really weird, you'll remember this and kind of have an intuitive understanding of what's

134
00:14:26,200 --> 00:14:32,080
going on. So let's say we have a custom element for rendering blue rectangles. It's like really

135
00:14:32,080 --> 00:14:38,320
just incredibly useful custom elements. Very important. They can be light blue or dark blue.

136
00:14:38,320 --> 00:14:43,960
The custom element decides. One is inside of the other. And what we want to do is remove the

137
00:14:44,000 --> 00:14:49,160
outer dark blue one and have the light blue one fill the space. So what we expect it to look like

138
00:14:49,160 --> 00:14:54,920
is this. What's actually going to happen is this. And that's because the virtual DOM saw the outer

139
00:14:54,920 --> 00:14:59,120
rectangle and was like, oh, this is a rectangle. I'm supposed to put a rectangle here. So I'm done.

140
00:14:59,120 --> 00:15:07,880
And it's wrong. But it's not Elm's fault. It's mine for making a bad rectangle. So there's tricks

141
00:15:07,880 --> 00:15:13,760
you can do. And I really encourage you to avoid getting into this situation. But it is good to

142
00:15:13,760 --> 00:15:19,760
be aware of just in case. And then warning number three, and this is a small warning. It's not

143
00:15:19,760 --> 00:15:25,720
very big deal. Warning number three is don't use value because the Elm virtual DOM special cases

144
00:15:25,720 --> 00:15:33,000
this particular property name to deal with built in inputs. So here's what I recommend you do when

145
00:15:33,200 --> 00:15:38,280
you're building your custom elements. The first one is the most important. And it's to always use

146
00:15:38,280 --> 00:15:44,640
leaf nodes, whether your custom element itself is at the very end of your tree branch or whether

147
00:15:44,640 --> 00:15:48,880
you've got some stuff inside of it, but that stuff is fixed. I'll give some examples of that. And

148
00:15:48,880 --> 00:15:55,720
the second one is to not use value for the reason I just mentioned. So here is almost verbatim the

149
00:15:55,720 --> 00:16:02,920
code editor view from Ellie. It takes a bunch of attributes and it renders them all. And most

150
00:16:02,960 --> 00:16:08,560
importantly, that last list there is empty. Elm, when it sees an empty list from diff to diff, it

151
00:16:08,560 --> 00:16:14,160
doesn't clear anything out. It just skips it. It says, I get it. There's nothing here. Even though

152
00:16:14,160 --> 00:16:24,040
we're lying. So you can see the actual implementation of this in the LA repo. And I know this is a

153
00:16:24,040 --> 00:16:29,960
long URL and I'm going to click pass it, but I'll post it in Slack or something. And here is another

154
00:16:29,960 --> 00:16:36,560
example from the no writing code base. This is in our UI library. We have this text area that grows

155
00:16:36,560 --> 00:16:42,480
and shrinks as the user types and delete stuff. And that's not what text areas usually do or are

156
00:16:42,480 --> 00:16:47,280
even capable of doing. So you need JavaScript to do that. And so what we do is we wrap it in a

157
00:16:47,280 --> 00:16:53,360
custom element. The custom element goes and finds that text area and modifies it in a way that the

158
00:16:53,360 --> 00:16:58,920
Elm virtual DOM is totally okay with. So since everything within the custom element is fixed and

159
00:16:58,960 --> 00:17:04,920
not really changing around, this will survive the diff. So you can do it that way too. You can't do

160
00:17:04,920 --> 00:17:11,200
dynamic stuff inside of a dynamic list of elements inside of a custom element and be in

161
00:17:11,200 --> 00:17:17,440
field totally secure in doing that. So I recommend that you don't. So that's how you do custom

162
00:17:17,440 --> 00:17:21,240
elements. That's how you avoid getting in trouble. And so this question of how do I

163
00:17:21,280 --> 00:17:27,880
interoperate with JavaScripts I think has a more nuanced, slightly more nuanced answer now. It's

164
00:17:27,880 --> 00:17:34,160
first to ask is the thing you want to do a UI widget? Is it a map or a date picker or a fancy

165
00:17:34,160 --> 00:17:39,640
input? In that case, use a custom element. Otherwise, if you have the growth hacking AI

166
00:17:39,640 --> 00:17:47,240
blockchain client or something similar to that, you use a port. And so with that, I'll just leave

167
00:17:47,240 --> 00:17:52,760
you with something that's kind of a tradition at Elm conferences to put a slide with Evan's face

168
00:17:52,760 --> 00:18:03,080
superimposed on an actor. So here's mine. Yeah, you can email me about this or you can find me

169
00:18:03,080 --> 00:18:09,440
in Slack and those are some links that you should check out to learn about how to do this. Thanks,

170
00:18:09,440 --> 00:18:38,000
everybody. Oh, yeah, questions. So I've actually done this with code mirror as well. I came up

171
00:18:38,000 --> 00:18:43,680
with a very similar solution with custom elements. But I had this problem that if you type real fast

172
00:18:43,680 --> 00:18:50,000
in the code mirror editor like you do kind of day to day, often the letters kind of ended up in a

173
00:18:50,000 --> 00:18:56,880
different order or you dropped some characters kind of they got overwritten by the Elm state

174
00:18:56,880 --> 00:19:01,160
management kind of overwrote the internal code mirror state management. Did you manage to work

175
00:19:01,320 --> 00:19:07,880
out how to stop that from happening? Yes. So in the example that I gave, I'm just dispatching

176
00:19:07,880 --> 00:19:15,320
events every time a change event happens. In real life, I debounce the code that dispatches the event

177
00:19:15,320 --> 00:19:22,360
on request idle callback. So as long as you're typing or have typed recently, it won't bother to

178
00:19:22,360 --> 00:19:27,240
trigger any changes. So by the time it actually sends the event into Elm, the editors are guaranteed

179
00:19:27,320 --> 00:19:31,160
to be settled. Well, that's awesome. Thanks, man. Yeah, so you can find that in the LA code base too.

180
00:19:40,680 --> 00:19:47,800
So what's the main advantage of using custom elements over mutation observers? I think the

181
00:19:50,840 --> 00:19:54,520
instance management I guess is what I would call that. You don't have to

182
00:19:54,840 --> 00:20:00,440
manually watch the DOM and wait for those elements to be discovered. You don't have to

183
00:20:01,000 --> 00:20:06,760
have a mutation. You don't have to write the mutation observer that then queries the DOM that's

184
00:20:06,760 --> 00:20:10,440
changed and find the elements and then iterate over them. It just kind of does that for you.

185
00:20:10,440 --> 00:20:15,240
I think most of the polyfills that exist are based on mutation observer. So

186
00:20:16,680 --> 00:20:20,120
nothing you can do with a custom element can't be done with the mutation observer. It's just

187
00:20:20,200 --> 00:20:25,880
kind of nicer. It's a nicer API. Let me have back here.

188
00:20:41,720 --> 00:20:45,000
And just a question, how do you manage Firefox? Do you?

189
00:20:45,960 --> 00:20:52,440
We use a polyfill. Actually, the second link here is a repo for the official polyfill. It

190
00:20:52,440 --> 00:20:58,280
works very well on Firefox. We use it in production at NoRidic and we haven't had any problems with

191
00:20:58,280 --> 00:21:03,480
Firefox at all. And I think actually they're about to release support in the next version,

192
00:21:03,480 --> 00:21:11,240
so that's very cool. All right. I think that's it. And you can come find me wherever. I'll be happy

193
00:21:11,240 --> 00:21:15,240
to help. Thank you very much.

