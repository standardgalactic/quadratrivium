WEBVTT

00:00.000 --> 00:15.360
I love these headset mics. I feel like I should be standing here with my fingers

00:15.360 --> 00:19.040
stifled saying stuff like, you know, we have machine learning, but do we have

00:19.040 --> 00:30.480
machine understanding? Anyway, hello! Everybody's really excited for custom

00:30.480 --> 00:35.400
elements. I'm Luke. I came here from Manhattan Beach, California, which is

00:35.400 --> 00:42.480
right near Lebron, excuse me, Los Angeles. I work at No Red Ink on the

00:42.480 --> 00:49.000
internal team right now, converting all of our Elm code to Elm0.19. Very fun.

00:49.120 --> 00:53.440
I also work on Elie and contribute to Elm in other ways. One of the things that

00:53.440 --> 00:59.240
I do among those three things is hang out in Slack and watch the beginners

00:59.240 --> 01:05.840
channel. Something that frequently comes up as a question is, I have this JavaScript

01:05.840 --> 01:09.680
library that I have to use, but I want to build an Elm app. How do I do these

01:09.680 --> 01:14.560
things together? There's a lot of reasons to need to do that. You can't do

01:14.560 --> 01:19.560
everything with Elm. For instance, this is how many web APIs there are. That's

01:19.560 --> 01:26.000
not how many Elm packages there are. Can anybody in the audience who has been

01:26.000 --> 01:29.160
in the Elm community for a while tell me how you might go about using one of

01:29.160 --> 01:39.160
these if it's not in the Elm platform? Yeah, use the word. It's kind of become

01:39.160 --> 01:44.200
almost a meme at this point in the Elm community that the response to how do I

01:44.240 --> 01:49.440
use JavaScript is to use a port. It's kind of a closed question almost. What I

01:49.440 --> 01:58.240
want to do in this talk is reopen it just a little bit. Probably the world

01:58.240 --> 02:13.880
won't end, but we'll see. This has nothing to do with anything. I forgot to take

02:13.880 --> 02:23.240
this slide out. I don't remember what it was for. Let's see if I can work it

02:23.240 --> 02:31.280
in. There are more reasons to want to use JavaScript in the browser than making

02:31.280 --> 02:38.840
calls to your growth hacking AI blockchain client. Equally as often or

02:38.840 --> 02:42.400
possibly more, you might want to render a map in case you forget where the

02:42.400 --> 02:47.920
conference is and you want to build an Elm program to remind you. Or maybe you

02:47.920 --> 02:52.360
want to build a compiler into a browser platform and you need a text

02:52.400 --> 02:56.640
editor for people to share code and tell them where you can check out their

02:56.640 --> 03:02.360
mix tape. You can do this with ports. You can do anything with ports. It would be

03:02.360 --> 03:05.760
hard to get me on record saying you can't do something with ports. If you've

03:05.760 --> 03:11.080
interacted with me online, you know that to be true. The way we would go about

03:11.080 --> 03:16.440
building maybe this with ports is we would first make a div and we give it an

03:16.440 --> 03:21.280
ID, like text editor. We make some ports and we tag it with some string that we

03:21.280 --> 03:25.280
can read in JavaScript and send some data as a value sometimes. We have a port

03:25.280 --> 03:29.120
coming in where we can tag some information with a string and pass it as a

03:29.120 --> 03:33.440
value and deal with it in Elm in a subscription. When we initialize our

03:33.440 --> 03:38.840
application, we have to set up the initial model and send out in a knit command and

03:38.840 --> 03:43.440
handle that in JavaScript so we subscribe and we get the type and we do request

03:43.440 --> 03:47.240
animation frames so we can wait until the Elm version is rendering and then we

03:47.360 --> 03:51.360
look at the element and hopefully it's there. Who knows what we do if it's not?

03:51.360 --> 03:56.840
I certainly don't. Then we make the editor. Assuming the element is there and

03:56.840 --> 03:59.360
then we attach the editor to the elements so we don't have to remake it every

03:59.360 --> 04:03.760
time. And then we listen for changes on the editor. We send those back in

04:03.760 --> 04:08.760
through the port, call a value, update it as a string tag, get the value from the

04:08.760 --> 04:14.200
editor, make a code-changed message so that we can capture that into our update

04:14.200 --> 04:19.080
function, handle that message, set the code in the model and then subscribe to

04:19.080 --> 04:23.080
text editor in, look up the type, see if it's value updated, decode the data. If it

04:23.080 --> 04:30.920
fails, if it's something else, that works. That's fine. And then maybe also we want

04:30.920 --> 04:34.640
to do things like reset the code from within the Elm application if the user

04:34.640 --> 04:39.480
clicks a button so we make a reset the code message and then in our model, in

04:39.480 --> 04:42.640
our update function, we reset the code in the model, we send a message out

04:42.720 --> 04:47.440
through text editor out, give it the name value updated, pass it as a string and in

04:47.440 --> 04:51.840
our subscription in JavaScript, we look for the element again, hopefully it's

04:51.840 --> 04:57.440
there. Look for the editor, hopefully that's there. And then we set the data and

04:57.440 --> 04:58.840
then we're done.

04:58.840 --> 05:13.400
What if we have more than one text editor in our application? If we're not

05:13.400 --> 05:17.560
writing code, this is how we get text input from the user. It's just a text

05:17.560 --> 05:23.200
area and we use an HTML attribute to say that this is what the code is and we use

05:23.200 --> 05:29.520
text on input to handle the event from HTML. This is like a pretty good way to

05:29.520 --> 05:38.280
represent some visual component, excuse me, some visual element of our user

05:38.280 --> 05:43.320
interface that can be interacted with by the user. So wouldn't it be cool if we

05:43.320 --> 05:48.120
also had these? We could just say give me a code editor element and then put these

05:48.120 --> 05:52.880
attributes on it and let me listen for editor changes. Obviously these functions

05:52.960 --> 06:02.920
don't exist in the HTML package, but false. Turns out you can do this. What? You

06:02.920 --> 06:06.440
could do it with just today's element and the web platform as it currently

06:06.440 --> 06:23.280
exists right now. So let's do it. This is, like I said, these functions don't

06:23.280 --> 06:28.960
exist in the HTML package, but these functions do. HTML node, which lets us

06:28.960 --> 06:34.840
pick any tag name we want and we have HTML.attributes.property, which lets us

06:34.920 --> 06:40.360
assign any JSON value to any JavaScript property of that element. Similarly,

06:40.360 --> 06:46.760
HTML.events.on lets us listen to any event. So here's that same code in the text

06:46.760 --> 06:57.640
editor and here is that element rendered. So we can see we're assigning editor value

06:57.640 --> 07:03.160
here. The value of that should be hello world according to our Elm program and it

07:03.160 --> 07:09.880
is. And then if we go back to the elements tab of Chrome's dev tools and take a look at

07:09.880 --> 07:13.840
our event listeners here, we see that there's an editor changed event. You can

07:13.840 --> 07:24.560
just do this. It's pretty cool. So right now we have a nice gray rectangle, which as

07:24.560 --> 07:28.200
much as I'd love for that to be the way that my text editor looks some days, it's

07:28.240 --> 07:33.600
not super useful right now. So we actually have to explain to the browser how to deal

07:33.600 --> 07:38.000
with this and the way we do that is with the custom elements API. So we do custom

07:38.000 --> 07:43.720
elements.define. So this was code editor and we're going to write a class that

07:43.720 --> 07:51.440
extends HTML elements. Oh, my gosh, VS code. We get it. So the one thing that we

07:51.440 --> 07:57.240
absolutely have to do to get started is write this connected callback method. This

07:57.240 --> 08:01.800
method is called by the custom elements API in the browser. Whenever the elements

08:01.800 --> 08:06.120
been inserted into the DOM or it's been discovered in the DOM before this definition was

08:06.120 --> 08:11.960
defined. So it guarantees us that all of the DOM APIs are going to be ready for us by

08:11.960 --> 08:19.600
the time this code is executed. So we'll say this.editor equals code mirror this and

08:19.600 --> 08:27.120
we'll do some options. We'll do indent unit before. We'll do mode. Elm. We'll do line

08:27.120 --> 08:40.360
numbers. True. And we'll do value. Artcoded to module. Main. Exposing all. We'll save

08:40.360 --> 08:52.240
it. And webpack will surely be very fast and recompile this for us. There it is. So

08:52.240 --> 09:00.480
there's, yeah, that's pretty cool. Thank you for applauding. But unfortunately, that's

09:00.480 --> 09:04.720
not the text that we said we should have in our Elm program. So it's not super useful

09:04.720 --> 09:11.800
yet. So what we need to do is set up a property getter and setter to intercept the virtual

09:11.800 --> 09:17.120
DOM's behavior of getting and setting this property. So the first thing that we will

09:17.120 --> 09:25.120
do is set up an instructor and we have to call Suver because JavaScript says so. Make

09:25.120 --> 09:30.760
an editor value backing store. This should be familiar to anybody who's done a lot of

09:30.800 --> 09:38.160
C sharp programming. We'll put that default value up in the constructor and we will set

09:38.160 --> 09:48.800
this to editor value. And now when we get editor value, we'll return this.editor value

09:48.800 --> 09:59.160
and when we set it, the real magic happens. So not only can we assign here, we can also

09:59.160 --> 10:05.000
check that our editor exists. And this time it's totally cool if it doesn't because we're

10:05.000 --> 10:09.880
guaranteed for this method to run and we always know that the latest value that we've said

10:09.880 --> 10:15.960
is going to be used. So that's fine. So we can just return here. And if it does exist,

10:15.960 --> 10:22.440
we set value. And then the last thing that I like to make sure to do is avoid doing any

10:22.440 --> 10:27.520
unnecessary work. So if the value is already equal to the thing that was set, we're not

10:27.560 --> 10:33.360
going to do anything. So now I'll save it and we'll stand here awkwardly with our arms folded

10:33.360 --> 10:44.120
while it recompiles. So France is cool. There it is. Hello, world. You don't have to clap

10:44.120 --> 10:51.760
every time. I'll let you know when to clap after I'm finished writing. I'm a regular

10:51.840 --> 11:01.680
Jeb Bush. Okay. So we can type in here and CodeMirror is fine with that, but as you can see, no

11:01.680 --> 11:06.440
messages are being triggered. We have this whole elaborate listener setup, but nothing coming

11:06.440 --> 11:12.880
in. So the way that we deal with this is to go down to where we define our editor. And if you'll

11:12.880 --> 11:17.760
remember from before when I was talking really fast about ports, we listened to on changes to

11:17.760 --> 11:24.920
find out when CodeMirror has changed. And this time, we will first sync our backing store with

11:24.920 --> 11:35.880
the CodeMirror instance. And then we'll dispatch an event. This is a built-in function. With a new

11:35.880 --> 11:46.440
custom event. This is a built-in constructor. And we said it was editor changed. I'll save it. I hope

11:46.480 --> 11:56.000
the syntax is right. Looks like it. I think this is the last time we're going to do this. That's

11:56.000 --> 12:07.920
fine. And now, when I expose everything from main, we can see there's some messages there and it's

12:08.000 --> 12:20.960
filling in character by character. That's how you use the custom element with Elm. When I figured

12:20.960 --> 12:30.520
out how to do this, I was pretty psyched. I was like, hell, yeah, dude. Remember that. It's not all

12:30.520 --> 12:34.880
fun and games, though. It's not all jokes. There's some things you need to be aware of when you're

12:34.920 --> 12:40.360
doing this, even though I totally recommend that you do. The first thing, warning number one, is that

12:40.360 --> 12:46.040
the Elm virtual DOM is always right. It's always going to have the last say about what's actually in

12:46.040 --> 12:55.120
the DOM. So to illustrate my point, when I teach this to people, sometimes they ask, maybe they're

12:55.120 --> 13:00.440
coming from React and they ask, if I have a Google Maps element, can I put markers in the map as

13:00.480 --> 13:07.040
nested elements? That kind of looks the way that I think that should look. And I agree that it looks

13:07.040 --> 13:15.040
nice. This is pretty cool. The problem is the top code is what Elm thinks you're asking for when you

13:15.040 --> 13:22.080
do this and these markers represent elements. This is what Elm thinks that you want it to be. And

13:22.080 --> 13:25.640
when you render your map into the custom element, this is what it's actually going to be. So you have

13:25.680 --> 13:30.720
this conflict here and virtual DOM is always going to overwrite what's in there that you've put in

13:30.720 --> 13:36.000
there kind of outside of its knowledge. So what you should do instead when you have situations like

13:36.000 --> 13:44.320
this is either use the Shadow DOM if your browser space supports it. Unfortunately, it probably

13:44.320 --> 13:51.000
doesn't. And unfortunately, this is not really possible to polyfill completely. So we have some

13:51.040 --> 13:57.720
waiting to do there. Or what I recommend that you do is represent your markers, represent your nested

13:57.720 --> 14:03.600
data as some other kind of structured data and encode it to JSON and pass it as a property and

14:03.600 --> 14:09.400
interpret it in JavaScript that works just as well. One of the number two is that virtual DOM

14:09.400 --> 14:17.280
uses notes. This is kind of weird and it's hard to explain why it happens. You'll know it when you

14:17.320 --> 14:21.720
see it. And I'll give you an example. So maybe if you go down this path and you encounter something

14:21.720 --> 14:26.200
that's really weird, you'll remember this and kind of have an intuitive understanding of what's

14:26.200 --> 14:32.080
going on. So let's say we have a custom element for rendering blue rectangles. It's like really

14:32.080 --> 14:38.320
just incredibly useful custom elements. Very important. They can be light blue or dark blue.

14:38.320 --> 14:43.960
The custom element decides. One is inside of the other. And what we want to do is remove the

14:44.000 --> 14:49.160
outer dark blue one and have the light blue one fill the space. So what we expect it to look like

14:49.160 --> 14:54.920
is this. What's actually going to happen is this. And that's because the virtual DOM saw the outer

14:54.920 --> 14:59.120
rectangle and was like, oh, this is a rectangle. I'm supposed to put a rectangle here. So I'm done.

14:59.120 --> 15:07.880
And it's wrong. But it's not Elm's fault. It's mine for making a bad rectangle. So there's tricks

15:07.880 --> 15:13.760
you can do. And I really encourage you to avoid getting into this situation. But it is good to

15:13.760 --> 15:19.760
be aware of just in case. And then warning number three, and this is a small warning. It's not

15:19.760 --> 15:25.720
very big deal. Warning number three is don't use value because the Elm virtual DOM special cases

15:25.720 --> 15:33.000
this particular property name to deal with built in inputs. So here's what I recommend you do when

15:33.200 --> 15:38.280
you're building your custom elements. The first one is the most important. And it's to always use

15:38.280 --> 15:44.640
leaf nodes, whether your custom element itself is at the very end of your tree branch or whether

15:44.640 --> 15:48.880
you've got some stuff inside of it, but that stuff is fixed. I'll give some examples of that. And

15:48.880 --> 15:55.720
the second one is to not use value for the reason I just mentioned. So here is almost verbatim the

15:55.720 --> 16:02.920
code editor view from Ellie. It takes a bunch of attributes and it renders them all. And most

16:02.960 --> 16:08.560
importantly, that last list there is empty. Elm, when it sees an empty list from diff to diff, it

16:08.560 --> 16:14.160
doesn't clear anything out. It just skips it. It says, I get it. There's nothing here. Even though

16:14.160 --> 16:24.040
we're lying. So you can see the actual implementation of this in the LA repo. And I know this is a

16:24.040 --> 16:29.960
long URL and I'm going to click pass it, but I'll post it in Slack or something. And here is another

16:29.960 --> 16:36.560
example from the no writing code base. This is in our UI library. We have this text area that grows

16:36.560 --> 16:42.480
and shrinks as the user types and delete stuff. And that's not what text areas usually do or are

16:42.480 --> 16:47.280
even capable of doing. So you need JavaScript to do that. And so what we do is we wrap it in a

16:47.280 --> 16:53.360
custom element. The custom element goes and finds that text area and modifies it in a way that the

16:53.360 --> 16:58.920
Elm virtual DOM is totally okay with. So since everything within the custom element is fixed and

16:58.960 --> 17:04.920
not really changing around, this will survive the diff. So you can do it that way too. You can't do

17:04.920 --> 17:11.200
dynamic stuff inside of a dynamic list of elements inside of a custom element and be in

17:11.200 --> 17:17.440
field totally secure in doing that. So I recommend that you don't. So that's how you do custom

17:17.440 --> 17:21.240
elements. That's how you avoid getting in trouble. And so this question of how do I

17:21.280 --> 17:27.880
interoperate with JavaScripts I think has a more nuanced, slightly more nuanced answer now. It's

17:27.880 --> 17:34.160
first to ask is the thing you want to do a UI widget? Is it a map or a date picker or a fancy

17:34.160 --> 17:39.640
input? In that case, use a custom element. Otherwise, if you have the growth hacking AI

17:39.640 --> 17:47.240
blockchain client or something similar to that, you use a port. And so with that, I'll just leave

17:47.240 --> 17:52.760
you with something that's kind of a tradition at Elm conferences to put a slide with Evan's face

17:52.760 --> 18:03.080
superimposed on an actor. So here's mine. Yeah, you can email me about this or you can find me

18:03.080 --> 18:09.440
in Slack and those are some links that you should check out to learn about how to do this. Thanks,

18:09.440 --> 18:38.000
everybody. Oh, yeah, questions. So I've actually done this with code mirror as well. I came up

18:38.000 --> 18:43.680
with a very similar solution with custom elements. But I had this problem that if you type real fast

18:43.680 --> 18:50.000
in the code mirror editor like you do kind of day to day, often the letters kind of ended up in a

18:50.000 --> 18:56.880
different order or you dropped some characters kind of they got overwritten by the Elm state

18:56.880 --> 19:01.160
management kind of overwrote the internal code mirror state management. Did you manage to work

19:01.320 --> 19:07.880
out how to stop that from happening? Yes. So in the example that I gave, I'm just dispatching

19:07.880 --> 19:15.320
events every time a change event happens. In real life, I debounce the code that dispatches the event

19:15.320 --> 19:22.360
on request idle callback. So as long as you're typing or have typed recently, it won't bother to

19:22.360 --> 19:27.240
trigger any changes. So by the time it actually sends the event into Elm, the editors are guaranteed

19:27.320 --> 19:31.160
to be settled. Well, that's awesome. Thanks, man. Yeah, so you can find that in the LA code base too.

19:40.680 --> 19:47.800
So what's the main advantage of using custom elements over mutation observers? I think the

19:50.840 --> 19:54.520
instance management I guess is what I would call that. You don't have to

19:54.840 --> 20:00.440
manually watch the DOM and wait for those elements to be discovered. You don't have to

20:01.000 --> 20:06.760
have a mutation. You don't have to write the mutation observer that then queries the DOM that's

20:06.760 --> 20:10.440
changed and find the elements and then iterate over them. It just kind of does that for you.

20:10.440 --> 20:15.240
I think most of the polyfills that exist are based on mutation observer. So

20:16.680 --> 20:20.120
nothing you can do with a custom element can't be done with the mutation observer. It's just

20:20.200 --> 20:25.880
kind of nicer. It's a nicer API. Let me have back here.

20:41.720 --> 20:45.000
And just a question, how do you manage Firefox? Do you?

20:45.960 --> 20:52.440
We use a polyfill. Actually, the second link here is a repo for the official polyfill. It

20:52.440 --> 20:58.280
works very well on Firefox. We use it in production at NoRidic and we haven't had any problems with

20:58.280 --> 21:03.480
Firefox at all. And I think actually they're about to release support in the next version,

21:03.480 --> 21:11.240
so that's very cool. All right. I think that's it. And you can come find me wherever. I'll be happy

21:11.240 --> 21:15.240
to help. Thank you very much.

