{"text": " I love these headset mics. I feel like I should be standing here with my fingers stifled saying stuff like, you know, we have machine learning, but do we have machine understanding? Anyway, hello! Everybody's really excited for custom elements. I'm Luke. I came here from Manhattan Beach, California, which is right near Lebron, excuse me, Los Angeles. I work at No Red Ink on the internal team right now, converting all of our Elm code to Elm0.19. Very fun. I also work on Elie and contribute to Elm in other ways. One of the things that I do among those three things is hang out in Slack and watch the beginners channel. Something that frequently comes up as a question is, I have this JavaScript library that I have to use, but I want to build an Elm app. How do I do these things together? There's a lot of reasons to need to do that. You can't do everything with Elm. For instance, this is how many web APIs there are. That's not how many Elm packages there are. Can anybody in the audience who has been in the Elm community for a while tell me how you might go about using one of these if it's not in the Elm platform? Yeah, use the word. It's kind of become almost a meme at this point in the Elm community that the response to how do I use JavaScript is to use a port. It's kind of a closed question almost. What I want to do in this talk is reopen it just a little bit. Probably the world won't end, but we'll see. This has nothing to do with anything. I forgot to take this slide out. I don't remember what it was for. Let's see if I can work it in. There are more reasons to want to use JavaScript in the browser than making calls to your growth hacking AI blockchain client. Equally as often or possibly more, you might want to render a map in case you forget where the conference is and you want to build an Elm program to remind you. Or maybe you want to build a compiler into a browser platform and you need a text editor for people to share code and tell them where you can check out their mix tape. You can do this with ports. You can do anything with ports. It would be hard to get me on record saying you can't do something with ports. If you've interacted with me online, you know that to be true. The way we would go about building maybe this with ports is we would first make a div and we give it an ID, like text editor. We make some ports and we tag it with some string that we can read in JavaScript and send some data as a value sometimes. We have a port coming in where we can tag some information with a string and pass it as a value and deal with it in Elm in a subscription. When we initialize our application, we have to set up the initial model and send out in a knit command and handle that in JavaScript so we subscribe and we get the type and we do request animation frames so we can wait until the Elm version is rendering and then we look at the element and hopefully it's there. Who knows what we do if it's not? I certainly don't. Then we make the editor. Assuming the element is there and then we attach the editor to the elements so we don't have to remake it every time. And then we listen for changes on the editor. We send those back in through the port, call a value, update it as a string tag, get the value from the editor, make a code-changed message so that we can capture that into our update function, handle that message, set the code in the model and then subscribe to text editor in, look up the type, see if it's value updated, decode the data. If it fails, if it's something else, that works. That's fine. And then maybe also we want to do things like reset the code from within the Elm application if the user clicks a button so we make a reset the code message and then in our model, in our update function, we reset the code in the model, we send a message out through text editor out, give it the name value updated, pass it as a string and in our subscription in JavaScript, we look for the element again, hopefully it's there. Look for the editor, hopefully that's there. And then we set the data and then we're done. What if we have more than one text editor in our application? If we're not writing code, this is how we get text input from the user. It's just a text area and we use an HTML attribute to say that this is what the code is and we use text on input to handle the event from HTML. This is like a pretty good way to represent some visual component, excuse me, some visual element of our user interface that can be interacted with by the user. So wouldn't it be cool if we also had these? We could just say give me a code editor element and then put these attributes on it and let me listen for editor changes. Obviously these functions don't exist in the HTML package, but false. Turns out you can do this. What? You could do it with just today's element and the web platform as it currently exists right now. So let's do it. This is, like I said, these functions don't exist in the HTML package, but these functions do. HTML node, which lets us pick any tag name we want and we have HTML.attributes.property, which lets us assign any JSON value to any JavaScript property of that element. Similarly, HTML.events.on lets us listen to any event. So here's that same code in the text editor and here is that element rendered. So we can see we're assigning editor value here. The value of that should be hello world according to our Elm program and it is. And then if we go back to the elements tab of Chrome's dev tools and take a look at our event listeners here, we see that there's an editor changed event. You can just do this. It's pretty cool. So right now we have a nice gray rectangle, which as much as I'd love for that to be the way that my text editor looks some days, it's not super useful right now. So we actually have to explain to the browser how to deal with this and the way we do that is with the custom elements API. So we do custom elements.define. So this was code editor and we're going to write a class that extends HTML elements. Oh, my gosh, VS code. We get it. So the one thing that we absolutely have to do to get started is write this connected callback method. This method is called by the custom elements API in the browser. Whenever the elements been inserted into the DOM or it's been discovered in the DOM before this definition was defined. So it guarantees us that all of the DOM APIs are going to be ready for us by the time this code is executed. So we'll say this.editor equals code mirror this and we'll do some options. We'll do indent unit before. We'll do mode. Elm. We'll do line numbers. True. And we'll do value. Artcoded to module. Main. Exposing all. We'll save it. And webpack will surely be very fast and recompile this for us. There it is. So there's, yeah, that's pretty cool. Thank you for applauding. But unfortunately, that's not the text that we said we should have in our Elm program. So it's not super useful yet. So what we need to do is set up a property getter and setter to intercept the virtual DOM's behavior of getting and setting this property. So the first thing that we will do is set up an instructor and we have to call Suver because JavaScript says so. Make an editor value backing store. This should be familiar to anybody who's done a lot of C sharp programming. We'll put that default value up in the constructor and we will set this to editor value. And now when we get editor value, we'll return this.editor value and when we set it, the real magic happens. So not only can we assign here, we can also check that our editor exists. And this time it's totally cool if it doesn't because we're guaranteed for this method to run and we always know that the latest value that we've said is going to be used. So that's fine. So we can just return here. And if it does exist, we set value. And then the last thing that I like to make sure to do is avoid doing any unnecessary work. So if the value is already equal to the thing that was set, we're not going to do anything. So now I'll save it and we'll stand here awkwardly with our arms folded while it recompiles. So France is cool. There it is. Hello, world. You don't have to clap every time. I'll let you know when to clap after I'm finished writing. I'm a regular Jeb Bush. Okay. So we can type in here and CodeMirror is fine with that, but as you can see, no messages are being triggered. We have this whole elaborate listener setup, but nothing coming in. So the way that we deal with this is to go down to where we define our editor. And if you'll remember from before when I was talking really fast about ports, we listened to on changes to find out when CodeMirror has changed. And this time, we will first sync our backing store with the CodeMirror instance. And then we'll dispatch an event. This is a built-in function. With a new custom event. This is a built-in constructor. And we said it was editor changed. I'll save it. I hope the syntax is right. Looks like it. I think this is the last time we're going to do this. That's fine. And now, when I expose everything from main, we can see there's some messages there and it's filling in character by character. That's how you use the custom element with Elm. When I figured out how to do this, I was pretty psyched. I was like, hell, yeah, dude. Remember that. It's not all fun and games, though. It's not all jokes. There's some things you need to be aware of when you're doing this, even though I totally recommend that you do. The first thing, warning number one, is that the Elm virtual DOM is always right. It's always going to have the last say about what's actually in the DOM. So to illustrate my point, when I teach this to people, sometimes they ask, maybe they're coming from React and they ask, if I have a Google Maps element, can I put markers in the map as nested elements? That kind of looks the way that I think that should look. And I agree that it looks nice. This is pretty cool. The problem is the top code is what Elm thinks you're asking for when you do this and these markers represent elements. This is what Elm thinks that you want it to be. And when you render your map into the custom element, this is what it's actually going to be. So you have this conflict here and virtual DOM is always going to overwrite what's in there that you've put in there kind of outside of its knowledge. So what you should do instead when you have situations like this is either use the Shadow DOM if your browser space supports it. Unfortunately, it probably doesn't. And unfortunately, this is not really possible to polyfill completely. So we have some waiting to do there. Or what I recommend that you do is represent your markers, represent your nested data as some other kind of structured data and encode it to JSON and pass it as a property and interpret it in JavaScript that works just as well. One of the number two is that virtual DOM uses notes. This is kind of weird and it's hard to explain why it happens. You'll know it when you see it. And I'll give you an example. So maybe if you go down this path and you encounter something that's really weird, you'll remember this and kind of have an intuitive understanding of what's going on. So let's say we have a custom element for rendering blue rectangles. It's like really just incredibly useful custom elements. Very important. They can be light blue or dark blue. The custom element decides. One is inside of the other. And what we want to do is remove the outer dark blue one and have the light blue one fill the space. So what we expect it to look like is this. What's actually going to happen is this. And that's because the virtual DOM saw the outer rectangle and was like, oh, this is a rectangle. I'm supposed to put a rectangle here. So I'm done. And it's wrong. But it's not Elm's fault. It's mine for making a bad rectangle. So there's tricks you can do. And I really encourage you to avoid getting into this situation. But it is good to be aware of just in case. And then warning number three, and this is a small warning. It's not very big deal. Warning number three is don't use value because the Elm virtual DOM special cases this particular property name to deal with built in inputs. So here's what I recommend you do when you're building your custom elements. The first one is the most important. And it's to always use leaf nodes, whether your custom element itself is at the very end of your tree branch or whether you've got some stuff inside of it, but that stuff is fixed. I'll give some examples of that. And the second one is to not use value for the reason I just mentioned. So here is almost verbatim the code editor view from Ellie. It takes a bunch of attributes and it renders them all. And most importantly, that last list there is empty. Elm, when it sees an empty list from diff to diff, it doesn't clear anything out. It just skips it. It says, I get it. There's nothing here. Even though we're lying. So you can see the actual implementation of this in the LA repo. And I know this is a long URL and I'm going to click pass it, but I'll post it in Slack or something. And here is another example from the no writing code base. This is in our UI library. We have this text area that grows and shrinks as the user types and delete stuff. And that's not what text areas usually do or are even capable of doing. So you need JavaScript to do that. And so what we do is we wrap it in a custom element. The custom element goes and finds that text area and modifies it in a way that the Elm virtual DOM is totally okay with. So since everything within the custom element is fixed and not really changing around, this will survive the diff. So you can do it that way too. You can't do dynamic stuff inside of a dynamic list of elements inside of a custom element and be in field totally secure in doing that. So I recommend that you don't. So that's how you do custom elements. That's how you avoid getting in trouble. And so this question of how do I interoperate with JavaScripts I think has a more nuanced, slightly more nuanced answer now. It's first to ask is the thing you want to do a UI widget? Is it a map or a date picker or a fancy input? In that case, use a custom element. Otherwise, if you have the growth hacking AI blockchain client or something similar to that, you use a port. And so with that, I'll just leave you with something that's kind of a tradition at Elm conferences to put a slide with Evan's face superimposed on an actor. So here's mine. Yeah, you can email me about this or you can find me in Slack and those are some links that you should check out to learn about how to do this. Thanks, everybody. Oh, yeah, questions. So I've actually done this with code mirror as well. I came up with a very similar solution with custom elements. But I had this problem that if you type real fast in the code mirror editor like you do kind of day to day, often the letters kind of ended up in a different order or you dropped some characters kind of they got overwritten by the Elm state management kind of overwrote the internal code mirror state management. Did you manage to work out how to stop that from happening? Yes. So in the example that I gave, I'm just dispatching events every time a change event happens. In real life, I debounce the code that dispatches the event on request idle callback. So as long as you're typing or have typed recently, it won't bother to trigger any changes. So by the time it actually sends the event into Elm, the editors are guaranteed to be settled. Well, that's awesome. Thanks, man. Yeah, so you can find that in the LA code base too. So what's the main advantage of using custom elements over mutation observers? I think the instance management I guess is what I would call that. You don't have to manually watch the DOM and wait for those elements to be discovered. You don't have to have a mutation. You don't have to write the mutation observer that then queries the DOM that's changed and find the elements and then iterate over them. It just kind of does that for you. I think most of the polyfills that exist are based on mutation observer. So nothing you can do with a custom element can't be done with the mutation observer. It's just kind of nicer. It's a nicer API. Let me have back here. And just a question, how do you manage Firefox? Do you? We use a polyfill. Actually, the second link here is a repo for the official polyfill. It works very well on Firefox. We use it in production at NoRidic and we haven't had any problems with Firefox at all. And I think actually they're about to release support in the next version, so that's very cool. All right. I think that's it. And you can come find me wherever. I'll be happy to help. Thank you very much.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 15.36, "text": " I love these headset mics. I feel like I should be standing here with my fingers", "tokens": [50364, 286, 959, 613, 26850, 45481, 13, 286, 841, 411, 286, 820, 312, 4877, 510, 365, 452, 7350, 51132], "temperature": 0.0, "avg_logprob": -0.26825205485026044, "compression_ratio": 1.3166666666666667, "no_speech_prob": 0.04856732115149498}, {"id": 1, "seek": 0, "start": 15.36, "end": 19.04, "text": " stifled saying stuff like, you know, we have machine learning, but do we have", "tokens": [51132, 342, 351, 1493, 1566, 1507, 411, 11, 291, 458, 11, 321, 362, 3479, 2539, 11, 457, 360, 321, 362, 51316], "temperature": 0.0, "avg_logprob": -0.26825205485026044, "compression_ratio": 1.3166666666666667, "no_speech_prob": 0.04856732115149498}, {"id": 2, "seek": 1904, "start": 19.04, "end": 30.479999999999997, "text": " machine understanding? Anyway, hello! Everybody's really excited for custom", "tokens": [50364, 3479, 3701, 30, 5684, 11, 7751, 0, 7646, 311, 534, 2919, 337, 2375, 50936], "temperature": 0.0, "avg_logprob": -0.28877839809510764, "compression_ratio": 1.371559633027523, "no_speech_prob": 0.15577636659145355}, {"id": 3, "seek": 1904, "start": 30.479999999999997, "end": 35.4, "text": " elements. I'm Luke. I came here from Manhattan Beach, California, which is", "tokens": [50936, 4959, 13, 286, 478, 13044, 13, 286, 1361, 510, 490, 23633, 14866, 11, 5384, 11, 597, 307, 51182], "temperature": 0.0, "avg_logprob": -0.28877839809510764, "compression_ratio": 1.371559633027523, "no_speech_prob": 0.15577636659145355}, {"id": 4, "seek": 1904, "start": 35.4, "end": 42.480000000000004, "text": " right near Lebron, excuse me, Los Angeles. I work at No Red Ink on the", "tokens": [51182, 558, 2651, 1456, 1443, 266, 11, 8960, 385, 11, 7632, 12292, 13, 286, 589, 412, 883, 4477, 31147, 322, 264, 51536], "temperature": 0.0, "avg_logprob": -0.28877839809510764, "compression_ratio": 1.371559633027523, "no_speech_prob": 0.15577636659145355}, {"id": 5, "seek": 1904, "start": 42.480000000000004, "end": 49.0, "text": " internal team right now, converting all of our Elm code to Elm0.19. Very fun.", "tokens": [51536, 6920, 1469, 558, 586, 11, 29942, 439, 295, 527, 2699, 76, 3089, 281, 2699, 76, 15, 13, 3405, 13, 4372, 1019, 13, 51862], "temperature": 0.0, "avg_logprob": -0.28877839809510764, "compression_ratio": 1.371559633027523, "no_speech_prob": 0.15577636659145355}, {"id": 6, "seek": 4900, "start": 49.12, "end": 53.44, "text": " I also work on Elie and contribute to Elm in other ways. One of the things that", "tokens": [50370, 286, 611, 589, 322, 2699, 414, 293, 10586, 281, 2699, 76, 294, 661, 2098, 13, 1485, 295, 264, 721, 300, 50586], "temperature": 0.0, "avg_logprob": -0.17631123616145208, "compression_ratio": 1.5870445344129556, "no_speech_prob": 0.009697431698441505}, {"id": 7, "seek": 4900, "start": 53.44, "end": 59.24, "text": " I do among those three things is hang out in Slack and watch the beginners", "tokens": [50586, 286, 360, 3654, 729, 1045, 721, 307, 3967, 484, 294, 37211, 293, 1159, 264, 26992, 50876], "temperature": 0.0, "avg_logprob": -0.17631123616145208, "compression_ratio": 1.5870445344129556, "no_speech_prob": 0.009697431698441505}, {"id": 8, "seek": 4900, "start": 59.24, "end": 65.84, "text": " channel. Something that frequently comes up as a question is, I have this JavaScript", "tokens": [50876, 2269, 13, 6595, 300, 10374, 1487, 493, 382, 257, 1168, 307, 11, 286, 362, 341, 15778, 51206], "temperature": 0.0, "avg_logprob": -0.17631123616145208, "compression_ratio": 1.5870445344129556, "no_speech_prob": 0.009697431698441505}, {"id": 9, "seek": 4900, "start": 65.84, "end": 69.68, "text": " library that I have to use, but I want to build an Elm app. How do I do these", "tokens": [51206, 6405, 300, 286, 362, 281, 764, 11, 457, 286, 528, 281, 1322, 364, 2699, 76, 724, 13, 1012, 360, 286, 360, 613, 51398], "temperature": 0.0, "avg_logprob": -0.17631123616145208, "compression_ratio": 1.5870445344129556, "no_speech_prob": 0.009697431698441505}, {"id": 10, "seek": 4900, "start": 69.68, "end": 74.56, "text": " things together? There's a lot of reasons to need to do that. You can't do", "tokens": [51398, 721, 1214, 30, 821, 311, 257, 688, 295, 4112, 281, 643, 281, 360, 300, 13, 509, 393, 380, 360, 51642], "temperature": 0.0, "avg_logprob": -0.17631123616145208, "compression_ratio": 1.5870445344129556, "no_speech_prob": 0.009697431698441505}, {"id": 11, "seek": 7456, "start": 74.56, "end": 79.56, "text": " everything with Elm. For instance, this is how many web APIs there are. That's", "tokens": [50364, 1203, 365, 2699, 76, 13, 1171, 5197, 11, 341, 307, 577, 867, 3670, 21445, 456, 366, 13, 663, 311, 50614], "temperature": 0.0, "avg_logprob": -0.23653654782277234, "compression_ratio": 1.6638297872340426, "no_speech_prob": 0.026730017736554146}, {"id": 12, "seek": 7456, "start": 79.56, "end": 86.0, "text": " not how many Elm packages there are. Can anybody in the audience who has been", "tokens": [50614, 406, 577, 867, 2699, 76, 17401, 456, 366, 13, 1664, 4472, 294, 264, 4034, 567, 575, 668, 50936], "temperature": 0.0, "avg_logprob": -0.23653654782277234, "compression_ratio": 1.6638297872340426, "no_speech_prob": 0.026730017736554146}, {"id": 13, "seek": 7456, "start": 86.0, "end": 89.16, "text": " in the Elm community for a while tell me how you might go about using one of", "tokens": [50936, 294, 264, 2699, 76, 1768, 337, 257, 1339, 980, 385, 577, 291, 1062, 352, 466, 1228, 472, 295, 51094], "temperature": 0.0, "avg_logprob": -0.23653654782277234, "compression_ratio": 1.6638297872340426, "no_speech_prob": 0.026730017736554146}, {"id": 14, "seek": 7456, "start": 89.16, "end": 99.16, "text": " these if it's not in the Elm platform? Yeah, use the word. It's kind of become", "tokens": [51094, 613, 498, 309, 311, 406, 294, 264, 2699, 76, 3663, 30, 865, 11, 764, 264, 1349, 13, 467, 311, 733, 295, 1813, 51594], "temperature": 0.0, "avg_logprob": -0.23653654782277234, "compression_ratio": 1.6638297872340426, "no_speech_prob": 0.026730017736554146}, {"id": 15, "seek": 7456, "start": 99.16, "end": 104.2, "text": " almost a meme at this point in the Elm community that the response to how do I", "tokens": [51594, 1920, 257, 21701, 412, 341, 935, 294, 264, 2699, 76, 1768, 300, 264, 4134, 281, 577, 360, 286, 51846], "temperature": 0.0, "avg_logprob": -0.23653654782277234, "compression_ratio": 1.6638297872340426, "no_speech_prob": 0.026730017736554146}, {"id": 16, "seek": 10420, "start": 104.24000000000001, "end": 109.44, "text": " use JavaScript is to use a port. It's kind of a closed question almost. What I", "tokens": [50366, 764, 15778, 307, 281, 764, 257, 2436, 13, 467, 311, 733, 295, 257, 5395, 1168, 1920, 13, 708, 286, 50626], "temperature": 0.0, "avg_logprob": -0.22271762575422013, "compression_ratio": 1.2439024390243902, "no_speech_prob": 0.005210458301007748}, {"id": 17, "seek": 10420, "start": 109.44, "end": 118.24000000000001, "text": " want to do in this talk is reopen it just a little bit. Probably the world", "tokens": [50626, 528, 281, 360, 294, 341, 751, 307, 33861, 309, 445, 257, 707, 857, 13, 9210, 264, 1002, 51066], "temperature": 0.0, "avg_logprob": -0.22271762575422013, "compression_ratio": 1.2439024390243902, "no_speech_prob": 0.005210458301007748}, {"id": 18, "seek": 11824, "start": 118.24, "end": 133.88, "text": " won't end, but we'll see. This has nothing to do with anything. I forgot to take", "tokens": [50364, 1582, 380, 917, 11, 457, 321, 603, 536, 13, 639, 575, 1825, 281, 360, 365, 1340, 13, 286, 5298, 281, 747, 51146], "temperature": 0.0, "avg_logprob": -0.258331040541331, "compression_ratio": 1.2975206611570247, "no_speech_prob": 0.1275181770324707}, {"id": 19, "seek": 11824, "start": 133.88, "end": 143.24, "text": " this slide out. I don't remember what it was for. Let's see if I can work it", "tokens": [51146, 341, 4137, 484, 13, 286, 500, 380, 1604, 437, 309, 390, 337, 13, 961, 311, 536, 498, 286, 393, 589, 309, 51614], "temperature": 0.0, "avg_logprob": -0.258331040541331, "compression_ratio": 1.2975206611570247, "no_speech_prob": 0.1275181770324707}, {"id": 20, "seek": 14324, "start": 143.24, "end": 151.28, "text": " in. There are more reasons to want to use JavaScript in the browser than making", "tokens": [50364, 294, 13, 821, 366, 544, 4112, 281, 528, 281, 764, 15778, 294, 264, 11185, 813, 1455, 50766], "temperature": 0.0, "avg_logprob": -0.17639747195773656, "compression_ratio": 1.6359649122807018, "no_speech_prob": 0.06082836911082268}, {"id": 21, "seek": 14324, "start": 151.28, "end": 158.84, "text": " calls to your growth hacking AI blockchain client. Equally as often or", "tokens": [50766, 5498, 281, 428, 4599, 31422, 7318, 17176, 6423, 13, 15624, 379, 382, 2049, 420, 51144], "temperature": 0.0, "avg_logprob": -0.17639747195773656, "compression_ratio": 1.6359649122807018, "no_speech_prob": 0.06082836911082268}, {"id": 22, "seek": 14324, "start": 158.84, "end": 162.4, "text": " possibly more, you might want to render a map in case you forget where the", "tokens": [51144, 6264, 544, 11, 291, 1062, 528, 281, 15529, 257, 4471, 294, 1389, 291, 2870, 689, 264, 51322], "temperature": 0.0, "avg_logprob": -0.17639747195773656, "compression_ratio": 1.6359649122807018, "no_speech_prob": 0.06082836911082268}, {"id": 23, "seek": 14324, "start": 162.4, "end": 167.92000000000002, "text": " conference is and you want to build an Elm program to remind you. Or maybe you", "tokens": [51322, 7586, 307, 293, 291, 528, 281, 1322, 364, 2699, 76, 1461, 281, 4160, 291, 13, 1610, 1310, 291, 51598], "temperature": 0.0, "avg_logprob": -0.17639747195773656, "compression_ratio": 1.6359649122807018, "no_speech_prob": 0.06082836911082268}, {"id": 24, "seek": 14324, "start": 167.92000000000002, "end": 172.36, "text": " want to build a compiler into a browser platform and you need a text", "tokens": [51598, 528, 281, 1322, 257, 31958, 666, 257, 11185, 3663, 293, 291, 643, 257, 2487, 51820], "temperature": 0.0, "avg_logprob": -0.17639747195773656, "compression_ratio": 1.6359649122807018, "no_speech_prob": 0.06082836911082268}, {"id": 25, "seek": 17236, "start": 172.4, "end": 176.64000000000001, "text": " editor for people to share code and tell them where you can check out their", "tokens": [50366, 9839, 337, 561, 281, 2073, 3089, 293, 980, 552, 689, 291, 393, 1520, 484, 641, 50578], "temperature": 0.0, "avg_logprob": -0.28010975230823865, "compression_ratio": 1.8255813953488371, "no_speech_prob": 0.007805128116160631}, {"id": 26, "seek": 17236, "start": 176.64000000000001, "end": 182.36, "text": " mix tape. You can do this with ports. You can do anything with ports. It would be", "tokens": [50578, 2890, 7314, 13, 509, 393, 360, 341, 365, 18160, 13, 509, 393, 360, 1340, 365, 18160, 13, 467, 576, 312, 50864], "temperature": 0.0, "avg_logprob": -0.28010975230823865, "compression_ratio": 1.8255813953488371, "no_speech_prob": 0.007805128116160631}, {"id": 27, "seek": 17236, "start": 182.36, "end": 185.76000000000002, "text": " hard to get me on record saying you can't do something with ports. If you've", "tokens": [50864, 1152, 281, 483, 385, 322, 2136, 1566, 291, 393, 380, 360, 746, 365, 18160, 13, 759, 291, 600, 51034], "temperature": 0.0, "avg_logprob": -0.28010975230823865, "compression_ratio": 1.8255813953488371, "no_speech_prob": 0.007805128116160631}, {"id": 28, "seek": 17236, "start": 185.76000000000002, "end": 191.08, "text": " interacted with me online, you know that to be true. The way we would go about", "tokens": [51034, 49621, 365, 385, 2950, 11, 291, 458, 300, 281, 312, 2074, 13, 440, 636, 321, 576, 352, 466, 51300], "temperature": 0.0, "avg_logprob": -0.28010975230823865, "compression_ratio": 1.8255813953488371, "no_speech_prob": 0.007805128116160631}, {"id": 29, "seek": 17236, "start": 191.08, "end": 196.44000000000003, "text": " building maybe this with ports is we would first make a div and we give it an", "tokens": [51300, 2390, 1310, 341, 365, 18160, 307, 321, 576, 700, 652, 257, 3414, 293, 321, 976, 309, 364, 51568], "temperature": 0.0, "avg_logprob": -0.28010975230823865, "compression_ratio": 1.8255813953488371, "no_speech_prob": 0.007805128116160631}, {"id": 30, "seek": 17236, "start": 196.44000000000003, "end": 201.28000000000003, "text": " ID, like text editor. We make some ports and we tag it with some string that we", "tokens": [51568, 7348, 11, 411, 2487, 9839, 13, 492, 652, 512, 18160, 293, 321, 6162, 309, 365, 512, 6798, 300, 321, 51810], "temperature": 0.0, "avg_logprob": -0.28010975230823865, "compression_ratio": 1.8255813953488371, "no_speech_prob": 0.007805128116160631}, {"id": 31, "seek": 20128, "start": 201.28, "end": 205.28, "text": " can read in JavaScript and send some data as a value sometimes. We have a port", "tokens": [50364, 393, 1401, 294, 15778, 293, 2845, 512, 1412, 382, 257, 2158, 2171, 13, 492, 362, 257, 2436, 50564], "temperature": 0.0, "avg_logprob": -0.2924965640954804, "compression_ratio": 1.828125, "no_speech_prob": 0.002548482734709978}, {"id": 32, "seek": 20128, "start": 205.28, "end": 209.12, "text": " coming in where we can tag some information with a string and pass it as a", "tokens": [50564, 1348, 294, 689, 321, 393, 6162, 512, 1589, 365, 257, 6798, 293, 1320, 309, 382, 257, 50756], "temperature": 0.0, "avg_logprob": -0.2924965640954804, "compression_ratio": 1.828125, "no_speech_prob": 0.002548482734709978}, {"id": 33, "seek": 20128, "start": 209.12, "end": 213.44, "text": " value and deal with it in Elm in a subscription. When we initialize our", "tokens": [50756, 2158, 293, 2028, 365, 309, 294, 2699, 76, 294, 257, 17231, 13, 1133, 321, 5883, 1125, 527, 50972], "temperature": 0.0, "avg_logprob": -0.2924965640954804, "compression_ratio": 1.828125, "no_speech_prob": 0.002548482734709978}, {"id": 34, "seek": 20128, "start": 213.44, "end": 218.84, "text": " application, we have to set up the initial model and send out in a knit command and", "tokens": [50972, 3861, 11, 321, 362, 281, 992, 493, 264, 5883, 2316, 293, 2845, 484, 294, 257, 15594, 5622, 293, 51242], "temperature": 0.0, "avg_logprob": -0.2924965640954804, "compression_ratio": 1.828125, "no_speech_prob": 0.002548482734709978}, {"id": 35, "seek": 20128, "start": 218.84, "end": 223.44, "text": " handle that in JavaScript so we subscribe and we get the type and we do request", "tokens": [51242, 4813, 300, 294, 15778, 370, 321, 3022, 293, 321, 483, 264, 2010, 293, 321, 360, 5308, 51472], "temperature": 0.0, "avg_logprob": -0.2924965640954804, "compression_ratio": 1.828125, "no_speech_prob": 0.002548482734709978}, {"id": 36, "seek": 20128, "start": 223.44, "end": 227.24, "text": " animation frames so we can wait until the Elm version is rendering and then we", "tokens": [51472, 9603, 12083, 370, 321, 393, 1699, 1826, 264, 2699, 76, 3037, 307, 22407, 293, 550, 321, 51662], "temperature": 0.0, "avg_logprob": -0.2924965640954804, "compression_ratio": 1.828125, "no_speech_prob": 0.002548482734709978}, {"id": 37, "seek": 22724, "start": 227.36, "end": 231.36, "text": " look at the element and hopefully it's there. Who knows what we do if it's not?", "tokens": [50370, 574, 412, 264, 4478, 293, 4696, 309, 311, 456, 13, 2102, 3255, 437, 321, 360, 498, 309, 311, 406, 30, 50570], "temperature": 0.0, "avg_logprob": -0.2305239708192887, "compression_ratio": 1.8326848249027237, "no_speech_prob": 0.002843629801645875}, {"id": 38, "seek": 22724, "start": 231.36, "end": 236.84, "text": " I certainly don't. Then we make the editor. Assuming the element is there and", "tokens": [50570, 286, 3297, 500, 380, 13, 1396, 321, 652, 264, 9839, 13, 6281, 24919, 264, 4478, 307, 456, 293, 50844], "temperature": 0.0, "avg_logprob": -0.2305239708192887, "compression_ratio": 1.8326848249027237, "no_speech_prob": 0.002843629801645875}, {"id": 39, "seek": 22724, "start": 236.84, "end": 239.36, "text": " then we attach the editor to the elements so we don't have to remake it every", "tokens": [50844, 550, 321, 5085, 264, 9839, 281, 264, 4959, 370, 321, 500, 380, 362, 281, 28582, 309, 633, 50970], "temperature": 0.0, "avg_logprob": -0.2305239708192887, "compression_ratio": 1.8326848249027237, "no_speech_prob": 0.002843629801645875}, {"id": 40, "seek": 22724, "start": 239.36, "end": 243.76000000000002, "text": " time. And then we listen for changes on the editor. We send those back in", "tokens": [50970, 565, 13, 400, 550, 321, 2140, 337, 2962, 322, 264, 9839, 13, 492, 2845, 729, 646, 294, 51190], "temperature": 0.0, "avg_logprob": -0.2305239708192887, "compression_ratio": 1.8326848249027237, "no_speech_prob": 0.002843629801645875}, {"id": 41, "seek": 22724, "start": 243.76000000000002, "end": 248.76000000000002, "text": " through the port, call a value, update it as a string tag, get the value from the", "tokens": [51190, 807, 264, 2436, 11, 818, 257, 2158, 11, 5623, 309, 382, 257, 6798, 6162, 11, 483, 264, 2158, 490, 264, 51440], "temperature": 0.0, "avg_logprob": -0.2305239708192887, "compression_ratio": 1.8326848249027237, "no_speech_prob": 0.002843629801645875}, {"id": 42, "seek": 22724, "start": 248.76000000000002, "end": 254.20000000000002, "text": " editor, make a code-changed message so that we can capture that into our update", "tokens": [51440, 9839, 11, 652, 257, 3089, 12, 339, 10296, 3636, 370, 300, 321, 393, 7983, 300, 666, 527, 5623, 51712], "temperature": 0.0, "avg_logprob": -0.2305239708192887, "compression_ratio": 1.8326848249027237, "no_speech_prob": 0.002843629801645875}, {"id": 43, "seek": 25420, "start": 254.2, "end": 259.08, "text": " function, handle that message, set the code in the model and then subscribe to", "tokens": [50364, 2445, 11, 4813, 300, 3636, 11, 992, 264, 3089, 294, 264, 2316, 293, 550, 3022, 281, 50608], "temperature": 0.0, "avg_logprob": -0.16260928344726563, "compression_ratio": 1.874015748031496, "no_speech_prob": 0.0020176181569695473}, {"id": 44, "seek": 25420, "start": 259.08, "end": 263.08, "text": " text editor in, look up the type, see if it's value updated, decode the data. If it", "tokens": [50608, 2487, 9839, 294, 11, 574, 493, 264, 2010, 11, 536, 498, 309, 311, 2158, 10588, 11, 979, 1429, 264, 1412, 13, 759, 309, 50808], "temperature": 0.0, "avg_logprob": -0.16260928344726563, "compression_ratio": 1.874015748031496, "no_speech_prob": 0.0020176181569695473}, {"id": 45, "seek": 25420, "start": 263.08, "end": 270.91999999999996, "text": " fails, if it's something else, that works. That's fine. And then maybe also we want", "tokens": [50808, 18199, 11, 498, 309, 311, 746, 1646, 11, 300, 1985, 13, 663, 311, 2489, 13, 400, 550, 1310, 611, 321, 528, 51200], "temperature": 0.0, "avg_logprob": -0.16260928344726563, "compression_ratio": 1.874015748031496, "no_speech_prob": 0.0020176181569695473}, {"id": 46, "seek": 25420, "start": 270.91999999999996, "end": 274.64, "text": " to do things like reset the code from within the Elm application if the user", "tokens": [51200, 281, 360, 721, 411, 14322, 264, 3089, 490, 1951, 264, 2699, 76, 3861, 498, 264, 4195, 51386], "temperature": 0.0, "avg_logprob": -0.16260928344726563, "compression_ratio": 1.874015748031496, "no_speech_prob": 0.0020176181569695473}, {"id": 47, "seek": 25420, "start": 274.64, "end": 279.48, "text": " clicks a button so we make a reset the code message and then in our model, in", "tokens": [51386, 18521, 257, 2960, 370, 321, 652, 257, 14322, 264, 3089, 3636, 293, 550, 294, 527, 2316, 11, 294, 51628], "temperature": 0.0, "avg_logprob": -0.16260928344726563, "compression_ratio": 1.874015748031496, "no_speech_prob": 0.0020176181569695473}, {"id": 48, "seek": 25420, "start": 279.48, "end": 282.64, "text": " our update function, we reset the code in the model, we send a message out", "tokens": [51628, 527, 5623, 2445, 11, 321, 14322, 264, 3089, 294, 264, 2316, 11, 321, 2845, 257, 3636, 484, 51786], "temperature": 0.0, "avg_logprob": -0.16260928344726563, "compression_ratio": 1.874015748031496, "no_speech_prob": 0.0020176181569695473}, {"id": 49, "seek": 28264, "start": 282.71999999999997, "end": 287.44, "text": " through text editor out, give it the name value updated, pass it as a string and in", "tokens": [50368, 807, 2487, 9839, 484, 11, 976, 309, 264, 1315, 2158, 10588, 11, 1320, 309, 382, 257, 6798, 293, 294, 50604], "temperature": 0.0, "avg_logprob": -0.3315538518569049, "compression_ratio": 1.579268292682927, "no_speech_prob": 0.0018099204171448946}, {"id": 50, "seek": 28264, "start": 287.44, "end": 291.84, "text": " our subscription in JavaScript, we look for the element again, hopefully it's", "tokens": [50604, 527, 17231, 294, 15778, 11, 321, 574, 337, 264, 4478, 797, 11, 4696, 309, 311, 50824], "temperature": 0.0, "avg_logprob": -0.3315538518569049, "compression_ratio": 1.579268292682927, "no_speech_prob": 0.0018099204171448946}, {"id": 51, "seek": 28264, "start": 291.84, "end": 297.44, "text": " there. Look for the editor, hopefully that's there. And then we set the data and", "tokens": [50824, 456, 13, 2053, 337, 264, 9839, 11, 4696, 300, 311, 456, 13, 400, 550, 321, 992, 264, 1412, 293, 51104], "temperature": 0.0, "avg_logprob": -0.3315538518569049, "compression_ratio": 1.579268292682927, "no_speech_prob": 0.0018099204171448946}, {"id": 52, "seek": 28264, "start": 297.44, "end": 298.84, "text": " then we're done.", "tokens": [51104, 550, 321, 434, 1096, 13, 51174], "temperature": 0.0, "avg_logprob": -0.3315538518569049, "compression_ratio": 1.579268292682927, "no_speech_prob": 0.0018099204171448946}, {"id": 53, "seek": 29884, "start": 298.84, "end": 313.4, "text": " What if we have more than one text editor in our application? If we're not", "tokens": [50364, 708, 498, 321, 362, 544, 813, 472, 2487, 9839, 294, 527, 3861, 30, 759, 321, 434, 406, 51092], "temperature": 0.0, "avg_logprob": -0.18250059703039745, "compression_ratio": 1.4591194968553458, "no_speech_prob": 0.0013247117167338729}, {"id": 54, "seek": 29884, "start": 313.4, "end": 317.55999999999995, "text": " writing code, this is how we get text input from the user. It's just a text", "tokens": [51092, 3579, 3089, 11, 341, 307, 577, 321, 483, 2487, 4846, 490, 264, 4195, 13, 467, 311, 445, 257, 2487, 51300], "temperature": 0.0, "avg_logprob": -0.18250059703039745, "compression_ratio": 1.4591194968553458, "no_speech_prob": 0.0013247117167338729}, {"id": 55, "seek": 29884, "start": 317.55999999999995, "end": 323.2, "text": " area and we use an HTML attribute to say that this is what the code is and we use", "tokens": [51300, 1859, 293, 321, 764, 364, 17995, 19667, 281, 584, 300, 341, 307, 437, 264, 3089, 307, 293, 321, 764, 51582], "temperature": 0.0, "avg_logprob": -0.18250059703039745, "compression_ratio": 1.4591194968553458, "no_speech_prob": 0.0013247117167338729}, {"id": 56, "seek": 32320, "start": 323.2, "end": 329.52, "text": " text on input to handle the event from HTML. This is like a pretty good way to", "tokens": [50364, 2487, 322, 4846, 281, 4813, 264, 2280, 490, 17995, 13, 639, 307, 411, 257, 1238, 665, 636, 281, 50680], "temperature": 0.0, "avg_logprob": -0.21553092307232796, "compression_ratio": 1.592, "no_speech_prob": 0.026724709197878838}, {"id": 57, "seek": 32320, "start": 329.52, "end": 338.28, "text": " represent some visual component, excuse me, some visual element of our user", "tokens": [50680, 2906, 512, 5056, 6542, 11, 8960, 385, 11, 512, 5056, 4478, 295, 527, 4195, 51118], "temperature": 0.0, "avg_logprob": -0.21553092307232796, "compression_ratio": 1.592, "no_speech_prob": 0.026724709197878838}, {"id": 58, "seek": 32320, "start": 338.28, "end": 343.32, "text": " interface that can be interacted with by the user. So wouldn't it be cool if we", "tokens": [51118, 9226, 300, 393, 312, 49621, 365, 538, 264, 4195, 13, 407, 2759, 380, 309, 312, 1627, 498, 321, 51370], "temperature": 0.0, "avg_logprob": -0.21553092307232796, "compression_ratio": 1.592, "no_speech_prob": 0.026724709197878838}, {"id": 59, "seek": 32320, "start": 343.32, "end": 348.12, "text": " also had these? We could just say give me a code editor element and then put these", "tokens": [51370, 611, 632, 613, 30, 492, 727, 445, 584, 976, 385, 257, 3089, 9839, 4478, 293, 550, 829, 613, 51610], "temperature": 0.0, "avg_logprob": -0.21553092307232796, "compression_ratio": 1.592, "no_speech_prob": 0.026724709197878838}, {"id": 60, "seek": 32320, "start": 348.12, "end": 352.88, "text": " attributes on it and let me listen for editor changes. Obviously these functions", "tokens": [51610, 17212, 322, 309, 293, 718, 385, 2140, 337, 9839, 2962, 13, 7580, 613, 6828, 51848], "temperature": 0.0, "avg_logprob": -0.21553092307232796, "compression_ratio": 1.592, "no_speech_prob": 0.026724709197878838}, {"id": 61, "seek": 35288, "start": 352.96, "end": 362.92, "text": " don't exist in the HTML package, but false. Turns out you can do this. What? You", "tokens": [50368, 500, 380, 2514, 294, 264, 17995, 7372, 11, 457, 7908, 13, 29524, 484, 291, 393, 360, 341, 13, 708, 30, 509, 50866], "temperature": 0.0, "avg_logprob": -0.3053279831295922, "compression_ratio": 1.2015503875968991, "no_speech_prob": 0.001476942328736186}, {"id": 62, "seek": 35288, "start": 362.92, "end": 366.44, "text": " could do it with just today's element and the web platform as it currently", "tokens": [50866, 727, 360, 309, 365, 445, 965, 311, 4478, 293, 264, 3670, 3663, 382, 309, 4362, 51042], "temperature": 0.0, "avg_logprob": -0.3053279831295922, "compression_ratio": 1.2015503875968991, "no_speech_prob": 0.001476942328736186}, {"id": 63, "seek": 36644, "start": 366.44, "end": 383.28, "text": " exists right now. So let's do it. This is, like I said, these functions don't", "tokens": [50364, 8198, 558, 586, 13, 407, 718, 311, 360, 309, 13, 639, 307, 11, 411, 286, 848, 11, 613, 6828, 500, 380, 51206], "temperature": 0.0, "avg_logprob": -0.23662182864020853, "compression_ratio": 1.5, "no_speech_prob": 0.04600198194384575}, {"id": 64, "seek": 36644, "start": 383.28, "end": 388.96, "text": " exist in the HTML package, but these functions do. HTML node, which lets us", "tokens": [51206, 2514, 294, 264, 17995, 7372, 11, 457, 613, 6828, 360, 13, 17995, 9984, 11, 597, 6653, 505, 51490], "temperature": 0.0, "avg_logprob": -0.23662182864020853, "compression_ratio": 1.5, "no_speech_prob": 0.04600198194384575}, {"id": 65, "seek": 36644, "start": 388.96, "end": 394.84, "text": " pick any tag name we want and we have HTML.attributes.property, which lets us", "tokens": [51490, 1888, 604, 6162, 1315, 321, 528, 293, 321, 362, 17995, 13, 1591, 2024, 1819, 13, 4318, 610, 874, 11, 597, 6653, 505, 51784], "temperature": 0.0, "avg_logprob": -0.23662182864020853, "compression_ratio": 1.5, "no_speech_prob": 0.04600198194384575}, {"id": 66, "seek": 39484, "start": 394.91999999999996, "end": 400.35999999999996, "text": " assign any JSON value to any JavaScript property of that element. Similarly,", "tokens": [50368, 6269, 604, 31828, 2158, 281, 604, 15778, 4707, 295, 300, 4478, 13, 13157, 11, 50640], "temperature": 0.0, "avg_logprob": -0.22590608950014468, "compression_ratio": 1.5728155339805825, "no_speech_prob": 0.0018664996605366468}, {"id": 67, "seek": 39484, "start": 400.35999999999996, "end": 406.76, "text": " HTML.events.on lets us listen to any event. So here's that same code in the text", "tokens": [50640, 17995, 13, 13379, 791, 13, 266, 6653, 505, 2140, 281, 604, 2280, 13, 407, 510, 311, 300, 912, 3089, 294, 264, 2487, 50960], "temperature": 0.0, "avg_logprob": -0.22590608950014468, "compression_ratio": 1.5728155339805825, "no_speech_prob": 0.0018664996605366468}, {"id": 68, "seek": 39484, "start": 406.76, "end": 417.64, "text": " editor and here is that element rendered. So we can see we're assigning editor value", "tokens": [50960, 9839, 293, 510, 307, 300, 4478, 28748, 13, 407, 321, 393, 536, 321, 434, 49602, 9839, 2158, 51504], "temperature": 0.0, "avg_logprob": -0.22590608950014468, "compression_ratio": 1.5728155339805825, "no_speech_prob": 0.0018664996605366468}, {"id": 69, "seek": 39484, "start": 417.64, "end": 423.15999999999997, "text": " here. The value of that should be hello world according to our Elm program and it", "tokens": [51504, 510, 13, 440, 2158, 295, 300, 820, 312, 7751, 1002, 4650, 281, 527, 2699, 76, 1461, 293, 309, 51780], "temperature": 0.0, "avg_logprob": -0.22590608950014468, "compression_ratio": 1.5728155339805825, "no_speech_prob": 0.0018664996605366468}, {"id": 70, "seek": 42316, "start": 423.16, "end": 429.88000000000005, "text": " is. And then if we go back to the elements tab of Chrome's dev tools and take a look at", "tokens": [50364, 307, 13, 400, 550, 498, 321, 352, 646, 281, 264, 4959, 4421, 295, 15327, 311, 1905, 3873, 293, 747, 257, 574, 412, 50700], "temperature": 0.0, "avg_logprob": -0.18591771806989396, "compression_ratio": 1.5345622119815667, "no_speech_prob": 0.00028234338969923556}, {"id": 71, "seek": 42316, "start": 429.88000000000005, "end": 433.84000000000003, "text": " our event listeners here, we see that there's an editor changed event. You can", "tokens": [50700, 527, 2280, 23274, 510, 11, 321, 536, 300, 456, 311, 364, 9839, 3105, 2280, 13, 509, 393, 50898], "temperature": 0.0, "avg_logprob": -0.18591771806989396, "compression_ratio": 1.5345622119815667, "no_speech_prob": 0.00028234338969923556}, {"id": 72, "seek": 42316, "start": 433.84000000000003, "end": 444.56, "text": " just do this. It's pretty cool. So right now we have a nice gray rectangle, which as", "tokens": [50898, 445, 360, 341, 13, 467, 311, 1238, 1627, 13, 407, 558, 586, 321, 362, 257, 1481, 10855, 21930, 11, 597, 382, 51434], "temperature": 0.0, "avg_logprob": -0.18591771806989396, "compression_ratio": 1.5345622119815667, "no_speech_prob": 0.00028234338969923556}, {"id": 73, "seek": 42316, "start": 444.56, "end": 448.20000000000005, "text": " much as I'd love for that to be the way that my text editor looks some days, it's", "tokens": [51434, 709, 382, 286, 1116, 959, 337, 300, 281, 312, 264, 636, 300, 452, 2487, 9839, 1542, 512, 1708, 11, 309, 311, 51616], "temperature": 0.0, "avg_logprob": -0.18591771806989396, "compression_ratio": 1.5345622119815667, "no_speech_prob": 0.00028234338969923556}, {"id": 74, "seek": 44820, "start": 448.24, "end": 453.59999999999997, "text": " not super useful right now. So we actually have to explain to the browser how to deal", "tokens": [50366, 406, 1687, 4420, 558, 586, 13, 407, 321, 767, 362, 281, 2903, 281, 264, 11185, 577, 281, 2028, 50634], "temperature": 0.0, "avg_logprob": -0.16733122771640993, "compression_ratio": 1.680327868852459, "no_speech_prob": 0.0031716555822640657}, {"id": 75, "seek": 44820, "start": 453.59999999999997, "end": 458.0, "text": " with this and the way we do that is with the custom elements API. So we do custom", "tokens": [50634, 365, 341, 293, 264, 636, 321, 360, 300, 307, 365, 264, 2375, 4959, 9362, 13, 407, 321, 360, 2375, 50854], "temperature": 0.0, "avg_logprob": -0.16733122771640993, "compression_ratio": 1.680327868852459, "no_speech_prob": 0.0031716555822640657}, {"id": 76, "seek": 44820, "start": 458.0, "end": 463.71999999999997, "text": " elements.define. So this was code editor and we're going to write a class that", "tokens": [50854, 4959, 13, 20595, 533, 13, 407, 341, 390, 3089, 9839, 293, 321, 434, 516, 281, 2464, 257, 1508, 300, 51140], "temperature": 0.0, "avg_logprob": -0.16733122771640993, "compression_ratio": 1.680327868852459, "no_speech_prob": 0.0031716555822640657}, {"id": 77, "seek": 44820, "start": 463.71999999999997, "end": 471.44, "text": " extends HTML elements. Oh, my gosh, VS code. We get it. So the one thing that we", "tokens": [51140, 26448, 17995, 4959, 13, 876, 11, 452, 6502, 11, 25091, 3089, 13, 492, 483, 309, 13, 407, 264, 472, 551, 300, 321, 51526], "temperature": 0.0, "avg_logprob": -0.16733122771640993, "compression_ratio": 1.680327868852459, "no_speech_prob": 0.0031716555822640657}, {"id": 78, "seek": 44820, "start": 471.44, "end": 477.24, "text": " absolutely have to do to get started is write this connected callback method. This", "tokens": [51526, 3122, 362, 281, 360, 281, 483, 1409, 307, 2464, 341, 4582, 818, 3207, 3170, 13, 639, 51816], "temperature": 0.0, "avg_logprob": -0.16733122771640993, "compression_ratio": 1.680327868852459, "no_speech_prob": 0.0031716555822640657}, {"id": 79, "seek": 47724, "start": 477.24, "end": 481.8, "text": " method is called by the custom elements API in the browser. Whenever the elements", "tokens": [50364, 3170, 307, 1219, 538, 264, 2375, 4959, 9362, 294, 264, 11185, 13, 14159, 264, 4959, 50592], "temperature": 0.0, "avg_logprob": -0.1791131903485554, "compression_ratio": 1.6394230769230769, "no_speech_prob": 0.000743099779356271}, {"id": 80, "seek": 47724, "start": 481.8, "end": 486.12, "text": " been inserted into the DOM or it's been discovered in the DOM before this definition was", "tokens": [50592, 668, 27992, 666, 264, 35727, 420, 309, 311, 668, 6941, 294, 264, 35727, 949, 341, 7123, 390, 50808], "temperature": 0.0, "avg_logprob": -0.1791131903485554, "compression_ratio": 1.6394230769230769, "no_speech_prob": 0.000743099779356271}, {"id": 81, "seek": 47724, "start": 486.12, "end": 491.96000000000004, "text": " defined. So it guarantees us that all of the DOM APIs are going to be ready for us by", "tokens": [50808, 7642, 13, 407, 309, 32567, 505, 300, 439, 295, 264, 35727, 21445, 366, 516, 281, 312, 1919, 337, 505, 538, 51100], "temperature": 0.0, "avg_logprob": -0.1791131903485554, "compression_ratio": 1.6394230769230769, "no_speech_prob": 0.000743099779356271}, {"id": 82, "seek": 47724, "start": 491.96000000000004, "end": 499.6, "text": " the time this code is executed. So we'll say this.editor equals code mirror this and", "tokens": [51100, 264, 565, 341, 3089, 307, 17577, 13, 407, 321, 603, 584, 341, 13, 292, 3029, 6915, 3089, 8013, 341, 293, 51482], "temperature": 0.0, "avg_logprob": -0.1791131903485554, "compression_ratio": 1.6394230769230769, "no_speech_prob": 0.000743099779356271}, {"id": 83, "seek": 49960, "start": 499.6, "end": 507.12, "text": " we'll do some options. We'll do indent unit before. We'll do mode. Elm. We'll do line", "tokens": [50364, 321, 603, 360, 512, 3956, 13, 492, 603, 360, 44494, 4985, 949, 13, 492, 603, 360, 4391, 13, 2699, 76, 13, 492, 603, 360, 1622, 50740], "temperature": 0.0, "avg_logprob": -0.31582164764404297, "compression_ratio": 1.4491525423728813, "no_speech_prob": 0.05578102916479111}, {"id": 84, "seek": 49960, "start": 507.12, "end": 520.36, "text": " numbers. True. And we'll do value. Artcoded to module. Main. Exposing all. We'll save", "tokens": [50740, 3547, 13, 13587, 13, 400, 321, 603, 360, 2158, 13, 5735, 66, 12340, 281, 10088, 13, 12383, 13, 21391, 6110, 439, 13, 492, 603, 3155, 51402], "temperature": 0.0, "avg_logprob": -0.31582164764404297, "compression_ratio": 1.4491525423728813, "no_speech_prob": 0.05578102916479111}, {"id": 85, "seek": 52036, "start": 520.36, "end": 532.24, "text": " it. And webpack will surely be very fast and recompile this for us. There it is. So", "tokens": [50364, 309, 13, 400, 3670, 9539, 486, 11468, 312, 588, 2370, 293, 48000, 794, 341, 337, 505, 13, 821, 309, 307, 13, 407, 50958], "temperature": 0.0, "avg_logprob": -0.23200236575704225, "compression_ratio": 1.4382022471910112, "no_speech_prob": 0.027154913172125816}, {"id": 86, "seek": 52036, "start": 532.24, "end": 540.48, "text": " there's, yeah, that's pretty cool. Thank you for applauding. But unfortunately, that's", "tokens": [50958, 456, 311, 11, 1338, 11, 300, 311, 1238, 1627, 13, 1044, 291, 337, 15865, 13, 583, 7015, 11, 300, 311, 51370], "temperature": 0.0, "avg_logprob": -0.23200236575704225, "compression_ratio": 1.4382022471910112, "no_speech_prob": 0.027154913172125816}, {"id": 87, "seek": 52036, "start": 540.48, "end": 544.72, "text": " not the text that we said we should have in our Elm program. So it's not super useful", "tokens": [51370, 406, 264, 2487, 300, 321, 848, 321, 820, 362, 294, 527, 2699, 76, 1461, 13, 407, 309, 311, 406, 1687, 4420, 51582], "temperature": 0.0, "avg_logprob": -0.23200236575704225, "compression_ratio": 1.4382022471910112, "no_speech_prob": 0.027154913172125816}, {"id": 88, "seek": 54472, "start": 544.72, "end": 551.8000000000001, "text": " yet. So what we need to do is set up a property getter and setter to intercept the virtual", "tokens": [50364, 1939, 13, 407, 437, 321, 643, 281, 360, 307, 992, 493, 257, 4707, 483, 391, 293, 992, 391, 281, 24700, 264, 6374, 50718], "temperature": 0.0, "avg_logprob": -0.18932630849439044, "compression_ratio": 1.591743119266055, "no_speech_prob": 0.12920401990413666}, {"id": 89, "seek": 54472, "start": 551.8000000000001, "end": 557.12, "text": " DOM's behavior of getting and setting this property. So the first thing that we will", "tokens": [50718, 35727, 311, 5223, 295, 1242, 293, 3287, 341, 4707, 13, 407, 264, 700, 551, 300, 321, 486, 50984], "temperature": 0.0, "avg_logprob": -0.18932630849439044, "compression_ratio": 1.591743119266055, "no_speech_prob": 0.12920401990413666}, {"id": 90, "seek": 54472, "start": 557.12, "end": 565.12, "text": " do is set up an instructor and we have to call Suver because JavaScript says so. Make", "tokens": [50984, 360, 307, 992, 493, 364, 18499, 293, 321, 362, 281, 818, 2746, 331, 570, 15778, 1619, 370, 13, 4387, 51384], "temperature": 0.0, "avg_logprob": -0.18932630849439044, "compression_ratio": 1.591743119266055, "no_speech_prob": 0.12920401990413666}, {"id": 91, "seek": 54472, "start": 565.12, "end": 570.76, "text": " an editor value backing store. This should be familiar to anybody who's done a lot of", "tokens": [51384, 364, 9839, 2158, 19373, 3531, 13, 639, 820, 312, 4963, 281, 4472, 567, 311, 1096, 257, 688, 295, 51666], "temperature": 0.0, "avg_logprob": -0.18932630849439044, "compression_ratio": 1.591743119266055, "no_speech_prob": 0.12920401990413666}, {"id": 92, "seek": 57076, "start": 570.8, "end": 578.16, "text": " C sharp programming. We'll put that default value up in the constructor and we will set", "tokens": [50366, 383, 8199, 9410, 13, 492, 603, 829, 300, 7576, 2158, 493, 294, 264, 47479, 293, 321, 486, 992, 50734], "temperature": 0.0, "avg_logprob": -0.1696260701055112, "compression_ratio": 1.587878787878788, "no_speech_prob": 0.026744160801172256}, {"id": 93, "seek": 57076, "start": 578.16, "end": 588.8, "text": " this to editor value. And now when we get editor value, we'll return this.editor value", "tokens": [50734, 341, 281, 9839, 2158, 13, 400, 586, 562, 321, 483, 9839, 2158, 11, 321, 603, 2736, 341, 13, 292, 3029, 2158, 51266], "temperature": 0.0, "avg_logprob": -0.1696260701055112, "compression_ratio": 1.587878787878788, "no_speech_prob": 0.026744160801172256}, {"id": 94, "seek": 57076, "start": 588.8, "end": 599.16, "text": " and when we set it, the real magic happens. So not only can we assign here, we can also", "tokens": [51266, 293, 562, 321, 992, 309, 11, 264, 957, 5585, 2314, 13, 407, 406, 787, 393, 321, 6269, 510, 11, 321, 393, 611, 51784], "temperature": 0.0, "avg_logprob": -0.1696260701055112, "compression_ratio": 1.587878787878788, "no_speech_prob": 0.026744160801172256}, {"id": 95, "seek": 59916, "start": 599.16, "end": 605.0, "text": " check that our editor exists. And this time it's totally cool if it doesn't because we're", "tokens": [50364, 1520, 300, 527, 9839, 8198, 13, 400, 341, 565, 309, 311, 3879, 1627, 498, 309, 1177, 380, 570, 321, 434, 50656], "temperature": 0.0, "avg_logprob": -0.13065062813136888, "compression_ratio": 1.73046875, "no_speech_prob": 0.0006459932774305344}, {"id": 96, "seek": 59916, "start": 605.0, "end": 609.88, "text": " guaranteed for this method to run and we always know that the latest value that we've said", "tokens": [50656, 18031, 337, 341, 3170, 281, 1190, 293, 321, 1009, 458, 300, 264, 6792, 2158, 300, 321, 600, 848, 50900], "temperature": 0.0, "avg_logprob": -0.13065062813136888, "compression_ratio": 1.73046875, "no_speech_prob": 0.0006459932774305344}, {"id": 97, "seek": 59916, "start": 609.88, "end": 615.9599999999999, "text": " is going to be used. So that's fine. So we can just return here. And if it does exist,", "tokens": [50900, 307, 516, 281, 312, 1143, 13, 407, 300, 311, 2489, 13, 407, 321, 393, 445, 2736, 510, 13, 400, 498, 309, 775, 2514, 11, 51204], "temperature": 0.0, "avg_logprob": -0.13065062813136888, "compression_ratio": 1.73046875, "no_speech_prob": 0.0006459932774305344}, {"id": 98, "seek": 59916, "start": 615.9599999999999, "end": 622.4399999999999, "text": " we set value. And then the last thing that I like to make sure to do is avoid doing any", "tokens": [51204, 321, 992, 2158, 13, 400, 550, 264, 1036, 551, 300, 286, 411, 281, 652, 988, 281, 360, 307, 5042, 884, 604, 51528], "temperature": 0.0, "avg_logprob": -0.13065062813136888, "compression_ratio": 1.73046875, "no_speech_prob": 0.0006459932774305344}, {"id": 99, "seek": 59916, "start": 622.4399999999999, "end": 627.52, "text": " unnecessary work. So if the value is already equal to the thing that was set, we're not", "tokens": [51528, 19350, 589, 13, 407, 498, 264, 2158, 307, 1217, 2681, 281, 264, 551, 300, 390, 992, 11, 321, 434, 406, 51782], "temperature": 0.0, "avg_logprob": -0.13065062813136888, "compression_ratio": 1.73046875, "no_speech_prob": 0.0006459932774305344}, {"id": 100, "seek": 62752, "start": 627.56, "end": 633.36, "text": " going to do anything. So now I'll save it and we'll stand here awkwardly with our arms folded", "tokens": [50366, 516, 281, 360, 1340, 13, 407, 586, 286, 603, 3155, 309, 293, 321, 603, 1463, 510, 11411, 356, 365, 527, 5812, 23940, 50656], "temperature": 0.0, "avg_logprob": -0.1439368184407552, "compression_ratio": 1.4725274725274726, "no_speech_prob": 0.002549891360104084}, {"id": 101, "seek": 62752, "start": 633.36, "end": 644.12, "text": " while it recompiles. So France is cool. There it is. Hello, world. You don't have to clap", "tokens": [50656, 1339, 309, 48000, 4680, 13, 407, 6190, 307, 1627, 13, 821, 309, 307, 13, 2425, 11, 1002, 13, 509, 500, 380, 362, 281, 20760, 51194], "temperature": 0.0, "avg_logprob": -0.1439368184407552, "compression_ratio": 1.4725274725274726, "no_speech_prob": 0.002549891360104084}, {"id": 102, "seek": 62752, "start": 644.12, "end": 651.76, "text": " every time. I'll let you know when to clap after I'm finished writing. I'm a regular", "tokens": [51194, 633, 565, 13, 286, 603, 718, 291, 458, 562, 281, 20760, 934, 286, 478, 4335, 3579, 13, 286, 478, 257, 3890, 51576], "temperature": 0.0, "avg_logprob": -0.1439368184407552, "compression_ratio": 1.4725274725274726, "no_speech_prob": 0.002549891360104084}, {"id": 103, "seek": 65176, "start": 651.84, "end": 661.68, "text": " Jeb Bush. Okay. So we can type in here and CodeMirror is fine with that, but as you can see, no", "tokens": [50368, 2588, 65, 15782, 13, 1033, 13, 407, 321, 393, 2010, 294, 510, 293, 15549, 44, 347, 2874, 307, 2489, 365, 300, 11, 457, 382, 291, 393, 536, 11, 572, 50860], "temperature": 0.0, "avg_logprob": -0.21400823398512236, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.01638859137892723}, {"id": 104, "seek": 65176, "start": 661.68, "end": 666.4399999999999, "text": " messages are being triggered. We have this whole elaborate listener setup, but nothing coming", "tokens": [50860, 7897, 366, 885, 21710, 13, 492, 362, 341, 1379, 20945, 31569, 8657, 11, 457, 1825, 1348, 51098], "temperature": 0.0, "avg_logprob": -0.21400823398512236, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.01638859137892723}, {"id": 105, "seek": 65176, "start": 666.4399999999999, "end": 672.88, "text": " in. So the way that we deal with this is to go down to where we define our editor. And if you'll", "tokens": [51098, 294, 13, 407, 264, 636, 300, 321, 2028, 365, 341, 307, 281, 352, 760, 281, 689, 321, 6964, 527, 9839, 13, 400, 498, 291, 603, 51420], "temperature": 0.0, "avg_logprob": -0.21400823398512236, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.01638859137892723}, {"id": 106, "seek": 65176, "start": 672.88, "end": 677.76, "text": " remember from before when I was talking really fast about ports, we listened to on changes to", "tokens": [51420, 1604, 490, 949, 562, 286, 390, 1417, 534, 2370, 466, 18160, 11, 321, 13207, 281, 322, 2962, 281, 51664], "temperature": 0.0, "avg_logprob": -0.21400823398512236, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.01638859137892723}, {"id": 107, "seek": 67776, "start": 677.76, "end": 684.92, "text": " find out when CodeMirror has changed. And this time, we will first sync our backing store with", "tokens": [50364, 915, 484, 562, 15549, 44, 347, 2874, 575, 3105, 13, 400, 341, 565, 11, 321, 486, 700, 20271, 527, 19373, 3531, 365, 50722], "temperature": 0.0, "avg_logprob": -0.1587992761193252, "compression_ratio": 1.5775401069518717, "no_speech_prob": 0.0006165262893773615}, {"id": 108, "seek": 67776, "start": 684.92, "end": 695.88, "text": " the CodeMirror instance. And then we'll dispatch an event. This is a built-in function. With a new", "tokens": [50722, 264, 15549, 44, 347, 2874, 5197, 13, 400, 550, 321, 603, 36729, 364, 2280, 13, 639, 307, 257, 3094, 12, 259, 2445, 13, 2022, 257, 777, 51270], "temperature": 0.0, "avg_logprob": -0.1587992761193252, "compression_ratio": 1.5775401069518717, "no_speech_prob": 0.0006165262893773615}, {"id": 109, "seek": 67776, "start": 695.88, "end": 706.4399999999999, "text": " custom event. This is a built-in constructor. And we said it was editor changed. I'll save it. I hope", "tokens": [51270, 2375, 2280, 13, 639, 307, 257, 3094, 12, 259, 47479, 13, 400, 321, 848, 309, 390, 9839, 3105, 13, 286, 603, 3155, 309, 13, 286, 1454, 51798], "temperature": 0.0, "avg_logprob": -0.1587992761193252, "compression_ratio": 1.5775401069518717, "no_speech_prob": 0.0006165262893773615}, {"id": 110, "seek": 70644, "start": 706.48, "end": 716.0, "text": " the syntax is right. Looks like it. I think this is the last time we're going to do this. That's", "tokens": [50366, 264, 28431, 307, 558, 13, 10027, 411, 309, 13, 286, 519, 341, 307, 264, 1036, 565, 321, 434, 516, 281, 360, 341, 13, 663, 311, 50842], "temperature": 0.0, "avg_logprob": -0.21968811529654045, "compression_ratio": 1.3636363636363635, "no_speech_prob": 0.0006359165417961776}, {"id": 111, "seek": 70644, "start": 716.0, "end": 727.9200000000001, "text": " fine. And now, when I expose everything from main, we can see there's some messages there and it's", "tokens": [50842, 2489, 13, 400, 586, 11, 562, 286, 19219, 1203, 490, 2135, 11, 321, 393, 536, 456, 311, 512, 7897, 456, 293, 309, 311, 51438], "temperature": 0.0, "avg_logprob": -0.21968811529654045, "compression_ratio": 1.3636363636363635, "no_speech_prob": 0.0006359165417961776}, {"id": 112, "seek": 72792, "start": 728.0, "end": 740.9599999999999, "text": " filling in character by character. That's how you use the custom element with Elm. When I figured", "tokens": [50368, 10623, 294, 2517, 538, 2517, 13, 663, 311, 577, 291, 764, 264, 2375, 4478, 365, 2699, 76, 13, 1133, 286, 8932, 51016], "temperature": 0.0, "avg_logprob": -0.17808543055890555, "compression_ratio": 1.494949494949495, "no_speech_prob": 0.03305378556251526}, {"id": 113, "seek": 72792, "start": 740.9599999999999, "end": 750.52, "text": " out how to do this, I was pretty psyched. I was like, hell, yeah, dude. Remember that. It's not all", "tokens": [51016, 484, 577, 281, 360, 341, 11, 286, 390, 1238, 4681, 292, 13, 286, 390, 411, 11, 4921, 11, 1338, 11, 6449, 13, 5459, 300, 13, 467, 311, 406, 439, 51494], "temperature": 0.0, "avg_logprob": -0.17808543055890555, "compression_ratio": 1.494949494949495, "no_speech_prob": 0.03305378556251526}, {"id": 114, "seek": 72792, "start": 750.52, "end": 754.88, "text": " fun and games, though. It's not all jokes. There's some things you need to be aware of when you're", "tokens": [51494, 1019, 293, 2813, 11, 1673, 13, 467, 311, 406, 439, 14439, 13, 821, 311, 512, 721, 291, 643, 281, 312, 3650, 295, 562, 291, 434, 51712], "temperature": 0.0, "avg_logprob": -0.17808543055890555, "compression_ratio": 1.494949494949495, "no_speech_prob": 0.03305378556251526}, {"id": 115, "seek": 75488, "start": 754.92, "end": 760.36, "text": " doing this, even though I totally recommend that you do. The first thing, warning number one, is that", "tokens": [50366, 884, 341, 11, 754, 1673, 286, 3879, 2748, 300, 291, 360, 13, 440, 700, 551, 11, 9164, 1230, 472, 11, 307, 300, 50638], "temperature": 0.0, "avg_logprob": -0.16012831961754526, "compression_ratio": 1.5669291338582678, "no_speech_prob": 0.005904520396143198}, {"id": 116, "seek": 75488, "start": 760.36, "end": 766.04, "text": " the Elm virtual DOM is always right. It's always going to have the last say about what's actually in", "tokens": [50638, 264, 2699, 76, 6374, 35727, 307, 1009, 558, 13, 467, 311, 1009, 516, 281, 362, 264, 1036, 584, 466, 437, 311, 767, 294, 50922], "temperature": 0.0, "avg_logprob": -0.16012831961754526, "compression_ratio": 1.5669291338582678, "no_speech_prob": 0.005904520396143198}, {"id": 117, "seek": 75488, "start": 766.04, "end": 775.12, "text": " the DOM. So to illustrate my point, when I teach this to people, sometimes they ask, maybe they're", "tokens": [50922, 264, 35727, 13, 407, 281, 23221, 452, 935, 11, 562, 286, 2924, 341, 281, 561, 11, 2171, 436, 1029, 11, 1310, 436, 434, 51376], "temperature": 0.0, "avg_logprob": -0.16012831961754526, "compression_ratio": 1.5669291338582678, "no_speech_prob": 0.005904520396143198}, {"id": 118, "seek": 75488, "start": 775.12, "end": 780.44, "text": " coming from React and they ask, if I have a Google Maps element, can I put markers in the map as", "tokens": [51376, 1348, 490, 30644, 293, 436, 1029, 11, 498, 286, 362, 257, 3329, 28978, 4478, 11, 393, 286, 829, 19175, 294, 264, 4471, 382, 51642], "temperature": 0.0, "avg_logprob": -0.16012831961754526, "compression_ratio": 1.5669291338582678, "no_speech_prob": 0.005904520396143198}, {"id": 119, "seek": 78044, "start": 780.48, "end": 787.0400000000001, "text": " nested elements? That kind of looks the way that I think that should look. And I agree that it looks", "tokens": [50366, 15646, 292, 4959, 30, 663, 733, 295, 1542, 264, 636, 300, 286, 519, 300, 820, 574, 13, 400, 286, 3986, 300, 309, 1542, 50694], "temperature": 0.0, "avg_logprob": -0.14460588903988109, "compression_ratio": 1.7434782608695651, "no_speech_prob": 0.008054827339947224}, {"id": 120, "seek": 78044, "start": 787.0400000000001, "end": 795.0400000000001, "text": " nice. This is pretty cool. The problem is the top code is what Elm thinks you're asking for when you", "tokens": [50694, 1481, 13, 639, 307, 1238, 1627, 13, 440, 1154, 307, 264, 1192, 3089, 307, 437, 2699, 76, 7309, 291, 434, 3365, 337, 562, 291, 51094], "temperature": 0.0, "avg_logprob": -0.14460588903988109, "compression_ratio": 1.7434782608695651, "no_speech_prob": 0.008054827339947224}, {"id": 121, "seek": 78044, "start": 795.0400000000001, "end": 802.08, "text": " do this and these markers represent elements. This is what Elm thinks that you want it to be. And", "tokens": [51094, 360, 341, 293, 613, 19175, 2906, 4959, 13, 639, 307, 437, 2699, 76, 7309, 300, 291, 528, 309, 281, 312, 13, 400, 51446], "temperature": 0.0, "avg_logprob": -0.14460588903988109, "compression_ratio": 1.7434782608695651, "no_speech_prob": 0.008054827339947224}, {"id": 122, "seek": 78044, "start": 802.08, "end": 805.6400000000001, "text": " when you render your map into the custom element, this is what it's actually going to be. So you have", "tokens": [51446, 562, 291, 15529, 428, 4471, 666, 264, 2375, 4478, 11, 341, 307, 437, 309, 311, 767, 516, 281, 312, 13, 407, 291, 362, 51624], "temperature": 0.0, "avg_logprob": -0.14460588903988109, "compression_ratio": 1.7434782608695651, "no_speech_prob": 0.008054827339947224}, {"id": 123, "seek": 80564, "start": 805.68, "end": 810.72, "text": " this conflict here and virtual DOM is always going to overwrite what's in there that you've put in", "tokens": [50366, 341, 6596, 510, 293, 6374, 35727, 307, 1009, 516, 281, 670, 21561, 437, 311, 294, 456, 300, 291, 600, 829, 294, 50618], "temperature": 0.0, "avg_logprob": -0.19659595056013626, "compression_ratio": 1.5918367346938775, "no_speech_prob": 0.005466573406010866}, {"id": 124, "seek": 80564, "start": 810.72, "end": 816.0, "text": " there kind of outside of its knowledge. So what you should do instead when you have situations like", "tokens": [50618, 456, 733, 295, 2380, 295, 1080, 3601, 13, 407, 437, 291, 820, 360, 2602, 562, 291, 362, 6851, 411, 50882], "temperature": 0.0, "avg_logprob": -0.19659595056013626, "compression_ratio": 1.5918367346938775, "no_speech_prob": 0.005466573406010866}, {"id": 125, "seek": 80564, "start": 816.0, "end": 824.3199999999999, "text": " this is either use the Shadow DOM if your browser space supports it. Unfortunately, it probably", "tokens": [50882, 341, 307, 2139, 764, 264, 19036, 35727, 498, 428, 11185, 1901, 9346, 309, 13, 8590, 11, 309, 1391, 51298], "temperature": 0.0, "avg_logprob": -0.19659595056013626, "compression_ratio": 1.5918367346938775, "no_speech_prob": 0.005466573406010866}, {"id": 126, "seek": 80564, "start": 824.3199999999999, "end": 831.0, "text": " doesn't. And unfortunately, this is not really possible to polyfill completely. So we have some", "tokens": [51298, 1177, 380, 13, 400, 7015, 11, 341, 307, 406, 534, 1944, 281, 6754, 31072, 2584, 13, 407, 321, 362, 512, 51632], "temperature": 0.0, "avg_logprob": -0.19659595056013626, "compression_ratio": 1.5918367346938775, "no_speech_prob": 0.005466573406010866}, {"id": 127, "seek": 83100, "start": 831.04, "end": 837.72, "text": " waiting to do there. Or what I recommend that you do is represent your markers, represent your nested", "tokens": [50366, 3806, 281, 360, 456, 13, 1610, 437, 286, 2748, 300, 291, 360, 307, 2906, 428, 19175, 11, 2906, 428, 15646, 292, 50700], "temperature": 0.0, "avg_logprob": -0.20569494147049752, "compression_ratio": 1.6008230452674896, "no_speech_prob": 0.0021483248565346003}, {"id": 128, "seek": 83100, "start": 837.72, "end": 843.6, "text": " data as some other kind of structured data and encode it to JSON and pass it as a property and", "tokens": [50700, 1412, 382, 512, 661, 733, 295, 18519, 1412, 293, 2058, 1429, 309, 281, 31828, 293, 1320, 309, 382, 257, 4707, 293, 50994], "temperature": 0.0, "avg_logprob": -0.20569494147049752, "compression_ratio": 1.6008230452674896, "no_speech_prob": 0.0021483248565346003}, {"id": 129, "seek": 83100, "start": 843.6, "end": 849.4, "text": " interpret it in JavaScript that works just as well. One of the number two is that virtual DOM", "tokens": [50994, 7302, 309, 294, 15778, 300, 1985, 445, 382, 731, 13, 1485, 295, 264, 1230, 732, 307, 300, 6374, 35727, 51284], "temperature": 0.0, "avg_logprob": -0.20569494147049752, "compression_ratio": 1.6008230452674896, "no_speech_prob": 0.0021483248565346003}, {"id": 130, "seek": 83100, "start": 849.4, "end": 857.28, "text": " uses notes. This is kind of weird and it's hard to explain why it happens. You'll know it when you", "tokens": [51284, 4960, 5570, 13, 639, 307, 733, 295, 3657, 293, 309, 311, 1152, 281, 2903, 983, 309, 2314, 13, 509, 603, 458, 309, 562, 291, 51678], "temperature": 0.0, "avg_logprob": -0.20569494147049752, "compression_ratio": 1.6008230452674896, "no_speech_prob": 0.0021483248565346003}, {"id": 131, "seek": 85728, "start": 857.3199999999999, "end": 861.72, "text": " see it. And I'll give you an example. So maybe if you go down this path and you encounter something", "tokens": [50366, 536, 309, 13, 400, 286, 603, 976, 291, 364, 1365, 13, 407, 1310, 498, 291, 352, 760, 341, 3100, 293, 291, 8593, 746, 50586], "temperature": 0.0, "avg_logprob": -0.1384717194930367, "compression_ratio": 1.7158273381294964, "no_speech_prob": 0.0021814387291669846}, {"id": 132, "seek": 85728, "start": 861.72, "end": 866.1999999999999, "text": " that's really weird, you'll remember this and kind of have an intuitive understanding of what's", "tokens": [50586, 300, 311, 534, 3657, 11, 291, 603, 1604, 341, 293, 733, 295, 362, 364, 21769, 3701, 295, 437, 311, 50810], "temperature": 0.0, "avg_logprob": -0.1384717194930367, "compression_ratio": 1.7158273381294964, "no_speech_prob": 0.0021814387291669846}, {"id": 133, "seek": 85728, "start": 866.1999999999999, "end": 872.0799999999999, "text": " going on. So let's say we have a custom element for rendering blue rectangles. It's like really", "tokens": [50810, 516, 322, 13, 407, 718, 311, 584, 321, 362, 257, 2375, 4478, 337, 22407, 3344, 24077, 904, 13, 467, 311, 411, 534, 51104], "temperature": 0.0, "avg_logprob": -0.1384717194930367, "compression_ratio": 1.7158273381294964, "no_speech_prob": 0.0021814387291669846}, {"id": 134, "seek": 85728, "start": 872.0799999999999, "end": 878.3199999999999, "text": " just incredibly useful custom elements. Very important. They can be light blue or dark blue.", "tokens": [51104, 445, 6252, 4420, 2375, 4959, 13, 4372, 1021, 13, 814, 393, 312, 1442, 3344, 420, 2877, 3344, 13, 51416], "temperature": 0.0, "avg_logprob": -0.1384717194930367, "compression_ratio": 1.7158273381294964, "no_speech_prob": 0.0021814387291669846}, {"id": 135, "seek": 85728, "start": 878.3199999999999, "end": 883.9599999999999, "text": " The custom element decides. One is inside of the other. And what we want to do is remove the", "tokens": [51416, 440, 2375, 4478, 14898, 13, 1485, 307, 1854, 295, 264, 661, 13, 400, 437, 321, 528, 281, 360, 307, 4159, 264, 51698], "temperature": 0.0, "avg_logprob": -0.1384717194930367, "compression_ratio": 1.7158273381294964, "no_speech_prob": 0.0021814387291669846}, {"id": 136, "seek": 88396, "start": 884.0, "end": 889.1600000000001, "text": " outer dark blue one and have the light blue one fill the space. So what we expect it to look like", "tokens": [50366, 10847, 2877, 3344, 472, 293, 362, 264, 1442, 3344, 472, 2836, 264, 1901, 13, 407, 437, 321, 2066, 309, 281, 574, 411, 50624], "temperature": 0.0, "avg_logprob": -0.1416495938167394, "compression_ratio": 1.6909871244635193, "no_speech_prob": 0.0005191272939555347}, {"id": 137, "seek": 88396, "start": 889.1600000000001, "end": 894.9200000000001, "text": " is this. What's actually going to happen is this. And that's because the virtual DOM saw the outer", "tokens": [50624, 307, 341, 13, 708, 311, 767, 516, 281, 1051, 307, 341, 13, 400, 300, 311, 570, 264, 6374, 35727, 1866, 264, 10847, 50912], "temperature": 0.0, "avg_logprob": -0.1416495938167394, "compression_ratio": 1.6909871244635193, "no_speech_prob": 0.0005191272939555347}, {"id": 138, "seek": 88396, "start": 894.9200000000001, "end": 899.12, "text": " rectangle and was like, oh, this is a rectangle. I'm supposed to put a rectangle here. So I'm done.", "tokens": [50912, 21930, 293, 390, 411, 11, 1954, 11, 341, 307, 257, 21930, 13, 286, 478, 3442, 281, 829, 257, 21930, 510, 13, 407, 286, 478, 1096, 13, 51122], "temperature": 0.0, "avg_logprob": -0.1416495938167394, "compression_ratio": 1.6909871244635193, "no_speech_prob": 0.0005191272939555347}, {"id": 139, "seek": 88396, "start": 899.12, "end": 907.88, "text": " And it's wrong. But it's not Elm's fault. It's mine for making a bad rectangle. So there's tricks", "tokens": [51122, 400, 309, 311, 2085, 13, 583, 309, 311, 406, 2699, 76, 311, 7441, 13, 467, 311, 3892, 337, 1455, 257, 1578, 21930, 13, 407, 456, 311, 11733, 51560], "temperature": 0.0, "avg_logprob": -0.1416495938167394, "compression_ratio": 1.6909871244635193, "no_speech_prob": 0.0005191272939555347}, {"id": 140, "seek": 90788, "start": 907.88, "end": 913.76, "text": " you can do. And I really encourage you to avoid getting into this situation. But it is good to", "tokens": [50364, 291, 393, 360, 13, 400, 286, 534, 5373, 291, 281, 5042, 1242, 666, 341, 2590, 13, 583, 309, 307, 665, 281, 50658], "temperature": 0.0, "avg_logprob": -0.19750944096991357, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.010484672151505947}, {"id": 141, "seek": 90788, "start": 913.76, "end": 919.76, "text": " be aware of just in case. And then warning number three, and this is a small warning. It's not", "tokens": [50658, 312, 3650, 295, 445, 294, 1389, 13, 400, 550, 9164, 1230, 1045, 11, 293, 341, 307, 257, 1359, 9164, 13, 467, 311, 406, 50958], "temperature": 0.0, "avg_logprob": -0.19750944096991357, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.010484672151505947}, {"id": 142, "seek": 90788, "start": 919.76, "end": 925.72, "text": " very big deal. Warning number three is don't use value because the Elm virtual DOM special cases", "tokens": [50958, 588, 955, 2028, 13, 45140, 1230, 1045, 307, 500, 380, 764, 2158, 570, 264, 2699, 76, 6374, 35727, 2121, 3331, 51256], "temperature": 0.0, "avg_logprob": -0.19750944096991357, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.010484672151505947}, {"id": 143, "seek": 90788, "start": 925.72, "end": 933.0, "text": " this particular property name to deal with built in inputs. So here's what I recommend you do when", "tokens": [51256, 341, 1729, 4707, 1315, 281, 2028, 365, 3094, 294, 15743, 13, 407, 510, 311, 437, 286, 2748, 291, 360, 562, 51620], "temperature": 0.0, "avg_logprob": -0.19750944096991357, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.010484672151505947}, {"id": 144, "seek": 93300, "start": 933.2, "end": 938.28, "text": " you're building your custom elements. The first one is the most important. And it's to always use", "tokens": [50374, 291, 434, 2390, 428, 2375, 4959, 13, 440, 700, 472, 307, 264, 881, 1021, 13, 400, 309, 311, 281, 1009, 764, 50628], "temperature": 0.0, "avg_logprob": -0.17918890317281086, "compression_ratio": 1.7137809187279152, "no_speech_prob": 0.003074233653023839}, {"id": 145, "seek": 93300, "start": 938.28, "end": 944.64, "text": " leaf nodes, whether your custom element itself is at the very end of your tree branch or whether", "tokens": [50628, 10871, 13891, 11, 1968, 428, 2375, 4478, 2564, 307, 412, 264, 588, 917, 295, 428, 4230, 9819, 420, 1968, 50946], "temperature": 0.0, "avg_logprob": -0.17918890317281086, "compression_ratio": 1.7137809187279152, "no_speech_prob": 0.003074233653023839}, {"id": 146, "seek": 93300, "start": 944.64, "end": 948.88, "text": " you've got some stuff inside of it, but that stuff is fixed. I'll give some examples of that. And", "tokens": [50946, 291, 600, 658, 512, 1507, 1854, 295, 309, 11, 457, 300, 1507, 307, 6806, 13, 286, 603, 976, 512, 5110, 295, 300, 13, 400, 51158], "temperature": 0.0, "avg_logprob": -0.17918890317281086, "compression_ratio": 1.7137809187279152, "no_speech_prob": 0.003074233653023839}, {"id": 147, "seek": 93300, "start": 948.88, "end": 955.72, "text": " the second one is to not use value for the reason I just mentioned. So here is almost verbatim the", "tokens": [51158, 264, 1150, 472, 307, 281, 406, 764, 2158, 337, 264, 1778, 286, 445, 2835, 13, 407, 510, 307, 1920, 9595, 267, 332, 264, 51500], "temperature": 0.0, "avg_logprob": -0.17918890317281086, "compression_ratio": 1.7137809187279152, "no_speech_prob": 0.003074233653023839}, {"id": 148, "seek": 93300, "start": 955.72, "end": 962.92, "text": " code editor view from Ellie. It takes a bunch of attributes and it renders them all. And most", "tokens": [51500, 3089, 9839, 1910, 490, 27151, 13, 467, 2516, 257, 3840, 295, 17212, 293, 309, 6125, 433, 552, 439, 13, 400, 881, 51860], "temperature": 0.0, "avg_logprob": -0.17918890317281086, "compression_ratio": 1.7137809187279152, "no_speech_prob": 0.003074233653023839}, {"id": 149, "seek": 96292, "start": 962.9599999999999, "end": 968.56, "text": " importantly, that last list there is empty. Elm, when it sees an empty list from diff to diff, it", "tokens": [50366, 8906, 11, 300, 1036, 1329, 456, 307, 6707, 13, 2699, 76, 11, 562, 309, 8194, 364, 6707, 1329, 490, 7593, 281, 7593, 11, 309, 50646], "temperature": 0.0, "avg_logprob": -0.19353520104644495, "compression_ratio": 1.565217391304348, "no_speech_prob": 0.0002164813195122406}, {"id": 150, "seek": 96292, "start": 968.56, "end": 974.16, "text": " doesn't clear anything out. It just skips it. It says, I get it. There's nothing here. Even though", "tokens": [50646, 1177, 380, 1850, 1340, 484, 13, 467, 445, 1110, 2600, 309, 13, 467, 1619, 11, 286, 483, 309, 13, 821, 311, 1825, 510, 13, 2754, 1673, 50926], "temperature": 0.0, "avg_logprob": -0.19353520104644495, "compression_ratio": 1.565217391304348, "no_speech_prob": 0.0002164813195122406}, {"id": 151, "seek": 96292, "start": 974.16, "end": 984.04, "text": " we're lying. So you can see the actual implementation of this in the LA repo. And I know this is a", "tokens": [50926, 321, 434, 8493, 13, 407, 291, 393, 536, 264, 3539, 11420, 295, 341, 294, 264, 9855, 49040, 13, 400, 286, 458, 341, 307, 257, 51420], "temperature": 0.0, "avg_logprob": -0.19353520104644495, "compression_ratio": 1.565217391304348, "no_speech_prob": 0.0002164813195122406}, {"id": 152, "seek": 96292, "start": 984.04, "end": 989.9599999999999, "text": " long URL and I'm going to click pass it, but I'll post it in Slack or something. And here is another", "tokens": [51420, 938, 12905, 293, 286, 478, 516, 281, 2052, 1320, 309, 11, 457, 286, 603, 2183, 309, 294, 37211, 420, 746, 13, 400, 510, 307, 1071, 51716], "temperature": 0.0, "avg_logprob": -0.19353520104644495, "compression_ratio": 1.565217391304348, "no_speech_prob": 0.0002164813195122406}, {"id": 153, "seek": 98996, "start": 989.96, "end": 996.5600000000001, "text": " example from the no writing code base. This is in our UI library. We have this text area that grows", "tokens": [50364, 1365, 490, 264, 572, 3579, 3089, 3096, 13, 639, 307, 294, 527, 15682, 6405, 13, 492, 362, 341, 2487, 1859, 300, 13156, 50694], "temperature": 0.0, "avg_logprob": -0.15666468938191733, "compression_ratio": 1.7087719298245614, "no_speech_prob": 0.002979804063215852}, {"id": 154, "seek": 98996, "start": 996.5600000000001, "end": 1002.48, "text": " and shrinks as the user types and delete stuff. And that's not what text areas usually do or are", "tokens": [50694, 293, 9884, 16431, 382, 264, 4195, 3467, 293, 12097, 1507, 13, 400, 300, 311, 406, 437, 2487, 3179, 2673, 360, 420, 366, 50990], "temperature": 0.0, "avg_logprob": -0.15666468938191733, "compression_ratio": 1.7087719298245614, "no_speech_prob": 0.002979804063215852}, {"id": 155, "seek": 98996, "start": 1002.48, "end": 1007.2800000000001, "text": " even capable of doing. So you need JavaScript to do that. And so what we do is we wrap it in a", "tokens": [50990, 754, 8189, 295, 884, 13, 407, 291, 643, 15778, 281, 360, 300, 13, 400, 370, 437, 321, 360, 307, 321, 7019, 309, 294, 257, 51230], "temperature": 0.0, "avg_logprob": -0.15666468938191733, "compression_ratio": 1.7087719298245614, "no_speech_prob": 0.002979804063215852}, {"id": 156, "seek": 98996, "start": 1007.2800000000001, "end": 1013.36, "text": " custom element. The custom element goes and finds that text area and modifies it in a way that the", "tokens": [51230, 2375, 4478, 13, 440, 2375, 4478, 1709, 293, 10704, 300, 2487, 1859, 293, 1072, 11221, 309, 294, 257, 636, 300, 264, 51534], "temperature": 0.0, "avg_logprob": -0.15666468938191733, "compression_ratio": 1.7087719298245614, "no_speech_prob": 0.002979804063215852}, {"id": 157, "seek": 98996, "start": 1013.36, "end": 1018.9200000000001, "text": " Elm virtual DOM is totally okay with. So since everything within the custom element is fixed and", "tokens": [51534, 2699, 76, 6374, 35727, 307, 3879, 1392, 365, 13, 407, 1670, 1203, 1951, 264, 2375, 4478, 307, 6806, 293, 51812], "temperature": 0.0, "avg_logprob": -0.15666468938191733, "compression_ratio": 1.7087719298245614, "no_speech_prob": 0.002979804063215852}, {"id": 158, "seek": 101892, "start": 1018.9599999999999, "end": 1024.92, "text": " not really changing around, this will survive the diff. So you can do it that way too. You can't do", "tokens": [50366, 406, 534, 4473, 926, 11, 341, 486, 7867, 264, 7593, 13, 407, 291, 393, 360, 309, 300, 636, 886, 13, 509, 393, 380, 360, 50664], "temperature": 0.0, "avg_logprob": -0.19688805289890454, "compression_ratio": 1.7183098591549295, "no_speech_prob": 0.0008554449887014925}, {"id": 159, "seek": 101892, "start": 1024.92, "end": 1031.2, "text": " dynamic stuff inside of a dynamic list of elements inside of a custom element and be in", "tokens": [50664, 8546, 1507, 1854, 295, 257, 8546, 1329, 295, 4959, 1854, 295, 257, 2375, 4478, 293, 312, 294, 50978], "temperature": 0.0, "avg_logprob": -0.19688805289890454, "compression_ratio": 1.7183098591549295, "no_speech_prob": 0.0008554449887014925}, {"id": 160, "seek": 101892, "start": 1031.2, "end": 1037.44, "text": " field totally secure in doing that. So I recommend that you don't. So that's how you do custom", "tokens": [50978, 2519, 3879, 7144, 294, 884, 300, 13, 407, 286, 2748, 300, 291, 500, 380, 13, 407, 300, 311, 577, 291, 360, 2375, 51290], "temperature": 0.0, "avg_logprob": -0.19688805289890454, "compression_ratio": 1.7183098591549295, "no_speech_prob": 0.0008554449887014925}, {"id": 161, "seek": 101892, "start": 1037.44, "end": 1041.24, "text": " elements. That's how you avoid getting in trouble. And so this question of how do I", "tokens": [51290, 4959, 13, 663, 311, 577, 291, 5042, 1242, 294, 5253, 13, 400, 370, 341, 1168, 295, 577, 360, 286, 51480], "temperature": 0.0, "avg_logprob": -0.19688805289890454, "compression_ratio": 1.7183098591549295, "no_speech_prob": 0.0008554449887014925}, {"id": 162, "seek": 104124, "start": 1041.28, "end": 1047.88, "text": " interoperate with JavaScripts I think has a more nuanced, slightly more nuanced answer now. It's", "tokens": [50366, 728, 7192, 473, 365, 15778, 82, 286, 519, 575, 257, 544, 45115, 11, 4748, 544, 45115, 1867, 586, 13, 467, 311, 50696], "temperature": 0.0, "avg_logprob": -0.258731206258138, "compression_ratio": 1.5601659751037344, "no_speech_prob": 0.08027070015668869}, {"id": 163, "seek": 104124, "start": 1047.88, "end": 1054.16, "text": " first to ask is the thing you want to do a UI widget? Is it a map or a date picker or a fancy", "tokens": [50696, 700, 281, 1029, 307, 264, 551, 291, 528, 281, 360, 257, 15682, 34047, 30, 1119, 309, 257, 4471, 420, 257, 4002, 1888, 260, 420, 257, 10247, 51010], "temperature": 0.0, "avg_logprob": -0.258731206258138, "compression_ratio": 1.5601659751037344, "no_speech_prob": 0.08027070015668869}, {"id": 164, "seek": 104124, "start": 1054.16, "end": 1059.64, "text": " input? In that case, use a custom element. Otherwise, if you have the growth hacking AI", "tokens": [51010, 4846, 30, 682, 300, 1389, 11, 764, 257, 2375, 4478, 13, 10328, 11, 498, 291, 362, 264, 4599, 31422, 7318, 51284], "temperature": 0.0, "avg_logprob": -0.258731206258138, "compression_ratio": 1.5601659751037344, "no_speech_prob": 0.08027070015668869}, {"id": 165, "seek": 104124, "start": 1059.64, "end": 1067.24, "text": " blockchain client or something similar to that, you use a port. And so with that, I'll just leave", "tokens": [51284, 17176, 6423, 420, 746, 2531, 281, 300, 11, 291, 764, 257, 2436, 13, 400, 370, 365, 300, 11, 286, 603, 445, 1856, 51664], "temperature": 0.0, "avg_logprob": -0.258731206258138, "compression_ratio": 1.5601659751037344, "no_speech_prob": 0.08027070015668869}, {"id": 166, "seek": 106724, "start": 1067.24, "end": 1072.76, "text": " you with something that's kind of a tradition at Elm conferences to put a slide with Evan's face", "tokens": [50364, 291, 365, 746, 300, 311, 733, 295, 257, 6994, 412, 2699, 76, 22032, 281, 829, 257, 4137, 365, 22613, 311, 1851, 50640], "temperature": 0.0, "avg_logprob": -0.20162997747722425, "compression_ratio": 1.5104166666666667, "no_speech_prob": 0.004129517823457718}, {"id": 167, "seek": 106724, "start": 1072.76, "end": 1083.08, "text": " superimposed on an actor. So here's mine. Yeah, you can email me about this or you can find me", "tokens": [50640, 1687, 8814, 1744, 322, 364, 8747, 13, 407, 510, 311, 3892, 13, 865, 11, 291, 393, 3796, 385, 466, 341, 420, 291, 393, 915, 385, 51156], "temperature": 0.0, "avg_logprob": -0.20162997747722425, "compression_ratio": 1.5104166666666667, "no_speech_prob": 0.004129517823457718}, {"id": 168, "seek": 106724, "start": 1083.08, "end": 1089.44, "text": " in Slack and those are some links that you should check out to learn about how to do this. Thanks,", "tokens": [51156, 294, 37211, 293, 729, 366, 512, 6123, 300, 291, 820, 1520, 484, 281, 1466, 466, 577, 281, 360, 341, 13, 2561, 11, 51474], "temperature": 0.0, "avg_logprob": -0.20162997747722425, "compression_ratio": 1.5104166666666667, "no_speech_prob": 0.004129517823457718}, {"id": 169, "seek": 108944, "start": 1089.44, "end": 1118.0, "text": " everybody. Oh, yeah, questions. So I've actually done this with code mirror as well. I came up", "tokens": [50364, 2201, 13, 876, 11, 1338, 11, 1651, 13, 407, 286, 600, 767, 1096, 341, 365, 3089, 8013, 382, 731, 13, 286, 1361, 493, 51792], "temperature": 0.0, "avg_logprob": -0.21962828106350368, "compression_ratio": 1.0561797752808988, "no_speech_prob": 0.10273885726928711}, {"id": 170, "seek": 111800, "start": 1118.0, "end": 1123.68, "text": " with a very similar solution with custom elements. But I had this problem that if you type real fast", "tokens": [50364, 365, 257, 588, 2531, 3827, 365, 2375, 4959, 13, 583, 286, 632, 341, 1154, 300, 498, 291, 2010, 957, 2370, 50648], "temperature": 0.0, "avg_logprob": -0.20522104756215984, "compression_ratio": 1.746606334841629, "no_speech_prob": 0.6180784702301025}, {"id": 171, "seek": 111800, "start": 1123.68, "end": 1130.0, "text": " in the code mirror editor like you do kind of day to day, often the letters kind of ended up in a", "tokens": [50648, 294, 264, 3089, 8013, 9839, 411, 291, 360, 733, 295, 786, 281, 786, 11, 2049, 264, 7825, 733, 295, 4590, 493, 294, 257, 50964], "temperature": 0.0, "avg_logprob": -0.20522104756215984, "compression_ratio": 1.746606334841629, "no_speech_prob": 0.6180784702301025}, {"id": 172, "seek": 111800, "start": 1130.0, "end": 1136.88, "text": " different order or you dropped some characters kind of they got overwritten by the Elm state", "tokens": [50964, 819, 1668, 420, 291, 8119, 512, 4342, 733, 295, 436, 658, 670, 26859, 538, 264, 2699, 76, 1785, 51308], "temperature": 0.0, "avg_logprob": -0.20522104756215984, "compression_ratio": 1.746606334841629, "no_speech_prob": 0.6180784702301025}, {"id": 173, "seek": 111800, "start": 1136.88, "end": 1141.16, "text": " management kind of overwrote the internal code mirror state management. Did you manage to work", "tokens": [51308, 4592, 733, 295, 670, 7449, 1370, 264, 6920, 3089, 8013, 1785, 4592, 13, 2589, 291, 3067, 281, 589, 51522], "temperature": 0.0, "avg_logprob": -0.20522104756215984, "compression_ratio": 1.746606334841629, "no_speech_prob": 0.6180784702301025}, {"id": 174, "seek": 114116, "start": 1141.3200000000002, "end": 1147.88, "text": " out how to stop that from happening? Yes. So in the example that I gave, I'm just dispatching", "tokens": [50372, 484, 577, 281, 1590, 300, 490, 2737, 30, 1079, 13, 407, 294, 264, 1365, 300, 286, 2729, 11, 286, 478, 445, 4920, 29569, 50700], "temperature": 0.0, "avg_logprob": -0.1350963380601671, "compression_ratio": 1.6375, "no_speech_prob": 0.496858149766922}, {"id": 175, "seek": 114116, "start": 1147.88, "end": 1155.3200000000002, "text": " events every time a change event happens. In real life, I debounce the code that dispatches the event", "tokens": [50700, 3931, 633, 565, 257, 1319, 2280, 2314, 13, 682, 957, 993, 11, 286, 3001, 7826, 264, 3089, 300, 36729, 279, 264, 2280, 51072], "temperature": 0.0, "avg_logprob": -0.1350963380601671, "compression_ratio": 1.6375, "no_speech_prob": 0.496858149766922}, {"id": 176, "seek": 114116, "start": 1155.3200000000002, "end": 1162.3600000000001, "text": " on request idle callback. So as long as you're typing or have typed recently, it won't bother to", "tokens": [51072, 322, 5308, 30650, 818, 3207, 13, 407, 382, 938, 382, 291, 434, 18444, 420, 362, 33941, 3938, 11, 309, 1582, 380, 8677, 281, 51424], "temperature": 0.0, "avg_logprob": -0.1350963380601671, "compression_ratio": 1.6375, "no_speech_prob": 0.496858149766922}, {"id": 177, "seek": 114116, "start": 1162.3600000000001, "end": 1167.24, "text": " trigger any changes. So by the time it actually sends the event into Elm, the editors are guaranteed", "tokens": [51424, 7875, 604, 2962, 13, 407, 538, 264, 565, 309, 767, 14790, 264, 2280, 666, 2699, 76, 11, 264, 31446, 366, 18031, 51668], "temperature": 0.0, "avg_logprob": -0.1350963380601671, "compression_ratio": 1.6375, "no_speech_prob": 0.496858149766922}, {"id": 178, "seek": 116724, "start": 1167.32, "end": 1171.16, "text": " to be settled. Well, that's awesome. Thanks, man. Yeah, so you can find that in the LA code base too.", "tokens": [50368, 281, 312, 14819, 13, 1042, 11, 300, 311, 3476, 13, 2561, 11, 587, 13, 865, 11, 370, 291, 393, 915, 300, 294, 264, 9855, 3089, 3096, 886, 13, 50560], "temperature": 0.0, "avg_logprob": -0.28213094628375507, "compression_ratio": 1.4324324324324325, "no_speech_prob": 0.008891299366950989}, {"id": 179, "seek": 116724, "start": 1180.68, "end": 1187.8, "text": " So what's the main advantage of using custom elements over mutation observers? I think the", "tokens": [51036, 407, 437, 311, 264, 2135, 5002, 295, 1228, 2375, 4959, 670, 27960, 48090, 30, 286, 519, 264, 51392], "temperature": 0.0, "avg_logprob": -0.28213094628375507, "compression_ratio": 1.4324324324324325, "no_speech_prob": 0.008891299366950989}, {"id": 180, "seek": 116724, "start": 1190.84, "end": 1194.52, "text": " instance management I guess is what I would call that. You don't have to", "tokens": [51544, 5197, 4592, 286, 2041, 307, 437, 286, 576, 818, 300, 13, 509, 500, 380, 362, 281, 51728], "temperature": 0.0, "avg_logprob": -0.28213094628375507, "compression_ratio": 1.4324324324324325, "no_speech_prob": 0.008891299366950989}, {"id": 181, "seek": 119452, "start": 1194.84, "end": 1200.44, "text": " manually watch the DOM and wait for those elements to be discovered. You don't have to", "tokens": [50380, 16945, 1159, 264, 35727, 293, 1699, 337, 729, 4959, 281, 312, 6941, 13, 509, 500, 380, 362, 281, 50660], "temperature": 0.0, "avg_logprob": -0.17559081817341743, "compression_ratio": 1.842323651452282, "no_speech_prob": 0.0009693666361272335}, {"id": 182, "seek": 119452, "start": 1201.0, "end": 1206.76, "text": " have a mutation. You don't have to write the mutation observer that then queries the DOM that's", "tokens": [50688, 362, 257, 27960, 13, 509, 500, 380, 362, 281, 2464, 264, 27960, 27878, 300, 550, 24109, 264, 35727, 300, 311, 50976], "temperature": 0.0, "avg_logprob": -0.17559081817341743, "compression_ratio": 1.842323651452282, "no_speech_prob": 0.0009693666361272335}, {"id": 183, "seek": 119452, "start": 1206.76, "end": 1210.44, "text": " changed and find the elements and then iterate over them. It just kind of does that for you.", "tokens": [50976, 3105, 293, 915, 264, 4959, 293, 550, 44497, 670, 552, 13, 467, 445, 733, 295, 775, 300, 337, 291, 13, 51160], "temperature": 0.0, "avg_logprob": -0.17559081817341743, "compression_ratio": 1.842323651452282, "no_speech_prob": 0.0009693666361272335}, {"id": 184, "seek": 119452, "start": 1210.44, "end": 1215.24, "text": " I think most of the polyfills that exist are based on mutation observer. So", "tokens": [51160, 286, 519, 881, 295, 264, 6754, 69, 2565, 300, 2514, 366, 2361, 322, 27960, 27878, 13, 407, 51400], "temperature": 0.0, "avg_logprob": -0.17559081817341743, "compression_ratio": 1.842323651452282, "no_speech_prob": 0.0009693666361272335}, {"id": 185, "seek": 119452, "start": 1216.68, "end": 1220.12, "text": " nothing you can do with a custom element can't be done with the mutation observer. It's just", "tokens": [51472, 1825, 291, 393, 360, 365, 257, 2375, 4478, 393, 380, 312, 1096, 365, 264, 27960, 27878, 13, 467, 311, 445, 51644], "temperature": 0.0, "avg_logprob": -0.17559081817341743, "compression_ratio": 1.842323651452282, "no_speech_prob": 0.0009693666361272335}, {"id": 186, "seek": 122012, "start": 1220.1999999999998, "end": 1225.8799999999999, "text": " kind of nicer. It's a nicer API. Let me have back here.", "tokens": [50368, 733, 295, 22842, 13, 467, 311, 257, 22842, 9362, 13, 961, 385, 362, 646, 510, 13, 50652], "temperature": 0.0, "avg_logprob": -0.3219214545355903, "compression_ratio": 1.0673076923076923, "no_speech_prob": 0.0028851560782641172}, {"id": 187, "seek": 122012, "start": 1241.7199999999998, "end": 1245.0, "text": " And just a question, how do you manage Firefox? Do you?", "tokens": [51444, 400, 445, 257, 1168, 11, 577, 360, 291, 3067, 46613, 30, 1144, 291, 30, 51608], "temperature": 0.0, "avg_logprob": -0.3219214545355903, "compression_ratio": 1.0673076923076923, "no_speech_prob": 0.0028851560782641172}, {"id": 188, "seek": 124500, "start": 1245.96, "end": 1252.44, "text": " We use a polyfill. Actually, the second link here is a repo for the official polyfill. It", "tokens": [50412, 492, 764, 257, 6754, 31072, 13, 5135, 11, 264, 1150, 2113, 510, 307, 257, 49040, 337, 264, 4783, 6754, 31072, 13, 467, 50736], "temperature": 0.0, "avg_logprob": -0.2190092872170841, "compression_ratio": 1.596638655462185, "no_speech_prob": 0.00376326497644186}, {"id": 189, "seek": 124500, "start": 1252.44, "end": 1258.28, "text": " works very well on Firefox. We use it in production at NoRidic and we haven't had any problems with", "tokens": [50736, 1985, 588, 731, 322, 46613, 13, 492, 764, 309, 294, 4265, 412, 883, 49, 327, 299, 293, 321, 2378, 380, 632, 604, 2740, 365, 51028], "temperature": 0.0, "avg_logprob": -0.2190092872170841, "compression_ratio": 1.596638655462185, "no_speech_prob": 0.00376326497644186}, {"id": 190, "seek": 124500, "start": 1258.28, "end": 1263.48, "text": " Firefox at all. And I think actually they're about to release support in the next version,", "tokens": [51028, 46613, 412, 439, 13, 400, 286, 519, 767, 436, 434, 466, 281, 4374, 1406, 294, 264, 958, 3037, 11, 51288], "temperature": 0.0, "avg_logprob": -0.2190092872170841, "compression_ratio": 1.596638655462185, "no_speech_prob": 0.00376326497644186}, {"id": 191, "seek": 124500, "start": 1263.48, "end": 1271.24, "text": " so that's very cool. All right. I think that's it. And you can come find me wherever. I'll be happy", "tokens": [51288, 370, 300, 311, 588, 1627, 13, 1057, 558, 13, 286, 519, 300, 311, 309, 13, 400, 291, 393, 808, 915, 385, 8660, 13, 286, 603, 312, 2055, 51676], "temperature": 0.0, "avg_logprob": -0.2190092872170841, "compression_ratio": 1.596638655462185, "no_speech_prob": 0.00376326497644186}, {"id": 192, "seek": 127124, "start": 1271.24, "end": 1275.24, "text": " to help. Thank you very much.", "tokens": [50364, 281, 854, 13, 1044, 291, 588, 709, 13, 50564], "temperature": 0.0, "avg_logprob": -0.4279799461364746, "compression_ratio": 0.7837837837837838, "no_speech_prob": 0.02926325611770153}], "language": "en"}