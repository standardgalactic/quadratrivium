start	end	text
0	15360	I love these headset mics. I feel like I should be standing here with my fingers
15360	19040	stifled saying stuff like, you know, we have machine learning, but do we have
19040	30480	machine understanding? Anyway, hello! Everybody's really excited for custom
30480	35400	elements. I'm Luke. I came here from Manhattan Beach, California, which is
35400	42480	right near Lebron, excuse me, Los Angeles. I work at No Red Ink on the
42480	49000	internal team right now, converting all of our Elm code to Elm0.19. Very fun.
49120	53440	I also work on Elie and contribute to Elm in other ways. One of the things that
53440	59240	I do among those three things is hang out in Slack and watch the beginners
59240	65840	channel. Something that frequently comes up as a question is, I have this JavaScript
65840	69680	library that I have to use, but I want to build an Elm app. How do I do these
69680	74560	things together? There's a lot of reasons to need to do that. You can't do
74560	79560	everything with Elm. For instance, this is how many web APIs there are. That's
79560	86000	not how many Elm packages there are. Can anybody in the audience who has been
86000	89160	in the Elm community for a while tell me how you might go about using one of
89160	99160	these if it's not in the Elm platform? Yeah, use the word. It's kind of become
99160	104200	almost a meme at this point in the Elm community that the response to how do I
104240	109440	use JavaScript is to use a port. It's kind of a closed question almost. What I
109440	118240	want to do in this talk is reopen it just a little bit. Probably the world
118240	133880	won't end, but we'll see. This has nothing to do with anything. I forgot to take
133880	143240	this slide out. I don't remember what it was for. Let's see if I can work it
143240	151280	in. There are more reasons to want to use JavaScript in the browser than making
151280	158840	calls to your growth hacking AI blockchain client. Equally as often or
158840	162400	possibly more, you might want to render a map in case you forget where the
162400	167920	conference is and you want to build an Elm program to remind you. Or maybe you
167920	172360	want to build a compiler into a browser platform and you need a text
172400	176640	editor for people to share code and tell them where you can check out their
176640	182360	mix tape. You can do this with ports. You can do anything with ports. It would be
182360	185760	hard to get me on record saying you can't do something with ports. If you've
185760	191080	interacted with me online, you know that to be true. The way we would go about
191080	196440	building maybe this with ports is we would first make a div and we give it an
196440	201280	ID, like text editor. We make some ports and we tag it with some string that we
201280	205280	can read in JavaScript and send some data as a value sometimes. We have a port
205280	209120	coming in where we can tag some information with a string and pass it as a
209120	213440	value and deal with it in Elm in a subscription. When we initialize our
213440	218840	application, we have to set up the initial model and send out in a knit command and
218840	223440	handle that in JavaScript so we subscribe and we get the type and we do request
223440	227240	animation frames so we can wait until the Elm version is rendering and then we
227360	231360	look at the element and hopefully it's there. Who knows what we do if it's not?
231360	236840	I certainly don't. Then we make the editor. Assuming the element is there and
236840	239360	then we attach the editor to the elements so we don't have to remake it every
239360	243760	time. And then we listen for changes on the editor. We send those back in
243760	248760	through the port, call a value, update it as a string tag, get the value from the
248760	254200	editor, make a code-changed message so that we can capture that into our update
254200	259080	function, handle that message, set the code in the model and then subscribe to
259080	263080	text editor in, look up the type, see if it's value updated, decode the data. If it
263080	270920	fails, if it's something else, that works. That's fine. And then maybe also we want
270920	274640	to do things like reset the code from within the Elm application if the user
274640	279480	clicks a button so we make a reset the code message and then in our model, in
279480	282640	our update function, we reset the code in the model, we send a message out
282720	287440	through text editor out, give it the name value updated, pass it as a string and in
287440	291840	our subscription in JavaScript, we look for the element again, hopefully it's
291840	297440	there. Look for the editor, hopefully that's there. And then we set the data and
297440	298840	then we're done.
298840	313400	What if we have more than one text editor in our application? If we're not
313400	317560	writing code, this is how we get text input from the user. It's just a text
317560	323200	area and we use an HTML attribute to say that this is what the code is and we use
323200	329520	text on input to handle the event from HTML. This is like a pretty good way to
329520	338280	represent some visual component, excuse me, some visual element of our user
338280	343320	interface that can be interacted with by the user. So wouldn't it be cool if we
343320	348120	also had these? We could just say give me a code editor element and then put these
348120	352880	attributes on it and let me listen for editor changes. Obviously these functions
352960	362920	don't exist in the HTML package, but false. Turns out you can do this. What? You
362920	366440	could do it with just today's element and the web platform as it currently
366440	383280	exists right now. So let's do it. This is, like I said, these functions don't
383280	388960	exist in the HTML package, but these functions do. HTML node, which lets us
388960	394840	pick any tag name we want and we have HTML.attributes.property, which lets us
394920	400360	assign any JSON value to any JavaScript property of that element. Similarly,
400360	406760	HTML.events.on lets us listen to any event. So here's that same code in the text
406760	417640	editor and here is that element rendered. So we can see we're assigning editor value
417640	423160	here. The value of that should be hello world according to our Elm program and it
423160	429880	is. And then if we go back to the elements tab of Chrome's dev tools and take a look at
429880	433840	our event listeners here, we see that there's an editor changed event. You can
433840	444560	just do this. It's pretty cool. So right now we have a nice gray rectangle, which as
444560	448200	much as I'd love for that to be the way that my text editor looks some days, it's
448240	453600	not super useful right now. So we actually have to explain to the browser how to deal
453600	458000	with this and the way we do that is with the custom elements API. So we do custom
458000	463720	elements.define. So this was code editor and we're going to write a class that
463720	471440	extends HTML elements. Oh, my gosh, VS code. We get it. So the one thing that we
471440	477240	absolutely have to do to get started is write this connected callback method. This
477240	481800	method is called by the custom elements API in the browser. Whenever the elements
481800	486120	been inserted into the DOM or it's been discovered in the DOM before this definition was
486120	491960	defined. So it guarantees us that all of the DOM APIs are going to be ready for us by
491960	499600	the time this code is executed. So we'll say this.editor equals code mirror this and
499600	507120	we'll do some options. We'll do indent unit before. We'll do mode. Elm. We'll do line
507120	520360	numbers. True. And we'll do value. Artcoded to module. Main. Exposing all. We'll save
520360	532240	it. And webpack will surely be very fast and recompile this for us. There it is. So
532240	540480	there's, yeah, that's pretty cool. Thank you for applauding. But unfortunately, that's
540480	544720	not the text that we said we should have in our Elm program. So it's not super useful
544720	551800	yet. So what we need to do is set up a property getter and setter to intercept the virtual
551800	557120	DOM's behavior of getting and setting this property. So the first thing that we will
557120	565120	do is set up an instructor and we have to call Suver because JavaScript says so. Make
565120	570760	an editor value backing store. This should be familiar to anybody who's done a lot of
570800	578160	C sharp programming. We'll put that default value up in the constructor and we will set
578160	588800	this to editor value. And now when we get editor value, we'll return this.editor value
588800	599160	and when we set it, the real magic happens. So not only can we assign here, we can also
599160	605000	check that our editor exists. And this time it's totally cool if it doesn't because we're
605000	609880	guaranteed for this method to run and we always know that the latest value that we've said
609880	615960	is going to be used. So that's fine. So we can just return here. And if it does exist,
615960	622440	we set value. And then the last thing that I like to make sure to do is avoid doing any
622440	627520	unnecessary work. So if the value is already equal to the thing that was set, we're not
627560	633360	going to do anything. So now I'll save it and we'll stand here awkwardly with our arms folded
633360	644120	while it recompiles. So France is cool. There it is. Hello, world. You don't have to clap
644120	651760	every time. I'll let you know when to clap after I'm finished writing. I'm a regular
651840	661680	Jeb Bush. Okay. So we can type in here and CodeMirror is fine with that, but as you can see, no
661680	666440	messages are being triggered. We have this whole elaborate listener setup, but nothing coming
666440	672880	in. So the way that we deal with this is to go down to where we define our editor. And if you'll
672880	677760	remember from before when I was talking really fast about ports, we listened to on changes to
677760	684920	find out when CodeMirror has changed. And this time, we will first sync our backing store with
684920	695880	the CodeMirror instance. And then we'll dispatch an event. This is a built-in function. With a new
695880	706440	custom event. This is a built-in constructor. And we said it was editor changed. I'll save it. I hope
706480	716000	the syntax is right. Looks like it. I think this is the last time we're going to do this. That's
716000	727920	fine. And now, when I expose everything from main, we can see there's some messages there and it's
728000	740960	filling in character by character. That's how you use the custom element with Elm. When I figured
740960	750520	out how to do this, I was pretty psyched. I was like, hell, yeah, dude. Remember that. It's not all
750520	754880	fun and games, though. It's not all jokes. There's some things you need to be aware of when you're
754920	760360	doing this, even though I totally recommend that you do. The first thing, warning number one, is that
760360	766040	the Elm virtual DOM is always right. It's always going to have the last say about what's actually in
766040	775120	the DOM. So to illustrate my point, when I teach this to people, sometimes they ask, maybe they're
775120	780440	coming from React and they ask, if I have a Google Maps element, can I put markers in the map as
780480	787040	nested elements? That kind of looks the way that I think that should look. And I agree that it looks
787040	795040	nice. This is pretty cool. The problem is the top code is what Elm thinks you're asking for when you
795040	802080	do this and these markers represent elements. This is what Elm thinks that you want it to be. And
802080	805640	when you render your map into the custom element, this is what it's actually going to be. So you have
805680	810720	this conflict here and virtual DOM is always going to overwrite what's in there that you've put in
810720	816000	there kind of outside of its knowledge. So what you should do instead when you have situations like
816000	824320	this is either use the Shadow DOM if your browser space supports it. Unfortunately, it probably
824320	831000	doesn't. And unfortunately, this is not really possible to polyfill completely. So we have some
831040	837720	waiting to do there. Or what I recommend that you do is represent your markers, represent your nested
837720	843600	data as some other kind of structured data and encode it to JSON and pass it as a property and
843600	849400	interpret it in JavaScript that works just as well. One of the number two is that virtual DOM
849400	857280	uses notes. This is kind of weird and it's hard to explain why it happens. You'll know it when you
857320	861720	see it. And I'll give you an example. So maybe if you go down this path and you encounter something
861720	866200	that's really weird, you'll remember this and kind of have an intuitive understanding of what's
866200	872080	going on. So let's say we have a custom element for rendering blue rectangles. It's like really
872080	878320	just incredibly useful custom elements. Very important. They can be light blue or dark blue.
878320	883960	The custom element decides. One is inside of the other. And what we want to do is remove the
884000	889160	outer dark blue one and have the light blue one fill the space. So what we expect it to look like
889160	894920	is this. What's actually going to happen is this. And that's because the virtual DOM saw the outer
894920	899120	rectangle and was like, oh, this is a rectangle. I'm supposed to put a rectangle here. So I'm done.
899120	907880	And it's wrong. But it's not Elm's fault. It's mine for making a bad rectangle. So there's tricks
907880	913760	you can do. And I really encourage you to avoid getting into this situation. But it is good to
913760	919760	be aware of just in case. And then warning number three, and this is a small warning. It's not
919760	925720	very big deal. Warning number three is don't use value because the Elm virtual DOM special cases
925720	933000	this particular property name to deal with built in inputs. So here's what I recommend you do when
933200	938280	you're building your custom elements. The first one is the most important. And it's to always use
938280	944640	leaf nodes, whether your custom element itself is at the very end of your tree branch or whether
944640	948880	you've got some stuff inside of it, but that stuff is fixed. I'll give some examples of that. And
948880	955720	the second one is to not use value for the reason I just mentioned. So here is almost verbatim the
955720	962920	code editor view from Ellie. It takes a bunch of attributes and it renders them all. And most
962960	968560	importantly, that last list there is empty. Elm, when it sees an empty list from diff to diff, it
968560	974160	doesn't clear anything out. It just skips it. It says, I get it. There's nothing here. Even though
974160	984040	we're lying. So you can see the actual implementation of this in the LA repo. And I know this is a
984040	989960	long URL and I'm going to click pass it, but I'll post it in Slack or something. And here is another
989960	996560	example from the no writing code base. This is in our UI library. We have this text area that grows
996560	1002480	and shrinks as the user types and delete stuff. And that's not what text areas usually do or are
1002480	1007280	even capable of doing. So you need JavaScript to do that. And so what we do is we wrap it in a
1007280	1013360	custom element. The custom element goes and finds that text area and modifies it in a way that the
1013360	1018920	Elm virtual DOM is totally okay with. So since everything within the custom element is fixed and
1018960	1024920	not really changing around, this will survive the diff. So you can do it that way too. You can't do
1024920	1031200	dynamic stuff inside of a dynamic list of elements inside of a custom element and be in
1031200	1037440	field totally secure in doing that. So I recommend that you don't. So that's how you do custom
1037440	1041240	elements. That's how you avoid getting in trouble. And so this question of how do I
1041280	1047880	interoperate with JavaScripts I think has a more nuanced, slightly more nuanced answer now. It's
1047880	1054160	first to ask is the thing you want to do a UI widget? Is it a map or a date picker or a fancy
1054160	1059640	input? In that case, use a custom element. Otherwise, if you have the growth hacking AI
1059640	1067240	blockchain client or something similar to that, you use a port. And so with that, I'll just leave
1067240	1072760	you with something that's kind of a tradition at Elm conferences to put a slide with Evan's face
1072760	1083080	superimposed on an actor. So here's mine. Yeah, you can email me about this or you can find me
1083080	1089440	in Slack and those are some links that you should check out to learn about how to do this. Thanks,
1089440	1118000	everybody. Oh, yeah, questions. So I've actually done this with code mirror as well. I came up
1118000	1123680	with a very similar solution with custom elements. But I had this problem that if you type real fast
1123680	1130000	in the code mirror editor like you do kind of day to day, often the letters kind of ended up in a
1130000	1136880	different order or you dropped some characters kind of they got overwritten by the Elm state
1136880	1141160	management kind of overwrote the internal code mirror state management. Did you manage to work
1141320	1147880	out how to stop that from happening? Yes. So in the example that I gave, I'm just dispatching
1147880	1155320	events every time a change event happens. In real life, I debounce the code that dispatches the event
1155320	1162360	on request idle callback. So as long as you're typing or have typed recently, it won't bother to
1162360	1167240	trigger any changes. So by the time it actually sends the event into Elm, the editors are guaranteed
1167320	1171160	to be settled. Well, that's awesome. Thanks, man. Yeah, so you can find that in the LA code base too.
1180680	1187800	So what's the main advantage of using custom elements over mutation observers? I think the
1190840	1194520	instance management I guess is what I would call that. You don't have to
1194840	1200440	manually watch the DOM and wait for those elements to be discovered. You don't have to
1201000	1206760	have a mutation. You don't have to write the mutation observer that then queries the DOM that's
1206760	1210440	changed and find the elements and then iterate over them. It just kind of does that for you.
1210440	1215240	I think most of the polyfills that exist are based on mutation observer. So
1216680	1220120	nothing you can do with a custom element can't be done with the mutation observer. It's just
1220200	1225880	kind of nicer. It's a nicer API. Let me have back here.
1241720	1245000	And just a question, how do you manage Firefox? Do you?
1245960	1252440	We use a polyfill. Actually, the second link here is a repo for the official polyfill. It
1252440	1258280	works very well on Firefox. We use it in production at NoRidic and we haven't had any problems with
1258280	1263480	Firefox at all. And I think actually they're about to release support in the next version,
1263480	1271240	so that's very cool. All right. I think that's it. And you can come find me wherever. I'll be happy
1271240	1275240	to help. Thank you very much.
