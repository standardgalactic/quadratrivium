start	end	text
0	27000	Okay, we want to see who is who is going to start you. Okay, we have written some questions for him.
27000	44000	My first question is, we don't see Chuck much online, and I'm very interested in what he's doing now and is he still working on and with Ford.
44000	47000	Yes, of course.
47000	49000	Can you hear me.
49000	50000	Yes.
50000	51000	Yes.
51000	54000	Okay.
54000	64000	Wonderful version of color force, which I use almost every day.
64000	73000	I'm not doing anything impressive with it, just messing around with computers.
73000	76000	Basically, I'm retired.
76000	82000	I spend a lot of time exercising, trying to stay alive.
82000	87000	I eat a lot of food.
87000	96000	Very pleasant, very pleasant life. And I certainly don't want to be under any kind of pressure to produce things.
96000	99000	So I'm basically not.
99000	105000	I have a number of applications in color force that I enjoy.
105000	112000	They are emphatically not portable.
112000	119000	Forced to me I agree with Ulrich is a personal language, and I'm doing it my way.
119000	128000	And I would be happy to share ideas.
128000	133000	But no one would be interested in my fourth code.
133000	138000	I think we all interested in everyone's ideas and especially yours.
138000	142000	I would love to see it.
142000	147000	Sometimes maybe I can show it to you but I'm not set up to do that now.
147000	151000	What's the computer are you doing it at the moment.
151000	152000	Sorry.
152000	156000	Are you doing it on the GA 144.
156000	160000	Not a computer, a special computer maybe.
160000	164000	It's on a PC.
164000	170000	I've got a 4k display.
170000	176000	And it's all tuned to 4k.
176000	182000	Although I have the parameterized so I could display it on 2k.
182000	185000	It doesn't work very well.
185000	188000	That means it's small screen.
189000	194000	55 inch.
194000	198000	55 inch 4k display.
198000	203000	It's a PCL television.
203000	205000	It works just fine.
205000	208000	You only do force on it.
208000	212000	So other things.
212000	217000	I browse the web and YouTube.
217000	221000	That is my fourth display.
221000	224000	It's very nice to meet you.
224000	227000	We have got an old club here.
227000	231000	From 1979 about.
231000	233000	Okay.
233000	238000	We are rather active still with a few members, maybe 13 members are active.
238000	246000	And more than a hundred members are there, but not here normally.
247000	253000	And they're all very happy to use force because it's very flexible.
253000	257000	And it's very basic. You can do very smart things with a few.
257000	259000	A little bit of pop.
259000	264000	It's always been my favorite language.
264000	265000	I'm impressed.
265000	267000	I'm very happy.
267000	272000	I'm impressed with how many people are interested.
273000	275000	I gave up long ago.
275000	279000	Trying to promote force.
279000	283000	Yes, it's a hard sell.
283000	289000	And I would just rather use it myself.
289000	293000	I can understand that it's really a hard sell.
293000	295000	You can write beautiful code with it.
295000	298000	Most people only do a segment of relations.
298000	299000	I believe.
299000	302000	And that doesn't help.
302000	304000	Beautiful code is right.
304000	308000	It's.
308000	312000	Back in the back in the old days.
312000	316000	I thought that people would write their own programs.
316000	320000	And it forced to be a great vehicle for doing that.
320000	324000	And it would appear that.
324000	326000	A thousand people.
326000	328000	Out of.
328000	330000	8 billion.
330000	332000	Are willing to write their own programs.
332000	334000	Yes.
334000	337000	Most of the people like to copy and paste only.
337000	340000	Question for check more.
340000	349000	I really wonder what your most used application does.
350000	355000	The application I use.
355000	360000	The application you mostly use.
360000	362000	It's a clock.
362000	367000	I have a, I have a screen full of numbers.
367000	370000	The date and time.
370000	372000	Julian day.
372000	374000	Moonrise.
374000	378000	I don't know what the number of days till.
378000	381000	Things like they like savings time.
381000	385000	All of the.
385000	388000	Time questions that I asked myself.
388000	393000	Have got the answers.
393000	395000	And it's a pretty display.
395000	399000	Sounds nice. Thank you.
399000	402000	One thing I have done.
403000	408000	Is a new character set.
408000	413000	You may be aware that I've done many, many different character sets.
413000	416000	This one is the prettiest.
416000	419000	And simplest.
419000	422000	And it has a unique property.
422000	424000	Normally what I have been doing.
424000	426000	Would be I would generate.
426000	428000	A character.
428000	430000	As a raster.
430000	432000	I would have.
432000	434000	What 48.
434000	436000	Symbols representing the.
436000	438000	Characters.
438000	439000	Stored.
439000	444000	In rain Ram.
444000	446000	It finally occurred to me that.
446000	451000	Computers are much faster than they need to be.
451000	453000	Instead of storing the.
453000	458000	Characters I store the code that generates the characters.
458000	462000	And when I want to display one, I can do it.
462000	465000	Computers are pretty fast to do that.
465000	468000	With those perceptible delay.
468000	473000	And it saves memory.
473000	479000	It adds flexibility. You can edit your characters on the fly.
479000	481000	And you can invest.
481000	486000	A fair amount of work in calculating a character because it doesn't matter.
486000	491000	So I've got pretty characters.
491000	498000	Available on demand.
498000	501000	I encourage people to design their own characters.
501000	503000	It's fun.
503000	507000	It's easy.
507000	512000	And it gives you another customizable.
512000	516000	And it's very, very nice.
516000	520000	So there's something that is called display post script on,
520000	524000	on Mac OS 10, for example, or I don't know whether it's called like this.
524000	527000	So this is something like display force.
527000	532000	So a force program runs when you display text.
532000	534000	Because it draws the characters.
534000	535000	Yep.
535000	536000	Yeah, great.
536000	541000	I like that.
541000	544000	I can draw characters sometimes when I can.
544000	547000	They're very pretty in 4k.
547000	549000	I can draw very large characters.
549000	551000	They're all scalable.
551000	556000	And some curves.
556000	559000	Chuck, this is Don.
559000	562000	You gave a talk, I think it was last fourth day where you were writing
562000	565000	directly to the memory buffer.
565000	568000	That's what this system you're describing is you're writing directly to the memory
568000	570000	buffer.
570000	571000	Yeah.
571000	572000	Oh, yes.
572000	574000	You have to have a.
574000	577000	Kind of speed.
577000	581000	If you go through the windows.
581000	582000	Interface.
582000	588000	It's much too slow.
588000	591000	Hi, Chuck.
591000	595000	This is Carlos here.
595000	597000	Hi.
597000	598000	I'm Carlos.
598000	603000	I'm a member of the planetary networking special interest group.
603000	608000	I know you have been.
608000	612000	For many years interested in space and space exploration.
612000	615000	Have you been working at some point.
615000	617000	About the late tolerant networking.
617000	621000	And interfacing with force.
621000	624000	What is called.
625000	628000	I don't understand.
628000	632000	DTN is a protocol.
632000	639000	That use environmental protocol encapsulates the TCP IP or LTP like
639000	643000	like the transport protocol to connect.
643000	648000	With the space it's using the international space station and also in
648000	650000	much rovers.
650000	652000	And.
652000	654000	I.
654000	660000	I've been looking to different languages to interface with.
660000	662000	DTN.
662000	666000	We are working with Pinto surfing this in this project about interplanetary
666000	668000	internet.
668000	673000	And I would like to know if you have been interested at some point in this
673000	677000	kind of communication.
677000	681000	I haven't been able to get on to the internet.
681000	687000	I'm indeed interested, but I've done nothing in that direction.
687000	690000	In fact, I haven't even been able to get onto the internet.
690000	692000	The.
692000	696000	Tools that windows provides are.
696000	698000	Opaid to me.
698000	706000	And I've just been forced to deal with things locally.
706000	712000	Thank you.
712000	719000	Hi, Chuck. My name is Bob Flanders. It's a pleasure to meet you, sir.
719000	721000	Yeah.
721000	725000	Somebody just brought up the original list things.
725000	729000	Hi, Bob. Nice. Nice to meet you. Nice to see you in the group.
729000	736000	Nice to meet you too, Peter. It's been a, it's been a long time coming.
736000	741000	There's kind of an interesting little story about what's on the screen on
741000	743000	2011 or thereabouts.
743000	749000	It's been a pleasure to talk to ask if he had any old code.
749000	754000	For the IBM 1130, which was the first computer he wrote for thought
754000	758000	of fully working forth on this. I understand it. In fact, the name of,
758000	764000	of four would have been F O U R T H had it not been for the 1130s
764000	768000	limited file system, which only allows five characters.
768000	774000	So it had to be named F L R K H to be a file on the 1130.
774000	780000	Just kind of fun and has led to the idea of it being something that we go
780000	784000	forth.
784000	790000	So anyway, in 2011, I sent a message to him asking if he had any old code
790000	794000	for the, to be 1130 and he said, yeah, I'll rummage around and,
794000	798000	and he'll take a look and see what he has. And he found this.
798000	803000	And he sent it to me, but I missed the message or something.
803000	807000	Well, a few years later, I guess it was 2017 or so.
807000	813000	Carl Clanch, who is a fellow IBM 1130 enthusiast,
813000	818000	sent me a message that he had spoken with Chuck.
818000	823000	And Chuck had said, I think I send it to the sky Flanders and
823000	827000	he'd since gotten rid of the papers and so I rummaged around
827000	829000	in my Gmail and I found it.
829000	835000	And it turns out it's either a free version one or pretty close to
835000	842000	version one copy of the code and the basic kernel,
842000	846000	the, you know, the assemble level words and then the additional words on
846000	857000	it, but, and I've had a tiny amount of contribution to helping Carl
857000	862000	get it working on the IBM 1130 emulator.
862000	867000	And Carl actually has a working IBM 1130.
867000	872000	And he's, he's gotten it working.
873000	878000	One critical word that we probably would all be completely lost without
878000	883000	had it not had that wasn't there in this version, which was period.
883000	886000	So he couldn't print out the top of the stack.
886000	891000	I think that the top of the stack may have only been shown in the
891000	896000	indicator on the, on the 1130 for the, for the accumulator.
896000	904000	And it was a very interesting, a very interesting bit of work to, to
904000	906000	put it together and get it running.
906000	911000	There were, there were some typos or some not typos, but some, some hand
911000	915000	written notes on the code and notice some things that needed to be
915000	920000	adjusted a little bit, maybe also we made typos, putting it in.
920000	926000	And there is, there's actually floating about out there a version one
926000	930000	fourth of the IBM 1130.
930000	936000	The way I became interested in fourth personally was I was hired by
936000	940000	MCI telecommunications.
940000	943000	Like 1986 or thereabouts.
943000	947000	And I had no fourth experience, but a friend recommended me.
947000	950000	And I came in and the guy said, well, listen, let's, let's give you a
950000	951000	try.
951000	955000	First thing I want you to do is write a word that shows a timestamp.
955000	957000	So I fumbled around and wrote a timestamp.
957000	961000	Then the next thing he said is I want you to implement drivers for a
961000	966000	multi port serial card.
966000	969000	And I wrote that and then he said, okay, you got the job.
969000	972000	And I ended up working for eight years.
972000	976000	And I ended up using LMI fourth under some DOS extender.
976000	980000	To implement a system that ran on.
980000	983000	At the end, I think it was nearly a thousand.
983000	985000	What we're called site controllers.
985000	990000	And they are put in their co located at the various MCI facilities and
990000	994000	talk to digital cross connects and extended.
994000	996000	Extender sup frame monitoring units.
996000	1000000	And it would send all the information back to a central computer,
1000000	1005000	which would then use its interface support to do things like,
1005000	1008000	you know, a customer call up, say, Hey, I need a,
1008000	1013000	a circuit from Washington DC to Los Angeles.
1013000	1017000	And they would go into the digital cross connects hook up the,
1017000	1019000	hook up the T one, get it all running.
1019000	1023000	And then, you know, go out and get it delivered to the customer.
1024000	1027000	And they would have to get it delivered at the end points to whatever
1027000	1029000	provisions were necessary.
1029000	1032000	And it was very cool and interesting system.
1032000	1035000	I haven't done much with fourth sense.
1035000	1038000	But I'm always like, I'm always looking backwards.
1038000	1039000	Oh, I want to do this.
1039000	1042000	I want to work on, like, I'm writing 1130.
1042000	1044000	Emulator.
1044000	1047000	And things like that. So it's always an interest me to,
1047000	1050000	to do things with older code.
1050000	1064000	But I program and C-Shark and do a lot of sequel stuff on it.
1064000	1067000	Anyway, pleasure to meet, sir. Thank you so much.
1067000	1075000	Fourth is brilliant. It was brilliant. It is brilliant and shall continue to be better.
1075000	1080000	I can add a little bit to the 1130 story.
1080000	1086000	It isn't as if I was sitting in an office working with the 1130.
1086000	1095000	The 1130 was on the abandoned production floor of a textile mill.
1095000	1102000	It was a huge room about 200 feet long and 100 feet wide.
1102000	1109000	And the exact center of it was this 1130, which had been delivered by IBM.
1109000	1112000	And nobody knew what to do with it.
1112000	1115000	Except me.
1115000	1119000	And so that was the environment in which fourth was invented.
1119000	1124000	It was challenging in many ways.
1124000	1129000	Yeah, it was the 1130.
1129000	1134000	If there hadn't been 1130 in my high school, this was about 1972.
1134000	1136000	And I started using one.
1136000	1140000	And at that time, I had no understanding of what I was doing.
1140000	1145000	Then meant for the 1130, I probably would never have gotten into computing.
1145000	1149000	But that started my career.
1149000	1151000	First mini computer.
1151000	1158000	Yeah, I call it my first personal computer.
1158000	1161000	Hi Chuck.
1161000	1165000	Hey.
1165000	1173000	We've met a couple of times and many of us here will remember the
1174000	1183000	1980 edition of Bites where you introduced the language to a much wider audience.
1183000	1191000	But that was the time that you felt that the software had been done and you are now looking towards the hardware.
1191000	1201000	Could you, could you tell us a bit about how you made that transition from software to hardware
1201000	1218000	and you, you moved towards the, the Novix period of fourth history.
1218000	1228000	Yes, I did feel the software had been perfected in the, in context of fourth.
1228000	1240000	What I was doing at the time was putting off, putting forth on many different computers and interfacing it with many different devices.
1240000	1243000	And this of course is very easy to do.
1243000	1250000	That's why fourth exists.
1250000	1260000	Now, the interfacing with many different devices got very frustrating because these devices were badly designed.
1260000	1267000	The interface I had to go through was the czar baroque.
1267000	1271000	And I got kind of tired of doing that.
1271000	1275000	And I said, well, I could design a better interface.
1275000	1279000	I can design a better computer.
1279000	1283000	Now, people didn't do that at the time.
1283000	1290000	This was the business of someone else.
1290000	1297000	So it took really a leap of a leap of faith to abandon software for hardware.
1297000	1305000	I actually didn't because I had to develop the software to design the hardware.
1305000	1316000	Thereafter, my software efforts went in the hardware direction and simulators and layout tools.
1316000	1318000	And it was very rewarding.
1318000	1322000	My, my hardware worked.
1322000	1333000	And it worked much better than anyone expected or even would admit.
1333000	1343000	I'm still doing that in the sense of the greener rays, multi-processor chips.
1343000	1351000	They are incredibly simple, incredibly effective, and totally unpopular.
1351000	1366000	So forth hardware is just as unacceptable as for software.
1366000	1370000	Yep. And that's, that's absolutely fine.
1370000	1377000	Some people like forth, like everybody here would imagine other people don't understand.
1377000	1379000	We've met a couple of times too.
1379000	1381000	I'd just like to say, thank you.
1381000	1388000	You've made my career in programming much more fun than it would ever have been otherwise.
1388000	1391000	May the flowers and flowers bloom.
1391000	1393000	Thank you.
1393000	1395000	G'day Chuck.
1395000	1401000	I've met you once back in 1988 back in the year when I had Australian symposium here.
1401000	1410000	And, but, and I've been using forth since the early 80s, you know, I started the big project with that.
1410000	1412000	And I've been using it ever since.
1412000	1417000	And yes, you know, a lot of people won't admit that it works so well.
1417000	1418000	You know, that's true.
1418000	1420000	It was a hardware and software.
1420000	1422000	And it also makes the hardware a lot simpler.
1422000	1425000	We don't have to use any complicated hardware.
1425000	1431000	And, you know, that was my original fourth board I did up, you know, with a Rockwell chips, et cetera.
1431000	1437000	And then, you know, I ended to a module, you know, a little credit card size module, but this is mid 80s.
1437000	1440000	And, and that was okay for the mid 80s.
1440000	1446000	And now I use the PT multi core processor with 64 smart pins, et cetera.
1446000	1451000	And, and so, and I, so you do a lot of better control.
1452000	1458000	This is, this is a question I really wanted to, wanted to ask you, you just mentioned the greener rates.
1458000	1460000	It's got all these processes on there.
1460000	1463000	I've got the, the propeller parallax propeller processor.
1463000	1465000	We've got eight cogs or light cores.
1465000	1473000	It has hub ram, so it shares everything and every, every one of those cores can access all the IO equally.
1473000	1478000	But when I look at the greener rays, I can't figure out how I can use it.
1478000	1486000	When you're saying it's an effective processor, what has it proved to be effective in, you know, really?
1486000	1495000	How can I use it for general embedded control and smart stuff?
1495000	1498000	That's a good question.
1498000	1502000	It has 144 computers.
1503000	1509000	Exactly cores. They're independent computers.
1509000	1512000	They communicate with one another.
1512000	1516000	And the ones around the edge communicate with pins.
1516000	1524000	So if you want to control a pin, you have to use the computer, which is attached to it.
1524000	1532000	The computer pretty much can't do anything except run that pin and communicate with its neighbors.
1532000	1552000	So you end up building a little network of computers, not 144, but maybe half a dozen that all cooperate and communicate in running the protocol on that pin.
1553000	1555000	It's a fun thing to do.
1555000	1561000	It's totally different than any other computer where you would just run a serial processor.
1561000	1570000	Your, your whole attention is in coordinating the efforts of as many independent computers as you want.
1570000	1581000	I don't think I've done an application with more than about a few dozen computers.
1581000	1591000	So Chuck, so in talking about applications, what, what do you, what, if you had to showcase an application, say, look, you know, look how well it does this.
1591000	1604000	And, and I'm, I'm bearing in mind too that what you said already, there's a bit of work setting it all up for those cores to communicate with one another or, you know, those little secret years to communicate with one another.
1604000	1606000	I'm familiar with the whole architecture.
1606000	1617000	But what would you say, which, you know, you could hold off an application and say, man, you know, this doesn't so well.
1617000	1628000	Well, one of his applications through and forth to, you can use some of the, some of the computers to drive a display.
1629000	1633000	You can use some of the computers to read a keyboard.
1633000	1639000	And you can put them together to run forth.
1639000	1645000	I haven't done that. I've never got around to doing that, although I got close.
1645000	1649000	We've got
1649000	1654000	each computer has 64 words of realm.
1654000	1662000	And one of the computers interfaces with a flash memory.
1662000	1669000	So there's infinite, infinite amounts of data available.
1669000	1675000	Another set of three computers can commute with communicate with DRAM.
1675000	1680000	So what you want to do is set up a system whereby
1680000	1691000	you store it in flash, you store it in DRAM, and you read it back from DRAM and do whatever you want to do.
1691000	1699000	So, so with, with, you know, so, you know, I'm wondering why you haven't done a PC with it yet. Come on, you know, you can do it.
1699000	1707000	But the thing is, okay, so I use chips, you know, so that one's got 512k of RAM.
1707000	1710000	And plus all the 4k around on each CPU, etc.
1710000	1713000	And so it's really easy to make it work.
1713000	1719000	And if, and I talk to an IO and I can even instruct the IO to do something by itself.
1719000	1722000	It's a smart IO. It has everything built into it.
1722000	1726000	I, you know, I keep racking my brains looking at the green arrays.
1726000	1731000	And I can't think, you know, like, even if I could get it to do something, it'll be a lot of work.
1731000	1734000	You know, it'll be fun, but it'll be a lot of work to do it.
1734000	1748000	And you mentioned memory displays, for instance, well, there were a lot of more effective ways of doing displays, but I can do a VGA or even a HD display from the RAM on this one.
1748000	1753000	But I have to add a bolt on all that RAM onto the green arrays.
1753000	1763000	You know, I'd really love to see a green arrays one that was had less CPUs, had a bit more memory on each one and more access to the IO.
1763000	1770000	And it was like, that would be really great, you know, 64 CPUs, we get about 144.
1770000	1775000	Give me 64 and, you know, as you said, you don't need to use many.
1775000	1783000	We'd love to do that. We've had plans for doing that, but we've never been able to make such a chip.
1783000	1785000	Right.
1786000	1793000	We'd have to integrate someone else's memory onto our chip, but that isn't easy to do.
1793000	1801000	Yeah, well, you know, I appreciate it. I just wanted to ask you that question because it's like, it's the one thing that bugs me.
1801000	1807000	It's like these fourth chips right going right from the early days, Novix and all that, and they're all really great.
1807000	1816000	And, and then, you know, like, I've got 21, I've got the, the, the Shubhams and everything like that, but I can't figure out how to use the green arrays.
1816000	1819000	So I really love to see some application.
1819000	1827000	I'll even forget about application notes, but just by showcase something to showcase that particular chip power was used really well.
1827000	1836000	Well, the biggest advantage of the 144 is it doesn't use any energy.
1836000	1841000	Somebody put a lot of energy in to make it work though. That's the trouble.
1841000	1842000	Yeah.
1842000	1846000	Yeah. Well, thanks, Chuck. Yeah. No, appreciate it. Well, very much all your work.
1846000	1861000	We, you know, when we, we, we love for the other question, can I, I just wanted to ask you nothing to do with technical things, but we often talk about how, how is it that we can really promote forth?
1861000	1871000	You know, it's just that mindset, you know, you've, you've had way more experience with encountering the opposition and with, with, with people accepting forth.
1871000	1878000	And it's like, well, this before I had forth built into the chip and silicon on this particular P2 chip.
1878000	1883000	And that was a hard task to get that done at the time.
1884000	1890000	But forth is a dirty word, you know, people just don't like companies don't like mentioning it.
1890000	1898000	Do you see anything that would help break down that barrier?
1898000	1900000	A killer app.
1900000	1905000	We've been looking for a killer app for 50 years and haven't found one.
1905000	1915000	Well, after PC's, you know, I think, I think most of the fourth use, you know, I've always used forth on micros embedded.
1915000	1925000	And so it's built into airports and roadways and all kinds of vending machines, anything, you know.
1925000	1927000	And so they're all out there.
1927000	1930000	People just don't see it, but it keeps going 24 seven.
1930000	1935000	And it's also my prototype language that I use.
1935000	1940000	You probably want to prototype this, you know, people are used to using breadboards or forth.
1940000	1942000	You can move stuff around like that.
1942000	1944000	You can fritz all you like with forth.
1944000	1946000	And it's very quick.
1946000	1955000	So, you know, I have a project now where they are saying, hey, you know, do it with Arduino, you know, see and everything else like this.
1955000	1960000	And I'm thinking they can ask me, but I'm still doing it my way because, you know, I can get it done.
1960000	1963000	But yeah, but it's just that opposition to it.
1963000	1973000	And I don't know if there's anything we often talk about it on our group and forth 2020, how we can get young people interested.
1973000	1974000	It's not going to be a killer app.
1974000	1976000	I think it's going to be the easy use.
1976000	1983000	How they're using it make it's how to how to make use force, you know, can use forth easily straight away.
1984000	1985000	They say.
1985000	1988000	I have a question for Chuck.
1988000	1999000	And Chuck, was the sun force in bios or open force open.
1999000	2002000	How was the name open OS.
2002000	2004000	Open boot.
2005000	2008000	Yes, exactly open boot.
2008000	2023000	Was this not the fourth killer app because this was installed in so many computers, and also on the one laptop per child I know this was a really big, a really big installation of force.
2023000	2038000	Yes, that's true, but bios is such a obscure application that didn't attract any, any, any, any attention.
2038000	2041000	It was a technical triumph.
2041000	2052000	The attention that open boot attracted was attempts to replace it with conventional software.
2052000	2068000	That didn't work. Fourth didn't work to because there was not an industry behind it.
2068000	2070000	That's always been a problem.
2070000	2076000	We lack large scale support.
2076000	2086000	Yeah, Intel came along and killed open firmware open, not open boot open firmware.
2086000	2092000	And yeah, Intel was responsible for UEFI.
2092000	2097000	And that killed open firmware.
2097000	2105000	But fourth really doesn't need corporate support to prosper.
2105000	2112000	It's an individual thing rather than a collective.
2112000	2124000	As you did check with your been raised talk on, you did a discussion of that video, how you got the 144 trips to drive the video.
2124000	2133000	I was very impressed that you don't have generic video hardware driving the video in your demonstration.
2133000	2137000	You just chips, each programming, the timing.
2137000	2149000	And that was significant of how you got the greener a chip to do video that wouldn't be normally required.
2149000	2157000	Just to produce an output for people to see in applications, which don't really need consoles.
2157000	2170000	When you manipulate in data, you work the data and you produce the storage of the of the output for the for later display for people to see.
2170000	2180000	And so the video display was just just a really fantastic ability that the trip array could actually program and the speed.
2180000	2191000	Absolutely significant was the power savings that your trip said that nobody else could do.
2191000	2195000	And it was a lot of fun program that DGA.
2195000	2201000	And it was, it wasn't easy timing was a big problem.
2201000	2208000	And it was just fun.
2208000	2211000	I would say so too.
2211000	2226000	It's quite unique that you've got this hardware, and you're interfacing the greener rays into that hardware. So there's another incredible example of what the greener rays trip set can do.
2226000	2232000	Anything. It's got it's got the speed.
2232000	2245000	And this is with a obsolete geometry, 180 nanometers. This is this is abandoned.
2245000	2254000	Competitive with with the 10 nanometer geometries.
2254000	2270000	Quite the greener rays chip set to be a risk processor where everybody's going to system processes with multi with multi instructions.
2270000	2274000	What you can do on a risk processor like the greener rays.
2274000	2276000	It's so much quicker.
2276000	2281000	It may need a little bit of effort to do the stuff that needs to be done.
2281000	2292000	But clearly, the number of instructions to do the work supersedes the performance that any of the standard processes can work with.
2292000	2301000	And at the cost of power, which was so much cheaper on.
2301000	2308000	I've got to jump in here a little bit about programming these machines Chuck's machines.
2308000	2322000	I was one of the first Novix programmers, and one of the early greener rays series of processors.
2322000	2336000	Jeff Fox and I, at the beginning, we're doing our darndest to pack as much code as we could into those 64 words of Ram.
2336000	2346000	Over years, now we found that the smaller amount of code the smallest amount that you can put into a node.
2346000	2355000	You can use the least power, because each node is cooperating sending messages between them.
2355000	2362000	And when it isn't running, it isn't. It's only got leakage power going.
2363000	2374000	Look at for the earlier speaker about getting into a greener rays programming mind mode.
2374000	2382000	Look at the examples that are on the greener rays website.
2382000	2385000	You'll get a lot of that.
2385000	2399000	One of the things that I did sort of as a skunk works program with a good friend of mine, Bill Minch, who was also an early programmer for the.
2399000	2412000	I think it was the 24 processor chip was to implement a virtual machine to execute a fourth.
2412000	2423000	We put bills, Bill was the originator of E fourth and Ting is taking it taken off with it in assembly language, we did it all in high level.
2423000	2438000	And we built a virtual machine using, I think it was three or four of the nodes to execute E fourth op codes eight bit op codes directly.
2439000	2442000	That has facilitated actually.
2442000	2456000	It's been moved and Greg Bailey's version of poly forth for thanks code is now running virtually on the novice on the greener rays chip.
2456000	2465000	And all the development that's happening currently is being done in standard fourth.
2465000	2471000	You do not need to know the details, just like every other processor.
2471000	2481000	So, take a look at those application write ups on the greener rays website.
2481000	2498000	For example, if I may 10 words of code forms and ethernet Manchester decoder and receiver converting the weekly signals on the twisted pairs into bits going to the next node.
2498000	2501000	Wow.
2501000	2512000	I listened to all this and I think, wow, this is their stuff you guys are doing are incredible little chunks right. And then there's a question.
2512000	2521000	I could something like forth and take how do we take forth to the next level, how do we get it to, you know, push it into the future.
2521000	2538000	I'll tell you something, you know, I watch this one guy on YouTube his name is Jeff yearly, and he's trying to deal with taking a video card and getting it to run in a PCI E single lane.
2539000	2545000	Some of the new Raspberry Pi compute boards.
2545000	2564000	If, if you could do something like build a fourth driven video card with an open interface that could be, you know, could be added to the drivers and such could be added to that would have some kind of a standard interface.
2564000	2575000	And that's like, you know, we'll work with open GL or, I don't know what the current, the modern of the current video standards are.
2575000	2596000	If you could build something like that, that would then sit in like a PCI E one, one lane PCI East one is sell a billion of these because they repeat the very, the CM for Raspberry Pi CM forced things are taking are becoming incredibly popular
2597000	2616000	small on like, you know, systems with all with a bunch of slots and stuff like that for multiple safety news, and then having a, you know, a PCI E card or something like that sitting in there to show have a video.
2616000	2619000	It seems like busy building.
2619000	2628000	The track is busy building a thing called HD fourth from his last this from his last discussion.
2628000	2646000	And that seems so significant what he's working with on an HDMI interface. I'll be interesting to see further development that he's working on on his HD fourth.
2646000	2658000	HD fourth has evolved into what I call you HD fourth, you even better for the 4k display.
2658000	2660000	Wow.
2660000	2668000	It's running on a PC.
2668000	2673000	The x86
2673000	2679000	It's unique characteristic is that
2679000	2685000	a lot of the code is an assembler. Well, is in machine language.
2685000	2687000	And there's no assembler.
2687000	2695000	There are hex op codes for the x86 instructions.
2695000	2701000	I had to memorize those up codes.
2701000	2709000	But it was as easy to memorize the up codes as it was to memorize the assembly code.
2709000	2714000	And it gives you beautiful versatility and efficiency.
2714000	2720000	Completely unportable.
2720000	2726000	That's what I use. I call it color fourth, but that's that's versions I'm using now.
2726000	2729000	And it is
2729000	2741000	the nicest fourth I've ever had, because it gives me the closest interface with the hardware.
2741000	2746000	On the other hand, in the old days.
2746000	2750000	You wanted to interface to a chip.
2750000	2752000	Or a board.
2752000	2756000	That chip or board was documented.
2756000	2761000	And you could really download the spec sheet and
2761000	2764000	and work with it.
2764000	2767000	Nowadays there's no documentation.
2767000	2771000	The best I have found is in windows.
2771000	2775000	But windows is incredibly complex.
2775000	2778000	It's incredibly obscure.
2778000	2781000	Badly designed.
2781000	2786000	Almost impossible to work with. And I work with it when I must.
2786000	2793000	But it has turned me off trying to interface with the larger world.
2793000	2802000	As I said before, I've never been able to figure out how to get on the internet.
2803000	2808000	And I'm afraid it's changed in such a way as to disadvantage us.
2808000	2810000	The
2810000	2813000	calls hackers.
2813000	2817000	You're supposed to sign on
2817000	2822000	to the corporate vision of computers.
2822000	2825000	And if you don't or can't do that.
2825000	2831000	You're being left behind.
2832000	2835000	Perhaps some of you know.
2835000	2838000	Werner Vinge's
2838000	2841000	science fiction novels.
2841000	2845000	He has one cold.
2845000	2849000	Oh, fire in the sky, something like that.
2849000	2853000	In which
2853000	2856000	the problem of
2856000	2858000	buggy
2858000	2863000	software was mentioned.
2863000	2869000	The spaceships of that era were programmed in some obscure language.
2869000	2874000	But nobody could really master.
2874000	2879000	And it was determined that you should improve rewrite the software.
2879000	2884000	So that that was simple, clean, bug free.
2885000	2889000	And entire planets.
2889000	2892000	Attempted to do so.
2892000	2898000	They could not reproduce all of the obscure bugs in the existing software.
2898000	2903000	So it was not useful on existing spaceships.
2903000	2907000	And the whole project led to
2907000	2913000	enormous costs, effort and failure.
2913000	2918000	That would equate in today's view with trying to reprogram windows, say,
2918000	2921000	or Linux.
2921000	2924000	In fourth.
2924000	2928000	It probably can't be done.
2928000	2931000	It certainly is not.
2931000	2933000	Sound like much fun.
2933000	2937000	Because you have to reproduce the bugs.
2937000	2940000	He wants to reduce banks.
2940000	2947000	He wants to get the bags out.
2947000	2951000	What you really need is just an IP stack.
2951000	2954000	Internet or Wi-Fi interface.
2954000	2960000	And once you have those, you're pretty much good to go.
2960000	2962000	Sorry.
2962000	2968000	The hard part is the Wi-Fi interface into proprietary firmware though.
2969000	2974000	That's why I went to the 144.
2974000	2979000	Rather than try to interface with the existing world.
2979000	2981000	I wanted to try something different.
2981000	2983000	Something standalone.
2983000	2986000	144.
2986000	2991000	Could drive a GPU.
2991000	2995000	I don't know how to do that.
2995000	2999000	I don't even know how to find out how to do that.
2999000	3001000	If it could be done.
3001000	3004000	If it can be done, of course.
3004000	3010000	But whether you can figure out how is a completely different question.
3010000	3012000	And I've given up on that.
3012000	3014000	Chuck, here's a challenge.
3014000	3018000	If you were to develop the 144 to do bitcoining.
3018000	3021000	Everybody will stop using the GPU.
3021000	3023000	Processes.
3023000	3026000	The sales of the 144 would go.
3026000	3028000	Through the roof.
3028000	3031000	You'd be making money over money because the, the people ask,
3031000	3033000	they wouldn't realize just how fast these.
3033000	3039000	The 144s could process the hash tables.
3039000	3041000	Quite right.
3041000	3044000	But.
3044000	3046000	Among other things that takes money.
3046000	3051000	To develop such an application.
3051000	3054000	I don't have any money.
3054000	3057000	I have a, I have an open question for you, Chuck.
3057000	3061000	If I may, first of all, let me say that I'm feel very honored to,
3061000	3063000	to speak to you today.
3063000	3068000	I mean, fourth for me was a fantastic concept since the 80s when I
3068000	3069000	was a student.
3069000	3072000	So definitely it's a wonderful experience to speak to you.
3072000	3076000	Now for the question is related to IOT.
3076000	3079000	Since fourth is by design, very,
3079000	3084000	very efficient in terms of power consumption in terms of
3084000	3086000	processing efficiency.
3086000	3091000	I'm surprised that are you fourth is not more commonly used for
3091000	3094000	all developments based on IOTs where of course energy consumption
3094000	3098000	and responsiveness and real time aspects absolutely critical.
3098000	3100000	What do you think about this?
3100000	3106000	I think that's an absolutely wonderful application area.
3106000	3108000	And.
3108000	3111000	Greener raises.
3111000	3115000	Projects which are trying to address that.
3115000	3118000	The fact we use very little energy.
3118000	3121000	It's a no brainer.
3121000	3124000	But.
3124000	3129000	We haven't found the killer app.
3129000	3134000	Well, next week I have to go and explain to a professor.
3134000	3137000	At University of Wyoming.
3137000	3142000	Why the fact that we don't run standard high level languages.
3142000	3146000	In a pair of streaming glasses.
3146000	3149000	Is not a killer of our technology.
3149000	3151000	The point is.
3151000	3155000	The reason why people don't use our chips is that we don't have
3155000	3159000	these giant fat libraries of crappy code,
3159000	3161000	which they can glue together,
3161000	3163000	which is all they know how to do.
3163000	3164000	They don't know how to write code.
3164000	3165000	They don't know how to program.
3165000	3168000	And the story.
3168000	3169000	No, that's the first.
3169000	3171000	I've got a question for Chuck.
3171000	3174000	I may.
3174000	3179000	Yeah, please go ahead, Ken.
3179000	3183000	It's a historical question, Chuck.
3183000	3187000	When you made the transition from.
3187000	3190000	Software to hardware.
3190000	3193000	In the very early 1980s.
3193000	3195000	Did you.
3195000	3200000	Prototype any of the early fourth hardware.
3200000	3206000	Using, I guess, TTL at that time.
3206000	3211000	Before you, before you move to the, the, the gate array of the,
3211000	3213000	of the Novics.
3213000	3217000	Did you prototype any of that stuff?
3217000	3221000	Thanks.
3221000	3227000	Yes, I, I did.
3227000	3230000	I did build a prototype.
3230000	3232000	Of a fourth computer.
3232000	3238000	And then I moved to simulating the data array.
3238000	3243000	As a more.
3243000	3248000	Helpful.
3248000	3249000	Designed.
3249000	3250000	As a more.
3250000	3251000	As a more.
3251000	3254000	Helpful.
3254000	3256000	As a more.
3256000	3261000	Helpful.
3261000	3263000	Design tool.
3263000	3265000	In fourth.
3265000	3268000	So the fourth.
3268000	3270000	Fourth hardware prototype.
3270000	3271000	Didn't really.
3271000	3274000	Wasn't really helpful. Didn't go anywhere.
3274000	3278000	It only helped to convince some other people to support the.
3278000	3285000	Data array.
3285000	3288000	Okay, thanks. That's, that's quite fascinating.
3288000	3292000	So I guess you were on the transition between.
3292000	3295000	Building prototypes and hardware.
3295000	3298000	To simulating them.
3298000	3302000	By 1981, 82, I guess we had.
3302000	3305000	16 bit PCs and.
3305000	3311000	Simulation became a reality. Yeah.
3311000	3314000	I see Jared.
3314000	3320000	Yeah. Hello, everybody.
3320000	3326000	You're muted. Now you are muted.
3326000	3335000	I just had a couple of words and then your mic went off.
3335000	3337000	No, no, no, no, no sound.
3337000	3339000	We can't hear you.
3339000	3341000	It just broke.
3341000	3346000	Yeah.
3346000	3353000	Now comes the mic.
3353000	3356000	Can you hear me? Yeah, yeah.
3356000	3358000	That's good.
3358000	3363000	No, no, no, no, no, no, no, no, no, no.
3363000	3368000	That's strange. It was just a, again, just a word.
3368000	3371000	Maybe we'll log off and log back in.
3371000	3373000	Of the zoom.
3373000	3374000	Like drop.
3374000	3378000	If you're having problems with the audio, sometimes that fixes it.
3378000	3381000	You might get a message or reinstall.
3381000	3383000	Yeah.
3383000	3388000	Like it happened to me reinstall windows.
3388000	3389000	Dropout.
3389000	3391000	I want to.
3391000	3393000	I put on the chat.
3393000	3396000	Something that Chuck will.
3396000	3399000	Love to see.
3399000	3402000	I will put this on the chat.
3402000	3405000	Probably you have seen some of you.
3405000	3409000	I am watching, I started watching yesterday on Netflix.
3409000	3415000	The billion dollar code battle of over Google Earth and a German
3415000	3417000	company called television.
3417000	3420000	It's absolute amazing.
3420000	3422000	The fantastic film.
3422000	3425000	And this has to do.
3425000	3427000	With this killer up.
3427000	3430000	We were speaking before.
3430000	3435000	This is very, this is very interesting to watch.
3435000	3437000	Thank you.
3437000	3440000	Okay.
3440000	3443000	I've got a question for Chuck.
3443000	3449000	Um, yeah, I just, I'm just curious about the changes in fourth from
3449000	3453000	the sort of the classic fourth.
3453000	3458000	From the early 80s through to California and some of your
3458000	3461000	observations and reasons for.
3461000	3463000	The kinds of design.
3463000	3467000	The way forth has gone from.
3467000	3471000	From the classic fourth to the fourth you're using now.
3471000	3476000	What was some of the reasons that drove some of those design
3476000	3482000	decisions in the more recent versions that you're using now.
3483000	3485000	Wow.
3485000	3490000	Fourth was originally an interpreter.
3490000	3497000	And I had to learn how to make it into a compiler.
3497000	3504000	And that was largely a question of confidence.
3504000	3507000	The.
3507000	3511000	The first thing that I used was a bell go.
3511000	3515000	Developed at Stanford.
3515000	3520000	And I was a graduate student at Stanford.
3520000	3523000	And there's this team of half a dozen people.
3523000	3527000	Who wrote a bell go compiler.
3527000	3532000	And I said, well, if they can do it, I can do it.
3532000	3536000	And so I wrote a standalone fourth.
3537000	3540000	That was the first one.
3540000	3545000	The criteria was to make it simple because I couldn't do
3545000	3548000	anything complicated.
3548000	3555000	And I think all of my later developments of fourth implementations.
3555000	3560000	Were to try to make it simpler.
3560000	3565000	Originally fourth had a threaded dictionary.
3565000	3569000	And that hung on for a long time.
3569000	3573000	Perhaps until you HD fourth.
3573000	3576000	Now I don't have a threaded dictionary.
3576000	3579000	I have dictionary broken into pieces.
3579000	3580000	Each piece.
3580000	3582000	There's the.
3582000	3584000	Each array.
3584000	3586000	One array contains the words.
3586000	3588000	Another array contains parameters.
3588000	3593000	Another array contains the code address.
3593000	3596000	This, this lets me search.
3596000	3599000	The name array.
3599000	3603000	With this hardware instruction.
3603000	3605000	On.
3605000	3609000	But really nothing has changed.
3609000	3613000	I'm amazed that the original.
3613000	3616000	Concept structure of fourth.
3616000	3619000	With this dictionary and stack.
3619000	3629000	It has remained for 50 years without significant alteration.
3629000	3634000	At the moment, I don't know how to make it any simpler.
3634000	3637000	And of course, the hardware has changed.
3637000	3640000	It was originally memory constrained and now it's not.
3640000	3642000	Infinite amounts of memory.
3642000	3645000	Fourth doesn't know how to use infinite amounts of memory.
3645000	3647000	It's just not necessary.
3647000	3649000	So.
3649000	3653000	I don't know where to go from here.
3653000	3658000	I have a question which is not about technology only.
3658000	3663000	I mean, and as Christian said, I mean, you are free mind, right?
3663000	3665000	What, what is the topic?
3665000	3668000	I mean, considering the news, considering the way the world is going at the
3668000	3672000	moment, what is the topic that makes you passionate about at the moment.
3672000	3675000	What is the topic that makes you passionate about technology?
3675000	3678000	What is the topic that makes you passionate about technology?
3678000	3682000	The fourth could be AI or could be something not about technology.
3682000	3685000	AI goes back to my early days at the.
3685000	3688000	What they call them.
3688000	3694000	The early neural nets.
3694000	3699000	I am of two minds.
3699000	3704000	You can see this played out in the full drug, full self driving cars.
3704000	3708000	Do you use artificial intelligence or do you use pre-programmed decision
3708000	3712000	making?
3712000	3714000	I'm.
3714000	3716000	A pre-programmed decision maker.
3716000	3719000	So I.
3719000	3722000	That that's the way I do things.
3722000	3724000	If AI becomes.
3724000	3726000	Magic.
3726000	3732000	As it has in the case of go and chess.
3732000	3736000	I'll be disturbed because.
3736000	3739000	We can't understand how it does it.
3739000	3744000	If we get AI in the form of a mobile robot or a.
3744000	3748000	Mainframe in the cloud.
3748000	3753000	I don't know how it works.
3753000	3756000	I don't know that we've accomplished anything.
3756000	3759000	You've got the oracles of ancient Greece.
3759000	3762000	Who could answer your questions?
3762000	3771000	How is that different if an AI is answering your questions?
3771000	3774000	But I don't know what side to come down on.
3774000	3779000	I think I will stick with my deterministic clock.
3779000	3785000	And perhaps try to get precision time protocol and something like that.
3785000	3788000	Yeah.
3788000	3790000	Chuck.
3790000	3791000	This is Don.
3791000	3795000	You know, we're working on this FPGA base fourth.
3795000	3799000	And I'm very curious about your comments on the dictionary because we haven't
3799000	3801000	implemented the.
3801000	3806000	The outer interpreter in the dictionary quite yet, you know, the compiler part.
3806000	3810000	You said that you have three arrays.
3810000	3812000	You, you have the CFA's.
3812000	3817000	You have the strings, the word, the word strings, the name of the words.
3817000	3820000	And then you have the data.
3820000	3827000	What is, what's the data?
3827000	3831000	The data is usually on the stack, right? So.
3831000	3836000	In the case of a constant, it would be the value of the constant.
3836000	3842000	Oh, okay. So, so, so that's, yeah, it's in a constant array.
3842000	3847000	Well, it's an array. You can put anything in it you want the address of a variable,
3847000	3850000	the value of a constant.
3850000	3854000	I think those are the only two I actually use.
3854000	3857000	You have to have a data field.
3857000	3865000	In the case of a code reference, the data field merely indicates that it is a
3865000	3870000	code reference.
3870000	3874000	But this was like the most efficient implementation of all these things that I've
3874000	3876000	ever had.
3876000	3880000	I have a second question, you know, I'm in the space business now I'm working on
3880000	3882000	space robotics.
3882000	3885000	It's a very rich history in space.
3885000	3889000	Your RTX, especially.
3889000	3897000	I know that talking with Dr. King in 2010, the Goddard space laboratory had him do
3897000	3903000	some work implementing forth for one of their missions.
3903000	3911000	Can you talk a little bit about the history of forth in space.
3911000	3920000	I programmed reconnaissance satellite once.
3920000	3932000	But I had very little to do with it, because the NC 4000 was the prototype of
3932000	3937000	the RTX.
3937000	3943000	And yet I had no contact with it at all. Nobody ever asked me a question.
3943000	3947000	Nobody ever paid me money to do anything.
3947000	3956000	The whole space application went on without my participation.
3956000	3960000	So most of the space stuff was done by four think.
3960000	3963000	And Elizabeth Rathers people.
3963000	3965000	Well,
3965000	3970000	they were kind of the focus John John Hayes and Hopkins University.
3970000	3979000	John Hopkins University crew.
3979000	3982000	They were good people.
3982000	3986000	They.
3986000	3989000	What was the name.
3989000	3993000	Proves that forth was the provable language.
3993000	3997000	Which was an issue at the time.
3997000	4009000	I don't know why that is interesting because it's pretty obvious it's correct.
4009000	4015000	What's very interesting right now that I found being in the space business is
4015000	4023000	FPGAs are naturally radiation immune so they're very much favored in space because
4023000	4028000	it's much larger than the modern microprocessors, right.
4028000	4032000	So a radiation hit is not going to impact an FPG.
4032000	4036000	And I think this is a huge opportunity for forth.
4036000	4042000	If you can imagine 100 robots working out in Pluto assembling something.
4042000	4045000	And you have this low speed data link.
4045000	4052000	And you're going to send a C binary blob up there every time you want to change code.
4052000	4063000	You know, fourth is interactive. You just make your, your core words deferred words, and you, you update as necessary using text.
4063000	4073000	I think it's the same thing applies to only over the year updates that Tesla uses.
4073000	4075000	I don't know how they do it.
4075000	4081000	But I doubt they use a fourth model.
4081000	4093000	Okay, we have a queue of people that raise their hands to ask questions. So Dimitri is next as far as I know.
4093000	4098000	Put my hand up after, after Don.
4098000	4104000	My question for Chuck is, okay, I've got, I've got a few finite list.
4104000	4115000	What would you say are the most important things about fourth, that someone learning the language needs to know I'm interested in those who are learning it today.
4115000	4121000	I myself, I'm quite young, I've learned fourth in the past couple years.
4121000	4128000	I'm wondering what you, what your thoughts on this.
4128000	4137000	The first thing you have to learn is how to handle the stack of conventional programmers.
4137000	4140000	Don't think in stack terms.
4140000	4158000	The transition that takes, oh, maybe a couple years before you really know what to put on the stack, what not to put on the stack, and how to keep the stack clean.
4158000	4167000	The, the, the processor used in greener rays chips as a circular stack.
4167000	4177000	So you can put things on it, leave it there, and it will be forgotten in an optimal way. You don't ever have to keep the stack clean.
4177000	4185000	And that's what I do in UHD fourth also have a circular stack, a little more expensive.
4185000	4191000	But it's a hard lot, a lot easier.
4191000	4195000	Beyond that, you've got to learn to factor.
4195000	4210000	The problem, break it into pieces, give names to each line of code, so that you can combine them into a higher level structure.
4210000	4213000	That's,
4213000	4216000	that's not unique to fourth.
4216000	4224000	That's a term that's a kind of good programmer practice that no one uses.
4224000	4232000	You can create a conventional to use very large subroutines, lots of parameters.
4232000	4241000	And fourth has very small subroutines with almost no parameters.
4241000	4246000	You have to make that mental transition.
4246000	4257000	So what things do you recommend, leaving on the stack at a time like how many things in the stack should the word consume is there any rough guide on that.
4257000	4265000	One or two, one or two. Yeah, the, the,
4265000	4273000	the GA 144 has eight deep stacks.
4273000	4284000	It doesn't have 16 deep stacks, whatever, but my UHD fourth has eight deep stacks. That's all you need.
4285000	4305000	On the FPGA process I'm working on with Don, yeah, we've implemented a circular stacks and I think, I think it's 32 at the moment, but I thought 16 might be a reasonable depth for, for fourth programming so that's reassuring to know.
4305000	4318000	Let's, others have their hand up I asked my next question which is, what was it like working with fourth compared to a Fortran or our goal.
4318000	4327000	What was it about Fortran or our goal that made you think my I needs to develop the language fourth.
4327000	4330000	Interactivity.
4330000	4340000	As others have said, in Fortran, you have to recompile the entire application.
4340000	4347000	I worked in Fortran. In fact, an early version of fourth was coded in Fortran.
4347000	4355000	And it was a pain to have to recompile the whole thing it took half an hour maybe.
4355000	4361000	And I wanted something that was easier to to patch.
4361000	4366000	Now, there are two flavors of fourth that I've seen.
4366000	4376000	One is where you have a large body, a large dictionary with many things in it, and different vocabularies.
4376000	4383000	The other is which you know, no vocabularies, and you recompile apps on top of each other.
4383000	4392000	That's the way my UHD fourth works. One of the most, one of the most common apps I use is the editor.
4392000	4399000	It overlays whatever other app might be active, because clearly it isn't interesting any longer.
4399000	4411000	And it compiles a new version of a block, and then I can recompile the recompile that block to make the new app.
4411000	4417000	So I'm going to compile times are zero edit times are trivial.
4417000	4420000	And the application is tiny.
4420000	4427000	So I have a lot of tiny apps, instead of one huge one.
4427000	4439000	Wow, so that really, that really is fascinating and I've tried out using blocks I think is implemented in the ESP 32 fourth and I found it very very handy.
4439000	4449000	And my final question which follows on from the previous one is, do you think that fourth still has these advantages that you method that you mentioned.
4449000	4457000	Do you think it still has these advantages over languages today like see Java and Python.
4457000	4464000	Absolutely. I haven't seen any progress in the conventional language world.
4465000	4471000	It's been portrait. All these languages are in fixed notation.
4471000	4475000	They are not interactive.
4475000	4482000	They are huge.
4482000	4487000	Nothing has changed in the last 50 years.
4487000	4494000	What would you say is wrong with in fixed notation.
4494000	4500000	It's
4500000	4513000	it's a perversion of notation and concept and implementation in high school.
4513000	4519000	People have taught in fixed notation as algebra.
4519000	4524000	And it is a pain, because it is unnatural.
4524000	4529000	HP calculators are much more efficient.
4530000	4535000	In keystrokes than an infix calculator.
4535000	4546000	It's just a path that society has taken that I think is suboptimal.
4547000	4561000	I would agree with you and that concludes my questions by the way. Yeah, I would agree because I had a bug recently at work, which was caused by an infix operator that I got the precedence for it wrong.
4561000	4567000	So it was evaluating it completely incorrectly and I was thinking, if I was using forth, this would not happen.
4567000	4577000	And it's amazing how, how often people run into these things to see problems on Facebook sometimes where someone says, solve this math equation.
4577000	4590000	And it's because it's confusing these rules are confusing. They're good for mathematics, but they're not actually as intuitive as people think they are the only intuitive because we're taught them.
4590000	4599000	But yeah, that's it for me. Thank you for answering my questions, Chuck, and I will continue learning.
4599000	4604000	Yeah, thanks. So next with the right hand is James Norris.
4604000	4609000	Please go ahead.
4609000	4611000	We can't hear you, James.
4611000	4613000	Can you hear me? Yeah, no.
4613000	4625000	I was wondering about the x86 hand coding that you're doing. Would you consider using a similar or why don't you do it.
4625000	4632000	A similar is just another layer of software that gets in your way.
4632000	4640000	What I have is the hex op codes with subscripts.
4640000	4643000	I will put a number on the stack.
4643000	4651000	And the subscript indicates how many bytes that will take in the object code.
4651000	4657000	And stringing these numbers together gives you a program.
4657000	4663000	Now this is totally inappropriate for large programs. This is insane.
4663000	4671000	But for a one line fourth definition, it's trivial.
4671000	4679000	Would you be interested? I wrote a fourth base x86 assembler if you ever want to do anything bigger.
4679000	4694000	My second question is, what about using fourth as a, right now they're coming out with Russ trying to do this. They figured out that a lot of program languages have problems like C++ has memory management problems and things like that.
4694000	4703000	And it causes all these expensive bugs for like Microsoft and stuff and they spend millions of dollars trying to fix bugs in their operating system caused by the programming language.
4703000	4718000	So if you are trying to come up with rust as a magic solution, what about for fun, you could take for this really simple. You could put in all that error checking that doesn't have. What do you think about that.
4718000	4721000	Yes, we certainly could.
4721000	4730000	Fourth doesn't have to be a standalone language. It can be a module in an operating system.
4730000	4738000	It just doesn't seem to strike people's fancy.
4738000	4741000	That was all my questions.
4741000	4745000	Okay, thank you. So Gerald's next try.
4745000	4748000	Okay, next try. Can you hear me now. Yeah.
4748000	4752000	I'm very sorry about the blur before.
4752000	4758000	So Chuck, I wanted to ask just because you also mentioned before that not a lot has changed in force.
4758000	4763000	Regarding to the basic structure of having a directory and having a stack.
4763000	4781000	I actually recall having a discussion with you where you mentioned investigating multiple stacks and using locals even did you have. Did you do any further research, or is this just been a short excursion for you.
4781000	4784000	No, that doesn't lead anywhere useful.
4784000	4789000	I've done in new HD forth.
4789000	4795000	I've taken advantage of all the registers that the x86 has.
4795000	4803000	And you could almost say that you could make a force register based instead of stack based.
4803000	4806000	And I explored that a bit.
4806000	4809000	And abandoned it.
4809000	4813000	And why is that the stack is absolutely essential.
4813000	4818000	You might not use it all the time. You might take advantage of the registers.
4818000	4823000	If you don't have a stack on which you can pass parameters.
4823000	4825000	You're crippled.
4825000	4832000	And why do you give up on having even more stacks.
4832000	4839000	There's just floating point arithmetic so there's no, no reason to have a floating point stack.
4839000	4843000	And I have never found a use for any other kind of stack.
4843000	4847000	Okay, thank you.
4847000	4854000	Right, thanks. So our next question come from Greg.
4854000	4859000	Hello, hello Chuck. It's a pleasure to meet you.
4859000	4867000	Actually, I was curious about something that was said earlier you mentioned as a, as a general rule.
4867000	4872000	Just limit the number of things on the staff to maybe just to.
4872000	4896000	And so just as a, as a possible example, if I were to develop a word that is to draw a rectangle, and it, it takes two points, you know, top left bottom right, let's say, as parameters that would, that would be for arguments on the stack so I might think,
4896000	4903000	maybe I should start thinking about structures so maybe I'll create a structure that's a point object.
4903000	4911000	And so I could put two points on the stack and, you know, that's only a couple of things placed on the stack but now I have a structure.
4911000	4922000	That structure would be, I think in fourth would be typically global, which some people might look a scans that and say it's a global variable.
4922000	4937000	But I would also think of it in terms of, well, maybe I could create an object called a rectangle and the rectangle might have methods to set its points and to display itself or whatever I decide make make sense.
4937000	4942000	And I think fits well with the noun verb.
4942000	4953000	You know, structure that forth, I think encourages, you know, objects, you know, action type of thing, you know, machine on machine off sort of thing.
4953000	4969000	I'm curious as to what your thoughts, you know, would be on how you might structure and your thoughts, some problem like that and, and, you know, what are your thoughts on structures and objects and that level of abstraction,
4969000	4975000	you know, in addition to just the basics of what gives you
4975000	4979000	that that's one way of doing things.
4980000	4992000	Is I have a word at that sets the cursor takes two parameters and specifies the location on the screen.
4992000	4996000	And then I have another word called rectangle.
4996000	5002000	Has the dimensions of the rectangle that I'm going to draw at the cursor.
5002000	5008000	So I've broken it into two pieces instead of having one large piece.
5008000	5017000	I'm going to use the word at for triangles as well, or for circles.
5017000	5021000	Now in the case of a triangle.
5021000	5028000	It's a problem because you've got three points.
5028000	5032000	And I use a structure for that.
5032000	5036000	There's one parameter, the radius.
5036000	5039000	So it's on stack.
5039000	5045000	So to generalize and say everything should be structures is not right.
5045000	5051000	And everything should be in a stack is not right either you have to be flexible.
5051000	5054000	What are your thoughts on objects.
5054000	5057000	Having, you know,
5057000	5059000	I created.
5059000	5064000	I created an object and forth.
5064000	5066000	Called the month.
5066000	5072000	And this object had starting point in the year and the number of days or something like that.
5072000	5075000	This was back back very early.
5075000	5081000	That's the only object I've ever.
5081000	5083000	And it was useless.
5083000	5089000	I have much better ways of doing months now.
5089000	5093000	So I think object learning programming is the mistake.
5093000	5103000	There are not enough instances of the object to make worth the generalization.
5103000	5104000	Interesting.
5104000	5110000	Thank you for your thoughts on that appreciate.
5110000	5118000	That's why they call it oops.
5118000	5122000	Okay, Francis, please ask your questions.
5122000	5123000	Hi Chuck.
5123000	5125000	Can you hear me.
5125000	5126000	Yes.
5126000	5127000	Okay.
5127000	5130000	Hi Chuck, it's an honor to speak with you.
5130000	5145000	I've been following for a while, and I just wanted to thank you for this gift to us. I was wondering if you could speak a little bit about the motivations for the circuit simulation software you wrote its performance and its current status.
5145000	5147000	Say again.
5147000	5160000	I was wondering if you could speak a little bit about your motivations for the circuit simulation software used to do the lay on the simulations, its performance and its current status.
5160000	5161000	Yeah.
5161000	5166000	That is my.
5166000	5172000	That's one of my favorite applications. It's one of the things that I've spent most time on.
5172000	5177000	And I think I've done the best job on.
5177000	5182000	Um,
5182000	5186000	there's there's two aspects to it.
5186000	5192000	One is the circuit logic die logic description.
5192000	5195000	And the other is a layout.
5195000	5202000	If you are laying out a circuit board, or whether you're laying out a chip.
5202000	5206000	Basically the same problem with different geometries.
5206000	5212000	And what I have learned to do is in both cases.
5212000	5215000	I do the layout.
5215000	5220000	And from the layout, I derive the circuit.
5220000	5228000	An array of transistors and interconnects.
5228000	5232000	It's extremely efficient, extremely intuitive.
5232000	5237000	Pretty simple to implement.
5237000	5247000	And gives wonderfully complete results.
5247000	5251000	I've done a lot of circuit boards.
5251000	5255000	But I've done even more chips.
5255000	5259000	And the chip layout.
5259000	5271000	Well, conventionally one has a logic description of gates that are connected and then you that you derive the, the layout.
5271000	5275000	And then you do it the other way. The layout is predominant.
5275000	5281000	And the function of layout is determined from it.
5281000	5282000	Yeah.
5282000	5286000	This is this is a strange side effect.
5286000	5297000	There is no need to do a validation, proving that the layout accurately reflects the circuit.
5297000	5302000	This is the circuit and is by definition, correct.
5302000	5305000	Amazing.
5305000	5309000	And it's a lot of fun. I enjoy working with rectangles and layouts.
5309000	5310000	Yeah.
5310000	5321000	Unfortunately, again, just like the world doesn't let you interface with chips or boards or GPUs.
5321000	5325000	The world doesn't let you interface with chips any longer.
5325000	5329000	You give it a
5329000	5333000	GDS approved layout,
5333000	5336000	which they will validate
5336000	5344000	before they construct a layout, which vaguely resembles the one that you work from
5344000	5349000	to frustrating technological development.
5349000	5354000	I would love to have a chip making machine.
5354000	5364000	Something that will generate a prototype chip in a desktop environment.
5364000	5370000	But the world is going to the world prefers to have billion dollar fabs.
5370000	5371000	Yep.
5371000	5376000	Yep.
5377000	5383000	I asked that because I was in my daily job.
5383000	5386000	I do this as a maker and a hobbyist of the cyber.
5386000	5392000	In my daily job, I do chip design and process development for some of the one of the big semiconductor companies.
5392000	5395000	And this is a cool interest of mine.
5395000	5397000	I thought I would ask about that.
5397000	5400000	This is another question.
5400000	5411000	What are the most interesting one or two applications you've seen in forth from others that you didn't see coming.
5411000	5414000	The applications and forth think does.
5414000	5418000	And you can go to their website for a list.
5418000	5421000	But they've done the
5421000	5423000	communication networks,
5423000	5426000	device handlers.
5426000	5431000	I did a Hollywood robot once.
5431000	5436000	Robot camera.
5436000	5441000	Cement making plants.
5441000	5446000	I'd love to see that full self driving car.
5446000	5450000	And forth.
5450000	5459000	That's a, that's a heavy thing though. As soon as you get into applications that
5459000	5462000	risk human lives.
5462000	5471000	It's a whole new game. And I've never done one of those.
5471000	5475000	And just a, just a, just a last question.
5475000	5482000	In hindsight, has anything sort of done differently with regards to forth and setting it up developing it all that.
5482000	5490000	Looking back after all these, these news.
5490000	5497000	No, in, in hindsight, I don't know that I've done particularly well.
5497000	5504000	But I don't know that there's anything I would have or could have done differently.
5504000	5513000	In back in what 1970 or so.
5513000	5521000	Fourth, in a sense was competing with Microsoft.
5521000	5525000	Not exactly, but conceptually.
5525000	5534000	And if, if we at four think had developed an operating system.
5534000	5539000	We could have competed with Microsoft.
5539000	5541000	But we didn't.
5541000	5548000	We couldn't.
5548000	5553000	And I'm perhaps glad we didn't.
5553000	5559000	I'm much happier with where we are now than where with Microsoft is now.
5559000	5563000	Microsoft has to be compatible.
5563000	5566000	With the exception maybe of Windows 11.
5566000	5569000	With everything they have ever done before.
5569000	5570000	Yeah.
5570000	5577000	And that is a horrible burden to bear.
5578000	5585000	As it stands.
5585000	5588000	Fourth is free to reinvent the wheel.
5588000	5596000	And I think that is a marvelous concept. No one should ever be afraid to reinvent the wheel.
5596000	5601000	And we do it every day.
5601000	5604000	Thank you, thank you.
5604000	5608000	Yeah, thanks. And Howard, your turn.
5608000	5611000	And please open the mic.
5611000	5619000	Hi, Chuck, I've already had a turn at chatting to you, but one more question about ones compliment.
5619000	5623000	The whole, it used to be very popular a long time ago.
5623000	5628000	The IP internet protocol uses a ones compliment checksum.
5628000	5631000	And it has some interesting properties.
5631000	5635000	I have a feeling that it's a really good way to go.
5635000	5640000	And I observed that you use one's compliment in the color fourth.
5640000	5646000	And I just wanted to hear your opinion. Do you think that the world went wrong when it moved over to.
5646000	5651000	Toes compliment.
5651000	5656000	No, I, I, I worried about this.
5656000	5662000	One of the main frames I programmed early on was one's compliment arithmetic.
5662000	5667000	But who's as much more convenient.
5667000	5670000	And it doesn't cost anything in hardware.
5670000	5674000	So to complement is definitely the way to go.
5674000	5686000	And I can understand that, that point of view, the thing, the thing I like about ones compliment is that you've got this extra state in the system and normal, normal.
5686000	5694000	Toes compliments, you've got zero and you've got everything else and in ones compliment you've got plus zero and minus zero.
5694000	5706000	And it helps me that it's very useful to have this extra states that can be used so you can have a value is either zero, not zero or not set or some such.
5706000	5712000	And I think this, this whole idea of having three states in a value rather than two.
5712000	5723000	It brings it closer to the optimal number of symbols required to transmit data, which I believe is e somebody proves a long time ago.
5724000	5729000	Anyway, it's just, I think it's a good idea.
5729000	5731000	You're talking about having code.
5731000	5732000	Yeah, yeah, yeah.
5732000	5734000	Yes.
5734000	5749000	The introduction on computer file about that two days ago, but having codes and the transition of following the edges of the of the square to get to that.
5749000	5750000	Okay, thanks for the link.
5750000	5752000	I'll look into that.
5752000	5755000	Okay, thanks, Chuck.
5755000	5757000	Okay.
5757000	5761000	Right. So, Bob, you will raise your hand.
5761000	5763000	Hello.
5763000	5781000	Okay, I have a few one thing I'm wondering when I heard you programmed a mainframe that was once compliment what mainframe was that you remember.
5781000	5784000	That's why I didn't name it.
5784000	5787000	Okay.
5787000	5793000	Could it have been a spare Univac.
5793000	5800000	No, it might have been the
5800000	5804000	don't use this.
5804000	5806000	Was it when you did that at the regs.
5806000	5810000	The first super computer right I can't come up with the name of it.
5810000	5811000	Oh, great.
5811000	5812000	Or us.
5812000	5814000	Great.
5814000	5819000	Or maybe one of its input terminals something like that.
5819000	5820000	Cool.
5820000	5823000	Second question.
5823000	5828000	You mentioned compatibility, you know, and how Microsoft does maintain compatibility.
5828000	5830000	You've just mentioned mainframes.
5830000	5847000	I was thinking, ZVM, which is the current version of Z of OS and MBS, which is OS MBT, which is OS 360 has maintained compatibility across since the 1960s.
5847000	5855000	When it first started and evidently you can compile a program today on CVM.
5855000	5861000	You've got ZOS, rather I'm sorry, ZOS mainframe and run.
5861000	5865000	I mean, just, you know, it was interesting that you'd mentioned compatibility.
5865000	5869000	IBM is having maintained that for all these years.
5869000	5874000	Compatibility guarantees there won't be any progress.
5874000	5877000	Yes.
5877000	5888000	What is the smallest fourth even you've run across what's the, you know, what's the minimum, like, if you could.
5888000	5897000	I don't know exactly I quantify it but like the smallest amount of memory smallest amount of space. What is, what is that.
5897000	5899000	What is that.
5899000	5904000	The smallest one I've done was called CM fourth.
5904000	5912000	For the Novics I think it was.
5912000	5916000	It for thing we had.
5916000	5932000	Micro fourth and many fourth, which explored the range of having a small kernel and everything else compiled.
5932000	5938000	And I believe he forced those out I believe.
5938000	5950000	But I have, I've heard references to these some micro computer fourth that had very small kernels.
5950000	5955000	I would say a kernel should not be more than 4k.
5955000	5958000	If you get it down to one K that would be nice.
5958000	5961000	Okay.
5961000	5972000	So you mentioned in talking and I forget who it was but you mentioned that the two parameters that you mentioned the stack that's on the feet.
5972000	5978000	Is that for like, as many levels as deep as you go or is it a.
5978000	5984000	I've never thought he was also small.
5984000	5989000	I would think in terms of the circular stack with eight elements.
5989000	5996000	So that you could put as many things on the stack as you want but you only have access to eight of them.
5996000	6005000	Now, for the nice circuit tracing algorithms.
6005000	6014000	I've needed to stack thousands deep, because as you trace a circuit you're recursing and recursing and recursing.
6014000	6030000	It's a whole different concept that I would have a software stack for the hardware stack can be very small for is too small, a to small 16 is plenty.
6030000	6032000	Okay, cool.
6032000	6049000	Two more. One is, did you know that the current dot net implementation of languages for do something called I L and I L is a fourth light stack language.
6049000	6054000	So they actually you compile C into a fourth language.
6054000	6056000	I don't know if none of that.
6056000	6060000	I would say no because I haven't understood what you said.
6060000	6065000	Okay, well, us that net is the kind of the IP.
6065000	6070000	I'm sorry, Microsoft's answer to Java C sharp is Microsoft's answer to Java.
6070000	6077000	become very popular so actually learn this language, if you're writing that kind of software.
6077000	6088000	But when it compiles, it compiles down into something called intermediate language, which is actually a very forth like language to stack based language.
6088000	6093000	I was, I thought that was interesting. I didn't know if you'd heard of that.
6093000	6101000	Well, all infects languages have to compile into a stack.
6101000	6103000	So yeah.
6103000	6106000	But if the interesting thing is this.
6106000	6108000	It doesn't compile.
6108000	6115000	It doesn't compile to a native, it compiles I L I L gets compiled to native.
6115000	6116000	An intermediate language.
6116000	6117000	Yeah.
6117000	6122000	That is.
6122000	6126000	To me that is grossly inefficient.
6126000	6129000	Why not writing intermediate language.
6129000	6138000	And on last thing is that you, you've talked about assembler and you don't even know the x86 op codes and such like that.
6138000	6142000	In the 1130 assembler, you wrote an assembler.
6142000	6153000	I mean, in 1134, you wrote an assembler so you could write 1130 instructions in a fourth life notation.
6153000	6158000	I mean, there's a right there right at the beginning is very cool.
6158000	6167000	Not only 1130 all of my, all of my computers had assembly words.
6167000	6170000	I don't think that that was a waste of time.
6170000	6176000	It was, it was hard to figure out how to construct the words.
6176000	6179000	It was hard to remember how they were constructed.
6179000	6190000	It was inefficient to implement the, the hex op codes are on any computer are far the simplest way of implementing it.
6190000	6197000	So it was, it was, it's interesting you saying that because it was just like, that was when we were looking at the code.
6197000	6201000	That was one of the most intense parts of the story.
6201000	6203000	What are you doing here.
6203000	6207000	And then like saying, wow, no, we fought, we fought really.
6207000	6213000	So it was fun.
6213000	6217000	It was, it was a clever.
6217000	6222000	But it was at least as difficult as the hex codes.
6222000	6223000	Yeah.
6223000	6229000	Okay, that's it. I'm out of here. I'm, at least I'm calling you. Thank you for your time.
6229000	6232000	Okay, thanks, Bob.
6232000	6236000	Our next questions come from Jan Bramkamp or Jen Brankamp.
6236000	6239000	I don't know.
6239000	6241000	If my microphone is working.
6241000	6242000	Yes.
6242000	6249000	So my question is, you've already rented about infix notation and how it doesn't compose.
6249000	6257000	And what do you think about a prefix notation like list.
6257000	6261000	I'm sorry, I lost my earpiece.
6261000	6263000	Sorry, let me repeat that.
6263000	6270000	You've already given us your opinion on infix notation and how badly it composes.
6270000	6278000	Your opinion on prefix notation languages like list.
6278000	6281000	Um,
6281000	6284000	they made an unfortunate choice.
6284000	6289000	I believe the human brain works on post fix.
6289000	6294000	You, you, you accept data.
6294000	6299000	You store it in your short term stack, and then you operate on it.
6299000	6309000	And then you pre fix things.
6309000	6311000	Okay, short answer.
6311000	6317000	And are you satisfied with it?
6317000	6320000	Yes, I got my answer.
6320000	6321000	Okay.
6321000	6323000	Okay, thanks, Jan.
6323000	6326000	The next is Anton Airtel.
6326000	6331000	Anton, please go ahead.
6331000	6336000	Oh, maybe your mic volume has been turned down.
6336000	6339000	So that's what happened to Jared.
6339000	6345000	So we can't hear you.
6345000	6347000	Mic selection.
6347000	6352000	No, no, no.
6352000	6355000	No, no, no.
6355000	6357000	No, and now not again.
6357000	6361000	So, yeah, yeah.
6361000	6363000	Go ahead.
6363000	6372000	All right. So, um, the question is, um, what is your take on state smart words?
6372000	6378000	I think you had them in your early fourth systems and then you eliminated them.
6378000	6382000	And I'm not sure if you have them in, in the reason systems.
6382000	6383000	I don't think so.
6383000	6386000	But can you talk a little bit about them?
6386000	6389000	And yeah.
6389000	6394000	Yeah, I think maybe that's an area in which forth has made some progress,
6394000	6397000	or at least my fourth.
6397000	6402000	And you HD fourth is basically color fourth.
6402000	6406000	And different words have different colors.
6406000	6415000	The state smart words would have different colors for different states.
6415000	6420000	For instance, the color white means execute immediately.
6420000	6424000	The color green means compile.
6424000	6440000	And those are only only two states that I need.
6440000	6443000	But I do have to be aware.
6443000	6445000	In programming.
6445000	6448000	For instance, a conditional word like if.
6448000	6451000	Or them.
6451000	6457000	That is an immediate word and must be in white.
6457000	6467000	If I have an if in green, it means compile a reference to if for future use.
6467000	6471000	And that's basically what the state smart words did.
6471000	6476000	You didn't have to be aware that they were.
6476000	6478000	Which state they were in.
6478000	6480000	If they knew.
6480000	6485000	But now I must be aware.
6485000	6488000	To distinguish green from white.
6488000	6491000	And that is a programming challenge.
6491000	6497000	Sometimes I get it wrong.
6497000	6500000	Thank you.
6500000	6502000	Yeah, interesting.
6502000	6504000	Yeah, don't.
6504000	6506000	Please.
6506000	6509000	Check again.
6509000	6520000	How many items or how deep do you think we should build the return stack in our fpj fourth.
6520000	6522000	32 bit fourth.
6522000	6531000	That doesn't matter.
6531000	6533000	I would go with eight.
6533000	6535000	Okay.
6535000	6539000	I think the return stack.
6539000	6541000	And the data stack.
6541000	6544000	Need not be the same length.
6544000	6548000	But by default, I would make them the same length.
6548000	6553000	So that until experience proved otherwise.
6553000	6559000	The next thing is that a circular stack that you're talking about.
6559000	6561000	It doesn't matter.
6561000	6565000	We actually implemented circular stacks.
6565000	6568000	So that was Dr. Ting.
6568000	6572000	We shared the code with me said, you circular stacks.
6572000	6573000	Okay, so we did that.
6573000	6575000	Dmitry implemented that.
6575000	6578000	It costs nothing in hardware.
6578000	6582000	My next question to you is.
6582000	6584000	Yep.
6584000	6592000	Why don't you utilize fpj's because that is your desktop chip making.
6592000	6594000	Scenario today.
6594000	6601000	And I will offer you when we get finished, I'll send you a complete system that you can play with.
6601000	6606000	And it's going to be in system bear log.
6606000	6609000	It's, it's very beautiful code right now.
6609000	6617000	It's like two pages of code to implement a fourth processor basic.
6617000	6623000	So why, why haven't you used fpj or development?
6623000	6629000	Because they wouldn't let me program them in fourth.
6629000	6631000	There you go.
6631000	6633000	That's great.
6633000	6641000	That's literally the reason and the only reason I would love to use an fpj, but they won't let me.
6641000	6645000	I have, I'd have to learn someone else's ugly language.
6645000	6646000	Yeah.
6646000	6655000	Remember that's only maybe five years that there are open source tool chains for for fpj programming.
6655000	6657000	Thanks, Chuck.
6657000	6664000	Okay, or not. You're raising your hand and you're putting it down and raising it. Maybe you have a question.
6664000	6669000	I actually wasn't putting it down, but it's okay.
6669000	6681000	Sorry. Yeah, I have a question. I think, like, fourth is like, you know, perceived as a runtime language, right.
6681000	6692000	It could be like a meta language. It could be like incredibly like expressive and like, you know, what are your thoughts about that?
6692000	6701000	And also, yeah, I can, I can ask the next question.
6701000	6704000	So what exactly was your question?
6704000	6706000	Oh, sorry.
6706000	6719000	So the question is, we're thinking about stacks and what stack to use and like, you know, what kind of stack size to use because like, that's a runtime for it.
6719000	6730000	Right. That's the fourth where it's like, you know, we execute a like a stack based we have a stack based runtime, right.
6730000	6746000	And that has like a certain costs in terms of like, you know, like third performance costs and it doesn't actually map to architectures like GPUs, for example, because there is not even like a concept of stacks just like, I mean, you could have like a memory stack on the GPUs
6746000	6761000	but it's got to work on like, you know, I think, I think fourth can be an amazing like compiler, you know, like, it's, it's, it's, I'm sorry, I can be, I'm super excited.
6761000	6766000	So I am somewhat in our particulates and can be harsh.
6767000	6770000	Oh, let me, let me try to address that.
6770000	6771000	Yes.
6771000	6786000	Thank you. The stack is nearly a tool that forth uses to express things compactly. And certainly forth has applications far beyond stack oriented things.
6786000	6799000	Fourth would make an excellent compiler. Fourth would make a good language translator. Fourth would make a good artificial intelligence effect.
6799000	6810000	And yes, I kind of agree fourth is a middle language. It lets you define an application language suitable for your environment.
6810000	6839000	Yes. Yes. Thank you. I mean, also, that brings to the second question, which is, like, I also think, like, having the, like, you know, the 144 chip, the, how, like, in terms of like the simplicity, that's, that's the way to actually reach like the energy, like, consumption to the minimum, right.
6840000	6851000	And we think there could be other constructs other than the stack to like, you know, or like, it could be like, I don't know.
6851000	6867000	I was thinking maybe it could be like a hardware definition language where we define those kinds of constructs for whatever problem at hand. So the hardware could morph, depending on like what kind of application is what run we redefine the hardware sort of
6868000	6876000	You don't need to be, you don't want to think restricted to a stack, you don't have to use a stack for everything.
6876000	6884000	As I said earlier, you can have you can have structures, which relieve the depth of the stack.
6884000	6894000	And, but the stack I think is in this, at least the small stack is absolutely essential for passing parameters.
6894000	6905000	I think I also come to that conclusion, because like it's super simple to pass parameters.
6905000	6921000	And yet I think like, you know, at some level, it's, it's, it's all like, it's, it's, it could be even like, you know, we implement the whole compiler and assembly and like, like use the
6922000	6925000	Sorry, I can, I can.
6925000	6945000	Also, I just want to say like, I, I thank you for, for all the inspiration and like for everything. I mean, I am, I'm so, so happy that I briefly got to introduce you to some of the work that I've been doing.
6945000	6946000	Yeah.
6946000	6950000	Okay, thank you very much. I think we follow up on that later.
6950000	6954000	Dimitri, another one.
6954000	6961000	It's a very short question. It was, it was based on Don's question on the return stack.
6961000	6972000	And in the, in the chat on Peter Jackie, he was saying, well, you know, wouldn't the return stack need to be deeper if you're going to factor your code heavily.
6972000	6987000	How could we have a return stack or say eight steep and still factor our fourth code.
6987000	6991000	Oh, no, it's a question. It's a question of complexity.
6991000	7001000	If you, if you have to deep a call sequence, this calls that calls that calls that.
7001000	7006000	It gets complicated and you lose track of what's going on.
7006000	7017000	I rarely have more than two or three levels of nested calls, which is what the return stack is for.
7017000	7034000	You see, okay, so it's quite flat to yes, because you can still, you can still factor your application into lots of short words, but they're just not words that call one another one another in a chain.
7034000	7037000	You're going to stay at the same level.
7037000	7038000	That's right.
7038000	7047000	The return stack is to hold the loop count, although that's not the only way of doing it.
7047000	7056000	So you want to consider how many nested loops you have, as well as how many nested calls.
7056000	7058000	Okay, that makes sense to me now thank you.
7058000	7061000	Okay, great.
7061000	7065000	Thanks so young for another question.
7065000	7074000	Yes, this time my question is regarding state smart words, I found them a pain in the posterior to work with.
7074000	7090000	And wouldn't it be possibly easier to have an always compiling forth where interactive code is compiled into an anonymous function and executed afterward just to be immediately deallocated.
7090000	7111000	Is there a downside to setting up a fourth system like this that it's always in compile mode and the defining a word would only move the compiler location from the scratch pad to the dictionary.
7111000	7122000	I'm a little bit out of my depth, because I don't know how state smart words are done conventionally.
7122000	7134000	I do, I do agree there needs to be two distinct behaviors, one in which you're interpreting and one in which you're compiling.
7134000	7139000	So do I need the interpreting state at all.
7139000	7146000	Couldn't this be solved by compiling into a temporary scratch pad area.
7146000	7160000	Large enough to hold a line of code or two, then calling this code and we using the scratch pad for the next interactive input. So always compile being in compile mode.
7160000	7166000	I can't do that. I think I did that once upon a time.
7166000	7168000	What is the downside.
7168000	7173000	It's no less clumsy. You still have to be aware of what you're doing.
7173000	7179000	And it's just a different way.
7179000	7184000	What say there's three ways of doing it. One you can have a state flag.
7184000	7193000	There's three different colors, or three you could have this compiled scratch and execute.
7193000	7203000	There's three ways of doing the same thing. I think the color way is is latest.
7203000	7219000	I went into this G for for Mac with still ours is that yes, that's a state verbal and some words respond to it and as soon as you want to do heavy meta programming and you need one of those states smart.
7219000	7224000	What's in another state smart word they don't nest.
7224000	7226000	That's really cool.
7227000	7243000	At that point you're scratching your head and some for systems work around it by providing non state smart versions and suddenly you have to two or three times the number of words.
7243000	7245000	For those words.
7245000	7249000	It's got the special treatment.
7249000	7253000	That's
7254000	7258000	Yes, I would rethink the problem.
7258000	7265000	Which is why I asked because
7265000	7269000	I have a state smart
7269000	7278000	state state smart question for Chuck so you know what I was thinking is, you have a 32 bit wide fourth computer in an FPJ.
7278000	7287000	Make the inside data bus 34 bits wide and then use the top four bits for your state.
7287000	7291000	Or whether it's an immediate word, or
7291000	7299000	you know compile, I guess it's compiling an immediate is that the two, two things you need to figure out.
7300000	7308000	I have done that on one of the early computers that I
7308000	7313000	had fabricated at 21 bit words.
7313000	7321000	Whereas the memory was only 20 bits and that extra bit was used as a flag for various things.
7321000	7324000	It was not good.
7324000	7332000	It was, it was as awkward and confusing and difficult as anything else.
7332000	7335000	Okay.
7335000	7345000	I maybe I have a follow up question and another one on that you once talked about the ice principle interpret compile execute.
7345000	7351000	So if we enroll everything into just compile.
7351000	7366000	Don't we lose the interpretation capability to calculate things up front before we compile. So do we need interpret compile execute the ice principle.
7367000	7385000	You're exactly right, we do need the ability to calculate things. And that's why in color fourth, if I compile green words, I can interpret interpolate white words to do the calculation.
7385000	7391000	Yeah, so so we don't want to lose this and maybe on this also answers a little bit of that.
7391000	7400000	We don't want to lose the capability to do execution while we compile and calculate things and generate code or whatever.
7400000	7409000	I didn't propose to eliminate immediate words.
7409000	7411000	Anyway,
7411000	7414000	my second question.
7414000	7431000	I was talking about the map is not the territory. And I would like to hear your current opinion on on the statement and how you think about abstraction.
7431000	7439000	The map, the map is not the territory.
7439000	7444000	But currently I prefer to work in the territory.
7444000	7448000	No that's not it that's inaccurate either.
7448000	7451000	In the case of drawing characters.
7451000	7457000	You draw the character, or you can describe the character.
7458000	7462000	Long time ago I would draw the characters.
7462000	7468000	And that became a pain, because I would somehow move a pixel the wrong place.
7468000	7471000	Now I describe the character.
7471000	7478000	I've come up with, I think a very compact way of describing characters.
7478000	7480000	So,
7480000	7484000	I go back and forth between the map and the territory.
7484000	7495000	I see. Yeah, thank you. Thank you very much and thank you very much for influencing my life over the last 40 years.
7495000	7503000	Yeah, maybe without knowing it, but you did the responsibility.
7503000	7510000	Right. Next question come from Travis.
7510000	7516000	I'll unmute so that we can hear you.
7516000	7523000	About eight deep return stacks.
7523000	7536000	I found a number of different uses for return stacks like, for instance, I'll make a word I have a word that out that a lot space in the dictionary.
7536000	7541000	And then deal us afterwards.
7541000	7556000	And I'll use the return stack as scratch space for storing the top of the here pointer for an afterwards so I can restore it and return it.
7556000	7559000	I think if an exception occurs.
7559000	7569000	I'll catch the exception or store the step which the dictionary, then rethrow the exception.
7569000	7580000	And also, in my fourth, I have to deal with exception frames, which go on this return stack.
7580000	7588000	Or there can be nested exception frames, where one exception is within another.
7588000	7597000	So, all the pop, and furthermore, the vote the tasking uses the return stack.
7597000	7618000	So, to store registers and all that. So, in essence, I need far more than eight cells on the return stack store all the possible states.
7618000	7623000	Even if my code itself does that go that deep.
7623000	7628000	What are your thoughts on this.
7628000	7637000	I understand you can have a larger, you can have a large multi purpose return stack certainly.
7637000	7642000	My concern is that it's getting complicated.
7642000	7647000	And I tend not to like it being complicated.
7647000	7652000	I would observe that in the case of circular stacks.
7652000	7655000	When you get an exception.
7655000	7671000	You don't need to do anything to the stacks, you just leave them where they are and get on your business, because you don't need to keep them clean.
7671000	7673000	Yeah.
7673000	7679000	I think the simple solution is to have a small return stack.
7679000	7686000	But I understand the convenience of having a large return stack.
7686000	7687000	Thank you.
7687000	7696000	Okay, we have two other guys that want to ask questions john Hardy please.
7696000	7712000	Again, I was just, I mean, it's return stacks, an interesting topic because it is necessary to discuss all sorts of different aspects of fourth, because, because the return stack is so critical to the virtual machine.
7712000	7716000	I'm interested in the changes that happened in colorful.
7716000	7729000	One of them I have to do with your use of tail call optimization as a way of reducing. So, you know that we're optimizing away calls.
7729000	7735000	So they become jumps, which means that they use less stack space.
7735000	7740000	So, I can see that would reduce the size of a return stack.
7740000	7754000	But one thing that seemed to get thrown away from my understanding of classic fourth is that you use a tow call optimization as a looping mechanism.
7754000	7766000	And that you when you do when you in classic fourth when you redefine a word, or when you define a word you don't have access to that word it's hidden until you're finished defining it.
7766000	7775000	Whereas in color fourth I believe the word is is visible so that you can call it so it can be called by itself.
7775000	7793000	So, can you talk a little bit about that change in the language. And, you know, like, what are your thoughts about the way you're ditching the idea of the original fourth and going forward in this way.
7793000	7796000	Yeah.
7796000	7806000	The, the original way would be my preference that you rarely reference a word within itself.
7806000	7815000	More likely you want to redefine the word, add some functionality to its previous definition.
7816000	7820000	That was complicated and awkward.
7820000	7830000	And in color fourth I just threw it away and said okay I'll have to live with the fact that if I want to redefine the name of a word.
7830000	7836000	I'll have to say word colon word.
7836000	7841000	Word zero word zero stuff stuff stuff.
7841000	7845000	That's awkward, but it doesn't happen very often.
7845000	7851000	Yeah.
7851000	7862000	Actually, I found that in my fourth that doing it the way that you did it before.
7862000	7874000	It's simply a matter of linking the word that you're compiling into dictionary after you hit the semi colon at the end.
7874000	7878000	And it works.
7878000	7891000	Basically, like, how it was where you, if you redefine a word you refer to its old meeting from within the new word without any work at all.
7891000	7896000	That is, that is exactly right.
7896000	7902000	But in my current fourth, semi colon does not indicate end of word.
7902000	7906000	It merely indicates return from word return. Yeah.
7906000	7915000	And so I have no word that identify the end of a word.
7915000	7917000	Okay, john.
7917000	7919000	Another question or
7919000	7921000	No, that's it.
7921000	7925000	You're done. Thank you very much.
7925000	7927000	Satisfied.
7927000	7934000	Okay, the last question for today comes from James Norris.
7934000	7943000	I was wondering what the most fun thing you ever worked on was
7943000	7948000	most fun thing.
7948000	7961000	And it gives you frequent positive feedback.
7961000	7972000	I have to say my chip layout and simulation.
7972000	7979000	It took years, five years.
7979000	7985000	But I was immediately doing good work after one week.
7985000	7992000	So I got this positive feedback, which continue and continue and continue.
7992000	7998000	The hard part of that was when you submit a chip for for fabrication.
7998000	8005000	And you have to wait three months before you know whether it worked or not.
8005000	8009000	And what do you do during those three months.
8009000	8017000	But I have to say that was a lot of fun for a lot of years.
8017000	8021000	This is great asking another question.
8021000	8042000	The trip simulation is fantastic. I think one of your very first projects that you ever worked on was the, the telescopic pointing and the data analysis you did interactively in that on the system with all the other astronomers watching the work output.
8042000	8059000	Because that is, that is quite significant to use something as large as a radio telescope to capture the data live and to manipulate the data to generate those graphs that I think are to be significant.
8059000	8073000	Because at the time, there was this this millimeter radio telescope was being used to discover interstellar molecule molecules.
8073000	8084000	Wow. And you would, you would, you would collect data and display it. And if there was a peak where you're expected to peak you discover the molecule.
8084000	8090000	And the immediate feedback was very useful for the astronomers.
8090000	8105000	But they still required that I record the raw data so they could take it home and repeat the analysis, even though that was completely unnecessary.
8105000	8107000	Brilliant.
8107000	8112000	You've done the processing already.
8112000	8118000	I'm not going to redo it probably not as well because I had good statistics.
8118000	8122000	Live statistics forget about post statistics.
8122000	8132000	Well, guys, I see, and we had a fantastic meeting today. We need to thanks 1000 times to Chuck.
8132000	8135000	And there are people in the meeting.
8135000	8151000	I see Rob Jude from Australia. Do you want to say hello and anything to Chuck not not questions but only hi.
8151000	8157000	Or do you have questions. Sorry.
8157000	8168000	No questions. Okay, who else I see Ray Gardner also from Australia very late in the night.
8168000	8176000	Ray.
8176000	8191000	Ray showed us in the group in the Facebook group. Fantastic pictures of his boards with the RTX 2000 and image vision in Australia for machines for different machines so he's the.
8191000	8205000	He's a wonderful for the run incredible incredible stuff. I see in the meeting Ashley Faniello wanted to show us the wonderful cognition do you want to say anything.
8205000	8209000	Ashley, something to Chuck.
8209000	8222000	I'll just hold Chuck. We met once in 2013 at the strange loop conference, but it's great to see you again it's always great to hear what you have to say.
8222000	8236000	Who else. I see Ilya that as a foremost cow. He's chatting but he does not like to talk what happens either too much vodka today.
8236000	8248000	Hello to Chuck. Okay. Okay, I'm here but I'm afraid with my new microphone is it will be not possible to hear me.
8248000	8253000	Okay, very good. It's very good. I just want to say hello.
8253000	8256000	No more. What else.
8256000	8257000	Hello.
8257000	8262000	What else and wish everyone to be healthy.
8262000	8267000	Thank you. Thank you to you to 330 in the morning in Australia.
8267000	8275000	Indeed this is a word by word translation of Russian hello be healthy.
8275000	8288000	Wonderful. Thank you Ilya. I see also Jonas Carlson. Where are you in the world Jonas. Do you want to say hello to Chuck.
8288000	8303000	Oh yeah one moment. Yes. So yeah I'm in Bangkok at the moment and well at the moment you're all stuck where we are right so it's two years.
8303000	8329000	So I had time to play with a lot of things and the last thing I played a few months ago was 6502 fourth and I was reading in parallel a lot of things about color fourth in and I found similarities when I was basically creating a system with an online editor running on a 6502 where
8329000	8356000	page 256 bytes was maybe it was buffer size basically and and this fourth was a bytecoded fourth actually is alphabetical bytecoded fourth so I use D for Duke and I use S for swap and so on and of course the arithmetic operations are plus and I remember reading
8356000	8371000	when I was working on this that you actually liked the idea of a bytecoded fourth but you never really went to do that. Do you have any comments about that and especially about the code bloat today.
8371000	8386000	We have so big systems and they are compiled to yield hundreds of bytes. Yeah, so that's my my general question.
8387000	8394000	I thought about bytecoding.
8394000	8398000	Other people have also.
8398000	8400000	It's a good strategy.
8400000	8406000	The closest I've come to it is the, the
8406000	8410000	the 144 instruction codes.
8410000	8416000	They are five bits.
8416000	8424000	So effectively done by coding on the hardware.
8424000	8444000	Arm microcontrollers with on the seven M have the T a BH and T H H instruction which are basically what you're asking for bytecode, the jump tables in mass manufactured CPUs, which can be used.
8444000	8452000	Yeah, but at fourth with a very tiny interpreter.
8452000	8463000	Yeah, I'm finally building my my so called alphabetical fourth, which is supposedly half readable kind of bytecode with the letters and symbols.
8463000	8478000	And I'm writing a very tiny C compiler that compile C to this fourth and I have it kind of working for functional C with no variables and just the other day I added variables.
8478000	8495000	So, as soon as I'll be able to compile C to fourth and the rationale for this is ESP 32, which I calculated that yes it's a very powerful thing that one line of C code usually ends up being about 80 bytes.
8495000	8503000	Oh, fantastic. Jonas, we are saying bye bye. Bye bye. We are finishing. Bye bye. Thank you.
8503000	8506000	Great. Another, another one here.
8507000	8511000	Holy Neppu. Holy Neppu. Is this correct?
8511000	8513000	Holy. Yeah, from time.
8513000	8515000	Holy. How are you?
8515000	8522000	I want to invite us to join this in, join this meeting.
8523000	8531000	To say that I have developed the, the course compiler for different micros MC use.
8531000	8540000	And the course compiler includes assembler disassembler and compiler and close compile.
8540000	8552000	And one special trick is that once the assembler is generated, the disassembly is automatically generated.
8552000	8560000	And the assembly that I designed is based on algebraic assembler.
8560000	8573000	So, every microcontroller can be seen the same, because we use, I use the same, same instruction like register and immediate word.
8573000	8580000	You can see that the old microcontroller can be seen as a false chip.
8580000	8591000	Not the really false chip, but the, actually we, if we say it is for chip and it contains only register and immediate word.
8591000	8599000	So that way, based on these two words, two, two characters, I can design the assembler based on these two.
8599000	8603000	So every microcontroller seems the same.
8603000	8610000	The assembler has, I can design the assembler in different way.
8610000	8616000	Fantastic. This is, this is great news. So we, we love to hear from you.
8616000	8623000	And we send all our regards to the fantastic thick Taiwan and all the great members you have.
8623000	8634000	Also, in, in the name of the team who is here and he wanted to show, to show something, but we will do this in the next meeting because we are out of time.
8634000	8637000	Thank you, Holly.
8637000	8642000	Looking forward to hearing more about that later time.
8642000	8652000	Another friend here is Igor Mats from Estonia. Is this correct the name Igor.
8652000	8658000	Only to say hello to Chuck and wish, wish him well and etc.
8658000	8660000	Do you hear me, yes.
8660000	8665000	Yeah, but the mic is not making noise, but it will do.
8665000	8670000	Hello Chuck, thank you very much for your creation.
8670000	8696000	Thanks for the first time in my school and it made a big movement in my development as progress. Thank you very much for one more time and be healthy in this time and I wish you many years and a lot of implement your plans.
8696000	8715000	Thank you Igor karsten. Do you want to say hi to Chuck and bye bye. Where are you from karsten from Germany.
8715000	8718000	Carson, yeah.
8718000	8720000	Your microphone.
8720000	8723000	I cannot.
8723000	8733000	I think you have to put on the volume, increase the volume, Karsten.
8733000	8736000	Okay, no problem.
8736000	8745000	Wave into the camera next time. So customers from Hamburg actually, oh, across the city.
8745000	8752000	Right. Thank you very much Karsten for participating next next time we we talk with you.
8752000	8759000	Also from Germany, do you want to say bye bye to check and thanks, etc.
8759000	8764000	Thank you for the microphone who else I am.
8764000	8766000	You're muted.
8766000	8786000	Check. I want to say hello from Germany, benefit. And I was motivated to write my own force, my own tiny force, because everybody should write his own tiny for before using a professional for us, I think, and I learned it from you.
8786000	8803000	And also Thomas Gweppel from Germany, he helped us putting the link in the hackaday so I thank you very much to Thomas, and he's also a great participant here in our meetings.
8803000	8806000	No sound, Thomas.
8806000	8812000	Hello.
8812000	8818000	Thank you, then, if you have no sound, thank you, thank you again.
8818000	8822000	Who else?
8822000	8830000	Atle from Norway, do you want to say bye bye and thank you to Charles.
8830000	8838000	I'm a relative newbie in short, and I just want to say thank you and I find it brilliant.
8838000	8845000	Thank you. Anthony for a lot. Do you want to say bye bye and thanks to Chuck.
8845000	8857000	Yes, I say hello to say hello to Chuck and thank you so much for all the difficult nights I have to work through to find books in my programs for me later.
8857000	8870000	It was really enjoyable. And still today, two months ago I started a new project with forth, so it is still very alive for me. Thank you.
8870000	8878000	Well, who else, George from Brazil, George is an item. Do you want to say.
8878000	8880000	Oh, hi, I really see me.
8880000	8881000	Yes.
8881000	8897000	Hello, I'm George from Brazil. I'd like to say thank you everyone, especially Peter for organizing this event. Chuck for Discover, like he says, this incredible language, it's amazing.
8897000	8900000	It's more than a language, it's a philosophy.
8900000	8911000	I don't know what to think. I don't know. I really love this. It's a pleasure to talk about it.
8911000	8929000	Forfe with people who likes Forfe. Oh, thanks. Thanks Peter, Ulrich, John Hard, Chuck, Dr. Ting, everyone. It's really, really nice to stay with them today.
8929000	8938000	Thank you for your love in the language, George. You are a great father. I have also here, Thomas from Kern. Thomas.
8938000	8954000	Yeah, thank you. Can you hear me. Thank you, Chuck. Thank you everybody for this very marvelous meeting. And I was using force of being in, I think, 85 to 87 brought my PhD, no my thesis in physics was a great time.
8954000	8959000	So thank you all and have a good time, Chuck. See you soon.
8959000	8960000	Bye bye.
8960000	8965000	Thank you, Thomas. Pablo, the Argentina Pablo Reda.
8965000	8973000	Hi, I like to say thank you to Chuck Moore. I am a color for fun.
8973000	8986000	I'm learning for reading the color for the source. And I changed my life with this marvelous language. Thank you.
8986000	8994000	Thank you, Pablo. Who else somebody else. And then we close Cecil Bayona. I don't know, Philip.
8995000	9009000	So Chuck, again, many thanks for the inspiration you gave me during those years when I was a student and still now and and clearly you are a wonderful person. So thank you for everything.
9009000	9011000	Fantastic.
9011000	9015000	Thanks again, Chuck, for being here.
9015000	9019000	I've been following force for many, many, many years.
9019000	9021000	And in my youth.
9021000	9025000	When I first heard about forth I was so excited.
9025000	9033000	Somebody who wanted to keep things simple rather than the abortions we had for programming at the time.
9033000	9037000	So thanks again for your great idea.
9037000	9041000	And what can I say.
9041000	9044000	Thank you again.
9044000	9057000	Well, guys, this was fantastic. I don't know if Chuck agrees to that and we do all these meetings, thinking and thanking everybody in the first community.
9057000	9066000	All people from as we think also who helped us every meeting and from all the communities in the world.
9066000	9070000	How do you have a race, race in hand.
9070000	9075000	Yeah. Chuck, is there any chance I could get my hands on your clock code.
9075000	9080000	I'd like to put it in as an app in color fourth.
9080000	9086000	You do you have any plans to post it anywhere.
9086000	9089000	Hey,
9089000	9092000	I don't have a vehicle for posting things.
9092000	9097000	I can send it by email.
9097000	9102000	I can send screen captures maybe I'll keep it in mind.
9102000	9110000	Okay, I'd also like to see the source for your character generator code that interests me.
9110000	9114000	That I would have would gladly publish.
9114000	9119000	Again, if I had some way of doing it. I used to have a website.
9119000	9124000	I was thinking, maybe I should reactivate the website.
9124000	9128000	But I haven't yet.
9128000	9136000	Okay, if you come up with any way of transferring it can help in any way let me know and I'll help you gladly.
9136000	9143000	Okay, I want to thank you all for inviting me. It's been fun.
9143000	9148000	And it's gratifying to see so many interested fourth people.
9148000	9153000	And I'm sure you will in your endeavors.
9153000	9154000	Thank you.
9154000	9157000	Thank you.
9157000	9160000	Thank you very much.
9160000	9161000	Thank you.
9161000	9164000	Thank you very much for joining us.
9164000	9166000	Thank you.
9166000	9167000	Thank you.
9167000	9168000	Thank you everybody.
9168000	9169000	Thank you.
