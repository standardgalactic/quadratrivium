WEBVTT

00:00.000 --> 00:27.000
Okay, we want to see who is who is going to start you. Okay, we have written some questions for him.

00:27.000 --> 00:44.000
My first question is, we don't see Chuck much online, and I'm very interested in what he's doing now and is he still working on and with Ford.

00:44.000 --> 00:47.000
Yes, of course.

00:47.000 --> 00:49.000
Can you hear me.

00:49.000 --> 00:50.000
Yes.

00:50.000 --> 00:51.000
Yes.

00:51.000 --> 00:54.000
Okay.

00:54.000 --> 01:04.000
Wonderful version of color force, which I use almost every day.

01:04.000 --> 01:13.000
I'm not doing anything impressive with it, just messing around with computers.

01:13.000 --> 01:16.000
Basically, I'm retired.

01:16.000 --> 01:22.000
I spend a lot of time exercising, trying to stay alive.

01:22.000 --> 01:27.000
I eat a lot of food.

01:27.000 --> 01:36.000
Very pleasant, very pleasant life. And I certainly don't want to be under any kind of pressure to produce things.

01:36.000 --> 01:39.000
So I'm basically not.

01:39.000 --> 01:45.000
I have a number of applications in color force that I enjoy.

01:45.000 --> 01:52.000
They are emphatically not portable.

01:52.000 --> 01:59.000
Forced to me I agree with Ulrich is a personal language, and I'm doing it my way.

01:59.000 --> 02:08.000
And I would be happy to share ideas.

02:08.000 --> 02:13.000
But no one would be interested in my fourth code.

02:13.000 --> 02:18.000
I think we all interested in everyone's ideas and especially yours.

02:18.000 --> 02:22.000
I would love to see it.

02:22.000 --> 02:27.000
Sometimes maybe I can show it to you but I'm not set up to do that now.

02:27.000 --> 02:31.000
What's the computer are you doing it at the moment.

02:31.000 --> 02:32.000
Sorry.

02:32.000 --> 02:36.000
Are you doing it on the GA 144.

02:36.000 --> 02:40.000
Not a computer, a special computer maybe.

02:40.000 --> 02:44.000
It's on a PC.

02:44.000 --> 02:50.000
I've got a 4k display.

02:50.000 --> 02:56.000
And it's all tuned to 4k.

02:56.000 --> 03:02.000
Although I have the parameterized so I could display it on 2k.

03:02.000 --> 03:05.000
It doesn't work very well.

03:05.000 --> 03:08.000
That means it's small screen.

03:09.000 --> 03:14.000
55 inch.

03:14.000 --> 03:18.000
55 inch 4k display.

03:18.000 --> 03:23.000
It's a PCL television.

03:23.000 --> 03:25.000
It works just fine.

03:25.000 --> 03:28.000
You only do force on it.

03:28.000 --> 03:32.000
So other things.

03:32.000 --> 03:37.000
I browse the web and YouTube.

03:37.000 --> 03:41.000
That is my fourth display.

03:41.000 --> 03:44.000
It's very nice to meet you.

03:44.000 --> 03:47.000
We have got an old club here.

03:47.000 --> 03:51.000
From 1979 about.

03:51.000 --> 03:53.000
Okay.

03:53.000 --> 03:58.000
We are rather active still with a few members, maybe 13 members are active.

03:58.000 --> 04:06.000
And more than a hundred members are there, but not here normally.

04:07.000 --> 04:13.000
And they're all very happy to use force because it's very flexible.

04:13.000 --> 04:17.000
And it's very basic. You can do very smart things with a few.

04:17.000 --> 04:19.000
A little bit of pop.

04:19.000 --> 04:24.000
It's always been my favorite language.

04:24.000 --> 04:25.000
I'm impressed.

04:25.000 --> 04:27.000
I'm very happy.

04:27.000 --> 04:32.000
I'm impressed with how many people are interested.

04:33.000 --> 04:35.000
I gave up long ago.

04:35.000 --> 04:39.000
Trying to promote force.

04:39.000 --> 04:43.000
Yes, it's a hard sell.

04:43.000 --> 04:49.000
And I would just rather use it myself.

04:49.000 --> 04:53.000
I can understand that it's really a hard sell.

04:53.000 --> 04:55.000
You can write beautiful code with it.

04:55.000 --> 04:58.000
Most people only do a segment of relations.

04:58.000 --> 04:59.000
I believe.

04:59.000 --> 05:02.000
And that doesn't help.

05:02.000 --> 05:04.000
Beautiful code is right.

05:04.000 --> 05:08.000
It's.

05:08.000 --> 05:12.000
Back in the back in the old days.

05:12.000 --> 05:16.000
I thought that people would write their own programs.

05:16.000 --> 05:20.000
And it forced to be a great vehicle for doing that.

05:20.000 --> 05:24.000
And it would appear that.

05:24.000 --> 05:26.000
A thousand people.

05:26.000 --> 05:28.000
Out of.

05:28.000 --> 05:30.000
8 billion.

05:30.000 --> 05:32.000
Are willing to write their own programs.

05:32.000 --> 05:34.000
Yes.

05:34.000 --> 05:37.000
Most of the people like to copy and paste only.

05:37.000 --> 05:40.000
Question for check more.

05:40.000 --> 05:49.000
I really wonder what your most used application does.

05:50.000 --> 05:55.000
The application I use.

05:55.000 --> 06:00.000
The application you mostly use.

06:00.000 --> 06:02.000
It's a clock.

06:02.000 --> 06:07.000
I have a, I have a screen full of numbers.

06:07.000 --> 06:10.000
The date and time.

06:10.000 --> 06:12.000
Julian day.

06:12.000 --> 06:14.000
Moonrise.

06:14.000 --> 06:18.000
I don't know what the number of days till.

06:18.000 --> 06:21.000
Things like they like savings time.

06:21.000 --> 06:25.000
All of the.

06:25.000 --> 06:28.000
Time questions that I asked myself.

06:28.000 --> 06:33.000
Have got the answers.

06:33.000 --> 06:35.000
And it's a pretty display.

06:35.000 --> 06:39.000
Sounds nice. Thank you.

06:39.000 --> 06:42.000
One thing I have done.

06:43.000 --> 06:48.000
Is a new character set.

06:48.000 --> 06:53.000
You may be aware that I've done many, many different character sets.

06:53.000 --> 06:56.000
This one is the prettiest.

06:56.000 --> 06:59.000
And simplest.

06:59.000 --> 07:02.000
And it has a unique property.

07:02.000 --> 07:04.000
Normally what I have been doing.

07:04.000 --> 07:06.000
Would be I would generate.

07:06.000 --> 07:08.000
A character.

07:08.000 --> 07:10.000
As a raster.

07:10.000 --> 07:12.000
I would have.

07:12.000 --> 07:14.000
What 48.

07:14.000 --> 07:16.000
Symbols representing the.

07:16.000 --> 07:18.000
Characters.

07:18.000 --> 07:19.000
Stored.

07:19.000 --> 07:24.000
In rain Ram.

07:24.000 --> 07:26.000
It finally occurred to me that.

07:26.000 --> 07:31.000
Computers are much faster than they need to be.

07:31.000 --> 07:33.000
Instead of storing the.

07:33.000 --> 07:38.000
Characters I store the code that generates the characters.

07:38.000 --> 07:42.000
And when I want to display one, I can do it.

07:42.000 --> 07:45.000
Computers are pretty fast to do that.

07:45.000 --> 07:48.000
With those perceptible delay.

07:48.000 --> 07:53.000
And it saves memory.

07:53.000 --> 07:59.000
It adds flexibility. You can edit your characters on the fly.

07:59.000 --> 08:01.000
And you can invest.

08:01.000 --> 08:06.000
A fair amount of work in calculating a character because it doesn't matter.

08:06.000 --> 08:11.000
So I've got pretty characters.

08:11.000 --> 08:18.000
Available on demand.

08:18.000 --> 08:21.000
I encourage people to design their own characters.

08:21.000 --> 08:23.000
It's fun.

08:23.000 --> 08:27.000
It's easy.

08:27.000 --> 08:32.000
And it gives you another customizable.

08:32.000 --> 08:36.000
And it's very, very nice.

08:36.000 --> 08:40.000
So there's something that is called display post script on,

08:40.000 --> 08:44.000
on Mac OS 10, for example, or I don't know whether it's called like this.

08:44.000 --> 08:47.000
So this is something like display force.

08:47.000 --> 08:52.000
So a force program runs when you display text.

08:52.000 --> 08:54.000
Because it draws the characters.

08:54.000 --> 08:55.000
Yep.

08:55.000 --> 08:56.000
Yeah, great.

08:56.000 --> 09:01.000
I like that.

09:01.000 --> 09:04.000
I can draw characters sometimes when I can.

09:04.000 --> 09:07.000
They're very pretty in 4k.

09:07.000 --> 09:09.000
I can draw very large characters.

09:09.000 --> 09:11.000
They're all scalable.

09:11.000 --> 09:16.000
And some curves.

09:16.000 --> 09:19.000
Chuck, this is Don.

09:19.000 --> 09:22.000
You gave a talk, I think it was last fourth day where you were writing

09:22.000 --> 09:25.000
directly to the memory buffer.

09:25.000 --> 09:28.000
That's what this system you're describing is you're writing directly to the memory

09:28.000 --> 09:30.000
buffer.

09:30.000 --> 09:31.000
Yeah.

09:31.000 --> 09:32.000
Oh, yes.

09:32.000 --> 09:34.000
You have to have a.

09:34.000 --> 09:37.000
Kind of speed.

09:37.000 --> 09:41.000
If you go through the windows.

09:41.000 --> 09:42.000
Interface.

09:42.000 --> 09:48.000
It's much too slow.

09:48.000 --> 09:51.000
Hi, Chuck.

09:51.000 --> 09:55.000
This is Carlos here.

09:55.000 --> 09:57.000
Hi.

09:57.000 --> 09:58.000
I'm Carlos.

09:58.000 --> 10:03.000
I'm a member of the planetary networking special interest group.

10:03.000 --> 10:08.000
I know you have been.

10:08.000 --> 10:12.000
For many years interested in space and space exploration.

10:12.000 --> 10:15.000
Have you been working at some point.

10:15.000 --> 10:17.000
About the late tolerant networking.

10:17.000 --> 10:21.000
And interfacing with force.

10:21.000 --> 10:24.000
What is called.

10:25.000 --> 10:28.000
I don't understand.

10:28.000 --> 10:32.000
DTN is a protocol.

10:32.000 --> 10:39.000
That use environmental protocol encapsulates the TCP IP or LTP like

10:39.000 --> 10:43.000
like the transport protocol to connect.

10:43.000 --> 10:48.000
With the space it's using the international space station and also in

10:48.000 --> 10:50.000
much rovers.

10:50.000 --> 10:52.000
And.

10:52.000 --> 10:54.000
I.

10:54.000 --> 11:00.000
I've been looking to different languages to interface with.

11:00.000 --> 11:02.000
DTN.

11:02.000 --> 11:06.000
We are working with Pinto surfing this in this project about interplanetary

11:06.000 --> 11:08.000
internet.

11:08.000 --> 11:13.000
And I would like to know if you have been interested at some point in this

11:13.000 --> 11:17.000
kind of communication.

11:17.000 --> 11:21.000
I haven't been able to get on to the internet.

11:21.000 --> 11:27.000
I'm indeed interested, but I've done nothing in that direction.

11:27.000 --> 11:30.000
In fact, I haven't even been able to get onto the internet.

11:30.000 --> 11:32.000
The.

11:32.000 --> 11:36.000
Tools that windows provides are.

11:36.000 --> 11:38.000
Opaid to me.

11:38.000 --> 11:46.000
And I've just been forced to deal with things locally.

11:46.000 --> 11:52.000
Thank you.

11:52.000 --> 11:59.000
Hi, Chuck. My name is Bob Flanders. It's a pleasure to meet you, sir.

11:59.000 --> 12:01.000
Yeah.

12:01.000 --> 12:05.000
Somebody just brought up the original list things.

12:05.000 --> 12:09.000
Hi, Bob. Nice. Nice to meet you. Nice to see you in the group.

12:09.000 --> 12:16.000
Nice to meet you too, Peter. It's been a, it's been a long time coming.

12:16.000 --> 12:21.000
There's kind of an interesting little story about what's on the screen on

12:21.000 --> 12:23.000
2011 or thereabouts.

12:23.000 --> 12:29.000
It's been a pleasure to talk to ask if he had any old code.

12:29.000 --> 12:34.000
For the IBM 1130, which was the first computer he wrote for thought

12:34.000 --> 12:38.000
of fully working forth on this. I understand it. In fact, the name of,

12:38.000 --> 12:44.000
of four would have been F O U R T H had it not been for the 1130s

12:44.000 --> 12:48.000
limited file system, which only allows five characters.

12:48.000 --> 12:54.000
So it had to be named F L R K H to be a file on the 1130.

12:54.000 --> 13:00.000
Just kind of fun and has led to the idea of it being something that we go

13:00.000 --> 13:04.000
forth.

13:04.000 --> 13:10.000
So anyway, in 2011, I sent a message to him asking if he had any old code

13:10.000 --> 13:14.000
for the, to be 1130 and he said, yeah, I'll rummage around and,

13:14.000 --> 13:18.000
and he'll take a look and see what he has. And he found this.

13:18.000 --> 13:23.000
And he sent it to me, but I missed the message or something.

13:23.000 --> 13:27.000
Well, a few years later, I guess it was 2017 or so.

13:27.000 --> 13:33.000
Carl Clanch, who is a fellow IBM 1130 enthusiast,

13:33.000 --> 13:38.000
sent me a message that he had spoken with Chuck.

13:38.000 --> 13:43.000
And Chuck had said, I think I send it to the sky Flanders and

13:43.000 --> 13:47.000
he'd since gotten rid of the papers and so I rummaged around

13:47.000 --> 13:49.000
in my Gmail and I found it.

13:49.000 --> 13:55.000
And it turns out it's either a free version one or pretty close to

13:55.000 --> 14:02.000
version one copy of the code and the basic kernel,

14:02.000 --> 14:06.000
the, you know, the assemble level words and then the additional words on

14:06.000 --> 14:17.000
it, but, and I've had a tiny amount of contribution to helping Carl

14:17.000 --> 14:22.000
get it working on the IBM 1130 emulator.

14:22.000 --> 14:27.000
And Carl actually has a working IBM 1130.

14:27.000 --> 14:32.000
And he's, he's gotten it working.

14:33.000 --> 14:38.000
One critical word that we probably would all be completely lost without

14:38.000 --> 14:43.000
had it not had that wasn't there in this version, which was period.

14:43.000 --> 14:46.000
So he couldn't print out the top of the stack.

14:46.000 --> 14:51.000
I think that the top of the stack may have only been shown in the

14:51.000 --> 14:56.000
indicator on the, on the 1130 for the, for the accumulator.

14:56.000 --> 15:04.000
And it was a very interesting, a very interesting bit of work to, to

15:04.000 --> 15:06.000
put it together and get it running.

15:06.000 --> 15:11.000
There were, there were some typos or some not typos, but some, some hand

15:11.000 --> 15:15.000
written notes on the code and notice some things that needed to be

15:15.000 --> 15:20.000
adjusted a little bit, maybe also we made typos, putting it in.

15:20.000 --> 15:26.000
And there is, there's actually floating about out there a version one

15:26.000 --> 15:30.000
fourth of the IBM 1130.

15:30.000 --> 15:36.000
The way I became interested in fourth personally was I was hired by

15:36.000 --> 15:40.000
MCI telecommunications.

15:40.000 --> 15:43.000
Like 1986 or thereabouts.

15:43.000 --> 15:47.000
And I had no fourth experience, but a friend recommended me.

15:47.000 --> 15:50.000
And I came in and the guy said, well, listen, let's, let's give you a

15:50.000 --> 15:51.000
try.

15:51.000 --> 15:55.000
First thing I want you to do is write a word that shows a timestamp.

15:55.000 --> 15:57.000
So I fumbled around and wrote a timestamp.

15:57.000 --> 16:01.000
Then the next thing he said is I want you to implement drivers for a

16:01.000 --> 16:06.000
multi port serial card.

16:06.000 --> 16:09.000
And I wrote that and then he said, okay, you got the job.

16:09.000 --> 16:12.000
And I ended up working for eight years.

16:12.000 --> 16:16.000
And I ended up using LMI fourth under some DOS extender.

16:16.000 --> 16:20.000
To implement a system that ran on.

16:20.000 --> 16:23.000
At the end, I think it was nearly a thousand.

16:23.000 --> 16:25.000
What we're called site controllers.

16:25.000 --> 16:30.000
And they are put in their co located at the various MCI facilities and

16:30.000 --> 16:34.000
talk to digital cross connects and extended.

16:34.000 --> 16:36.000
Extender sup frame monitoring units.

16:36.000 --> 16:40.000
And it would send all the information back to a central computer,

16:40.000 --> 16:45.000
which would then use its interface support to do things like,

16:45.000 --> 16:48.000
you know, a customer call up, say, Hey, I need a,

16:48.000 --> 16:53.000
a circuit from Washington DC to Los Angeles.

16:53.000 --> 16:57.000
And they would go into the digital cross connects hook up the,

16:57.000 --> 16:59.000
hook up the T one, get it all running.

16:59.000 --> 17:03.000
And then, you know, go out and get it delivered to the customer.

17:04.000 --> 17:07.000
And they would have to get it delivered at the end points to whatever

17:07.000 --> 17:09.000
provisions were necessary.

17:09.000 --> 17:12.000
And it was very cool and interesting system.

17:12.000 --> 17:15.000
I haven't done much with fourth sense.

17:15.000 --> 17:18.000
But I'm always like, I'm always looking backwards.

17:18.000 --> 17:19.000
Oh, I want to do this.

17:19.000 --> 17:22.000
I want to work on, like, I'm writing 1130.

17:22.000 --> 17:24.000
Emulator.

17:24.000 --> 17:27.000
And things like that. So it's always an interest me to,

17:27.000 --> 17:30.000
to do things with older code.

17:30.000 --> 17:44.000
But I program and C-Shark and do a lot of sequel stuff on it.

17:44.000 --> 17:47.000
Anyway, pleasure to meet, sir. Thank you so much.

17:47.000 --> 17:55.000
Fourth is brilliant. It was brilliant. It is brilliant and shall continue to be better.

17:55.000 --> 18:00.000
I can add a little bit to the 1130 story.

18:00.000 --> 18:06.000
It isn't as if I was sitting in an office working with the 1130.

18:06.000 --> 18:15.000
The 1130 was on the abandoned production floor of a textile mill.

18:15.000 --> 18:22.000
It was a huge room about 200 feet long and 100 feet wide.

18:22.000 --> 18:29.000
And the exact center of it was this 1130, which had been delivered by IBM.

18:29.000 --> 18:32.000
And nobody knew what to do with it.

18:32.000 --> 18:35.000
Except me.

18:35.000 --> 18:39.000
And so that was the environment in which fourth was invented.

18:39.000 --> 18:44.000
It was challenging in many ways.

18:44.000 --> 18:49.000
Yeah, it was the 1130.

18:49.000 --> 18:54.000
If there hadn't been 1130 in my high school, this was about 1972.

18:54.000 --> 18:56.000
And I started using one.

18:56.000 --> 19:00.000
And at that time, I had no understanding of what I was doing.

19:00.000 --> 19:05.000
Then meant for the 1130, I probably would never have gotten into computing.

19:05.000 --> 19:09.000
But that started my career.

19:09.000 --> 19:11.000
First mini computer.

19:11.000 --> 19:18.000
Yeah, I call it my first personal computer.

19:18.000 --> 19:21.000
Hi Chuck.

19:21.000 --> 19:25.000
Hey.

19:25.000 --> 19:33.000
We've met a couple of times and many of us here will remember the

19:34.000 --> 19:43.000
1980 edition of Bites where you introduced the language to a much wider audience.

19:43.000 --> 19:51.000
But that was the time that you felt that the software had been done and you are now looking towards the hardware.

19:51.000 --> 20:01.000
Could you, could you tell us a bit about how you made that transition from software to hardware

20:01.000 --> 20:18.000
and you, you moved towards the, the Novix period of fourth history.

20:18.000 --> 20:28.000
Yes, I did feel the software had been perfected in the, in context of fourth.

20:28.000 --> 20:40.000
What I was doing at the time was putting off, putting forth on many different computers and interfacing it with many different devices.

20:40.000 --> 20:43.000
And this of course is very easy to do.

20:43.000 --> 20:50.000
That's why fourth exists.

20:50.000 --> 21:00.000
Now, the interfacing with many different devices got very frustrating because these devices were badly designed.

21:00.000 --> 21:07.000
The interface I had to go through was the czar baroque.

21:07.000 --> 21:11.000
And I got kind of tired of doing that.

21:11.000 --> 21:15.000
And I said, well, I could design a better interface.

21:15.000 --> 21:19.000
I can design a better computer.

21:19.000 --> 21:23.000
Now, people didn't do that at the time.

21:23.000 --> 21:30.000
This was the business of someone else.

21:30.000 --> 21:37.000
So it took really a leap of a leap of faith to abandon software for hardware.

21:37.000 --> 21:45.000
I actually didn't because I had to develop the software to design the hardware.

21:45.000 --> 21:56.000
Thereafter, my software efforts went in the hardware direction and simulators and layout tools.

21:56.000 --> 21:58.000
And it was very rewarding.

21:58.000 --> 22:02.000
My, my hardware worked.

22:02.000 --> 22:13.000
And it worked much better than anyone expected or even would admit.

22:13.000 --> 22:23.000
I'm still doing that in the sense of the greener rays, multi-processor chips.

22:23.000 --> 22:31.000
They are incredibly simple, incredibly effective, and totally unpopular.

22:31.000 --> 22:46.000
So forth hardware is just as unacceptable as for software.

22:46.000 --> 22:50.000
Yep. And that's, that's absolutely fine.

22:50.000 --> 22:57.000
Some people like forth, like everybody here would imagine other people don't understand.

22:57.000 --> 22:59.000
We've met a couple of times too.

22:59.000 --> 23:01.000
I'd just like to say, thank you.

23:01.000 --> 23:08.000
You've made my career in programming much more fun than it would ever have been otherwise.

23:08.000 --> 23:11.000
May the flowers and flowers bloom.

23:11.000 --> 23:13.000
Thank you.

23:13.000 --> 23:15.000
G'day Chuck.

23:15.000 --> 23:21.000
I've met you once back in 1988 back in the year when I had Australian symposium here.

23:21.000 --> 23:30.000
And, but, and I've been using forth since the early 80s, you know, I started the big project with that.

23:30.000 --> 23:32.000
And I've been using it ever since.

23:32.000 --> 23:37.000
And yes, you know, a lot of people won't admit that it works so well.

23:37.000 --> 23:38.000
You know, that's true.

23:38.000 --> 23:40.000
It was a hardware and software.

23:40.000 --> 23:42.000
And it also makes the hardware a lot simpler.

23:42.000 --> 23:45.000
We don't have to use any complicated hardware.

23:45.000 --> 23:51.000
And, you know, that was my original fourth board I did up, you know, with a Rockwell chips, et cetera.

23:51.000 --> 23:57.000
And then, you know, I ended to a module, you know, a little credit card size module, but this is mid 80s.

23:57.000 --> 24:00.000
And, and that was okay for the mid 80s.

24:00.000 --> 24:06.000
And now I use the PT multi core processor with 64 smart pins, et cetera.

24:06.000 --> 24:11.000
And, and so, and I, so you do a lot of better control.

24:12.000 --> 24:18.000
This is, this is a question I really wanted to, wanted to ask you, you just mentioned the greener rates.

24:18.000 --> 24:20.000
It's got all these processes on there.

24:20.000 --> 24:23.000
I've got the, the propeller parallax propeller processor.

24:23.000 --> 24:25.000
We've got eight cogs or light cores.

24:25.000 --> 24:33.000
It has hub ram, so it shares everything and every, every one of those cores can access all the IO equally.

24:33.000 --> 24:38.000
But when I look at the greener rays, I can't figure out how I can use it.

24:38.000 --> 24:46.000
When you're saying it's an effective processor, what has it proved to be effective in, you know, really?

24:46.000 --> 24:55.000
How can I use it for general embedded control and smart stuff?

24:55.000 --> 24:58.000
That's a good question.

24:58.000 --> 25:02.000
It has 144 computers.

25:03.000 --> 25:09.000
Exactly cores. They're independent computers.

25:09.000 --> 25:12.000
They communicate with one another.

25:12.000 --> 25:16.000
And the ones around the edge communicate with pins.

25:16.000 --> 25:24.000
So if you want to control a pin, you have to use the computer, which is attached to it.

25:24.000 --> 25:32.000
The computer pretty much can't do anything except run that pin and communicate with its neighbors.

25:32.000 --> 25:52.000
So you end up building a little network of computers, not 144, but maybe half a dozen that all cooperate and communicate in running the protocol on that pin.

25:53.000 --> 25:55.000
It's a fun thing to do.

25:55.000 --> 26:01.000
It's totally different than any other computer where you would just run a serial processor.

26:01.000 --> 26:10.000
Your, your whole attention is in coordinating the efforts of as many independent computers as you want.

26:10.000 --> 26:21.000
I don't think I've done an application with more than about a few dozen computers.

26:21.000 --> 26:31.000
So Chuck, so in talking about applications, what, what do you, what, if you had to showcase an application, say, look, you know, look how well it does this.

26:31.000 --> 26:44.000
And, and I'm, I'm bearing in mind too that what you said already, there's a bit of work setting it all up for those cores to communicate with one another or, you know, those little secret years to communicate with one another.

26:44.000 --> 26:46.000
I'm familiar with the whole architecture.

26:46.000 --> 26:57.000
But what would you say, which, you know, you could hold off an application and say, man, you know, this doesn't so well.

26:57.000 --> 27:08.000
Well, one of his applications through and forth to, you can use some of the, some of the computers to drive a display.

27:09.000 --> 27:13.000
You can use some of the computers to read a keyboard.

27:13.000 --> 27:19.000
And you can put them together to run forth.

27:19.000 --> 27:25.000
I haven't done that. I've never got around to doing that, although I got close.

27:25.000 --> 27:29.000
We've got

27:29.000 --> 27:34.000
each computer has 64 words of realm.

27:34.000 --> 27:42.000
And one of the computers interfaces with a flash memory.

27:42.000 --> 27:49.000
So there's infinite, infinite amounts of data available.

27:49.000 --> 27:55.000
Another set of three computers can commute with communicate with DRAM.

27:55.000 --> 28:00.000
So what you want to do is set up a system whereby

28:00.000 --> 28:11.000
you store it in flash, you store it in DRAM, and you read it back from DRAM and do whatever you want to do.

28:11.000 --> 28:19.000
So, so with, with, you know, so, you know, I'm wondering why you haven't done a PC with it yet. Come on, you know, you can do it.

28:19.000 --> 28:27.000
But the thing is, okay, so I use chips, you know, so that one's got 512k of RAM.

28:27.000 --> 28:30.000
And plus all the 4k around on each CPU, etc.

28:30.000 --> 28:33.000
And so it's really easy to make it work.

28:33.000 --> 28:39.000
And if, and I talk to an IO and I can even instruct the IO to do something by itself.

28:39.000 --> 28:42.000
It's a smart IO. It has everything built into it.

28:42.000 --> 28:46.000
I, you know, I keep racking my brains looking at the green arrays.

28:46.000 --> 28:51.000
And I can't think, you know, like, even if I could get it to do something, it'll be a lot of work.

28:51.000 --> 28:54.000
You know, it'll be fun, but it'll be a lot of work to do it.

28:54.000 --> 29:08.000
And you mentioned memory displays, for instance, well, there were a lot of more effective ways of doing displays, but I can do a VGA or even a HD display from the RAM on this one.

29:08.000 --> 29:13.000
But I have to add a bolt on all that RAM onto the green arrays.

29:13.000 --> 29:23.000
You know, I'd really love to see a green arrays one that was had less CPUs, had a bit more memory on each one and more access to the IO.

29:23.000 --> 29:30.000
And it was like, that would be really great, you know, 64 CPUs, we get about 144.

29:30.000 --> 29:35.000
Give me 64 and, you know, as you said, you don't need to use many.

29:35.000 --> 29:43.000
We'd love to do that. We've had plans for doing that, but we've never been able to make such a chip.

29:43.000 --> 29:45.000
Right.

29:46.000 --> 29:53.000
We'd have to integrate someone else's memory onto our chip, but that isn't easy to do.

29:53.000 --> 30:01.000
Yeah, well, you know, I appreciate it. I just wanted to ask you that question because it's like, it's the one thing that bugs me.

30:01.000 --> 30:07.000
It's like these fourth chips right going right from the early days, Novix and all that, and they're all really great.

30:07.000 --> 30:16.000
And, and then, you know, like, I've got 21, I've got the, the, the Shubhams and everything like that, but I can't figure out how to use the green arrays.

30:16.000 --> 30:19.000
So I really love to see some application.

30:19.000 --> 30:27.000
I'll even forget about application notes, but just by showcase something to showcase that particular chip power was used really well.

30:27.000 --> 30:36.000
Well, the biggest advantage of the 144 is it doesn't use any energy.

30:36.000 --> 30:41.000
Somebody put a lot of energy in to make it work though. That's the trouble.

30:41.000 --> 30:42.000
Yeah.

30:42.000 --> 30:46.000
Yeah. Well, thanks, Chuck. Yeah. No, appreciate it. Well, very much all your work.

30:46.000 --> 31:01.000
We, you know, when we, we, we love for the other question, can I, I just wanted to ask you nothing to do with technical things, but we often talk about how, how is it that we can really promote forth?

31:01.000 --> 31:11.000
You know, it's just that mindset, you know, you've, you've had way more experience with encountering the opposition and with, with, with people accepting forth.

31:11.000 --> 31:18.000
And it's like, well, this before I had forth built into the chip and silicon on this particular P2 chip.

31:18.000 --> 31:23.000
And that was a hard task to get that done at the time.

31:24.000 --> 31:30.000
But forth is a dirty word, you know, people just don't like companies don't like mentioning it.

31:30.000 --> 31:38.000
Do you see anything that would help break down that barrier?

31:38.000 --> 31:40.000
A killer app.

31:40.000 --> 31:45.000
We've been looking for a killer app for 50 years and haven't found one.

31:45.000 --> 31:55.000
Well, after PC's, you know, I think, I think most of the fourth use, you know, I've always used forth on micros embedded.

31:55.000 --> 32:05.000
And so it's built into airports and roadways and all kinds of vending machines, anything, you know.

32:05.000 --> 32:07.000
And so they're all out there.

32:07.000 --> 32:10.000
People just don't see it, but it keeps going 24 seven.

32:10.000 --> 32:15.000
And it's also my prototype language that I use.

32:15.000 --> 32:20.000
You probably want to prototype this, you know, people are used to using breadboards or forth.

32:20.000 --> 32:22.000
You can move stuff around like that.

32:22.000 --> 32:24.000
You can fritz all you like with forth.

32:24.000 --> 32:26.000
And it's very quick.

32:26.000 --> 32:35.000
So, you know, I have a project now where they are saying, hey, you know, do it with Arduino, you know, see and everything else like this.

32:35.000 --> 32:40.000
And I'm thinking they can ask me, but I'm still doing it my way because, you know, I can get it done.

32:40.000 --> 32:43.000
But yeah, but it's just that opposition to it.

32:43.000 --> 32:53.000
And I don't know if there's anything we often talk about it on our group and forth 2020, how we can get young people interested.

32:53.000 --> 32:54.000
It's not going to be a killer app.

32:54.000 --> 32:56.000
I think it's going to be the easy use.

32:56.000 --> 33:03.000
How they're using it make it's how to how to make use force, you know, can use forth easily straight away.

33:04.000 --> 33:05.000
They say.

33:05.000 --> 33:08.000
I have a question for Chuck.

33:08.000 --> 33:19.000
And Chuck, was the sun force in bios or open force open.

33:19.000 --> 33:22.000
How was the name open OS.

33:22.000 --> 33:24.000
Open boot.

33:25.000 --> 33:28.000
Yes, exactly open boot.

33:28.000 --> 33:43.000
Was this not the fourth killer app because this was installed in so many computers, and also on the one laptop per child I know this was a really big, a really big installation of force.

33:43.000 --> 33:58.000
Yes, that's true, but bios is such a obscure application that didn't attract any, any, any, any attention.

33:58.000 --> 34:01.000
It was a technical triumph.

34:01.000 --> 34:12.000
The attention that open boot attracted was attempts to replace it with conventional software.

34:12.000 --> 34:28.000
That didn't work. Fourth didn't work to because there was not an industry behind it.

34:28.000 --> 34:30.000
That's always been a problem.

34:30.000 --> 34:36.000
We lack large scale support.

34:36.000 --> 34:46.000
Yeah, Intel came along and killed open firmware open, not open boot open firmware.

34:46.000 --> 34:52.000
And yeah, Intel was responsible for UEFI.

34:52.000 --> 34:57.000
And that killed open firmware.

34:57.000 --> 35:05.000
But fourth really doesn't need corporate support to prosper.

35:05.000 --> 35:12.000
It's an individual thing rather than a collective.

35:12.000 --> 35:24.000
As you did check with your been raised talk on, you did a discussion of that video, how you got the 144 trips to drive the video.

35:24.000 --> 35:33.000
I was very impressed that you don't have generic video hardware driving the video in your demonstration.

35:33.000 --> 35:37.000
You just chips, each programming, the timing.

35:37.000 --> 35:49.000
And that was significant of how you got the greener a chip to do video that wouldn't be normally required.

35:49.000 --> 35:57.000
Just to produce an output for people to see in applications, which don't really need consoles.

35:57.000 --> 36:10.000
When you manipulate in data, you work the data and you produce the storage of the of the output for the for later display for people to see.

36:10.000 --> 36:20.000
And so the video display was just just a really fantastic ability that the trip array could actually program and the speed.

36:20.000 --> 36:31.000
Absolutely significant was the power savings that your trip said that nobody else could do.

36:31.000 --> 36:35.000
And it was a lot of fun program that DGA.

36:35.000 --> 36:41.000
And it was, it wasn't easy timing was a big problem.

36:41.000 --> 36:48.000
And it was just fun.

36:48.000 --> 36:51.000
I would say so too.

36:51.000 --> 37:06.000
It's quite unique that you've got this hardware, and you're interfacing the greener rays into that hardware. So there's another incredible example of what the greener rays trip set can do.

37:06.000 --> 37:12.000
Anything. It's got it's got the speed.

37:12.000 --> 37:25.000
And this is with a obsolete geometry, 180 nanometers. This is this is abandoned.

37:25.000 --> 37:34.000
Competitive with with the 10 nanometer geometries.

37:34.000 --> 37:50.000
Quite the greener rays chip set to be a risk processor where everybody's going to system processes with multi with multi instructions.

37:50.000 --> 37:54.000
What you can do on a risk processor like the greener rays.

37:54.000 --> 37:56.000
It's so much quicker.

37:56.000 --> 38:01.000
It may need a little bit of effort to do the stuff that needs to be done.

38:01.000 --> 38:12.000
But clearly, the number of instructions to do the work supersedes the performance that any of the standard processes can work with.

38:12.000 --> 38:21.000
And at the cost of power, which was so much cheaper on.

38:21.000 --> 38:28.000
I've got to jump in here a little bit about programming these machines Chuck's machines.

38:28.000 --> 38:42.000
I was one of the first Novix programmers, and one of the early greener rays series of processors.

38:42.000 --> 38:56.000
Jeff Fox and I, at the beginning, we're doing our darndest to pack as much code as we could into those 64 words of Ram.

38:56.000 --> 39:06.000
Over years, now we found that the smaller amount of code the smallest amount that you can put into a node.

39:06.000 --> 39:15.000
You can use the least power, because each node is cooperating sending messages between them.

39:15.000 --> 39:22.000
And when it isn't running, it isn't. It's only got leakage power going.

39:23.000 --> 39:34.000
Look at for the earlier speaker about getting into a greener rays programming mind mode.

39:34.000 --> 39:42.000
Look at the examples that are on the greener rays website.

39:42.000 --> 39:45.000
You'll get a lot of that.

39:45.000 --> 39:59.000
One of the things that I did sort of as a skunk works program with a good friend of mine, Bill Minch, who was also an early programmer for the.

39:59.000 --> 40:12.000
I think it was the 24 processor chip was to implement a virtual machine to execute a fourth.

40:12.000 --> 40:23.000
We put bills, Bill was the originator of E fourth and Ting is taking it taken off with it in assembly language, we did it all in high level.

40:23.000 --> 40:38.000
And we built a virtual machine using, I think it was three or four of the nodes to execute E fourth op codes eight bit op codes directly.

40:39.000 --> 40:42.000
That has facilitated actually.

40:42.000 --> 40:56.000
It's been moved and Greg Bailey's version of poly forth for thanks code is now running virtually on the novice on the greener rays chip.

40:56.000 --> 41:05.000
And all the development that's happening currently is being done in standard fourth.

41:05.000 --> 41:11.000
You do not need to know the details, just like every other processor.

41:11.000 --> 41:21.000
So, take a look at those application write ups on the greener rays website.

41:21.000 --> 41:38.000
For example, if I may 10 words of code forms and ethernet Manchester decoder and receiver converting the weekly signals on the twisted pairs into bits going to the next node.

41:38.000 --> 41:41.000
Wow.

41:41.000 --> 41:52.000
I listened to all this and I think, wow, this is their stuff you guys are doing are incredible little chunks right. And then there's a question.

41:52.000 --> 42:01.000
I could something like forth and take how do we take forth to the next level, how do we get it to, you know, push it into the future.

42:01.000 --> 42:18.000
I'll tell you something, you know, I watch this one guy on YouTube his name is Jeff yearly, and he's trying to deal with taking a video card and getting it to run in a PCI E single lane.

42:19.000 --> 42:25.000
Some of the new Raspberry Pi compute boards.

42:25.000 --> 42:44.000
If, if you could do something like build a fourth driven video card with an open interface that could be, you know, could be added to the drivers and such could be added to that would have some kind of a standard interface.

42:44.000 --> 42:55.000
And that's like, you know, we'll work with open GL or, I don't know what the current, the modern of the current video standards are.

42:55.000 --> 43:16.000
If you could build something like that, that would then sit in like a PCI E one, one lane PCI East one is sell a billion of these because they repeat the very, the CM for Raspberry Pi CM forced things are taking are becoming incredibly popular

43:17.000 --> 43:36.000
small on like, you know, systems with all with a bunch of slots and stuff like that for multiple safety news, and then having a, you know, a PCI E card or something like that sitting in there to show have a video.

43:36.000 --> 43:39.000
It seems like busy building.

43:39.000 --> 43:48.000
The track is busy building a thing called HD fourth from his last this from his last discussion.

43:48.000 --> 44:06.000
And that seems so significant what he's working with on an HDMI interface. I'll be interesting to see further development that he's working on on his HD fourth.

44:06.000 --> 44:18.000
HD fourth has evolved into what I call you HD fourth, you even better for the 4k display.

44:18.000 --> 44:20.000
Wow.

44:20.000 --> 44:28.000
It's running on a PC.

44:28.000 --> 44:33.000
The x86

44:33.000 --> 44:39.000
It's unique characteristic is that

44:39.000 --> 44:45.000
a lot of the code is an assembler. Well, is in machine language.

44:45.000 --> 44:47.000
And there's no assembler.

44:47.000 --> 44:55.000
There are hex op codes for the x86 instructions.

44:55.000 --> 45:01.000
I had to memorize those up codes.

45:01.000 --> 45:09.000
But it was as easy to memorize the up codes as it was to memorize the assembly code.

45:09.000 --> 45:14.000
And it gives you beautiful versatility and efficiency.

45:14.000 --> 45:20.000
Completely unportable.

45:20.000 --> 45:26.000
That's what I use. I call it color fourth, but that's that's versions I'm using now.

45:26.000 --> 45:29.000
And it is

45:29.000 --> 45:41.000
the nicest fourth I've ever had, because it gives me the closest interface with the hardware.

45:41.000 --> 45:46.000
On the other hand, in the old days.

45:46.000 --> 45:50.000
You wanted to interface to a chip.

45:50.000 --> 45:52.000
Or a board.

45:52.000 --> 45:56.000
That chip or board was documented.

45:56.000 --> 46:01.000
And you could really download the spec sheet and

46:01.000 --> 46:04.000
and work with it.

46:04.000 --> 46:07.000
Nowadays there's no documentation.

46:07.000 --> 46:11.000
The best I have found is in windows.

46:11.000 --> 46:15.000
But windows is incredibly complex.

46:15.000 --> 46:18.000
It's incredibly obscure.

46:18.000 --> 46:21.000
Badly designed.

46:21.000 --> 46:26.000
Almost impossible to work with. And I work with it when I must.

46:26.000 --> 46:33.000
But it has turned me off trying to interface with the larger world.

46:33.000 --> 46:42.000
As I said before, I've never been able to figure out how to get on the internet.

46:43.000 --> 46:48.000
And I'm afraid it's changed in such a way as to disadvantage us.

46:48.000 --> 46:50.000
The

46:50.000 --> 46:53.000
calls hackers.

46:53.000 --> 46:57.000
You're supposed to sign on

46:57.000 --> 47:02.000
to the corporate vision of computers.

47:02.000 --> 47:05.000
And if you don't or can't do that.

47:05.000 --> 47:11.000
You're being left behind.

47:12.000 --> 47:15.000
Perhaps some of you know.

47:15.000 --> 47:18.000
Werner Vinge's

47:18.000 --> 47:21.000
science fiction novels.

47:21.000 --> 47:25.000
He has one cold.

47:25.000 --> 47:29.000
Oh, fire in the sky, something like that.

47:29.000 --> 47:33.000
In which

47:33.000 --> 47:36.000
the problem of

47:36.000 --> 47:38.000
buggy

47:38.000 --> 47:43.000
software was mentioned.

47:43.000 --> 47:49.000
The spaceships of that era were programmed in some obscure language.

47:49.000 --> 47:54.000
But nobody could really master.

47:54.000 --> 47:59.000
And it was determined that you should improve rewrite the software.

47:59.000 --> 48:04.000
So that that was simple, clean, bug free.

48:05.000 --> 48:09.000
And entire planets.

48:09.000 --> 48:12.000
Attempted to do so.

48:12.000 --> 48:18.000
They could not reproduce all of the obscure bugs in the existing software.

48:18.000 --> 48:23.000
So it was not useful on existing spaceships.

48:23.000 --> 48:27.000
And the whole project led to

48:27.000 --> 48:33.000
enormous costs, effort and failure.

48:33.000 --> 48:38.000
That would equate in today's view with trying to reprogram windows, say,

48:38.000 --> 48:41.000
or Linux.

48:41.000 --> 48:44.000
In fourth.

48:44.000 --> 48:48.000
It probably can't be done.

48:48.000 --> 48:51.000
It certainly is not.

48:51.000 --> 48:53.000
Sound like much fun.

48:53.000 --> 48:57.000
Because you have to reproduce the bugs.

48:57.000 --> 49:00.000
He wants to reduce banks.

49:00.000 --> 49:07.000
He wants to get the bags out.

49:07.000 --> 49:11.000
What you really need is just an IP stack.

49:11.000 --> 49:14.000
Internet or Wi-Fi interface.

49:14.000 --> 49:20.000
And once you have those, you're pretty much good to go.

49:20.000 --> 49:22.000
Sorry.

49:22.000 --> 49:28.000
The hard part is the Wi-Fi interface into proprietary firmware though.

49:29.000 --> 49:34.000
That's why I went to the 144.

49:34.000 --> 49:39.000
Rather than try to interface with the existing world.

49:39.000 --> 49:41.000
I wanted to try something different.

49:41.000 --> 49:43.000
Something standalone.

49:43.000 --> 49:46.000
144.

49:46.000 --> 49:51.000
Could drive a GPU.

49:51.000 --> 49:55.000
I don't know how to do that.

49:55.000 --> 49:59.000
I don't even know how to find out how to do that.

49:59.000 --> 50:01.000
If it could be done.

50:01.000 --> 50:04.000
If it can be done, of course.

50:04.000 --> 50:10.000
But whether you can figure out how is a completely different question.

50:10.000 --> 50:12.000
And I've given up on that.

50:12.000 --> 50:14.000
Chuck, here's a challenge.

50:14.000 --> 50:18.000
If you were to develop the 144 to do bitcoining.

50:18.000 --> 50:21.000
Everybody will stop using the GPU.

50:21.000 --> 50:23.000
Processes.

50:23.000 --> 50:26.000
The sales of the 144 would go.

50:26.000 --> 50:28.000
Through the roof.

50:28.000 --> 50:31.000
You'd be making money over money because the, the people ask,

50:31.000 --> 50:33.000
they wouldn't realize just how fast these.

50:33.000 --> 50:39.000
The 144s could process the hash tables.

50:39.000 --> 50:41.000
Quite right.

50:41.000 --> 50:44.000
But.

50:44.000 --> 50:46.000
Among other things that takes money.

50:46.000 --> 50:51.000
To develop such an application.

50:51.000 --> 50:54.000
I don't have any money.

50:54.000 --> 50:57.000
I have a, I have an open question for you, Chuck.

50:57.000 --> 51:01.000
If I may, first of all, let me say that I'm feel very honored to,

51:01.000 --> 51:03.000
to speak to you today.

51:03.000 --> 51:08.000
I mean, fourth for me was a fantastic concept since the 80s when I

51:08.000 --> 51:09.000
was a student.

51:09.000 --> 51:12.000
So definitely it's a wonderful experience to speak to you.

51:12.000 --> 51:16.000
Now for the question is related to IOT.

51:16.000 --> 51:19.000
Since fourth is by design, very,

51:19.000 --> 51:24.000
very efficient in terms of power consumption in terms of

51:24.000 --> 51:26.000
processing efficiency.

51:26.000 --> 51:31.000
I'm surprised that are you fourth is not more commonly used for

51:31.000 --> 51:34.000
all developments based on IOTs where of course energy consumption

51:34.000 --> 51:38.000
and responsiveness and real time aspects absolutely critical.

51:38.000 --> 51:40.000
What do you think about this?

51:40.000 --> 51:46.000
I think that's an absolutely wonderful application area.

51:46.000 --> 51:48.000
And.

51:48.000 --> 51:51.000
Greener raises.

51:51.000 --> 51:55.000
Projects which are trying to address that.

51:55.000 --> 51:58.000
The fact we use very little energy.

51:58.000 --> 52:01.000
It's a no brainer.

52:01.000 --> 52:04.000
But.

52:04.000 --> 52:09.000
We haven't found the killer app.

52:09.000 --> 52:14.000
Well, next week I have to go and explain to a professor.

52:14.000 --> 52:17.000
At University of Wyoming.

52:17.000 --> 52:22.000
Why the fact that we don't run standard high level languages.

52:22.000 --> 52:26.000
In a pair of streaming glasses.

52:26.000 --> 52:29.000
Is not a killer of our technology.

52:29.000 --> 52:31.000
The point is.

52:31.000 --> 52:35.000
The reason why people don't use our chips is that we don't have

52:35.000 --> 52:39.000
these giant fat libraries of crappy code,

52:39.000 --> 52:41.000
which they can glue together,

52:41.000 --> 52:43.000
which is all they know how to do.

52:43.000 --> 52:44.000
They don't know how to write code.

52:44.000 --> 52:45.000
They don't know how to program.

52:45.000 --> 52:48.000
And the story.

52:48.000 --> 52:49.000
No, that's the first.

52:49.000 --> 52:51.000
I've got a question for Chuck.

52:51.000 --> 52:54.000
I may.

52:54.000 --> 52:59.000
Yeah, please go ahead, Ken.

52:59.000 --> 53:03.000
It's a historical question, Chuck.

53:03.000 --> 53:07.000
When you made the transition from.

53:07.000 --> 53:10.000
Software to hardware.

53:10.000 --> 53:13.000
In the very early 1980s.

53:13.000 --> 53:15.000
Did you.

53:15.000 --> 53:20.000
Prototype any of the early fourth hardware.

53:20.000 --> 53:26.000
Using, I guess, TTL at that time.

53:26.000 --> 53:31.000
Before you, before you move to the, the, the gate array of the,

53:31.000 --> 53:33.000
of the Novics.

53:33.000 --> 53:37.000
Did you prototype any of that stuff?

53:37.000 --> 53:41.000
Thanks.

53:41.000 --> 53:47.000
Yes, I, I did.

53:47.000 --> 53:50.000
I did build a prototype.

53:50.000 --> 53:52.000
Of a fourth computer.

53:52.000 --> 53:58.000
And then I moved to simulating the data array.

53:58.000 --> 54:03.000
As a more.

54:03.000 --> 54:08.000
Helpful.

54:08.000 --> 54:09.000
Designed.

54:09.000 --> 54:10.000
As a more.

54:10.000 --> 54:11.000
As a more.

54:11.000 --> 54:14.000
Helpful.

54:14.000 --> 54:16.000
As a more.

54:16.000 --> 54:21.000
Helpful.

54:21.000 --> 54:23.000
Design tool.

54:23.000 --> 54:25.000
In fourth.

54:25.000 --> 54:28.000
So the fourth.

54:28.000 --> 54:30.000
Fourth hardware prototype.

54:30.000 --> 54:31.000
Didn't really.

54:31.000 --> 54:34.000
Wasn't really helpful. Didn't go anywhere.

54:34.000 --> 54:38.000
It only helped to convince some other people to support the.

54:38.000 --> 54:45.000
Data array.

54:45.000 --> 54:48.000
Okay, thanks. That's, that's quite fascinating.

54:48.000 --> 54:52.000
So I guess you were on the transition between.

54:52.000 --> 54:55.000
Building prototypes and hardware.

54:55.000 --> 54:58.000
To simulating them.

54:58.000 --> 55:02.000
By 1981, 82, I guess we had.

55:02.000 --> 55:05.000
16 bit PCs and.

55:05.000 --> 55:11.000
Simulation became a reality. Yeah.

55:11.000 --> 55:14.000
I see Jared.

55:14.000 --> 55:20.000
Yeah. Hello, everybody.

55:20.000 --> 55:26.000
You're muted. Now you are muted.

55:26.000 --> 55:35.000
I just had a couple of words and then your mic went off.

55:35.000 --> 55:37.000
No, no, no, no, no sound.

55:37.000 --> 55:39.000
We can't hear you.

55:39.000 --> 55:41.000
It just broke.

55:41.000 --> 55:46.000
Yeah.

55:46.000 --> 55:53.000
Now comes the mic.

55:53.000 --> 55:56.000
Can you hear me? Yeah, yeah.

55:56.000 --> 55:58.000
That's good.

55:58.000 --> 56:03.000
No, no, no, no, no, no, no, no, no, no.

56:03.000 --> 56:08.000
That's strange. It was just a, again, just a word.

56:08.000 --> 56:11.000
Maybe we'll log off and log back in.

56:11.000 --> 56:13.000
Of the zoom.

56:13.000 --> 56:14.000
Like drop.

56:14.000 --> 56:18.000
If you're having problems with the audio, sometimes that fixes it.

56:18.000 --> 56:21.000
You might get a message or reinstall.

56:21.000 --> 56:23.000
Yeah.

56:23.000 --> 56:28.000
Like it happened to me reinstall windows.

56:28.000 --> 56:29.000
Dropout.

56:29.000 --> 56:31.000
I want to.

56:31.000 --> 56:33.000
I put on the chat.

56:33.000 --> 56:36.000
Something that Chuck will.

56:36.000 --> 56:39.000
Love to see.

56:39.000 --> 56:42.000
I will put this on the chat.

56:42.000 --> 56:45.000
Probably you have seen some of you.

56:45.000 --> 56:49.000
I am watching, I started watching yesterday on Netflix.

56:49.000 --> 56:55.000
The billion dollar code battle of over Google Earth and a German

56:55.000 --> 56:57.000
company called television.

56:57.000 --> 57:00.000
It's absolute amazing.

57:00.000 --> 57:02.000
The fantastic film.

57:02.000 --> 57:05.000
And this has to do.

57:05.000 --> 57:07.000
With this killer up.

57:07.000 --> 57:10.000
We were speaking before.

57:10.000 --> 57:15.000
This is very, this is very interesting to watch.

57:15.000 --> 57:17.000
Thank you.

57:17.000 --> 57:20.000
Okay.

57:20.000 --> 57:23.000
I've got a question for Chuck.

57:23.000 --> 57:29.000
Um, yeah, I just, I'm just curious about the changes in fourth from

57:29.000 --> 57:33.000
the sort of the classic fourth.

57:33.000 --> 57:38.000
From the early 80s through to California and some of your

57:38.000 --> 57:41.000
observations and reasons for.

57:41.000 --> 57:43.000
The kinds of design.

57:43.000 --> 57:47.000
The way forth has gone from.

57:47.000 --> 57:51.000
From the classic fourth to the fourth you're using now.

57:51.000 --> 57:56.000
What was some of the reasons that drove some of those design

57:56.000 --> 58:02.000
decisions in the more recent versions that you're using now.

58:03.000 --> 58:05.000
Wow.

58:05.000 --> 58:10.000
Fourth was originally an interpreter.

58:10.000 --> 58:17.000
And I had to learn how to make it into a compiler.

58:17.000 --> 58:24.000
And that was largely a question of confidence.

58:24.000 --> 58:27.000
The.

58:27.000 --> 58:31.000
The first thing that I used was a bell go.

58:31.000 --> 58:35.000
Developed at Stanford.

58:35.000 --> 58:40.000
And I was a graduate student at Stanford.

58:40.000 --> 58:43.000
And there's this team of half a dozen people.

58:43.000 --> 58:47.000
Who wrote a bell go compiler.

58:47.000 --> 58:52.000
And I said, well, if they can do it, I can do it.

58:52.000 --> 58:56.000
And so I wrote a standalone fourth.

58:57.000 --> 59:00.000
That was the first one.

59:00.000 --> 59:05.000
The criteria was to make it simple because I couldn't do

59:05.000 --> 59:08.000
anything complicated.

59:08.000 --> 59:15.000
And I think all of my later developments of fourth implementations.

59:15.000 --> 59:20.000
Were to try to make it simpler.

59:20.000 --> 59:25.000
Originally fourth had a threaded dictionary.

59:25.000 --> 59:29.000
And that hung on for a long time.

59:29.000 --> 59:33.000
Perhaps until you HD fourth.

59:33.000 --> 59:36.000
Now I don't have a threaded dictionary.

59:36.000 --> 59:39.000
I have dictionary broken into pieces.

59:39.000 --> 59:40.000
Each piece.

59:40.000 --> 59:42.000
There's the.

59:42.000 --> 59:44.000
Each array.

59:44.000 --> 59:46.000
One array contains the words.

59:46.000 --> 59:48.000
Another array contains parameters.

59:48.000 --> 59:53.000
Another array contains the code address.

59:53.000 --> 59:56.000
This, this lets me search.

59:56.000 --> 59:59.000
The name array.

59:59.000 --> 01:00:03.000
With this hardware instruction.

01:00:03.000 --> 01:00:05.000
On.

01:00:05.000 --> 01:00:09.000
But really nothing has changed.

01:00:09.000 --> 01:00:13.000
I'm amazed that the original.

01:00:13.000 --> 01:00:16.000
Concept structure of fourth.

01:00:16.000 --> 01:00:19.000
With this dictionary and stack.

01:00:19.000 --> 01:00:29.000
It has remained for 50 years without significant alteration.

01:00:29.000 --> 01:00:34.000
At the moment, I don't know how to make it any simpler.

01:00:34.000 --> 01:00:37.000
And of course, the hardware has changed.

01:00:37.000 --> 01:00:40.000
It was originally memory constrained and now it's not.

01:00:40.000 --> 01:00:42.000
Infinite amounts of memory.

01:00:42.000 --> 01:00:45.000
Fourth doesn't know how to use infinite amounts of memory.

01:00:45.000 --> 01:00:47.000
It's just not necessary.

01:00:47.000 --> 01:00:49.000
So.

01:00:49.000 --> 01:00:53.000
I don't know where to go from here.

01:00:53.000 --> 01:00:58.000
I have a question which is not about technology only.

01:00:58.000 --> 01:01:03.000
I mean, and as Christian said, I mean, you are free mind, right?

01:01:03.000 --> 01:01:05.000
What, what is the topic?

01:01:05.000 --> 01:01:08.000
I mean, considering the news, considering the way the world is going at the

01:01:08.000 --> 01:01:12.000
moment, what is the topic that makes you passionate about at the moment.

01:01:12.000 --> 01:01:15.000
What is the topic that makes you passionate about technology?

01:01:15.000 --> 01:01:18.000
What is the topic that makes you passionate about technology?

01:01:18.000 --> 01:01:22.000
The fourth could be AI or could be something not about technology.

01:01:22.000 --> 01:01:25.000
AI goes back to my early days at the.

01:01:25.000 --> 01:01:28.000
What they call them.

01:01:28.000 --> 01:01:34.000
The early neural nets.

01:01:34.000 --> 01:01:39.000
I am of two minds.

01:01:39.000 --> 01:01:44.000
You can see this played out in the full drug, full self driving cars.

01:01:44.000 --> 01:01:48.000
Do you use artificial intelligence or do you use pre-programmed decision

01:01:48.000 --> 01:01:52.000
making?

01:01:52.000 --> 01:01:54.000
I'm.

01:01:54.000 --> 01:01:56.000
A pre-programmed decision maker.

01:01:56.000 --> 01:01:59.000
So I.

01:01:59.000 --> 01:02:02.000
That that's the way I do things.

01:02:02.000 --> 01:02:04.000
If AI becomes.

01:02:04.000 --> 01:02:06.000
Magic.

01:02:06.000 --> 01:02:12.000
As it has in the case of go and chess.

01:02:12.000 --> 01:02:16.000
I'll be disturbed because.

01:02:16.000 --> 01:02:19.000
We can't understand how it does it.

01:02:19.000 --> 01:02:24.000
If we get AI in the form of a mobile robot or a.

01:02:24.000 --> 01:02:28.000
Mainframe in the cloud.

01:02:28.000 --> 01:02:33.000
I don't know how it works.

01:02:33.000 --> 01:02:36.000
I don't know that we've accomplished anything.

01:02:36.000 --> 01:02:39.000
You've got the oracles of ancient Greece.

01:02:39.000 --> 01:02:42.000
Who could answer your questions?

01:02:42.000 --> 01:02:51.000
How is that different if an AI is answering your questions?

01:02:51.000 --> 01:02:54.000
But I don't know what side to come down on.

01:02:54.000 --> 01:02:59.000
I think I will stick with my deterministic clock.

01:02:59.000 --> 01:03:05.000
And perhaps try to get precision time protocol and something like that.

01:03:05.000 --> 01:03:08.000
Yeah.

01:03:08.000 --> 01:03:10.000
Chuck.

01:03:10.000 --> 01:03:11.000
This is Don.

01:03:11.000 --> 01:03:15.000
You know, we're working on this FPGA base fourth.

01:03:15.000 --> 01:03:19.000
And I'm very curious about your comments on the dictionary because we haven't

01:03:19.000 --> 01:03:21.000
implemented the.

01:03:21.000 --> 01:03:26.000
The outer interpreter in the dictionary quite yet, you know, the compiler part.

01:03:26.000 --> 01:03:30.000
You said that you have three arrays.

01:03:30.000 --> 01:03:32.000
You, you have the CFA's.

01:03:32.000 --> 01:03:37.000
You have the strings, the word, the word strings, the name of the words.

01:03:37.000 --> 01:03:40.000
And then you have the data.

01:03:40.000 --> 01:03:47.000
What is, what's the data?

01:03:47.000 --> 01:03:51.000
The data is usually on the stack, right? So.

01:03:51.000 --> 01:03:56.000
In the case of a constant, it would be the value of the constant.

01:03:56.000 --> 01:04:02.000
Oh, okay. So, so, so that's, yeah, it's in a constant array.

01:04:02.000 --> 01:04:07.000
Well, it's an array. You can put anything in it you want the address of a variable,

01:04:07.000 --> 01:04:10.000
the value of a constant.

01:04:10.000 --> 01:04:14.000
I think those are the only two I actually use.

01:04:14.000 --> 01:04:17.000
You have to have a data field.

01:04:17.000 --> 01:04:25.000
In the case of a code reference, the data field merely indicates that it is a

01:04:25.000 --> 01:04:30.000
code reference.

01:04:30.000 --> 01:04:34.000
But this was like the most efficient implementation of all these things that I've

01:04:34.000 --> 01:04:36.000
ever had.

01:04:36.000 --> 01:04:40.000
I have a second question, you know, I'm in the space business now I'm working on

01:04:40.000 --> 01:04:42.000
space robotics.

01:04:42.000 --> 01:04:45.000
It's a very rich history in space.

01:04:45.000 --> 01:04:49.000
Your RTX, especially.

01:04:49.000 --> 01:04:57.000
I know that talking with Dr. King in 2010, the Goddard space laboratory had him do

01:04:57.000 --> 01:05:03.000
some work implementing forth for one of their missions.

01:05:03.000 --> 01:05:11.000
Can you talk a little bit about the history of forth in space.

01:05:11.000 --> 01:05:20.000
I programmed reconnaissance satellite once.

01:05:20.000 --> 01:05:32.000
But I had very little to do with it, because the NC 4000 was the prototype of

01:05:32.000 --> 01:05:37.000
the RTX.

01:05:37.000 --> 01:05:43.000
And yet I had no contact with it at all. Nobody ever asked me a question.

01:05:43.000 --> 01:05:47.000
Nobody ever paid me money to do anything.

01:05:47.000 --> 01:05:56.000
The whole space application went on without my participation.

01:05:56.000 --> 01:06:00.000
So most of the space stuff was done by four think.

01:06:00.000 --> 01:06:03.000
And Elizabeth Rathers people.

01:06:03.000 --> 01:06:05.000
Well,

01:06:05.000 --> 01:06:10.000
they were kind of the focus John John Hayes and Hopkins University.

01:06:10.000 --> 01:06:19.000
John Hopkins University crew.

01:06:19.000 --> 01:06:22.000
They were good people.

01:06:22.000 --> 01:06:26.000
They.

01:06:26.000 --> 01:06:29.000
What was the name.

01:06:29.000 --> 01:06:33.000
Proves that forth was the provable language.

01:06:33.000 --> 01:06:37.000
Which was an issue at the time.

01:06:37.000 --> 01:06:49.000
I don't know why that is interesting because it's pretty obvious it's correct.

01:06:49.000 --> 01:06:55.000
What's very interesting right now that I found being in the space business is

01:06:55.000 --> 01:07:03.000
FPGAs are naturally radiation immune so they're very much favored in space because

01:07:03.000 --> 01:07:08.000
it's much larger than the modern microprocessors, right.

01:07:08.000 --> 01:07:12.000
So a radiation hit is not going to impact an FPG.

01:07:12.000 --> 01:07:16.000
And I think this is a huge opportunity for forth.

01:07:16.000 --> 01:07:22.000
If you can imagine 100 robots working out in Pluto assembling something.

01:07:22.000 --> 01:07:25.000
And you have this low speed data link.

01:07:25.000 --> 01:07:32.000
And you're going to send a C binary blob up there every time you want to change code.

01:07:32.000 --> 01:07:43.000
You know, fourth is interactive. You just make your, your core words deferred words, and you, you update as necessary using text.

01:07:43.000 --> 01:07:53.000
I think it's the same thing applies to only over the year updates that Tesla uses.

01:07:53.000 --> 01:07:55.000
I don't know how they do it.

01:07:55.000 --> 01:08:01.000
But I doubt they use a fourth model.

01:08:01.000 --> 01:08:13.000
Okay, we have a queue of people that raise their hands to ask questions. So Dimitri is next as far as I know.

01:08:13.000 --> 01:08:18.000
Put my hand up after, after Don.

01:08:18.000 --> 01:08:24.000
My question for Chuck is, okay, I've got, I've got a few finite list.

01:08:24.000 --> 01:08:35.000
What would you say are the most important things about fourth, that someone learning the language needs to know I'm interested in those who are learning it today.

01:08:35.000 --> 01:08:41.000
I myself, I'm quite young, I've learned fourth in the past couple years.

01:08:41.000 --> 01:08:48.000
I'm wondering what you, what your thoughts on this.

01:08:48.000 --> 01:08:57.000
The first thing you have to learn is how to handle the stack of conventional programmers.

01:08:57.000 --> 01:09:00.000
Don't think in stack terms.

01:09:00.000 --> 01:09:18.000
The transition that takes, oh, maybe a couple years before you really know what to put on the stack, what not to put on the stack, and how to keep the stack clean.

01:09:18.000 --> 01:09:27.000
The, the, the processor used in greener rays chips as a circular stack.

01:09:27.000 --> 01:09:37.000
So you can put things on it, leave it there, and it will be forgotten in an optimal way. You don't ever have to keep the stack clean.

01:09:37.000 --> 01:09:45.000
And that's what I do in UHD fourth also have a circular stack, a little more expensive.

01:09:45.000 --> 01:09:51.000
But it's a hard lot, a lot easier.

01:09:51.000 --> 01:09:55.000
Beyond that, you've got to learn to factor.

01:09:55.000 --> 01:10:10.000
The problem, break it into pieces, give names to each line of code, so that you can combine them into a higher level structure.

01:10:10.000 --> 01:10:13.000
That's,

01:10:13.000 --> 01:10:16.000
that's not unique to fourth.

01:10:16.000 --> 01:10:24.000
That's a term that's a kind of good programmer practice that no one uses.

01:10:24.000 --> 01:10:32.000
You can create a conventional to use very large subroutines, lots of parameters.

01:10:32.000 --> 01:10:41.000
And fourth has very small subroutines with almost no parameters.

01:10:41.000 --> 01:10:46.000
You have to make that mental transition.

01:10:46.000 --> 01:10:57.000
So what things do you recommend, leaving on the stack at a time like how many things in the stack should the word consume is there any rough guide on that.

01:10:57.000 --> 01:11:05.000
One or two, one or two. Yeah, the, the,

01:11:05.000 --> 01:11:13.000
the GA 144 has eight deep stacks.

01:11:13.000 --> 01:11:24.000
It doesn't have 16 deep stacks, whatever, but my UHD fourth has eight deep stacks. That's all you need.

01:11:25.000 --> 01:11:45.000
On the FPGA process I'm working on with Don, yeah, we've implemented a circular stacks and I think, I think it's 32 at the moment, but I thought 16 might be a reasonable depth for, for fourth programming so that's reassuring to know.

01:11:45.000 --> 01:11:58.000
Let's, others have their hand up I asked my next question which is, what was it like working with fourth compared to a Fortran or our goal.

01:11:58.000 --> 01:12:07.000
What was it about Fortran or our goal that made you think my I needs to develop the language fourth.

01:12:07.000 --> 01:12:10.000
Interactivity.

01:12:10.000 --> 01:12:20.000
As others have said, in Fortran, you have to recompile the entire application.

01:12:20.000 --> 01:12:27.000
I worked in Fortran. In fact, an early version of fourth was coded in Fortran.

01:12:27.000 --> 01:12:35.000
And it was a pain to have to recompile the whole thing it took half an hour maybe.

01:12:35.000 --> 01:12:41.000
And I wanted something that was easier to to patch.

01:12:41.000 --> 01:12:46.000
Now, there are two flavors of fourth that I've seen.

01:12:46.000 --> 01:12:56.000
One is where you have a large body, a large dictionary with many things in it, and different vocabularies.

01:12:56.000 --> 01:13:03.000
The other is which you know, no vocabularies, and you recompile apps on top of each other.

01:13:03.000 --> 01:13:12.000
That's the way my UHD fourth works. One of the most, one of the most common apps I use is the editor.

01:13:12.000 --> 01:13:19.000
It overlays whatever other app might be active, because clearly it isn't interesting any longer.

01:13:19.000 --> 01:13:31.000
And it compiles a new version of a block, and then I can recompile the recompile that block to make the new app.

01:13:31.000 --> 01:13:37.000
So I'm going to compile times are zero edit times are trivial.

01:13:37.000 --> 01:13:40.000
And the application is tiny.

01:13:40.000 --> 01:13:47.000
So I have a lot of tiny apps, instead of one huge one.

01:13:47.000 --> 01:13:59.000
Wow, so that really, that really is fascinating and I've tried out using blocks I think is implemented in the ESP 32 fourth and I found it very very handy.

01:13:59.000 --> 01:14:09.000
And my final question which follows on from the previous one is, do you think that fourth still has these advantages that you method that you mentioned.

01:14:09.000 --> 01:14:17.000
Do you think it still has these advantages over languages today like see Java and Python.

01:14:17.000 --> 01:14:24.000
Absolutely. I haven't seen any progress in the conventional language world.

01:14:25.000 --> 01:14:31.000
It's been portrait. All these languages are in fixed notation.

01:14:31.000 --> 01:14:35.000
They are not interactive.

01:14:35.000 --> 01:14:42.000
They are huge.

01:14:42.000 --> 01:14:47.000
Nothing has changed in the last 50 years.

01:14:47.000 --> 01:14:54.000
What would you say is wrong with in fixed notation.

01:14:54.000 --> 01:15:00.000
It's

01:15:00.000 --> 01:15:13.000
it's a perversion of notation and concept and implementation in high school.

01:15:13.000 --> 01:15:19.000
People have taught in fixed notation as algebra.

01:15:19.000 --> 01:15:24.000
And it is a pain, because it is unnatural.

01:15:24.000 --> 01:15:29.000
HP calculators are much more efficient.

01:15:30.000 --> 01:15:35.000
In keystrokes than an infix calculator.

01:15:35.000 --> 01:15:46.000
It's just a path that society has taken that I think is suboptimal.

01:15:47.000 --> 01:16:01.000
I would agree with you and that concludes my questions by the way. Yeah, I would agree because I had a bug recently at work, which was caused by an infix operator that I got the precedence for it wrong.

01:16:01.000 --> 01:16:07.000
So it was evaluating it completely incorrectly and I was thinking, if I was using forth, this would not happen.

01:16:07.000 --> 01:16:17.000
And it's amazing how, how often people run into these things to see problems on Facebook sometimes where someone says, solve this math equation.

01:16:17.000 --> 01:16:30.000
And it's because it's confusing these rules are confusing. They're good for mathematics, but they're not actually as intuitive as people think they are the only intuitive because we're taught them.

01:16:30.000 --> 01:16:39.000
But yeah, that's it for me. Thank you for answering my questions, Chuck, and I will continue learning.

01:16:39.000 --> 01:16:44.000
Yeah, thanks. So next with the right hand is James Norris.

01:16:44.000 --> 01:16:49.000
Please go ahead.

01:16:49.000 --> 01:16:51.000
We can't hear you, James.

01:16:51.000 --> 01:16:53.000
Can you hear me? Yeah, no.

01:16:53.000 --> 01:17:05.000
I was wondering about the x86 hand coding that you're doing. Would you consider using a similar or why don't you do it.

01:17:05.000 --> 01:17:12.000
A similar is just another layer of software that gets in your way.

01:17:12.000 --> 01:17:20.000
What I have is the hex op codes with subscripts.

01:17:20.000 --> 01:17:23.000
I will put a number on the stack.

01:17:23.000 --> 01:17:31.000
And the subscript indicates how many bytes that will take in the object code.

01:17:31.000 --> 01:17:37.000
And stringing these numbers together gives you a program.

01:17:37.000 --> 01:17:43.000
Now this is totally inappropriate for large programs. This is insane.

01:17:43.000 --> 01:17:51.000
But for a one line fourth definition, it's trivial.

01:17:51.000 --> 01:17:59.000
Would you be interested? I wrote a fourth base x86 assembler if you ever want to do anything bigger.

01:17:59.000 --> 01:18:14.000
My second question is, what about using fourth as a, right now they're coming out with Russ trying to do this. They figured out that a lot of program languages have problems like C++ has memory management problems and things like that.

01:18:14.000 --> 01:18:23.000
And it causes all these expensive bugs for like Microsoft and stuff and they spend millions of dollars trying to fix bugs in their operating system caused by the programming language.

01:18:23.000 --> 01:18:38.000
So if you are trying to come up with rust as a magic solution, what about for fun, you could take for this really simple. You could put in all that error checking that doesn't have. What do you think about that.

01:18:38.000 --> 01:18:41.000
Yes, we certainly could.

01:18:41.000 --> 01:18:50.000
Fourth doesn't have to be a standalone language. It can be a module in an operating system.

01:18:50.000 --> 01:18:58.000
It just doesn't seem to strike people's fancy.

01:18:58.000 --> 01:19:01.000
That was all my questions.

01:19:01.000 --> 01:19:05.000
Okay, thank you. So Gerald's next try.

01:19:05.000 --> 01:19:08.000
Okay, next try. Can you hear me now. Yeah.

01:19:08.000 --> 01:19:12.000
I'm very sorry about the blur before.

01:19:12.000 --> 01:19:18.000
So Chuck, I wanted to ask just because you also mentioned before that not a lot has changed in force.

01:19:18.000 --> 01:19:23.000
Regarding to the basic structure of having a directory and having a stack.

01:19:23.000 --> 01:19:41.000
I actually recall having a discussion with you where you mentioned investigating multiple stacks and using locals even did you have. Did you do any further research, or is this just been a short excursion for you.

01:19:41.000 --> 01:19:44.000
No, that doesn't lead anywhere useful.

01:19:44.000 --> 01:19:49.000
I've done in new HD forth.

01:19:49.000 --> 01:19:55.000
I've taken advantage of all the registers that the x86 has.

01:19:55.000 --> 01:20:03.000
And you could almost say that you could make a force register based instead of stack based.

01:20:03.000 --> 01:20:06.000
And I explored that a bit.

01:20:06.000 --> 01:20:09.000
And abandoned it.

01:20:09.000 --> 01:20:13.000
And why is that the stack is absolutely essential.

01:20:13.000 --> 01:20:18.000
You might not use it all the time. You might take advantage of the registers.

01:20:18.000 --> 01:20:23.000
If you don't have a stack on which you can pass parameters.

01:20:23.000 --> 01:20:25.000
You're crippled.

01:20:25.000 --> 01:20:32.000
And why do you give up on having even more stacks.

01:20:32.000 --> 01:20:39.000
There's just floating point arithmetic so there's no, no reason to have a floating point stack.

01:20:39.000 --> 01:20:43.000
And I have never found a use for any other kind of stack.

01:20:43.000 --> 01:20:47.000
Okay, thank you.

01:20:47.000 --> 01:20:54.000
Right, thanks. So our next question come from Greg.

01:20:54.000 --> 01:20:59.000
Hello, hello Chuck. It's a pleasure to meet you.

01:20:59.000 --> 01:21:07.000
Actually, I was curious about something that was said earlier you mentioned as a, as a general rule.

01:21:07.000 --> 01:21:12.000
Just limit the number of things on the staff to maybe just to.

01:21:12.000 --> 01:21:36.000
And so just as a, as a possible example, if I were to develop a word that is to draw a rectangle, and it, it takes two points, you know, top left bottom right, let's say, as parameters that would, that would be for arguments on the stack so I might think,

01:21:36.000 --> 01:21:43.000
maybe I should start thinking about structures so maybe I'll create a structure that's a point object.

01:21:43.000 --> 01:21:51.000
And so I could put two points on the stack and, you know, that's only a couple of things placed on the stack but now I have a structure.

01:21:51.000 --> 01:22:02.000
That structure would be, I think in fourth would be typically global, which some people might look a scans that and say it's a global variable.

01:22:02.000 --> 01:22:17.000
But I would also think of it in terms of, well, maybe I could create an object called a rectangle and the rectangle might have methods to set its points and to display itself or whatever I decide make make sense.

01:22:17.000 --> 01:22:22.000
And I think fits well with the noun verb.

01:22:22.000 --> 01:22:33.000
You know, structure that forth, I think encourages, you know, objects, you know, action type of thing, you know, machine on machine off sort of thing.

01:22:33.000 --> 01:22:49.000
I'm curious as to what your thoughts, you know, would be on how you might structure and your thoughts, some problem like that and, and, you know, what are your thoughts on structures and objects and that level of abstraction,

01:22:49.000 --> 01:22:55.000
you know, in addition to just the basics of what gives you

01:22:55.000 --> 01:22:59.000
that that's one way of doing things.

01:23:00.000 --> 01:23:12.000
Is I have a word at that sets the cursor takes two parameters and specifies the location on the screen.

01:23:12.000 --> 01:23:16.000
And then I have another word called rectangle.

01:23:16.000 --> 01:23:22.000
Has the dimensions of the rectangle that I'm going to draw at the cursor.

01:23:22.000 --> 01:23:28.000
So I've broken it into two pieces instead of having one large piece.

01:23:28.000 --> 01:23:37.000
I'm going to use the word at for triangles as well, or for circles.

01:23:37.000 --> 01:23:41.000
Now in the case of a triangle.

01:23:41.000 --> 01:23:48.000
It's a problem because you've got three points.

01:23:48.000 --> 01:23:52.000
And I use a structure for that.

01:23:52.000 --> 01:23:56.000
There's one parameter, the radius.

01:23:56.000 --> 01:23:59.000
So it's on stack.

01:23:59.000 --> 01:24:05.000
So to generalize and say everything should be structures is not right.

01:24:05.000 --> 01:24:11.000
And everything should be in a stack is not right either you have to be flexible.

01:24:11.000 --> 01:24:14.000
What are your thoughts on objects.

01:24:14.000 --> 01:24:17.000
Having, you know,

01:24:17.000 --> 01:24:19.000
I created.

01:24:19.000 --> 01:24:24.000
I created an object and forth.

01:24:24.000 --> 01:24:26.000
Called the month.

01:24:26.000 --> 01:24:32.000
And this object had starting point in the year and the number of days or something like that.

01:24:32.000 --> 01:24:35.000
This was back back very early.

01:24:35.000 --> 01:24:41.000
That's the only object I've ever.

01:24:41.000 --> 01:24:43.000
And it was useless.

01:24:43.000 --> 01:24:49.000
I have much better ways of doing months now.

01:24:49.000 --> 01:24:53.000
So I think object learning programming is the mistake.

01:24:53.000 --> 01:25:03.000
There are not enough instances of the object to make worth the generalization.

01:25:03.000 --> 01:25:04.000
Interesting.

01:25:04.000 --> 01:25:10.000
Thank you for your thoughts on that appreciate.

01:25:10.000 --> 01:25:18.000
That's why they call it oops.

01:25:18.000 --> 01:25:22.000
Okay, Francis, please ask your questions.

01:25:22.000 --> 01:25:23.000
Hi Chuck.

01:25:23.000 --> 01:25:25.000
Can you hear me.

01:25:25.000 --> 01:25:26.000
Yes.

01:25:26.000 --> 01:25:27.000
Okay.

01:25:27.000 --> 01:25:30.000
Hi Chuck, it's an honor to speak with you.

01:25:30.000 --> 01:25:45.000
I've been following for a while, and I just wanted to thank you for this gift to us. I was wondering if you could speak a little bit about the motivations for the circuit simulation software you wrote its performance and its current status.

01:25:45.000 --> 01:25:47.000
Say again.

01:25:47.000 --> 01:26:00.000
I was wondering if you could speak a little bit about your motivations for the circuit simulation software used to do the lay on the simulations, its performance and its current status.

01:26:00.000 --> 01:26:01.000
Yeah.

01:26:01.000 --> 01:26:06.000
That is my.

01:26:06.000 --> 01:26:12.000
That's one of my favorite applications. It's one of the things that I've spent most time on.

01:26:12.000 --> 01:26:17.000
And I think I've done the best job on.

01:26:17.000 --> 01:26:22.000
Um,

01:26:22.000 --> 01:26:26.000
there's there's two aspects to it.

01:26:26.000 --> 01:26:32.000
One is the circuit logic die logic description.

01:26:32.000 --> 01:26:35.000
And the other is a layout.

01:26:35.000 --> 01:26:42.000
If you are laying out a circuit board, or whether you're laying out a chip.

01:26:42.000 --> 01:26:46.000
Basically the same problem with different geometries.

01:26:46.000 --> 01:26:52.000
And what I have learned to do is in both cases.

01:26:52.000 --> 01:26:55.000
I do the layout.

01:26:55.000 --> 01:27:00.000
And from the layout, I derive the circuit.

01:27:00.000 --> 01:27:08.000
An array of transistors and interconnects.

01:27:08.000 --> 01:27:12.000
It's extremely efficient, extremely intuitive.

01:27:12.000 --> 01:27:17.000
Pretty simple to implement.

01:27:17.000 --> 01:27:27.000
And gives wonderfully complete results.

01:27:27.000 --> 01:27:31.000
I've done a lot of circuit boards.

01:27:31.000 --> 01:27:35.000
But I've done even more chips.

01:27:35.000 --> 01:27:39.000
And the chip layout.

01:27:39.000 --> 01:27:51.000
Well, conventionally one has a logic description of gates that are connected and then you that you derive the, the layout.

01:27:51.000 --> 01:27:55.000
And then you do it the other way. The layout is predominant.

01:27:55.000 --> 01:28:01.000
And the function of layout is determined from it.

01:28:01.000 --> 01:28:02.000
Yeah.

01:28:02.000 --> 01:28:06.000
This is this is a strange side effect.

01:28:06.000 --> 01:28:17.000
There is no need to do a validation, proving that the layout accurately reflects the circuit.

01:28:17.000 --> 01:28:22.000
This is the circuit and is by definition, correct.

01:28:22.000 --> 01:28:25.000
Amazing.

01:28:25.000 --> 01:28:29.000
And it's a lot of fun. I enjoy working with rectangles and layouts.

01:28:29.000 --> 01:28:30.000
Yeah.

01:28:30.000 --> 01:28:41.000
Unfortunately, again, just like the world doesn't let you interface with chips or boards or GPUs.

01:28:41.000 --> 01:28:45.000
The world doesn't let you interface with chips any longer.

01:28:45.000 --> 01:28:49.000
You give it a

01:28:49.000 --> 01:28:53.000
GDS approved layout,

01:28:53.000 --> 01:28:56.000
which they will validate

01:28:56.000 --> 01:29:04.000
before they construct a layout, which vaguely resembles the one that you work from

01:29:04.000 --> 01:29:09.000
to frustrating technological development.

01:29:09.000 --> 01:29:14.000
I would love to have a chip making machine.

01:29:14.000 --> 01:29:24.000
Something that will generate a prototype chip in a desktop environment.

01:29:24.000 --> 01:29:30.000
But the world is going to the world prefers to have billion dollar fabs.

01:29:30.000 --> 01:29:31.000
Yep.

01:29:31.000 --> 01:29:36.000
Yep.

01:29:37.000 --> 01:29:43.000
I asked that because I was in my daily job.

01:29:43.000 --> 01:29:46.000
I do this as a maker and a hobbyist of the cyber.

01:29:46.000 --> 01:29:52.000
In my daily job, I do chip design and process development for some of the one of the big semiconductor companies.

01:29:52.000 --> 01:29:55.000
And this is a cool interest of mine.

01:29:55.000 --> 01:29:57.000
I thought I would ask about that.

01:29:57.000 --> 01:30:00.000
This is another question.

01:30:00.000 --> 01:30:11.000
What are the most interesting one or two applications you've seen in forth from others that you didn't see coming.

01:30:11.000 --> 01:30:14.000
The applications and forth think does.

01:30:14.000 --> 01:30:18.000
And you can go to their website for a list.

01:30:18.000 --> 01:30:21.000
But they've done the

01:30:21.000 --> 01:30:23.000
communication networks,

01:30:23.000 --> 01:30:26.000
device handlers.

01:30:26.000 --> 01:30:31.000
I did a Hollywood robot once.

01:30:31.000 --> 01:30:36.000
Robot camera.

01:30:36.000 --> 01:30:41.000
Cement making plants.

01:30:41.000 --> 01:30:46.000
I'd love to see that full self driving car.

01:30:46.000 --> 01:30:50.000
And forth.

01:30:50.000 --> 01:30:59.000
That's a, that's a heavy thing though. As soon as you get into applications that

01:30:59.000 --> 01:31:02.000
risk human lives.

01:31:02.000 --> 01:31:11.000
It's a whole new game. And I've never done one of those.

01:31:11.000 --> 01:31:15.000
And just a, just a, just a last question.

01:31:15.000 --> 01:31:22.000
In hindsight, has anything sort of done differently with regards to forth and setting it up developing it all that.

01:31:22.000 --> 01:31:30.000
Looking back after all these, these news.

01:31:30.000 --> 01:31:37.000
No, in, in hindsight, I don't know that I've done particularly well.

01:31:37.000 --> 01:31:44.000
But I don't know that there's anything I would have or could have done differently.

01:31:44.000 --> 01:31:53.000
In back in what 1970 or so.

01:31:53.000 --> 01:32:01.000
Fourth, in a sense was competing with Microsoft.

01:32:01.000 --> 01:32:05.000
Not exactly, but conceptually.

01:32:05.000 --> 01:32:14.000
And if, if we at four think had developed an operating system.

01:32:14.000 --> 01:32:19.000
We could have competed with Microsoft.

01:32:19.000 --> 01:32:21.000
But we didn't.

01:32:21.000 --> 01:32:28.000
We couldn't.

01:32:28.000 --> 01:32:33.000
And I'm perhaps glad we didn't.

01:32:33.000 --> 01:32:39.000
I'm much happier with where we are now than where with Microsoft is now.

01:32:39.000 --> 01:32:43.000
Microsoft has to be compatible.

01:32:43.000 --> 01:32:46.000
With the exception maybe of Windows 11.

01:32:46.000 --> 01:32:49.000
With everything they have ever done before.

01:32:49.000 --> 01:32:50.000
Yeah.

01:32:50.000 --> 01:32:57.000
And that is a horrible burden to bear.

01:32:58.000 --> 01:33:05.000
As it stands.

01:33:05.000 --> 01:33:08.000
Fourth is free to reinvent the wheel.

01:33:08.000 --> 01:33:16.000
And I think that is a marvelous concept. No one should ever be afraid to reinvent the wheel.

01:33:16.000 --> 01:33:21.000
And we do it every day.

01:33:21.000 --> 01:33:24.000
Thank you, thank you.

01:33:24.000 --> 01:33:28.000
Yeah, thanks. And Howard, your turn.

01:33:28.000 --> 01:33:31.000
And please open the mic.

01:33:31.000 --> 01:33:39.000
Hi, Chuck, I've already had a turn at chatting to you, but one more question about ones compliment.

01:33:39.000 --> 01:33:43.000
The whole, it used to be very popular a long time ago.

01:33:43.000 --> 01:33:48.000
The IP internet protocol uses a ones compliment checksum.

01:33:48.000 --> 01:33:51.000
And it has some interesting properties.

01:33:51.000 --> 01:33:55.000
I have a feeling that it's a really good way to go.

01:33:55.000 --> 01:34:00.000
And I observed that you use one's compliment in the color fourth.

01:34:00.000 --> 01:34:06.000
And I just wanted to hear your opinion. Do you think that the world went wrong when it moved over to.

01:34:06.000 --> 01:34:11.000
Toes compliment.

01:34:11.000 --> 01:34:16.000
No, I, I, I worried about this.

01:34:16.000 --> 01:34:22.000
One of the main frames I programmed early on was one's compliment arithmetic.

01:34:22.000 --> 01:34:27.000
But who's as much more convenient.

01:34:27.000 --> 01:34:30.000
And it doesn't cost anything in hardware.

01:34:30.000 --> 01:34:34.000
So to complement is definitely the way to go.

01:34:34.000 --> 01:34:46.000
And I can understand that, that point of view, the thing, the thing I like about ones compliment is that you've got this extra state in the system and normal, normal.

01:34:46.000 --> 01:34:54.000
Toes compliments, you've got zero and you've got everything else and in ones compliment you've got plus zero and minus zero.

01:34:54.000 --> 01:35:06.000
And it helps me that it's very useful to have this extra states that can be used so you can have a value is either zero, not zero or not set or some such.

01:35:06.000 --> 01:35:12.000
And I think this, this whole idea of having three states in a value rather than two.

01:35:12.000 --> 01:35:23.000
It brings it closer to the optimal number of symbols required to transmit data, which I believe is e somebody proves a long time ago.

01:35:24.000 --> 01:35:29.000
Anyway, it's just, I think it's a good idea.

01:35:29.000 --> 01:35:31.000
You're talking about having code.

01:35:31.000 --> 01:35:32.000
Yeah, yeah, yeah.

01:35:32.000 --> 01:35:34.000
Yes.

01:35:34.000 --> 01:35:49.000
The introduction on computer file about that two days ago, but having codes and the transition of following the edges of the of the square to get to that.

01:35:49.000 --> 01:35:50.000
Okay, thanks for the link.

01:35:50.000 --> 01:35:52.000
I'll look into that.

01:35:52.000 --> 01:35:55.000
Okay, thanks, Chuck.

01:35:55.000 --> 01:35:57.000
Okay.

01:35:57.000 --> 01:36:01.000
Right. So, Bob, you will raise your hand.

01:36:01.000 --> 01:36:03.000
Hello.

01:36:03.000 --> 01:36:21.000
Okay, I have a few one thing I'm wondering when I heard you programmed a mainframe that was once compliment what mainframe was that you remember.

01:36:21.000 --> 01:36:24.000
That's why I didn't name it.

01:36:24.000 --> 01:36:27.000
Okay.

01:36:27.000 --> 01:36:33.000
Could it have been a spare Univac.

01:36:33.000 --> 01:36:40.000
No, it might have been the

01:36:40.000 --> 01:36:44.000
don't use this.

01:36:44.000 --> 01:36:46.000
Was it when you did that at the regs.

01:36:46.000 --> 01:36:50.000
The first super computer right I can't come up with the name of it.

01:36:50.000 --> 01:36:51.000
Oh, great.

01:36:51.000 --> 01:36:52.000
Or us.

01:36:52.000 --> 01:36:54.000
Great.

01:36:54.000 --> 01:36:59.000
Or maybe one of its input terminals something like that.

01:36:59.000 --> 01:37:00.000
Cool.

01:37:00.000 --> 01:37:03.000
Second question.

01:37:03.000 --> 01:37:08.000
You mentioned compatibility, you know, and how Microsoft does maintain compatibility.

01:37:08.000 --> 01:37:10.000
You've just mentioned mainframes.

01:37:10.000 --> 01:37:27.000
I was thinking, ZVM, which is the current version of Z of OS and MBS, which is OS MBT, which is OS 360 has maintained compatibility across since the 1960s.

01:37:27.000 --> 01:37:35.000
When it first started and evidently you can compile a program today on CVM.

01:37:35.000 --> 01:37:41.000
You've got ZOS, rather I'm sorry, ZOS mainframe and run.

01:37:41.000 --> 01:37:45.000
I mean, just, you know, it was interesting that you'd mentioned compatibility.

01:37:45.000 --> 01:37:49.000
IBM is having maintained that for all these years.

01:37:49.000 --> 01:37:54.000
Compatibility guarantees there won't be any progress.

01:37:54.000 --> 01:37:57.000
Yes.

01:37:57.000 --> 01:38:08.000
What is the smallest fourth even you've run across what's the, you know, what's the minimum, like, if you could.

01:38:08.000 --> 01:38:17.000
I don't know exactly I quantify it but like the smallest amount of memory smallest amount of space. What is, what is that.

01:38:17.000 --> 01:38:19.000
What is that.

01:38:19.000 --> 01:38:24.000
The smallest one I've done was called CM fourth.

01:38:24.000 --> 01:38:32.000
For the Novics I think it was.

01:38:32.000 --> 01:38:36.000
It for thing we had.

01:38:36.000 --> 01:38:52.000
Micro fourth and many fourth, which explored the range of having a small kernel and everything else compiled.

01:38:52.000 --> 01:38:58.000
And I believe he forced those out I believe.

01:38:58.000 --> 01:39:10.000
But I have, I've heard references to these some micro computer fourth that had very small kernels.

01:39:10.000 --> 01:39:15.000
I would say a kernel should not be more than 4k.

01:39:15.000 --> 01:39:18.000
If you get it down to one K that would be nice.

01:39:18.000 --> 01:39:21.000
Okay.

01:39:21.000 --> 01:39:32.000
So you mentioned in talking and I forget who it was but you mentioned that the two parameters that you mentioned the stack that's on the feet.

01:39:32.000 --> 01:39:38.000
Is that for like, as many levels as deep as you go or is it a.

01:39:38.000 --> 01:39:44.000
I've never thought he was also small.

01:39:44.000 --> 01:39:49.000
I would think in terms of the circular stack with eight elements.

01:39:49.000 --> 01:39:56.000
So that you could put as many things on the stack as you want but you only have access to eight of them.

01:39:56.000 --> 01:40:05.000
Now, for the nice circuit tracing algorithms.

01:40:05.000 --> 01:40:14.000
I've needed to stack thousands deep, because as you trace a circuit you're recursing and recursing and recursing.

01:40:14.000 --> 01:40:30.000
It's a whole different concept that I would have a software stack for the hardware stack can be very small for is too small, a to small 16 is plenty.

01:40:30.000 --> 01:40:32.000
Okay, cool.

01:40:32.000 --> 01:40:49.000
Two more. One is, did you know that the current dot net implementation of languages for do something called I L and I L is a fourth light stack language.

01:40:49.000 --> 01:40:54.000
So they actually you compile C into a fourth language.

01:40:54.000 --> 01:40:56.000
I don't know if none of that.

01:40:56.000 --> 01:41:00.000
I would say no because I haven't understood what you said.

01:41:00.000 --> 01:41:05.000
Okay, well, us that net is the kind of the IP.

01:41:05.000 --> 01:41:10.000
I'm sorry, Microsoft's answer to Java C sharp is Microsoft's answer to Java.

01:41:10.000 --> 01:41:17.000
become very popular so actually learn this language, if you're writing that kind of software.

01:41:17.000 --> 01:41:28.000
But when it compiles, it compiles down into something called intermediate language, which is actually a very forth like language to stack based language.

01:41:28.000 --> 01:41:33.000
I was, I thought that was interesting. I didn't know if you'd heard of that.

01:41:33.000 --> 01:41:41.000
Well, all infects languages have to compile into a stack.

01:41:41.000 --> 01:41:43.000
So yeah.

01:41:43.000 --> 01:41:46.000
But if the interesting thing is this.

01:41:46.000 --> 01:41:48.000
It doesn't compile.

01:41:48.000 --> 01:41:55.000
It doesn't compile to a native, it compiles I L I L gets compiled to native.

01:41:55.000 --> 01:41:56.000
An intermediate language.

01:41:56.000 --> 01:41:57.000
Yeah.

01:41:57.000 --> 01:42:02.000
That is.

01:42:02.000 --> 01:42:06.000
To me that is grossly inefficient.

01:42:06.000 --> 01:42:09.000
Why not writing intermediate language.

01:42:09.000 --> 01:42:18.000
And on last thing is that you, you've talked about assembler and you don't even know the x86 op codes and such like that.

01:42:18.000 --> 01:42:22.000
In the 1130 assembler, you wrote an assembler.

01:42:22.000 --> 01:42:33.000
I mean, in 1134, you wrote an assembler so you could write 1130 instructions in a fourth life notation.

01:42:33.000 --> 01:42:38.000
I mean, there's a right there right at the beginning is very cool.

01:42:38.000 --> 01:42:47.000
Not only 1130 all of my, all of my computers had assembly words.

01:42:47.000 --> 01:42:50.000
I don't think that that was a waste of time.

01:42:50.000 --> 01:42:56.000
It was, it was hard to figure out how to construct the words.

01:42:56.000 --> 01:42:59.000
It was hard to remember how they were constructed.

01:42:59.000 --> 01:43:10.000
It was inefficient to implement the, the hex op codes are on any computer are far the simplest way of implementing it.

01:43:10.000 --> 01:43:17.000
So it was, it was, it's interesting you saying that because it was just like, that was when we were looking at the code.

01:43:17.000 --> 01:43:21.000
That was one of the most intense parts of the story.

01:43:21.000 --> 01:43:23.000
What are you doing here.

01:43:23.000 --> 01:43:27.000
And then like saying, wow, no, we fought, we fought really.

01:43:27.000 --> 01:43:33.000
So it was fun.

01:43:33.000 --> 01:43:37.000
It was, it was a clever.

01:43:37.000 --> 01:43:42.000
But it was at least as difficult as the hex codes.

01:43:42.000 --> 01:43:43.000
Yeah.

01:43:43.000 --> 01:43:49.000
Okay, that's it. I'm out of here. I'm, at least I'm calling you. Thank you for your time.

01:43:49.000 --> 01:43:52.000
Okay, thanks, Bob.

01:43:52.000 --> 01:43:56.000
Our next questions come from Jan Bramkamp or Jen Brankamp.

01:43:56.000 --> 01:43:59.000
I don't know.

01:43:59.000 --> 01:44:01.000
If my microphone is working.

01:44:01.000 --> 01:44:02.000
Yes.

01:44:02.000 --> 01:44:09.000
So my question is, you've already rented about infix notation and how it doesn't compose.

01:44:09.000 --> 01:44:17.000
And what do you think about a prefix notation like list.

01:44:17.000 --> 01:44:21.000
I'm sorry, I lost my earpiece.

01:44:21.000 --> 01:44:23.000
Sorry, let me repeat that.

01:44:23.000 --> 01:44:30.000
You've already given us your opinion on infix notation and how badly it composes.

01:44:30.000 --> 01:44:38.000
Your opinion on prefix notation languages like list.

01:44:38.000 --> 01:44:41.000
Um,

01:44:41.000 --> 01:44:44.000
they made an unfortunate choice.

01:44:44.000 --> 01:44:49.000
I believe the human brain works on post fix.

01:44:49.000 --> 01:44:54.000
You, you, you accept data.

01:44:54.000 --> 01:44:59.000
You store it in your short term stack, and then you operate on it.

01:44:59.000 --> 01:45:09.000
And then you pre fix things.

01:45:09.000 --> 01:45:11.000
Okay, short answer.

01:45:11.000 --> 01:45:17.000
And are you satisfied with it?

01:45:17.000 --> 01:45:20.000
Yes, I got my answer.

01:45:20.000 --> 01:45:21.000
Okay.

01:45:21.000 --> 01:45:23.000
Okay, thanks, Jan.

01:45:23.000 --> 01:45:26.000
The next is Anton Airtel.

01:45:26.000 --> 01:45:31.000
Anton, please go ahead.

01:45:31.000 --> 01:45:36.000
Oh, maybe your mic volume has been turned down.

01:45:36.000 --> 01:45:39.000
So that's what happened to Jared.

01:45:39.000 --> 01:45:45.000
So we can't hear you.

01:45:45.000 --> 01:45:47.000
Mic selection.

01:45:47.000 --> 01:45:52.000
No, no, no.

01:45:52.000 --> 01:45:55.000
No, no, no.

01:45:55.000 --> 01:45:57.000
No, and now not again.

01:45:57.000 --> 01:46:01.000
So, yeah, yeah.

01:46:01.000 --> 01:46:03.000
Go ahead.

01:46:03.000 --> 01:46:12.000
All right. So, um, the question is, um, what is your take on state smart words?

01:46:12.000 --> 01:46:18.000
I think you had them in your early fourth systems and then you eliminated them.

01:46:18.000 --> 01:46:22.000
And I'm not sure if you have them in, in the reason systems.

01:46:22.000 --> 01:46:23.000
I don't think so.

01:46:23.000 --> 01:46:26.000
But can you talk a little bit about them?

01:46:26.000 --> 01:46:29.000
And yeah.

01:46:29.000 --> 01:46:34.000
Yeah, I think maybe that's an area in which forth has made some progress,

01:46:34.000 --> 01:46:37.000
or at least my fourth.

01:46:37.000 --> 01:46:42.000
And you HD fourth is basically color fourth.

01:46:42.000 --> 01:46:46.000
And different words have different colors.

01:46:46.000 --> 01:46:55.000
The state smart words would have different colors for different states.

01:46:55.000 --> 01:47:00.000
For instance, the color white means execute immediately.

01:47:00.000 --> 01:47:04.000
The color green means compile.

01:47:04.000 --> 01:47:20.000
And those are only only two states that I need.

01:47:20.000 --> 01:47:23.000
But I do have to be aware.

01:47:23.000 --> 01:47:25.000
In programming.

01:47:25.000 --> 01:47:28.000
For instance, a conditional word like if.

01:47:28.000 --> 01:47:31.000
Or them.

01:47:31.000 --> 01:47:37.000
That is an immediate word and must be in white.

01:47:37.000 --> 01:47:47.000
If I have an if in green, it means compile a reference to if for future use.

01:47:47.000 --> 01:47:51.000
And that's basically what the state smart words did.

01:47:51.000 --> 01:47:56.000
You didn't have to be aware that they were.

01:47:56.000 --> 01:47:58.000
Which state they were in.

01:47:58.000 --> 01:48:00.000
If they knew.

01:48:00.000 --> 01:48:05.000
But now I must be aware.

01:48:05.000 --> 01:48:08.000
To distinguish green from white.

01:48:08.000 --> 01:48:11.000
And that is a programming challenge.

01:48:11.000 --> 01:48:17.000
Sometimes I get it wrong.

01:48:17.000 --> 01:48:20.000
Thank you.

01:48:20.000 --> 01:48:22.000
Yeah, interesting.

01:48:22.000 --> 01:48:24.000
Yeah, don't.

01:48:24.000 --> 01:48:26.000
Please.

01:48:26.000 --> 01:48:29.000
Check again.

01:48:29.000 --> 01:48:40.000
How many items or how deep do you think we should build the return stack in our fpj fourth.

01:48:40.000 --> 01:48:42.000
32 bit fourth.

01:48:42.000 --> 01:48:51.000
That doesn't matter.

01:48:51.000 --> 01:48:53.000
I would go with eight.

01:48:53.000 --> 01:48:55.000
Okay.

01:48:55.000 --> 01:48:59.000
I think the return stack.

01:48:59.000 --> 01:49:01.000
And the data stack.

01:49:01.000 --> 01:49:04.000
Need not be the same length.

01:49:04.000 --> 01:49:08.000
But by default, I would make them the same length.

01:49:08.000 --> 01:49:13.000
So that until experience proved otherwise.

01:49:13.000 --> 01:49:19.000
The next thing is that a circular stack that you're talking about.

01:49:19.000 --> 01:49:21.000
It doesn't matter.

01:49:21.000 --> 01:49:25.000
We actually implemented circular stacks.

01:49:25.000 --> 01:49:28.000
So that was Dr. Ting.

01:49:28.000 --> 01:49:32.000
We shared the code with me said, you circular stacks.

01:49:32.000 --> 01:49:33.000
Okay, so we did that.

01:49:33.000 --> 01:49:35.000
Dmitry implemented that.

01:49:35.000 --> 01:49:38.000
It costs nothing in hardware.

01:49:38.000 --> 01:49:42.000
My next question to you is.

01:49:42.000 --> 01:49:44.000
Yep.

01:49:44.000 --> 01:49:52.000
Why don't you utilize fpj's because that is your desktop chip making.

01:49:52.000 --> 01:49:54.000
Scenario today.

01:49:54.000 --> 01:50:01.000
And I will offer you when we get finished, I'll send you a complete system that you can play with.

01:50:01.000 --> 01:50:06.000
And it's going to be in system bear log.

01:50:06.000 --> 01:50:09.000
It's, it's very beautiful code right now.

01:50:09.000 --> 01:50:17.000
It's like two pages of code to implement a fourth processor basic.

01:50:17.000 --> 01:50:23.000
So why, why haven't you used fpj or development?

01:50:23.000 --> 01:50:29.000
Because they wouldn't let me program them in fourth.

01:50:29.000 --> 01:50:31.000
There you go.

01:50:31.000 --> 01:50:33.000
That's great.

01:50:33.000 --> 01:50:41.000
That's literally the reason and the only reason I would love to use an fpj, but they won't let me.

01:50:41.000 --> 01:50:45.000
I have, I'd have to learn someone else's ugly language.

01:50:45.000 --> 01:50:46.000
Yeah.

01:50:46.000 --> 01:50:55.000
Remember that's only maybe five years that there are open source tool chains for for fpj programming.

01:50:55.000 --> 01:50:57.000
Thanks, Chuck.

01:50:57.000 --> 01:51:04.000
Okay, or not. You're raising your hand and you're putting it down and raising it. Maybe you have a question.

01:51:04.000 --> 01:51:09.000
I actually wasn't putting it down, but it's okay.

01:51:09.000 --> 01:51:21.000
Sorry. Yeah, I have a question. I think, like, fourth is like, you know, perceived as a runtime language, right.

01:51:21.000 --> 01:51:32.000
It could be like a meta language. It could be like incredibly like expressive and like, you know, what are your thoughts about that?

01:51:32.000 --> 01:51:41.000
And also, yeah, I can, I can ask the next question.

01:51:41.000 --> 01:51:44.000
So what exactly was your question?

01:51:44.000 --> 01:51:46.000
Oh, sorry.

01:51:46.000 --> 01:51:59.000
So the question is, we're thinking about stacks and what stack to use and like, you know, what kind of stack size to use because like, that's a runtime for it.

01:51:59.000 --> 01:52:10.000
Right. That's the fourth where it's like, you know, we execute a like a stack based we have a stack based runtime, right.

01:52:10.000 --> 01:52:26.000
And that has like a certain costs in terms of like, you know, like third performance costs and it doesn't actually map to architectures like GPUs, for example, because there is not even like a concept of stacks just like, I mean, you could have like a memory stack on the GPUs

01:52:26.000 --> 01:52:41.000
but it's got to work on like, you know, I think, I think fourth can be an amazing like compiler, you know, like, it's, it's, it's, I'm sorry, I can be, I'm super excited.

01:52:41.000 --> 01:52:46.000
So I am somewhat in our particulates and can be harsh.

01:52:47.000 --> 01:52:50.000
Oh, let me, let me try to address that.

01:52:50.000 --> 01:52:51.000
Yes.

01:52:51.000 --> 01:53:06.000
Thank you. The stack is nearly a tool that forth uses to express things compactly. And certainly forth has applications far beyond stack oriented things.

01:53:06.000 --> 01:53:19.000
Fourth would make an excellent compiler. Fourth would make a good language translator. Fourth would make a good artificial intelligence effect.

01:53:19.000 --> 01:53:30.000
And yes, I kind of agree fourth is a middle language. It lets you define an application language suitable for your environment.

01:53:30.000 --> 01:53:59.000
Yes. Yes. Thank you. I mean, also, that brings to the second question, which is, like, I also think, like, having the, like, you know, the 144 chip, the, how, like, in terms of like the simplicity, that's, that's the way to actually reach like the energy, like, consumption to the minimum, right.

01:54:00.000 --> 01:54:11.000
And we think there could be other constructs other than the stack to like, you know, or like, it could be like, I don't know.

01:54:11.000 --> 01:54:27.000
I was thinking maybe it could be like a hardware definition language where we define those kinds of constructs for whatever problem at hand. So the hardware could morph, depending on like what kind of application is what run we redefine the hardware sort of

01:54:28.000 --> 01:54:36.000
You don't need to be, you don't want to think restricted to a stack, you don't have to use a stack for everything.

01:54:36.000 --> 01:54:44.000
As I said earlier, you can have you can have structures, which relieve the depth of the stack.

01:54:44.000 --> 01:54:54.000
And, but the stack I think is in this, at least the small stack is absolutely essential for passing parameters.

01:54:54.000 --> 01:55:05.000
I think I also come to that conclusion, because like it's super simple to pass parameters.

01:55:05.000 --> 01:55:21.000
And yet I think like, you know, at some level, it's, it's, it's all like, it's, it's, it could be even like, you know, we implement the whole compiler and assembly and like, like use the

01:55:22.000 --> 01:55:25.000
Sorry, I can, I can.

01:55:25.000 --> 01:55:45.000
Also, I just want to say like, I, I thank you for, for all the inspiration and like for everything. I mean, I am, I'm so, so happy that I briefly got to introduce you to some of the work that I've been doing.

01:55:45.000 --> 01:55:46.000
Yeah.

01:55:46.000 --> 01:55:50.000
Okay, thank you very much. I think we follow up on that later.

01:55:50.000 --> 01:55:54.000
Dimitri, another one.

01:55:54.000 --> 01:56:01.000
It's a very short question. It was, it was based on Don's question on the return stack.

01:56:01.000 --> 01:56:12.000
And in the, in the chat on Peter Jackie, he was saying, well, you know, wouldn't the return stack need to be deeper if you're going to factor your code heavily.

01:56:12.000 --> 01:56:27.000
How could we have a return stack or say eight steep and still factor our fourth code.

01:56:27.000 --> 01:56:31.000
Oh, no, it's a question. It's a question of complexity.

01:56:31.000 --> 01:56:41.000
If you, if you have to deep a call sequence, this calls that calls that calls that.

01:56:41.000 --> 01:56:46.000
It gets complicated and you lose track of what's going on.

01:56:46.000 --> 01:56:57.000
I rarely have more than two or three levels of nested calls, which is what the return stack is for.

01:56:57.000 --> 01:57:14.000
You see, okay, so it's quite flat to yes, because you can still, you can still factor your application into lots of short words, but they're just not words that call one another one another in a chain.

01:57:14.000 --> 01:57:17.000
You're going to stay at the same level.

01:57:17.000 --> 01:57:18.000
That's right.

01:57:18.000 --> 01:57:27.000
The return stack is to hold the loop count, although that's not the only way of doing it.

01:57:27.000 --> 01:57:36.000
So you want to consider how many nested loops you have, as well as how many nested calls.

01:57:36.000 --> 01:57:38.000
Okay, that makes sense to me now thank you.

01:57:38.000 --> 01:57:41.000
Okay, great.

01:57:41.000 --> 01:57:45.000
Thanks so young for another question.

01:57:45.000 --> 01:57:54.000
Yes, this time my question is regarding state smart words, I found them a pain in the posterior to work with.

01:57:54.000 --> 01:58:10.000
And wouldn't it be possibly easier to have an always compiling forth where interactive code is compiled into an anonymous function and executed afterward just to be immediately deallocated.

01:58:10.000 --> 01:58:31.000
Is there a downside to setting up a fourth system like this that it's always in compile mode and the defining a word would only move the compiler location from the scratch pad to the dictionary.

01:58:31.000 --> 01:58:42.000
I'm a little bit out of my depth, because I don't know how state smart words are done conventionally.

01:58:42.000 --> 01:58:54.000
I do, I do agree there needs to be two distinct behaviors, one in which you're interpreting and one in which you're compiling.

01:58:54.000 --> 01:58:59.000
So do I need the interpreting state at all.

01:58:59.000 --> 01:59:06.000
Couldn't this be solved by compiling into a temporary scratch pad area.

01:59:06.000 --> 01:59:20.000
Large enough to hold a line of code or two, then calling this code and we using the scratch pad for the next interactive input. So always compile being in compile mode.

01:59:20.000 --> 01:59:26.000
I can't do that. I think I did that once upon a time.

01:59:26.000 --> 01:59:28.000
What is the downside.

01:59:28.000 --> 01:59:33.000
It's no less clumsy. You still have to be aware of what you're doing.

01:59:33.000 --> 01:59:39.000
And it's just a different way.

01:59:39.000 --> 01:59:44.000
What say there's three ways of doing it. One you can have a state flag.

01:59:44.000 --> 01:59:53.000
There's three different colors, or three you could have this compiled scratch and execute.

01:59:53.000 --> 02:00:03.000
There's three ways of doing the same thing. I think the color way is is latest.

02:00:03.000 --> 02:00:19.000
I went into this G for for Mac with still ours is that yes, that's a state verbal and some words respond to it and as soon as you want to do heavy meta programming and you need one of those states smart.

02:00:19.000 --> 02:00:24.000
What's in another state smart word they don't nest.

02:00:24.000 --> 02:00:26.000
That's really cool.

02:00:27.000 --> 02:00:43.000
At that point you're scratching your head and some for systems work around it by providing non state smart versions and suddenly you have to two or three times the number of words.

02:00:43.000 --> 02:00:45.000
For those words.

02:00:45.000 --> 02:00:49.000
It's got the special treatment.

02:00:49.000 --> 02:00:53.000
That's

02:00:54.000 --> 02:00:58.000
Yes, I would rethink the problem.

02:00:58.000 --> 02:01:05.000
Which is why I asked because

02:01:05.000 --> 02:01:09.000
I have a state smart

02:01:09.000 --> 02:01:18.000
state state smart question for Chuck so you know what I was thinking is, you have a 32 bit wide fourth computer in an FPJ.

02:01:18.000 --> 02:01:27.000
Make the inside data bus 34 bits wide and then use the top four bits for your state.

02:01:27.000 --> 02:01:31.000
Or whether it's an immediate word, or

02:01:31.000 --> 02:01:39.000
you know compile, I guess it's compiling an immediate is that the two, two things you need to figure out.

02:01:40.000 --> 02:01:48.000
I have done that on one of the early computers that I

02:01:48.000 --> 02:01:53.000
had fabricated at 21 bit words.

02:01:53.000 --> 02:02:01.000
Whereas the memory was only 20 bits and that extra bit was used as a flag for various things.

02:02:01.000 --> 02:02:04.000
It was not good.

02:02:04.000 --> 02:02:12.000
It was, it was as awkward and confusing and difficult as anything else.

02:02:12.000 --> 02:02:15.000
Okay.

02:02:15.000 --> 02:02:25.000
I maybe I have a follow up question and another one on that you once talked about the ice principle interpret compile execute.

02:02:25.000 --> 02:02:31.000
So if we enroll everything into just compile.

02:02:31.000 --> 02:02:46.000
Don't we lose the interpretation capability to calculate things up front before we compile. So do we need interpret compile execute the ice principle.

02:02:47.000 --> 02:03:05.000
You're exactly right, we do need the ability to calculate things. And that's why in color fourth, if I compile green words, I can interpret interpolate white words to do the calculation.

02:03:05.000 --> 02:03:11.000
Yeah, so so we don't want to lose this and maybe on this also answers a little bit of that.

02:03:11.000 --> 02:03:20.000
We don't want to lose the capability to do execution while we compile and calculate things and generate code or whatever.

02:03:20.000 --> 02:03:29.000
I didn't propose to eliminate immediate words.

02:03:29.000 --> 02:03:31.000
Anyway,

02:03:31.000 --> 02:03:34.000
my second question.

02:03:34.000 --> 02:03:51.000
I was talking about the map is not the territory. And I would like to hear your current opinion on on the statement and how you think about abstraction.

02:03:51.000 --> 02:03:59.000
The map, the map is not the territory.

02:03:59.000 --> 02:04:04.000
But currently I prefer to work in the territory.

02:04:04.000 --> 02:04:08.000
No that's not it that's inaccurate either.

02:04:08.000 --> 02:04:11.000
In the case of drawing characters.

02:04:11.000 --> 02:04:17.000
You draw the character, or you can describe the character.

02:04:18.000 --> 02:04:22.000
Long time ago I would draw the characters.

02:04:22.000 --> 02:04:28.000
And that became a pain, because I would somehow move a pixel the wrong place.

02:04:28.000 --> 02:04:31.000
Now I describe the character.

02:04:31.000 --> 02:04:38.000
I've come up with, I think a very compact way of describing characters.

02:04:38.000 --> 02:04:40.000
So,

02:04:40.000 --> 02:04:44.000
I go back and forth between the map and the territory.

02:04:44.000 --> 02:04:55.000
I see. Yeah, thank you. Thank you very much and thank you very much for influencing my life over the last 40 years.

02:04:55.000 --> 02:05:03.000
Yeah, maybe without knowing it, but you did the responsibility.

02:05:03.000 --> 02:05:10.000
Right. Next question come from Travis.

02:05:10.000 --> 02:05:16.000
I'll unmute so that we can hear you.

02:05:16.000 --> 02:05:23.000
About eight deep return stacks.

02:05:23.000 --> 02:05:36.000
I found a number of different uses for return stacks like, for instance, I'll make a word I have a word that out that a lot space in the dictionary.

02:05:36.000 --> 02:05:41.000
And then deal us afterwards.

02:05:41.000 --> 02:05:56.000
And I'll use the return stack as scratch space for storing the top of the here pointer for an afterwards so I can restore it and return it.

02:05:56.000 --> 02:05:59.000
I think if an exception occurs.

02:05:59.000 --> 02:06:09.000
I'll catch the exception or store the step which the dictionary, then rethrow the exception.

02:06:09.000 --> 02:06:20.000
And also, in my fourth, I have to deal with exception frames, which go on this return stack.

02:06:20.000 --> 02:06:28.000
Or there can be nested exception frames, where one exception is within another.

02:06:28.000 --> 02:06:37.000
So, all the pop, and furthermore, the vote the tasking uses the return stack.

02:06:37.000 --> 02:06:58.000
So, to store registers and all that. So, in essence, I need far more than eight cells on the return stack store all the possible states.

02:06:58.000 --> 02:07:03.000
Even if my code itself does that go that deep.

02:07:03.000 --> 02:07:08.000
What are your thoughts on this.

02:07:08.000 --> 02:07:17.000
I understand you can have a larger, you can have a large multi purpose return stack certainly.

02:07:17.000 --> 02:07:22.000
My concern is that it's getting complicated.

02:07:22.000 --> 02:07:27.000
And I tend not to like it being complicated.

02:07:27.000 --> 02:07:32.000
I would observe that in the case of circular stacks.

02:07:32.000 --> 02:07:35.000
When you get an exception.

02:07:35.000 --> 02:07:51.000
You don't need to do anything to the stacks, you just leave them where they are and get on your business, because you don't need to keep them clean.

02:07:51.000 --> 02:07:53.000
Yeah.

02:07:53.000 --> 02:07:59.000
I think the simple solution is to have a small return stack.

02:07:59.000 --> 02:08:06.000
But I understand the convenience of having a large return stack.

02:08:06.000 --> 02:08:07.000
Thank you.

02:08:07.000 --> 02:08:16.000
Okay, we have two other guys that want to ask questions john Hardy please.

02:08:16.000 --> 02:08:32.000
Again, I was just, I mean, it's return stacks, an interesting topic because it is necessary to discuss all sorts of different aspects of fourth, because, because the return stack is so critical to the virtual machine.

02:08:32.000 --> 02:08:36.000
I'm interested in the changes that happened in colorful.

02:08:36.000 --> 02:08:49.000
One of them I have to do with your use of tail call optimization as a way of reducing. So, you know that we're optimizing away calls.

02:08:49.000 --> 02:08:55.000
So they become jumps, which means that they use less stack space.

02:08:55.000 --> 02:09:00.000
So, I can see that would reduce the size of a return stack.

02:09:00.000 --> 02:09:14.000
But one thing that seemed to get thrown away from my understanding of classic fourth is that you use a tow call optimization as a looping mechanism.

02:09:14.000 --> 02:09:26.000
And that you when you do when you in classic fourth when you redefine a word, or when you define a word you don't have access to that word it's hidden until you're finished defining it.

02:09:26.000 --> 02:09:35.000
Whereas in color fourth I believe the word is is visible so that you can call it so it can be called by itself.

02:09:35.000 --> 02:09:53.000
So, can you talk a little bit about that change in the language. And, you know, like, what are your thoughts about the way you're ditching the idea of the original fourth and going forward in this way.

02:09:53.000 --> 02:09:56.000
Yeah.

02:09:56.000 --> 02:10:06.000
The, the original way would be my preference that you rarely reference a word within itself.

02:10:06.000 --> 02:10:15.000
More likely you want to redefine the word, add some functionality to its previous definition.

02:10:16.000 --> 02:10:20.000
That was complicated and awkward.

02:10:20.000 --> 02:10:30.000
And in color fourth I just threw it away and said okay I'll have to live with the fact that if I want to redefine the name of a word.

02:10:30.000 --> 02:10:36.000
I'll have to say word colon word.

02:10:36.000 --> 02:10:41.000
Word zero word zero stuff stuff stuff.

02:10:41.000 --> 02:10:45.000
That's awkward, but it doesn't happen very often.

02:10:45.000 --> 02:10:51.000
Yeah.

02:10:51.000 --> 02:11:02.000
Actually, I found that in my fourth that doing it the way that you did it before.

02:11:02.000 --> 02:11:14.000
It's simply a matter of linking the word that you're compiling into dictionary after you hit the semi colon at the end.

02:11:14.000 --> 02:11:18.000
And it works.

02:11:18.000 --> 02:11:31.000
Basically, like, how it was where you, if you redefine a word you refer to its old meeting from within the new word without any work at all.

02:11:31.000 --> 02:11:36.000
That is, that is exactly right.

02:11:36.000 --> 02:11:42.000
But in my current fourth, semi colon does not indicate end of word.

02:11:42.000 --> 02:11:46.000
It merely indicates return from word return. Yeah.

02:11:46.000 --> 02:11:55.000
And so I have no word that identify the end of a word.

02:11:55.000 --> 02:11:57.000
Okay, john.

02:11:57.000 --> 02:11:59.000
Another question or

02:11:59.000 --> 02:12:01.000
No, that's it.

02:12:01.000 --> 02:12:05.000
You're done. Thank you very much.

02:12:05.000 --> 02:12:07.000
Satisfied.

02:12:07.000 --> 02:12:14.000
Okay, the last question for today comes from James Norris.

02:12:14.000 --> 02:12:23.000
I was wondering what the most fun thing you ever worked on was

02:12:23.000 --> 02:12:28.000
most fun thing.

02:12:28.000 --> 02:12:41.000
And it gives you frequent positive feedback.

02:12:41.000 --> 02:12:52.000
I have to say my chip layout and simulation.

02:12:52.000 --> 02:12:59.000
It took years, five years.

02:12:59.000 --> 02:13:05.000
But I was immediately doing good work after one week.

02:13:05.000 --> 02:13:12.000
So I got this positive feedback, which continue and continue and continue.

02:13:12.000 --> 02:13:18.000
The hard part of that was when you submit a chip for for fabrication.

02:13:18.000 --> 02:13:25.000
And you have to wait three months before you know whether it worked or not.

02:13:25.000 --> 02:13:29.000
And what do you do during those three months.

02:13:29.000 --> 02:13:37.000
But I have to say that was a lot of fun for a lot of years.

02:13:37.000 --> 02:13:41.000
This is great asking another question.

02:13:41.000 --> 02:14:02.000
The trip simulation is fantastic. I think one of your very first projects that you ever worked on was the, the telescopic pointing and the data analysis you did interactively in that on the system with all the other astronomers watching the work output.

02:14:02.000 --> 02:14:19.000
Because that is, that is quite significant to use something as large as a radio telescope to capture the data live and to manipulate the data to generate those graphs that I think are to be significant.

02:14:19.000 --> 02:14:33.000
Because at the time, there was this this millimeter radio telescope was being used to discover interstellar molecule molecules.

02:14:33.000 --> 02:14:44.000
Wow. And you would, you would, you would collect data and display it. And if there was a peak where you're expected to peak you discover the molecule.

02:14:44.000 --> 02:14:50.000
And the immediate feedback was very useful for the astronomers.

02:14:50.000 --> 02:15:05.000
But they still required that I record the raw data so they could take it home and repeat the analysis, even though that was completely unnecessary.

02:15:05.000 --> 02:15:07.000
Brilliant.

02:15:07.000 --> 02:15:12.000
You've done the processing already.

02:15:12.000 --> 02:15:18.000
I'm not going to redo it probably not as well because I had good statistics.

02:15:18.000 --> 02:15:22.000
Live statistics forget about post statistics.

02:15:22.000 --> 02:15:32.000
Well, guys, I see, and we had a fantastic meeting today. We need to thanks 1000 times to Chuck.

02:15:32.000 --> 02:15:35.000
And there are people in the meeting.

02:15:35.000 --> 02:15:51.000
I see Rob Jude from Australia. Do you want to say hello and anything to Chuck not not questions but only hi.

02:15:51.000 --> 02:15:57.000
Or do you have questions. Sorry.

02:15:57.000 --> 02:16:08.000
No questions. Okay, who else I see Ray Gardner also from Australia very late in the night.

02:16:08.000 --> 02:16:16.000
Ray.

02:16:16.000 --> 02:16:31.000
Ray showed us in the group in the Facebook group. Fantastic pictures of his boards with the RTX 2000 and image vision in Australia for machines for different machines so he's the.

02:16:31.000 --> 02:16:45.000
He's a wonderful for the run incredible incredible stuff. I see in the meeting Ashley Faniello wanted to show us the wonderful cognition do you want to say anything.

02:16:45.000 --> 02:16:49.000
Ashley, something to Chuck.

02:16:49.000 --> 02:17:02.000
I'll just hold Chuck. We met once in 2013 at the strange loop conference, but it's great to see you again it's always great to hear what you have to say.

02:17:02.000 --> 02:17:16.000
Who else. I see Ilya that as a foremost cow. He's chatting but he does not like to talk what happens either too much vodka today.

02:17:16.000 --> 02:17:28.000
Hello to Chuck. Okay. Okay, I'm here but I'm afraid with my new microphone is it will be not possible to hear me.

02:17:28.000 --> 02:17:33.000
Okay, very good. It's very good. I just want to say hello.

02:17:33.000 --> 02:17:36.000
No more. What else.

02:17:36.000 --> 02:17:37.000
Hello.

02:17:37.000 --> 02:17:42.000
What else and wish everyone to be healthy.

02:17:42.000 --> 02:17:47.000
Thank you. Thank you to you to 330 in the morning in Australia.

02:17:47.000 --> 02:17:55.000
Indeed this is a word by word translation of Russian hello be healthy.

02:17:55.000 --> 02:18:08.000
Wonderful. Thank you Ilya. I see also Jonas Carlson. Where are you in the world Jonas. Do you want to say hello to Chuck.

02:18:08.000 --> 02:18:23.000
Oh yeah one moment. Yes. So yeah I'm in Bangkok at the moment and well at the moment you're all stuck where we are right so it's two years.

02:18:23.000 --> 02:18:49.000
So I had time to play with a lot of things and the last thing I played a few months ago was 6502 fourth and I was reading in parallel a lot of things about color fourth in and I found similarities when I was basically creating a system with an online editor running on a 6502 where

02:18:49.000 --> 02:19:16.000
page 256 bytes was maybe it was buffer size basically and and this fourth was a bytecoded fourth actually is alphabetical bytecoded fourth so I use D for Duke and I use S for swap and so on and of course the arithmetic operations are plus and I remember reading

02:19:16.000 --> 02:19:31.000
when I was working on this that you actually liked the idea of a bytecoded fourth but you never really went to do that. Do you have any comments about that and especially about the code bloat today.

02:19:31.000 --> 02:19:46.000
We have so big systems and they are compiled to yield hundreds of bytes. Yeah, so that's my my general question.

02:19:47.000 --> 02:19:54.000
I thought about bytecoding.

02:19:54.000 --> 02:19:58.000
Other people have also.

02:19:58.000 --> 02:20:00.000
It's a good strategy.

02:20:00.000 --> 02:20:06.000
The closest I've come to it is the, the

02:20:06.000 --> 02:20:10.000
the 144 instruction codes.

02:20:10.000 --> 02:20:16.000
They are five bits.

02:20:16.000 --> 02:20:24.000
So effectively done by coding on the hardware.

02:20:24.000 --> 02:20:44.000
Arm microcontrollers with on the seven M have the T a BH and T H H instruction which are basically what you're asking for bytecode, the jump tables in mass manufactured CPUs, which can be used.

02:20:44.000 --> 02:20:52.000
Yeah, but at fourth with a very tiny interpreter.

02:20:52.000 --> 02:21:03.000
Yeah, I'm finally building my my so called alphabetical fourth, which is supposedly half readable kind of bytecode with the letters and symbols.

02:21:03.000 --> 02:21:18.000
And I'm writing a very tiny C compiler that compile C to this fourth and I have it kind of working for functional C with no variables and just the other day I added variables.

02:21:18.000 --> 02:21:35.000
So, as soon as I'll be able to compile C to fourth and the rationale for this is ESP 32, which I calculated that yes it's a very powerful thing that one line of C code usually ends up being about 80 bytes.

02:21:35.000 --> 02:21:43.000
Oh, fantastic. Jonas, we are saying bye bye. Bye bye. We are finishing. Bye bye. Thank you.

02:21:43.000 --> 02:21:46.000
Great. Another, another one here.

02:21:47.000 --> 02:21:51.000
Holy Neppu. Holy Neppu. Is this correct?

02:21:51.000 --> 02:21:53.000
Holy. Yeah, from time.

02:21:53.000 --> 02:21:55.000
Holy. How are you?

02:21:55.000 --> 02:22:02.000
I want to invite us to join this in, join this meeting.

02:22:03.000 --> 02:22:11.000
To say that I have developed the, the course compiler for different micros MC use.

02:22:11.000 --> 02:22:20.000
And the course compiler includes assembler disassembler and compiler and close compile.

02:22:20.000 --> 02:22:32.000
And one special trick is that once the assembler is generated, the disassembly is automatically generated.

02:22:32.000 --> 02:22:40.000
And the assembly that I designed is based on algebraic assembler.

02:22:40.000 --> 02:22:53.000
So, every microcontroller can be seen the same, because we use, I use the same, same instruction like register and immediate word.

02:22:53.000 --> 02:23:00.000
You can see that the old microcontroller can be seen as a false chip.

02:23:00.000 --> 02:23:11.000
Not the really false chip, but the, actually we, if we say it is for chip and it contains only register and immediate word.

02:23:11.000 --> 02:23:19.000
So that way, based on these two words, two, two characters, I can design the assembler based on these two.

02:23:19.000 --> 02:23:23.000
So every microcontroller seems the same.

02:23:23.000 --> 02:23:30.000
The assembler has, I can design the assembler in different way.

02:23:30.000 --> 02:23:36.000
Fantastic. This is, this is great news. So we, we love to hear from you.

02:23:36.000 --> 02:23:43.000
And we send all our regards to the fantastic thick Taiwan and all the great members you have.

02:23:43.000 --> 02:23:54.000
Also, in, in the name of the team who is here and he wanted to show, to show something, but we will do this in the next meeting because we are out of time.

02:23:54.000 --> 02:23:57.000
Thank you, Holly.

02:23:57.000 --> 02:24:02.000
Looking forward to hearing more about that later time.

02:24:02.000 --> 02:24:12.000
Another friend here is Igor Mats from Estonia. Is this correct the name Igor.

02:24:12.000 --> 02:24:18.000
Only to say hello to Chuck and wish, wish him well and etc.

02:24:18.000 --> 02:24:20.000
Do you hear me, yes.

02:24:20.000 --> 02:24:25.000
Yeah, but the mic is not making noise, but it will do.

02:24:25.000 --> 02:24:30.000
Hello Chuck, thank you very much for your creation.

02:24:30.000 --> 02:24:56.000
Thanks for the first time in my school and it made a big movement in my development as progress. Thank you very much for one more time and be healthy in this time and I wish you many years and a lot of implement your plans.

02:24:56.000 --> 02:25:15.000
Thank you Igor karsten. Do you want to say hi to Chuck and bye bye. Where are you from karsten from Germany.

02:25:15.000 --> 02:25:18.000
Carson, yeah.

02:25:18.000 --> 02:25:20.000
Your microphone.

02:25:20.000 --> 02:25:23.000
I cannot.

02:25:23.000 --> 02:25:33.000
I think you have to put on the volume, increase the volume, Karsten.

02:25:33.000 --> 02:25:36.000
Okay, no problem.

02:25:36.000 --> 02:25:45.000
Wave into the camera next time. So customers from Hamburg actually, oh, across the city.

02:25:45.000 --> 02:25:52.000
Right. Thank you very much Karsten for participating next next time we we talk with you.

02:25:52.000 --> 02:25:59.000
Also from Germany, do you want to say bye bye to check and thanks, etc.

02:25:59.000 --> 02:26:04.000
Thank you for the microphone who else I am.

02:26:04.000 --> 02:26:06.000
You're muted.

02:26:06.000 --> 02:26:26.000
Check. I want to say hello from Germany, benefit. And I was motivated to write my own force, my own tiny force, because everybody should write his own tiny for before using a professional for us, I think, and I learned it from you.

02:26:26.000 --> 02:26:43.000
And also Thomas Gweppel from Germany, he helped us putting the link in the hackaday so I thank you very much to Thomas, and he's also a great participant here in our meetings.

02:26:43.000 --> 02:26:46.000
No sound, Thomas.

02:26:46.000 --> 02:26:52.000
Hello.

02:26:52.000 --> 02:26:58.000
Thank you, then, if you have no sound, thank you, thank you again.

02:26:58.000 --> 02:27:02.000
Who else?

02:27:02.000 --> 02:27:10.000
Atle from Norway, do you want to say bye bye and thank you to Charles.

02:27:10.000 --> 02:27:18.000
I'm a relative newbie in short, and I just want to say thank you and I find it brilliant.

02:27:18.000 --> 02:27:25.000
Thank you. Anthony for a lot. Do you want to say bye bye and thanks to Chuck.

02:27:25.000 --> 02:27:37.000
Yes, I say hello to say hello to Chuck and thank you so much for all the difficult nights I have to work through to find books in my programs for me later.

02:27:37.000 --> 02:27:50.000
It was really enjoyable. And still today, two months ago I started a new project with forth, so it is still very alive for me. Thank you.

02:27:50.000 --> 02:27:58.000
Well, who else, George from Brazil, George is an item. Do you want to say.

02:27:58.000 --> 02:28:00.000
Oh, hi, I really see me.

02:28:00.000 --> 02:28:01.000
Yes.

02:28:01.000 --> 02:28:17.000
Hello, I'm George from Brazil. I'd like to say thank you everyone, especially Peter for organizing this event. Chuck for Discover, like he says, this incredible language, it's amazing.

02:28:17.000 --> 02:28:20.000
It's more than a language, it's a philosophy.

02:28:20.000 --> 02:28:31.000
I don't know what to think. I don't know. I really love this. It's a pleasure to talk about it.

02:28:31.000 --> 02:28:49.000
Forfe with people who likes Forfe. Oh, thanks. Thanks Peter, Ulrich, John Hard, Chuck, Dr. Ting, everyone. It's really, really nice to stay with them today.

02:28:49.000 --> 02:28:58.000
Thank you for your love in the language, George. You are a great father. I have also here, Thomas from Kern. Thomas.

02:28:58.000 --> 02:29:14.000
Yeah, thank you. Can you hear me. Thank you, Chuck. Thank you everybody for this very marvelous meeting. And I was using force of being in, I think, 85 to 87 brought my PhD, no my thesis in physics was a great time.

02:29:14.000 --> 02:29:19.000
So thank you all and have a good time, Chuck. See you soon.

02:29:19.000 --> 02:29:20.000
Bye bye.

02:29:20.000 --> 02:29:25.000
Thank you, Thomas. Pablo, the Argentina Pablo Reda.

02:29:25.000 --> 02:29:33.000
Hi, I like to say thank you to Chuck Moore. I am a color for fun.

02:29:33.000 --> 02:29:46.000
I'm learning for reading the color for the source. And I changed my life with this marvelous language. Thank you.

02:29:46.000 --> 02:29:54.000
Thank you, Pablo. Who else somebody else. And then we close Cecil Bayona. I don't know, Philip.

02:29:55.000 --> 02:30:09.000
So Chuck, again, many thanks for the inspiration you gave me during those years when I was a student and still now and and clearly you are a wonderful person. So thank you for everything.

02:30:09.000 --> 02:30:11.000
Fantastic.

02:30:11.000 --> 02:30:15.000
Thanks again, Chuck, for being here.

02:30:15.000 --> 02:30:19.000
I've been following force for many, many, many years.

02:30:19.000 --> 02:30:21.000
And in my youth.

02:30:21.000 --> 02:30:25.000
When I first heard about forth I was so excited.

02:30:25.000 --> 02:30:33.000
Somebody who wanted to keep things simple rather than the abortions we had for programming at the time.

02:30:33.000 --> 02:30:37.000
So thanks again for your great idea.

02:30:37.000 --> 02:30:41.000
And what can I say.

02:30:41.000 --> 02:30:44.000
Thank you again.

02:30:44.000 --> 02:30:57.000
Well, guys, this was fantastic. I don't know if Chuck agrees to that and we do all these meetings, thinking and thanking everybody in the first community.

02:30:57.000 --> 02:31:06.000
All people from as we think also who helped us every meeting and from all the communities in the world.

02:31:06.000 --> 02:31:10.000
How do you have a race, race in hand.

02:31:10.000 --> 02:31:15.000
Yeah. Chuck, is there any chance I could get my hands on your clock code.

02:31:15.000 --> 02:31:20.000
I'd like to put it in as an app in color fourth.

02:31:20.000 --> 02:31:26.000
You do you have any plans to post it anywhere.

02:31:26.000 --> 02:31:29.000
Hey,

02:31:29.000 --> 02:31:32.000
I don't have a vehicle for posting things.

02:31:32.000 --> 02:31:37.000
I can send it by email.

02:31:37.000 --> 02:31:42.000
I can send screen captures maybe I'll keep it in mind.

02:31:42.000 --> 02:31:50.000
Okay, I'd also like to see the source for your character generator code that interests me.

02:31:50.000 --> 02:31:54.000
That I would have would gladly publish.

02:31:54.000 --> 02:31:59.000
Again, if I had some way of doing it. I used to have a website.

02:31:59.000 --> 02:32:04.000
I was thinking, maybe I should reactivate the website.

02:32:04.000 --> 02:32:08.000
But I haven't yet.

02:32:08.000 --> 02:32:16.000
Okay, if you come up with any way of transferring it can help in any way let me know and I'll help you gladly.

02:32:16.000 --> 02:32:23.000
Okay, I want to thank you all for inviting me. It's been fun.

02:32:23.000 --> 02:32:28.000
And it's gratifying to see so many interested fourth people.

02:32:28.000 --> 02:32:33.000
And I'm sure you will in your endeavors.

02:32:33.000 --> 02:32:34.000
Thank you.

02:32:34.000 --> 02:32:37.000
Thank you.

02:32:37.000 --> 02:32:40.000
Thank you very much.

02:32:40.000 --> 02:32:41.000
Thank you.

02:32:41.000 --> 02:32:44.000
Thank you very much for joining us.

02:32:44.000 --> 02:32:46.000
Thank you.

02:32:46.000 --> 02:32:47.000
Thank you.

02:32:47.000 --> 02:32:48.000
Thank you everybody.

02:32:48.000 --> 02:32:49.000
Thank you.

