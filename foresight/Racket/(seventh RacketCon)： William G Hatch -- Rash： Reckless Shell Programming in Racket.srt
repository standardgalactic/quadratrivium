1
00:00:00,000 --> 00:00:03,360
So our next speaker will be William Hatch.

2
00:00:03,360 --> 00:00:05,800
William is a grad student at Utah.

3
00:00:05,800 --> 00:00:08,280
It's a wonderful place to be a grad student.

4
00:00:08,280 --> 00:00:11,960
This should become clear shortly.

5
00:00:11,960 --> 00:00:13,720
I don't actually tell my grad students,

6
00:00:13,720 --> 00:00:15,960
hey, you should go build a shell.

7
00:00:15,960 --> 00:00:17,840
But that's what William decided to do.

8
00:00:17,840 --> 00:00:19,720
So we're going to hear about it now.

9
00:00:19,720 --> 00:00:29,280
So we've seen some languages already and now we're going to

10
00:00:29,280 --> 00:00:31,680
see one by a guy who just loves to throw craft together

11
00:00:31,680 --> 00:00:34,800
really quickly using shell scripts.

12
00:00:34,800 --> 00:00:35,720
So I made rash.

13
00:00:35,720 --> 00:00:37,800
It's a shell language.

14
00:00:37,800 --> 00:00:40,200
And I love Unix shells.

15
00:00:40,200 --> 00:00:41,720
I love to just live in the terminal,

16
00:00:41,720 --> 00:00:44,920
interact with the computer through text.

17
00:00:44,920 --> 00:00:48,000
And I see myself repeating commands and things.

18
00:00:48,000 --> 00:00:50,200
And I think, ah, I'll make a shell script.

19
00:00:50,200 --> 00:00:55,600
So I love to wrap things up and gradually kind of abstract

20
00:00:55,600 --> 00:00:57,080
over things I do.

21
00:00:57,080 --> 00:01:00,480
But shell languages have a lot of issues, bash and friends.

22
00:01:00,480 --> 00:01:02,280
For instance, data structures, they

23
00:01:02,280 --> 00:01:03,520
have no real data structures.

24
00:01:03,520 --> 00:01:05,600
You just get strings and arrays.

25
00:01:05,600 --> 00:01:08,960
There are no modules, so it's hard to share your code

26
00:01:08,960 --> 00:01:10,800
between different scripts.

27
00:01:10,800 --> 00:01:13,160
There are a lot of safety issues.

28
00:01:13,160 --> 00:01:14,920
The defaults are all kind of bad.

29
00:01:14,920 --> 00:01:18,160
And you can add flags to change some of the behavior,

30
00:01:18,160 --> 00:01:20,720
but often that's still not really what you want.

31
00:01:20,720 --> 00:01:24,080
And as your script grows and you add more and more features,

32
00:01:24,080 --> 00:01:25,960
eventually you kind of hit a brick wall

33
00:01:25,960 --> 00:01:28,040
and you say, well, it's time to throw this out

34
00:01:28,040 --> 00:01:30,840
and re-implement from scratch in another language.

35
00:01:30,840 --> 00:01:34,880
So here's a little example of some syntax.

36
00:01:34,880 --> 00:01:36,600
So we have if and if.

37
00:01:36,600 --> 00:01:37,600
That's a little funky.

38
00:01:37,600 --> 00:01:39,960
I can live with that, though.

39
00:01:39,960 --> 00:01:42,440
It's a little weirder that these brackets aren't actually

40
00:01:42,440 --> 00:01:44,320
part of the bash syntax.

41
00:01:44,320 --> 00:01:45,520
It's an external program.

42
00:01:45,520 --> 00:01:48,440
It's clever, but it kind of has some issues.

43
00:01:48,440 --> 00:01:52,520
For instance, the real problem with this is it's almost right.

44
00:01:52,520 --> 00:01:54,000
It works most of the time.

45
00:01:54,040 --> 00:01:56,840
But if you get in an empty string,

46
00:01:56,840 --> 00:01:59,080
the test program suddenly gets one fewer argument

47
00:01:59,080 --> 00:02:00,600
and it blows up.

48
00:02:00,600 --> 00:02:02,840
So you really need to quote those variables

49
00:02:02,840 --> 00:02:03,880
to not have it do that.

50
00:02:03,880 --> 00:02:05,800
So you have to know all these kind of defensive coding

51
00:02:05,800 --> 00:02:07,760
strategies.

52
00:02:07,760 --> 00:02:10,720
But what I love about Shell, well, there are several things.

53
00:02:10,720 --> 00:02:12,640
But there are two things I'm going to focus on.

54
00:02:12,640 --> 00:02:14,120
One is pipelines.

55
00:02:14,120 --> 00:02:17,000
So here we have a pipeline of four programs.

56
00:02:17,000 --> 00:02:21,160
And you just get to write it in this lovely succinct syntax.

57
00:02:21,160 --> 00:02:23,160
And in most programming languages,

58
00:02:23,160 --> 00:02:25,600
running for a program, or just running one program,

59
00:02:25,600 --> 00:02:27,960
is going to be more syntactic hassle than this,

60
00:02:27,960 --> 00:02:32,000
let alone wiring together four of them.

61
00:02:32,000 --> 00:02:35,200
So since Shell languages all do kind of,

62
00:02:35,200 --> 00:02:37,200
they do these things, oh, the other thing

63
00:02:37,200 --> 00:02:38,680
I forgot to mention, the second thing,

64
00:02:38,680 --> 00:02:40,240
is the nice line-based syntax.

65
00:02:40,240 --> 00:02:42,520
It's really nice for interactive use,

66
00:02:42,520 --> 00:02:44,760
because it wanted to be an interactive user interface

67
00:02:44,760 --> 00:02:46,440
before a programming language.

68
00:02:46,440 --> 00:02:48,800
So you don't have to put a semicolon on the end of things.

69
00:02:49,440 --> 00:02:53,840
Lots of irritating parentheses.

70
00:02:53,840 --> 00:02:56,240
You just type what you want, hit Enter, and go.

71
00:02:56,240 --> 00:02:58,600
So since it has these things that it does so well,

72
00:02:58,600 --> 00:03:02,920
but everything else, it has to stand on its own as a language.

73
00:03:02,920 --> 00:03:05,480
So it'll put in all these kind of general purpose

74
00:03:05,480 --> 00:03:06,440
programming things.

75
00:03:06,440 --> 00:03:08,480
And they all are kind of bad.

76
00:03:08,480 --> 00:03:12,600
So wouldn't it be great to put the good things of Shell

77
00:03:12,600 --> 00:03:14,600
inside a general purpose programming language that

78
00:03:14,600 --> 00:03:17,120
does those things well, and have them kind of flow

79
00:03:17,120 --> 00:03:18,400
seamlessly together?

80
00:03:18,400 --> 00:03:20,800
So that's why I created RASH.

81
00:03:20,800 --> 00:03:23,160
So you can write stuff like this in it.

82
00:03:23,160 --> 00:03:24,560
That's what it's going to look like.

83
00:03:24,560 --> 00:03:26,440
But let's go through what builds it.

84
00:03:26,440 --> 00:03:28,000
It's made of four parts.

85
00:03:28,000 --> 00:03:29,920
The lowest part is my Shell Pipeline Library.

86
00:03:29,920 --> 00:03:32,640
It deals with functions and processes

87
00:03:32,640 --> 00:03:35,960
that deal with byte streams, and wiring them together.

88
00:03:35,960 --> 00:03:39,080
On top of that, I've built a mixed pipeline

89
00:03:39,080 --> 00:03:40,480
that deals with objects.

90
00:03:40,480 --> 00:03:42,880
So we have functions that take and produce objects,

91
00:03:42,880 --> 00:03:45,840
and also mixing them with the previous pipelines that

92
00:03:45,840 --> 00:03:47,760
just deal with byte streams.

93
00:03:47,800 --> 00:03:50,960
On top of that, there's a macro DSL layer

94
00:03:50,960 --> 00:03:52,400
that gives you a nice syntax.

95
00:03:52,400 --> 00:03:53,960
And it's extensible.

96
00:03:53,960 --> 00:03:56,960
There's a lot of sugar there to make useful things.

97
00:03:56,960 --> 00:04:01,600
And it's also built to be very flat and friendly

98
00:04:01,600 --> 00:04:03,600
for using just on a command line.

99
00:04:03,600 --> 00:04:06,840
And it synergizes with this last part, which is orthogonal.

100
00:04:06,840 --> 00:04:08,600
But they kind of work together well,

101
00:04:08,600 --> 00:04:10,480
which is the line syntax.

102
00:04:10,480 --> 00:04:14,320
It's a reader and macro support for just having

103
00:04:14,320 --> 00:04:17,160
a really nice line-based syntax.

104
00:04:17,200 --> 00:04:21,360
So the elephant in the room talking here at RacketCon

105
00:04:21,360 --> 00:04:22,960
is there's skis.

106
00:04:22,960 --> 00:04:26,280
If there's already a shell written in a scheme,

107
00:04:26,280 --> 00:04:27,360
why did I make a new one?

108
00:04:27,360 --> 00:04:28,920
Why didn't I just port this?

109
00:04:28,920 --> 00:04:30,480
And I feel skis kind of accomplishes

110
00:04:30,480 --> 00:04:32,080
a slightly different goal.

111
00:04:32,080 --> 00:04:37,080
It definitely has stuff for running processes and functions

112
00:04:37,480 --> 00:04:39,160
that work on byte streams.

113
00:04:39,160 --> 00:04:41,600
And it has a macro DSL wrapper.

114
00:04:41,600 --> 00:04:46,600
But skis, the macros, and mine are very different.

115
00:04:46,600 --> 00:04:49,960
Skis has a lot of parentheses, heavy nesting.

116
00:04:49,960 --> 00:04:52,360
It's not really something you wanna write on a command line.

117
00:04:52,360 --> 00:04:53,640
And I really wanted that.

118
00:04:53,640 --> 00:04:55,000
So mine is quite different.

119
00:04:55,000 --> 00:04:59,520
And also adds object pipelines since like PowerShell.

120
00:04:59,520 --> 00:05:01,800
That's obviously, you wanna work with objects

121
00:05:01,800 --> 00:05:03,160
and not just bytes.

122
00:05:03,160 --> 00:05:08,040
And the line syntax, so it's nice interactively, et cetera.

123
00:05:08,040 --> 00:05:09,520
So let's look at the pieces.

124
00:05:09,520 --> 00:05:10,960
First is shell pipeline.

125
00:05:10,960 --> 00:05:12,760
The main function in this, and actually all of them

126
00:05:12,760 --> 00:05:15,000
have a run pipeline function.

127
00:05:15,000 --> 00:05:17,680
But you just give it specifications

128
00:05:17,680 --> 00:05:18,880
of what programs you want to run.

129
00:05:18,880 --> 00:05:21,760
So we have ls, grep, et cetera.

130
00:05:21,760 --> 00:05:25,080
We can add flags to do output redirection and other things.

131
00:05:25,080 --> 00:05:28,080
And also we can put in racket function.

132
00:05:28,080 --> 00:05:31,040
So here my grep is defined as a racket function

133
00:05:31,040 --> 00:05:33,000
and we can put it in the middle of the pipeline.

134
00:05:33,000 --> 00:05:36,280
And it just has to read and write to standard out and whatnot.

135
00:05:38,040 --> 00:05:39,720
So going up to the mixed pipeline,

136
00:05:40,880 --> 00:05:43,600
we've seen with normal Unixy pipelines,

137
00:05:43,600 --> 00:05:45,640
you get a byte stream, which in racket

138
00:05:45,640 --> 00:05:46,920
is essentially a port.

139
00:05:46,920 --> 00:05:49,220
And with object pipes, we just want functions

140
00:05:49,220 --> 00:05:50,840
that pass around objects.

141
00:05:50,840 --> 00:05:54,480
And we're really just changing the way we're writing them.

142
00:05:54,480 --> 00:05:56,280
When they go together, a Unix pipe,

143
00:05:56,280 --> 00:05:58,160
since it can produce a port, obviously,

144
00:05:58,160 --> 00:06:00,280
a port is already a racket object.

145
00:06:00,280 --> 00:06:01,540
So that's convenient.

146
00:06:01,540 --> 00:06:04,320
The other way, we have to squish things down

147
00:06:04,320 --> 00:06:06,080
into a byte stream, which we're gonna do

148
00:06:06,080 --> 00:06:07,680
just by printing most of the time.

149
00:06:09,040 --> 00:06:12,520
But the syntax for that one is nothing great,

150
00:06:12,520 --> 00:06:14,760
but let's look at the wrapper for it.

151
00:06:14,760 --> 00:06:16,840
So here we have the pipeline macro.

152
00:06:16,840 --> 00:06:21,440
And this run pipeline recognizes these words

153
00:06:21,440 --> 00:06:23,080
that are in purple or maybe blue,

154
00:06:23,080 --> 00:06:24,840
depending on what you see.

155
00:06:24,840 --> 00:06:27,680
But they have also equal signs around them.

156
00:06:27,680 --> 00:06:30,600
That's my convention for writing pipeline operators.

157
00:06:30,600 --> 00:06:32,560
So the operators themselves are macros

158
00:06:32,560 --> 00:06:35,320
that get to determine how they take their input

159
00:06:35,320 --> 00:06:38,760
and produce the pipeline specifications.

160
00:06:38,760 --> 00:06:41,520
So being macros, they get to play all sorts of fun tricks.

161
00:06:41,520 --> 00:06:44,240
For instance, the Unix pipe can automatically quote

162
00:06:44,240 --> 00:06:46,240
identifiers that it gets, so you don't have to quote them

163
00:06:46,240 --> 00:06:49,360
or put them in strings or anything.

164
00:06:49,360 --> 00:06:52,360
The object pipe can generate something

165
00:06:52,360 --> 00:06:54,280
that will detect whether or not it gets a port

166
00:06:54,280 --> 00:06:55,820
and turn that into a string automatically,

167
00:06:55,820 --> 00:06:58,260
because that's usually what you want.

168
00:06:58,260 --> 00:07:00,320
This filter is just nice sugar.

169
00:07:00,320 --> 00:07:02,160
You always filter in pipelines.

170
00:07:02,160 --> 00:07:06,160
So this lets you just write essentially the body of a lambda

171
00:07:06,160 --> 00:07:09,760
rather than having the lambda and parentheses and everything.

172
00:07:09,760 --> 00:07:11,000
So nice sort of fit it in.

173
00:07:11,000 --> 00:07:15,040
And both the filter and object pipes automatically will,

174
00:07:15,040 --> 00:07:17,280
you see there's no explicit reference

175
00:07:17,280 --> 00:07:19,440
to the previous argument.

176
00:07:19,440 --> 00:07:21,080
They'll stick that in automatically for you

177
00:07:21,080 --> 00:07:23,240
if you don't explicitly say where it is.

178
00:07:23,240 --> 00:07:25,040
Obviously we want to use shorter names

179
00:07:25,040 --> 00:07:28,480
on like an interactive shell.

180
00:07:28,480 --> 00:07:30,880
So I'm going to use shorter names for most of the talk.

181
00:07:30,880 --> 00:07:33,320
And also the first one we can usually leave off.

182
00:07:33,320 --> 00:07:36,480
Since run pipeline can tell obviously where the operators

183
00:07:36,480 --> 00:07:40,600
are, it can tell if it starts, if it doesn't start with one.

184
00:07:40,600 --> 00:07:41,760
And there's a syntax parameter that

185
00:07:41,760 --> 00:07:46,000
lets us determine what is the current default.

186
00:07:46,000 --> 00:07:47,720
Also having these pipeline operators

187
00:07:47,720 --> 00:07:50,800
let us do have different choices.

188
00:07:50,800 --> 00:07:53,000
For instance, I've always in Bash wished

189
00:07:53,000 --> 00:07:56,840
that globs actually had a slightly heavier syntax.

190
00:07:56,840 --> 00:07:59,440
I've multiple times accidentally put a star

191
00:07:59,440 --> 00:08:03,960
or a question mark somewhere, forgetting it was a glob character

192
00:08:03,960 --> 00:08:06,600
and had things blow up horribly and do things I didn't want.

193
00:08:06,600 --> 00:08:10,420
So I want the top one, some non-autoglobbing shell

194
00:08:10,420 --> 00:08:11,740
or pipeline operator.

195
00:08:11,740 --> 00:08:13,660
But most people probably want the bottom one

196
00:08:13,660 --> 00:08:17,340
that's just more convenient for putting them in easily.

197
00:08:17,340 --> 00:08:20,180
So with customizable operators, we

198
00:08:20,180 --> 00:08:22,060
can both get what we want.

199
00:08:22,060 --> 00:08:24,420
And you can let your imagination run wild.

200
00:08:24,420 --> 00:08:25,700
I haven't written all of these.

201
00:08:25,700 --> 00:08:28,740
I've written a couple, but there are all sorts of fun things

202
00:08:28,740 --> 00:08:32,700
that you can do with these to have just a quick syntax

203
00:08:32,700 --> 00:08:37,300
that you can put on one line for all sorts of things.

204
00:08:37,300 --> 00:08:41,300
Finally, let's look at the line syntax.

205
00:08:41,300 --> 00:08:43,300
So the first thing we definitely need to do

206
00:08:43,300 --> 00:08:46,220
is get rid of the parentheses, which normally I love.

207
00:08:46,220 --> 00:08:49,420
But on the interactive command line, I don't.

208
00:08:49,420 --> 00:08:51,820
So we're going to have the beginning and end of line

209
00:08:51,820 --> 00:08:53,700
basically be like parentheses.

210
00:08:53,700 --> 00:08:57,980
So here we apply this function, all works as we expect.

211
00:08:57,980 --> 00:09:01,460
Also, it detects whether or not the line starts

212
00:09:01,460 --> 00:09:04,980
with a specially tagged macro called the line macro.

213
00:09:04,980 --> 00:09:07,660
And it will insert a default if there isn't one there.

214
00:09:07,660 --> 00:09:10,140
So supposing app is the default, we can leave it off.

215
00:09:10,140 --> 00:09:11,820
It's generally not going to be the default.

216
00:09:11,820 --> 00:09:15,420
But another line macro we want is CD.

217
00:09:15,420 --> 00:09:18,660
It's a classic in operating systems courses and stuff

218
00:09:18,660 --> 00:09:20,300
where they make you write a shell.

219
00:09:20,300 --> 00:09:23,380
It's always, oh, CD has to be a shell built in

220
00:09:23,380 --> 00:09:25,660
and not an external program because it's

221
00:09:25,660 --> 00:09:28,660
affecting the environment of the shell itself.

222
00:09:28,660 --> 00:09:30,700
And here we want it as a line macro

223
00:09:30,700 --> 00:09:34,180
so that we can not quote things and just write it

224
00:09:34,220 --> 00:09:36,380
on the line as fast as we can.

225
00:09:36,380 --> 00:09:38,580
Obviously where we're going is that run pipeline

226
00:09:38,580 --> 00:09:41,100
is the line macro that we want most of the time.

227
00:09:41,100 --> 00:09:44,580
And as the default, we can just leave it off, write ls,

228
00:09:44,580 --> 00:09:46,260
pipe, grab whatever.

229
00:09:46,260 --> 00:09:48,420
Also, the pipe character is a normal character

230
00:09:48,420 --> 00:09:49,900
in this hashling.

231
00:09:49,900 --> 00:09:52,100
So we can use it like this.

232
00:09:52,100 --> 00:09:54,180
We don't always want to issue the parentheses though.

233
00:09:54,180 --> 00:09:55,900
Sometimes we want to use them.

234
00:09:55,900 --> 00:09:58,900
So anytime you put parentheses in the middle of a pipeline,

235
00:09:58,900 --> 00:10:01,140
it's an escape to full on normal racket.

236
00:10:01,140 --> 00:10:03,940
So here we can compute the arguments to ls

237
00:10:03,940 --> 00:10:05,100
using racket code.

238
00:10:07,460 --> 00:10:10,060
Additionally, sometimes we want to bypass the line stuff.

239
00:10:10,060 --> 00:10:12,460
As nice it is to avoid parentheses,

240
00:10:12,460 --> 00:10:14,660
sometimes we like them.

241
00:10:14,660 --> 00:10:18,620
So we can just, any line that starts with an open parent

242
00:10:18,620 --> 00:10:21,060
is treated as a normal racket form

243
00:10:21,060 --> 00:10:23,940
instead of as the line macro stuff.

244
00:10:23,940 --> 00:10:27,220
So you can just dump in any normal racket code.

245
00:10:27,220 --> 00:10:28,900
So the nice thing about this,

246
00:10:28,900 --> 00:10:30,460
or one of the nice things about this

247
00:10:30,460 --> 00:10:33,340
is we can actually use it as kind of a drop in replacement

248
00:10:33,340 --> 00:10:34,980
for a racket base most of the time.

249
00:10:34,980 --> 00:10:38,140
99 point, however many nines of racket code

250
00:10:38,140 --> 00:10:40,380
are going to start with an open parent.

251
00:10:40,380 --> 00:10:42,660
The only reason to really put something

252
00:10:42,660 --> 00:10:44,660
without parentheses on the top level

253
00:10:44,660 --> 00:10:46,980
is to have it print the value out.

254
00:10:46,980 --> 00:10:49,060
So here, the only thing that would break

255
00:10:49,060 --> 00:10:52,220
if we change it to hashling rash is this B

256
00:10:52,220 --> 00:10:54,420
because it'll now get a line macro inserted.

257
00:10:54,420 --> 00:10:56,980
We can fix that obviously by wrapping it in parentheses

258
00:10:56,980 --> 00:11:00,660
or we could make some identity line macro.

259
00:11:00,660 --> 00:11:04,620
So this syntax is useful in either files

260
00:11:04,620 --> 00:11:07,580
or as an interactive rappel that gives you

261
00:11:07,580 --> 00:11:09,540
everything you normally want in racket

262
00:11:09,540 --> 00:11:12,580
plus say shell commands.

263
00:11:13,460 --> 00:11:18,180
So control flow, I didn't add any funky one off,

264
00:11:18,180 --> 00:11:21,580
for loops or if forms to the line syntax.

265
00:11:21,580 --> 00:11:24,260
I figure by the time I'm ready to write control flow,

266
00:11:24,260 --> 00:11:25,820
I'm ready to write a parenthesis.

267
00:11:25,820 --> 00:11:29,860
So rash just uses normal racket, if, for, et cetera.

268
00:11:30,780 --> 00:11:34,900
But now that we've seen how to escape from rash to racket,

269
00:11:34,900 --> 00:11:38,060
we need to see how to go the other way around as well.

270
00:11:38,060 --> 00:11:40,340
So never fear there's a macro for that.

271
00:11:40,340 --> 00:11:43,900
This rash macro inside the for loop takes

272
00:11:43,900 --> 00:11:47,780
this string and runs it as a rash code.

273
00:11:47,780 --> 00:11:50,260
These funny, angley things, they're called guillemets.

274
00:11:50,260 --> 00:11:51,900
They're used in a lot of other natural languages

275
00:11:51,900 --> 00:11:54,660
like Spanish, the way in English we use

276
00:11:54,660 --> 00:11:56,380
curly tick marks as quotes.

277
00:11:56,380 --> 00:11:59,220
And in racket, the way these work in rash

278
00:11:59,220 --> 00:12:01,300
and other things that use the common package

279
00:12:01,300 --> 00:12:04,700
is that they create a string that balances

280
00:12:04,700 --> 00:12:06,140
its delimiters and has no escaping.

281
00:12:06,140 --> 00:12:08,020
So you can nest them arbitrarily deep

282
00:12:08,020 --> 00:12:10,380
without having extra nesting stuff.

283
00:12:12,140 --> 00:12:14,860
And this string also, it doesn't live on at runtime,

284
00:12:14,860 --> 00:12:16,540
it's not evaluated or anything.

285
00:12:16,540 --> 00:12:18,820
But at compile time, this macro takes it and reads it

286
00:12:18,820 --> 00:12:20,540
and turns it into syntax objects

287
00:12:20,540 --> 00:12:23,300
with proper location and hygiene information.

288
00:12:23,300 --> 00:12:26,940
So the string here is really just trying to delimit

289
00:12:26,980 --> 00:12:29,500
where one reader is used and where another is.

290
00:12:30,700 --> 00:12:33,580
Of course, some people haven't liked the GMA things.

291
00:12:33,580 --> 00:12:36,780
You can also use the at reader and so do whatever you like.

292
00:12:36,780 --> 00:12:39,700
One thing I do like about the GMA sort of method though

293
00:12:39,700 --> 00:12:44,020
is it can also produce these kind of implicit identifiers.

294
00:12:44,020 --> 00:12:48,220
So these funny triangle parans here,

295
00:12:48,220 --> 00:12:50,340
they read as the same as the GMA

296
00:12:50,340 --> 00:12:52,800
but also produce this hash percent upper triangles.

297
00:12:52,800 --> 00:12:54,860
So if we bind that to be the rash macro,

298
00:12:54,860 --> 00:12:58,140
we can switch languages by just using funny parentheses.

299
00:12:58,140 --> 00:13:00,100
So here, in the middle of this for loop,

300
00:13:00,100 --> 00:13:02,220
we've got racket embedded in rash,

301
00:13:02,220 --> 00:13:04,340
embedded in rash, embedded in racket.

302
00:13:04,340 --> 00:13:06,820
And we just had to use switch back and forth

303
00:13:06,820 --> 00:13:09,060
between which parentheses we were using.

304
00:13:09,060 --> 00:13:11,500
And if you don't like funny Unicode things,

305
00:13:11,500 --> 00:13:13,860
you can just use like braces or something too.

306
00:13:15,580 --> 00:13:19,100
So one slight disclaimer, the library is not entirely stable.

307
00:13:19,100 --> 00:13:21,680
It's got a few rough edges.

308
00:13:21,680 --> 00:13:26,200
Everything here works, but there are two do's to be done.

309
00:13:26,200 --> 00:13:27,520
So let's have a quick demo.

310
00:13:31,240 --> 00:13:32,720
So everything that I was gonna do,

311
00:13:32,720 --> 00:13:34,080
I think I have in my command history.

312
00:13:34,080 --> 00:13:36,920
So obviously, we can do LS pipe to things,

313
00:13:36,920 --> 00:13:38,120
we can do aliases.

314
00:13:39,960 --> 00:13:43,040
Here we have a list, we embed it, we filter it,

315
00:13:43,040 --> 00:13:46,160
we send it to Calsay so we can have racket

316
00:13:46,160 --> 00:13:50,840
and Unix programs like the wonderful Calsay working together.

317
00:13:50,840 --> 00:13:54,720
Also, one thing that's done in, say, PowerShell

318
00:13:54,720 --> 00:13:56,120
is they've, at least on Windows,

319
00:13:56,120 --> 00:13:58,200
implemented a lot of system administration,

320
00:13:58,200 --> 00:14:02,400
sort of commands in C sharp that produce objects.

321
00:14:02,400 --> 00:14:04,440
So here, I've implemented a PS wrapper

322
00:14:04,440 --> 00:14:08,560
that the prompt knows how to print it out nicely as a table,

323
00:14:08,560 --> 00:14:11,240
but it's giving me an object.

324
00:14:11,240 --> 00:14:16,240
So I can sort it by keys rather than doing ad hoc parsing

325
00:14:16,800 --> 00:14:19,800
on the command line in the middle of the pipeline.

326
00:14:19,800 --> 00:14:24,800
Anyway, that's a look at it.

327
00:14:25,680 --> 00:14:29,080
So to conclude, we take the nice parts of shell,

328
00:14:29,080 --> 00:14:31,280
that wants to be just a really simple DSL,

329
00:14:31,280 --> 00:14:34,000
we put it inside racket and make it so you can

330
00:14:34,000 --> 00:14:36,240
easily and seamlessly switch between the two

331
00:14:36,240 --> 00:14:40,000
and it lets you both on the command line do nice things

332
00:14:40,000 --> 00:14:43,120
and it lets you grow shell scripts more from

333
00:14:43,120 --> 00:14:45,360
starting as a shell script and gradually replace things

334
00:14:45,360 --> 00:14:46,360
and put them in full racket

335
00:14:46,360 --> 00:14:48,920
rather than just throwing them away completely.

336
00:14:48,920 --> 00:14:51,320
So, yeah, thanks.

337
00:14:51,320 --> 00:14:56,320
Okay, one question, yes?

338
00:15:00,480 --> 00:15:03,320
Yeah, so the question was,

339
00:15:03,320 --> 00:15:06,640
am I planning on doing stuff like T and bash?

340
00:15:06,640 --> 00:15:08,480
Well, you can just put in T if you want,

341
00:15:08,480 --> 00:15:10,600
it's the next external program,

342
00:15:10,600 --> 00:15:15,160
but you can do redirections to arbitrary ports.

343
00:15:15,160 --> 00:15:18,840
I haven't put anything in yet to make that really nice,

344
00:15:18,840 --> 00:15:19,920
but you could put some sugar,

345
00:15:19,920 --> 00:15:24,920
a pipeline that has a good way of saying that, for instance.

346
00:15:25,440 --> 00:15:26,800
So it's possible.

347
00:15:26,800 --> 00:15:28,000
All right, if you have more questions

348
00:15:28,000 --> 00:15:29,200
and you're ready to give up on bash,

349
00:15:29,200 --> 00:15:30,800
then catch William later today.

