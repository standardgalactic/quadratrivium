start	end	text
0	3360	So our next speaker will be William Hatch.
3360	5800	William is a grad student at Utah.
5800	8280	It's a wonderful place to be a grad student.
8280	11960	This should become clear shortly.
11960	13720	I don't actually tell my grad students,
13720	15960	hey, you should go build a shell.
15960	17840	But that's what William decided to do.
17840	19720	So we're going to hear about it now.
19720	29280	So we've seen some languages already and now we're going to
29280	31680	see one by a guy who just loves to throw craft together
31680	34800	really quickly using shell scripts.
34800	35720	So I made rash.
35720	37800	It's a shell language.
37800	40200	And I love Unix shells.
40200	41720	I love to just live in the terminal,
41720	44920	interact with the computer through text.
44920	48000	And I see myself repeating commands and things.
48000	50200	And I think, ah, I'll make a shell script.
50200	55600	So I love to wrap things up and gradually kind of abstract
55600	57080	over things I do.
57080	60480	But shell languages have a lot of issues, bash and friends.
60480	62280	For instance, data structures, they
62280	63520	have no real data structures.
63520	65600	You just get strings and arrays.
65600	68960	There are no modules, so it's hard to share your code
68960	70800	between different scripts.
70800	73160	There are a lot of safety issues.
73160	74920	The defaults are all kind of bad.
74920	78160	And you can add flags to change some of the behavior,
78160	80720	but often that's still not really what you want.
80720	84080	And as your script grows and you add more and more features,
84080	85960	eventually you kind of hit a brick wall
85960	88040	and you say, well, it's time to throw this out
88040	90840	and re-implement from scratch in another language.
90840	94880	So here's a little example of some syntax.
94880	96600	So we have if and if.
96600	97600	That's a little funky.
97600	99960	I can live with that, though.
99960	102440	It's a little weirder that these brackets aren't actually
102440	104320	part of the bash syntax.
104320	105520	It's an external program.
105520	108440	It's clever, but it kind of has some issues.
108440	112520	For instance, the real problem with this is it's almost right.
112520	114000	It works most of the time.
114040	116840	But if you get in an empty string,
116840	119080	the test program suddenly gets one fewer argument
119080	120600	and it blows up.
120600	122840	So you really need to quote those variables
122840	123880	to not have it do that.
123880	125800	So you have to know all these kind of defensive coding
125800	127760	strategies.
127760	130720	But what I love about Shell, well, there are several things.
130720	132640	But there are two things I'm going to focus on.
132640	134120	One is pipelines.
134120	137000	So here we have a pipeline of four programs.
137000	141160	And you just get to write it in this lovely succinct syntax.
141160	143160	And in most programming languages,
143160	145600	running for a program, or just running one program,
145600	147960	is going to be more syntactic hassle than this,
147960	152000	let alone wiring together four of them.
152000	155200	So since Shell languages all do kind of,
155200	157200	they do these things, oh, the other thing
157200	158680	I forgot to mention, the second thing,
158680	160240	is the nice line-based syntax.
160240	162520	It's really nice for interactive use,
162520	164760	because it wanted to be an interactive user interface
164760	166440	before a programming language.
166440	168800	So you don't have to put a semicolon on the end of things.
169440	173840	Lots of irritating parentheses.
173840	176240	You just type what you want, hit Enter, and go.
176240	178600	So since it has these things that it does so well,
178600	182920	but everything else, it has to stand on its own as a language.
182920	185480	So it'll put in all these kind of general purpose
185480	186440	programming things.
186440	188480	And they all are kind of bad.
188480	192600	So wouldn't it be great to put the good things of Shell
192600	194600	inside a general purpose programming language that
194600	197120	does those things well, and have them kind of flow
197120	198400	seamlessly together?
198400	200800	So that's why I created RASH.
200800	203160	So you can write stuff like this in it.
203160	204560	That's what it's going to look like.
204560	206440	But let's go through what builds it.
206440	208000	It's made of four parts.
208000	209920	The lowest part is my Shell Pipeline Library.
209920	212640	It deals with functions and processes
212640	215960	that deal with byte streams, and wiring them together.
215960	219080	On top of that, I've built a mixed pipeline
219080	220480	that deals with objects.
220480	222880	So we have functions that take and produce objects,
222880	225840	and also mixing them with the previous pipelines that
225840	227760	just deal with byte streams.
227800	230960	On top of that, there's a macro DSL layer
230960	232400	that gives you a nice syntax.
232400	233960	And it's extensible.
233960	236960	There's a lot of sugar there to make useful things.
236960	241600	And it's also built to be very flat and friendly
241600	243600	for using just on a command line.
243600	246840	And it synergizes with this last part, which is orthogonal.
246840	248600	But they kind of work together well,
248600	250480	which is the line syntax.
250480	254320	It's a reader and macro support for just having
254320	257160	a really nice line-based syntax.
257200	261360	So the elephant in the room talking here at RacketCon
261360	262960	is there's skis.
262960	266280	If there's already a shell written in a scheme,
266280	267360	why did I make a new one?
267360	268920	Why didn't I just port this?
268920	270480	And I feel skis kind of accomplishes
270480	272080	a slightly different goal.
272080	277080	It definitely has stuff for running processes and functions
277480	279160	that work on byte streams.
279160	281600	And it has a macro DSL wrapper.
281600	286600	But skis, the macros, and mine are very different.
286600	289960	Skis has a lot of parentheses, heavy nesting.
289960	292360	It's not really something you wanna write on a command line.
292360	293640	And I really wanted that.
293640	295000	So mine is quite different.
295000	299520	And also adds object pipelines since like PowerShell.
299520	301800	That's obviously, you wanna work with objects
301800	303160	and not just bytes.
303160	308040	And the line syntax, so it's nice interactively, et cetera.
308040	309520	So let's look at the pieces.
309520	310960	First is shell pipeline.
310960	312760	The main function in this, and actually all of them
312760	315000	have a run pipeline function.
315000	317680	But you just give it specifications
317680	318880	of what programs you want to run.
318880	321760	So we have ls, grep, et cetera.
321760	325080	We can add flags to do output redirection and other things.
325080	328080	And also we can put in racket function.
328080	331040	So here my grep is defined as a racket function
331040	333000	and we can put it in the middle of the pipeline.
333000	336280	And it just has to read and write to standard out and whatnot.
338040	339720	So going up to the mixed pipeline,
340880	343600	we've seen with normal Unixy pipelines,
343600	345640	you get a byte stream, which in racket
345640	346920	is essentially a port.
346920	349220	And with object pipes, we just want functions
349220	350840	that pass around objects.
350840	354480	And we're really just changing the way we're writing them.
354480	356280	When they go together, a Unix pipe,
356280	358160	since it can produce a port, obviously,
358160	360280	a port is already a racket object.
360280	361540	So that's convenient.
361540	364320	The other way, we have to squish things down
364320	366080	into a byte stream, which we're gonna do
366080	367680	just by printing most of the time.
369040	372520	But the syntax for that one is nothing great,
372520	374760	but let's look at the wrapper for it.
374760	376840	So here we have the pipeline macro.
376840	381440	And this run pipeline recognizes these words
381440	383080	that are in purple or maybe blue,
383080	384840	depending on what you see.
384840	387680	But they have also equal signs around them.
387680	390600	That's my convention for writing pipeline operators.
390600	392560	So the operators themselves are macros
392560	395320	that get to determine how they take their input
395320	398760	and produce the pipeline specifications.
398760	401520	So being macros, they get to play all sorts of fun tricks.
401520	404240	For instance, the Unix pipe can automatically quote
404240	406240	identifiers that it gets, so you don't have to quote them
406240	409360	or put them in strings or anything.
409360	412360	The object pipe can generate something
412360	414280	that will detect whether or not it gets a port
414280	415820	and turn that into a string automatically,
415820	418260	because that's usually what you want.
418260	420320	This filter is just nice sugar.
420320	422160	You always filter in pipelines.
422160	426160	So this lets you just write essentially the body of a lambda
426160	429760	rather than having the lambda and parentheses and everything.
429760	431000	So nice sort of fit it in.
431000	435040	And both the filter and object pipes automatically will,
435040	437280	you see there's no explicit reference
437280	439440	to the previous argument.
439440	441080	They'll stick that in automatically for you
441080	443240	if you don't explicitly say where it is.
443240	445040	Obviously we want to use shorter names
445040	448480	on like an interactive shell.
448480	450880	So I'm going to use shorter names for most of the talk.
450880	453320	And also the first one we can usually leave off.
453320	456480	Since run pipeline can tell obviously where the operators
456480	460600	are, it can tell if it starts, if it doesn't start with one.
460600	461760	And there's a syntax parameter that
461760	466000	lets us determine what is the current default.
466000	467720	Also having these pipeline operators
467720	470800	let us do have different choices.
470800	473000	For instance, I've always in Bash wished
473000	476840	that globs actually had a slightly heavier syntax.
476840	479440	I've multiple times accidentally put a star
479440	483960	or a question mark somewhere, forgetting it was a glob character
483960	486600	and had things blow up horribly and do things I didn't want.
486600	490420	So I want the top one, some non-autoglobbing shell
490420	491740	or pipeline operator.
491740	493660	But most people probably want the bottom one
493660	497340	that's just more convenient for putting them in easily.
497340	500180	So with customizable operators, we
500180	502060	can both get what we want.
502060	504420	And you can let your imagination run wild.
504420	505700	I haven't written all of these.
505700	508740	I've written a couple, but there are all sorts of fun things
508740	512700	that you can do with these to have just a quick syntax
512700	517300	that you can put on one line for all sorts of things.
517300	521300	Finally, let's look at the line syntax.
521300	523300	So the first thing we definitely need to do
523300	526220	is get rid of the parentheses, which normally I love.
526220	529420	But on the interactive command line, I don't.
529420	531820	So we're going to have the beginning and end of line
531820	533700	basically be like parentheses.
533700	537980	So here we apply this function, all works as we expect.
537980	541460	Also, it detects whether or not the line starts
541460	544980	with a specially tagged macro called the line macro.
544980	547660	And it will insert a default if there isn't one there.
547660	550140	So supposing app is the default, we can leave it off.
550140	551820	It's generally not going to be the default.
551820	555420	But another line macro we want is CD.
555420	558660	It's a classic in operating systems courses and stuff
558660	560300	where they make you write a shell.
560300	563380	It's always, oh, CD has to be a shell built in
563380	565660	and not an external program because it's
565660	568660	affecting the environment of the shell itself.
568660	570700	And here we want it as a line macro
570700	574180	so that we can not quote things and just write it
574220	576380	on the line as fast as we can.
576380	578580	Obviously where we're going is that run pipeline
578580	581100	is the line macro that we want most of the time.
581100	584580	And as the default, we can just leave it off, write ls,
584580	586260	pipe, grab whatever.
586260	588420	Also, the pipe character is a normal character
588420	589900	in this hashling.
589900	592100	So we can use it like this.
592100	594180	We don't always want to issue the parentheses though.
594180	595900	Sometimes we want to use them.
595900	598900	So anytime you put parentheses in the middle of a pipeline,
598900	601140	it's an escape to full on normal racket.
601140	603940	So here we can compute the arguments to ls
603940	605100	using racket code.
607460	610060	Additionally, sometimes we want to bypass the line stuff.
610060	612460	As nice it is to avoid parentheses,
612460	614660	sometimes we like them.
614660	618620	So we can just, any line that starts with an open parent
618620	621060	is treated as a normal racket form
621060	623940	instead of as the line macro stuff.
623940	627220	So you can just dump in any normal racket code.
627220	628900	So the nice thing about this,
628900	630460	or one of the nice things about this
630460	633340	is we can actually use it as kind of a drop in replacement
633340	634980	for a racket base most of the time.
634980	638140	99 point, however many nines of racket code
638140	640380	are going to start with an open parent.
640380	642660	The only reason to really put something
642660	644660	without parentheses on the top level
644660	646980	is to have it print the value out.
646980	649060	So here, the only thing that would break
649060	652220	if we change it to hashling rash is this B
652220	654420	because it'll now get a line macro inserted.
654420	656980	We can fix that obviously by wrapping it in parentheses
656980	660660	or we could make some identity line macro.
660660	664620	So this syntax is useful in either files
664620	667580	or as an interactive rappel that gives you
667580	669540	everything you normally want in racket
669540	672580	plus say shell commands.
673460	678180	So control flow, I didn't add any funky one off,
678180	681580	for loops or if forms to the line syntax.
681580	684260	I figure by the time I'm ready to write control flow,
684260	685820	I'm ready to write a parenthesis.
685820	689860	So rash just uses normal racket, if, for, et cetera.
690780	694900	But now that we've seen how to escape from rash to racket,
694900	698060	we need to see how to go the other way around as well.
698060	700340	So never fear there's a macro for that.
700340	703900	This rash macro inside the for loop takes
703900	707780	this string and runs it as a rash code.
707780	710260	These funny, angley things, they're called guillemets.
710260	711900	They're used in a lot of other natural languages
711900	714660	like Spanish, the way in English we use
714660	716380	curly tick marks as quotes.
716380	719220	And in racket, the way these work in rash
719220	721300	and other things that use the common package
721300	724700	is that they create a string that balances
724700	726140	its delimiters and has no escaping.
726140	728020	So you can nest them arbitrarily deep
728020	730380	without having extra nesting stuff.
732140	734860	And this string also, it doesn't live on at runtime,
734860	736540	it's not evaluated or anything.
736540	738820	But at compile time, this macro takes it and reads it
738820	740540	and turns it into syntax objects
740540	743300	with proper location and hygiene information.
743300	746940	So the string here is really just trying to delimit
746980	749500	where one reader is used and where another is.
750700	753580	Of course, some people haven't liked the GMA things.
753580	756780	You can also use the at reader and so do whatever you like.
756780	759700	One thing I do like about the GMA sort of method though
759700	764020	is it can also produce these kind of implicit identifiers.
764020	768220	So these funny triangle parans here,
768220	770340	they read as the same as the GMA
770340	772800	but also produce this hash percent upper triangles.
772800	774860	So if we bind that to be the rash macro,
774860	778140	we can switch languages by just using funny parentheses.
778140	780100	So here, in the middle of this for loop,
780100	782220	we've got racket embedded in rash,
782220	784340	embedded in rash, embedded in racket.
784340	786820	And we just had to use switch back and forth
786820	789060	between which parentheses we were using.
789060	791500	And if you don't like funny Unicode things,
791500	793860	you can just use like braces or something too.
795580	799100	So one slight disclaimer, the library is not entirely stable.
799100	801680	It's got a few rough edges.
801680	806200	Everything here works, but there are two do's to be done.
806200	807520	So let's have a quick demo.
811240	812720	So everything that I was gonna do,
812720	814080	I think I have in my command history.
814080	816920	So obviously, we can do LS pipe to things,
816920	818120	we can do aliases.
819960	823040	Here we have a list, we embed it, we filter it,
823040	826160	we send it to Calsay so we can have racket
826160	830840	and Unix programs like the wonderful Calsay working together.
830840	834720	Also, one thing that's done in, say, PowerShell
834720	836120	is they've, at least on Windows,
836120	838200	implemented a lot of system administration,
838200	842400	sort of commands in C sharp that produce objects.
842400	844440	So here, I've implemented a PS wrapper
844440	848560	that the prompt knows how to print it out nicely as a table,
848560	851240	but it's giving me an object.
851240	856240	So I can sort it by keys rather than doing ad hoc parsing
856800	859800	on the command line in the middle of the pipeline.
859800	864800	Anyway, that's a look at it.
865680	869080	So to conclude, we take the nice parts of shell,
869080	871280	that wants to be just a really simple DSL,
871280	874000	we put it inside racket and make it so you can
874000	876240	easily and seamlessly switch between the two
876240	880000	and it lets you both on the command line do nice things
880000	883120	and it lets you grow shell scripts more from
883120	885360	starting as a shell script and gradually replace things
885360	886360	and put them in full racket
886360	888920	rather than just throwing them away completely.
888920	891320	So, yeah, thanks.
891320	896320	Okay, one question, yes?
900480	903320	Yeah, so the question was,
903320	906640	am I planning on doing stuff like T and bash?
906640	908480	Well, you can just put in T if you want,
908480	910600	it's the next external program,
910600	915160	but you can do redirections to arbitrary ports.
915160	918840	I haven't put anything in yet to make that really nice,
918840	919920	but you could put some sugar,
919920	924920	a pipeline that has a good way of saying that, for instance.
925440	926800	So it's possible.
926800	928000	All right, if you have more questions
928000	929200	and you're ready to give up on bash,
929200	930800	then catch William later today.
