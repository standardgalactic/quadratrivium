WEBVTT

00:00.000 --> 00:03.360
So our next speaker will be William Hatch.

00:03.360 --> 00:05.800
William is a grad student at Utah.

00:05.800 --> 00:08.280
It's a wonderful place to be a grad student.

00:08.280 --> 00:11.960
This should become clear shortly.

00:11.960 --> 00:13.720
I don't actually tell my grad students,

00:13.720 --> 00:15.960
hey, you should go build a shell.

00:15.960 --> 00:17.840
But that's what William decided to do.

00:17.840 --> 00:19.720
So we're going to hear about it now.

00:19.720 --> 00:29.280
So we've seen some languages already and now we're going to

00:29.280 --> 00:31.680
see one by a guy who just loves to throw craft together

00:31.680 --> 00:34.800
really quickly using shell scripts.

00:34.800 --> 00:35.720
So I made rash.

00:35.720 --> 00:37.800
It's a shell language.

00:37.800 --> 00:40.200
And I love Unix shells.

00:40.200 --> 00:41.720
I love to just live in the terminal,

00:41.720 --> 00:44.920
interact with the computer through text.

00:44.920 --> 00:48.000
And I see myself repeating commands and things.

00:48.000 --> 00:50.200
And I think, ah, I'll make a shell script.

00:50.200 --> 00:55.600
So I love to wrap things up and gradually kind of abstract

00:55.600 --> 00:57.080
over things I do.

00:57.080 --> 01:00.480
But shell languages have a lot of issues, bash and friends.

01:00.480 --> 01:02.280
For instance, data structures, they

01:02.280 --> 01:03.520
have no real data structures.

01:03.520 --> 01:05.600
You just get strings and arrays.

01:05.600 --> 01:08.960
There are no modules, so it's hard to share your code

01:08.960 --> 01:10.800
between different scripts.

01:10.800 --> 01:13.160
There are a lot of safety issues.

01:13.160 --> 01:14.920
The defaults are all kind of bad.

01:14.920 --> 01:18.160
And you can add flags to change some of the behavior,

01:18.160 --> 01:20.720
but often that's still not really what you want.

01:20.720 --> 01:24.080
And as your script grows and you add more and more features,

01:24.080 --> 01:25.960
eventually you kind of hit a brick wall

01:25.960 --> 01:28.040
and you say, well, it's time to throw this out

01:28.040 --> 01:30.840
and re-implement from scratch in another language.

01:30.840 --> 01:34.880
So here's a little example of some syntax.

01:34.880 --> 01:36.600
So we have if and if.

01:36.600 --> 01:37.600
That's a little funky.

01:37.600 --> 01:39.960
I can live with that, though.

01:39.960 --> 01:42.440
It's a little weirder that these brackets aren't actually

01:42.440 --> 01:44.320
part of the bash syntax.

01:44.320 --> 01:45.520
It's an external program.

01:45.520 --> 01:48.440
It's clever, but it kind of has some issues.

01:48.440 --> 01:52.520
For instance, the real problem with this is it's almost right.

01:52.520 --> 01:54.000
It works most of the time.

01:54.040 --> 01:56.840
But if you get in an empty string,

01:56.840 --> 01:59.080
the test program suddenly gets one fewer argument

01:59.080 --> 02:00.600
and it blows up.

02:00.600 --> 02:02.840
So you really need to quote those variables

02:02.840 --> 02:03.880
to not have it do that.

02:03.880 --> 02:05.800
So you have to know all these kind of defensive coding

02:05.800 --> 02:07.760
strategies.

02:07.760 --> 02:10.720
But what I love about Shell, well, there are several things.

02:10.720 --> 02:12.640
But there are two things I'm going to focus on.

02:12.640 --> 02:14.120
One is pipelines.

02:14.120 --> 02:17.000
So here we have a pipeline of four programs.

02:17.000 --> 02:21.160
And you just get to write it in this lovely succinct syntax.

02:21.160 --> 02:23.160
And in most programming languages,

02:23.160 --> 02:25.600
running for a program, or just running one program,

02:25.600 --> 02:27.960
is going to be more syntactic hassle than this,

02:27.960 --> 02:32.000
let alone wiring together four of them.

02:32.000 --> 02:35.200
So since Shell languages all do kind of,

02:35.200 --> 02:37.200
they do these things, oh, the other thing

02:37.200 --> 02:38.680
I forgot to mention, the second thing,

02:38.680 --> 02:40.240
is the nice line-based syntax.

02:40.240 --> 02:42.520
It's really nice for interactive use,

02:42.520 --> 02:44.760
because it wanted to be an interactive user interface

02:44.760 --> 02:46.440
before a programming language.

02:46.440 --> 02:48.800
So you don't have to put a semicolon on the end of things.

02:49.440 --> 02:53.840
Lots of irritating parentheses.

02:53.840 --> 02:56.240
You just type what you want, hit Enter, and go.

02:56.240 --> 02:58.600
So since it has these things that it does so well,

02:58.600 --> 03:02.920
but everything else, it has to stand on its own as a language.

03:02.920 --> 03:05.480
So it'll put in all these kind of general purpose

03:05.480 --> 03:06.440
programming things.

03:06.440 --> 03:08.480
And they all are kind of bad.

03:08.480 --> 03:12.600
So wouldn't it be great to put the good things of Shell

03:12.600 --> 03:14.600
inside a general purpose programming language that

03:14.600 --> 03:17.120
does those things well, and have them kind of flow

03:17.120 --> 03:18.400
seamlessly together?

03:18.400 --> 03:20.800
So that's why I created RASH.

03:20.800 --> 03:23.160
So you can write stuff like this in it.

03:23.160 --> 03:24.560
That's what it's going to look like.

03:24.560 --> 03:26.440
But let's go through what builds it.

03:26.440 --> 03:28.000
It's made of four parts.

03:28.000 --> 03:29.920
The lowest part is my Shell Pipeline Library.

03:29.920 --> 03:32.640
It deals with functions and processes

03:32.640 --> 03:35.960
that deal with byte streams, and wiring them together.

03:35.960 --> 03:39.080
On top of that, I've built a mixed pipeline

03:39.080 --> 03:40.480
that deals with objects.

03:40.480 --> 03:42.880
So we have functions that take and produce objects,

03:42.880 --> 03:45.840
and also mixing them with the previous pipelines that

03:45.840 --> 03:47.760
just deal with byte streams.

03:47.800 --> 03:50.960
On top of that, there's a macro DSL layer

03:50.960 --> 03:52.400
that gives you a nice syntax.

03:52.400 --> 03:53.960
And it's extensible.

03:53.960 --> 03:56.960
There's a lot of sugar there to make useful things.

03:56.960 --> 04:01.600
And it's also built to be very flat and friendly

04:01.600 --> 04:03.600
for using just on a command line.

04:03.600 --> 04:06.840
And it synergizes with this last part, which is orthogonal.

04:06.840 --> 04:08.600
But they kind of work together well,

04:08.600 --> 04:10.480
which is the line syntax.

04:10.480 --> 04:14.320
It's a reader and macro support for just having

04:14.320 --> 04:17.160
a really nice line-based syntax.

04:17.200 --> 04:21.360
So the elephant in the room talking here at RacketCon

04:21.360 --> 04:22.960
is there's skis.

04:22.960 --> 04:26.280
If there's already a shell written in a scheme,

04:26.280 --> 04:27.360
why did I make a new one?

04:27.360 --> 04:28.920
Why didn't I just port this?

04:28.920 --> 04:30.480
And I feel skis kind of accomplishes

04:30.480 --> 04:32.080
a slightly different goal.

04:32.080 --> 04:37.080
It definitely has stuff for running processes and functions

04:37.480 --> 04:39.160
that work on byte streams.

04:39.160 --> 04:41.600
And it has a macro DSL wrapper.

04:41.600 --> 04:46.600
But skis, the macros, and mine are very different.

04:46.600 --> 04:49.960
Skis has a lot of parentheses, heavy nesting.

04:49.960 --> 04:52.360
It's not really something you wanna write on a command line.

04:52.360 --> 04:53.640
And I really wanted that.

04:53.640 --> 04:55.000
So mine is quite different.

04:55.000 --> 04:59.520
And also adds object pipelines since like PowerShell.

04:59.520 --> 05:01.800
That's obviously, you wanna work with objects

05:01.800 --> 05:03.160
and not just bytes.

05:03.160 --> 05:08.040
And the line syntax, so it's nice interactively, et cetera.

05:08.040 --> 05:09.520
So let's look at the pieces.

05:09.520 --> 05:10.960
First is shell pipeline.

05:10.960 --> 05:12.760
The main function in this, and actually all of them

05:12.760 --> 05:15.000
have a run pipeline function.

05:15.000 --> 05:17.680
But you just give it specifications

05:17.680 --> 05:18.880
of what programs you want to run.

05:18.880 --> 05:21.760
So we have ls, grep, et cetera.

05:21.760 --> 05:25.080
We can add flags to do output redirection and other things.

05:25.080 --> 05:28.080
And also we can put in racket function.

05:28.080 --> 05:31.040
So here my grep is defined as a racket function

05:31.040 --> 05:33.000
and we can put it in the middle of the pipeline.

05:33.000 --> 05:36.280
And it just has to read and write to standard out and whatnot.

05:38.040 --> 05:39.720
So going up to the mixed pipeline,

05:40.880 --> 05:43.600
we've seen with normal Unixy pipelines,

05:43.600 --> 05:45.640
you get a byte stream, which in racket

05:45.640 --> 05:46.920
is essentially a port.

05:46.920 --> 05:49.220
And with object pipes, we just want functions

05:49.220 --> 05:50.840
that pass around objects.

05:50.840 --> 05:54.480
And we're really just changing the way we're writing them.

05:54.480 --> 05:56.280
When they go together, a Unix pipe,

05:56.280 --> 05:58.160
since it can produce a port, obviously,

05:58.160 --> 06:00.280
a port is already a racket object.

06:00.280 --> 06:01.540
So that's convenient.

06:01.540 --> 06:04.320
The other way, we have to squish things down

06:04.320 --> 06:06.080
into a byte stream, which we're gonna do

06:06.080 --> 06:07.680
just by printing most of the time.

06:09.040 --> 06:12.520
But the syntax for that one is nothing great,

06:12.520 --> 06:14.760
but let's look at the wrapper for it.

06:14.760 --> 06:16.840
So here we have the pipeline macro.

06:16.840 --> 06:21.440
And this run pipeline recognizes these words

06:21.440 --> 06:23.080
that are in purple or maybe blue,

06:23.080 --> 06:24.840
depending on what you see.

06:24.840 --> 06:27.680
But they have also equal signs around them.

06:27.680 --> 06:30.600
That's my convention for writing pipeline operators.

06:30.600 --> 06:32.560
So the operators themselves are macros

06:32.560 --> 06:35.320
that get to determine how they take their input

06:35.320 --> 06:38.760
and produce the pipeline specifications.

06:38.760 --> 06:41.520
So being macros, they get to play all sorts of fun tricks.

06:41.520 --> 06:44.240
For instance, the Unix pipe can automatically quote

06:44.240 --> 06:46.240
identifiers that it gets, so you don't have to quote them

06:46.240 --> 06:49.360
or put them in strings or anything.

06:49.360 --> 06:52.360
The object pipe can generate something

06:52.360 --> 06:54.280
that will detect whether or not it gets a port

06:54.280 --> 06:55.820
and turn that into a string automatically,

06:55.820 --> 06:58.260
because that's usually what you want.

06:58.260 --> 07:00.320
This filter is just nice sugar.

07:00.320 --> 07:02.160
You always filter in pipelines.

07:02.160 --> 07:06.160
So this lets you just write essentially the body of a lambda

07:06.160 --> 07:09.760
rather than having the lambda and parentheses and everything.

07:09.760 --> 07:11.000
So nice sort of fit it in.

07:11.000 --> 07:15.040
And both the filter and object pipes automatically will,

07:15.040 --> 07:17.280
you see there's no explicit reference

07:17.280 --> 07:19.440
to the previous argument.

07:19.440 --> 07:21.080
They'll stick that in automatically for you

07:21.080 --> 07:23.240
if you don't explicitly say where it is.

07:23.240 --> 07:25.040
Obviously we want to use shorter names

07:25.040 --> 07:28.480
on like an interactive shell.

07:28.480 --> 07:30.880
So I'm going to use shorter names for most of the talk.

07:30.880 --> 07:33.320
And also the first one we can usually leave off.

07:33.320 --> 07:36.480
Since run pipeline can tell obviously where the operators

07:36.480 --> 07:40.600
are, it can tell if it starts, if it doesn't start with one.

07:40.600 --> 07:41.760
And there's a syntax parameter that

07:41.760 --> 07:46.000
lets us determine what is the current default.

07:46.000 --> 07:47.720
Also having these pipeline operators

07:47.720 --> 07:50.800
let us do have different choices.

07:50.800 --> 07:53.000
For instance, I've always in Bash wished

07:53.000 --> 07:56.840
that globs actually had a slightly heavier syntax.

07:56.840 --> 07:59.440
I've multiple times accidentally put a star

07:59.440 --> 08:03.960
or a question mark somewhere, forgetting it was a glob character

08:03.960 --> 08:06.600
and had things blow up horribly and do things I didn't want.

08:06.600 --> 08:10.420
So I want the top one, some non-autoglobbing shell

08:10.420 --> 08:11.740
or pipeline operator.

08:11.740 --> 08:13.660
But most people probably want the bottom one

08:13.660 --> 08:17.340
that's just more convenient for putting them in easily.

08:17.340 --> 08:20.180
So with customizable operators, we

08:20.180 --> 08:22.060
can both get what we want.

08:22.060 --> 08:24.420
And you can let your imagination run wild.

08:24.420 --> 08:25.700
I haven't written all of these.

08:25.700 --> 08:28.740
I've written a couple, but there are all sorts of fun things

08:28.740 --> 08:32.700
that you can do with these to have just a quick syntax

08:32.700 --> 08:37.300
that you can put on one line for all sorts of things.

08:37.300 --> 08:41.300
Finally, let's look at the line syntax.

08:41.300 --> 08:43.300
So the first thing we definitely need to do

08:43.300 --> 08:46.220
is get rid of the parentheses, which normally I love.

08:46.220 --> 08:49.420
But on the interactive command line, I don't.

08:49.420 --> 08:51.820
So we're going to have the beginning and end of line

08:51.820 --> 08:53.700
basically be like parentheses.

08:53.700 --> 08:57.980
So here we apply this function, all works as we expect.

08:57.980 --> 09:01.460
Also, it detects whether or not the line starts

09:01.460 --> 09:04.980
with a specially tagged macro called the line macro.

09:04.980 --> 09:07.660
And it will insert a default if there isn't one there.

09:07.660 --> 09:10.140
So supposing app is the default, we can leave it off.

09:10.140 --> 09:11.820
It's generally not going to be the default.

09:11.820 --> 09:15.420
But another line macro we want is CD.

09:15.420 --> 09:18.660
It's a classic in operating systems courses and stuff

09:18.660 --> 09:20.300
where they make you write a shell.

09:20.300 --> 09:23.380
It's always, oh, CD has to be a shell built in

09:23.380 --> 09:25.660
and not an external program because it's

09:25.660 --> 09:28.660
affecting the environment of the shell itself.

09:28.660 --> 09:30.700
And here we want it as a line macro

09:30.700 --> 09:34.180
so that we can not quote things and just write it

09:34.220 --> 09:36.380
on the line as fast as we can.

09:36.380 --> 09:38.580
Obviously where we're going is that run pipeline

09:38.580 --> 09:41.100
is the line macro that we want most of the time.

09:41.100 --> 09:44.580
And as the default, we can just leave it off, write ls,

09:44.580 --> 09:46.260
pipe, grab whatever.

09:46.260 --> 09:48.420
Also, the pipe character is a normal character

09:48.420 --> 09:49.900
in this hashling.

09:49.900 --> 09:52.100
So we can use it like this.

09:52.100 --> 09:54.180
We don't always want to issue the parentheses though.

09:54.180 --> 09:55.900
Sometimes we want to use them.

09:55.900 --> 09:58.900
So anytime you put parentheses in the middle of a pipeline,

09:58.900 --> 10:01.140
it's an escape to full on normal racket.

10:01.140 --> 10:03.940
So here we can compute the arguments to ls

10:03.940 --> 10:05.100
using racket code.

10:07.460 --> 10:10.060
Additionally, sometimes we want to bypass the line stuff.

10:10.060 --> 10:12.460
As nice it is to avoid parentheses,

10:12.460 --> 10:14.660
sometimes we like them.

10:14.660 --> 10:18.620
So we can just, any line that starts with an open parent

10:18.620 --> 10:21.060
is treated as a normal racket form

10:21.060 --> 10:23.940
instead of as the line macro stuff.

10:23.940 --> 10:27.220
So you can just dump in any normal racket code.

10:27.220 --> 10:28.900
So the nice thing about this,

10:28.900 --> 10:30.460
or one of the nice things about this

10:30.460 --> 10:33.340
is we can actually use it as kind of a drop in replacement

10:33.340 --> 10:34.980
for a racket base most of the time.

10:34.980 --> 10:38.140
99 point, however many nines of racket code

10:38.140 --> 10:40.380
are going to start with an open parent.

10:40.380 --> 10:42.660
The only reason to really put something

10:42.660 --> 10:44.660
without parentheses on the top level

10:44.660 --> 10:46.980
is to have it print the value out.

10:46.980 --> 10:49.060
So here, the only thing that would break

10:49.060 --> 10:52.220
if we change it to hashling rash is this B

10:52.220 --> 10:54.420
because it'll now get a line macro inserted.

10:54.420 --> 10:56.980
We can fix that obviously by wrapping it in parentheses

10:56.980 --> 11:00.660
or we could make some identity line macro.

11:00.660 --> 11:04.620
So this syntax is useful in either files

11:04.620 --> 11:07.580
or as an interactive rappel that gives you

11:07.580 --> 11:09.540
everything you normally want in racket

11:09.540 --> 11:12.580
plus say shell commands.

11:13.460 --> 11:18.180
So control flow, I didn't add any funky one off,

11:18.180 --> 11:21.580
for loops or if forms to the line syntax.

11:21.580 --> 11:24.260
I figure by the time I'm ready to write control flow,

11:24.260 --> 11:25.820
I'm ready to write a parenthesis.

11:25.820 --> 11:29.860
So rash just uses normal racket, if, for, et cetera.

11:30.780 --> 11:34.900
But now that we've seen how to escape from rash to racket,

11:34.900 --> 11:38.060
we need to see how to go the other way around as well.

11:38.060 --> 11:40.340
So never fear there's a macro for that.

11:40.340 --> 11:43.900
This rash macro inside the for loop takes

11:43.900 --> 11:47.780
this string and runs it as a rash code.

11:47.780 --> 11:50.260
These funny, angley things, they're called guillemets.

11:50.260 --> 11:51.900
They're used in a lot of other natural languages

11:51.900 --> 11:54.660
like Spanish, the way in English we use

11:54.660 --> 11:56.380
curly tick marks as quotes.

11:56.380 --> 11:59.220
And in racket, the way these work in rash

11:59.220 --> 12:01.300
and other things that use the common package

12:01.300 --> 12:04.700
is that they create a string that balances

12:04.700 --> 12:06.140
its delimiters and has no escaping.

12:06.140 --> 12:08.020
So you can nest them arbitrarily deep

12:08.020 --> 12:10.380
without having extra nesting stuff.

12:12.140 --> 12:14.860
And this string also, it doesn't live on at runtime,

12:14.860 --> 12:16.540
it's not evaluated or anything.

12:16.540 --> 12:18.820
But at compile time, this macro takes it and reads it

12:18.820 --> 12:20.540
and turns it into syntax objects

12:20.540 --> 12:23.300
with proper location and hygiene information.

12:23.300 --> 12:26.940
So the string here is really just trying to delimit

12:26.980 --> 12:29.500
where one reader is used and where another is.

12:30.700 --> 12:33.580
Of course, some people haven't liked the GMA things.

12:33.580 --> 12:36.780
You can also use the at reader and so do whatever you like.

12:36.780 --> 12:39.700
One thing I do like about the GMA sort of method though

12:39.700 --> 12:44.020
is it can also produce these kind of implicit identifiers.

12:44.020 --> 12:48.220
So these funny triangle parans here,

12:48.220 --> 12:50.340
they read as the same as the GMA

12:50.340 --> 12:52.800
but also produce this hash percent upper triangles.

12:52.800 --> 12:54.860
So if we bind that to be the rash macro,

12:54.860 --> 12:58.140
we can switch languages by just using funny parentheses.

12:58.140 --> 13:00.100
So here, in the middle of this for loop,

13:00.100 --> 13:02.220
we've got racket embedded in rash,

13:02.220 --> 13:04.340
embedded in rash, embedded in racket.

13:04.340 --> 13:06.820
And we just had to use switch back and forth

13:06.820 --> 13:09.060
between which parentheses we were using.

13:09.060 --> 13:11.500
And if you don't like funny Unicode things,

13:11.500 --> 13:13.860
you can just use like braces or something too.

13:15.580 --> 13:19.100
So one slight disclaimer, the library is not entirely stable.

13:19.100 --> 13:21.680
It's got a few rough edges.

13:21.680 --> 13:26.200
Everything here works, but there are two do's to be done.

13:26.200 --> 13:27.520
So let's have a quick demo.

13:31.240 --> 13:32.720
So everything that I was gonna do,

13:32.720 --> 13:34.080
I think I have in my command history.

13:34.080 --> 13:36.920
So obviously, we can do LS pipe to things,

13:36.920 --> 13:38.120
we can do aliases.

13:39.960 --> 13:43.040
Here we have a list, we embed it, we filter it,

13:43.040 --> 13:46.160
we send it to Calsay so we can have racket

13:46.160 --> 13:50.840
and Unix programs like the wonderful Calsay working together.

13:50.840 --> 13:54.720
Also, one thing that's done in, say, PowerShell

13:54.720 --> 13:56.120
is they've, at least on Windows,

13:56.120 --> 13:58.200
implemented a lot of system administration,

13:58.200 --> 14:02.400
sort of commands in C sharp that produce objects.

14:02.400 --> 14:04.440
So here, I've implemented a PS wrapper

14:04.440 --> 14:08.560
that the prompt knows how to print it out nicely as a table,

14:08.560 --> 14:11.240
but it's giving me an object.

14:11.240 --> 14:16.240
So I can sort it by keys rather than doing ad hoc parsing

14:16.800 --> 14:19.800
on the command line in the middle of the pipeline.

14:19.800 --> 14:24.800
Anyway, that's a look at it.

14:25.680 --> 14:29.080
So to conclude, we take the nice parts of shell,

14:29.080 --> 14:31.280
that wants to be just a really simple DSL,

14:31.280 --> 14:34.000
we put it inside racket and make it so you can

14:34.000 --> 14:36.240
easily and seamlessly switch between the two

14:36.240 --> 14:40.000
and it lets you both on the command line do nice things

14:40.000 --> 14:43.120
and it lets you grow shell scripts more from

14:43.120 --> 14:45.360
starting as a shell script and gradually replace things

14:45.360 --> 14:46.360
and put them in full racket

14:46.360 --> 14:48.920
rather than just throwing them away completely.

14:48.920 --> 14:51.320
So, yeah, thanks.

14:51.320 --> 14:56.320
Okay, one question, yes?

15:00.480 --> 15:03.320
Yeah, so the question was,

15:03.320 --> 15:06.640
am I planning on doing stuff like T and bash?

15:06.640 --> 15:08.480
Well, you can just put in T if you want,

15:08.480 --> 15:10.600
it's the next external program,

15:10.600 --> 15:15.160
but you can do redirections to arbitrary ports.

15:15.160 --> 15:18.840
I haven't put anything in yet to make that really nice,

15:18.840 --> 15:19.920
but you could put some sugar,

15:19.920 --> 15:24.920
a pipeline that has a good way of saying that, for instance.

15:25.440 --> 15:26.800
So it's possible.

15:26.800 --> 15:28.000
All right, if you have more questions

15:28.000 --> 15:29.200
and you're ready to give up on bash,

15:29.200 --> 15:30.800
then catch William later today.

