1
00:00:00,000 --> 00:00:04,240
What's going on everyone? Today we're talking about regular expressions. I know some people

2
00:00:04,240 --> 00:00:09,200
watching this video are thinking, engineer man, every time I try to do regular expressions,

3
00:00:09,200 --> 00:00:16,560
it just melts my brain. And I'm going to prove to you today that it's a lot easier than it looks.

4
00:00:16,560 --> 00:00:21,280
You just have to be explained it correctly. In this video, I'm going to teach you just enough

5
00:00:21,280 --> 00:00:25,280
to be dangerous. And I think you'll find after this video, you're going to walk away being able

6
00:00:25,280 --> 00:00:29,600
to do a little regex. So that'll be great. Let's just jump in. Well first, what is regex?

7
00:00:29,600 --> 00:00:34,960
Regex is basically just text based syntax that allows you to define a pattern. And with that

8
00:00:34,960 --> 00:00:41,280
pattern, you can use it to say find text, or you could also use it to find and replace text.

9
00:00:41,280 --> 00:00:45,120
Before we start matching text, I just want to describe this interface that I'm using. So this

10
00:00:45,120 --> 00:00:51,840
is a tool put out by debugx.com. And there's a link in the description for that. And basically what it

11
00:00:51,840 --> 00:00:57,680
is is the second box here is the text that we would like to match. So for instance, I can put

12
00:00:58,400 --> 00:01:06,320
engineer man. And then this box is the actual regex that we'll write. And then everything up

13
00:01:06,320 --> 00:01:12,320
here is going to be a visual representation of the regular expression. And that'll be great

14
00:01:12,320 --> 00:01:18,640
because I'll be able to show you exactly how a pattern is processed by the regex engine.

15
00:01:18,640 --> 00:01:23,840
What if I told you the most basic regex is just a bunch of characters? Would you believe me? How

16
00:01:23,840 --> 00:01:31,040
about this? When I write engineer man, it says matches. So basically what this says is this

17
00:01:31,040 --> 00:01:37,840
regex will match, for instance, any string which starts with the capital E is followed by an N is

18
00:01:37,840 --> 00:01:42,720
followed by G, and so on all the way to the end. So of course, there's only one string like that,

19
00:01:42,720 --> 00:01:48,320
and it's engineer man. So imagine we wanted to match one name or another, say we want to make

20
00:01:48,320 --> 00:01:54,320
a regex that matches either engineer man or Superman. So what we could do is use the pipe symbol

21
00:01:55,680 --> 00:02:01,600
and write Superman. So now this regex matches either engineer man or Superman. And to read

22
00:02:01,600 --> 00:02:06,880
this visualization, this basically says you start here, and the regex will either match

23
00:02:06,880 --> 00:02:14,160
engineer man, or it'll match Superman. You can see now if I delete the N, now it doesn't match.

24
00:02:14,480 --> 00:02:20,960
I can write anything here, dog cat, something man, and it doesn't match. But if I write Superman,

25
00:02:22,080 --> 00:02:26,640
now suddenly it matches. Now I can make this a little simpler, because both of these names have

26
00:02:26,640 --> 00:02:32,080
the word man in it, I really only have to match the first word, and then I can just say well man

27
00:02:32,080 --> 00:02:37,680
occurs in both. So if I wanted to simplify this, I'm going to use what's called a group. And that's

28
00:02:38,640 --> 00:02:49,280
by putting parentheses around a set of things. So when I do this, I've made a group out of those

29
00:02:49,280 --> 00:02:56,000
two words. So now what this says is this will match, this regex will match any text that is

30
00:02:56,000 --> 00:03:04,000
either engineer or super, but then also man at the end. Okay, so let's match something else and

31
00:03:04,000 --> 00:03:12,320
we'll use some different syntax. So now we're going to build a regex, which matches one, two,

32
00:03:12,320 --> 00:03:17,760
three, four. Now of course, we could just put one, two, three, four, and that would match,

33
00:03:17,760 --> 00:03:22,800
but that's no fun. So we'll do that another way. Now you may have noticed that when I put say one,

34
00:03:22,800 --> 00:03:27,680
two, you'll notice that it still says matches. And you might be wondering why that is. Does 12

35
00:03:27,760 --> 00:03:34,960
match 1234? Well, no, it doesn't, it doesn't match the whole thing. However, it does match

36
00:03:34,960 --> 00:03:41,680
a portion of it. You got to remember that the pattern looks anywhere in text. So because there

37
00:03:41,680 --> 00:03:49,920
is a 12 in 1234, that means that there is a match. There is a syntax for you to use to make it match

38
00:03:49,920 --> 00:03:54,800
the whole thing. And that's going to be the carrot and the dollar sign. So basically the carrot

39
00:03:54,880 --> 00:04:00,320
matches the beginning of the line. And you could see it still says matches because one,

40
00:04:00,320 --> 00:04:04,720
two is at the beginning of the line. However, when I put the dollar sign at the end,

41
00:04:05,680 --> 00:04:12,560
now it does not match. And that's because what this is saying now is this regex matches any time

42
00:04:12,560 --> 00:04:19,200
it is the beginning of the line, there's a one, a two, and the end of the line. So because there's

43
00:04:19,280 --> 00:04:26,000
a three and the four, this pattern does not match. You'll notice if I put 34 after the one, two,

44
00:04:26,000 --> 00:04:30,800
now suddenly it matches. Because it's easier to explain this when we match entire things,

45
00:04:30,800 --> 00:04:34,960
I'm going to leave the carrot and the dollar sign for the remainder of our matching. So I'm going

46
00:04:34,960 --> 00:04:38,160
to change this a little bit. I'm just going to make it any, what we're going to do is we're going to

47
00:04:38,160 --> 00:04:45,280
make a regex that matches any, any five random numbers. So eight, four, seven, six, five. So

48
00:04:45,280 --> 00:04:49,920
to do is we're going to introduce new syntax and that syntax is going to be the square brackets.

49
00:04:51,520 --> 00:04:57,360
What square brackets are for is it allows you to put characters or a range of characters inside

50
00:04:57,360 --> 00:05:09,200
there and it'll match any one character. So for instance, I could say 1234567890 if I wanted it

51
00:05:09,200 --> 00:05:15,600
to match any one of those digits. However, recall that I said it can do a range of characters as

52
00:05:15,600 --> 00:05:20,880
well. So I don't have to write all these out. I could have just done zero to nine. You know,

53
00:05:20,880 --> 00:05:27,200
notice it says does not match. That's because this regex currently, it basically says this will

54
00:05:27,200 --> 00:05:35,920
match any string that is beginning of the line, one of zero to nine. So one, one digit, just one,

55
00:05:35,920 --> 00:05:41,680
and then the end of the line. So we have five digits. So that doesn't work. So the next piece

56
00:05:41,680 --> 00:05:48,080
of syntax is the curly brace, and that's the quantifier. And you can put that after the square

57
00:05:48,080 --> 00:05:58,320
brackets. So I put curly braces. And in here, I can do a number, a number comma, or a number comma

58
00:05:58,320 --> 00:06:05,200
another number. And basically, if you put a number, that says match exactly, you know, whatever you

59
00:06:05,200 --> 00:06:12,400
put in the curly brace. If you put a comma, it means match that number or more. So in this case,

60
00:06:12,400 --> 00:06:21,600
this is saying match five digits. If I do five comma, it's match five or more digits. If I do

61
00:06:21,600 --> 00:06:28,240
five comma eight, it's saying match five, six, seven or eight digits. And you can see up here,

62
00:06:28,240 --> 00:06:34,880
we can read what this is saying. This is saying match any string that is the beginning of the

63
00:06:34,880 --> 00:06:45,280
line, one of zero to nine, five times. So this loops around five times. So it could be 000, 000.

64
00:06:45,280 --> 00:06:50,560
It could be 12345. If any five digits doesn't matter if it's repeating in order, it doesn't

65
00:06:50,560 --> 00:06:55,440
matter. And it looks for the end of the line. So in this case, we have that we have five digits.

66
00:06:56,080 --> 00:07:04,720
If I take away, if I take away one digit, now it doesn't match. If I add another digit, now

67
00:07:04,720 --> 00:07:10,960
it doesn't match. So what if you just wanted to match a string of digits that are, that are just

68
00:07:10,960 --> 00:07:18,000
of any length, one, two, 50, 100, whatever. Well, you can do that. I will introduce a new symbol

69
00:07:18,000 --> 00:07:25,120
here. So rather than curly brace five curly brace, you can simply use a plus. Now what that plus says

70
00:07:25,120 --> 00:07:32,400
is match one or more of that character. So that's why up here in the visual, you can see that it

71
00:07:33,120 --> 00:07:37,840
it matches the beginning of the line, one of zero to nine, and then it just keeps looping.

72
00:07:37,840 --> 00:07:44,960
It can loop as long as it wants. It can loop to 500. I can put, I can put any number of digits here

73
00:07:44,960 --> 00:07:50,480
and it'll just continue matching forever. So in these character classes, which is this

74
00:07:50,480 --> 00:07:56,160
square bracket, zero to nine square bracket, I can also match the opposite of that. So if I put a

75
00:07:56,160 --> 00:08:03,120
carat in the very beginning, what I'm now matching is the opposite of what I have in there. And you

76
00:08:03,120 --> 00:08:09,520
can see again in our visual, it says this rejects will match the beginning of the line, none of

77
00:08:09,520 --> 00:08:18,800
zero to nine, one or more times, and then the end of the line. So here I can't have numbers. I can

78
00:08:18,800 --> 00:08:24,720
have letters. Letters are all good. Symbols are all good. But as soon as I add a number,

79
00:08:25,360 --> 00:08:29,840
suddenly it doesn't match. So let's put we've learned in practice and let's match a phone number,

80
00:08:29,840 --> 00:08:38,560
for instance. So I'll write a sample phone number, do a 505551234. So we'll just delete

81
00:08:38,560 --> 00:08:43,680
this and we'll start from start from blank here. So let's just talk out what we're looking to match.

82
00:08:43,680 --> 00:08:50,560
So we have a 505551234, we don't just want to match that we want to match any telephone number.

83
00:08:50,560 --> 00:08:56,400
So what does a telephone number look like? Well, we have a group of three digits,

84
00:08:56,400 --> 00:09:01,840
which could be any digits, we have a dash, and then we have another group of three digits

85
00:09:01,840 --> 00:09:07,440
of any digits, and then a dash, and then we have a group of four digits. And then that's it. So to

86
00:09:07,440 --> 00:09:15,600
match three digits, we have to use the character class, and then zero to nine, curly brace, three

87
00:09:15,680 --> 00:09:20,560
curly brace. So that matches that first group of three characters. Now we simply add the dash,

88
00:09:22,480 --> 00:09:27,680
and then just going to copy and paste this a second time. So that matches our second group of

89
00:09:27,680 --> 00:09:33,440
three characters, and then a dash, and then copy and paste it one more time, but then change this

90
00:09:33,440 --> 00:09:40,320
three to a four. And then now you see it matches. So let's read the actual visualization. This

91
00:09:40,320 --> 00:09:46,960
visualization now says this regex will match any string that is the beginning of the line,

92
00:09:48,240 --> 00:09:58,240
one of zero to nine, three times 123, a dash, one of zero to nine, three times, and then a dash,

93
00:09:58,880 --> 00:10:06,560
and then one of zero to nine, four times, and then the end of the line. So you'll see now if we

94
00:10:06,560 --> 00:10:12,000
change this number at all in any way, it no longer matches. Take out a number, it doesn't match.

95
00:10:12,720 --> 00:10:17,760
Add a letter, it doesn't match. Add another letter, it doesn't match. Take away a dash,

96
00:10:17,760 --> 00:10:23,280
it doesn't match. Anything you do here besides an actual phone number will no longer match.

97
00:10:23,280 --> 00:10:27,680
What if you wanted to make the dashes optional? Maybe you want to allow people to put phone numbers,

98
00:10:27,680 --> 00:10:32,480
but they, you know, you want to match it with or without the dashes. So in this case,

99
00:10:32,560 --> 00:10:39,680
you would use the question mark, the question mark identifier, it's technically zero or one of the

100
00:10:39,680 --> 00:10:44,960
element that's, that's before it, but I like to think of it as the optional, you know, optional.

101
00:10:44,960 --> 00:10:52,800
So if I put a question mark after the dash, and then I'll put after the second dash,

102
00:10:53,600 --> 00:10:59,120
now it's going to be optional. And you can see it represented in our visual thing here. Now it's

103
00:10:59,120 --> 00:11:05,120
beginning of the line, one of zero to nine, three times. But then now you see this line where it

104
00:11:05,120 --> 00:11:11,360
can just skip over the dash. And that's because it's zero or one, zero is, you know, it's skipping

105
00:11:11,360 --> 00:11:17,520
over it. And then one is, you know, the dash being there. So now you can see if we delete the dash,

106
00:11:18,400 --> 00:11:25,040
then it's perfectly fine. It still matches. So let's match one more thing, let's, let's try to

107
00:11:25,040 --> 00:11:32,640
match emails. So I'll put a sample email here, we'll do like bob.smith at example.org.

108
00:11:34,800 --> 00:11:40,080
Now for the purpose of this exercise, email matching is actually kind of complex business,

109
00:11:40,080 --> 00:11:46,560
but for the purpose of this example, we're going to assume that a valid email address is

110
00:11:47,520 --> 00:11:56,960
letters numbers underscore and a dot at letters and numbers dot letters. So first let's write the

111
00:11:56,960 --> 00:12:03,440
first piece that matches the basic of the bob dot Smith part, everything to the left of the

112
00:12:03,440 --> 00:12:08,880
outside. So in this case, we use a character class to square brackets. And then in the square

113
00:12:08,880 --> 00:12:13,040
brackets, we're going to put the characters that are allowed. So we said we're going to allow

114
00:12:13,920 --> 00:12:21,040
letters. So a to z, capital A to capital Z, zero to nine,

115
00:12:22,320 --> 00:12:27,440
will allow the period. And we'll allow the underscore. And then we'll use our plus sign

116
00:12:27,440 --> 00:12:33,280
to say that there has to be one or more of those characters. So now we have to match the at sign,

117
00:12:33,280 --> 00:12:38,800
which is just as simple as putting the outside. So everything to the right of the at sign,

118
00:12:38,880 --> 00:12:44,880
we know that there must be a dot before the actual extension for the domain name.

119
00:12:45,520 --> 00:12:51,760
So we need to first match everything between the at sign and the dot. So we said that only

120
00:12:51,760 --> 00:12:58,720
the letters and numbers were allowed there. So we use our, use our square brackets, a to z,

121
00:12:58,720 --> 00:13:05,520
capital A to capital Z, zero to nine. So now that matches from the at sign to the dot. And of course,

122
00:13:05,520 --> 00:13:11,040
we want to match one or more of that. Now to match the dot, we can't just put a dot because

123
00:13:11,040 --> 00:13:18,080
a dot is also the character for any character except a new line. So we need to do backslash

124
00:13:18,080 --> 00:13:24,000
dot. And what that says is actually look for the dot without a backslash, the dot would match an A,

125
00:13:24,000 --> 00:13:31,040
a one, a five, anything, except a new line. So now all it's left to match is the domain extension.

126
00:13:31,040 --> 00:13:35,920
So the rules here, we're going to say it can be letters, and it has to be either

127
00:13:37,280 --> 00:13:41,360
say two or three characters long. So we do our square brackets,

128
00:13:42,720 --> 00:13:49,360
our range of characters, a to z, capital A, capital Z. And then we use our curly brace,

129
00:13:50,160 --> 00:13:55,760
two comma three, curly brace. And you can see now it says it matches. So let's review the

130
00:13:55,760 --> 00:14:00,960
visualization. So this says this regex will match the beginning of the line. Any one of these

131
00:14:01,040 --> 00:14:08,400
characters, one or more times in a loop, the at sign, any of these characters, one or more times,

132
00:14:09,600 --> 00:14:16,640
a dot, any one of these characters, either two or three times, and then the end of the line.

133
00:14:16,640 --> 00:14:21,440
And that's exactly what we have. And just like the phone number, if I go changing things, if I

134
00:14:21,440 --> 00:14:28,160
take out the dot, it doesn't work. If I take out the at sign, it doesn't work. If I put a special

135
00:14:28,240 --> 00:14:32,960
character here, which is not allowed, it doesn't work. There was a couple of ways to simplify

136
00:14:32,960 --> 00:14:39,520
our regex. And I want to go over a couple, actually one of the last two things. Now it's the backslash

137
00:14:39,520 --> 00:14:48,080
D and the backslash w. So the backslash D is kind of like the zero to nine, it says match any one

138
00:14:49,040 --> 00:14:58,480
digit. However, the one thing that backslash D does that zero to nine does not is backslash D

139
00:14:58,480 --> 00:15:02,640
will also match numbers like in foreign languages. So if you had like an Arabic one,

140
00:15:03,440 --> 00:15:09,840
then a backslash D would match that whereas zero to nine only matches our zero to nine.

141
00:15:09,840 --> 00:15:15,360
The same thing is true for backslash w. So we can replace this with backslash w,

142
00:15:15,360 --> 00:15:24,480
replace that with backslash w, replace that with backslash w. And we're done. That wasn't so bad,

143
00:15:24,480 --> 00:15:32,400
was it? Make sure you use a tool like debugx.com to visualize how your regex works. It makes it a

144
00:15:32,400 --> 00:15:38,320
lot easier to understand exactly why it's matching what it's matching and why it's not matching

145
00:15:38,320 --> 00:15:42,880
what it's not matching. I sincerely hope I was able to help you overcome your fear of regular

146
00:15:42,880 --> 00:15:48,960
expressions. Please tell me in the comments if you thought this was helpful and you feel

147
00:15:48,960 --> 00:15:58,800
more comfortable with regex now. And as usual, see you in the next video.

