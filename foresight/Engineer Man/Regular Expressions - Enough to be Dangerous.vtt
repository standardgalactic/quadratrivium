WEBVTT

00:00.000 --> 00:04.240
What's going on everyone? Today we're talking about regular expressions. I know some people

00:04.240 --> 00:09.200
watching this video are thinking, engineer man, every time I try to do regular expressions,

00:09.200 --> 00:16.560
it just melts my brain. And I'm going to prove to you today that it's a lot easier than it looks.

00:16.560 --> 00:21.280
You just have to be explained it correctly. In this video, I'm going to teach you just enough

00:21.280 --> 00:25.280
to be dangerous. And I think you'll find after this video, you're going to walk away being able

00:25.280 --> 00:29.600
to do a little regex. So that'll be great. Let's just jump in. Well first, what is regex?

00:29.600 --> 00:34.960
Regex is basically just text based syntax that allows you to define a pattern. And with that

00:34.960 --> 00:41.280
pattern, you can use it to say find text, or you could also use it to find and replace text.

00:41.280 --> 00:45.120
Before we start matching text, I just want to describe this interface that I'm using. So this

00:45.120 --> 00:51.840
is a tool put out by debugx.com. And there's a link in the description for that. And basically what it

00:51.840 --> 00:57.680
is is the second box here is the text that we would like to match. So for instance, I can put

00:58.400 --> 01:06.320
engineer man. And then this box is the actual regex that we'll write. And then everything up

01:06.320 --> 01:12.320
here is going to be a visual representation of the regular expression. And that'll be great

01:12.320 --> 01:18.640
because I'll be able to show you exactly how a pattern is processed by the regex engine.

01:18.640 --> 01:23.840
What if I told you the most basic regex is just a bunch of characters? Would you believe me? How

01:23.840 --> 01:31.040
about this? When I write engineer man, it says matches. So basically what this says is this

01:31.040 --> 01:37.840
regex will match, for instance, any string which starts with the capital E is followed by an N is

01:37.840 --> 01:42.720
followed by G, and so on all the way to the end. So of course, there's only one string like that,

01:42.720 --> 01:48.320
and it's engineer man. So imagine we wanted to match one name or another, say we want to make

01:48.320 --> 01:54.320
a regex that matches either engineer man or Superman. So what we could do is use the pipe symbol

01:55.680 --> 02:01.600
and write Superman. So now this regex matches either engineer man or Superman. And to read

02:01.600 --> 02:06.880
this visualization, this basically says you start here, and the regex will either match

02:06.880 --> 02:14.160
engineer man, or it'll match Superman. You can see now if I delete the N, now it doesn't match.

02:14.480 --> 02:20.960
I can write anything here, dog cat, something man, and it doesn't match. But if I write Superman,

02:22.080 --> 02:26.640
now suddenly it matches. Now I can make this a little simpler, because both of these names have

02:26.640 --> 02:32.080
the word man in it, I really only have to match the first word, and then I can just say well man

02:32.080 --> 02:37.680
occurs in both. So if I wanted to simplify this, I'm going to use what's called a group. And that's

02:38.640 --> 02:49.280
by putting parentheses around a set of things. So when I do this, I've made a group out of those

02:49.280 --> 02:56.000
two words. So now what this says is this will match, this regex will match any text that is

02:56.000 --> 03:04.000
either engineer or super, but then also man at the end. Okay, so let's match something else and

03:04.000 --> 03:12.320
we'll use some different syntax. So now we're going to build a regex, which matches one, two,

03:12.320 --> 03:17.760
three, four. Now of course, we could just put one, two, three, four, and that would match,

03:17.760 --> 03:22.800
but that's no fun. So we'll do that another way. Now you may have noticed that when I put say one,

03:22.800 --> 03:27.680
two, you'll notice that it still says matches. And you might be wondering why that is. Does 12

03:27.760 --> 03:34.960
match 1234? Well, no, it doesn't, it doesn't match the whole thing. However, it does match

03:34.960 --> 03:41.680
a portion of it. You got to remember that the pattern looks anywhere in text. So because there

03:41.680 --> 03:49.920
is a 12 in 1234, that means that there is a match. There is a syntax for you to use to make it match

03:49.920 --> 03:54.800
the whole thing. And that's going to be the carrot and the dollar sign. So basically the carrot

03:54.880 --> 04:00.320
matches the beginning of the line. And you could see it still says matches because one,

04:00.320 --> 04:04.720
two is at the beginning of the line. However, when I put the dollar sign at the end,

04:05.680 --> 04:12.560
now it does not match. And that's because what this is saying now is this regex matches any time

04:12.560 --> 04:19.200
it is the beginning of the line, there's a one, a two, and the end of the line. So because there's

04:19.280 --> 04:26.000
a three and the four, this pattern does not match. You'll notice if I put 34 after the one, two,

04:26.000 --> 04:30.800
now suddenly it matches. Because it's easier to explain this when we match entire things,

04:30.800 --> 04:34.960
I'm going to leave the carrot and the dollar sign for the remainder of our matching. So I'm going

04:34.960 --> 04:38.160
to change this a little bit. I'm just going to make it any, what we're going to do is we're going to

04:38.160 --> 04:45.280
make a regex that matches any, any five random numbers. So eight, four, seven, six, five. So

04:45.280 --> 04:49.920
to do is we're going to introduce new syntax and that syntax is going to be the square brackets.

04:51.520 --> 04:57.360
What square brackets are for is it allows you to put characters or a range of characters inside

04:57.360 --> 05:09.200
there and it'll match any one character. So for instance, I could say 1234567890 if I wanted it

05:09.200 --> 05:15.600
to match any one of those digits. However, recall that I said it can do a range of characters as

05:15.600 --> 05:20.880
well. So I don't have to write all these out. I could have just done zero to nine. You know,

05:20.880 --> 05:27.200
notice it says does not match. That's because this regex currently, it basically says this will

05:27.200 --> 05:35.920
match any string that is beginning of the line, one of zero to nine. So one, one digit, just one,

05:35.920 --> 05:41.680
and then the end of the line. So we have five digits. So that doesn't work. So the next piece

05:41.680 --> 05:48.080
of syntax is the curly brace, and that's the quantifier. And you can put that after the square

05:48.080 --> 05:58.320
brackets. So I put curly braces. And in here, I can do a number, a number comma, or a number comma

05:58.320 --> 06:05.200
another number. And basically, if you put a number, that says match exactly, you know, whatever you

06:05.200 --> 06:12.400
put in the curly brace. If you put a comma, it means match that number or more. So in this case,

06:12.400 --> 06:21.600
this is saying match five digits. If I do five comma, it's match five or more digits. If I do

06:21.600 --> 06:28.240
five comma eight, it's saying match five, six, seven or eight digits. And you can see up here,

06:28.240 --> 06:34.880
we can read what this is saying. This is saying match any string that is the beginning of the

06:34.880 --> 06:45.280
line, one of zero to nine, five times. So this loops around five times. So it could be 000, 000.

06:45.280 --> 06:50.560
It could be 12345. If any five digits doesn't matter if it's repeating in order, it doesn't

06:50.560 --> 06:55.440
matter. And it looks for the end of the line. So in this case, we have that we have five digits.

06:56.080 --> 07:04.720
If I take away, if I take away one digit, now it doesn't match. If I add another digit, now

07:04.720 --> 07:10.960
it doesn't match. So what if you just wanted to match a string of digits that are, that are just

07:10.960 --> 07:18.000
of any length, one, two, 50, 100, whatever. Well, you can do that. I will introduce a new symbol

07:18.000 --> 07:25.120
here. So rather than curly brace five curly brace, you can simply use a plus. Now what that plus says

07:25.120 --> 07:32.400
is match one or more of that character. So that's why up here in the visual, you can see that it

07:33.120 --> 07:37.840
it matches the beginning of the line, one of zero to nine, and then it just keeps looping.

07:37.840 --> 07:44.960
It can loop as long as it wants. It can loop to 500. I can put, I can put any number of digits here

07:44.960 --> 07:50.480
and it'll just continue matching forever. So in these character classes, which is this

07:50.480 --> 07:56.160
square bracket, zero to nine square bracket, I can also match the opposite of that. So if I put a

07:56.160 --> 08:03.120
carat in the very beginning, what I'm now matching is the opposite of what I have in there. And you

08:03.120 --> 08:09.520
can see again in our visual, it says this rejects will match the beginning of the line, none of

08:09.520 --> 08:18.800
zero to nine, one or more times, and then the end of the line. So here I can't have numbers. I can

08:18.800 --> 08:24.720
have letters. Letters are all good. Symbols are all good. But as soon as I add a number,

08:25.360 --> 08:29.840
suddenly it doesn't match. So let's put we've learned in practice and let's match a phone number,

08:29.840 --> 08:38.560
for instance. So I'll write a sample phone number, do a 505551234. So we'll just delete

08:38.560 --> 08:43.680
this and we'll start from start from blank here. So let's just talk out what we're looking to match.

08:43.680 --> 08:50.560
So we have a 505551234, we don't just want to match that we want to match any telephone number.

08:50.560 --> 08:56.400
So what does a telephone number look like? Well, we have a group of three digits,

08:56.400 --> 09:01.840
which could be any digits, we have a dash, and then we have another group of three digits

09:01.840 --> 09:07.440
of any digits, and then a dash, and then we have a group of four digits. And then that's it. So to

09:07.440 --> 09:15.600
match three digits, we have to use the character class, and then zero to nine, curly brace, three

09:15.680 --> 09:20.560
curly brace. So that matches that first group of three characters. Now we simply add the dash,

09:22.480 --> 09:27.680
and then just going to copy and paste this a second time. So that matches our second group of

09:27.680 --> 09:33.440
three characters, and then a dash, and then copy and paste it one more time, but then change this

09:33.440 --> 09:40.320
three to a four. And then now you see it matches. So let's read the actual visualization. This

09:40.320 --> 09:46.960
visualization now says this regex will match any string that is the beginning of the line,

09:48.240 --> 09:58.240
one of zero to nine, three times 123, a dash, one of zero to nine, three times, and then a dash,

09:58.880 --> 10:06.560
and then one of zero to nine, four times, and then the end of the line. So you'll see now if we

10:06.560 --> 10:12.000
change this number at all in any way, it no longer matches. Take out a number, it doesn't match.

10:12.720 --> 10:17.760
Add a letter, it doesn't match. Add another letter, it doesn't match. Take away a dash,

10:17.760 --> 10:23.280
it doesn't match. Anything you do here besides an actual phone number will no longer match.

10:23.280 --> 10:27.680
What if you wanted to make the dashes optional? Maybe you want to allow people to put phone numbers,

10:27.680 --> 10:32.480
but they, you know, you want to match it with or without the dashes. So in this case,

10:32.560 --> 10:39.680
you would use the question mark, the question mark identifier, it's technically zero or one of the

10:39.680 --> 10:44.960
element that's, that's before it, but I like to think of it as the optional, you know, optional.

10:44.960 --> 10:52.800
So if I put a question mark after the dash, and then I'll put after the second dash,

10:53.600 --> 10:59.120
now it's going to be optional. And you can see it represented in our visual thing here. Now it's

10:59.120 --> 11:05.120
beginning of the line, one of zero to nine, three times. But then now you see this line where it

11:05.120 --> 11:11.360
can just skip over the dash. And that's because it's zero or one, zero is, you know, it's skipping

11:11.360 --> 11:17.520
over it. And then one is, you know, the dash being there. So now you can see if we delete the dash,

11:18.400 --> 11:25.040
then it's perfectly fine. It still matches. So let's match one more thing, let's, let's try to

11:25.040 --> 11:32.640
match emails. So I'll put a sample email here, we'll do like bob.smith at example.org.

11:34.800 --> 11:40.080
Now for the purpose of this exercise, email matching is actually kind of complex business,

11:40.080 --> 11:46.560
but for the purpose of this example, we're going to assume that a valid email address is

11:47.520 --> 11:56.960
letters numbers underscore and a dot at letters and numbers dot letters. So first let's write the

11:56.960 --> 12:03.440
first piece that matches the basic of the bob dot Smith part, everything to the left of the

12:03.440 --> 12:08.880
outside. So in this case, we use a character class to square brackets. And then in the square

12:08.880 --> 12:13.040
brackets, we're going to put the characters that are allowed. So we said we're going to allow

12:13.920 --> 12:21.040
letters. So a to z, capital A to capital Z, zero to nine,

12:22.320 --> 12:27.440
will allow the period. And we'll allow the underscore. And then we'll use our plus sign

12:27.440 --> 12:33.280
to say that there has to be one or more of those characters. So now we have to match the at sign,

12:33.280 --> 12:38.800
which is just as simple as putting the outside. So everything to the right of the at sign,

12:38.880 --> 12:44.880
we know that there must be a dot before the actual extension for the domain name.

12:45.520 --> 12:51.760
So we need to first match everything between the at sign and the dot. So we said that only

12:51.760 --> 12:58.720
the letters and numbers were allowed there. So we use our, use our square brackets, a to z,

12:58.720 --> 13:05.520
capital A to capital Z, zero to nine. So now that matches from the at sign to the dot. And of course,

13:05.520 --> 13:11.040
we want to match one or more of that. Now to match the dot, we can't just put a dot because

13:11.040 --> 13:18.080
a dot is also the character for any character except a new line. So we need to do backslash

13:18.080 --> 13:24.000
dot. And what that says is actually look for the dot without a backslash, the dot would match an A,

13:24.000 --> 13:31.040
a one, a five, anything, except a new line. So now all it's left to match is the domain extension.

13:31.040 --> 13:35.920
So the rules here, we're going to say it can be letters, and it has to be either

13:37.280 --> 13:41.360
say two or three characters long. So we do our square brackets,

13:42.720 --> 13:49.360
our range of characters, a to z, capital A, capital Z. And then we use our curly brace,

13:50.160 --> 13:55.760
two comma three, curly brace. And you can see now it says it matches. So let's review the

13:55.760 --> 14:00.960
visualization. So this says this regex will match the beginning of the line. Any one of these

14:01.040 --> 14:08.400
characters, one or more times in a loop, the at sign, any of these characters, one or more times,

14:09.600 --> 14:16.640
a dot, any one of these characters, either two or three times, and then the end of the line.

14:16.640 --> 14:21.440
And that's exactly what we have. And just like the phone number, if I go changing things, if I

14:21.440 --> 14:28.160
take out the dot, it doesn't work. If I take out the at sign, it doesn't work. If I put a special

14:28.240 --> 14:32.960
character here, which is not allowed, it doesn't work. There was a couple of ways to simplify

14:32.960 --> 14:39.520
our regex. And I want to go over a couple, actually one of the last two things. Now it's the backslash

14:39.520 --> 14:48.080
D and the backslash w. So the backslash D is kind of like the zero to nine, it says match any one

14:49.040 --> 14:58.480
digit. However, the one thing that backslash D does that zero to nine does not is backslash D

14:58.480 --> 15:02.640
will also match numbers like in foreign languages. So if you had like an Arabic one,

15:03.440 --> 15:09.840
then a backslash D would match that whereas zero to nine only matches our zero to nine.

15:09.840 --> 15:15.360
The same thing is true for backslash w. So we can replace this with backslash w,

15:15.360 --> 15:24.480
replace that with backslash w, replace that with backslash w. And we're done. That wasn't so bad,

15:24.480 --> 15:32.400
was it? Make sure you use a tool like debugx.com to visualize how your regex works. It makes it a

15:32.400 --> 15:38.320
lot easier to understand exactly why it's matching what it's matching and why it's not matching

15:38.320 --> 15:42.880
what it's not matching. I sincerely hope I was able to help you overcome your fear of regular

15:42.880 --> 15:48.960
expressions. Please tell me in the comments if you thought this was helpful and you feel

15:48.960 --> 15:58.800
more comfortable with regex now. And as usual, see you in the next video.

