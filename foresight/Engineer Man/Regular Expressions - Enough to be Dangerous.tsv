start	end	text
0	4240	What's going on everyone? Today we're talking about regular expressions. I know some people
4240	9200	watching this video are thinking, engineer man, every time I try to do regular expressions,
9200	16560	it just melts my brain. And I'm going to prove to you today that it's a lot easier than it looks.
16560	21280	You just have to be explained it correctly. In this video, I'm going to teach you just enough
21280	25280	to be dangerous. And I think you'll find after this video, you're going to walk away being able
25280	29600	to do a little regex. So that'll be great. Let's just jump in. Well first, what is regex?
29600	34960	Regex is basically just text based syntax that allows you to define a pattern. And with that
34960	41280	pattern, you can use it to say find text, or you could also use it to find and replace text.
41280	45120	Before we start matching text, I just want to describe this interface that I'm using. So this
45120	51840	is a tool put out by debugx.com. And there's a link in the description for that. And basically what it
51840	57680	is is the second box here is the text that we would like to match. So for instance, I can put
58400	66320	engineer man. And then this box is the actual regex that we'll write. And then everything up
66320	72320	here is going to be a visual representation of the regular expression. And that'll be great
72320	78640	because I'll be able to show you exactly how a pattern is processed by the regex engine.
78640	83840	What if I told you the most basic regex is just a bunch of characters? Would you believe me? How
83840	91040	about this? When I write engineer man, it says matches. So basically what this says is this
91040	97840	regex will match, for instance, any string which starts with the capital E is followed by an N is
97840	102720	followed by G, and so on all the way to the end. So of course, there's only one string like that,
102720	108320	and it's engineer man. So imagine we wanted to match one name or another, say we want to make
108320	114320	a regex that matches either engineer man or Superman. So what we could do is use the pipe symbol
115680	121600	and write Superman. So now this regex matches either engineer man or Superman. And to read
121600	126880	this visualization, this basically says you start here, and the regex will either match
126880	134160	engineer man, or it'll match Superman. You can see now if I delete the N, now it doesn't match.
134480	140960	I can write anything here, dog cat, something man, and it doesn't match. But if I write Superman,
142080	146640	now suddenly it matches. Now I can make this a little simpler, because both of these names have
146640	152080	the word man in it, I really only have to match the first word, and then I can just say well man
152080	157680	occurs in both. So if I wanted to simplify this, I'm going to use what's called a group. And that's
158640	169280	by putting parentheses around a set of things. So when I do this, I've made a group out of those
169280	176000	two words. So now what this says is this will match, this regex will match any text that is
176000	184000	either engineer or super, but then also man at the end. Okay, so let's match something else and
184000	192320	we'll use some different syntax. So now we're going to build a regex, which matches one, two,
192320	197760	three, four. Now of course, we could just put one, two, three, four, and that would match,
197760	202800	but that's no fun. So we'll do that another way. Now you may have noticed that when I put say one,
202800	207680	two, you'll notice that it still says matches. And you might be wondering why that is. Does 12
207760	214960	match 1234? Well, no, it doesn't, it doesn't match the whole thing. However, it does match
214960	221680	a portion of it. You got to remember that the pattern looks anywhere in text. So because there
221680	229920	is a 12 in 1234, that means that there is a match. There is a syntax for you to use to make it match
229920	234800	the whole thing. And that's going to be the carrot and the dollar sign. So basically the carrot
234880	240320	matches the beginning of the line. And you could see it still says matches because one,
240320	244720	two is at the beginning of the line. However, when I put the dollar sign at the end,
245680	252560	now it does not match. And that's because what this is saying now is this regex matches any time
252560	259200	it is the beginning of the line, there's a one, a two, and the end of the line. So because there's
259280	266000	a three and the four, this pattern does not match. You'll notice if I put 34 after the one, two,
266000	270800	now suddenly it matches. Because it's easier to explain this when we match entire things,
270800	274960	I'm going to leave the carrot and the dollar sign for the remainder of our matching. So I'm going
274960	278160	to change this a little bit. I'm just going to make it any, what we're going to do is we're going to
278160	285280	make a regex that matches any, any five random numbers. So eight, four, seven, six, five. So
285280	289920	to do is we're going to introduce new syntax and that syntax is going to be the square brackets.
291520	297360	What square brackets are for is it allows you to put characters or a range of characters inside
297360	309200	there and it'll match any one character. So for instance, I could say 1234567890 if I wanted it
309200	315600	to match any one of those digits. However, recall that I said it can do a range of characters as
315600	320880	well. So I don't have to write all these out. I could have just done zero to nine. You know,
320880	327200	notice it says does not match. That's because this regex currently, it basically says this will
327200	335920	match any string that is beginning of the line, one of zero to nine. So one, one digit, just one,
335920	341680	and then the end of the line. So we have five digits. So that doesn't work. So the next piece
341680	348080	of syntax is the curly brace, and that's the quantifier. And you can put that after the square
348080	358320	brackets. So I put curly braces. And in here, I can do a number, a number comma, or a number comma
358320	365200	another number. And basically, if you put a number, that says match exactly, you know, whatever you
365200	372400	put in the curly brace. If you put a comma, it means match that number or more. So in this case,
372400	381600	this is saying match five digits. If I do five comma, it's match five or more digits. If I do
381600	388240	five comma eight, it's saying match five, six, seven or eight digits. And you can see up here,
388240	394880	we can read what this is saying. This is saying match any string that is the beginning of the
394880	405280	line, one of zero to nine, five times. So this loops around five times. So it could be 000, 000.
405280	410560	It could be 12345. If any five digits doesn't matter if it's repeating in order, it doesn't
410560	415440	matter. And it looks for the end of the line. So in this case, we have that we have five digits.
416080	424720	If I take away, if I take away one digit, now it doesn't match. If I add another digit, now
424720	430960	it doesn't match. So what if you just wanted to match a string of digits that are, that are just
430960	438000	of any length, one, two, 50, 100, whatever. Well, you can do that. I will introduce a new symbol
438000	445120	here. So rather than curly brace five curly brace, you can simply use a plus. Now what that plus says
445120	452400	is match one or more of that character. So that's why up here in the visual, you can see that it
453120	457840	it matches the beginning of the line, one of zero to nine, and then it just keeps looping.
457840	464960	It can loop as long as it wants. It can loop to 500. I can put, I can put any number of digits here
464960	470480	and it'll just continue matching forever. So in these character classes, which is this
470480	476160	square bracket, zero to nine square bracket, I can also match the opposite of that. So if I put a
476160	483120	carat in the very beginning, what I'm now matching is the opposite of what I have in there. And you
483120	489520	can see again in our visual, it says this rejects will match the beginning of the line, none of
489520	498800	zero to nine, one or more times, and then the end of the line. So here I can't have numbers. I can
498800	504720	have letters. Letters are all good. Symbols are all good. But as soon as I add a number,
505360	509840	suddenly it doesn't match. So let's put we've learned in practice and let's match a phone number,
509840	518560	for instance. So I'll write a sample phone number, do a 505551234. So we'll just delete
518560	523680	this and we'll start from start from blank here. So let's just talk out what we're looking to match.
523680	530560	So we have a 505551234, we don't just want to match that we want to match any telephone number.
530560	536400	So what does a telephone number look like? Well, we have a group of three digits,
536400	541840	which could be any digits, we have a dash, and then we have another group of three digits
541840	547440	of any digits, and then a dash, and then we have a group of four digits. And then that's it. So to
547440	555600	match three digits, we have to use the character class, and then zero to nine, curly brace, three
555680	560560	curly brace. So that matches that first group of three characters. Now we simply add the dash,
562480	567680	and then just going to copy and paste this a second time. So that matches our second group of
567680	573440	three characters, and then a dash, and then copy and paste it one more time, but then change this
573440	580320	three to a four. And then now you see it matches. So let's read the actual visualization. This
580320	586960	visualization now says this regex will match any string that is the beginning of the line,
588240	598240	one of zero to nine, three times 123, a dash, one of zero to nine, three times, and then a dash,
598880	606560	and then one of zero to nine, four times, and then the end of the line. So you'll see now if we
606560	612000	change this number at all in any way, it no longer matches. Take out a number, it doesn't match.
612720	617760	Add a letter, it doesn't match. Add another letter, it doesn't match. Take away a dash,
617760	623280	it doesn't match. Anything you do here besides an actual phone number will no longer match.
623280	627680	What if you wanted to make the dashes optional? Maybe you want to allow people to put phone numbers,
627680	632480	but they, you know, you want to match it with or without the dashes. So in this case,
632560	639680	you would use the question mark, the question mark identifier, it's technically zero or one of the
639680	644960	element that's, that's before it, but I like to think of it as the optional, you know, optional.
644960	652800	So if I put a question mark after the dash, and then I'll put after the second dash,
653600	659120	now it's going to be optional. And you can see it represented in our visual thing here. Now it's
659120	665120	beginning of the line, one of zero to nine, three times. But then now you see this line where it
665120	671360	can just skip over the dash. And that's because it's zero or one, zero is, you know, it's skipping
671360	677520	over it. And then one is, you know, the dash being there. So now you can see if we delete the dash,
678400	685040	then it's perfectly fine. It still matches. So let's match one more thing, let's, let's try to
685040	692640	match emails. So I'll put a sample email here, we'll do like bob.smith at example.org.
694800	700080	Now for the purpose of this exercise, email matching is actually kind of complex business,
700080	706560	but for the purpose of this example, we're going to assume that a valid email address is
707520	716960	letters numbers underscore and a dot at letters and numbers dot letters. So first let's write the
716960	723440	first piece that matches the basic of the bob dot Smith part, everything to the left of the
723440	728880	outside. So in this case, we use a character class to square brackets. And then in the square
728880	733040	brackets, we're going to put the characters that are allowed. So we said we're going to allow
733920	741040	letters. So a to z, capital A to capital Z, zero to nine,
742320	747440	will allow the period. And we'll allow the underscore. And then we'll use our plus sign
747440	753280	to say that there has to be one or more of those characters. So now we have to match the at sign,
753280	758800	which is just as simple as putting the outside. So everything to the right of the at sign,
758880	764880	we know that there must be a dot before the actual extension for the domain name.
765520	771760	So we need to first match everything between the at sign and the dot. So we said that only
771760	778720	the letters and numbers were allowed there. So we use our, use our square brackets, a to z,
778720	785520	capital A to capital Z, zero to nine. So now that matches from the at sign to the dot. And of course,
785520	791040	we want to match one or more of that. Now to match the dot, we can't just put a dot because
791040	798080	a dot is also the character for any character except a new line. So we need to do backslash
798080	804000	dot. And what that says is actually look for the dot without a backslash, the dot would match an A,
804000	811040	a one, a five, anything, except a new line. So now all it's left to match is the domain extension.
811040	815920	So the rules here, we're going to say it can be letters, and it has to be either
817280	821360	say two or three characters long. So we do our square brackets,
822720	829360	our range of characters, a to z, capital A, capital Z. And then we use our curly brace,
830160	835760	two comma three, curly brace. And you can see now it says it matches. So let's review the
835760	840960	visualization. So this says this regex will match the beginning of the line. Any one of these
841040	848400	characters, one or more times in a loop, the at sign, any of these characters, one or more times,
849600	856640	a dot, any one of these characters, either two or three times, and then the end of the line.
856640	861440	And that's exactly what we have. And just like the phone number, if I go changing things, if I
861440	868160	take out the dot, it doesn't work. If I take out the at sign, it doesn't work. If I put a special
868240	872960	character here, which is not allowed, it doesn't work. There was a couple of ways to simplify
872960	879520	our regex. And I want to go over a couple, actually one of the last two things. Now it's the backslash
879520	888080	D and the backslash w. So the backslash D is kind of like the zero to nine, it says match any one
889040	898480	digit. However, the one thing that backslash D does that zero to nine does not is backslash D
898480	902640	will also match numbers like in foreign languages. So if you had like an Arabic one,
903440	909840	then a backslash D would match that whereas zero to nine only matches our zero to nine.
909840	915360	The same thing is true for backslash w. So we can replace this with backslash w,
915360	924480	replace that with backslash w, replace that with backslash w. And we're done. That wasn't so bad,
924480	932400	was it? Make sure you use a tool like debugx.com to visualize how your regex works. It makes it a
932400	938320	lot easier to understand exactly why it's matching what it's matching and why it's not matching
938320	942880	what it's not matching. I sincerely hope I was able to help you overcome your fear of regular
942880	948960	expressions. Please tell me in the comments if you thought this was helpful and you feel
948960	958800	more comfortable with regex now. And as usual, see you in the next video.
