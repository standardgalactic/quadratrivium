start	end	text
0	14080	Hello, I'm Gary Burke, a co-chair for this summit 2023 ontology summit, and it's March 8th, 2023.
14080	23680	And we are going to be doing our second phase of our ontology summit, moving into things like ontology design patterns,
24000	32800	wiki data, and things of that nature. First, I should say that the schedule speaker was called
32800	38400	away on a project that he had to attend that has made a video recording. And so we were going to be
38400	46000	playing a 35 minute or so video recording later in the session. But first, I'm going to do a few
46000	56160	introductory slides, overviewing this part of this summit. So with that, let me turn to slide
56160	68320	share here, screen share, and show you my first slide. So this has a working schedule for the second
68320	75360	part of the summit, starting with modules and patterns with Kogen Shimizu from Wright State.
75360	80480	He'll introduce himself in detail. And it shows that some of the other sessions that we have,
81120	86240	basically things are nailed down now. So next week, we will have a design pad in discussion.
86240	91280	So to follow up to this session, we'd call Hammer, who's now at Google, had been at IBM.
91280	98560	We have invited some of the original people, such as Valentina Pursutit, to present, but we never
98640	105760	heard back from her. So we had call stepping up to do that. Following that, we're going to have
105760	109200	a session on Wikidata. I'll have a little bit more to say about that probably next week.
110000	117280	And you can see the remaining schedule here leading up to a panel, which we still are filling in,
117280	123680	but Pascal Hitzler will be one of the main speakers on that. So with that, let me turn to
123680	130000	today's session. And I thought I would introduce a little bit of the topic on ontology design patterns
130000	138480	and modular ontologies before we go to the video. So this is an example of a widely used pattern,
138480	144320	actually that I was a bit involved with, which is called semantic trajectory, which you see on the
144320	151520	left. And you can get an idea about what ontology design patterns are. So we have a range of concepts
151520	158000	here. What is a semantic trajectory? How do you define it? Well, first we define it in terms of
158000	164400	having segments that go from and to places where we do a fix, that is, we take a sensory measure.
165760	172480	And this segment is traversed by some type of conceptually moving object. Most of the time we're
172480	178480	thinking of a real physical object, but it may be a conceptual object. So it may be something like
178560	184640	a disease that is essentially having a course of action over time. And we're taking measurements
184640	192720	under disease over time. And we have a source for the, and a sensor type and a location for the fix.
193760	200000	You'll notice that most of the boxes have a solid line. Gary. Yes, Gary. Can you go into
200000	213520	presentation mode? Let's see if I can do that. Do you want me to go into slide mode here?
214240	215920	Yeah, make it easier to read.
221600	225680	How does that help a little bit? Thank you. No, not so far.
226000	238160	All right. I'm going to go on here. My next slide tries to illustrate the range of things you might
238160	246880	see in ODPs, ontology design patterns. On the left, you see a rather complex pattern. Actually,
246880	252800	this is an early version dealing with sensors, the sensing things, sensing features of interest.
252800	257680	There's actually several patterns probably composed in this, and this particular pattern,
257680	264160	the semantic sensor network pattern, for example, has evolved over time and improved on. Slides are
264160	275440	changing, Gary. Your slides are not changing. You don't see two ODP examples on the screen?
275680	279680	No. You are on the first slide.
282080	288080	Okay. I'm talking about the second slide. No, we don't see. Oh, second slide. Yeah.
288960	298720	You do see it? Yes. Okay. But it would help if you would. Did you still see the second slide with
298720	309120	two ODPs? There's one diagram. Okay. Well, there's two things on it. On the left side is a complex
309120	317520	one. On the right side is a very simple pattern for transitions. We don't see that. You don't see
317520	324320	that. Gary, I think you are sharing the original window of the thing and not what you are seeing.
325040	329600	You want to share your screen, not an individual application?
331600	334800	There we go. There you go. Yes. Okay.
338000	342640	I was asked to change your mode. Do you see the two patterns now? Yes.
345040	350080	So, again, to complete this is the complex one on the left, which is dealing with sensors
350080	356560	information and the very simple idea of what is a transition and transition of an event has a
356560	362800	starting time. It's a setting for a thing and it has a final state. So, transitions from a start
362800	369200	to an end. Very, very simple design. Okay. Can you see a new slide now? Why ODPs?
373440	379760	Yes. Okay. Fine. Okay. So, I wanted to provide a little rationale for some of the things that go
379760	386960	into using ODPs. The original idea was that it was difficult to understand and get an overview of
386960	392400	very large ontologies as they were growing. It was also difficult to see the effects of a change or
392400	398640	an extension in some concepts. So, what impact it would have? And also, another thing that was said
398640	404320	is that it's often very hard to get full agreement on all the commitments on a large ontology. And
404320	411280	for these reasons and other reasons such as interoperability problems and alignment problems,
411280	416080	understandability problems, people decided to look at these trade-offs and maybe it would be
416080	420720	better to start with something smaller like some of the patterns that I showed you before.
421440	427520	Here's a little bit more on some of this reasoning about what ontology patterns might be like.
428400	437120	They reflect, of course, the need to capture the reality that is in data, common to patterns.
437120	441840	Often, the patterns in data are hard to find, but if we can spend some time looking at that,
441840	447120	we can sort of abstract some of those patterns from the data itself as opposed to a pre-developed
447120	454080	top-level ontology. I have a quote here, roughly a quote here from Verna Kuhn early on in the era
454080	459280	when patterns were starting to be used. For solving semantic problems, it may be more productive to
459280	465760	agree on minimal requirements imposed on small notions like a pattern notion. So, the idea was
465760	472480	to use small and well-engineered, coherent, minimally constrained schemas as a start for ontology
472480	476960	that later could be combined, as I showed you with the semantic sensor net, where you might
476960	484640	can be combining several different patterns. You can use very good documentation and design
484640	491040	rationalities and best engineering practice for reuse over time, so you can prove things
491040	499600	like the semantic sensor network over time. So, for all these reasons, people did try out going to
500240	506960	modular patterns. And as they did, and roughly about 12 years ago or so,
508880	514160	Gangamy and Presuti, who I invited to a session but haven't heard back,
515120	522400	wrote some documentation on modular operations and just talked about five basic types of
522400	527840	operations when reusing them and building them. So, the first is, of course, importing them,
528640	534480	and you can use import functionality to do that into whatever you're trying to do.
535200	541360	You can also specialize, two types of specialization. You can take an existing idea and
541360	548000	specialize it conceptually and then go from there. Or you can have a specialization done
548000	553840	by creating subclasses and subproperties on existing ODP classes and properties.
554720	563680	You can also generalize an ODP in the concepts in them. And one of the most complex things,
563680	569200	and you saw a little bit of this in the semantic sensor net, the early version, is composition,
569840	575680	where you use multiple ODPs, small pieces, and try to compose them in a meaningful way,
575680	580800	fitting them together. And the last one, of course, here is the idea of, well, you may not find
581440	588800	an idea in a particular pattern that you want to use, and you might have to develop new patterns
588800	595920	for that. And here is an example of just such a thing of an expansion. I showed you that
596960	603840	semantic trajectory before. Here we have a portion of that trajectory on the right,
604400	610320	but you're sort of extending it and combining it with other things, so that a particular project
610320	616000	that NSF funded called the Geolink Projects used the trajectory for scientific expeditions.
616000	623520	And so they had to, they specialized the idea of what is traversing the segment to a vessel that
623520	629920	might be going on a cruise. And they also added other ideas on that, such as the data was gathered
629920	635040	and put it into a repository, things of that nature. So this is just a small example of how
635920	642160	patterns get built and get reused. And we'll hear more about that from Kogan and also next week
642160	648880	from Kahl. My last slide is just a few sources on that. This is the reference to that semantic
648880	655760	trajectory, for example. This is a tutorial sort of on how you combine patterns, make good patterns.
655760	661520	This is something on how you document patterns and so forth. So with that, let me stop the share
661520	668880	and let me turn the session back over to Ken, who will hopefully start the Kogan's video,
668880	673920	which runs about 34 minutes or so, which will leave us with a little bit of time for Q&A,
673920	680480	although he's not here this time. He promised to come back next time when call presents,
680480	685520	he'll be available questions and answers. So if we have an important ones, we have an address here,
685520	695280	you may be able to do it then. So this is the recording.
697280	702560	Hopefully you'll be able to hear the sound, but it's quite redundant. You'll notice that
703600	714240	the transcript is on the right. And you'll also see the transcript on the screen as he's speaking.
715840	725760	Hello, everyone. Welcome to my talk. Today, I'm going to be providing a
728800	737440	introduction to patterns and modules. And by this, I really mean patterns and modules as they
738080	748400	exist outside of the traditional sort of formal ontology perspective. So I'm not looking at the
748400	757920	modules and the patterns as they exist inside of say, for example, Dolce or BFO or any of the other
757920	765280	upper fundamental foundational reference ontologies, but instead coming at this from more of the
765280	773120	empirical data-driven side of things. We'll go over briefly the methodology and some of the resources.
774160	780800	So very briefly, my name's Kogan Shimizu. I'm an assistant professor over at Wright State University
780800	789520	in Dayton, Ohio. Some of you have already spoken with me at previous talks and some of you have
789520	796320	just known me for years already. But regardless, I'm happy to be here and talk a little bit about
796320	802400	what I'm interested in, and then also the point of the talk. So a little bit more about me is that
802400	808800	I'm broadly interested in knowledge engineering. And I mean this from the full perspective or the full
808800	818000	spectrum from just basic knowledge representation from any, from low expressivities of taxonomies,
818560	825680	controlled vocabularies all way to full-blown owl ontologies. But this also encompasses some of the
826320	832960	deployment aspects and how our knowledge graphs and these knowledge bases use. And that's a lot of
832960	837920	where this pattern-based methodology comes from is it's not just about patterns and the knowledge,
837920	845120	but also patterns of usage and how you can really simplify how knowledge graphs and the constituent
845120	852160	knowledge is really utilized. And then of course the the next two things are just kind of employing
852160	858160	knowledge engineering to do more effective open science and more effective teaching of this
858160	863120	material. So kind of looking at knowledge engineering from the perspective of knowledge
863120	869280	engineering in order to be a more effective teacher. But I digress by now. So without further ado,
869280	876080	let's take a look at the rest of our talk today. There are four main pieces that we're going to
877680	884480	dig into and I'll give briefly an motivation and then we'll again briefly kind of go over the
884480	890480	modular ontology modeling methodology or MOMO. And then I have a few examples of what patterns
890480	895280	look like and kind of some connections to some previous pattern work that we've seen in previous
895280	903200	talks here. And then we'll close with some tools and resources. So the first example that I have is
903200	911680	called the nowhere graph. The nowhere graph is a NSF-funded consortium. And I don't mean that in
912560	919360	a more formal sense. There is no NSF consortium in this case. By this I just mean that there's a
919360	925840	pretty huge team. I think it's over 50 collaborators at this point and that spans from all of the
926480	935920	student researchers to the investigators, the collaborators from NGOs and private industry
935920	943680	and government agencies. It's pretty quite expansive and with high coverage. We have a whole bunch of
943680	951040	different data sets that come from that are contributed by the different collaborators or
951040	957920	we're pulling them from publicly available websites and we're integrating them all and trying to
957920	969760	provide a geospatial backbone so that way the representation of spatial integration is pre-done.
970240	976720	We're front-loading the cost of doing the spatial integration and this came with some pretty tricky
977280	986800	and interesting problems with how to adequately express these spatial relations and also ensure
986800	991600	that we have provenance from all of the different data sets and all of the different features and
991600	996960	do the semantic harmonization. And it turns out that we did wind up using a modular knowledge
996960	1004800	graph in order to do this. So this is what the schema looked like back in July of 2021
1005840	1013040	and into 2022 I believe. And each one of these little tiny boxes that you can see here are a
1013040	1020400	module. We have an expertise module, we have a hazard module, we have different modules for the
1020480	1027920	different data sets so climate division, soil types, storm observations, smoke plumes, things that
1027920	1037600	impact the world around us by some physical phenomena and is also of interest enough that the
1037600	1042800	government at a state or federal level is tracking them and providing data sets about them.
1043440	1050960	And so what we did is we identified a kind of pattern that exists in this observations and it's
1050960	1060240	drawn from the SOSA SSN, the sensors observations sampling actuators ontology from the semantic
1060240	1068800	sensor network and kind of extracting a core piece of that and using that as a sort of template
1069440	1079280	to mint new patterns which kind of turn into these modules and so on. And this strategy I think as
1079280	1084880	both Nick and Chris have said in previous talks is really effective for rapidly expanding
1086640	1094400	additional coverage for a domain without really having to know the ontology in and out.
1095360	1100640	There's some clear connection points to these strategies. And so what this results in is as
1100640	1108240	of November of 2022 is this much larger schema and I don't think this is everything either.
1110960	1116320	And it's also hardly readable because it doesn't fit on the screen. It's kind of an interesting
1116320	1122480	sort of catch 22. It's cool that we've been able to integrate all of these different data sets but
1122480	1127760	now it doesn't fit on the slide so we can't really show it off. But anyway the evolution and
1127760	1135040	maintenance of the graph comes from these patterns and these modules and being able to rapidly
1135680	1142880	replace a module or add in a new module based on an older module or the same pattern
1143920	1148640	is really instrumental. And we'll kind of go into this in a few slides.
1149280	1156960	Another example that we have is the enslaved hub ontology. So the enslaved hub is a smaller
1156960	1164160	but no less important knowledge graph. It's really about identifying, integrating and really
1164160	1170880	making visible the stories of the peoples of the historical slave trade. So trying to find
1171600	1181360	how a particular person might have traveled from place to place largely against their will and
1182320	1192240	with different names and different personal relationships and trying to identify what
1192240	1197360	actually is the ground truth because that's one of the hard things here is that integrating
1197360	1203040	all of these little tiny data sets from historians across the nation and around the world even
1204320	1209600	you have different interpretations of the events that occur or different interpretations of the
1212400	1222160	first source, the first hand sources. And this resulted also in a modular knowledge graph.
1222160	1228160	Otherwise we wouldn't be presenting it in this particular presentation. But the point is that
1228160	1234480	having a way of modeling the different types of characteristics of the peoples of the historical
1234480	1241520	slave trade as well as this sort of integration of the data sets is really valuable and really
1241520	1248320	makes it easy to apply a pattern based method towards it. This I will not get into so much
1248400	1253040	with the rest of the presentation, but if you have any questions or you want to see the schema
1253040	1258160	you can go to enslave.org or if you have any questions my email is at the end of the
1258800	1263040	presentation and you can go ahead and pass on questions and I'll either answer them or send
1263040	1270560	them on to the team. So anyway let's go ahead and dig a little bit more into modular ontology
1270560	1276880	modeling. So one of the things that I didn't really talk about is what is the difference between
1276880	1284080	a knowledge graph and an ontology. And in this case we don't really mean them to be too differently
1285200	1292000	except for in this case an ontology is really just the T-box of the ontology. And then we
1292000	1299200	consider the knowledge graph to be the A-box coupled with the ontology which acts as a schema
1299200	1303760	for the knowledge graph. Really it's just changing the different buzzwords around
1303760	1312880	in order to make sure that the work is fundable sometimes or a little bit more relatable to
1312880	1320800	to a broader audience. And in this case what we mean with pattern mediated methods for knowledge
1320800	1327120	engineering and including these patterns is really including and using patterns as a first order
1327120	1335440	or first class citizen within the modeling paradigm. So making sure that the modular ontology
1338240	1346880	is directly represented using annotations and this is what really drives the ability to expand
1348000	1354560	the the ontology or the knowledge graph schema based on the existing patterns within the ontology
1354560	1360320	or to yank out and say we'll we don't want this one anymore let's go ahead and replace it with this
1360320	1366240	new one and then finding all of the pertinent axioms and underlying instances for those for those
1366240	1375200	classes is quite valuable. And so what we have here on this slide is what we call the modularity
1375200	1380720	which is the patterns made out of sorry the schemas made out of patterns and then on the right
1380720	1386640	hand side we have the metadata scaffolding and so this is really the the the catchy way of saying
1386640	1391360	well we're just going to annotate the schema with additional information that indicates what
1392240	1400000	pattern or module particular classes within the ontology belong to. So with this in mind the
1400000	1405360	metadata scaffolding can really be thought of as the sort of ladder right you have a conceptual
1405440	1411120	component which is an extremely human centric term which might be implemented in a number of
1411120	1418400	different ways. For example space and time are great examples of this because there's
1418400	1426720	so many different ways of modeling space right that we can each say that each ways of those
1426720	1433840	modeling spaces is is kind of pattern is kind of like a pattern and so a spatial extent would be
1433840	1439680	the conceptual component it would be represented by some set of patterns and then you choose a
1439680	1444960	pattern and you turn it into something that's more apt for your use case and we call that a module.
1446160	1450560	And then you have the instances of the modules which are really just the shapes of the data
1451120	1458400	the actual triples or the materializations of the the data that the model module models.
1458640	1470960	We use a a language called opala or opal which is the better way of of kind of turning the
1470960	1479520	the acronym into into a human word which is just the ODP representation language. So OP
1481040	1488320	and then A from pattern and then L. What I have here on the right is an in-progress draft of the
1488880	1497280	version two of opal and what we are trying to do here is to include even more information about
1497280	1504800	what is actually going on inside of the pattern. Axioms tend to follow patterns especially within
1504800	1511280	the MOMO methodology but there's also different ways of thinking about patterns in terms of the
1511280	1517920	representation so you can have a perspective which is really just an extremely simplified
1518000	1525200	view of maybe a more expressive version of a pattern. You have documentation that's associated
1525200	1530640	with it so the the pattern will have a schema diagram and all of the different ways that you
1530640	1536880	want to represent a pattern we're trying to codify into the into this model. There is an
1536880	1547120	additional there's a base opala or opal which was published in 2016 from a number of people
1547120	1555760	from the the community and we are kind of generating a new specification currently.
1557760	1564320	So modular ontology modeling now let's take a look at the actual methodology it's it's nine steps.
1565520	1572880	We want to focus as I said largely on the empirical data-driven reality which means
1572880	1579600	that we're not necessarily always concerned with the philosophical ramifications as we are with
1579600	1589280	what can we model and what data is readily available or important to the use case at hand. So
1589280	1597200	you start with designing the use case with however whichever methodology that you want with use case
1597200	1602960	generation and this can you can draw from any number of knowledge elicitation frameworks.
1604160	1609680	What we find to be particularly important and we call out here is the use of competency questions.
1610320	1613920	I don't think this is particularly new to the ontology modeling community
1614960	1621200	but it really helps you identify what the key notions are but also the interactions with the
1621200	1628240	data and this is really where the the empirical or data-driven reality aspect comes in because if
1628240	1638640	you can't really in natural language ask a question about it then what to what extent is it useful to
1638640	1646400	model beyond that. There's probably some fighting words in that statement but at this top level
1646480	1655840	sort of of this address here we can sort of gloss over that for now. The the the interesting parts
1655840	1662480	now are in steps four five and six which are really kind of what differentiate MOMO from other
1665280	1673120	methodologies and that's really once you have the key notions for your use case which are extracted
1673120	1678240	from your data, your competency questions, your domain experts, what have you. You want to match
1678240	1685680	those the conceptual components that patterns model. We have resources that I'll display later on in
1685680	1694640	the presentation about sorry about of all of the different patterns that we have and can be used
1695520	1701200	to sort of plug and play a schema together. The instantiation of the patterns is comes what
1701200	1709520	comes next and that's really replacing the terms and properties of a pattern wholesale kind of like
1709520	1716560	a template starting with maybe like madlib style. You're not subclassing a pattern you're just
1717280	1724320	using the structure of the pattern over and over again. In step six we have the systematic
1724320	1732960	axiomatization which is once you have your patterns and you look at the schema diagram
1732960	1740000	for your different modules and your different patterns is you go edge by edge within your
1740000	1746800	schema diagram and you assign the ontological meaning of what that top level intuitive conceptual
1746800	1753440	relationship is. I won't get into that so much within this talk but what we have here is the
1753440	1758880	modular ontology modeling published in the semantic web journal and you should be able to
1758880	1765280	kind of get a lot more information on the exact processes within this methodology from there.
1766000	1772560	After that you plug all of the modules together with quite literally like puzzle pieces you review
1772560	1779760	the final product add any more axioms that you think are useful across the entire assembled
1780560	1783040	schema and then you produce your owl artifact.
1785440	1793920	So that was really Momo in a nutshell. So what I have here are a few examples three actually I
1793920	1801360	think and then a brief discussion on the template based instantiation that we utilize for Momo and
1801440	1810720	how it kind of connects or is quite obviously parallel to the sort of DOSP strategy employed
1810720	1817440	within the oboe community. So this first pattern that we have here is a pattern for depicting
1817440	1821520	causal relationships between events this is something that came out of the nowhere graph
1822160	1828720	project actually the next two patterns are as well but I kind of want to show you here how you
1828720	1834880	have a pattern and then you also have a module within the pattern right this abstract event
1835440	1842160	compared to this events this concrete notion of event event for those of you who are familiar with
1843840	1850240	the upper ontology sphere this would probably be easily modeled as
1850880	1855680	your sort of perjure and endurance thing because you have a description in a situation you have
1855760	1860800	this thing that exists in time and thing that exists out of time but from a pattern perspective
1860800	1866080	the exact implementation of this doesn't matter and that's kind of the point you can implement
1866080	1871440	this pattern using an upper ontology or you could call it whatever you want like event concrete
1871440	1877120	which is maybe not a great name but kind of gets the point across. These blue boxes with the dashed
1877120	1884480	lines are what we call the interfaces I said earlier conceptual components but you can kind
1884480	1890640	of think of them as interfaces from software engineering because they are an implementation
1890640	1897040	they are a hook within this pattern that says right here belongs anything that is a model of
1897040	1903840	what an observation is or anything here can be fulfilled by something that sort of adheres to
1903840	1912320	the contract of what a spatiotemporal extent is and we just note that with with the blue box
1913120	1919040	and so you can replace that blue box with an entire new pattern or you can kind of just
1919040	1926800	drop it away and have it something very simplistic like a stub and so on and so this
1926800	1936400	is how we do that and this is also what allows it to kind of for people to kind of conceptualize
1936400	1941840	these as puzzle pieces because you take your spatiotemporal extent pattern you plug it in
1941840	1947280	quite literally like a puzzle piece into the spatiotemporal interface within the schema diagram
1947280	1952160	and then you just build out your patterns and you modify them to your use case and then you're
1952160	1958960	done right that's kind of the strength of what we're trying to do here is by leveraging these
1958960	1965360	patterns and the fact that all of the ontological analysis has already been done it's really just
1965360	1971920	the assembly and configuration for your use case that drives the the usefulness of this
1978080	1982160	okay I accidentally reordered these sorry for flipping through a few slides there
1982160	1989440	this is another example here of of a pattern we have two interfaces this time but now actually
1989440	1996160	what we have here is this purple box which is really just a controlled vocabulary it's this
1996160	2005360	it's it's just another sort of um technicolor idiosyncrasy for our um presentation or our schema
2005360	2012880	diagram presentation and it's really just saying that the the class of organization scheme consists
2012880	2020480	of strictly a set number of individuals not particularly exciting but it's something that
2020480	2030000	we can model and is sometimes extremely convenient to to model even at the pattern level and then
2030000	2035920	doing it explicitly like this instead of having a subsumption hierarchy somewhere in the background
2035920	2042400	it means that there's really no change to the ontology when you add in a new instance for
2042400	2048560	example here of the organization scheme in this case you would replace custom with whatever you want
2049520	2055120	because custom kind of doesn't belong in the in the in the pattern here um
2057280	2064800	keep moving on uh so this final pattern example that we have here this is a pattern for depicting
2064800	2072800	features of s2 cells or any cell in a hierarchical grid so let me back up there a little bit what we
2072800	2080400	have are these cells um and the cell is really just a geometry a tessellated geometry across the
2080400	2086640	surface of the earth or any body really but in this case let's let's just stick with the earth
2086640	2092000	and then what you have is these cells are hierarchical so four cells make up the next
2092080	2098560	tessellated geometry and it just up and up and up and so s2 um is one particular
2099280	2105360	version of this and that's employed by google and it's really just um four cells make up the next
2105360	2113040	larger cell and then four of those make up there and um there's also a way to do this using hexagons
2113040	2119600	that's called h3 using it out of uber but really what um what's interesting about this
2119600	2126400	are these red arrows i mentioned earlier that sometimes it's useful to have these
2126960	2134320	shortcuts within a pattern a simplified view right so when you have a cell and you want to
2134320	2145360	represent it uh using geosparcle or um using some sort of uh geo informational science standard
2145360	2152320	way you disconnect the cell as a concept from its geometry uh which is the literal that describes
2152320	2157440	the sort of boundary points of the cell and then the spatial relations actually occur between the
2157440	2163280	geometries not technically between the cells however when you're querying generally you want to
2164160	2169360	know how the things are spatially related at a human level and not just these arbitrary
2169360	2176720	geometries that exist um under the hood and so having a way to specifically represent these
2177600	2183360	within the schema diagram useful but also logically under the hood um as a sort of
2183360	2191840	roll chain is also is also useful uh and we use the opal annotations for the different um
2194000	2198480	excuse me for the different shortcuts to say well this is this one's optional you
2198480	2204640	don't have to actually materialize this because it's it's part of the pattern but only in so far
2204640	2213920	that you may want to simplify this for for other other people um so for example going from cells
2213920	2220320	the attribute of the particular feature that simplifies three hops with an inverse in there
2220320	2227120	into one simple thing uh but you lose a lot of the expressiveness um and uh the ontological
2227120	2235520	pitchness there so there's there are some tradeoffs uh finally um as one of our examples
2235520	2246320	this here on the left is the kwg core ontology um and the sosa ssn kernel that we use uh the core
2246320	2252720	is really just the four main concepts that we have and some very basic relationships it's
2252720	2258880	obviously much more built out within the ontology uh itself but from a schema diagrammatic um and
2258880	2265920	also from this nice compact view it's useful to only include a couple of these pieces um
2267440	2273600	but it connects into this kernel and then this kernel um the sosa ssn kernel this pattern that
2273600	2280640	we've extracted essentially from that ontology we just essentially mint um or not mint we stamp
2280640	2287040	over and over again one per data set uh how this connects right so the feature of interest remains
2287040	2293040	the same uh because it's the superclass but this observation that we have here within the kernel
2293040	2299520	um i actually done to lead you the arrow to the wrong thing it should be to the climate observation
2299520	2304160	and the observation and then you have the climate observable property and the observable property
2304160	2310080	right this is not a particularly exciting implement or instantiation of the sosa ssn
2310080	2318160	kernel template but you can see how um after you've kind of changed the names to be um more
2320320	2326320	tailored to your particular sub use case right represent a us climate division and its climate
2326320	2332480	observations um there's all of this additional stuff that's now hung off of it right we use has
2332480	2338800	simple result instead of has result the observation has a phenomenon time and then we go out and we
2338800	2345200	say okay at least with this particular diagram we say that there's hidden or additional complexity
2345200	2350480	um which would be implemented by another pattern or another module elsewhere for spatial object or
2350480	2358960	temporal entity all right so we're going to go ahead and start wrapping up i have a few things
2358960	2364800	for the tools and resources and then we'll uh we'll end with um my slide for passing on any
2364800	2372160	questions to me so the the the cool the the cool one and this is really a self insert here uh is
2372160	2379040	called model uh the modular ontology design library which is a collection of curated patterns uh so on
2380320	2387120	the next slide we have the ontology design patterns portal uh this is a huge collection of
2387120	2394400	patterns of varying quality because it contains uh submissions of patterns which were peer reviewed
2394400	2401200	but were rejected but never removed from the portal or they have wildly different sorts of uh
2402720	2407280	constraints on them ontological commitments that make them very tailored to a specific
2407280	2412800	use case and you would wonder whether or not they can really be called a pattern right so what we did
2412800	2423200	is we took out the patterns that we thought were maximally useful um and uh polished them up new
2423200	2429440	schema diagrams made sure that the axioms were consistent gave in some examples uh and and kind
2429440	2436400	of organized them by category and then we described all of them using opal right so model is actually
2436400	2447200	an annotation ontology of all of the different uh patterns um this what here on the right is
2447280	2453920	13 patterns in version one uh i am working on a second version which contains 32 some of them
2453920	2462160	are redundant in so far that they are alternative patterns for the same conceptual component or
2462160	2466560	the same interface right a couple of different spatial extent patterns a couple of different
2466560	2476080	event patterns um a couple of different role patterns and and so on um and then uh model is
2476080	2483680	not just an artifact it is meant to be a template model is a type of ontological collection which
2483680	2490720	is a collection of patterns um i call mine model because i suppose that's my prerogative but it
2490720	2501680	could be any um anybody could make a model uh finally i think i already said this is that the
2501680	2508800	model encodes many inter pattern relationships so it has uh what interfaces it provides and then
2508800	2515360	conversely what interface it implements what conceptual component in implements what are
2515360	2521280	the different specializations and generalizations between the uh patterns and what category do
2521280	2527680	they belong to uh we already talked about the portal so i'll move on what i have here is called
2527680	2534000	commodity uh the comprehensive modular ontology integrated development environment quite a mouthful
2534000	2542320	commodity is a plugin for protochet um i wrote this as part of my phd dissertation so it functions
2542320	2553600	but it is not like production quality you know it it's something to use and um to uh leverage but
2553600	2560480	you might run into a bug here there if you do uh let me know and i'll try my best to address it or
2560480	2568960	help out but essentially what this does is it provides a graphical canvas uh to do modeling
2568960	2577200	with all of the power of our and the coup de grace so to speak would be the
2577360	2585840	uh pattern library which is the number two you can actually drag and drop all of the patterns from
2585840	2593680	model directly onto the graphical canvas and it will connect them based on those uh interface
2593680	2602400	points that we talked about uh and then you can also uh customize the sort of semantics that the
2602400	2614640	edge um edges will generate uh what do i have here so here's a a quick example of what this looks
2614640	2626720	like um oh that was wrong let me try that again uh so what you can see here is the the dragging
2626720	2634320	and the dropping directly onto the thing uh it will draw the module around it um when you
2635680	2642960	draw drag sorry drag the next one over it'll connect it on the obvious touch points um
2642960	2650160	and then you can rename stuff and drag and drop and add your own classes and so on i'm not going
2650160	2654880	to go back because this seems to be fighting me on this so thank you very much for attending this
2654880	2663600	talk i'm so sorry that i couldn't be there today uh please forward any questions to me um at my
2663600	2670480	email uh or go ahead and pass them on to gary and he could do this i will also be here next week um
2672400	2678000	right after carl's talk uh which will have a lot of overlap with the sort of design process
2678560	2684160	and we can talk there um or i can answer any questions that you might have again thank you
2684160	2690640	so much and have a great day
2693920	2697680	i guess i'll verbally thank kogan for this and we'll see him next week
2698320	2705360	we now have about 12 to 15 minutes for discussion including questions and answers of course
2706720	2710400	kogan not being here there may be limitations on what we're able to
2711280	2715360	say but uh maybe we can have some discussion among ourselves here
2716880	2724640	so with that i'm looking for hands raised here and uh i know there was a small amount of chat in our
2724640	2736080	other uh online chat yes james you're commuted but here we go uh thanks gary and i appreciate
2736080	2741680	that kogan was able to present even though he wasn't able to present so much appreciated uh it
2741680	2748400	did have a bit of a hard time connecting this step up to what i do day to day when i do things that i
2748400	2756720	call design patterns or usually focused on templates and csv files or tsv files that get expanded into
2756800	2763360	some set of al-axioms that define a class uh but i guess my question was
2764720	2769280	so i am aware that there's this larger literature about ontology design patterns
2770960	2777280	that i'm not super familiar with uh i guess my my general question is how well this talk
2777280	2783520	lines up with kind of the larger literature on these things uh i don't know maybe that's a question
2783520	2792640	for gary but other people could uh could chime in is there like a single notion of ontology design
2792640	2799440	pattern and kogan was expressing it or is it a more diverse kind of field topic keyword
2802080	2807520	well it's an interesting question i'm not sure i can be definitive i have opinions of course
2807520	2813360	and i am not necessarily as up to date on all the literature uh if there's somebody out here
2813360	2821360	attending who who feels they are they can certainly speak up kogan mentioned setting up sort of a new
2822640	2831680	a new repository uh for curated design patterns and this reflects the fact that that people have
2831760	2838160	been building design patterns and posting them and uh the idea is for them to have
2838160	2844400	good documentation to reuse practice to make connections to other uh design patterns and
2844400	2849840	maybe upper levels and a lot of that is that is missing you know when we we talk about fairness
2849840	2855680	for ontology we sometimes find that they lack some of the ingredients of fairness and so
2855680	2864160	that is has been true for odps uh over time but like the the the foundry uh there's a sub community
2864160	2872880	here of people like like uh pascal and kogan and uh the people involved with the nowhere
2872880	2878480	where graph we're trying to pull some of this together and and provide more of a community
2878480	2884240	where there are higher standards existing practices so i'd say again that maybe it isn't
2884240	2892000	it isn't as large a community and maybe hasn't been uh as well funded uh as things in the biomedical
2892000	2899200	field but this is an attempt to sort of do something of that level quality and i myself
2899200	2903360	am very much interested in how these two communities can sort of share and cooperate
2903360	2908880	i mentioned the semantic trajectory as being able to be applied to a course of disease
2909680	2913360	but i'm not sure anybody has done that i'm not sure that anybody has looked at
2913360	2920720	what's common about these patterns and how to how to take uh a a dead simple pattern from oboe
2920720	2927760	and sort of put it in uh and compose with it along with uh odps from the other communities
2927760	2931680	that would be an interesting thing to look at it and might be an interesting research article
2932560	2938320	for us to consider so hopefully i've given people enough time to know maybe more about this and have
2938320	2944080	things to say i just wanted to laugh at your bit about being well funded because we don't think of
2944080	2949920	ourselves as well funded and being on the side of tooling side of things but we think of ourselves as
2949920	2955920	stealing uh time and money to build these tools but maybe you're right a lot could be said about
2955920	2960640	that it's a relative question of course and the continuity is such is very important where
2960640	2967280	things get started in the question so the geolink pattern that i sort of identified came out of or
2967280	2972560	built on a semantic trajectory but they didn't necessarily continue to fund more of that for
2972560	2978480	other types of expeditions and things like that so some of the concepts can be reused but necessarily
2978480	2984880	the projects have a you know a three year five year type of extent and and one's uncertain about the
2984880	2992160	other side that's true we often have longer time frames than that you know oboe but not always thanks
2992160	2995440	okay
3001600	3007280	um i see something in chat so i'll just read that in addition to what james asked what ontology
3007280	3012880	projects do you know and hopefully it's the community rather than just me uh use ontology design
3012880	3020320	pads for practical practically during during development um again that that's a much better
3020320	3027680	question to ask of both kogan and uh call uh so let's keep that question i do know that there
3027680	3034560	have been studies which looked at the relative of quality of ontologies built by reusing patterns or
3034560	3043520	not and unfortunately at the time of the publication i know of it wasn't great it wasn't uh a big help
3043520	3047520	at that time but again things have moved along since some of those earlier studies
3048400	3054320	ashaya you have your hand up yeah so maybe i just ask a clarification questions
3054880	3062400	in his talk does he mean that uh the design pattern we can use no matter what top ontology
3062400	3069120	that we are using and another one is so the my understanding is that the design pattern
3069760	3077200	if as logo so they are not necessarily map kind of have the same using same block
3078160	3084960	like but they can still connect to each other is that correct understanding
3086800	3090960	yeah i can i can maybe address part of that which is the interoperability question with
3090960	3096080	upper level ontologies so you notice that some of them had these stubs with the dotted lines
3096080	3101840	and has he's he said i i don't remember his exact words the idea is you can plug in different
3101840	3106080	things at this particular point some of them may be entire patterns some of them may be a
3106080	3113280	very simple concept and so forth so the idea is that the the core of the pattern below the dotted
3113280	3119920	line is gets reused and it's in common so that you can you can ask some questions across it
3119920	3125680	because there's a common element a little bit like what cob is doing right cob is providing
3125680	3132880	that core that other people can tap into but yes there will be variations depending on whether
3132880	3144320	you tap into dulce at the top or you tap into oboe so or bfo i should say so it allows sort of
3144960	3150080	some commonality and some flexibility it's a compromise there maybe somebody else has
3150080	3153440	some other wisdom to add to that or or real wisdom to add to that
3157680	3164400	well it design pattern each design pattern will have certain requirements for it to be applicable
3166480	3174080	and that could make it impossible to use in certain with certain upper ontologies
3174880	3176080	so it's
3178080	3183360	but i to what extent do these design patterns have those requirements explicitly stated
3186400	3194560	so this is very much a bottom up effort at times coming from what the data is saying to reflect the
3194560	3202240	reality of the data as opposed to a more abstract concept above and so as long as you have common
3202240	3207280	questions that can answer with the data can answer real things of interest to a domain
3207840	3215280	that they feel that's that's viable now there could be of course these different philosophical
3215280	3220480	distinctions at the top level the question is whether you have common questions that sort of tap
3220480	3221520	into that at all
3223680	3226080	they may it may not for practical purposes
3226240	3234880	yeah again this is a question this is a deeper question that people who are like kogan and
3234880	3237920	caulk and probably provide a better follow-up
3241200	3247360	there is a there's a workshop on ontology design and patterns
3248960	3250160	it's WOP
3251120	3252640	it's WOP
3253600	3258080	regularly WOP is an annual event
3259680	3263680	and you can see that some of the people in there online the past ones are online and
3263680	3267040	you can look at the at the press the papers i often do
3268480	3273920	i was part of the review panel here who are active in that community
3275040	3277440	who might have some comments
3278400	3284960	yes we have a few minutes left so let's hear from people with different experiences on this
3284960	3286080	or different ideas on this
3292720	3297280	you don't have to be shy because you've heard me talk about it yeah obviously people will know
3297280	3304320	more than that yeah so hello i'm chris hello chris so i was one of the co-organizers of the
3304320	3308160	last rendition of the workshop on ontology design patterns so if there's anything in
3308160	3311200	particular you would like me to comment on now i'm unhappy too
3314480	3319280	so we may have questions what were some of the patterns about from the last or the issues
3320480	3321760	at that i didn't attend
3323840	3328960	right so there there were patterns from different domains one of which was particularly interesting
3328960	3334320	to me which was about the design of scientific taxonomies now i don't know the
3335200	3340480	details anymore because i haven't reviewed the actual pattern but each year there are a number
3340480	3345360	of patterns that get published and one interesting point to notice here is that the patterns that
3345360	3351280	get published are not always following the same structure so there are different ideas
3351280	3357600	of what what a design pattern should consist of and also how a design pattern is supposed to be
3357600	3362560	reused and this is also one of the key notions in which i personally think that the notion of
3362560	3368080	the software design patterns differs from the notion of a ontology design pattern so when we
3368080	3375200	talk about a software design pattern these patterns are often thought as language agnostic so they
3375200	3382160	provide us with a solution that could be adopted in different languages whereas these ontology
3382160	3387680	design patterns they are often tailored to a specific knowledge representation language so
3387680	3392640	that it can be reused in that particular formula and that is one of the key differences that often
3392640	3400160	get confused between these two different notions thank you that's a good although i do know in
3400160	3407200	in his what 10 points that the less that is to produce the owl artifacts so up until then there's
3407200	3414560	some degree of conceptualization more abstraction right right so um there have been different
3414560	3421040	proposals for how a design pattern is supposed to be reported and one of these proposals includes
3421040	3426960	this 10-step or 12-step process where you have to um list all the requirements for a particular use
3426960	3432880	case and all the ways in which a pattern can be reused but that is not standardized in any way
3432880	3438160	so there are different proposals of how this could be achieved and this is just one of them so
3439840	3446560	again i have tried to actually empirically look at how patterns are reused and so far
3447120	3452000	it doesn't seem to be the case that there are there's a standard notion of either the reuse of
3452000	3457440	design pattern or standard design patterns that were used consistently throughout ontology so this
3457440	3464160	is still a open question that that's a challenging observation that we want to sort of repeat next
3464160	3469440	week so i hope you'll be back for that and ask again because i i agree that you know this is an
3469440	3474960	we're empiricists here so we want to know what really works where things are and so forth and
3474960	3483680	what can be re really reused so we we have looked at modl model they're they're curated the repository
3483680	3488400	for ontologies for odp's anybody else looked at that
3492480	3496880	oh right here the importance of building up a library we've got a hand raised
3498160	3500320	oh okay i missed it maybe it's on the other screen
3505680	3511360	oh unfortunately disappeared they have to go
3511760	3516720	so hopefully they we can continue this next week yeah
3519120	3526240	yes indeed and so call hammer who's now at google has been very involved in these things
3526240	3532480	continually and has done a lot of practical development with them and can speak to that
3532480	3538800	and can speak to methods used and since he's went from ibm to google there's probably something
3538800	3544160	he's able has been able to do he may be able to speak at a different degree of abstraction but
3544160	3553760	he has practical experience um so with that i think we can adjourn for today and um and hopefully
3553760	3560560	see you all again next week and tell your friends i hope frisk can make it okay i'm glad to be there
3560560	3564320	thanks everybody i don't know
