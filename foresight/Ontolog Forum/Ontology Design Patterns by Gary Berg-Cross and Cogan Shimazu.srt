1
00:00:00,000 --> 00:00:14,080
Hello, I'm Gary Burke, a co-chair for this summit 2023 ontology summit, and it's March 8th, 2023.

2
00:00:14,080 --> 00:00:23,680
And we are going to be doing our second phase of our ontology summit, moving into things like ontology design patterns,

3
00:00:24,000 --> 00:00:32,800
wiki data, and things of that nature. First, I should say that the schedule speaker was called

4
00:00:32,800 --> 00:00:38,400
away on a project that he had to attend that has made a video recording. And so we were going to be

5
00:00:38,400 --> 00:00:46,000
playing a 35 minute or so video recording later in the session. But first, I'm going to do a few

6
00:00:46,000 --> 00:00:56,160
introductory slides, overviewing this part of this summit. So with that, let me turn to slide

7
00:00:56,160 --> 00:01:08,320
share here, screen share, and show you my first slide. So this has a working schedule for the second

8
00:01:08,320 --> 00:01:15,360
part of the summit, starting with modules and patterns with Kogen Shimizu from Wright State.

9
00:01:15,360 --> 00:01:20,480
He'll introduce himself in detail. And it shows that some of the other sessions that we have,

10
00:01:21,120 --> 00:01:26,240
basically things are nailed down now. So next week, we will have a design pad in discussion.

11
00:01:26,240 --> 00:01:31,280
So to follow up to this session, we'd call Hammer, who's now at Google, had been at IBM.

12
00:01:31,280 --> 00:01:38,560
We have invited some of the original people, such as Valentina Pursutit, to present, but we never

13
00:01:38,640 --> 00:01:45,760
heard back from her. So we had call stepping up to do that. Following that, we're going to have

14
00:01:45,760 --> 00:01:49,200
a session on Wikidata. I'll have a little bit more to say about that probably next week.

15
00:01:50,000 --> 00:01:57,280
And you can see the remaining schedule here leading up to a panel, which we still are filling in,

16
00:01:57,280 --> 00:02:03,680
but Pascal Hitzler will be one of the main speakers on that. So with that, let me turn to

17
00:02:03,680 --> 00:02:10,000
today's session. And I thought I would introduce a little bit of the topic on ontology design patterns

18
00:02:10,000 --> 00:02:18,480
and modular ontologies before we go to the video. So this is an example of a widely used pattern,

19
00:02:18,480 --> 00:02:24,320
actually that I was a bit involved with, which is called semantic trajectory, which you see on the

20
00:02:24,320 --> 00:02:31,520
left. And you can get an idea about what ontology design patterns are. So we have a range of concepts

21
00:02:31,520 --> 00:02:38,000
here. What is a semantic trajectory? How do you define it? Well, first we define it in terms of

22
00:02:38,000 --> 00:02:44,400
having segments that go from and to places where we do a fix, that is, we take a sensory measure.

23
00:02:45,760 --> 00:02:52,480
And this segment is traversed by some type of conceptually moving object. Most of the time we're

24
00:02:52,480 --> 00:02:58,480
thinking of a real physical object, but it may be a conceptual object. So it may be something like

25
00:02:58,560 --> 00:03:04,640
a disease that is essentially having a course of action over time. And we're taking measurements

26
00:03:04,640 --> 00:03:12,720
under disease over time. And we have a source for the, and a sensor type and a location for the fix.

27
00:03:13,760 --> 00:03:20,000
You'll notice that most of the boxes have a solid line. Gary. Yes, Gary. Can you go into

28
00:03:20,000 --> 00:03:33,520
presentation mode? Let's see if I can do that. Do you want me to go into slide mode here?

29
00:03:34,240 --> 00:03:35,920
Yeah, make it easier to read.

30
00:03:41,600 --> 00:03:45,680
How does that help a little bit? Thank you. No, not so far.

31
00:03:46,000 --> 00:03:58,160
All right. I'm going to go on here. My next slide tries to illustrate the range of things you might

32
00:03:58,160 --> 00:04:06,880
see in ODPs, ontology design patterns. On the left, you see a rather complex pattern. Actually,

33
00:04:06,880 --> 00:04:12,800
this is an early version dealing with sensors, the sensing things, sensing features of interest.

34
00:04:12,800 --> 00:04:17,680
There's actually several patterns probably composed in this, and this particular pattern,

35
00:04:17,680 --> 00:04:24,160
the semantic sensor network pattern, for example, has evolved over time and improved on. Slides are

36
00:04:24,160 --> 00:04:35,440
changing, Gary. Your slides are not changing. You don't see two ODP examples on the screen?

37
00:04:35,680 --> 00:04:39,680
No. You are on the first slide.

38
00:04:42,080 --> 00:04:48,080
Okay. I'm talking about the second slide. No, we don't see. Oh, second slide. Yeah.

39
00:04:48,960 --> 00:04:58,720
You do see it? Yes. Okay. But it would help if you would. Did you still see the second slide with

40
00:04:58,720 --> 00:05:09,120
two ODPs? There's one diagram. Okay. Well, there's two things on it. On the left side is a complex

41
00:05:09,120 --> 00:05:17,520
one. On the right side is a very simple pattern for transitions. We don't see that. You don't see

42
00:05:17,520 --> 00:05:24,320
that. Gary, I think you are sharing the original window of the thing and not what you are seeing.

43
00:05:25,040 --> 00:05:29,600
You want to share your screen, not an individual application?

44
00:05:31,600 --> 00:05:34,800
There we go. There you go. Yes. Okay.

45
00:05:38,000 --> 00:05:42,640
I was asked to change your mode. Do you see the two patterns now? Yes.

46
00:05:45,040 --> 00:05:50,080
So, again, to complete this is the complex one on the left, which is dealing with sensors

47
00:05:50,080 --> 00:05:56,560
information and the very simple idea of what is a transition and transition of an event has a

48
00:05:56,560 --> 00:06:02,800
starting time. It's a setting for a thing and it has a final state. So, transitions from a start

49
00:06:02,800 --> 00:06:09,200
to an end. Very, very simple design. Okay. Can you see a new slide now? Why ODPs?

50
00:06:13,440 --> 00:06:19,760
Yes. Okay. Fine. Okay. So, I wanted to provide a little rationale for some of the things that go

51
00:06:19,760 --> 00:06:26,960
into using ODPs. The original idea was that it was difficult to understand and get an overview of

52
00:06:26,960 --> 00:06:32,400
very large ontologies as they were growing. It was also difficult to see the effects of a change or

53
00:06:32,400 --> 00:06:38,640
an extension in some concepts. So, what impact it would have? And also, another thing that was said

54
00:06:38,640 --> 00:06:44,320
is that it's often very hard to get full agreement on all the commitments on a large ontology. And

55
00:06:44,320 --> 00:06:51,280
for these reasons and other reasons such as interoperability problems and alignment problems,

56
00:06:51,280 --> 00:06:56,080
understandability problems, people decided to look at these trade-offs and maybe it would be

57
00:06:56,080 --> 00:07:00,720
better to start with something smaller like some of the patterns that I showed you before.

58
00:07:01,440 --> 00:07:07,520
Here's a little bit more on some of this reasoning about what ontology patterns might be like.

59
00:07:08,400 --> 00:07:17,120
They reflect, of course, the need to capture the reality that is in data, common to patterns.

60
00:07:17,120 --> 00:07:21,840
Often, the patterns in data are hard to find, but if we can spend some time looking at that,

61
00:07:21,840 --> 00:07:27,120
we can sort of abstract some of those patterns from the data itself as opposed to a pre-developed

62
00:07:27,120 --> 00:07:34,080
top-level ontology. I have a quote here, roughly a quote here from Verna Kuhn early on in the era

63
00:07:34,080 --> 00:07:39,280
when patterns were starting to be used. For solving semantic problems, it may be more productive to

64
00:07:39,280 --> 00:07:45,760
agree on minimal requirements imposed on small notions like a pattern notion. So, the idea was

65
00:07:45,760 --> 00:07:52,480
to use small and well-engineered, coherent, minimally constrained schemas as a start for ontology

66
00:07:52,480 --> 00:07:56,960
that later could be combined, as I showed you with the semantic sensor net, where you might

67
00:07:56,960 --> 00:08:04,640
can be combining several different patterns. You can use very good documentation and design

68
00:08:04,640 --> 00:08:11,040
rationalities and best engineering practice for reuse over time, so you can prove things

69
00:08:11,040 --> 00:08:19,600
like the semantic sensor network over time. So, for all these reasons, people did try out going to

70
00:08:20,240 --> 00:08:26,960
modular patterns. And as they did, and roughly about 12 years ago or so,

71
00:08:28,880 --> 00:08:34,160
Gangamy and Presuti, who I invited to a session but haven't heard back,

72
00:08:35,120 --> 00:08:42,400
wrote some documentation on modular operations and just talked about five basic types of

73
00:08:42,400 --> 00:08:47,840
operations when reusing them and building them. So, the first is, of course, importing them,

74
00:08:48,640 --> 00:08:54,480
and you can use import functionality to do that into whatever you're trying to do.

75
00:08:55,200 --> 00:09:01,360
You can also specialize, two types of specialization. You can take an existing idea and

76
00:09:01,360 --> 00:09:08,000
specialize it conceptually and then go from there. Or you can have a specialization done

77
00:09:08,000 --> 00:09:13,840
by creating subclasses and subproperties on existing ODP classes and properties.

78
00:09:14,720 --> 00:09:23,680
You can also generalize an ODP in the concepts in them. And one of the most complex things,

79
00:09:23,680 --> 00:09:29,200
and you saw a little bit of this in the semantic sensor net, the early version, is composition,

80
00:09:29,840 --> 00:09:35,680
where you use multiple ODPs, small pieces, and try to compose them in a meaningful way,

81
00:09:35,680 --> 00:09:40,800
fitting them together. And the last one, of course, here is the idea of, well, you may not find

82
00:09:41,440 --> 00:09:48,800
an idea in a particular pattern that you want to use, and you might have to develop new patterns

83
00:09:48,800 --> 00:09:55,920
for that. And here is an example of just such a thing of an expansion. I showed you that

84
00:09:56,960 --> 00:10:03,840
semantic trajectory before. Here we have a portion of that trajectory on the right,

85
00:10:04,400 --> 00:10:10,320
but you're sort of extending it and combining it with other things, so that a particular project

86
00:10:10,320 --> 00:10:16,000
that NSF funded called the Geolink Projects used the trajectory for scientific expeditions.

87
00:10:16,000 --> 00:10:23,520
And so they had to, they specialized the idea of what is traversing the segment to a vessel that

88
00:10:23,520 --> 00:10:29,920
might be going on a cruise. And they also added other ideas on that, such as the data was gathered

89
00:10:29,920 --> 00:10:35,040
and put it into a repository, things of that nature. So this is just a small example of how

90
00:10:35,920 --> 00:10:42,160
patterns get built and get reused. And we'll hear more about that from Kogan and also next week

91
00:10:42,160 --> 00:10:48,880
from Kahl. My last slide is just a few sources on that. This is the reference to that semantic

92
00:10:48,880 --> 00:10:55,760
trajectory, for example. This is a tutorial sort of on how you combine patterns, make good patterns.

93
00:10:55,760 --> 00:11:01,520
This is something on how you document patterns and so forth. So with that, let me stop the share

94
00:11:01,520 --> 00:11:08,880
and let me turn the session back over to Ken, who will hopefully start the Kogan's video,

95
00:11:08,880 --> 00:11:13,920
which runs about 34 minutes or so, which will leave us with a little bit of time for Q&A,

96
00:11:13,920 --> 00:11:20,480
although he's not here this time. He promised to come back next time when call presents,

97
00:11:20,480 --> 00:11:25,520
he'll be available questions and answers. So if we have an important ones, we have an address here,

98
00:11:25,520 --> 00:11:35,280
you may be able to do it then. So this is the recording.

99
00:11:37,280 --> 00:11:42,560
Hopefully you'll be able to hear the sound, but it's quite redundant. You'll notice that

100
00:11:43,600 --> 00:11:54,240
the transcript is on the right. And you'll also see the transcript on the screen as he's speaking.

101
00:11:55,840 --> 00:12:05,760
Hello, everyone. Welcome to my talk. Today, I'm going to be providing a

102
00:12:08,800 --> 00:12:17,440
introduction to patterns and modules. And by this, I really mean patterns and modules as they

103
00:12:18,080 --> 00:12:28,400
exist outside of the traditional sort of formal ontology perspective. So I'm not looking at the

104
00:12:28,400 --> 00:12:37,920
modules and the patterns as they exist inside of say, for example, Dolce or BFO or any of the other

105
00:12:37,920 --> 00:12:45,280
upper fundamental foundational reference ontologies, but instead coming at this from more of the

106
00:12:45,280 --> 00:12:53,120
empirical data-driven side of things. We'll go over briefly the methodology and some of the resources.

107
00:12:54,160 --> 00:13:00,800
So very briefly, my name's Kogan Shimizu. I'm an assistant professor over at Wright State University

108
00:13:00,800 --> 00:13:09,520
in Dayton, Ohio. Some of you have already spoken with me at previous talks and some of you have

109
00:13:09,520 --> 00:13:16,320
just known me for years already. But regardless, I'm happy to be here and talk a little bit about

110
00:13:16,320 --> 00:13:22,400
what I'm interested in, and then also the point of the talk. So a little bit more about me is that

111
00:13:22,400 --> 00:13:28,800
I'm broadly interested in knowledge engineering. And I mean this from the full perspective or the full

112
00:13:28,800 --> 00:13:38,000
spectrum from just basic knowledge representation from any, from low expressivities of taxonomies,

113
00:13:38,560 --> 00:13:45,680
controlled vocabularies all way to full-blown owl ontologies. But this also encompasses some of the

114
00:13:46,320 --> 00:13:52,960
deployment aspects and how our knowledge graphs and these knowledge bases use. And that's a lot of

115
00:13:52,960 --> 00:13:57,920
where this pattern-based methodology comes from is it's not just about patterns and the knowledge,

116
00:13:57,920 --> 00:14:05,120
but also patterns of usage and how you can really simplify how knowledge graphs and the constituent

117
00:14:05,120 --> 00:14:12,160
knowledge is really utilized. And then of course the the next two things are just kind of employing

118
00:14:12,160 --> 00:14:18,160
knowledge engineering to do more effective open science and more effective teaching of this

119
00:14:18,160 --> 00:14:23,120
material. So kind of looking at knowledge engineering from the perspective of knowledge

120
00:14:23,120 --> 00:14:29,280
engineering in order to be a more effective teacher. But I digress by now. So without further ado,

121
00:14:29,280 --> 00:14:36,080
let's take a look at the rest of our talk today. There are four main pieces that we're going to

122
00:14:37,680 --> 00:14:44,480
dig into and I'll give briefly an motivation and then we'll again briefly kind of go over the

123
00:14:44,480 --> 00:14:50,480
modular ontology modeling methodology or MOMO. And then I have a few examples of what patterns

124
00:14:50,480 --> 00:14:55,280
look like and kind of some connections to some previous pattern work that we've seen in previous

125
00:14:55,280 --> 00:15:03,200
talks here. And then we'll close with some tools and resources. So the first example that I have is

126
00:15:03,200 --> 00:15:11,680
called the nowhere graph. The nowhere graph is a NSF-funded consortium. And I don't mean that in

127
00:15:12,560 --> 00:15:19,360
a more formal sense. There is no NSF consortium in this case. By this I just mean that there's a

128
00:15:19,360 --> 00:15:25,840
pretty huge team. I think it's over 50 collaborators at this point and that spans from all of the

129
00:15:26,480 --> 00:15:35,920
student researchers to the investigators, the collaborators from NGOs and private industry

130
00:15:35,920 --> 00:15:43,680
and government agencies. It's pretty quite expansive and with high coverage. We have a whole bunch of

131
00:15:43,680 --> 00:15:51,040
different data sets that come from that are contributed by the different collaborators or

132
00:15:51,040 --> 00:15:57,920
we're pulling them from publicly available websites and we're integrating them all and trying to

133
00:15:57,920 --> 00:16:09,760
provide a geospatial backbone so that way the representation of spatial integration is pre-done.

134
00:16:10,240 --> 00:16:16,720
We're front-loading the cost of doing the spatial integration and this came with some pretty tricky

135
00:16:17,280 --> 00:16:26,800
and interesting problems with how to adequately express these spatial relations and also ensure

136
00:16:26,800 --> 00:16:31,600
that we have provenance from all of the different data sets and all of the different features and

137
00:16:31,600 --> 00:16:36,960
do the semantic harmonization. And it turns out that we did wind up using a modular knowledge

138
00:16:36,960 --> 00:16:44,800
graph in order to do this. So this is what the schema looked like back in July of 2021

139
00:16:45,840 --> 00:16:53,040
and into 2022 I believe. And each one of these little tiny boxes that you can see here are a

140
00:16:53,040 --> 00:17:00,400
module. We have an expertise module, we have a hazard module, we have different modules for the

141
00:17:00,480 --> 00:17:07,920
different data sets so climate division, soil types, storm observations, smoke plumes, things that

142
00:17:07,920 --> 00:17:17,600
impact the world around us by some physical phenomena and is also of interest enough that the

143
00:17:17,600 --> 00:17:22,800
government at a state or federal level is tracking them and providing data sets about them.

144
00:17:23,440 --> 00:17:30,960
And so what we did is we identified a kind of pattern that exists in this observations and it's

145
00:17:30,960 --> 00:17:40,240
drawn from the SOSA SSN, the sensors observations sampling actuators ontology from the semantic

146
00:17:40,240 --> 00:17:48,800
sensor network and kind of extracting a core piece of that and using that as a sort of template

147
00:17:49,440 --> 00:17:59,280
to mint new patterns which kind of turn into these modules and so on. And this strategy I think as

148
00:17:59,280 --> 00:18:04,880
both Nick and Chris have said in previous talks is really effective for rapidly expanding

149
00:18:06,640 --> 00:18:14,400
additional coverage for a domain without really having to know the ontology in and out.

150
00:18:15,360 --> 00:18:20,640
There's some clear connection points to these strategies. And so what this results in is as

151
00:18:20,640 --> 00:18:28,240
of November of 2022 is this much larger schema and I don't think this is everything either.

152
00:18:30,960 --> 00:18:36,320
And it's also hardly readable because it doesn't fit on the screen. It's kind of an interesting

153
00:18:36,320 --> 00:18:42,480
sort of catch 22. It's cool that we've been able to integrate all of these different data sets but

154
00:18:42,480 --> 00:18:47,760
now it doesn't fit on the slide so we can't really show it off. But anyway the evolution and

155
00:18:47,760 --> 00:18:55,040
maintenance of the graph comes from these patterns and these modules and being able to rapidly

156
00:18:55,680 --> 00:19:02,880
replace a module or add in a new module based on an older module or the same pattern

157
00:19:03,920 --> 00:19:08,640
is really instrumental. And we'll kind of go into this in a few slides.

158
00:19:09,280 --> 00:19:16,960
Another example that we have is the enslaved hub ontology. So the enslaved hub is a smaller

159
00:19:16,960 --> 00:19:24,160
but no less important knowledge graph. It's really about identifying, integrating and really

160
00:19:24,160 --> 00:19:30,880
making visible the stories of the peoples of the historical slave trade. So trying to find

161
00:19:31,600 --> 00:19:41,360
how a particular person might have traveled from place to place largely against their will and

162
00:19:42,320 --> 00:19:52,240
with different names and different personal relationships and trying to identify what

163
00:19:52,240 --> 00:19:57,360
actually is the ground truth because that's one of the hard things here is that integrating

164
00:19:57,360 --> 00:20:03,040
all of these little tiny data sets from historians across the nation and around the world even

165
00:20:04,320 --> 00:20:09,600
you have different interpretations of the events that occur or different interpretations of the

166
00:20:12,400 --> 00:20:22,160
first source, the first hand sources. And this resulted also in a modular knowledge graph.

167
00:20:22,160 --> 00:20:28,160
Otherwise we wouldn't be presenting it in this particular presentation. But the point is that

168
00:20:28,160 --> 00:20:34,480
having a way of modeling the different types of characteristics of the peoples of the historical

169
00:20:34,480 --> 00:20:41,520
slave trade as well as this sort of integration of the data sets is really valuable and really

170
00:20:41,520 --> 00:20:48,320
makes it easy to apply a pattern based method towards it. This I will not get into so much

171
00:20:48,400 --> 00:20:53,040
with the rest of the presentation, but if you have any questions or you want to see the schema

172
00:20:53,040 --> 00:20:58,160
you can go to enslave.org or if you have any questions my email is at the end of the

173
00:20:58,800 --> 00:21:03,040
presentation and you can go ahead and pass on questions and I'll either answer them or send

174
00:21:03,040 --> 00:21:10,560
them on to the team. So anyway let's go ahead and dig a little bit more into modular ontology

175
00:21:10,560 --> 00:21:16,880
modeling. So one of the things that I didn't really talk about is what is the difference between

176
00:21:16,880 --> 00:21:24,080
a knowledge graph and an ontology. And in this case we don't really mean them to be too differently

177
00:21:25,200 --> 00:21:32,000
except for in this case an ontology is really just the T-box of the ontology. And then we

178
00:21:32,000 --> 00:21:39,200
consider the knowledge graph to be the A-box coupled with the ontology which acts as a schema

179
00:21:39,200 --> 00:21:43,760
for the knowledge graph. Really it's just changing the different buzzwords around

180
00:21:43,760 --> 00:21:52,880
in order to make sure that the work is fundable sometimes or a little bit more relatable to

181
00:21:52,880 --> 00:22:00,800
to a broader audience. And in this case what we mean with pattern mediated methods for knowledge

182
00:22:00,800 --> 00:22:07,120
engineering and including these patterns is really including and using patterns as a first order

183
00:22:07,120 --> 00:22:15,440
or first class citizen within the modeling paradigm. So making sure that the modular ontology

184
00:22:18,240 --> 00:22:26,880
is directly represented using annotations and this is what really drives the ability to expand

185
00:22:28,000 --> 00:22:34,560
the the ontology or the knowledge graph schema based on the existing patterns within the ontology

186
00:22:34,560 --> 00:22:40,320
or to yank out and say we'll we don't want this one anymore let's go ahead and replace it with this

187
00:22:40,320 --> 00:22:46,240
new one and then finding all of the pertinent axioms and underlying instances for those for those

188
00:22:46,240 --> 00:22:55,200
classes is quite valuable. And so what we have here on this slide is what we call the modularity

189
00:22:55,200 --> 00:23:00,720
which is the patterns made out of sorry the schemas made out of patterns and then on the right

190
00:23:00,720 --> 00:23:06,640
hand side we have the metadata scaffolding and so this is really the the the catchy way of saying

191
00:23:06,640 --> 00:23:11,360
well we're just going to annotate the schema with additional information that indicates what

192
00:23:12,240 --> 00:23:20,000
pattern or module particular classes within the ontology belong to. So with this in mind the

193
00:23:20,000 --> 00:23:25,360
metadata scaffolding can really be thought of as the sort of ladder right you have a conceptual

194
00:23:25,440 --> 00:23:31,120
component which is an extremely human centric term which might be implemented in a number of

195
00:23:31,120 --> 00:23:38,400
different ways. For example space and time are great examples of this because there's

196
00:23:38,400 --> 00:23:46,720
so many different ways of modeling space right that we can each say that each ways of those

197
00:23:46,720 --> 00:23:53,840
modeling spaces is is kind of pattern is kind of like a pattern and so a spatial extent would be

198
00:23:53,840 --> 00:23:59,680
the conceptual component it would be represented by some set of patterns and then you choose a

199
00:23:59,680 --> 00:24:04,960
pattern and you turn it into something that's more apt for your use case and we call that a module.

200
00:24:06,160 --> 00:24:10,560
And then you have the instances of the modules which are really just the shapes of the data

201
00:24:11,120 --> 00:24:18,400
the actual triples or the materializations of the the data that the model module models.

202
00:24:18,640 --> 00:24:30,960
We use a a language called opala or opal which is the better way of of kind of turning the

203
00:24:30,960 --> 00:24:39,520
the acronym into into a human word which is just the ODP representation language. So OP

204
00:24:41,040 --> 00:24:48,320
and then A from pattern and then L. What I have here on the right is an in-progress draft of the

205
00:24:48,880 --> 00:24:57,280
version two of opal and what we are trying to do here is to include even more information about

206
00:24:57,280 --> 00:25:04,800
what is actually going on inside of the pattern. Axioms tend to follow patterns especially within

207
00:25:04,800 --> 00:25:11,280
the MOMO methodology but there's also different ways of thinking about patterns in terms of the

208
00:25:11,280 --> 00:25:17,920
representation so you can have a perspective which is really just an extremely simplified

209
00:25:18,000 --> 00:25:25,200
view of maybe a more expressive version of a pattern. You have documentation that's associated

210
00:25:25,200 --> 00:25:30,640
with it so the the pattern will have a schema diagram and all of the different ways that you

211
00:25:30,640 --> 00:25:36,880
want to represent a pattern we're trying to codify into the into this model. There is an

212
00:25:36,880 --> 00:25:47,120
additional there's a base opala or opal which was published in 2016 from a number of people

213
00:25:47,120 --> 00:25:55,760
from the the community and we are kind of generating a new specification currently.

214
00:25:57,760 --> 00:26:04,320
So modular ontology modeling now let's take a look at the actual methodology it's it's nine steps.

215
00:26:05,520 --> 00:26:12,880
We want to focus as I said largely on the empirical data-driven reality which means

216
00:26:12,880 --> 00:26:19,600
that we're not necessarily always concerned with the philosophical ramifications as we are with

217
00:26:19,600 --> 00:26:29,280
what can we model and what data is readily available or important to the use case at hand. So

218
00:26:29,280 --> 00:26:37,200
you start with designing the use case with however whichever methodology that you want with use case

219
00:26:37,200 --> 00:26:42,960
generation and this can you can draw from any number of knowledge elicitation frameworks.

220
00:26:44,160 --> 00:26:49,680
What we find to be particularly important and we call out here is the use of competency questions.

221
00:26:50,320 --> 00:26:53,920
I don't think this is particularly new to the ontology modeling community

222
00:26:54,960 --> 00:27:01,200
but it really helps you identify what the key notions are but also the interactions with the

223
00:27:01,200 --> 00:27:08,240
data and this is really where the the empirical or data-driven reality aspect comes in because if

224
00:27:08,240 --> 00:27:18,640
you can't really in natural language ask a question about it then what to what extent is it useful to

225
00:27:18,640 --> 00:27:26,400
model beyond that. There's probably some fighting words in that statement but at this top level

226
00:27:26,480 --> 00:27:35,840
sort of of this address here we can sort of gloss over that for now. The the the interesting parts

227
00:27:35,840 --> 00:27:42,480
now are in steps four five and six which are really kind of what differentiate MOMO from other

228
00:27:45,280 --> 00:27:53,120
methodologies and that's really once you have the key notions for your use case which are extracted

229
00:27:53,120 --> 00:27:58,240
from your data, your competency questions, your domain experts, what have you. You want to match

230
00:27:58,240 --> 00:28:05,680
those the conceptual components that patterns model. We have resources that I'll display later on in

231
00:28:05,680 --> 00:28:14,640
the presentation about sorry about of all of the different patterns that we have and can be used

232
00:28:15,520 --> 00:28:21,200
to sort of plug and play a schema together. The instantiation of the patterns is comes what

233
00:28:21,200 --> 00:28:29,520
comes next and that's really replacing the terms and properties of a pattern wholesale kind of like

234
00:28:29,520 --> 00:28:36,560
a template starting with maybe like madlib style. You're not subclassing a pattern you're just

235
00:28:37,280 --> 00:28:44,320
using the structure of the pattern over and over again. In step six we have the systematic

236
00:28:44,320 --> 00:28:52,960
axiomatization which is once you have your patterns and you look at the schema diagram

237
00:28:52,960 --> 00:29:00,000
for your different modules and your different patterns is you go edge by edge within your

238
00:29:00,000 --> 00:29:06,800
schema diagram and you assign the ontological meaning of what that top level intuitive conceptual

239
00:29:06,800 --> 00:29:13,440
relationship is. I won't get into that so much within this talk but what we have here is the

240
00:29:13,440 --> 00:29:18,880
modular ontology modeling published in the semantic web journal and you should be able to

241
00:29:18,880 --> 00:29:25,280
kind of get a lot more information on the exact processes within this methodology from there.

242
00:29:26,000 --> 00:29:32,560
After that you plug all of the modules together with quite literally like puzzle pieces you review

243
00:29:32,560 --> 00:29:39,760
the final product add any more axioms that you think are useful across the entire assembled

244
00:29:40,560 --> 00:29:43,040
schema and then you produce your owl artifact.

245
00:29:45,440 --> 00:29:53,920
So that was really Momo in a nutshell. So what I have here are a few examples three actually I

246
00:29:53,920 --> 00:30:01,360
think and then a brief discussion on the template based instantiation that we utilize for Momo and

247
00:30:01,440 --> 00:30:10,720
how it kind of connects or is quite obviously parallel to the sort of DOSP strategy employed

248
00:30:10,720 --> 00:30:17,440
within the oboe community. So this first pattern that we have here is a pattern for depicting

249
00:30:17,440 --> 00:30:21,520
causal relationships between events this is something that came out of the nowhere graph

250
00:30:22,160 --> 00:30:28,720
project actually the next two patterns are as well but I kind of want to show you here how you

251
00:30:28,720 --> 00:30:34,880
have a pattern and then you also have a module within the pattern right this abstract event

252
00:30:35,440 --> 00:30:42,160
compared to this events this concrete notion of event event for those of you who are familiar with

253
00:30:43,840 --> 00:30:50,240
the upper ontology sphere this would probably be easily modeled as

254
00:30:50,880 --> 00:30:55,680
your sort of perjure and endurance thing because you have a description in a situation you have

255
00:30:55,760 --> 00:31:00,800
this thing that exists in time and thing that exists out of time but from a pattern perspective

256
00:31:00,800 --> 00:31:06,080
the exact implementation of this doesn't matter and that's kind of the point you can implement

257
00:31:06,080 --> 00:31:11,440
this pattern using an upper ontology or you could call it whatever you want like event concrete

258
00:31:11,440 --> 00:31:17,120
which is maybe not a great name but kind of gets the point across. These blue boxes with the dashed

259
00:31:17,120 --> 00:31:24,480
lines are what we call the interfaces I said earlier conceptual components but you can kind

260
00:31:24,480 --> 00:31:30,640
of think of them as interfaces from software engineering because they are an implementation

261
00:31:30,640 --> 00:31:37,040
they are a hook within this pattern that says right here belongs anything that is a model of

262
00:31:37,040 --> 00:31:43,840
what an observation is or anything here can be fulfilled by something that sort of adheres to

263
00:31:43,840 --> 00:31:52,320
the contract of what a spatiotemporal extent is and we just note that with with the blue box

264
00:31:53,120 --> 00:31:59,040
and so you can replace that blue box with an entire new pattern or you can kind of just

265
00:31:59,040 --> 00:32:06,800
drop it away and have it something very simplistic like a stub and so on and so this

266
00:32:06,800 --> 00:32:16,400
is how we do that and this is also what allows it to kind of for people to kind of conceptualize

267
00:32:16,400 --> 00:32:21,840
these as puzzle pieces because you take your spatiotemporal extent pattern you plug it in

268
00:32:21,840 --> 00:32:27,280
quite literally like a puzzle piece into the spatiotemporal interface within the schema diagram

269
00:32:27,280 --> 00:32:32,160
and then you just build out your patterns and you modify them to your use case and then you're

270
00:32:32,160 --> 00:32:38,960
done right that's kind of the strength of what we're trying to do here is by leveraging these

271
00:32:38,960 --> 00:32:45,360
patterns and the fact that all of the ontological analysis has already been done it's really just

272
00:32:45,360 --> 00:32:51,920
the assembly and configuration for your use case that drives the the usefulness of this

273
00:32:58,080 --> 00:33:02,160
okay I accidentally reordered these sorry for flipping through a few slides there

274
00:33:02,160 --> 00:33:09,440
this is another example here of of a pattern we have two interfaces this time but now actually

275
00:33:09,440 --> 00:33:16,160
what we have here is this purple box which is really just a controlled vocabulary it's this

276
00:33:16,160 --> 00:33:25,360
it's it's just another sort of um technicolor idiosyncrasy for our um presentation or our schema

277
00:33:25,360 --> 00:33:32,880
diagram presentation and it's really just saying that the the class of organization scheme consists

278
00:33:32,880 --> 00:33:40,480
of strictly a set number of individuals not particularly exciting but it's something that

279
00:33:40,480 --> 00:33:50,000
we can model and is sometimes extremely convenient to to model even at the pattern level and then

280
00:33:50,000 --> 00:33:55,920
doing it explicitly like this instead of having a subsumption hierarchy somewhere in the background

281
00:33:55,920 --> 00:34:02,400
it means that there's really no change to the ontology when you add in a new instance for

282
00:34:02,400 --> 00:34:08,560
example here of the organization scheme in this case you would replace custom with whatever you want

283
00:34:09,520 --> 00:34:15,120
because custom kind of doesn't belong in the in the in the pattern here um

284
00:34:17,280 --> 00:34:24,800
keep moving on uh so this final pattern example that we have here this is a pattern for depicting

285
00:34:24,800 --> 00:34:32,800
features of s2 cells or any cell in a hierarchical grid so let me back up there a little bit what we

286
00:34:32,800 --> 00:34:40,400
have are these cells um and the cell is really just a geometry a tessellated geometry across the

287
00:34:40,400 --> 00:34:46,640
surface of the earth or any body really but in this case let's let's just stick with the earth

288
00:34:46,640 --> 00:34:52,000
and then what you have is these cells are hierarchical so four cells make up the next

289
00:34:52,080 --> 00:34:58,560
tessellated geometry and it just up and up and up and so s2 um is one particular

290
00:34:59,280 --> 00:35:05,360
version of this and that's employed by google and it's really just um four cells make up the next

291
00:35:05,360 --> 00:35:13,040
larger cell and then four of those make up there and um there's also a way to do this using hexagons

292
00:35:13,040 --> 00:35:19,600
that's called h3 using it out of uber but really what um what's interesting about this

293
00:35:19,600 --> 00:35:26,400
are these red arrows i mentioned earlier that sometimes it's useful to have these

294
00:35:26,960 --> 00:35:34,320
shortcuts within a pattern a simplified view right so when you have a cell and you want to

295
00:35:34,320 --> 00:35:45,360
represent it uh using geosparcle or um using some sort of uh geo informational science standard

296
00:35:45,360 --> 00:35:52,320
way you disconnect the cell as a concept from its geometry uh which is the literal that describes

297
00:35:52,320 --> 00:35:57,440
the sort of boundary points of the cell and then the spatial relations actually occur between the

298
00:35:57,440 --> 00:36:03,280
geometries not technically between the cells however when you're querying generally you want to

299
00:36:04,160 --> 00:36:09,360
know how the things are spatially related at a human level and not just these arbitrary

300
00:36:09,360 --> 00:36:16,720
geometries that exist um under the hood and so having a way to specifically represent these

301
00:36:17,600 --> 00:36:23,360
within the schema diagram useful but also logically under the hood um as a sort of

302
00:36:23,360 --> 00:36:31,840
roll chain is also is also useful uh and we use the opal annotations for the different um

303
00:36:34,000 --> 00:36:38,480
excuse me for the different shortcuts to say well this is this one's optional you

304
00:36:38,480 --> 00:36:44,640
don't have to actually materialize this because it's it's part of the pattern but only in so far

305
00:36:44,640 --> 00:36:53,920
that you may want to simplify this for for other other people um so for example going from cells

306
00:36:53,920 --> 00:37:00,320
the attribute of the particular feature that simplifies three hops with an inverse in there

307
00:37:00,320 --> 00:37:07,120
into one simple thing uh but you lose a lot of the expressiveness um and uh the ontological

308
00:37:07,120 --> 00:37:15,520
pitchness there so there's there are some tradeoffs uh finally um as one of our examples

309
00:37:15,520 --> 00:37:26,320
this here on the left is the kwg core ontology um and the sosa ssn kernel that we use uh the core

310
00:37:26,320 --> 00:37:32,720
is really just the four main concepts that we have and some very basic relationships it's

311
00:37:32,720 --> 00:37:38,880
obviously much more built out within the ontology uh itself but from a schema diagrammatic um and

312
00:37:38,880 --> 00:37:45,920
also from this nice compact view it's useful to only include a couple of these pieces um

313
00:37:47,440 --> 00:37:53,600
but it connects into this kernel and then this kernel um the sosa ssn kernel this pattern that

314
00:37:53,600 --> 00:38:00,640
we've extracted essentially from that ontology we just essentially mint um or not mint we stamp

315
00:38:00,640 --> 00:38:07,040
over and over again one per data set uh how this connects right so the feature of interest remains

316
00:38:07,040 --> 00:38:13,040
the same uh because it's the superclass but this observation that we have here within the kernel

317
00:38:13,040 --> 00:38:19,520
um i actually done to lead you the arrow to the wrong thing it should be to the climate observation

318
00:38:19,520 --> 00:38:24,160
and the observation and then you have the climate observable property and the observable property

319
00:38:24,160 --> 00:38:30,080
right this is not a particularly exciting implement or instantiation of the sosa ssn

320
00:38:30,080 --> 00:38:38,160
kernel template but you can see how um after you've kind of changed the names to be um more

321
00:38:40,320 --> 00:38:46,320
tailored to your particular sub use case right represent a us climate division and its climate

322
00:38:46,320 --> 00:38:52,480
observations um there's all of this additional stuff that's now hung off of it right we use has

323
00:38:52,480 --> 00:38:58,800
simple result instead of has result the observation has a phenomenon time and then we go out and we

324
00:38:58,800 --> 00:39:05,200
say okay at least with this particular diagram we say that there's hidden or additional complexity

325
00:39:05,200 --> 00:39:10,480
um which would be implemented by another pattern or another module elsewhere for spatial object or

326
00:39:10,480 --> 00:39:18,960
temporal entity all right so we're going to go ahead and start wrapping up i have a few things

327
00:39:18,960 --> 00:39:24,800
for the tools and resources and then we'll uh we'll end with um my slide for passing on any

328
00:39:24,800 --> 00:39:32,160
questions to me so the the the cool the the cool one and this is really a self insert here uh is

329
00:39:32,160 --> 00:39:39,040
called model uh the modular ontology design library which is a collection of curated patterns uh so on

330
00:39:40,320 --> 00:39:47,120
the next slide we have the ontology design patterns portal uh this is a huge collection of

331
00:39:47,120 --> 00:39:54,400
patterns of varying quality because it contains uh submissions of patterns which were peer reviewed

332
00:39:54,400 --> 00:40:01,200
but were rejected but never removed from the portal or they have wildly different sorts of uh

333
00:40:02,720 --> 00:40:07,280
constraints on them ontological commitments that make them very tailored to a specific

334
00:40:07,280 --> 00:40:12,800
use case and you would wonder whether or not they can really be called a pattern right so what we did

335
00:40:12,800 --> 00:40:23,200
is we took out the patterns that we thought were maximally useful um and uh polished them up new

336
00:40:23,200 --> 00:40:29,440
schema diagrams made sure that the axioms were consistent gave in some examples uh and and kind

337
00:40:29,440 --> 00:40:36,400
of organized them by category and then we described all of them using opal right so model is actually

338
00:40:36,400 --> 00:40:47,200
an annotation ontology of all of the different uh patterns um this what here on the right is

339
00:40:47,280 --> 00:40:53,920
13 patterns in version one uh i am working on a second version which contains 32 some of them

340
00:40:53,920 --> 00:41:02,160
are redundant in so far that they are alternative patterns for the same conceptual component or

341
00:41:02,160 --> 00:41:06,560
the same interface right a couple of different spatial extent patterns a couple of different

342
00:41:06,560 --> 00:41:16,080
event patterns um a couple of different role patterns and and so on um and then uh model is

343
00:41:16,080 --> 00:41:23,680
not just an artifact it is meant to be a template model is a type of ontological collection which

344
00:41:23,680 --> 00:41:30,720
is a collection of patterns um i call mine model because i suppose that's my prerogative but it

345
00:41:30,720 --> 00:41:41,680
could be any um anybody could make a model uh finally i think i already said this is that the

346
00:41:41,680 --> 00:41:48,800
model encodes many inter pattern relationships so it has uh what interfaces it provides and then

347
00:41:48,800 --> 00:41:55,360
conversely what interface it implements what conceptual component in implements what are

348
00:41:55,360 --> 00:42:01,280
the different specializations and generalizations between the uh patterns and what category do

349
00:42:01,280 --> 00:42:07,680
they belong to uh we already talked about the portal so i'll move on what i have here is called

350
00:42:07,680 --> 00:42:14,000
commodity uh the comprehensive modular ontology integrated development environment quite a mouthful

351
00:42:14,000 --> 00:42:22,320
commodity is a plugin for protochet um i wrote this as part of my phd dissertation so it functions

352
00:42:22,320 --> 00:42:33,600
but it is not like production quality you know it it's something to use and um to uh leverage but

353
00:42:33,600 --> 00:42:40,480
you might run into a bug here there if you do uh let me know and i'll try my best to address it or

354
00:42:40,480 --> 00:42:48,960
help out but essentially what this does is it provides a graphical canvas uh to do modeling

355
00:42:48,960 --> 00:42:57,200
with all of the power of our and the coup de grace so to speak would be the

356
00:42:57,360 --> 00:43:05,840
uh pattern library which is the number two you can actually drag and drop all of the patterns from

357
00:43:05,840 --> 00:43:13,680
model directly onto the graphical canvas and it will connect them based on those uh interface

358
00:43:13,680 --> 00:43:22,400
points that we talked about uh and then you can also uh customize the sort of semantics that the

359
00:43:22,400 --> 00:43:34,640
edge um edges will generate uh what do i have here so here's a a quick example of what this looks

360
00:43:34,640 --> 00:43:46,720
like um oh that was wrong let me try that again uh so what you can see here is the the dragging

361
00:43:46,720 --> 00:43:54,320
and the dropping directly onto the thing uh it will draw the module around it um when you

362
00:43:55,680 --> 00:44:02,960
draw drag sorry drag the next one over it'll connect it on the obvious touch points um

363
00:44:02,960 --> 00:44:10,160
and then you can rename stuff and drag and drop and add your own classes and so on i'm not going

364
00:44:10,160 --> 00:44:14,880
to go back because this seems to be fighting me on this so thank you very much for attending this

365
00:44:14,880 --> 00:44:23,600
talk i'm so sorry that i couldn't be there today uh please forward any questions to me um at my

366
00:44:23,600 --> 00:44:30,480
email uh or go ahead and pass them on to gary and he could do this i will also be here next week um

367
00:44:32,400 --> 00:44:38,000
right after carl's talk uh which will have a lot of overlap with the sort of design process

368
00:44:38,560 --> 00:44:44,160
and we can talk there um or i can answer any questions that you might have again thank you

369
00:44:44,160 --> 00:44:50,640
so much and have a great day

370
00:44:53,920 --> 00:44:57,680
i guess i'll verbally thank kogan for this and we'll see him next week

371
00:44:58,320 --> 00:45:05,360
we now have about 12 to 15 minutes for discussion including questions and answers of course

372
00:45:06,720 --> 00:45:10,400
kogan not being here there may be limitations on what we're able to

373
00:45:11,280 --> 00:45:15,360
say but uh maybe we can have some discussion among ourselves here

374
00:45:16,880 --> 00:45:24,640
so with that i'm looking for hands raised here and uh i know there was a small amount of chat in our

375
00:45:24,640 --> 00:45:36,080
other uh online chat yes james you're commuted but here we go uh thanks gary and i appreciate

376
00:45:36,080 --> 00:45:41,680
that kogan was able to present even though he wasn't able to present so much appreciated uh it

377
00:45:41,680 --> 00:45:48,400
did have a bit of a hard time connecting this step up to what i do day to day when i do things that i

378
00:45:48,400 --> 00:45:56,720
call design patterns or usually focused on templates and csv files or tsv files that get expanded into

379
00:45:56,800 --> 00:46:03,360
some set of al-axioms that define a class uh but i guess my question was

380
00:46:04,720 --> 00:46:09,280
so i am aware that there's this larger literature about ontology design patterns

381
00:46:10,960 --> 00:46:17,280
that i'm not super familiar with uh i guess my my general question is how well this talk

382
00:46:17,280 --> 00:46:23,520
lines up with kind of the larger literature on these things uh i don't know maybe that's a question

383
00:46:23,520 --> 00:46:32,640
for gary but other people could uh could chime in is there like a single notion of ontology design

384
00:46:32,640 --> 00:46:39,440
pattern and kogan was expressing it or is it a more diverse kind of field topic keyword

385
00:46:42,080 --> 00:46:47,520
well it's an interesting question i'm not sure i can be definitive i have opinions of course

386
00:46:47,520 --> 00:46:53,360
and i am not necessarily as up to date on all the literature uh if there's somebody out here

387
00:46:53,360 --> 00:47:01,360
attending who who feels they are they can certainly speak up kogan mentioned setting up sort of a new

388
00:47:02,640 --> 00:47:11,680
a new repository uh for curated design patterns and this reflects the fact that that people have

389
00:47:11,760 --> 00:47:18,160
been building design patterns and posting them and uh the idea is for them to have

390
00:47:18,160 --> 00:47:24,400
good documentation to reuse practice to make connections to other uh design patterns and

391
00:47:24,400 --> 00:47:29,840
maybe upper levels and a lot of that is that is missing you know when we we talk about fairness

392
00:47:29,840 --> 00:47:35,680
for ontology we sometimes find that they lack some of the ingredients of fairness and so

393
00:47:35,680 --> 00:47:44,160
that is has been true for odps uh over time but like the the the foundry uh there's a sub community

394
00:47:44,160 --> 00:47:52,880
here of people like like uh pascal and kogan and uh the people involved with the nowhere

395
00:47:52,880 --> 00:47:58,480
where graph we're trying to pull some of this together and and provide more of a community

396
00:47:58,480 --> 00:48:04,240
where there are higher standards existing practices so i'd say again that maybe it isn't

397
00:48:04,240 --> 00:48:12,000
it isn't as large a community and maybe hasn't been uh as well funded uh as things in the biomedical

398
00:48:12,000 --> 00:48:19,200
field but this is an attempt to sort of do something of that level quality and i myself

399
00:48:19,200 --> 00:48:23,360
am very much interested in how these two communities can sort of share and cooperate

400
00:48:23,360 --> 00:48:28,880
i mentioned the semantic trajectory as being able to be applied to a course of disease

401
00:48:29,680 --> 00:48:33,360
but i'm not sure anybody has done that i'm not sure that anybody has looked at

402
00:48:33,360 --> 00:48:40,720
what's common about these patterns and how to how to take uh a a dead simple pattern from oboe

403
00:48:40,720 --> 00:48:47,760
and sort of put it in uh and compose with it along with uh odps from the other communities

404
00:48:47,760 --> 00:48:51,680
that would be an interesting thing to look at it and might be an interesting research article

405
00:48:52,560 --> 00:48:58,320
for us to consider so hopefully i've given people enough time to know maybe more about this and have

406
00:48:58,320 --> 00:49:04,080
things to say i just wanted to laugh at your bit about being well funded because we don't think of

407
00:49:04,080 --> 00:49:09,920
ourselves as well funded and being on the side of tooling side of things but we think of ourselves as

408
00:49:09,920 --> 00:49:15,920
stealing uh time and money to build these tools but maybe you're right a lot could be said about

409
00:49:15,920 --> 00:49:20,640
that it's a relative question of course and the continuity is such is very important where

410
00:49:20,640 --> 00:49:27,280
things get started in the question so the geolink pattern that i sort of identified came out of or

411
00:49:27,280 --> 00:49:32,560
built on a semantic trajectory but they didn't necessarily continue to fund more of that for

412
00:49:32,560 --> 00:49:38,480
other types of expeditions and things like that so some of the concepts can be reused but necessarily

413
00:49:38,480 --> 00:49:44,880
the projects have a you know a three year five year type of extent and and one's uncertain about the

414
00:49:44,880 --> 00:49:52,160
other side that's true we often have longer time frames than that you know oboe but not always thanks

415
00:49:52,160 --> 00:49:55,440
okay

416
00:50:01,600 --> 00:50:07,280
um i see something in chat so i'll just read that in addition to what james asked what ontology

417
00:50:07,280 --> 00:50:12,880
projects do you know and hopefully it's the community rather than just me uh use ontology design

418
00:50:12,880 --> 00:50:20,320
pads for practical practically during during development um again that that's a much better

419
00:50:20,320 --> 00:50:27,680
question to ask of both kogan and uh call uh so let's keep that question i do know that there

420
00:50:27,680 --> 00:50:34,560
have been studies which looked at the relative of quality of ontologies built by reusing patterns or

421
00:50:34,560 --> 00:50:43,520
not and unfortunately at the time of the publication i know of it wasn't great it wasn't uh a big help

422
00:50:43,520 --> 00:50:47,520
at that time but again things have moved along since some of those earlier studies

423
00:50:48,400 --> 00:50:54,320
ashaya you have your hand up yeah so maybe i just ask a clarification questions

424
00:50:54,880 --> 00:51:02,400
in his talk does he mean that uh the design pattern we can use no matter what top ontology

425
00:51:02,400 --> 00:51:09,120
that we are using and another one is so the my understanding is that the design pattern

426
00:51:09,760 --> 00:51:17,200
if as logo so they are not necessarily map kind of have the same using same block

427
00:51:18,160 --> 00:51:24,960
like but they can still connect to each other is that correct understanding

428
00:51:26,800 --> 00:51:30,960
yeah i can i can maybe address part of that which is the interoperability question with

429
00:51:30,960 --> 00:51:36,080
upper level ontologies so you notice that some of them had these stubs with the dotted lines

430
00:51:36,080 --> 00:51:41,840
and has he's he said i i don't remember his exact words the idea is you can plug in different

431
00:51:41,840 --> 00:51:46,080
things at this particular point some of them may be entire patterns some of them may be a

432
00:51:46,080 --> 00:51:53,280
very simple concept and so forth so the idea is that the the core of the pattern below the dotted

433
00:51:53,280 --> 00:51:59,920
line is gets reused and it's in common so that you can you can ask some questions across it

434
00:51:59,920 --> 00:52:05,680
because there's a common element a little bit like what cob is doing right cob is providing

435
00:52:05,680 --> 00:52:12,880
that core that other people can tap into but yes there will be variations depending on whether

436
00:52:12,880 --> 00:52:24,320
you tap into dulce at the top or you tap into oboe so or bfo i should say so it allows sort of

437
00:52:24,960 --> 00:52:30,080
some commonality and some flexibility it's a compromise there maybe somebody else has

438
00:52:30,080 --> 00:52:33,440
some other wisdom to add to that or or real wisdom to add to that

439
00:52:37,680 --> 00:52:44,400
well it design pattern each design pattern will have certain requirements for it to be applicable

440
00:52:46,480 --> 00:52:54,080
and that could make it impossible to use in certain with certain upper ontologies

441
00:52:54,880 --> 00:52:56,080
so it's

442
00:52:58,080 --> 00:53:03,360
but i to what extent do these design patterns have those requirements explicitly stated

443
00:53:06,400 --> 00:53:14,560
so this is very much a bottom up effort at times coming from what the data is saying to reflect the

444
00:53:14,560 --> 00:53:22,240
reality of the data as opposed to a more abstract concept above and so as long as you have common

445
00:53:22,240 --> 00:53:27,280
questions that can answer with the data can answer real things of interest to a domain

446
00:53:27,840 --> 00:53:35,280
that they feel that's that's viable now there could be of course these different philosophical

447
00:53:35,280 --> 00:53:40,480
distinctions at the top level the question is whether you have common questions that sort of tap

448
00:53:40,480 --> 00:53:41,520
into that at all

449
00:53:43,680 --> 00:53:46,080
they may it may not for practical purposes

450
00:53:46,240 --> 00:53:54,880
yeah again this is a question this is a deeper question that people who are like kogan and

451
00:53:54,880 --> 00:53:57,920
caulk and probably provide a better follow-up

452
00:54:01,200 --> 00:54:07,360
there is a there's a workshop on ontology design and patterns

453
00:54:08,960 --> 00:54:10,160
it's WOP

454
00:54:11,120 --> 00:54:12,640
it's WOP

455
00:54:13,600 --> 00:54:18,080
regularly WOP is an annual event

456
00:54:19,680 --> 00:54:23,680
and you can see that some of the people in there online the past ones are online and

457
00:54:23,680 --> 00:54:27,040
you can look at the at the press the papers i often do

458
00:54:28,480 --> 00:54:33,920
i was part of the review panel here who are active in that community

459
00:54:35,040 --> 00:54:37,440
who might have some comments

460
00:54:38,400 --> 00:54:44,960
yes we have a few minutes left so let's hear from people with different experiences on this

461
00:54:44,960 --> 00:54:46,080
or different ideas on this

462
00:54:52,720 --> 00:54:57,280
you don't have to be shy because you've heard me talk about it yeah obviously people will know

463
00:54:57,280 --> 00:55:04,320
more than that yeah so hello i'm chris hello chris so i was one of the co-organizers of the

464
00:55:04,320 --> 00:55:08,160
last rendition of the workshop on ontology design patterns so if there's anything in

465
00:55:08,160 --> 00:55:11,200
particular you would like me to comment on now i'm unhappy too

466
00:55:14,480 --> 00:55:19,280
so we may have questions what were some of the patterns about from the last or the issues

467
00:55:20,480 --> 00:55:21,760
at that i didn't attend

468
00:55:23,840 --> 00:55:28,960
right so there there were patterns from different domains one of which was particularly interesting

469
00:55:28,960 --> 00:55:34,320
to me which was about the design of scientific taxonomies now i don't know the

470
00:55:35,200 --> 00:55:40,480
details anymore because i haven't reviewed the actual pattern but each year there are a number

471
00:55:40,480 --> 00:55:45,360
of patterns that get published and one interesting point to notice here is that the patterns that

472
00:55:45,360 --> 00:55:51,280
get published are not always following the same structure so there are different ideas

473
00:55:51,280 --> 00:55:57,600
of what what a design pattern should consist of and also how a design pattern is supposed to be

474
00:55:57,600 --> 00:56:02,560
reused and this is also one of the key notions in which i personally think that the notion of

475
00:56:02,560 --> 00:56:08,080
the software design patterns differs from the notion of a ontology design pattern so when we

476
00:56:08,080 --> 00:56:15,200
talk about a software design pattern these patterns are often thought as language agnostic so they

477
00:56:15,200 --> 00:56:22,160
provide us with a solution that could be adopted in different languages whereas these ontology

478
00:56:22,160 --> 00:56:27,680
design patterns they are often tailored to a specific knowledge representation language so

479
00:56:27,680 --> 00:56:32,640
that it can be reused in that particular formula and that is one of the key differences that often

480
00:56:32,640 --> 00:56:40,160
get confused between these two different notions thank you that's a good although i do know in

481
00:56:40,160 --> 00:56:47,200
in his what 10 points that the less that is to produce the owl artifacts so up until then there's

482
00:56:47,200 --> 00:56:54,560
some degree of conceptualization more abstraction right right so um there have been different

483
00:56:54,560 --> 00:57:01,040
proposals for how a design pattern is supposed to be reported and one of these proposals includes

484
00:57:01,040 --> 00:57:06,960
this 10-step or 12-step process where you have to um list all the requirements for a particular use

485
00:57:06,960 --> 00:57:12,880
case and all the ways in which a pattern can be reused but that is not standardized in any way

486
00:57:12,880 --> 00:57:18,160
so there are different proposals of how this could be achieved and this is just one of them so

487
00:57:19,840 --> 00:57:26,560
again i have tried to actually empirically look at how patterns are reused and so far

488
00:57:27,120 --> 00:57:32,000
it doesn't seem to be the case that there are there's a standard notion of either the reuse of

489
00:57:32,000 --> 00:57:37,440
design pattern or standard design patterns that were used consistently throughout ontology so this

490
00:57:37,440 --> 00:57:44,160
is still a open question that that's a challenging observation that we want to sort of repeat next

491
00:57:44,160 --> 00:57:49,440
week so i hope you'll be back for that and ask again because i i agree that you know this is an

492
00:57:49,440 --> 00:57:54,960
we're empiricists here so we want to know what really works where things are and so forth and

493
00:57:54,960 --> 00:58:03,680
what can be re really reused so we we have looked at modl model they're they're curated the repository

494
00:58:03,680 --> 00:58:08,400
for ontologies for odp's anybody else looked at that

495
00:58:12,480 --> 00:58:16,880
oh right here the importance of building up a library we've got a hand raised

496
00:58:18,160 --> 00:58:20,320
oh okay i missed it maybe it's on the other screen

497
00:58:25,680 --> 00:58:31,360
oh unfortunately disappeared they have to go

498
00:58:31,760 --> 00:58:36,720
so hopefully they we can continue this next week yeah

499
00:58:39,120 --> 00:58:46,240
yes indeed and so call hammer who's now at google has been very involved in these things

500
00:58:46,240 --> 00:58:52,480
continually and has done a lot of practical development with them and can speak to that

501
00:58:52,480 --> 00:58:58,800
and can speak to methods used and since he's went from ibm to google there's probably something

502
00:58:58,800 --> 00:59:04,160
he's able has been able to do he may be able to speak at a different degree of abstraction but

503
00:59:04,160 --> 00:59:13,760
he has practical experience um so with that i think we can adjourn for today and um and hopefully

504
00:59:13,760 --> 00:59:20,560
see you all again next week and tell your friends i hope frisk can make it okay i'm glad to be there

505
00:59:20,560 --> 00:59:24,320
thanks everybody i don't know

