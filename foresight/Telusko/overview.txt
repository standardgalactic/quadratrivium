Processing Overview for Telusko
============================
Checking Telusko/OOP in Python ï½œ Object Oriented Programming.txt
1. **Inheritance**: It allows a class (subclass or child class) to inherit features (methods and properties) from another class (parent class). In this case, class B inherits from class A.

2. **Method Overriding**: If a subclass overrides a method from its parent class, the subclass's version of the method will be executed when the method is called on an object of the subclass.

3. **Example Explanation**: You have a `show` method in class A, and you create a class B that inherits from A. If B does not explicitly define a `show` method, calling `show` on an instance of B will execute the `show` method from A because it is inherited.

4. **Method Overloading vs. Method Overriding**: This is different from method overloading, where you have two methods with the same name but different parameters within the same class. Here, we're dealing with a single method that is defined in the parent class and potentially redefined (overridden) in the child class.

5. **Story Analogy**: The concept of method overriding is likened to a person (B) inheriting features from their father (A). Initially, B did not have a phone (`show` method), so they used their father's Nokia phone (inherited `show` method from A). Later, B got their own phone (overrode the `show` method with their own implementation).

6. **Final Behavior**: When you call the `show` method on an instance of B, it will use the version of `show` that is defined within B itself, if it exists, rather than calling the `show` method from A. This is because B has overridden the method from its parent class.

Remember to always check if a subclass overrides a method before assuming which method will be executed. Inheritance allows for code reuse and organization but also provides flexibility through method overriding.

