1
00:00:00,000 --> 00:00:02,480
The following content is provided under a Creative

2
00:00:02,480 --> 00:00:03,680
Commons license.

3
00:00:03,680 --> 00:00:06,120
Your support will help MIT OpenCourseWare

4
00:00:06,120 --> 00:00:10,000
continue to offer high quality educational resources for free.

5
00:00:10,000 --> 00:00:12,760
To make a donation or to view additional materials

6
00:00:12,760 --> 00:00:16,600
from hundreds of MIT courses, visit MIT OpenCourseWare

7
00:00:16,600 --> 00:00:17,440
at ocw.mit.edu.

8
00:00:25,040 --> 00:00:28,200
So let me start.

9
00:00:28,200 --> 00:00:31,080
Session three is about system modeling languages.

10
00:00:31,080 --> 00:00:35,960
But before I start, I'd like to remind you

11
00:00:35,960 --> 00:00:38,960
that A1 is due today.

12
00:00:38,960 --> 00:00:41,960
The first assignment is due today.

13
00:00:41,960 --> 00:00:46,640
And I think neither Ioana or I or Liz,

14
00:00:46,640 --> 00:00:48,840
did you get a lot of questions about A1?

15
00:00:54,120 --> 00:00:56,200
No, I didn't get any questions.

16
00:00:56,200 --> 00:00:58,280
Yeah, so we didn't get many questions.

17
00:00:58,280 --> 00:01:02,080
So I think I interpret that as a positive,

18
00:01:02,080 --> 00:01:05,160
but I guess we'll find out.

19
00:01:05,160 --> 00:01:06,280
Everybody submitted.

20
00:01:06,280 --> 00:01:12,280
OK, well, so we're hoping to have these graded in about a week,

21
00:01:12,280 --> 00:01:16,880
give you feedback, and we'll also post a master solution.

22
00:01:16,880 --> 00:01:20,160
And A2 is out right now.

23
00:01:20,160 --> 00:01:24,440
And the other good news is there's no new assignment today.

24
00:01:24,440 --> 00:01:26,880
The next A3 is going to go out next week, OK?

25
00:01:29,720 --> 00:01:31,720
Any questions about A1?

26
00:01:31,720 --> 00:01:37,160
Was there something that was particularly difficult or confusing,

27
00:01:37,160 --> 00:01:38,760
or was it straightforward?

28
00:01:38,760 --> 00:01:40,520
Anybody want to comment on A1?

29
00:01:45,000 --> 00:01:47,720
Wow.

30
00:01:47,720 --> 00:01:49,720
Sam?

31
00:01:49,720 --> 00:01:52,760
Do you want to push the button?

32
00:01:52,760 --> 00:01:54,920
No, our team thought it was fairly clear

33
00:01:54,920 --> 00:01:58,120
on what we had to do based on the lectures.

34
00:01:58,120 --> 00:01:58,620
OK.

35
00:01:58,620 --> 00:02:00,120
We didn't have any trouble.

36
00:02:00,120 --> 00:02:01,160
Good.

37
00:02:01,160 --> 00:02:05,320
All right, well, let's keep going then.

38
00:02:05,320 --> 00:02:08,920
So the V model is our roadmap for the class.

39
00:02:08,920 --> 00:02:10,760
We're starting to fill in the V. We're still

40
00:02:10,760 --> 00:02:12,280
in the upper left corner.

41
00:02:12,280 --> 00:02:15,320
And today's lecture is actually a little different.

42
00:02:15,320 --> 00:02:19,560
It's sort of in the center of the V. System modeling languages

43
00:02:19,560 --> 00:02:22,480
as a precondition or precursor to what

44
00:02:22,520 --> 00:02:26,640
we've been calling NBSC, model-based system engineering.

45
00:02:26,640 --> 00:02:32,560
So what I'd like to cover today is why do we need

46
00:02:32,560 --> 00:02:36,080
or why have these system modeling languages emerged?

47
00:02:36,080 --> 00:02:39,360
Particularly, what do we mean by ontology, semantics,

48
00:02:39,360 --> 00:02:40,760
and syntax?

49
00:02:40,760 --> 00:02:44,680
And then I would characterize this

50
00:02:44,680 --> 00:02:49,440
as a sampler of three different system modeling languages

51
00:02:49,440 --> 00:02:53,840
that have emerged really within the last 10, 15 years.

52
00:02:53,840 --> 00:02:58,400
The first one is called OPM, Object Process Methodology.

53
00:02:58,400 --> 00:03:02,320
The second one is called SysML, System Modeling Language.

54
00:03:02,320 --> 00:03:05,520
And then the third one is called Medellica.

55
00:03:05,520 --> 00:03:09,200
And then we'll sort of quickly wrap up with the question,

56
00:03:09,200 --> 00:03:12,520
what does this mean now for system engineering today

57
00:03:12,520 --> 00:03:15,480
and tomorrow in the future?

58
00:03:15,480 --> 00:03:19,040
So I'd like to motivate this with a little exercise.

59
00:03:19,480 --> 00:03:22,120
You remember Mr. Sticky from last time?

60
00:03:22,120 --> 00:03:23,640
You came up with some requirements.

61
00:03:23,640 --> 00:03:27,400
So it's kind of the simplest system I could think of here.

62
00:03:27,400 --> 00:03:32,120
So what we'd like to do is have you work in pairs again.

63
00:03:32,120 --> 00:03:39,280
And the assignment here is to describe this system

64
00:03:39,280 --> 00:03:42,760
as clearly as you can, provide a description.

65
00:03:42,760 --> 00:03:46,360
So last time the assignment was write a requirement,

66
00:03:46,360 --> 00:03:50,440
come up with some requirements that led to this design.

67
00:03:50,440 --> 00:03:52,960
But today I would like you to describe

68
00:03:52,960 --> 00:03:56,000
what the system is, how it functions, and so forth,

69
00:03:56,000 --> 00:03:57,960
as clearly as you can.

70
00:03:57,960 --> 00:04:01,400
And I would like you to do this, so hopefully you're

71
00:04:01,400 --> 00:04:04,440
on the WebEx, logged into the WebEx.

72
00:04:04,440 --> 00:04:07,000
I would like you to do this in teams of two.

73
00:04:07,000 --> 00:04:09,880
And as you're doing this, I don't know if you noticed,

74
00:04:09,880 --> 00:04:18,200
but on the WebEx, there's actually a note pad feature.

75
00:04:18,200 --> 00:04:18,720
Where is it?

76
00:04:30,960 --> 00:04:32,880
Tell me.

77
00:04:32,880 --> 00:04:34,360
Left, right.

78
00:04:34,360 --> 00:04:46,200
I see.

79
00:04:46,200 --> 00:04:49,320
So I can't share and use the note pad at the same time.

80
00:04:49,320 --> 00:04:54,160
It's the whiteboard right there.

81
00:04:54,160 --> 00:04:57,040
Annotate?

82
00:04:57,040 --> 00:04:59,000
Yeah, yeah.

83
00:04:59,000 --> 00:05:01,960
But if you go back into view.

84
00:05:02,000 --> 00:05:04,560
Stop sharing.

85
00:05:04,560 --> 00:05:05,920
But then they can't see it, right?

86
00:05:09,800 --> 00:05:14,440
Can they see this?

87
00:05:14,440 --> 00:05:15,720
So you can write text.

88
00:05:32,720 --> 00:05:35,040
You can draw the shapes.

89
00:05:41,440 --> 00:05:45,240
OK, so the reason I want you to do this on the whiteboard

90
00:05:45,240 --> 00:05:48,160
is such that we can then sort of go around

91
00:05:48,160 --> 00:05:51,000
and look at some examples.

92
00:05:51,000 --> 00:05:54,640
So the assignment is take five minutes,

93
00:05:54,640 --> 00:05:59,840
turn to your partner, and try to describe the system.

94
00:05:59,880 --> 00:06:02,120
And then we'll go around and look at some,

95
00:06:02,120 --> 00:06:05,720
I will sample people's descriptions.

96
00:06:05,720 --> 00:06:08,360
Go for it.

97
00:06:08,360 --> 00:06:12,240
All right, so keep working on the assignment,

98
00:06:12,240 --> 00:06:16,400
but do it locally on your computer, not on the whiteboard.

99
00:06:16,400 --> 00:06:19,600
And then we'll sort of discuss it and share it,

100
00:06:19,600 --> 00:06:22,440
and maybe not use the whiteboard.

101
00:06:22,440 --> 00:06:25,240
Because I didn't realize there's only one whiteboard

102
00:06:25,240 --> 00:06:26,160
that we all share.

103
00:06:26,160 --> 00:06:28,440
I thought that you have individually the whiteboard,

104
00:06:28,440 --> 00:06:31,280
and then you can sort of pass it on to different people.

105
00:06:31,280 --> 00:06:35,120
So but if you do it locally on your machine,

106
00:06:35,120 --> 00:06:36,640
then we can share the screen.

107
00:06:36,640 --> 00:06:37,200
So it'll work.

108
00:06:37,200 --> 00:06:42,840
So do it in PowerPoint, or Word, or Sketchpad,

109
00:06:42,840 --> 00:06:44,360
or anything you want.

110
00:06:44,360 --> 00:06:45,080
Sorry about that.

111
00:06:49,680 --> 00:06:53,400
OK, all right, so let's do this.

112
00:06:53,400 --> 00:06:58,160
We're going to sort of go back and forth between here and EPFL.

113
00:06:58,200 --> 00:07:02,960
Let's start maybe over here with Narik.

114
00:07:02,960 --> 00:07:04,440
Are you ready?

115
00:07:04,440 --> 00:07:07,680
So I'm going to give you the ball,

116
00:07:07,680 --> 00:07:13,680
and then you can sort of explain how you guys describe the system.

117
00:07:13,680 --> 00:07:18,240
So what we decided to do was identify the primary function

118
00:07:18,240 --> 00:07:23,480
of the sticky, Mr. Sticky.

119
00:07:23,480 --> 00:07:28,520
So the primary function is to trap the fly, we thought.

120
00:07:28,520 --> 00:07:30,720
This is enabled by a couple of other functions

121
00:07:30,720 --> 00:07:33,440
that are sort of at a lower layer of abstraction.

122
00:07:33,440 --> 00:07:36,200
It's attracting the fly, immobilizing the fly,

123
00:07:36,200 --> 00:07:39,080
transporting the object to where you

124
00:07:39,080 --> 00:07:42,880
need to immobilize the fly, and deploying Mr. Sticky.

125
00:07:42,880 --> 00:07:45,800
And we map this to the physical forms

126
00:07:45,800 --> 00:07:46,960
that enable the function.

127
00:07:46,960 --> 00:07:49,200
So the canister, the physical form of the canister

128
00:07:49,200 --> 00:07:51,840
is helping with the transporting function.

129
00:07:51,840 --> 00:07:54,880
The sticky tape is helping with the immobilizing function.

130
00:07:54,880 --> 00:07:56,360
The scented material, we thought,

131
00:07:56,360 --> 00:07:58,680
that would be helping for the attracting function.

132
00:07:58,680 --> 00:08:01,480
And the hook, maybe on top that you used to hang it,

133
00:08:01,480 --> 00:08:03,000
would help with the deploying.

134
00:08:03,000 --> 00:08:04,360
OK, good.

135
00:08:04,360 --> 00:08:07,440
So nice function form separation,

136
00:08:07,440 --> 00:08:11,800
and you use primarily text, human language to describe it.

137
00:08:11,800 --> 00:08:14,720
So let's see, at EPFL, who would like to share?

138
00:08:18,840 --> 00:08:19,880
And we'll give you the ball.

139
00:08:22,520 --> 00:08:25,600
OK, we can try, maybe.

140
00:08:25,600 --> 00:08:27,720
Who is speaking?

141
00:08:27,720 --> 00:08:28,640
Maxim.

142
00:08:28,640 --> 00:08:29,400
Maxim, OK.

143
00:08:29,400 --> 00:08:32,920
Can we give the ball to Maxim?

144
00:08:32,920 --> 00:08:34,360
Yes, do you see something?

145
00:08:34,360 --> 00:08:36,080
Yeah, it's good.

146
00:08:36,080 --> 00:08:36,600
Oh, perfect.

147
00:08:36,600 --> 00:08:42,680
So we draw the same system when deployed and deployed.

148
00:08:42,680 --> 00:08:45,200
So we begin with the container containing

149
00:08:45,200 --> 00:08:47,960
basically the sticky setup rolled.

150
00:08:47,960 --> 00:08:50,000
Then when unrolled, we have the container

151
00:08:50,000 --> 00:08:54,560
that should be linked to the sticky setup with a stick,

152
00:08:54,560 --> 00:08:55,560
but whatever.

153
00:08:55,560 --> 00:08:59,680
And we have like, an external input from the insects

154
00:08:59,680 --> 00:09:03,320
that come to be sticked onto the.

155
00:09:07,400 --> 00:09:08,160
Yeah, go ahead.

156
00:09:11,920 --> 00:09:14,400
OK, so that's all.

157
00:09:14,400 --> 00:09:19,280
OK, so I'll note here that you guys use graphics, right?

158
00:09:19,280 --> 00:09:21,000
You use some kind of graphical language.

159
00:09:21,000 --> 00:09:25,400
And at the highest level, it's like a state diagram, right?

160
00:09:25,400 --> 00:09:26,400
Rolled, unrolled.

161
00:09:26,400 --> 00:09:29,000
So you show the system in two different states.

162
00:09:29,000 --> 00:09:30,720
Very nice.

163
00:09:30,720 --> 00:09:32,800
Somebody else here on the MIT side,

164
00:09:32,800 --> 00:09:34,600
and then we'll go back one more time.

165
00:09:34,600 --> 00:09:36,800
Who would like to share here?

166
00:09:36,800 --> 00:09:38,040
You see him?

167
00:09:38,040 --> 00:09:39,760
OK.

168
00:09:39,760 --> 00:09:41,880
So let's.

169
00:09:41,880 --> 00:09:48,600
OK, so we did a diagram showing the use of Mr. Sticky.

170
00:09:48,600 --> 00:09:51,040
So we have a user, because Mr. Sticky has

171
00:09:51,040 --> 00:09:54,360
to be rolled and unrolled.

172
00:09:54,360 --> 00:09:59,120
The user installs or disposes of Mr. Sticky.

173
00:09:59,120 --> 00:10:01,520
The flies are attracted to, or Mr. Sticky

174
00:10:01,520 --> 00:10:04,560
attracts the flies, and the flies stick to Mr. Sticky.

175
00:10:04,560 --> 00:10:08,760
And then we decompose Mr. Sticky into the different components

176
00:10:08,760 --> 00:10:11,800
that are below at a lower level.

177
00:10:11,800 --> 00:10:15,680
And yeah, so it's basically at a higher level of use diagram.

178
00:10:15,720 --> 00:10:19,120
So here we have, again, a graphical description.

179
00:10:19,120 --> 00:10:21,240
The states are sort of implied, but you're

180
00:10:21,240 --> 00:10:23,120
focusing on decomposition, right?

181
00:10:23,120 --> 00:10:25,640
The sub-elements.

182
00:10:25,640 --> 00:10:26,960
Very nice.

183
00:10:26,960 --> 00:10:29,240
Anybody else at EPFL did anybody just

184
00:10:29,240 --> 00:10:33,600
write a paragraph of text, or more of like sentences?

185
00:10:39,920 --> 00:10:41,640
At EPFL, who wants to share?

186
00:10:42,480 --> 00:10:45,760
Chris here.

187
00:10:45,760 --> 00:10:46,260
Chris?

188
00:10:46,260 --> 00:10:46,760
OK.

189
00:10:46,760 --> 00:10:49,600
No, we didn't write a text.

190
00:10:49,600 --> 00:10:52,320
The text seemed a bit heavy to convey

191
00:10:52,320 --> 00:10:57,080
a description in efficient terms.

192
00:10:57,080 --> 00:11:01,120
What we prefer to do is decompose in elements,

193
00:11:01,120 --> 00:11:06,640
and for each element, give some properties.

194
00:11:09,600 --> 00:11:10,800
OK.

195
00:11:10,800 --> 00:11:13,720
And did you do this in the form of a list,

196
00:11:13,720 --> 00:11:19,440
or in the form of a table, or how did you actually describe it?

197
00:11:19,440 --> 00:11:21,680
So wait, I'm trying to share the screen.

198
00:11:21,680 --> 00:11:23,360
OK.

199
00:11:23,360 --> 00:11:26,560
All right, so we just walked on the first half here.

200
00:11:26,560 --> 00:11:29,800
We have the band, and we give here properties,

201
00:11:29,800 --> 00:11:33,160
though, so it has to be made of paper or soft material.

202
00:11:33,160 --> 00:11:37,520
It has to be one to one-size meters long, three centimeters,

203
00:11:37,520 --> 00:11:40,720
three to five centimeters large.

204
00:11:40,720 --> 00:11:43,640
It needs to have a coating, which in itself

205
00:11:43,640 --> 00:11:49,360
is a sticky material, and be sanded in order to attract flies.

206
00:11:49,360 --> 00:11:51,280
It needs to have visible color.

207
00:11:51,280 --> 00:11:57,960
And then, well, the other parts here, which I'm highlighting,

208
00:11:57,960 --> 00:12:02,760
would be really related to the packaging.

209
00:12:02,760 --> 00:12:07,640
So a sealed cylindrical container with a single-user

210
00:12:07,640 --> 00:12:11,640
opening, including a hanger, with possibility

211
00:12:11,640 --> 00:12:14,560
of branding on the packaging.

212
00:12:14,560 --> 00:12:16,680
And, well, the non-toxic material

213
00:12:16,680 --> 00:12:20,960
would still refer to the sticky material.

214
00:12:20,960 --> 00:12:21,840
Good, good.

215
00:12:21,840 --> 00:12:22,760
Thank you very much.

216
00:12:22,760 --> 00:12:23,760
This is great.

217
00:12:23,760 --> 00:12:26,920
So what you showed, that's more like a list, right?

218
00:12:26,920 --> 00:12:29,480
And I would describe, this looks like what

219
00:12:29,480 --> 00:12:31,840
I would call a bill of materials, right?

220
00:12:31,840 --> 00:12:36,000
It's essentially a list of the primary elements

221
00:12:36,000 --> 00:12:38,320
of form of the system, but there's

222
00:12:38,320 --> 00:12:41,400
some attributes that are associated.

223
00:12:41,400 --> 00:12:45,480
So this is a list format in the form

224
00:12:45,480 --> 00:12:48,040
of a bill of materials with attributes attached.

225
00:12:48,040 --> 00:12:49,680
So thank you very much.

226
00:12:49,680 --> 00:12:50,720
That's great.

227
00:12:50,720 --> 00:12:54,760
So let's get, I'm going to share here again.

228
00:12:54,760 --> 00:13:01,080
And you're probably wondering, why did we do this?

229
00:13:01,080 --> 00:13:03,440
Why did we do this exercise?

230
00:13:03,440 --> 00:13:10,440
And that's the point I want to make next.

231
00:13:10,440 --> 00:13:12,400
So here's a very simple system.

232
00:13:12,400 --> 00:13:15,320
And we had four examples of descriptions

233
00:13:15,320 --> 00:13:17,480
that were quite different, right?

234
00:13:17,480 --> 00:13:19,960
And of course, if you had more time,

235
00:13:19,960 --> 00:13:21,560
they'd become more complete, but they

236
00:13:21,560 --> 00:13:23,160
would be really different.

237
00:13:23,160 --> 00:13:27,000
So this is fundamentally the issue

238
00:13:27,000 --> 00:13:29,200
that we've been facing in systems engineering

239
00:13:29,200 --> 00:13:30,520
for a long time.

240
00:13:30,520 --> 00:13:33,000
The means for describing our artifacts,

241
00:13:33,000 --> 00:13:35,760
whether it's something simple as a Mr. Sticky,

242
00:13:35,760 --> 00:13:39,960
or an airplane, or a spacecraft, or a medical device,

243
00:13:39,960 --> 00:13:42,560
or even a service, how would we describe it?

244
00:13:42,560 --> 00:13:44,560
Well, first of all, natural language,

245
00:13:44,560 --> 00:13:46,600
the human natural language.

246
00:13:46,600 --> 00:13:49,360
And as we know, the human natural language

247
00:13:49,360 --> 00:13:50,480
is a very rich, right?

248
00:13:50,480 --> 00:13:53,280
There's very different ways in which we

249
00:13:53,280 --> 00:13:56,720
can express essentially the same facts, the same things.

250
00:13:56,720 --> 00:14:01,760
That's a wonderful thing if you're a poet or a writer,

251
00:14:01,760 --> 00:14:04,600
but it makes system engineering challenging,

252
00:14:04,600 --> 00:14:08,800
because it gets confusing when we're describing

253
00:14:08,800 --> 00:14:11,520
the same thing in very different ways.

254
00:14:11,520 --> 00:14:14,200
Or graphical, so we saw some boxes,

255
00:14:14,200 --> 00:14:18,040
and we saw some great examples, sketches, drawings.

256
00:14:18,040 --> 00:14:22,320
So fundamentally, the way we describe systems,

257
00:14:22,320 --> 00:14:25,640
and this gets to the left half and right half of the brain,

258
00:14:25,680 --> 00:14:31,400
is using language, words, sentences, lists, or graphical.

259
00:14:31,400 --> 00:14:34,920
Those are the two fundamental ways of describing systems.

260
00:14:34,920 --> 00:14:38,280
And then we put all these descriptions together

261
00:14:38,280 --> 00:14:41,520
in what we've been calling documents.

262
00:14:41,520 --> 00:14:43,120
We aggregate this in documents.

263
00:14:43,120 --> 00:14:46,880
So examples of documents would be a requirements document.

264
00:14:46,880 --> 00:14:49,920
That's what essentially you're doing in assignment 2,

265
00:14:49,920 --> 00:14:53,560
or a drawing package.

266
00:14:53,560 --> 00:14:58,320
Even if it's in CAD, it's still essentially a document.

267
00:14:58,320 --> 00:15:01,200
So typically in system engineering,

268
00:15:01,200 --> 00:15:03,000
all of this gets assembled into what

269
00:15:03,000 --> 00:15:06,520
we call a TDP, technical data package.

270
00:15:06,520 --> 00:15:09,600
And fundamentally, when you're designing a new system,

271
00:15:09,600 --> 00:15:12,240
you're producing a technical data package that

272
00:15:12,240 --> 00:15:16,320
has software, drawings, descriptions,

273
00:15:16,320 --> 00:15:19,560
and that's the deliverable from the design process

274
00:15:19,560 --> 00:15:22,280
is this TDP, technical data package.

275
00:15:22,320 --> 00:15:25,040
And from that, you should then be able to build and operate

276
00:15:25,040 --> 00:15:28,440
the system with as few errors, mistakes,

277
00:15:28,440 --> 00:15:30,800
misunderstandings as possible.

278
00:15:30,800 --> 00:15:33,600
And fundamentally, as our systems

279
00:15:33,600 --> 00:15:35,760
have been getting more and more complex,

280
00:15:35,760 --> 00:15:38,360
we're now talking about the systems that

281
00:15:38,360 --> 00:15:42,040
need the three, four, five layers of decomposition.

282
00:15:42,040 --> 00:15:45,800
It's very easy to have errors, omissions,

283
00:15:45,800 --> 00:15:48,640
different interpretations of this information.

284
00:15:48,640 --> 00:15:51,760
So that's fundamentally.

285
00:15:51,760 --> 00:15:53,080
But there are advantages.

286
00:15:53,080 --> 00:15:57,120
I don't want to say it's categorically bad

287
00:15:57,120 --> 00:16:00,120
to use natural language and graphics.

288
00:16:00,120 --> 00:16:02,360
They're definitely advantaged familiarity

289
00:16:02,360 --> 00:16:03,960
to the creator of the description.

290
00:16:03,960 --> 00:16:07,400
So it's easy, it's comfortable, it feels familiar.

291
00:16:07,400 --> 00:16:09,200
And also, it's not confining.

292
00:16:09,200 --> 00:16:13,200
So you can be quite creative by creating descriptions

293
00:16:13,200 --> 00:16:14,240
in this way.

294
00:16:14,240 --> 00:16:18,200
But the list of disadvantages is quite long

295
00:16:18,200 --> 00:16:20,760
for allowing an arbitrary description.

296
00:16:20,760 --> 00:16:23,960
The room for ambiguous interpretations and errors,

297
00:16:23,960 --> 00:16:25,840
it's quite difficult to update.

298
00:16:25,840 --> 00:16:28,000
So if you make a change in one description,

299
00:16:28,000 --> 00:16:30,040
that change will not automatically

300
00:16:30,040 --> 00:16:33,000
propagate to the other descriptions.

301
00:16:33,000 --> 00:16:35,960
Handing off these descriptions from one lifecycle phase

302
00:16:35,960 --> 00:16:40,360
to another, there's discontinuities in these handoffs.

303
00:16:40,360 --> 00:16:42,360
Uneval level of abstraction.

304
00:16:42,360 --> 00:16:44,520
So what I mean by that is you may

305
00:16:44,520 --> 00:16:48,040
describe one part of the system in very detailed.

306
00:16:48,040 --> 00:16:53,160
So the last example we saw with the list,

307
00:16:53,160 --> 00:16:55,560
with the Bill of Materials, there was quite a bit of detail

308
00:16:55,560 --> 00:16:59,280
there on the scent and the attributes of the tape.

309
00:16:59,280 --> 00:17:02,680
But at least a couple of the other descriptions

310
00:17:02,680 --> 00:17:05,760
didn't have that level of detail when it came to the tape.

311
00:17:05,760 --> 00:17:08,400
So the level of abstraction could

312
00:17:08,400 --> 00:17:13,040
be quite different in the different ways to describe it.

313
00:17:13,040 --> 00:17:15,480
And then for a complex system, you

314
00:17:15,480 --> 00:17:20,040
can imagine that the volume of information grows a lot.

315
00:17:20,040 --> 00:17:24,400
And so you can walk into any program manager and systems

316
00:17:24,400 --> 00:17:28,880
engineer's office and see bookshelves full of binders,

317
00:17:28,880 --> 00:17:31,680
dozens and dozens of binders with documents,

318
00:17:31,680 --> 00:17:33,880
thousands and thousands of pages.

319
00:17:33,880 --> 00:17:36,400
And many of them are never read.

320
00:17:36,400 --> 00:17:37,840
That's the big issue.

321
00:17:37,840 --> 00:17:41,080
So that's been the kind of way in which we've

322
00:17:41,080 --> 00:17:44,360
been doing system engineering traditionally.

323
00:17:44,360 --> 00:17:50,440
So the idea here is that in order to mitigate, yes, Justice?

324
00:17:58,760 --> 00:18:00,560
Phase A, conceptual design.

325
00:18:00,560 --> 00:18:03,800
Phase B, preliminary and detailed design.

326
00:18:03,800 --> 00:18:08,280
Phase C is testing and launch.

327
00:18:08,280 --> 00:18:09,480
Phase E is operation.

328
00:18:09,480 --> 00:18:14,600
So usually, not the same people do conceptual design,

329
00:18:14,600 --> 00:18:16,160
preliminary design, testing.

330
00:18:16,160 --> 00:18:19,400
So all the technical data package, these artifacts,

331
00:18:19,400 --> 00:18:21,920
have to be transferred and handed off

332
00:18:21,920 --> 00:18:25,360
to new people who then work on the next phase.

333
00:18:25,360 --> 00:18:27,800
That's what I mean by handoffs.

334
00:18:27,800 --> 00:18:34,120
And so the idea is, in order to mitigate

335
00:18:34,120 --> 00:18:37,440
some of these disadvantages of natural language

336
00:18:37,480 --> 00:18:41,600
and graphical description, there has been,

337
00:18:41,600 --> 00:18:44,000
and this has been recognized for a long time,

338
00:18:44,000 --> 00:18:48,840
a need to be more precise, perhaps more confining,

339
00:18:48,840 --> 00:18:53,320
but to create languages that allow us to describe systems

340
00:18:53,320 --> 00:18:56,080
much more precisely.

341
00:18:56,080 --> 00:18:58,680
And so I'll mention a couple of the past efforts.

342
00:18:58,680 --> 00:19:03,120
And you can read about each of these.

343
00:19:03,120 --> 00:19:06,920
So I'll mention bond graphs first, 1960.

344
00:19:06,960 --> 00:19:09,840
This was actually invented here at MIT

345
00:19:09,840 --> 00:19:13,160
by a professor in mechanical engineering.

346
00:19:13,160 --> 00:19:15,320
His name was Harry Painter.

347
00:19:15,320 --> 00:19:18,320
Professor Painter created bond graphs.

348
00:19:18,320 --> 00:19:20,840
You can think of bond graphs as block diagrams

349
00:19:20,840 --> 00:19:24,520
where different blocks have ports or interfaces

350
00:19:24,520 --> 00:19:28,160
where information, material, energy flows in and out.

351
00:19:28,160 --> 00:19:31,680
And you can compose a system out of these blocks.

352
00:19:31,680 --> 00:19:33,880
These bond graphs are essentially,

353
00:19:33,880 --> 00:19:37,240
and Narek will talk about Modellica,

354
00:19:37,240 --> 00:19:41,000
and which is sort of a modern version of bond graphs.

355
00:19:41,000 --> 00:19:45,280
It has other features too, but this has been sort of one

356
00:19:45,280 --> 00:19:46,520
attempt.

357
00:19:46,520 --> 00:19:51,920
Another one that's very well known is IDEF about 20 years

358
00:19:51,920 --> 00:19:52,440
later.

359
00:19:52,440 --> 00:19:56,680
This was created by the Air Force, the US Air Force.

360
00:19:56,680 --> 00:19:59,280
And this is essentially a description of systems

361
00:19:59,280 --> 00:20:01,200
that's very functionally oriented.

362
00:20:01,200 --> 00:20:03,520
So it shows you what functions are involved.

363
00:20:03,520 --> 00:20:05,000
And we saw one of the descriptions

364
00:20:05,000 --> 00:20:07,760
was very functionally oriented and how

365
00:20:07,760 --> 00:20:12,400
the functions of the system relate to each other.

366
00:20:12,400 --> 00:20:16,560
But generally, these system languages

367
00:20:16,560 --> 00:20:19,080
have not fully been deployed.

368
00:20:19,080 --> 00:20:21,880
Some organizations use them, others don't use them.

369
00:20:21,880 --> 00:20:23,880
And the main reason for that is twofold.

370
00:20:23,880 --> 00:20:27,880
First of all, some of these languages were incomplete.

371
00:20:27,880 --> 00:20:30,560
They would focus only on one aspect, like functions

372
00:20:30,560 --> 00:20:34,920
or the block nature of the system, the block diagrams.

373
00:20:34,920 --> 00:20:37,920
And a lot of them were not executable.

374
00:20:37,920 --> 00:20:40,560
So they would be graphical, but you couldn't actually

375
00:20:40,560 --> 00:20:43,680
simulate and actually check whether that description was

376
00:20:43,680 --> 00:20:45,760
complete or accurate.

377
00:20:45,760 --> 00:20:50,200
So since then, and the other thing, of course, important

378
00:20:50,200 --> 00:20:52,120
is domain agnostic.

379
00:20:52,120 --> 00:20:55,520
So what I mean by this is that the system modeling language

380
00:20:55,520 --> 00:20:59,360
should be applicable for any kind of cyber-physical system.

381
00:20:59,360 --> 00:21:03,600
Again, if you're designing a spacecraft, an aircraft,

382
00:21:03,600 --> 00:21:06,400
medical device, any kind of product,

383
00:21:06,400 --> 00:21:08,320
the language shouldn't have to be adapted.

384
00:21:08,320 --> 00:21:11,000
The language sort of covers all these applications.

385
00:21:11,000 --> 00:21:12,480
That's the idea.

386
00:21:12,480 --> 00:21:17,800
So whatever language it is that you're using or developing,

387
00:21:17,800 --> 00:21:20,480
it has to have these three things.

388
00:21:20,480 --> 00:21:22,240
Any language has these three things.

389
00:21:22,240 --> 00:21:24,240
So the first is ontology.

390
00:21:24,240 --> 00:21:26,680
And I reference here the Wikipedia

391
00:21:26,680 --> 00:21:28,560
articles on these things.

392
00:21:28,600 --> 00:21:31,240
Some of my colleagues in academia, it's a big debate.

393
00:21:31,240 --> 00:21:33,960
Is Wikipedia a legitimate source of information,

394
00:21:33,960 --> 00:21:35,160
or is it not?

395
00:21:35,160 --> 00:21:37,080
My position on this is that it is.

396
00:21:37,080 --> 00:21:40,640
I think Wikipedia is definitely not perfect,

397
00:21:40,640 --> 00:21:42,640
depending on what topic you're looking at.

398
00:21:42,640 --> 00:21:45,480
But it's a self-correcting system.

399
00:21:45,480 --> 00:21:48,840
So I actually go to Wikipedia, and then there's references,

400
00:21:48,840 --> 00:21:50,240
and you can dive deeper.

401
00:21:50,240 --> 00:21:53,120
So I give you the Wikipedia links here for these three things.

402
00:21:53,120 --> 00:21:55,040
First, ontology.

403
00:21:55,040 --> 00:21:59,600
So ontology is a very fancy word.

404
00:21:59,600 --> 00:22:03,520
What ontology actually is, Mark, why don't you come up here?

405
00:22:03,520 --> 00:22:06,160
You're an instructor today.

406
00:22:06,160 --> 00:22:11,680
Ontology, fundamentally, is describing the entities that

407
00:22:11,680 --> 00:22:14,920
are allowed to exist in the language.

408
00:22:14,920 --> 00:22:20,040
Subjects, nouns, adverbs, what are the objects, the entities,

409
00:22:20,040 --> 00:22:21,920
that can exist?

410
00:22:22,880 --> 00:22:25,840
It's a very abstract thing, but it's essentially

411
00:22:25,840 --> 00:22:28,600
the library of words and objects that

412
00:22:28,600 --> 00:22:31,840
are allowed to exist in that language.

413
00:22:31,840 --> 00:22:35,240
And then how these entities can be grouped, perhaps,

414
00:22:35,240 --> 00:22:37,160
in a hierarchy and subdivided.

415
00:22:37,160 --> 00:22:40,760
So it essentially constrains the universe of things

416
00:22:40,760 --> 00:22:42,400
you can describe in that language.

417
00:22:42,400 --> 00:22:45,840
The shorter, the smaller your ontology is,

418
00:22:45,840 --> 00:22:48,720
the more confined the language.

419
00:22:48,720 --> 00:22:50,280
Semantics.

420
00:22:50,280 --> 00:22:55,680
Semantics is basically, it's a branch of science,

421
00:22:55,680 --> 00:22:58,560
of philosophy, which is fundamentally

422
00:22:58,560 --> 00:23:01,240
assigning meaning to those objects

423
00:23:01,240 --> 00:23:03,320
that are described in the ontology.

424
00:23:03,320 --> 00:23:06,920
And so the way that we say this is

425
00:23:06,920 --> 00:23:10,320
that it's the relationship between the signifiers.

426
00:23:10,320 --> 00:23:14,240
So the signifiers are words, letters, symbols,

427
00:23:14,240 --> 00:23:16,000
graphical symbols.

428
00:23:16,000 --> 00:23:18,360
So how do we describe a resistor, for example,

429
00:23:18,360 --> 00:23:21,080
in electrical engineering?

430
00:23:21,080 --> 00:23:22,200
A squiggly line, right?

431
00:23:22,200 --> 00:23:23,880
It's the zigzag line.

432
00:23:23,880 --> 00:23:26,240
Well, if you don't know electrical engineering,

433
00:23:26,240 --> 00:23:28,840
or you never, you just see a squiggly line,

434
00:23:28,840 --> 00:23:30,640
it's meaningless to you.

435
00:23:30,640 --> 00:23:33,320
But if you know that semantically,

436
00:23:33,320 --> 00:23:35,400
that means that's a resistor.

437
00:23:35,400 --> 00:23:36,800
That's the symbol for resistor.

438
00:23:36,800 --> 00:23:38,920
That's what we mean by semantics.

439
00:23:38,920 --> 00:23:41,040
And then the third is syntax.

440
00:23:41,040 --> 00:23:42,000
What is syntax?

441
00:23:42,000 --> 00:23:46,320
It's the set of rules, the set of principles and processes

442
00:23:46,320 --> 00:23:51,720
by which the objects or the entities in the ontology

443
00:23:51,720 --> 00:23:55,120
can be combined to build up higher level information,

444
00:23:55,120 --> 00:23:59,360
like sentences, paragraphs, and so forth.

445
00:23:59,360 --> 00:24:02,880
And so that's essentially the construction rules

446
00:24:02,880 --> 00:24:03,760
for the language.

447
00:24:03,760 --> 00:24:07,520
So every language has these three things.

448
00:24:07,520 --> 00:24:10,040
So any questions about this before we

449
00:24:10,040 --> 00:24:12,480
move into our first language?

450
00:24:12,480 --> 00:24:15,000
So we're going to give three examples of system modeling

451
00:24:15,000 --> 00:24:18,120
languages, and you'll see the similarities and differences.

452
00:24:18,120 --> 00:24:20,880
But as you see these languages, keep in mind,

453
00:24:20,880 --> 00:24:25,920
they all have ontology, semantics, and syntax.

454
00:24:25,920 --> 00:24:29,760
Any questions about that?

455
00:24:29,760 --> 00:24:32,520
OK, so OPM.

456
00:24:32,520 --> 00:24:34,240
Let me describe to you OPM.

457
00:24:34,240 --> 00:24:38,160
This is one of the younger languages.

458
00:24:38,160 --> 00:24:41,960
And so OPM stands for Object Process Methodology.

459
00:24:41,960 --> 00:24:48,000
And it was created by Professor Dov Dory at Technion,

460
00:24:48,000 --> 00:24:49,600
colleague of mine.

461
00:24:49,600 --> 00:24:52,920
Dov is essentially a computer scientist by training.

462
00:24:52,920 --> 00:24:56,320
And you'll see the heritage here of OPM.

463
00:24:56,320 --> 00:25:00,600
And the big news here about OPM is OPM

464
00:25:00,600 --> 00:25:03,200
is not that well known yet.

465
00:25:03,200 --> 00:25:06,840
If you ask around, not too many people know OPM.

466
00:25:06,840 --> 00:25:09,040
But I predict that in the next decade,

467
00:25:09,040 --> 00:25:11,040
that will change very quickly.

468
00:25:11,080 --> 00:25:14,200
And one of the reasons is that OPM was just now

469
00:25:14,200 --> 00:25:17,480
adopted as an ISO standard.

470
00:25:17,480 --> 00:25:20,560
And if you know ISO, the International Standards Organization

471
00:25:20,560 --> 00:25:23,440
that are located in Geneva, it's a big deal

472
00:25:23,440 --> 00:25:24,920
to become an ISO standard.

473
00:25:24,920 --> 00:25:26,880
It took like five years, the whole process,

474
00:25:26,880 --> 00:25:28,840
with committees and reviews.

475
00:25:28,840 --> 00:25:32,280
And so the ISO standard is actually,

476
00:25:32,280 --> 00:25:35,080
OPM was adopted as an ISO standard

477
00:25:35,080 --> 00:25:39,640
as a means to describe and develop other standards.

478
00:25:39,640 --> 00:25:41,600
So it's kind of a meta language.

479
00:25:41,600 --> 00:25:43,600
Because as you can imagine, when you

480
00:25:43,600 --> 00:25:45,880
read different ISO standards, which by the way

481
00:25:45,880 --> 00:25:48,480
have a lot of influence, they're also

482
00:25:48,480 --> 00:25:50,760
written in natural language and graphics

483
00:25:50,760 --> 00:25:52,160
and lots of inconsistencies.

484
00:25:52,160 --> 00:25:54,920
So the idea is that future ISO standards

485
00:25:54,920 --> 00:25:58,080
should be written using OPM, such that they're

486
00:25:58,080 --> 00:26:00,680
clear and consistent and so forth.

487
00:26:00,680 --> 00:26:05,640
So the history here is that if we go back further,

488
00:26:06,600 --> 00:26:09,680
there was UML, which is Unified Modeling Language, which

489
00:26:09,680 --> 00:26:12,800
I'm not going to talk about today, is a software.

490
00:26:12,800 --> 00:26:15,080
This is a language that was developed primarily

491
00:26:15,080 --> 00:26:17,000
for software engineering.

492
00:26:17,000 --> 00:26:20,040
To consistently describe use cases,

493
00:26:20,040 --> 00:26:25,400
to consistently describe activity and flows in software,

494
00:26:25,400 --> 00:26:27,440
the structure of software.

495
00:26:27,440 --> 00:26:29,360
But it's really software-centric.

496
00:26:29,360 --> 00:26:32,960
So from UML2, we then sort of branched off

497
00:26:33,000 --> 00:26:36,800
into CISML, which Mark showed us, who just joined us.

498
00:26:36,800 --> 00:26:39,040
We'll talk about.

499
00:26:39,040 --> 00:26:41,560
And then OPM.

500
00:26:41,560 --> 00:26:43,760
So these are sort of derivatives of UML.

501
00:26:43,760 --> 00:26:45,360
And there's a book.

502
00:26:45,360 --> 00:26:50,440
It's not one of the mandatory books for this class, OPM 2002.

503
00:26:50,440 --> 00:26:52,200
If you're really interested in OPM,

504
00:26:52,200 --> 00:26:54,440
I recommend you invest in that book.

505
00:26:54,440 --> 00:26:57,440
It's really very well written.

506
00:26:57,440 --> 00:27:02,360
So let me give you an example of how

507
00:27:02,360 --> 00:27:04,000
OPM can be used.

508
00:27:04,000 --> 00:27:06,760
So like we said, typical product representations

509
00:27:06,760 --> 00:27:09,680
are sketches, engineering drawings, or UML diagrams

510
00:27:09,680 --> 00:27:14,920
in software, but the need for a unified representation.

511
00:27:14,920 --> 00:27:19,600
And fundamentally, we have functions,

512
00:27:19,600 --> 00:27:23,240
and then we have objects, form, and function in systems.

513
00:27:23,240 --> 00:27:27,280
And so what we would like to do, and what the premise of OPM

514
00:27:27,280 --> 00:27:33,120
is that we can show everything in one diagram type.

515
00:27:33,120 --> 00:27:38,360
So the functions, the functional attributes, the objects,

516
00:27:38,360 --> 00:27:41,200
and there's different types of objects, operands, system

517
00:27:41,200 --> 00:27:45,320
components, consumables, the attributes of those objects,

518
00:27:45,320 --> 00:27:46,440
and then the links.

519
00:27:46,440 --> 00:27:48,520
And I'll show you the different types of links

520
00:27:48,520 --> 00:27:51,000
between these that exist in OPM.

521
00:27:51,000 --> 00:27:53,200
So it's a generic modeling language,

522
00:27:53,200 --> 00:27:55,120
and it has been successfully applied

523
00:27:55,120 --> 00:27:57,920
to system architecting of complex products

524
00:27:57,920 --> 00:27:59,720
in different organizations.

525
00:27:59,720 --> 00:28:02,320
I'm going to try to give you a pretty simple example here,

526
00:28:02,320 --> 00:28:03,720
which is a refrigerator.

527
00:28:03,720 --> 00:28:04,400
So think about it.

528
00:28:04,400 --> 00:28:08,440
We're going to look at a small household level refrigerator

529
00:28:08,440 --> 00:28:12,040
through the eyes of OPM.

530
00:28:12,040 --> 00:28:16,040
All right, so here's the basic ontology of OPM.

531
00:28:16,040 --> 00:28:18,000
It's very, very simple.

532
00:28:18,000 --> 00:28:24,200
And the idea is to have as few objects, as few entities

533
00:28:24,200 --> 00:28:27,440
as possible in the language to keep it simple.

534
00:28:27,440 --> 00:28:31,360
So the first one is the idea of an object.

535
00:28:31,360 --> 00:28:32,600
What is an object?

536
00:28:32,600 --> 00:28:35,840
And objects are drawn as these rectangles.

537
00:28:35,840 --> 00:28:39,840
Objects are defined as entities that

538
00:28:39,840 --> 00:28:44,480
have the potential for stable, unconditional existence

539
00:28:44,480 --> 00:28:47,160
for some positive duration of time.

540
00:28:47,160 --> 00:28:49,680
And objects have states within them.

541
00:28:49,680 --> 00:28:55,360
So what would be an example of an object

542
00:28:55,360 --> 00:28:57,440
that we've talked about today?

543
00:28:57,440 --> 00:28:58,400
Go ahead.

544
00:28:58,400 --> 00:28:59,640
Maybe the sticky tape.

545
00:28:59,640 --> 00:29:01,960
Yeah, so the sticky tape itself, that's an object.

546
00:29:01,960 --> 00:29:04,000
It exists unconditionally.

547
00:29:04,000 --> 00:29:05,000
It's there.

548
00:29:05,000 --> 00:29:08,920
And what's important is it could be a physical object.

549
00:29:08,920 --> 00:29:11,280
So it has a physical existence.

550
00:29:11,280 --> 00:29:16,040
But it could also be an informational object.

551
00:29:16,040 --> 00:29:19,400
So for example, if you have an idea,

552
00:29:19,440 --> 00:29:22,920
or a vision, that's an object, too.

553
00:29:22,920 --> 00:29:24,560
It's not physical in that sense.

554
00:29:24,560 --> 00:29:29,000
But it does exist as an informational object.

555
00:29:29,000 --> 00:29:30,640
What are states?

556
00:29:30,640 --> 00:29:31,920
Let's see it, EPFL.

557
00:29:31,920 --> 00:29:34,520
What would be an example of a state that's

558
00:29:34,520 --> 00:29:36,080
associated with an object?

559
00:29:43,760 --> 00:29:46,360
Yeah, that's OK.

560
00:29:46,360 --> 00:29:49,240
Can somebody give an example of a state?

561
00:29:50,200 --> 00:29:52,760
Rolled and unrolled for the sticky tape?

562
00:29:52,760 --> 00:29:55,280
Rolled and unrolled, exactly.

563
00:29:55,280 --> 00:29:56,760
Or furled and unfurled.

564
00:29:56,760 --> 00:29:59,000
So that's kind of a binary state.

565
00:29:59,000 --> 00:30:03,440
There could be halfway unrolled, or the sticky tape

566
00:30:03,440 --> 00:30:06,800
is full of flies, or it's kind of empty.

567
00:30:06,800 --> 00:30:09,000
Those would be describing the object

568
00:30:09,000 --> 00:30:11,920
in terms of what state it is in, exactly.

569
00:30:11,920 --> 00:30:17,160
So the form is then the sum of all these objects.

570
00:30:17,200 --> 00:30:19,440
So that's one building block.

571
00:30:19,440 --> 00:30:21,800
And then processes are the other.

572
00:30:21,800 --> 00:30:23,400
So what are processes?

573
00:30:23,400 --> 00:30:24,560
Oh, is there another example?

574
00:30:24,560 --> 00:30:25,400
Yeah, go ahead.

575
00:30:25,400 --> 00:30:26,360
Can I ask a question?

576
00:30:26,360 --> 00:30:28,680
Is this Katya?

577
00:30:28,680 --> 00:30:29,200
Go ahead.

578
00:30:29,200 --> 00:30:33,840
Katya, what do you mean by positive duration of time?

579
00:30:33,840 --> 00:30:37,920
Well, meaning that, so the object could be created, right?

580
00:30:37,920 --> 00:30:39,360
It didn't exist before.

581
00:30:39,360 --> 00:30:42,760
It's created, and it exists, and then it could be destroyed

582
00:30:42,760 --> 00:30:43,640
again.

583
00:30:43,640 --> 00:30:46,560
It could disappear, or it could be consumed.

584
00:30:46,560 --> 00:30:48,280
But it means that the object needs

585
00:30:48,280 --> 00:30:52,600
to exist for a non-zero period of time

586
00:30:52,600 --> 00:30:57,680
in order for it to be called an object, right?

587
00:30:57,680 --> 00:31:02,640
So objects in the world that can be described with OPM

588
00:31:02,640 --> 00:31:06,600
fundamentally, objects can be created,

589
00:31:06,600 --> 00:31:09,960
objects can be modified, particularly their states

590
00:31:09,960 --> 00:31:14,600
can be modified, and they can be destroyed or consumed.

591
00:31:14,600 --> 00:31:16,120
That's basically it.

592
00:31:16,120 --> 00:31:18,760
That's a complete set, OK?

593
00:31:18,760 --> 00:31:21,400
Does that make sense?

594
00:31:21,400 --> 00:31:24,440
OK, so processes are, what are processes?

595
00:31:24,440 --> 00:31:26,560
Processes are really fundamentally different

596
00:31:26,560 --> 00:31:27,320
from objects.

597
00:31:27,320 --> 00:31:30,560
Processes are shown as these ellipses,

598
00:31:30,560 --> 00:31:33,760
and they're the patterns of transformation

599
00:31:33,760 --> 00:31:37,400
applied to one or more objects, and processes change states.

600
00:31:37,400 --> 00:31:42,160
So processes, unlike objects, cannot exist on their own.

601
00:31:42,160 --> 00:31:45,520
Processes only make sense if they're

602
00:31:45,520 --> 00:31:48,880
associated with at least one object, OK?

603
00:31:48,880 --> 00:31:52,440
So processes are essentially the functions

604
00:31:52,440 --> 00:31:56,280
that we develop in systems are processes that transform

605
00:31:56,280 --> 00:31:59,480
or create, destroy, or transform objects.

606
00:31:59,480 --> 00:32:02,840
So function emerges from one or more processes,

607
00:32:02,840 --> 00:32:05,520
and then we have different links between objects

608
00:32:05,520 --> 00:32:06,800
and processes.

609
00:32:06,800 --> 00:32:08,040
I'll show you two examples here.

610
00:32:08,040 --> 00:32:11,280
One is the arrow with a pointy head, OK?

611
00:32:11,280 --> 00:32:18,840
That could be a consumption or production type link,

612
00:32:18,840 --> 00:32:23,480
or a link with this little lollipop symbol.

613
00:32:23,480 --> 00:32:26,000
This is known as an instrument link.

614
00:32:26,000 --> 00:32:29,280
And so the difference there is that if an object is

615
00:32:29,280 --> 00:32:32,040
linked to a process using an arrow,

616
00:32:32,040 --> 00:32:34,480
it means that something's happening to that object.

617
00:32:34,480 --> 00:32:37,400
It's being created or destroyed or modified.

618
00:32:37,400 --> 00:32:40,640
If an object is linked to a process using the lollipop

619
00:32:40,640 --> 00:32:43,160
symbol, the instrument link, it means

620
00:32:43,160 --> 00:32:46,360
that in order for that process to happen,

621
00:32:46,360 --> 00:32:48,000
this object is needed.

622
00:32:48,000 --> 00:32:49,320
It's an instrument.

623
00:32:49,320 --> 00:32:51,360
But the object itself, the instrument,

624
00:32:51,360 --> 00:32:55,120
does not get modified in any way by the process.

625
00:32:55,120 --> 00:32:59,560
But the process couldn't happen if that object didn't exist.

626
00:32:59,560 --> 00:33:01,160
Do you see the difference?

627
00:33:01,160 --> 00:33:03,520
And so one of the really, I think, important things

628
00:33:03,520 --> 00:33:06,360
about OPM, but any of the languages,

629
00:33:06,400 --> 00:33:10,040
is that every box, every arrow, every link

630
00:33:10,040 --> 00:33:12,640
has precise semantics.

631
00:33:12,640 --> 00:33:16,000
And usually, when we doodle, when we just think about it,

632
00:33:16,000 --> 00:33:18,960
we put arrows and links between boxes,

633
00:33:18,960 --> 00:33:20,920
we often don't really deeply think,

634
00:33:20,920 --> 00:33:24,000
when I put a link in here, what does that link actually mean?

635
00:33:24,000 --> 00:33:25,760
What does link imply?

636
00:33:25,760 --> 00:33:28,840
So when you do system modeling using these languages,

637
00:33:28,840 --> 00:33:31,400
you become much, much more precise.

638
00:33:31,400 --> 00:33:32,440
Yes, please.

639
00:33:32,440 --> 00:33:34,920
And would you push the mic button when you?

640
00:33:34,920 --> 00:33:36,480
Mark, go ahead.

641
00:33:36,480 --> 00:33:39,520
Can an object be a process or a process be an object?

642
00:33:39,520 --> 00:33:40,800
No.

643
00:33:40,800 --> 00:33:45,160
So what about if you have, I guess

644
00:33:45,160 --> 00:33:48,680
I'm thinking in terms of if there's

645
00:33:48,680 --> 00:33:50,640
some process for doing some procedure,

646
00:33:50,640 --> 00:33:53,800
and you're assembling a satellite or whatnot,

647
00:33:53,800 --> 00:33:55,440
you need to modify that process.

648
00:33:55,440 --> 00:33:58,920
So how is that sort of thing represented in OPM?

649
00:33:58,920 --> 00:34:04,160
The process modifies objects, but processes cannot modify

650
00:34:04,160 --> 00:34:06,280
other processes, because processes

651
00:34:06,280 --> 00:34:11,360
are fundamentally in OPM acting upon the objects.

652
00:34:11,360 --> 00:34:13,440
Now, processes can invoke each other.

653
00:34:13,440 --> 00:34:16,000
So if there's a sequence of processes,

654
00:34:16,000 --> 00:34:19,400
you have to do this assembly step before this other assembly

655
00:34:19,400 --> 00:34:24,080
step, you can have what's called an invocation link.

656
00:34:24,080 --> 00:34:26,560
But that's a logical dependency between processes.

657
00:34:26,560 --> 00:34:28,160
But fundamentally, the processes

658
00:34:28,160 --> 00:34:30,640
act through the objects in OPM.

659
00:34:31,360 --> 00:34:32,360
OK.

660
00:34:32,360 --> 00:34:35,560
So let me be a little bit more.

661
00:34:35,560 --> 00:34:37,320
So let's go into some more detail.

662
00:34:37,320 --> 00:34:41,080
So at a high level, when you look at the economy,

663
00:34:41,080 --> 00:34:45,280
right, products, yes, go ahead.

664
00:34:45,280 --> 00:34:45,960
I have a question.

665
00:34:45,960 --> 00:34:51,400
Why create another language and not just stick with UML?

666
00:34:51,400 --> 00:34:54,800
So good question.

667
00:34:54,800 --> 00:34:59,640
So we'll talk about SysML, which is very similar to UML.

668
00:34:59,640 --> 00:35:02,480
It's sort of generalized for cyber-physical systems,

669
00:35:02,480 --> 00:35:03,960
not just software.

670
00:35:03,960 --> 00:35:07,600
So the reason that OPM was created,

671
00:35:07,600 --> 00:35:11,440
because UML was found to be somewhat too confining,

672
00:35:11,440 --> 00:35:14,720
this is more general, and also the idea

673
00:35:14,720 --> 00:35:19,080
of a unified representation, one type of diagram

674
00:35:19,080 --> 00:35:22,440
and description for any application.

675
00:35:22,440 --> 00:35:27,040
So it's basically a kind of more general version of UML.

676
00:35:27,040 --> 00:35:29,600
But the other really important thing about OPM

677
00:35:29,600 --> 00:35:36,880
is that the processes are often in object-oriented thinking.

678
00:35:36,880 --> 00:35:40,000
Processes are embedded inside objects.

679
00:35:40,000 --> 00:35:45,000
And in OPM, the processes have been emancipated

680
00:35:45,000 --> 00:35:47,520
to stand at the same level as objects.

681
00:35:47,520 --> 00:35:49,720
Those are the main differences.

682
00:35:49,720 --> 00:35:53,160
So let me go in a little bit more detail.

683
00:35:53,160 --> 00:35:58,120
So if you think about the economy in general,

684
00:35:58,120 --> 00:36:01,680
goods and services, goods are objects,

685
00:36:01,680 --> 00:36:04,120
and services are processes.

686
00:36:04,120 --> 00:36:13,760
So if you buy a new iPad or a new pencil or whatever it is,

687
00:36:13,760 --> 00:36:16,080
you're actually buying an object.

688
00:36:16,080 --> 00:36:17,440
You're purchasing an object.

689
00:36:17,440 --> 00:36:19,480
That's obvious.

690
00:36:19,480 --> 00:36:21,720
But why are you purchasing that object?

691
00:36:24,160 --> 00:36:28,200
So let's say you're buying a new tablet.

692
00:36:28,200 --> 00:36:30,280
You're buying the tablet.

693
00:36:30,280 --> 00:36:34,200
But why are you buying the tablet?

694
00:36:34,200 --> 00:36:34,880
Sam, go ahead.

695
00:36:39,480 --> 00:36:42,360
You're buying the tablet to perform an action

696
00:36:42,360 --> 00:36:45,520
or process on something else, to do something.

697
00:36:45,520 --> 00:36:46,760
So what do tablets do?

698
00:36:46,760 --> 00:36:49,960
I mean, not stone tablets, but modern tablets.

699
00:36:49,960 --> 00:36:56,560
They allow you to work with software or communicate.

700
00:36:56,560 --> 00:36:59,240
Yeah, so they're information processing.

701
00:36:59,240 --> 00:37:01,320
They're information processing devices.

702
00:37:01,320 --> 00:37:03,600
And there's an argument.

703
00:37:03,600 --> 00:37:05,640
Tablets are great for consuming information.

704
00:37:05,640 --> 00:37:09,560
They're maybe not as good for generating new information.

705
00:37:09,560 --> 00:37:13,360
So fundamentally, you're purchasing the tablet,

706
00:37:13,360 --> 00:37:16,800
which is an object, in order to be

707
00:37:16,800 --> 00:37:18,880
able to do information processing,

708
00:37:18,880 --> 00:37:20,680
and information consumption.

709
00:37:20,680 --> 00:37:25,200
So the process is then implicit, right?

710
00:37:25,200 --> 00:37:26,160
What's an example?

711
00:37:26,160 --> 00:37:29,880
If you purchase a service, what would be an example of a service?

712
00:37:33,920 --> 00:37:37,480
What would be an example of a service?

713
00:37:37,480 --> 00:37:38,600
Let's see at EPFL.

714
00:37:38,600 --> 00:37:41,200
What would be an example of a service that you could purchase?

715
00:37:47,360 --> 00:37:48,560
Going to the dentist.

716
00:37:48,560 --> 00:37:49,880
Going to the dentist.

717
00:37:49,880 --> 00:37:53,560
Yeah, one of our favorite things to do.

718
00:37:53,560 --> 00:37:55,720
So have you been there recently, or?

719
00:37:58,520 --> 00:38:00,200
Yeah, one month ago.

720
00:38:00,200 --> 00:38:04,320
So I don't want to violate your privacy,

721
00:38:04,320 --> 00:38:09,800
but can you share with us what happened at the dentist?

722
00:38:09,800 --> 00:38:11,480
Usually, it's the yearly checkup.

723
00:38:11,480 --> 00:38:16,080
You have to check that there's no hidden,

724
00:38:16,120 --> 00:38:19,160
I don't know how do you call it in English, the caries?

725
00:38:19,160 --> 00:38:21,160
Yeah, cavities.

726
00:38:21,160 --> 00:38:22,760
Yeah, cavities.

727
00:38:22,760 --> 00:38:25,440
Check that wisdom tooth don't mess up

728
00:38:25,440 --> 00:38:28,560
what you've been walking on tirelessly

729
00:38:28,560 --> 00:38:30,240
when you were younger with braces.

730
00:38:30,240 --> 00:38:35,160
And also these kind of things, get checked.

731
00:38:35,160 --> 00:38:36,160
Very good.

732
00:38:36,160 --> 00:38:39,840
So going to the dentist provides a service, which

733
00:38:39,840 --> 00:38:43,840
is either checking your teeth, or filling cavities, which

734
00:38:43,840 --> 00:38:45,240
is a process.

735
00:38:45,240 --> 00:38:47,520
And all the objects, the chair on which you sit,

736
00:38:47,520 --> 00:38:51,640
the instruments, I guess we still use gold sometimes

737
00:38:51,640 --> 00:38:54,880
in some places, those are objects that

738
00:38:54,880 --> 00:38:57,440
are used in the performance of the service.

739
00:38:57,440 --> 00:38:59,640
You see the relationship?

740
00:38:59,640 --> 00:39:02,760
So objects and processes always come in pairs.

741
00:39:02,760 --> 00:39:04,760
Thank you for that example.

742
00:39:04,760 --> 00:39:08,680
So let me talk about the links in OPM briefly.

743
00:39:08,680 --> 00:39:09,680
So there are two types.

744
00:39:09,680 --> 00:39:13,800
There's the structural links, which link objects to objects.

745
00:39:13,800 --> 00:39:16,760
And we typically use arrows, is related to,

746
00:39:16,760 --> 00:39:19,000
or we can tag these as well.

747
00:39:19,000 --> 00:39:22,000
So for example, something powers something else.

748
00:39:22,000 --> 00:39:23,760
This is known as a tagged link.

749
00:39:23,760 --> 00:39:26,080
It suppresses the processes.

750
00:39:26,080 --> 00:39:30,200
And then there's these triangles that are essentially,

751
00:39:30,200 --> 00:39:32,800
there's a kind of hierarchy implied there.

752
00:39:32,800 --> 00:39:34,840
And slightly different meanings.

753
00:39:34,840 --> 00:39:38,680
So the solid triangle means decomposition.

754
00:39:38,680 --> 00:39:41,760
So the higher level object is composed

755
00:39:42,120 --> 00:39:43,880
of lower level objects.

756
00:39:43,880 --> 00:39:46,600
So that's Mark, you mentioned assembly.

757
00:39:46,600 --> 00:39:48,960
You're creating the bus of the spacecraft,

758
00:39:48,960 --> 00:39:51,120
and it has a whole bunch of stuff in it.

759
00:39:51,120 --> 00:39:53,680
Well, you would use this filled in triangle

760
00:39:53,680 --> 00:39:55,480
to show that decomposition.

761
00:39:55,480 --> 00:39:59,160
The second example is the characterization link.

762
00:39:59,160 --> 00:40:02,840
So this is essentially relating an attribute

763
00:40:02,840 --> 00:40:05,200
to its kind of master object.

764
00:40:05,200 --> 00:40:09,160
Specialization and generalization is the empty triangle.

765
00:40:09,160 --> 00:40:12,400
And then this funny symbol here is instantiation.

766
00:40:12,400 --> 00:40:17,400
So essentially you have a general object,

767
00:40:17,480 --> 00:40:19,000
and then you can instantiate that.

768
00:40:19,000 --> 00:40:21,200
So I have two children, okay?

769
00:40:21,200 --> 00:40:23,760
And then there's two, I have two children,

770
00:40:23,760 --> 00:40:27,680
which is general, and there's two instantiations of them.

771
00:40:27,680 --> 00:40:29,160
One of them is called Gabrielle,

772
00:40:29,160 --> 00:40:30,480
and one of them is called Christian,

773
00:40:30,480 --> 00:40:31,960
and they're actual people.

774
00:40:31,960 --> 00:40:35,920
So that's the idea of instantiation.

775
00:40:35,920 --> 00:40:40,920
Processes, processes are these patterns of transformation.

776
00:40:41,480 --> 00:40:42,600
They're tricky.

777
00:40:42,600 --> 00:40:45,600
Processes are trickier to understand than the objects

778
00:40:45,600 --> 00:40:48,040
because we cannot hold or touch a process.

779
00:40:48,040 --> 00:40:51,640
It's fleeting, and the creation change

780
00:40:51,640 --> 00:40:55,760
or destruction of objects is what processes do.

781
00:40:55,760 --> 00:40:58,320
They rely on at least one object

782
00:40:58,320 --> 00:41:00,760
in what we call the pre-process set.

783
00:41:00,760 --> 00:41:03,680
A process transforms at least one object,

784
00:41:03,720 --> 00:41:06,880
and the time is implied.

785
00:41:06,880 --> 00:41:09,360
So processes take along a timeline.

786
00:41:09,360 --> 00:41:12,240
And in terms of the description in English,

787
00:41:12,240 --> 00:41:14,280
we use the so-called gerund form.

788
00:41:14,280 --> 00:41:16,400
So all the processes,

789
00:41:16,400 --> 00:41:18,040
there's some examples on the right side,

790
00:41:18,040 --> 00:41:20,520
use the ing form of a verb.

791
00:41:21,960 --> 00:41:26,440
So we can then put these together, objects and processes.

792
00:41:26,440 --> 00:41:29,040
So here's an example of a machine.

793
00:41:29,040 --> 00:41:31,840
This happens to be like a printer or copy machine.

794
00:41:31,840 --> 00:41:33,480
It has a main switch.

795
00:41:33,480 --> 00:41:36,840
The main switch has an attribute called main switch state,

796
00:41:36,840 --> 00:41:38,440
which can be on or off.

797
00:41:39,680 --> 00:41:43,680
The process of switching transforms, in this case,

798
00:41:43,680 --> 00:41:46,520
the main switch state from on to off,

799
00:41:46,520 --> 00:41:48,200
or we could go the other way.

800
00:41:48,200 --> 00:41:51,280
And in order for this to happen, we have here,

801
00:41:52,280 --> 00:41:55,200
this is actually slightly different than the instrument link.

802
00:41:55,200 --> 00:41:57,160
This is a filled-in lollipop,

803
00:41:57,160 --> 00:41:59,320
which is known as an agent link.

804
00:41:59,320 --> 00:42:01,640
So the operator is an active agent

805
00:42:01,640 --> 00:42:03,800
to carry out the switching process,

806
00:42:03,800 --> 00:42:05,680
which changes the main switch state

807
00:42:05,680 --> 00:42:07,960
from on to off or off to on.

808
00:42:07,960 --> 00:42:10,480
And the main switch state is an attribute

809
00:42:10,480 --> 00:42:13,400
of the main switch, right?

810
00:42:13,400 --> 00:42:16,320
So transporting, this is another example.

811
00:42:16,320 --> 00:42:19,120
Transporting changes the state of a person

812
00:42:19,120 --> 00:42:22,160
from being here, location A,

813
00:42:22,160 --> 00:42:24,480
to being there, location B.

814
00:42:27,240 --> 00:42:31,240
So there are seven, huh, coincidence,

815
00:42:31,280 --> 00:42:36,280
seven, seven object process links in OPM.

816
00:42:37,920 --> 00:42:42,680
So P changes, the process changes the object,

817
00:42:42,680 --> 00:42:44,160
say from state A to B,

818
00:42:44,160 --> 00:42:46,800
that's the example we just looked at.

819
00:42:46,800 --> 00:42:48,120
You can actually hide that.

820
00:42:48,120 --> 00:42:50,920
If you're really not interested in all the states

821
00:42:50,920 --> 00:42:53,080
and details, you hide the states.

822
00:42:53,080 --> 00:42:54,640
You don't wanna see them.

823
00:42:54,640 --> 00:42:56,040
And then you can replace that

824
00:42:56,040 --> 00:42:58,520
with what's called the affect T link,

825
00:42:58,520 --> 00:43:00,560
which is this two-sided arrow.

826
00:43:00,560 --> 00:43:03,480
And all you know is that this process

827
00:43:03,480 --> 00:43:05,720
is affecting that object, right?

828
00:43:05,720 --> 00:43:07,560
And it's a two-sided arrow.

829
00:43:07,560 --> 00:43:09,440
But you don't know exactly how,

830
00:43:09,440 --> 00:43:10,760
but you know it's affected.

831
00:43:11,760 --> 00:43:14,800
A result T link, so this is an arrow pointing

832
00:43:14,800 --> 00:43:17,300
from the process to the object,

833
00:43:17,300 --> 00:43:20,200
means that the process of transporting

834
00:43:20,200 --> 00:43:23,160
produces emissions, right, that weren't there before.

835
00:43:23,160 --> 00:43:24,980
So that's a result T link.

836
00:43:24,980 --> 00:43:26,640
But the process of transporting

837
00:43:26,640 --> 00:43:29,200
requires or consumes energy.

838
00:43:29,200 --> 00:43:31,440
So the arrow is pointing from energy

839
00:43:31,440 --> 00:43:33,560
into the transporting process,

840
00:43:33,560 --> 00:43:34,960
because it's being consumed.

841
00:43:36,080 --> 00:43:37,600
I did mention the agent link,

842
00:43:37,600 --> 00:43:39,600
so there's an operator of a vehicle.

843
00:43:39,600 --> 00:43:42,000
And this, you know, when we talk about

844
00:43:42,000 --> 00:43:45,520
autonomously driving vehicles, big topic right now,

845
00:43:45,520 --> 00:43:47,800
actually it was cool at EPFL this summer,

846
00:43:47,800 --> 00:43:51,400
there's the autonomous shuttle right on the campus,

847
00:43:51,400 --> 00:43:53,880
the electric shuttle, did anybody take that?

848
00:43:53,880 --> 00:43:57,040
Did you guys try that shuttle this summer?

849
00:43:57,040 --> 00:43:58,560
Yeah, did you like it?

850
00:44:00,040 --> 00:44:03,120
No, I didn't, but the friend is working

851
00:44:03,120 --> 00:44:06,760
in this kind of shuttle, like sitting for hours

852
00:44:06,760 --> 00:44:08,560
waiting for people actually.

853
00:44:08,560 --> 00:44:11,360
Okay, so fundamentally, I mean,

854
00:44:11,360 --> 00:44:13,920
if you wanna think of this in OPM language,

855
00:44:14,880 --> 00:44:18,120
driverless vehicle is basically eliminating this, right?

856
00:44:18,120 --> 00:44:21,560
No longer needing an operator with an agent link

857
00:44:21,560 --> 00:44:24,400
and replacing this with a piece of software,

858
00:44:24,400 --> 00:44:27,340
which would be an instrument link.

859
00:44:28,340 --> 00:44:31,140
So the instrument, the transporting process

860
00:44:31,140 --> 00:44:33,940
requires a vehicle, and then we have what's known

861
00:44:33,940 --> 00:44:35,740
as a conditional link.

862
00:44:35,740 --> 00:44:39,020
So this process can only occur if this object

863
00:44:39,020 --> 00:44:40,860
is in that particular state.

864
00:44:40,860 --> 00:44:43,260
So this example here obviously ignores

865
00:44:43,260 --> 00:44:46,020
the existence of credit cards.

866
00:44:46,020 --> 00:44:49,900
So you can do the purchasing, purchasing,

867
00:44:49,900 --> 00:44:52,980
the process of purchasing is conditional

868
00:44:52,980 --> 00:44:56,940
upon the state of the object money

869
00:44:56,940 --> 00:45:01,100
being in a state of enough for doing the purchase, right?

870
00:45:02,660 --> 00:45:07,060
Okay, so here's an example of a little bit more complicated.

871
00:45:07,060 --> 00:45:11,740
This is a level zero OPM diagram of a car, of a vehicle.

872
00:45:11,740 --> 00:45:15,660
So you can see in the upper right is sort of a sketch

873
00:45:15,660 --> 00:45:18,860
of a vehicle and it has these different attributes.

874
00:45:18,860 --> 00:45:23,260
ED is engine displacement, height, ground clearance,

875
00:45:23,260 --> 00:45:25,860
overall length, wheel base.

876
00:45:25,900 --> 00:45:28,780
There's a trailer here with a towing capacity.

877
00:45:28,780 --> 00:45:31,540
So the way you would interpret this

878
00:45:31,540 --> 00:45:34,140
is that we have a transporting process.

879
00:45:34,140 --> 00:45:37,740
That's our master sort of the highest level process.

880
00:45:37,740 --> 00:45:40,420
And it changes the attribute location

881
00:45:40,420 --> 00:45:44,460
for driver, passengers, and cargo from A to B, right?

882
00:45:44,460 --> 00:45:46,820
And that's fundamentally where the value is

883
00:45:46,820 --> 00:45:49,340
for the owner of the vehicle.

884
00:45:49,340 --> 00:45:52,060
And then we can zoom in to the transporting process

885
00:45:52,060 --> 00:45:55,980
and look at sub-processes, towing, propelling, and housing.

886
00:45:55,980 --> 00:45:57,780
And if you think about what a vehicle does

887
00:45:57,780 --> 00:46:00,940
at the highest level, right, it protects you,

888
00:46:00,940 --> 00:46:04,540
it houses you, and it propels you, right?

889
00:46:04,540 --> 00:46:07,820
Those are, and then you can break those into more detail.

890
00:46:07,820 --> 00:46:09,140
And then on the left side here,

891
00:46:09,140 --> 00:46:13,180
we have essentially the elements of form.

892
00:46:13,180 --> 00:46:15,380
So the automobile, which is an instrument

893
00:46:15,380 --> 00:46:16,740
of the transporting process,

894
00:46:16,740 --> 00:46:20,140
can be decomposed into its major subsystems,

895
00:46:20,140 --> 00:46:22,780
powertrain, chassis, body, wheels.

896
00:46:22,780 --> 00:46:24,740
And each of those are characterized.

897
00:46:24,740 --> 00:46:26,540
You see those attribute links?

898
00:46:26,540 --> 00:46:31,660
Characterized by things like fuel capacity,

899
00:46:31,660 --> 00:46:33,220
engine displacement.

900
00:46:33,220 --> 00:46:36,580
This is the design domain we talked about last time, right?

901
00:46:36,580 --> 00:46:39,940
Ground clearance, and so those are the design variables.

902
00:46:39,940 --> 00:46:41,820
Those are the parts and assemblies.

903
00:46:41,820 --> 00:46:44,020
And then on the right side, the processes,

904
00:46:44,020 --> 00:46:46,580
the internal processes can also be characterized

905
00:46:46,580 --> 00:46:49,820
by performance or functional attributes,

906
00:46:49,820 --> 00:46:54,540
like towing capacity, fuel economy, acceleration.

907
00:46:54,540 --> 00:46:58,020
PV stands for passenger volume and cargo volume.

908
00:46:58,020 --> 00:46:59,180
And those are things, you know,

909
00:46:59,180 --> 00:47:01,980
when you're comparing different vehicles to purchase,

910
00:47:01,980 --> 00:47:03,060
you know, those are the things

911
00:47:03,060 --> 00:47:05,140
you would compare vehicles against.

912
00:47:05,140 --> 00:47:07,140
So those are the internal functions,

913
00:47:07,140 --> 00:47:09,500
and then the functional attributes.

914
00:47:09,500 --> 00:47:12,980
And then up here, there's the fuel and emissions

915
00:47:12,980 --> 00:47:14,460
and safety-related issues,

916
00:47:14,460 --> 00:47:17,300
which that's often where the governments intervene

917
00:47:17,300 --> 00:47:18,740
and then regulate.

918
00:47:18,740 --> 00:47:22,420
And, you know, this is sort of a highest level OPM

919
00:47:22,420 --> 00:47:23,820
of a vehicle.

920
00:47:23,820 --> 00:47:25,780
And then if you want to see more detail,

921
00:47:25,780 --> 00:47:27,980
you would start drilling down into these.

922
00:47:27,980 --> 00:47:30,180
And you'd have multiple levels of these,

923
00:47:30,180 --> 00:47:31,940
like a higher key of these diagrams.

924
00:47:31,940 --> 00:47:33,260
Yeah.

925
00:47:33,260 --> 00:47:36,300
So here, what is the use of the,

926
00:47:36,300 --> 00:47:40,660
or the meaning of the open arrows in the,

927
00:47:40,660 --> 00:47:42,340
it looks like there's a couple different arrows here

928
00:47:42,340 --> 00:47:44,940
than what we had in the other guy.

929
00:47:44,940 --> 00:47:46,860
Are you talking about these guys?

930
00:47:48,100 --> 00:47:49,060
No.

931
00:47:49,060 --> 00:47:50,780
Oh, these here, yeah.

932
00:47:50,780 --> 00:47:53,340
So they're, it's just a visual,

933
00:47:53,340 --> 00:47:55,260
there's no distinction on the arrows,

934
00:47:55,260 --> 00:47:56,780
whether they're filled in or empty.

935
00:47:56,780 --> 00:47:59,140
That's just a kind of graphical thing.

936
00:47:59,140 --> 00:47:59,980
Yeah.

937
00:48:01,340 --> 00:48:05,420
Okay, so one of the, yes, Veronica,

938
00:48:05,420 --> 00:48:06,500
do you want to push the,

939
00:48:08,260 --> 00:48:10,460
how would you represent a process

940
00:48:10,460 --> 00:48:13,200
that creates kind of a temporary state?

941
00:48:14,460 --> 00:48:15,820
So if you were, if you're saying,

942
00:48:15,820 --> 00:48:17,700
this is acted on an object and this changes

943
00:48:17,700 --> 00:48:18,940
the form of the object,

944
00:48:18,940 --> 00:48:20,620
but the object will ultimately return

945
00:48:20,620 --> 00:48:21,580
to its original state,

946
00:48:21,580 --> 00:48:24,540
kind of absent of a reversing process,

947
00:48:24,540 --> 00:48:27,060
if it's a natural tendency for the object to return.

948
00:48:28,260 --> 00:48:30,500
How would you represent that change?

949
00:48:30,500 --> 00:48:31,580
Would you need to break it down

950
00:48:31,580 --> 00:48:35,060
as a kind of a sub-process within the object or?

951
00:48:35,060 --> 00:48:36,540
Right, so, I mean, and this,

952
00:48:36,540 --> 00:48:38,140
there's sometimes there's multiple,

953
00:48:38,140 --> 00:48:39,340
is there's non-uniqueness

954
00:48:39,340 --> 00:48:41,100
in sort of representing the same thing,

955
00:48:41,100 --> 00:48:43,540
but there's one process that brings you

956
00:48:43,540 --> 00:48:44,980
to the temporary state.

957
00:48:44,980 --> 00:48:45,820
Okay.

958
00:48:45,820 --> 00:48:47,260
And then there would be a restoring process

959
00:48:47,260 --> 00:48:49,380
that restores you back to the original state.

960
00:48:49,380 --> 00:48:52,380
Does the process have to be a separate plan

961
00:48:52,380 --> 00:48:53,820
within the system?

962
00:48:53,820 --> 00:48:55,820
Because there are certain objects, right,

963
00:48:55,820 --> 00:48:56,740
that have a tendency,

964
00:48:56,740 --> 00:48:59,020
I'm thinking primarily kind of a chemical states

965
00:48:59,020 --> 00:49:01,220
where reactions would happen naturally.

966
00:49:01,220 --> 00:49:02,900
And it's kind of a specific thing,

967
00:49:02,900 --> 00:49:04,220
but I was thinking about how you might model

968
00:49:04,220 --> 00:49:05,060
different systems.

969
00:49:05,060 --> 00:49:07,140
And I was thinking about the engine of the car,

970
00:49:07,180 --> 00:49:09,540
just kind of how things might naturally return.

971
00:49:09,540 --> 00:49:12,580
So do you have to describe the process explicitly

972
00:49:12,580 --> 00:49:17,580
if it's not something that's inherently designed in,

973
00:49:17,660 --> 00:49:20,220
if it's kind of a, if it will happen anyway?

974
00:49:21,540 --> 00:49:22,860
I think, I wouldn't,

975
00:49:22,860 --> 00:49:25,180
I wanna say you have to explicitly define that.

976
00:49:25,180 --> 00:49:26,020
Okay.

977
00:49:26,020 --> 00:49:28,860
So if it's a man-made process, so to speak,

978
00:49:28,860 --> 00:49:30,980
then that's a process you want to happen.

979
00:49:30,980 --> 00:49:33,900
And then if the restoring it back to some other state

980
00:49:33,900 --> 00:49:36,620
is a natural process, well, it exists, right?

981
00:49:36,620 --> 00:49:40,380
So it will restore the system to a prior state.

982
00:49:40,380 --> 00:49:42,300
That process would also have to be modeled.

983
00:49:42,300 --> 00:49:44,140
Is there a distinction between how you would indicate

984
00:49:44,140 --> 00:49:45,980
a man-made process or a natural process?

985
00:49:45,980 --> 00:49:47,020
Not fundamentally.

986
00:49:47,020 --> 00:49:47,860
Okay.

987
00:49:47,860 --> 00:49:49,300
And in fact, OPM's been applied

988
00:49:49,300 --> 00:49:51,140
to modeling how a cell functions.

989
00:49:51,140 --> 00:49:53,460
So there's some pretty recent work on,

990
00:49:53,460 --> 00:49:54,860
cells are incredibly,

991
00:49:54,860 --> 00:49:58,180
the biological engineering is just really complex.

992
00:49:58,180 --> 00:50:00,940
So it's some really recent work on describing even,

993
00:50:00,940 --> 00:50:04,820
the RNA and cell division using very much this language.

994
00:50:04,820 --> 00:50:05,660
Okay.

995
00:50:05,660 --> 00:50:08,500
So it doesn't matter whether it's an artificial process

996
00:50:08,500 --> 00:50:09,900
or a natural process.

997
00:50:09,900 --> 00:50:10,740
Thank you.

998
00:50:10,740 --> 00:50:12,060
Okay, let me go a couple more minutes

999
00:50:12,060 --> 00:50:13,340
and then we'll take a short break

1000
00:50:13,340 --> 00:50:16,460
and then we'll talk about SysML and Modellica.

1001
00:50:16,460 --> 00:50:21,460
So the key thing in OPM is there's only one type of diagram

1002
00:50:21,500 --> 00:50:24,820
and there's also natural language that gets auto-generated.

1003
00:50:24,820 --> 00:50:27,120
And I'll show you this very quickly in the tool.

1004
00:50:27,120 --> 00:50:30,780
So as you can imagine, as you're working on real systems,

1005
00:50:30,780 --> 00:50:33,580
you know, these diagrams, if you showed them on one,

1006
00:50:33,580 --> 00:50:36,740
one sort of level, you'd have thousands of objects

1007
00:50:36,740 --> 00:50:38,820
and links, it would be a mess, right?

1008
00:50:38,820 --> 00:50:41,020
So how does OPM handle complexity?

1009
00:50:41,020 --> 00:50:43,060
There's three fundamental mechanisms.

1010
00:50:43,060 --> 00:50:45,860
One is known as folding and unfolding.

1011
00:50:45,860 --> 00:50:46,780
What does that mean?

1012
00:50:46,780 --> 00:50:50,980
It's basically related to the structure.

1013
00:50:50,980 --> 00:50:54,620
So folding, unfolding means that higher level objects,

1014
00:50:54,620 --> 00:50:57,100
you can show the decomposition of the objects

1015
00:50:57,100 --> 00:50:58,320
or you can hide it.

1016
00:50:58,320 --> 00:51:00,580
That's known as folding and unfolding.

1017
00:51:00,580 --> 00:51:04,780
Then the second one is called in-zooming or out-zooming.

1018
00:51:04,780 --> 00:51:07,060
And so here's an example of a,

1019
00:51:07,060 --> 00:51:10,780
here's a process and an instrument and an affectee,

1020
00:51:10,780 --> 00:51:12,420
right, that's affected by the process.

1021
00:51:12,420 --> 00:51:16,880
I wanna know what are the sub-processes in that process?

1022
00:51:16,880 --> 00:51:18,980
So you can zoom into this process

1023
00:51:18,980 --> 00:51:22,040
and it will expose the sub-processes

1024
00:51:22,040 --> 00:51:23,540
that are happening inside.

1025
00:51:23,540 --> 00:51:24,860
That's known as in-zooming

1026
00:51:24,860 --> 00:51:27,540
and then going back the other way is called out-zooming.

1027
00:51:28,580 --> 00:51:30,380
And then the third one I've already mentioned,

1028
00:51:30,380 --> 00:51:34,580
which is that states can be expressed or suppressed

1029
00:51:34,580 --> 00:51:37,040
or hidden depending on your interest

1030
00:51:37,040 --> 00:51:39,380
in what states of the system you wanna look at.

1031
00:51:40,940 --> 00:51:44,500
So here's the sort of level zero OPM of our refrigerator.

1032
00:51:44,500 --> 00:51:46,940
I said that was kind of our case study.

1033
00:51:46,940 --> 00:51:51,300
So how does the refrigerator work at the sort of level zero

1034
00:51:51,300 --> 00:51:54,620
is that's what the stakeholder with the customer sees.

1035
00:51:54,620 --> 00:51:56,940
Don't care about the details of what's happening

1036
00:51:56,940 --> 00:51:58,660
in the refrigerator.

1037
00:51:58,660 --> 00:52:03,660
So we have food and we'll get back to this I think next week

1038
00:52:03,820 --> 00:52:06,900
in the kind of creativity concept generation.

1039
00:52:06,900 --> 00:52:09,200
Why do we have refrigerators fundamentally?

1040
00:52:10,620 --> 00:52:14,220
If you've heard this before, you keep quiet.

1041
00:52:14,220 --> 00:52:17,580
Maybe EPFL, why do we have refrigerators?

1042
00:52:22,340 --> 00:52:23,340
Any ideas?

1043
00:52:27,220 --> 00:52:28,060
Go ahead.

1044
00:52:28,900 --> 00:52:30,180
Keep food cold.

1045
00:52:30,180 --> 00:52:33,980
Yeah, well, if you're a beer drinker,

1046
00:52:33,980 --> 00:52:36,300
you want cold beer, right?

1047
00:52:36,300 --> 00:52:39,060
But if you really think about it deeply,

1048
00:52:39,060 --> 00:52:41,540
that's not really the primary reason, right?

1049
00:52:41,540 --> 00:52:44,740
The primary reason is this state change,

1050
00:52:44,740 --> 00:52:46,500
their shelf life, right?

1051
00:52:46,500 --> 00:52:48,860
So the primary reason why you have refrigerators

1052
00:52:48,860 --> 00:52:53,100
is to extend the shelf life of the food, right?

1053
00:52:53,100 --> 00:52:57,460
So speaking as a systems architect, system engineer,

1054
00:52:57,460 --> 00:53:02,460
a refrigerator is a food spoilage rate reduction device.

1055
00:53:03,860 --> 00:53:04,860
You see that?

1056
00:53:04,860 --> 00:53:08,420
So the attribute of the food is the shelf life

1057
00:53:08,420 --> 00:53:11,100
and we're gonna extend the shelf life of the food.

1058
00:53:11,100 --> 00:53:14,340
That is, if you think about it sort of architecturally,

1059
00:53:14,340 --> 00:53:15,740
that's why we have refrigerators.

1060
00:53:15,740 --> 00:53:19,220
But I agree with you on the cold beer, right?

1061
00:53:19,220 --> 00:53:21,960
We all agree we want cold beer, not warm beer.

1062
00:53:21,960 --> 00:53:24,740
So you're right, you're right too.

1063
00:53:24,740 --> 00:53:27,240
So the refrigerator essentially is an instrument

1064
00:53:27,240 --> 00:53:30,040
of extending the food shelf life.

1065
00:53:30,040 --> 00:53:32,520
So the food is the operand.

1066
00:53:32,520 --> 00:53:34,320
The food is the operand.

1067
00:53:34,320 --> 00:53:36,520
The extending of shelf life is what we call

1068
00:53:36,520 --> 00:53:38,960
the primary value delivering process.

1069
00:53:38,960 --> 00:53:40,620
That's where the value is.

1070
00:53:40,620 --> 00:53:44,320
The refrigerator itself is the product system.

1071
00:53:44,320 --> 00:53:48,460
And then the operator sets the thermostat setting

1072
00:53:48,460 --> 00:53:51,160
at which temperature the refrigerator should be.

1073
00:53:51,160 --> 00:53:53,920
And then here we have the primary operating process,

1074
00:53:53,960 --> 00:53:57,800
which is what allows us to keep the temperature

1075
00:53:57,800 --> 00:53:59,720
of the food at that level.

1076
00:53:59,720 --> 00:54:02,480
And in order to do this, we consume electrical power,

1077
00:54:02,480 --> 00:54:05,800
we produce waste heat, and we also require

1078
00:54:05,800 --> 00:54:09,160
or we convect that waste heat to the exterior air

1079
00:54:09,160 --> 00:54:10,620
at a certain temperature.

1080
00:54:11,600 --> 00:54:14,800
How well do refrigerators work in a vacuum chamber?

1081
00:54:19,920 --> 00:54:21,640
They don't, right?

1082
00:54:21,640 --> 00:54:22,480
They don't.

1083
00:54:23,120 --> 00:54:25,920
Well, I guess you could radiate the heat a little bit,

1084
00:54:25,920 --> 00:54:28,160
but they're not gonna work very well.

1085
00:54:28,160 --> 00:54:29,760
You're not gonna have conduction, right?

1086
00:54:29,760 --> 00:54:32,200
Because you're sort of in the middle of the vacuum chamber.

1087
00:54:32,200 --> 00:54:33,520
You're not gonna have convection,

1088
00:54:33,520 --> 00:54:34,720
so you only have radiation,

1089
00:54:34,720 --> 00:54:36,920
and it's not gonna work very well.

1090
00:54:36,920 --> 00:54:40,320
So the exterior air is important

1091
00:54:40,320 --> 00:54:42,320
for the refrigerator to work.

1092
00:54:42,320 --> 00:54:45,600
So then you say, well, okay, that's fine, I buy that.

1093
00:54:45,600 --> 00:54:48,500
But now I wanna really know, how does it really work?

1094
00:54:48,500 --> 00:54:51,840
So you say operating, the refrigerator is operating,

1095
00:54:51,840 --> 00:54:56,720
but I wanna do in-zooming and understand how is it operating?

1096
00:54:56,720 --> 00:54:58,840
So what's the key to refrigeration?

1097
00:55:00,080 --> 00:55:02,940
What's the magic word there, or two magic words?

1098
00:55:07,640 --> 00:55:08,920
Yep, that's part of it.

1099
00:55:08,920 --> 00:55:11,720
That's just a sliver of it.

1100
00:55:11,720 --> 00:55:13,240
Heat exchange is part of it.

1101
00:55:13,240 --> 00:55:17,560
So the magic word is carno cycle, right?

1102
00:55:17,560 --> 00:55:20,680
So here's a little graphic that sort of gets into it.

1103
00:55:20,680 --> 00:55:25,520
So the carno cycle is actually a thermodynamic concept, right?

1104
00:55:25,520 --> 00:55:30,040
Where you're compressing essentially a refrigerant,

1105
00:55:30,040 --> 00:55:32,800
you're a coolant is being compressed,

1106
00:55:32,800 --> 00:55:35,920
absorbs the heat from the inside,

1107
00:55:35,920 --> 00:55:39,480
and then expands and condenses and radiates that,

1108
00:55:39,480 --> 00:55:42,400
or convects that heat to the outside.

1109
00:55:42,400 --> 00:55:44,240
So here's a, I don't know if you remember

1110
00:55:44,240 --> 00:55:45,720
your thermodynamics, right?

1111
00:55:45,720 --> 00:55:48,240
This is a classic PV diagram.

1112
00:55:48,240 --> 00:55:50,760
You've got the four legs of the carno cycle,

1113
00:55:50,760 --> 00:55:52,720
and actually what's really nice here,

1114
00:55:52,720 --> 00:55:55,340
so we're going through this counterclockwise,

1115
00:55:55,340 --> 00:55:59,080
what's really nice about it is that every leg of the carno

1116
00:55:59,080 --> 00:56:01,960
cycle is one of our processes, right?

1117
00:56:01,960 --> 00:56:06,200
So compressing is this leg here from D to B,

1118
00:56:06,200 --> 00:56:10,000
condensing is from B to A, expanding from A to E,

1119
00:56:10,000 --> 00:56:12,720
and then evaporation happens from E to D.

1120
00:56:12,760 --> 00:56:17,960
So the carno cycle can be decomposed

1121
00:56:17,960 --> 00:56:20,640
into four sub-processes, right?

1122
00:56:20,640 --> 00:56:23,880
These are the internal processes in the system

1123
00:56:23,880 --> 00:56:26,200
that are governed by physics.

1124
00:56:26,200 --> 00:56:29,120
So if we take that operating process

1125
00:56:29,120 --> 00:56:31,400
that we looked at before, we can actually

1126
00:56:31,400 --> 00:56:35,400
zoom in and see the sub-processes emerging.

1127
00:56:35,400 --> 00:56:38,720
And so in cooling, we have those four expanding,

1128
00:56:38,720 --> 00:56:40,920
evaporating, compressing, condensing,

1129
00:56:40,920 --> 00:56:43,000
but I'm adding the absorbing process,

1130
00:56:43,000 --> 00:56:44,320
which is that the heat then needs

1131
00:56:44,320 --> 00:56:47,400
to be absorbed by the exterior air.

1132
00:56:47,400 --> 00:56:48,800
We have to power the device.

1133
00:56:48,800 --> 00:56:51,720
You can decompose that into grounding, protecting,

1134
00:56:51,720 --> 00:56:55,840
supplying, regulation, keeping it at the set point.

1135
00:56:55,840 --> 00:56:59,760
You can decompose that process into sensing, switching,

1136
00:56:59,760 --> 00:57:02,040
and setting the set point.

1137
00:57:02,040 --> 00:57:03,520
And then we have supporting, which

1138
00:57:03,520 --> 00:57:07,000
is we need to be open and closing the refrigerator,

1139
00:57:07,000 --> 00:57:09,640
retaining it, and then connecting all the pieces.

1140
00:57:10,160 --> 00:57:14,120
At level minus 1, we had one process at level 0,

1141
00:57:14,120 --> 00:57:15,480
which was operating.

1142
00:57:15,480 --> 00:57:17,640
The refrigerator is operating.

1143
00:57:17,640 --> 00:57:20,160
And then as we zoom in to level minus 1,

1144
00:57:20,160 --> 00:57:23,440
four processes appear, powering, regulating, cooling,

1145
00:57:23,440 --> 00:57:24,560
and supporting.

1146
00:57:24,560 --> 00:57:28,880
And then at level minus 2, we have 15 sub-processes.

1147
00:57:28,880 --> 00:57:33,720
So this is a view at level minus 1,

1148
00:57:33,720 --> 00:57:37,160
our four sub-processes, cooling, powering, regulating,

1149
00:57:37,160 --> 00:57:40,840
supporting, and then we can zoom in more.

1150
00:57:40,840 --> 00:57:43,760
So here's the general idea, and we've

1151
00:57:43,760 --> 00:57:45,880
looked at many systems over the years,

1152
00:57:45,880 --> 00:57:49,880
that most cyber-physical systems, or it says

1153
00:57:49,880 --> 00:57:52,880
optomechanical here, but I really mean it more generally,

1154
00:57:52,880 --> 00:57:55,680
have this kind of OPM structure.

1155
00:57:55,680 --> 00:57:58,120
On the right side, we have the output

1156
00:57:58,120 --> 00:58:00,880
that the customer, the stakeholder, cares about,

1157
00:58:00,880 --> 00:58:02,040
the operand.

1158
00:58:02,040 --> 00:58:04,800
We have a set of specialized processes,

1159
00:58:04,800 --> 00:58:07,600
and these can be often organized in a cascade.

1160
00:58:07,600 --> 00:58:09,240
And then we have supporting processes,

1161
00:58:09,240 --> 00:58:11,880
like powering, connecting, controlling,

1162
00:58:11,880 --> 00:58:15,920
that provide support for the specialized processes.

1163
00:58:15,920 --> 00:58:22,800
Most systems that we've seen have this generic architecture.

1164
00:58:22,800 --> 00:58:24,760
How do you generate an OPM?

1165
00:58:24,760 --> 00:58:27,040
Fundamentally, you can do a top-down.

1166
00:58:27,040 --> 00:58:29,200
So you start with your stakeholders.

1167
00:58:29,200 --> 00:58:31,600
That's what we did in the first lecture.

1168
00:58:31,600 --> 00:58:33,960
Where's the value?

1169
00:58:33,960 --> 00:58:37,200
You start thinking about requirements, what functions,

1170
00:58:37,200 --> 00:58:40,040
how well the functions should be performed,

1171
00:58:40,040 --> 00:58:41,560
and you sort of go down.

1172
00:58:41,560 --> 00:58:44,000
Or if you already have a system, you can actually

1173
00:58:44,000 --> 00:58:46,000
reverse engineer that system.

1174
00:58:46,000 --> 00:58:51,320
And from bottom up, we started doing for the Mr. Sticky,

1175
00:58:51,320 --> 00:58:54,880
and that's fundamentally reverse engineering.

1176
00:58:54,880 --> 00:58:59,320
So just for time, I'm going to skip this demo.

1177
00:58:59,320 --> 00:59:01,600
But what I will do is I will post a video.

1178
00:59:01,600 --> 00:59:04,520
I'm going to make a little video with the OpCat demo

1179
00:59:04,520 --> 00:59:08,000
and post that to Stellar, so you can sort of watch that.

1180
00:59:08,000 --> 00:59:11,720
So this is one of the, it's still not super mature,

1181
00:59:11,720 --> 00:59:14,720
but it's a Java-based program called OpCat

1182
00:59:14,720 --> 00:59:21,400
that allows you to generate object process diagrams

1183
00:59:21,400 --> 00:59:23,200
in its computer-supported environment

1184
00:59:23,200 --> 00:59:27,120
and store them in an XML format and so forth.

1185
00:59:27,120 --> 00:59:29,040
It allows you to create a hierarchy.

1186
00:59:29,040 --> 00:59:30,680
And the other thing that's very cool,

1187
00:59:30,680 --> 00:59:32,800
it auto-generates text.

1188
00:59:32,800 --> 00:59:36,760
So the text is called OPL, Object Process Language.

1189
00:59:36,760 --> 00:59:40,080
And right now, you can go from the graphics to the text,

1190
00:59:40,080 --> 00:59:41,800
but you can't go the other way.

1191
00:59:41,800 --> 00:59:44,280
And so there are complete sentences.

1192
00:59:44,280 --> 00:59:47,200
It's not like an exciting novel when you read it,

1193
00:59:47,200 --> 00:59:50,480
but it is semantically precise.

1194
00:59:50,480 --> 00:59:53,960
So we're going to switch to SysML.

1195
00:59:53,960 --> 00:59:55,800
We're going to take a very short break.

1196
00:59:55,800 --> 00:59:58,120
Are there any questions about OPM?

1197
00:59:58,120 --> 00:59:59,640
In the system architecture class,

1198
00:59:59,640 --> 01:00:02,960
we spend like five, six lectures on OPM,

1199
01:00:02,960 --> 01:00:05,280
and you get to do detailed exercises.

1200
01:00:05,280 --> 01:00:07,680
We kind of don't have time for this in this class,

1201
01:00:07,680 --> 01:00:10,040
but hopefully you've seen what it is.

1202
01:00:10,040 --> 01:00:13,360
And if, you know, I've wetted your appetite for OPM,

1203
01:00:13,360 --> 01:00:16,200
then the goal's been met.

1204
01:00:16,200 --> 01:00:17,640
Any questions about OPM?

1205
01:00:21,000 --> 01:00:22,960
Is it pretty clear?

1206
01:00:22,960 --> 01:00:25,720
All right, so let's take, yes?

1207
01:00:26,160 --> 01:00:28,680
Compared to Modellica, because I've

1208
01:00:28,680 --> 01:00:31,960
seen one of the links that this OPM is just

1209
01:00:31,960 --> 01:00:33,480
for describing the system there.

1210
01:00:33,480 --> 01:00:37,160
It's not for making calculations or simulations.

1211
01:00:37,160 --> 01:00:38,280
That's correct.

1212
01:00:38,280 --> 01:00:40,400
There are the latest versions of OPM.

1213
01:00:40,400 --> 01:00:42,640
You can do like a logical simulation.

1214
01:00:42,640 --> 01:00:46,120
So you can say, OK, this process enables and does this thing.

1215
01:00:46,120 --> 01:00:47,960
So it's kind of a discrete logical,

1216
01:00:47,960 --> 01:00:52,080
but usually it's not used for any mathematical calculations.

1217
01:00:52,080 --> 01:00:54,520
It's really the purpose of OPM is really

1218
01:00:54,520 --> 01:00:58,200
to support conceptual design, early conceptual design.

1219
01:00:58,200 --> 01:00:58,720
That's correct.

1220
01:01:02,440 --> 01:01:04,120
OK, Mark.

1221
01:01:04,120 --> 01:01:07,560
So just a couple words about Mark.

1222
01:01:07,560 --> 01:01:10,800
He's a doctoral student right now in the space systems lab.

1223
01:01:10,800 --> 01:01:15,280
He's been working a lot on an instrument called Rexis.

1224
01:01:15,280 --> 01:01:18,600
I guess you're the chief system engineer, right, for Rexis.

1225
01:01:18,600 --> 01:01:21,360
And that was also the topic of his master's thesis.

1226
01:01:21,400 --> 01:01:24,880
So Mark really knows what he's talking about.

1227
01:01:24,880 --> 01:01:27,160
He knows SysML quite well.

1228
01:01:27,160 --> 01:01:29,080
And thanks for doing this.

1229
01:01:29,080 --> 01:01:32,080
OK, so let me start by giving kind of a high level overview

1230
01:01:32,080 --> 01:01:34,440
of what SysML is and what it aims to do.

1231
01:01:34,440 --> 01:01:36,160
So it's similar to OPM, but there

1232
01:01:36,160 --> 01:01:39,200
are a couple important differences.

1233
01:01:39,200 --> 01:01:42,400
SysML, as Ollie said, it kind of is an extension

1234
01:01:42,400 --> 01:01:44,800
or inherits a lot from UML.

1235
01:01:44,800 --> 01:01:48,560
And its aim is to really provide a language that

1236
01:01:48,560 --> 01:01:52,200
enables you to capture all the different aspects of information

1237
01:01:52,200 --> 01:01:54,280
about a system in one place.

1238
01:01:54,280 --> 01:01:56,720
And this concept of single source of truth

1239
01:01:56,720 --> 01:01:58,440
is something that I'll kind of try and emphasize

1240
01:01:58,440 --> 01:01:59,680
through my presentation.

1241
01:01:59,680 --> 01:02:03,200
The idea is if all your information is in this one model,

1242
01:02:03,200 --> 01:02:05,800
then communication is easy.

1243
01:02:05,800 --> 01:02:08,680
There's no ambiguity between versions.

1244
01:02:08,680 --> 01:02:10,840
Everyone knows where to go to get the most up to date

1245
01:02:10,840 --> 01:02:13,080
and correct piece of information.

1246
01:02:13,080 --> 01:02:17,160
So that's one of the emphases of SysML.

1247
01:02:17,200 --> 01:02:20,480
SysML is a graphical language similar to OPM.

1248
01:02:20,480 --> 01:02:22,320
It's defined in terms of diagram types

1249
01:02:22,320 --> 01:02:25,120
that I'll go into in a second and has more than just one diagram

1250
01:02:25,120 --> 01:02:27,040
type as compared to OPM.

1251
01:02:27,040 --> 01:02:28,480
But basically, it aims to do things

1252
01:02:28,480 --> 01:02:31,240
like capture functional behavioral models,

1253
01:02:31,240 --> 01:02:33,160
capture performance models, capture

1254
01:02:33,160 --> 01:02:35,840
the structural topology of your system, the parts of your system,

1255
01:02:35,840 --> 01:02:37,760
and how they're all interconnected.

1256
01:02:37,760 --> 01:02:39,480
And any other engineering analysis model

1257
01:02:39,480 --> 01:02:41,680
is one of the big emphases with SysML

1258
01:02:41,680 --> 01:02:44,160
is integration with external analysis tools.

1259
01:02:44,160 --> 01:02:47,960
So if you have a thermal tool, a structural tool,

1260
01:02:47,960 --> 01:02:49,680
electronics tool, something like that,

1261
01:02:49,680 --> 01:02:52,560
integrating this informational, descriptional model

1262
01:02:52,560 --> 01:02:55,720
with that analysis model and enabling,

1263
01:02:55,720 --> 01:02:58,240
making it easy to transfer information

1264
01:02:58,240 --> 01:03:00,520
from your descriptive model to your analysis model,

1265
01:03:00,520 --> 01:03:02,400
do an analysis, and then incorporate those results

1266
01:03:02,400 --> 01:03:05,680
back into your descriptive model is one of the things

1267
01:03:05,680 --> 01:03:07,320
that SysML really is all about.

1268
01:03:07,320 --> 01:03:09,560
And another thing, another difference compared to SysML

1269
01:03:09,560 --> 01:03:13,120
from OPM is it incorporates requirements pretty explicitly.

1270
01:03:13,120 --> 01:03:14,400
And that's one of the other areas

1271
01:03:14,400 --> 01:03:15,840
that people are really interested in

1272
01:03:15,840 --> 01:03:18,000
is if you have good modeling of requirements,

1273
01:03:18,000 --> 01:03:20,320
what sort of information can you glean about your system

1274
01:03:20,320 --> 01:03:23,080
that you couldn't otherwise?

1275
01:03:23,080 --> 01:03:24,160
How do I advance this slide?

1276
01:03:27,160 --> 01:03:28,120
Oh, there we go.

1277
01:03:28,120 --> 01:03:29,440
OK.

1278
01:03:29,440 --> 01:03:32,440
So as I said, SysML is composed of diagrams.

1279
01:03:32,440 --> 01:03:34,840
I'll go into in a second what each diagram, what

1280
01:03:34,840 --> 01:03:37,160
all the diagram types are and what their intent is.

1281
01:03:37,160 --> 01:03:39,480
But here's kind of a high-level overview.

1282
01:03:39,480 --> 01:03:41,040
It might be a little bit difficult to read.

1283
01:03:41,040 --> 01:03:42,600
So at the top, you have a system model.

1284
01:03:42,600 --> 01:03:45,360
You have requirements diagrams, behavior, structure,

1285
01:03:45,360 --> 01:03:46,880
and parametrics.

1286
01:03:46,880 --> 01:03:48,160
Within requirements, there's actually

1287
01:03:48,160 --> 01:03:50,280
a specific requirements diagram that's

1288
01:03:50,280 --> 01:03:52,720
supposed to represent the relationship between requirements

1289
01:03:52,720 --> 01:03:53,240
in your system.

1290
01:03:53,240 --> 01:03:55,080
I'll show you an example of that.

1291
01:03:55,080 --> 01:03:58,320
In behavior, there are diagrams that describe

1292
01:03:58,320 --> 01:04:00,000
kind of the activity of your system,

1293
01:04:00,000 --> 01:04:02,560
the sequence of events that may happen.

1294
01:04:02,560 --> 01:04:04,000
There's a state machine diagram.

1295
01:04:04,000 --> 01:04:05,840
If you want to model your system as a states

1296
01:04:05,840 --> 01:04:08,920
and transition between those states, things like that.

1297
01:04:08,920 --> 01:04:11,200
In the structure, there's diagrams

1298
01:04:11,200 --> 01:04:13,240
that go over the decomposition of your system, what

1299
01:04:13,240 --> 01:04:15,880
is your system, and what parts make up your system,

1300
01:04:15,880 --> 01:04:19,720
both the logical decomposition and the physical decomposition.

1301
01:04:19,720 --> 01:04:22,120
And then there's a topology, how are they all connected,

1302
01:04:22,120 --> 01:04:25,000
where the interfaces, where the characteristics of the interfaces,

1303
01:04:25,000 --> 01:04:26,200
things like that.

1304
01:04:26,200 --> 01:04:31,120
And then parametrics, which is kind of adding constraints

1305
01:04:31,120 --> 01:04:34,200
and numbers to all these things, whether they be logical constraints,

1306
01:04:34,200 --> 01:04:36,160
mathematical constraints, things like that.

1307
01:04:36,160 --> 01:04:39,960
Similar to OPM, SysML has no built-in analysis capability,

1308
01:04:40,000 --> 01:04:45,280
so you can't run a model or calculate an equation in SysML.

1309
01:04:45,280 --> 01:04:46,400
You can't really do that.

1310
01:04:46,400 --> 01:04:54,480
But very frequently, the tools that implement SysML that I'll show you

1311
01:04:54,480 --> 01:04:57,240
have that kind of analysis capability built into the tool

1312
01:04:57,240 --> 01:04:58,480
as opposed to the language.

1313
01:04:58,480 --> 01:05:02,880
So you can do things like use a parametric diagram

1314
01:05:02,880 --> 01:05:05,720
with a bunch of equations to create a system of equations

1315
01:05:05,720 --> 01:05:08,360
that you then can solve, whether it be in the tool,

1316
01:05:08,360 --> 01:05:10,440
or you can move it to an external tool like Mathematica

1317
01:05:10,440 --> 01:05:12,720
or something, solve it, and then bring that information back

1318
01:05:12,720 --> 01:05:15,040
into your system.

1319
01:05:15,040 --> 01:05:19,920
You also can do kind of sequence-based computation

1320
01:05:19,920 --> 01:05:23,080
if you have a activity diagram that says, first, you

1321
01:05:23,080 --> 01:05:24,560
have to build this part of your system

1322
01:05:24,560 --> 01:05:25,760
and then this part of your system.

1323
01:05:25,760 --> 01:05:27,760
There's things in sequence, things in parallel.

1324
01:05:27,760 --> 01:05:31,000
You can run simulations like that, where it's all about,

1325
01:05:31,000 --> 01:05:34,160
have you done everything you need to do to get to the next step,

1326
01:05:34,160 --> 01:05:35,840
things in a more logical flow as opposed

1327
01:05:35,840 --> 01:05:37,480
to actually mathematical equations.

1328
01:05:37,480 --> 01:05:39,360
You can do those sorts of computations as well.

1329
01:05:41,800 --> 01:05:44,280
One note is that these diagrams, although they

1330
01:05:44,280 --> 01:05:46,080
are the main way to define your system

1331
01:05:46,080 --> 01:05:50,000
and interface with the model, are not the model themselves.

1332
01:05:50,000 --> 01:05:53,080
So you can create links between diagrams

1333
01:05:53,080 --> 01:05:55,560
if an element shows up in one diagram

1334
01:05:55,560 --> 01:05:58,240
and that element shows up in another diagram.

1335
01:05:58,240 --> 01:05:59,440
That's the same element.

1336
01:05:59,440 --> 01:06:00,800
If you make changes in one diagram,

1337
01:06:00,800 --> 01:06:02,720
that's going to propagate to all your diagrams.

1338
01:06:02,720 --> 01:06:05,000
So there's kind of a database back into this whole,

1339
01:06:05,000 --> 01:06:07,760
into the model that encompasses all the information.

1340
01:06:07,760 --> 01:06:10,320
So instead of having a bunch of isolated block diagrams,

1341
01:06:10,320 --> 01:06:12,760
they're really just views into this model that's

1342
01:06:12,760 --> 01:06:14,080
hidden in a back-end database.

1343
01:06:19,840 --> 01:06:23,440
OK, so I'll talk a little bit about the applications of ZISMO.

1344
01:06:23,440 --> 01:06:24,800
First is requirements engineering.

1345
01:06:24,800 --> 01:06:26,560
As I said, when you can explicitly model

1346
01:06:26,560 --> 01:06:28,600
requirements in the relationship between requirements

1347
01:06:28,600 --> 01:06:31,200
in your system, you can do a lot more.

1348
01:06:31,200 --> 01:06:32,840
The way that it's typically done nowadays

1349
01:06:32,840 --> 01:06:34,880
is with tons of documents.

1350
01:06:34,880 --> 01:06:36,680
I'm not sure if you've ever actually developed a system,

1351
01:06:36,680 --> 01:06:39,200
but there's an ungodly amount of documents.

1352
01:06:39,200 --> 01:06:41,200
I've experienced that firsthand.

1353
01:06:41,200 --> 01:06:42,480
It's a real pain.

1354
01:06:42,480 --> 01:06:44,600
There are tools like DOORS that will enable you to link

1355
01:06:44,600 --> 01:06:46,200
requirements to other requirements and things

1356
01:06:46,200 --> 01:06:48,440
like that that help you manage your requirements.

1357
01:06:48,440 --> 01:06:50,280
But what if you had a really explicit tie

1358
01:06:50,280 --> 01:06:52,040
between your requirements and your system?

1359
01:06:52,040 --> 01:06:53,440
You can actually represent in ZISMO,

1360
01:06:53,440 --> 01:06:55,120
and I'll show you a little bit about this.

1361
01:06:55,120 --> 01:06:57,840
You can represent in ZISMO a textual requirement.

1362
01:06:57,840 --> 01:07:00,560
The mass of your system must be less than five kilograms

1363
01:07:00,560 --> 01:07:01,560
or something like that.

1364
01:07:01,560 --> 01:07:03,840
You can tie that requirement directly to the mass property

1365
01:07:03,840 --> 01:07:04,800
of your system.

1366
01:07:04,800 --> 01:07:08,280
You can kind of envision you can start building constraints.

1367
01:07:08,280 --> 01:07:10,120
Requirements aren't just textual statements.

1368
01:07:10,120 --> 01:07:12,120
They're actually constraints upon properties of your system.

1369
01:07:12,120 --> 01:07:15,400
Those are the types of things you can start to do with ZISMO.

1370
01:07:15,400 --> 01:07:16,520
You have a question?

1371
01:07:16,520 --> 01:07:28,880
Yeah, so that isn't something that's built into the language,

1372
01:07:28,880 --> 01:07:31,600
but that is something you can do with basically there's

1373
01:07:31,600 --> 01:07:35,280
a whole API, and you can interface with the model.

1374
01:07:35,280 --> 01:07:37,160
I'll show you this, actually, in my demo.

1375
01:07:37,160 --> 01:07:39,560
But you can build in rules and constraints that say,

1376
01:07:39,560 --> 01:07:42,120
check, for example, that all my requirements, at least,

1377
01:07:42,120 --> 01:07:43,840
have they been defined are satisfied.

1378
01:07:43,840 --> 01:07:45,240
You can run that check, and it will tell you

1379
01:07:45,240 --> 01:07:46,520
have they been satisfied or not.

1380
01:07:46,520 --> 01:07:47,880
And that's something that's really powerful

1381
01:07:47,880 --> 01:07:51,240
that you can't really do with existing kind of techniques.

1382
01:07:51,240 --> 01:07:52,240
Yeah.

1383
01:07:52,240 --> 01:07:53,480
Thank you.

1384
01:07:53,480 --> 01:07:56,600
And can you also, let's say, for example, requirement

1385
01:07:56,600 --> 01:07:59,200
changes, like the mass of your system

1386
01:07:59,200 --> 01:08:01,480
has to be this much as opposed to this much,

1387
01:08:01,480 --> 01:08:04,560
then would it go through and check until you have to now look

1388
01:08:04,560 --> 01:08:08,120
at this, this, and this, and then that effect?

1389
01:08:08,120 --> 01:08:10,280
So you're getting down in the weeds.

1390
01:08:10,280 --> 01:08:13,520
That's something that'd be awesome if you could do, right?

1391
01:08:13,520 --> 01:08:15,040
That really, again, that's not something

1392
01:08:15,040 --> 01:08:17,200
that SysML enables you to do natively,

1393
01:08:17,200 --> 01:08:19,440
but it gives you the language and the syntax

1394
01:08:19,440 --> 01:08:21,720
to be able to write queries that give you

1395
01:08:21,720 --> 01:08:22,520
that type of information.

1396
01:08:22,520 --> 01:08:24,720
That's kind of where the cutting edge is right now is,

1397
01:08:24,720 --> 01:08:25,560
can we do that?

1398
01:08:25,560 --> 01:08:27,560
Can we get that type of information from a system

1399
01:08:27,560 --> 01:08:28,200
and model?

1400
01:08:28,200 --> 01:08:30,600
That's something I'm really interested in for my PhD thesis.

1401
01:08:30,640 --> 01:08:33,000
So yeah, that's something that I think is possible

1402
01:08:33,000 --> 01:08:34,920
and would be really great to have in the development

1403
01:08:34,920 --> 01:08:35,760
process of a system.

1404
01:08:38,800 --> 01:08:40,800
So the next bullet here is on system description.

1405
01:08:40,800 --> 01:08:43,000
So actually, one of the fundamental questions

1406
01:08:43,000 --> 01:08:46,080
is, how do you describe a domain-specific system

1407
01:08:46,080 --> 01:08:47,360
within SysML?

1408
01:08:47,360 --> 01:08:50,000
I'll show you that SysML has a pretty strong notion

1409
01:08:50,000 --> 01:08:51,920
of inheritance in classes and things like that.

1410
01:08:51,920 --> 01:08:53,560
It's obviously oriented.

1411
01:08:53,560 --> 01:08:56,680
And so one of the questions is, I'm in the space system,

1412
01:08:56,680 --> 01:08:59,320
so how do you describe a spacecraft in SysML?

1413
01:08:59,320 --> 01:09:02,360
SysML is very general, but how do you actually represent,

1414
01:09:02,360 --> 01:09:04,880
for example, a C and D H system in SysML?

1415
01:09:04,880 --> 01:09:09,680
What are the types of attributes that are typically found?

1416
01:09:09,680 --> 01:09:10,920
How do you represent that?

1417
01:09:10,920 --> 01:09:12,880
How does it interface with other parts of your system?

1418
01:09:12,880 --> 01:09:15,240
Those type of questions, that's another active area

1419
01:09:15,240 --> 01:09:17,440
of research, domain-specific modeling.

1420
01:09:17,440 --> 01:09:19,920
And then finally, as I said, integration

1421
01:09:19,920 --> 01:09:21,200
with external analysis tools.

1422
01:09:21,200 --> 01:09:23,200
So there's quite a lot of papers in the literature

1423
01:09:23,200 --> 01:09:28,560
about going from a SysML model to MATLAB, to SDK,

1424
01:09:28,560 --> 01:09:31,200
to thermal desktop.

1425
01:09:31,200 --> 01:09:33,960
External modeling tools, taking that information out

1426
01:09:33,960 --> 01:09:36,960
of the model, doing an analysis, putting it back in the model.

1427
01:09:36,960 --> 01:09:39,080
And actually, I think Nara's going

1428
01:09:39,080 --> 01:09:42,840
to talk about Simscape, which is a kind of analysis tool,

1429
01:09:42,840 --> 01:09:43,960
external analysis tool.

1430
01:09:43,960 --> 01:09:45,720
And there's actually been papers written on how do you take

1431
01:09:45,720 --> 01:09:48,600
SysML information from a SysML model, pull it into Simscape,

1432
01:09:48,600 --> 01:09:50,280
process it, and put it back in the model.

1433
01:09:53,920 --> 01:09:56,680
OK, so let's talk about the diagrams.

1434
01:09:56,720 --> 01:09:59,280
There are nine types of diagrams in SysML.

1435
01:09:59,280 --> 01:10:01,280
And I'll try and just give you a brief explanation

1436
01:10:01,280 --> 01:10:01,840
of what they do.

1437
01:10:01,840 --> 01:10:03,360
I won't go into the syntax for all of them,

1438
01:10:03,360 --> 01:10:05,200
because there's quite a bit of detail in the syntax.

1439
01:10:05,200 --> 01:10:07,960
But I'll show you some examples of a couple of them.

1440
01:10:07,960 --> 01:10:09,120
So I'll go from left to right.

1441
01:10:09,120 --> 01:10:12,400
So there's two main classes, behavior and structure,

1442
01:10:12,400 --> 01:10:14,040
similar to OPM.

1443
01:10:14,040 --> 01:10:17,120
In the behavior diagram, you have a behavior diagram

1444
01:10:17,120 --> 01:10:17,600
category.

1445
01:10:17,600 --> 01:10:19,920
You have activity diagrams, which are basically

1446
01:10:19,920 --> 01:10:21,520
represent flows of activities.

1447
01:10:21,520 --> 01:10:24,840
So you do this, then you do this, then you do this.

1448
01:10:24,840 --> 01:10:26,880
Those can be tied to system elements.

1449
01:10:26,880 --> 01:10:29,840
If this system element has this sort of function or property

1450
01:10:29,840 --> 01:10:32,680
or performs this operation on another part of the system,

1451
01:10:32,680 --> 01:10:35,080
you can represent that link as well.

1452
01:10:35,080 --> 01:10:39,760
There's a sequence diagram, which is more about logical

1453
01:10:39,760 --> 01:10:40,200
ordering.

1454
01:10:40,200 --> 01:10:44,080
So if you have, for example, a multi-threaded software system,

1455
01:10:44,080 --> 01:10:47,360
and you have different threads that may need different other

1456
01:10:47,360 --> 01:10:49,880
threads to communicate with them or finish their computation

1457
01:10:49,880 --> 01:10:51,800
before that thread can execute things like that,

1458
01:10:51,800 --> 01:10:54,480
you can do that interfacing between

1459
01:10:54,520 --> 01:10:59,720
different threads of activities in a sequence diagram.

1460
01:10:59,720 --> 01:11:03,440
This is one of the diagram types that was inherited directly

1461
01:11:03,440 --> 01:11:03,920
from UML.

1462
01:11:03,920 --> 01:11:07,720
So it's a very strong software element to that diagram.

1463
01:11:12,040 --> 01:11:13,200
There's a state machine diagram.

1464
01:11:13,200 --> 01:11:15,040
So obviously, state machines are very powerful.

1465
01:11:15,040 --> 01:11:16,440
If your system has various states,

1466
01:11:16,440 --> 01:11:18,040
if things in your system have various states,

1467
01:11:18,040 --> 01:11:20,240
you can represent that in a state machine diagram

1468
01:11:20,240 --> 01:11:22,880
and then talk about what are the criteria for transitioning

1469
01:11:22,880 --> 01:11:23,520
between states.

1470
01:11:23,520 --> 01:11:26,560
What would trigger or cause a transition between states?

1471
01:11:26,560 --> 01:11:28,760
What are guards that must be met before you

1472
01:11:28,760 --> 01:11:30,240
can transition states, things like that,

1473
01:11:30,240 --> 01:11:32,880
that we'd represent in a state machine diagram.

1474
01:11:32,880 --> 01:11:36,000
These type of diagrams are very powerful for describing things

1475
01:11:36,000 --> 01:11:38,280
like concept of operations.

1476
01:11:38,280 --> 01:11:39,920
So there has been some work.

1477
01:11:39,920 --> 01:11:42,400
I did an internship at JPL a couple of summers ago,

1478
01:11:42,400 --> 01:11:44,720
and they were trying to build up this capability

1479
01:11:44,720 --> 01:11:47,000
to model a concept of operations for a spacecraft.

1480
01:11:47,000 --> 01:11:50,160
So what are all the power modes of everything?

1481
01:11:50,160 --> 01:11:51,120
What are the time?

1482
01:11:51,120 --> 01:11:53,040
It spends this amount of time in this power mode,

1483
01:11:53,040 --> 01:11:55,640
and it transitions here over, for example,

1484
01:11:55,640 --> 01:11:56,960
like a given orbit of a spacecraft.

1485
01:11:56,960 --> 01:11:59,160
That's the thing that you can do with this set

1486
01:11:59,160 --> 01:12:01,200
of behavior diagrams.

1487
01:12:01,200 --> 01:12:02,360
And then use case analysis.

1488
01:12:02,360 --> 01:12:04,800
Again, it's mostly focused on early concept development,

1489
01:12:04,800 --> 01:12:07,120
stakeholders, how do they interface with the system?

1490
01:12:07,120 --> 01:12:08,800
Where do they derive value?

1491
01:12:08,800 --> 01:12:11,640
How does the user interact with the system, things like that?

1492
01:12:11,640 --> 01:12:14,640
That's what you put in the use case diagram.

1493
01:12:14,640 --> 01:12:18,000
Going over to structure, the block definition diagram

1494
01:12:18,000 --> 01:12:21,000
is where you define the structure of your system.

1495
01:12:21,040 --> 01:12:23,280
So the logical or physical decomposition,

1496
01:12:23,280 --> 01:12:24,680
I'll show you an example of this.

1497
01:12:24,680 --> 01:12:26,200
So every system is a spacecraft.

1498
01:12:26,200 --> 01:12:28,440
It has various subsystems.

1499
01:12:28,440 --> 01:12:29,640
If you want to decompose it logically,

1500
01:12:29,640 --> 01:12:32,080
it has a thermal subsystem, a structure subsystem,

1501
01:12:32,080 --> 01:12:34,200
ADCS subsystem, things like that.

1502
01:12:34,200 --> 01:12:35,520
You can also decompose it physically.

1503
01:12:35,520 --> 01:12:37,640
So your spacecraft has solar rays.

1504
01:12:37,640 --> 01:12:38,640
It has instruments.

1505
01:12:38,640 --> 01:12:40,560
It has thrusters, things like that.

1506
01:12:40,560 --> 01:12:41,960
You can represent those types of things

1507
01:12:41,960 --> 01:12:43,600
in a block definition diagram.

1508
01:12:43,600 --> 01:12:45,000
And then internal block diagram is

1509
01:12:45,000 --> 01:12:46,840
where you describe the ties with the interfaces

1510
01:12:46,840 --> 01:12:48,720
between all the components of your system.

1511
01:12:48,720 --> 01:12:50,360
And these can be at varying different levels

1512
01:12:50,360 --> 01:12:53,360
of abstraction, as I'll show you.

1513
01:12:53,360 --> 01:12:55,720
Parametric diagram is kind of a sub-diagram type

1514
01:12:55,720 --> 01:12:57,080
of the internal block diagram.

1515
01:12:57,080 --> 01:12:59,640
So you can, again, put constraints, mathematical, logical,

1516
01:12:59,640 --> 01:13:01,280
things like that on your interfaces

1517
01:13:01,280 --> 01:13:04,680
and begin to build up the infrastructure for doing

1518
01:13:04,680 --> 01:13:06,480
computation in the model.

1519
01:13:06,480 --> 01:13:10,160
And then a packaging diagram is not terribly important.

1520
01:13:10,160 --> 01:13:12,280
It's really focused on the organization of your model,

1521
01:13:12,280 --> 01:13:13,240
how do you scope things.

1522
01:13:13,240 --> 01:13:15,800
It's kind of a modeling diagram, as opposed

1523
01:13:15,800 --> 01:13:17,600
to a representation of your system.

1524
01:13:17,600 --> 01:13:19,560
Then last of all is a requirements diagram up top.

1525
01:13:19,560 --> 01:13:21,160
So again, I'll show you a good example of this,

1526
01:13:21,160 --> 01:13:23,160
but that's where you represent how your requirements are

1527
01:13:23,160 --> 01:13:25,160
related to your system.

1528
01:13:25,160 --> 01:13:27,000
And then you can see here what's been modified

1529
01:13:27,000 --> 01:13:30,000
and what's been taken from UML and the new diagram types

1530
01:13:30,000 --> 01:13:32,000
of requirement in parametric.

1531
01:13:32,000 --> 01:13:33,520
There were a couple of diagram types

1532
01:13:33,520 --> 01:13:36,520
that were eliminated from UML that were pretty software

1533
01:13:36,520 --> 01:13:37,560
specific.

1534
01:13:37,560 --> 01:13:39,680
I think there is one called the deployment diagram,

1535
01:13:39,680 --> 01:13:43,120
like how has your software been deployed across various servers

1536
01:13:43,120 --> 01:13:44,200
or users, things like that.

1537
01:13:44,200 --> 01:13:47,200
That's not really, that's a pretty software specific thing.

1538
01:13:47,200 --> 01:13:49,040
So in a general system, you might not

1539
01:13:49,080 --> 01:13:53,280
care about that all that much, so that diagram was removed.

1540
01:13:53,280 --> 01:13:56,520
So let me quickly go over some of the syntax.

1541
01:13:56,520 --> 01:13:59,280
So this is an interface block diagram, an IBD.

1542
01:13:59,280 --> 01:14:01,080
This is the type of diagram that I find

1543
01:14:01,080 --> 01:14:06,160
is really interesting, representing these interfaces.

1544
01:14:06,160 --> 01:14:08,160
So here's the system engineering ontology

1545
01:14:08,160 --> 01:14:09,080
we typically talk about.

1546
01:14:09,080 --> 01:14:12,200
So these are, this is basically a model of an avionics board.

1547
01:14:12,200 --> 01:14:14,880
So you have things like voltage converters.

1548
01:14:14,880 --> 01:14:17,600
You have memory, the volatile, non-volatile.

1549
01:14:17,600 --> 01:14:21,440
We have a FPGA, which is our main computational unit.

1550
01:14:21,440 --> 01:14:23,760
We talk about these as being parts of a system

1551
01:14:23,760 --> 01:14:25,400
in terms of a system engineering ontology.

1552
01:14:25,400 --> 01:14:28,920
Then these are these interfaces or these lines right here.

1553
01:14:28,920 --> 01:14:30,760
So in SysML, the way we talk about it

1554
01:14:30,760 --> 01:14:35,520
is these are part properties of the system.

1555
01:14:35,520 --> 01:14:38,280
It's kind of like an instantiation type of thing.

1556
01:14:38,280 --> 01:14:40,240
What we're saying is all of these parts

1557
01:14:40,240 --> 01:14:42,120
can represent independent of each other.

1558
01:14:42,120 --> 01:14:44,840
And then you define a property of that part

1559
01:14:44,840 --> 01:14:47,120
as being part of a different part,

1560
01:14:47,120 --> 01:14:48,840
if that makes any sense at all.

1561
01:14:48,840 --> 01:14:50,560
So for example, this is a board, right?

1562
01:14:50,560 --> 01:14:53,120
This main electronics board is this whole block.

1563
01:14:53,120 --> 01:14:55,560
And then it has sub-blocks within this block,

1564
01:14:55,560 --> 01:14:57,880
which represent the sub-parts that make up the board.

1565
01:14:57,880 --> 01:15:02,920
These are called part properties of this overall block.

1566
01:15:02,920 --> 01:15:05,120
We have these green little boxes, which are called ports.

1567
01:15:05,120 --> 01:15:07,840
And again, that's to support this kind of system

1568
01:15:07,840 --> 01:15:08,760
independent modeling.

1569
01:15:08,760 --> 01:15:11,040
So you can model like a voltage converter,

1570
01:15:11,040 --> 01:15:12,840
independent of any type of system.

1571
01:15:12,840 --> 01:15:15,080
It has maybe an input voltage and output voltage.

1572
01:15:15,080 --> 01:15:17,400
You can define what ranges those are, things like that.

1573
01:15:17,400 --> 01:15:20,000
And you can model those interfaces using ports.

1574
01:15:20,000 --> 01:15:23,240
And then these connectors, which are called connectors

1575
01:15:23,240 --> 01:15:25,400
in SysML, which represent the interfaces,

1576
01:15:25,400 --> 01:15:28,520
represent how each part is tied into the larger system.

1577
01:15:28,520 --> 01:15:30,360
And you could, for example, check that you

1578
01:15:30,360 --> 01:15:31,840
don't have any empty ports.

1579
01:15:31,840 --> 01:15:34,360
If a part needs an input voltage,

1580
01:15:34,360 --> 01:15:36,360
you could run a script that checks

1581
01:15:36,360 --> 01:15:39,800
that all the parts have all their ports satisfied.

1582
01:15:39,800 --> 01:15:43,920
That's something you can do with SysML.

1583
01:15:43,920 --> 01:15:45,480
OK, so before I get into the case study,

1584
01:15:45,480 --> 01:15:47,920
I want to talk a little bit about what you're going to see.

1585
01:15:47,920 --> 01:15:49,400
As I said, I work on something called

1586
01:15:49,400 --> 01:15:52,240
REXIS, which is the Regolith X-ray Imaging Spectrometer.

1587
01:15:52,240 --> 01:15:53,960
It's an X-ray spectrometer that's

1588
01:15:53,960 --> 01:15:56,360
flying on NASA's OSIRIS-REx asteroid sample return

1589
01:15:56,360 --> 01:15:57,360
mission.

1590
01:15:57,360 --> 01:16:00,680
I've been working on it since 2011, when I was a senior here,

1591
01:16:00,680 --> 01:16:03,560
all throughout my master's and then now for my PhD.

1592
01:16:03,560 --> 01:16:05,480
Basically, we're going to measure X-rays that

1593
01:16:05,480 --> 01:16:07,320
are fluoresced from the asteroid surface

1594
01:16:07,320 --> 01:16:09,840
in order to tell what the elemental composition

1595
01:16:09,840 --> 01:16:10,640
of the asteroid is.

1596
01:16:10,640 --> 01:16:12,640
So that's our main science goal.

1597
01:16:12,640 --> 01:16:16,600
And that will basically enable us to categorize

1598
01:16:16,600 --> 01:16:18,800
where the asteroid is within the different meteorite types

1599
01:16:18,800 --> 01:16:20,600
that have been defined on the ground based

1600
01:16:20,600 --> 01:16:23,240
upon existing meteorite samples.

1601
01:16:23,240 --> 01:16:25,720
So what I did from a master's thesis

1602
01:16:25,720 --> 01:16:28,400
was model the design history of REXIS.

1603
01:16:28,400 --> 01:16:32,040
So how has our design evolved from the very beginning, where

1604
01:16:32,040 --> 01:16:35,440
it was very open-ended, very abstract,

1605
01:16:35,440 --> 01:16:39,000
and you'll see this, to the current design, which

1606
01:16:39,000 --> 01:16:44,400
current in this case was CDR, which was over a year ago now.

1607
01:16:44,400 --> 01:16:45,800
Right now, the current state of REXIS

1608
01:16:45,800 --> 01:16:48,040
is we're almost ready to mount to the spacecraft.

1609
01:16:48,040 --> 01:16:50,640
So it's very exciting.

1610
01:16:50,640 --> 01:16:53,080
Just to give you an idea of a timeline,

1611
01:16:53,080 --> 01:16:54,760
this is something I'm sure Ollie will

1612
01:16:54,760 --> 01:16:56,440
talk about in this course, is the flow

1613
01:16:56,440 --> 01:16:58,080
through the system development life cycle.

1614
01:16:58,080 --> 01:17:01,360
So we have system requirements review back in January of 2012.

1615
01:17:01,400 --> 01:17:04,400
System, I think it's definition review.

1616
01:17:04,400 --> 01:17:08,160
April 2012 preliminary design review, January of 2013,

1617
01:17:08,160 --> 01:17:11,040
and then critical design review, February of 2014.

1618
01:17:11,040 --> 01:17:14,000
So I created models at each of these design points in SysML

1619
01:17:14,000 --> 01:17:16,440
and looked at what are the lessons we could have learned.

1620
01:17:16,440 --> 01:17:18,040
We didn't use SysML in REXIS.

1621
01:17:18,040 --> 01:17:19,600
I was kind of looking back historically,

1622
01:17:19,600 --> 01:17:20,960
what if we had used it?

1623
01:17:20,960 --> 01:17:25,800
Could we have designed our system better in any sort of way?

1624
01:17:25,800 --> 01:17:27,920
So here is kind of a CAD representation

1625
01:17:27,920 --> 01:17:28,920
of how our design evolved.

1626
01:17:28,920 --> 01:17:30,640
And I think you can kind of get the idea.

1627
01:17:30,640 --> 01:17:34,280
Back at SRR, we didn't really know what they would look like.

1628
01:17:34,280 --> 01:17:36,000
We didn't know what the interfaces would be.

1629
01:17:36,000 --> 01:17:38,320
We didn't know what all the parts would be.

1630
01:17:38,320 --> 01:17:40,280
We had a little more development for SDR.

1631
01:17:40,280 --> 01:17:42,200
You can see there's more arrows.

1632
01:17:42,200 --> 01:17:44,200
The CAD is a little bit more detailed.

1633
01:17:44,200 --> 01:17:46,880
For PDR, we had even more detail.

1634
01:17:46,880 --> 01:17:48,640
This was actually like a buildable design.

1635
01:17:48,640 --> 01:17:50,800
This turned out to not even be buildable.

1636
01:17:50,800 --> 01:17:54,600
And then we had more evolution between PDR and CDR

1637
01:17:54,600 --> 01:17:56,680
to get to pretty much where the design is.

1638
01:17:56,680 --> 01:17:59,160
There's actually been some evolution after this as well.

1639
01:17:59,760 --> 01:18:02,400
Sometimes happens with a new system.

1640
01:18:02,400 --> 01:18:04,560
But you can see just graphically kind of the increase

1641
01:18:04,560 --> 01:18:06,640
in level of detail and level of fidelity

1642
01:18:06,640 --> 01:18:09,640
of the state of our system throughout its development cycle.

1643
01:18:09,640 --> 01:18:12,760
And I'll show you that and how that looks in the system model

1644
01:18:12,760 --> 01:18:14,840
as well.

1645
01:18:14,840 --> 01:18:17,000
So one of the things you can do if you have a system model,

1646
01:18:17,000 --> 01:18:18,840
as I talked about, you can run queries on it

1647
01:18:18,840 --> 01:18:21,160
and pull out information that's very difficult or impossible

1648
01:18:21,160 --> 01:18:23,320
to get with our current development practices.

1649
01:18:23,320 --> 01:18:26,520
So this is just looking at the different sub-assemblies

1650
01:18:26,520 --> 01:18:27,320
within REXIS.

1651
01:18:27,320 --> 01:18:29,600
What are the number of parts in each of the sub-assemblies?

1652
01:18:29,600 --> 01:18:31,920
So you can see the general trend is up for all of them

1653
01:18:31,920 --> 01:18:33,360
as you would expect.

1654
01:18:33,360 --> 01:18:35,520
Some jump up very high.

1655
01:18:35,520 --> 01:18:37,760
Some kind of stay basically where they were.

1656
01:18:37,760 --> 01:18:39,160
But in general, they all increase.

1657
01:18:39,160 --> 01:18:40,560
And this is something you might be

1658
01:18:40,560 --> 01:18:42,960
able to do with looking at a parts list or something

1659
01:18:42,960 --> 01:18:44,640
like that with current methodologies.

1660
01:18:44,640 --> 01:18:46,480
But it'd be very hard to get this information, which

1661
01:18:46,480 --> 01:18:48,440
is the number of ports per assembly.

1662
01:18:48,440 --> 01:18:49,840
So each interface has two ports.

1663
01:18:49,840 --> 01:18:51,400
So these numbers divided by two basically

1664
01:18:51,400 --> 01:18:53,160
equal the number of interfaces that we have

1665
01:18:53,160 --> 01:18:54,320
in each sub-assembly.

1666
01:18:54,320 --> 01:18:56,880
You can see, again, there's a general trend of increasing.

1667
01:18:56,920 --> 01:18:59,760
Increasing number of ports as you go through the life cycle.

1668
01:18:59,760 --> 01:19:02,040
So this is a piece of information

1669
01:19:02,040 --> 01:19:04,320
you might want to use if you want to manage the complexity

1670
01:19:04,320 --> 01:19:04,800
of your system.

1671
01:19:04,800 --> 01:19:07,040
And you say, this sub-assembly is getting

1672
01:19:07,040 --> 01:19:09,240
way too many interfaces, way too many parts.

1673
01:19:09,240 --> 01:19:10,120
It's way too complex.

1674
01:19:10,120 --> 01:19:11,920
We need to think about how we've logically

1675
01:19:11,920 --> 01:19:14,160
arranged our system and maybe how can we rearrange it

1676
01:19:14,160 --> 01:19:16,840
to make it more understandable and easier to work with.

1677
01:19:16,840 --> 01:19:18,720
And then you can divide the two.

1678
01:19:18,720 --> 01:19:20,440
And you end up looking at how many

1679
01:19:20,440 --> 01:19:24,040
this is ports per part in each sub-assembly at each

1680
01:19:24,040 --> 01:19:25,360
of the design reviews.

1681
01:19:25,360 --> 01:19:27,760
And you can see trends here, too, which are interesting.

1682
01:19:27,760 --> 01:19:29,240
So you can see in the beginning, we

1683
01:19:29,240 --> 01:19:30,160
didn't really know what we were doing.

1684
01:19:30,160 --> 01:19:32,400
Some of these had a lot of ports per part.

1685
01:19:32,400 --> 01:19:33,880
Some of these had very few.

1686
01:19:33,880 --> 01:19:36,640
They all ended up stabilizing kind of between the three

1687
01:19:36,640 --> 01:19:38,840
and five ports per part range.

1688
01:19:38,840 --> 01:19:40,840
And then you can look at the literature and say, well,

1689
01:19:40,840 --> 01:19:44,120
typically systems tend to be between five and six

1690
01:19:44,120 --> 01:19:45,240
ports per part.

1691
01:19:45,240 --> 01:19:46,200
So what does that mean?

1692
01:19:46,200 --> 01:19:48,440
Does that mean that our system, that I didn't model it

1693
01:19:48,440 --> 01:19:48,920
correctly?

1694
01:19:48,920 --> 01:19:49,680
That's one possibility.

1695
01:19:49,680 --> 01:19:52,880
It didn't model to the lowest level of fidelity possible.

1696
01:19:52,920 --> 01:19:55,640
Does it mean that our system is too simple?

1697
01:19:55,640 --> 01:19:57,280
Does it mean that we're missing something

1698
01:19:57,280 --> 01:19:58,640
that we haven't thought about?

1699
01:19:58,640 --> 01:20:00,760
Does it mean that our system, which

1700
01:20:00,760 --> 01:20:03,280
was intended to be simple and cheap and implementable by

1701
01:20:03,280 --> 01:20:05,800
students, is actually achieving that goal because it's

1702
01:20:05,800 --> 01:20:07,600
beneath what you would typically expect?

1703
01:20:07,600 --> 01:20:09,400
Those are the type of questions you can ask with this data.

1704
01:20:09,400 --> 01:20:11,440
But this data is not easy to get with the current

1705
01:20:11,440 --> 01:20:12,720
methodologies.

1706
01:20:12,720 --> 01:20:15,480
So this kind of very simple query you can do gives you

1707
01:20:15,480 --> 01:20:19,400
power on managing complexity in your system.

1708
01:20:19,400 --> 01:20:24,600
So let me now transition quickly to the demo.

1709
01:20:24,600 --> 01:20:25,360
Let's see.

1710
01:20:45,680 --> 01:20:46,800
There's no sound.

1711
01:20:46,800 --> 01:20:51,080
I know, but I need to sync it up and I need sound to do that.

1712
01:20:51,080 --> 01:20:54,040
So you can close out of this.

1713
01:20:54,040 --> 01:20:56,200
And then let me see.

1714
01:21:00,720 --> 01:21:03,880
So while Mark is setting up for the demo, are there any

1715
01:21:03,880 --> 01:21:06,440
questions about SysML so far?

1716
01:21:06,440 --> 01:21:07,960
Any observations you guys have?

1717
01:21:11,440 --> 01:21:15,160
Maybe at EPFL, you see the similarities and differences

1718
01:21:15,160 --> 01:21:18,840
between OPM and SysML.

1719
01:21:18,840 --> 01:21:22,440
What's the biggest difference between the two?

1720
01:21:22,440 --> 01:21:24,200
There's two really important differences.

1721
01:21:27,680 --> 01:21:28,280
No questions?

1722
01:21:28,280 --> 01:21:29,960
Yes?

1723
01:21:29,960 --> 01:21:31,000
Hang on.

1724
01:21:31,000 --> 01:21:34,440
Is there anybody at EPFL who wants to comment on this?

1725
01:21:40,880 --> 01:21:42,840
No, there's no comment from EPFL.

1726
01:21:42,840 --> 01:21:43,640
OK, good.

1727
01:21:43,640 --> 01:21:45,400
That's fine.

1728
01:21:45,400 --> 01:21:46,760
That's fine.

1729
01:21:46,760 --> 01:21:48,720
Mark, are you set up?

1730
01:21:48,720 --> 01:21:49,220
Almost.

1731
01:21:54,320 --> 01:21:58,920
What I would say is, first of all, OPM has only one type of

1732
01:21:58,920 --> 01:21:59,920
diagram, right?

1733
01:21:59,920 --> 01:22:03,520
And then you go really deep, sort of a deep hierarchy.

1734
01:22:03,520 --> 01:22:06,840
SysML has nine different types of diagrams split between

1735
01:22:06,840 --> 01:22:10,120
behavioral and structural, but that's one difference.

1736
01:22:10,120 --> 01:22:13,040
And then the other is that SysML is fundamentally object

1737
01:22:13,040 --> 01:22:16,560
oriented, because it comes from object oriented thinking and

1738
01:22:16,560 --> 01:22:20,680
software, whereas OPM has objects and processes at the

1739
01:22:20,680 --> 01:22:22,200
same level.

1740
01:22:22,200 --> 01:22:26,000
Those are two of the most important differences.

1741
01:22:26,000 --> 01:22:27,600
OK?

1742
01:22:27,600 --> 01:22:28,520
All right.

1743
01:22:28,520 --> 01:22:30,480
So what I'm showing, can everyone see the screen?

1744
01:22:30,480 --> 01:22:33,200
Just let me know if you can't see the screen.

1745
01:22:33,200 --> 01:22:36,560
What I'm showing you right now is a tool called Magic Draw.

1746
01:22:36,560 --> 01:22:38,680
There are basically a variety of tools provided by

1747
01:22:38,680 --> 01:22:41,560
commercial vendors that enable you to build and work with

1748
01:22:41,560 --> 01:22:42,320
SysML models.

1749
01:22:42,320 --> 01:22:45,120
So SysML is a language, and then it's implemented in tools.

1750
01:22:45,120 --> 01:22:48,520
And this just happens to be one that's fairly widely

1751
01:22:48,520 --> 01:22:49,880
utilized.

1752
01:22:49,880 --> 01:22:51,560
Unfortunately, it's quite expensive.

1753
01:22:51,560 --> 01:22:53,480
But anyway.

1754
01:22:53,480 --> 01:22:55,240
So what I'm showing you right now, and this is going to be a

1755
01:22:55,240 --> 01:22:57,840
little bit difficult, because as you can see, you need a

1756
01:22:57,840 --> 01:22:59,600
big screen.

1757
01:22:59,600 --> 01:23:01,520
What I'm showing you right now is a requirements diagram.

1758
01:23:01,520 --> 01:23:04,520
So you can see that right here, requirements diagram.

1759
01:23:04,520 --> 01:23:09,080
And each of these blocks, as you can see by the tag here, is

1760
01:23:09,080 --> 01:23:10,080
a requirement.

1761
01:23:10,080 --> 01:23:13,000
So this is one of our operating criteria.

1762
01:23:13,000 --> 01:23:14,560
So while operating, the temperature of all our

1763
01:23:14,560 --> 01:23:17,400
components shall be maintained within operability limits.

1764
01:23:17,400 --> 01:23:19,240
Straightforward requirement.

1765
01:23:19,240 --> 01:23:22,440
And you can create these satisfy relationships between

1766
01:23:22,440 --> 01:23:25,000
that requirement and the components in the system that

1767
01:23:25,000 --> 01:23:27,160
must satisfy that requirement.

1768
01:23:27,160 --> 01:23:30,280
So right now, this is being done at SRR, as you can see up

1769
01:23:30,280 --> 01:23:30,840
here.

1770
01:23:30,840 --> 01:23:33,960
So this is very early in the design.

1771
01:23:33,960 --> 01:23:36,600
So we don't have it broken down fully to all the

1772
01:23:36,600 --> 01:23:37,040
components.

1773
01:23:37,040 --> 01:23:39,160
But here's our main electronics board.

1774
01:23:39,160 --> 01:23:40,880
It has to satisfy that requirement.

1775
01:23:40,880 --> 01:23:41,920
Here's our radiation cover.

1776
01:23:41,920 --> 01:23:43,360
It has to satisfy that requirement.

1777
01:23:43,360 --> 01:23:45,680
So you can tie these two things, the requirement, and the

1778
01:23:45,680 --> 01:23:47,840
part of the system that must satisfy the requirement.

1779
01:23:47,840 --> 01:23:50,120
And here I've tied it to parts.

1780
01:23:50,120 --> 01:23:52,480
So these are called blocks, which are the fundamental

1781
01:23:52,480 --> 01:23:54,760
unit in SysMLs, is a block.

1782
01:23:54,760 --> 01:23:56,160
So these represent parts of our system.

1783
01:23:56,160 --> 01:23:57,720
But you could tie it to a property of that

1784
01:23:57,720 --> 01:23:59,280
part if you wanted to.

1785
01:23:59,280 --> 01:24:00,880
So then you get into the situation I talked about

1786
01:24:00,880 --> 01:24:04,080
earlier, where you have the requirement is on the mass of

1787
01:24:04,080 --> 01:24:05,280
must be less than this.

1788
01:24:05,280 --> 01:24:07,200
You can tie it to the mass of the system itself.

1789
01:24:07,200 --> 01:24:08,960
As opposed to the system, you can tie it to the actual

1790
01:24:08,960 --> 01:24:12,760
property, which is very useful.

1791
01:24:12,760 --> 01:24:19,760
So let me quickly show you one of the cool things.

1792
01:24:19,760 --> 01:24:22,760
If I delete these requirements, you can see there's no

1793
01:24:22,760 --> 01:24:23,160
requirements.

1794
01:24:23,160 --> 01:24:25,800
I'm not actually deleting them from the system itself.

1795
01:24:25,800 --> 01:24:28,600
But I'm just doing as I'm removing it from the diagram.

1796
01:24:28,600 --> 01:24:37,120
But if you wanted to, you should be able to look at

1797
01:24:37,120 --> 01:24:39,200
related elements of the different blocks.

1798
01:24:39,200 --> 01:24:40,080
So I just clicked on a block.

1799
01:24:40,080 --> 01:24:46,760
And I can choose to show all the things that are satisfied,

1800
01:24:46,760 --> 01:24:48,760
the requirements of that component of the system

1801
01:24:48,760 --> 01:24:53,040
satisfies, and these requirements pop up.

1802
01:24:53,040 --> 01:24:56,800
So this is showing how the diagrams themselves aren't

1803
01:24:56,800 --> 01:24:57,120
the model.

1804
01:24:57,120 --> 01:24:59,040
There's actually back into the model.

1805
01:24:59,040 --> 01:25:01,760
And you can kind of work in the diagram and show or hide

1806
01:25:01,760 --> 01:25:02,880
things however you want.

1807
01:25:02,880 --> 01:25:06,960
But the information is actually kept behind the diagram.

1808
01:25:06,960 --> 01:25:09,080
So to speak.

1809
01:25:09,080 --> 01:25:11,840
So my research looked into topology.

1810
01:25:11,840 --> 01:25:15,280
So let me just show you a little bit about what I did.

1811
01:25:15,280 --> 01:25:17,720
So this is a block definition diagram, again, defining all

1812
01:25:17,720 --> 01:25:18,680
the parts of your system.

1813
01:25:18,680 --> 01:25:21,840
And I just want to give you kind of a high-level idea of

1814
01:25:21,840 --> 01:25:24,880
the type of things that we saw.

1815
01:25:24,880 --> 01:25:32,080
So it's big, first of all, very big.

1816
01:25:32,080 --> 01:25:33,920
These are all the parts of the system.

1817
01:25:33,920 --> 01:25:36,080
So we start hide like the mission context and the

1818
01:25:36,080 --> 01:25:38,480
mission context contain things like the environment, the

1819
01:25:38,480 --> 01:25:40,440
spacecraft, and then Rexus.

1820
01:25:40,440 --> 01:25:41,640
And then you can break down Rexus.

1821
01:25:41,640 --> 01:25:43,840
And we have various sub-assemblies broken down

1822
01:25:43,840 --> 01:25:44,680
into parts.

1823
01:25:44,680 --> 01:25:47,000
And that's how you get this tree structure.

1824
01:25:47,000 --> 01:25:50,440
And then this tree structure can be tied together.

1825
01:25:50,440 --> 01:25:52,360
I could zoom in, but it's big.

1826
01:25:52,360 --> 01:25:55,360
Again, so these are all the parts of our system.

1827
01:25:55,360 --> 01:25:58,240
Let me give you an example.

1828
01:25:58,240 --> 01:26:00,840
So we have a couple of boards that we call our

1829
01:26:00,840 --> 01:26:02,200
detector electronics.

1830
01:26:02,200 --> 01:26:05,440
And those detector electronics have various ports.

1831
01:26:05,440 --> 01:26:07,680
One thing they have to do, they have this port here and

1832
01:26:07,680 --> 01:26:10,840
this interface here, which connects to RCCDs.

1833
01:26:10,840 --> 01:26:14,040
So this is showing how you can build interfaces in

1834
01:26:14,040 --> 01:26:14,840
system also here.

1835
01:26:14,840 --> 01:26:17,200
The green boxes, again, are the ports, the lines of the

1836
01:26:17,200 --> 01:26:19,680
connectors, and they're defining all the interfaces.

1837
01:26:19,680 --> 01:26:23,680
And you can see, at a high level, how complicated things

1838
01:26:23,680 --> 01:26:24,920
get very quickly.

1839
01:26:24,920 --> 01:26:27,360
This is the earliest, most abstract version of our

1840
01:26:27,360 --> 01:26:30,920
design, and it already has a lot of complication.

1841
01:26:30,920 --> 01:26:34,480
One thing you can do, I talked about running scripts.

1842
01:26:34,480 --> 01:26:35,600
I'll show you how that works.

1843
01:26:35,600 --> 01:26:37,160
It's quite easy.

1844
01:26:40,040 --> 01:26:42,920
So I just ran a script on the model that told me to find the

1845
01:26:42,920 --> 01:26:46,080
number of parts in the scope that I defined and the number

1846
01:26:46,080 --> 01:26:47,600
of ports.

1847
01:26:47,600 --> 01:26:49,480
And here's the output of that model right here.

1848
01:26:49,480 --> 01:26:53,080
So the script itself is not even very complicated.

1849
01:26:53,080 --> 01:26:56,000
It's like 50, 60 lines of code.

1850
01:26:56,000 --> 01:26:58,240
And immediately I can pull out how many ports, how many

1851
01:26:58,240 --> 01:27:01,520
parts, things like that, information about my system.

1852
01:27:01,520 --> 01:27:03,960
So let me kind of take you briefly through the development

1853
01:27:03,960 --> 01:27:05,200
process.

1854
01:27:05,200 --> 01:27:07,680
So that was, again, the highest, the most abstract, the

1855
01:27:07,680 --> 01:27:10,040
earliest version of our system, SRR.

1856
01:27:10,040 --> 01:27:11,960
This is SDR.

1857
01:27:11,960 --> 01:27:16,760
You can see it's starting to get a bit more complex.

1858
01:27:16,760 --> 01:27:20,560
And then you can go over to PDR, and it starts to get

1859
01:27:20,560 --> 01:27:21,800
really scary.

1860
01:27:24,480 --> 01:27:25,680
Right?

1861
01:27:25,680 --> 01:27:29,640
And then you go to CDR, and it's just a nightmare.

1862
01:27:29,640 --> 01:27:32,440
So I created all these systems, all these models by hand.

1863
01:27:32,440 --> 01:27:35,120
You can't actually build the model with a script, if you

1864
01:27:35,120 --> 01:27:37,160
would like.

1865
01:27:37,160 --> 01:27:39,880
You can basically do things like define a pattern and then

1866
01:27:39,880 --> 01:27:42,800
apply that pattern to all the parts of that type.

1867
01:27:42,800 --> 01:27:45,120
That's all possible through the API.

1868
01:27:45,120 --> 01:27:48,200
And just to show you how much of a nightmare it was at CDR,

1869
01:27:48,200 --> 01:27:54,680
when they run the same script on the CDR model, we have

1870
01:27:54,680 --> 01:27:57,880
230 parts and 900 interfaces.

1871
01:27:57,880 --> 01:27:59,760
And this was not even modeling to the lowest level of

1872
01:27:59,760 --> 01:28:00,480
fidelity possible.

1873
01:28:00,480 --> 01:28:02,920
I didn't, for example, model all the components, all the

1874
01:28:02,920 --> 01:28:06,200
capacitors, resistors, op-amps, and stuff on the board.

1875
01:28:06,200 --> 01:28:08,280
And now you can already see it's quite large.

1876
01:28:08,280 --> 01:28:12,760
So this is just the idea behind these models would be to

1877
01:28:12,760 --> 01:28:16,480
extend this to the lowest level in a real system and use

1878
01:28:16,480 --> 01:28:18,520
this, basically, use all the capabilities that you have

1879
01:28:18,520 --> 01:28:20,600
with the model to really manage your complexity in a way

1880
01:28:20,600 --> 01:28:22,320
that is just not possible currently.

1881
01:28:22,320 --> 01:28:24,880
And there's no way you can really mentally keep track of

1882
01:28:24,880 --> 01:28:26,200
all these interfaces and understand

1883
01:28:26,200 --> 01:28:27,400
how your system is working.

1884
01:28:27,400 --> 01:28:29,320
So having this modeling capability and querying

1885
01:28:29,320 --> 01:28:33,040
capability is really, really powerful.

1886
01:28:33,040 --> 01:28:38,840
What was used during RECSYS for the systems engineering?

1887
01:28:38,840 --> 01:28:41,640
You had applied this after the fact.

1888
01:28:41,640 --> 01:28:46,400
What was used to create these block diagrams or track

1889
01:28:46,400 --> 01:28:46,840
things during RECSYS?

1890
01:28:46,840 --> 01:28:49,560
Do you mean during when we were developing RECSYS?

1891
01:28:49,560 --> 01:28:51,480
We basically didn't have this.

1892
01:28:51,480 --> 01:28:54,960
So we were relying, as you would typically do, upon the

1893
01:28:54,960 --> 01:28:57,280
capabilities of the system engineer or the team.

1894
01:28:57,280 --> 01:28:58,080
You'd have documents.

1895
01:28:58,080 --> 01:29:00,000
We have a ton of documents.

1896
01:29:00,000 --> 01:29:02,360
But I was talking about how things weren't buildable.

1897
01:29:02,360 --> 01:29:05,760
I found a situation where, because of the way we had

1898
01:29:05,760 --> 01:29:07,240
done our thermal system, we were dumping

1899
01:29:07,240 --> 01:29:11,160
spacecraft heat to space, which you don't want to do.

1900
01:29:11,160 --> 01:29:13,600
I can explain why, but you don't want to do that.

1901
01:29:13,600 --> 01:29:16,280
And that's something we didn't realize at the time.

1902
01:29:16,280 --> 01:29:18,920
Like if we had tried to build it, we would have had this

1903
01:29:18,920 --> 01:29:21,400
property of the system that we didn't know actually existed

1904
01:29:21,400 --> 01:29:23,000
until I went back and looked at the model.

1905
01:29:23,000 --> 01:29:25,080
So we definitely missed things.

1906
01:29:25,080 --> 01:29:27,200
And this should have improved the design process if we had

1907
01:29:27,200 --> 01:29:29,880
been using it.

1908
01:29:29,880 --> 01:29:33,600
So Mark, to wrap up, because we've got to switch over to

1909
01:29:33,600 --> 01:29:37,320
Modellica, what's your recommendation for, let's say

1910
01:29:37,320 --> 01:29:40,320
students in the class got intrigued by CISML.

1911
01:29:40,320 --> 01:29:42,840
What's the next step?

1912
01:29:42,840 --> 01:29:43,800
There's a couple of different ways.

1913
01:29:43,800 --> 01:29:45,480
Certainly, if you're interested, let me know.

1914
01:29:45,480 --> 01:29:49,760
And I can give you resources to further your understanding.

1915
01:29:49,760 --> 01:29:53,120
As I said, working with these tools can be expensive to get

1916
01:29:53,120 --> 01:29:54,080
these tools.

1917
01:29:54,080 --> 01:29:57,720
So I can help you understand what that would take.

1918
01:29:57,720 --> 01:30:03,600
There are some beginning to be some companies that will do

1919
01:30:03,600 --> 01:30:06,920
CISML training courses that will sit down for a day or a

1920
01:30:06,920 --> 01:30:10,080
week and teach you CISML, basically, how to work with

1921
01:30:10,080 --> 01:30:11,680
the model, how to build the model.

1922
01:30:11,680 --> 01:30:12,600
I took one of those courses.

1923
01:30:12,600 --> 01:30:14,160
It was really great.

1924
01:30:14,160 --> 01:30:16,840
So talk to me if you're interested, and I can steer

1925
01:30:16,840 --> 01:30:18,480
you down the right path.

1926
01:30:18,480 --> 01:30:19,160
Great.

1927
01:30:19,160 --> 01:30:19,800
Thanks, Mark.

1928
01:30:19,800 --> 01:30:20,280
Sure.

1929
01:30:20,280 --> 01:30:22,360
Very good.

1930
01:30:22,400 --> 01:30:25,560
So we did, in 20 minutes, what usually take about a week,

1931
01:30:25,560 --> 01:30:27,160
right?

1932
01:30:27,160 --> 01:30:29,320
There's a lot more to it.

1933
01:30:29,320 --> 01:30:29,560
Great.

1934
01:30:29,560 --> 01:30:34,280
So we're going to switch over now to Modellica, which I

1935
01:30:34,280 --> 01:30:37,440
think is we're going to maybe run a couple minutes over

1936
01:30:37,440 --> 01:30:40,040
today, but I think it's important we cover all three

1937
01:30:40,040 --> 01:30:42,160
languages.

1938
01:30:42,160 --> 01:30:45,360
So let's get the slides back up.

1939
01:30:45,360 --> 01:30:47,160
And I'm going to switch here to Narik.

1940
01:30:47,160 --> 01:30:49,760
He's another doctoral student in the group.

1941
01:30:49,760 --> 01:30:55,320
And so introduce yourself, and then tell us about Modellica.

1942
01:30:55,320 --> 01:30:56,320
Great.

1943
01:30:56,320 --> 01:30:58,320
Thank you.

1944
01:30:58,320 --> 01:31:00,720
Are you using your computer for slides or this computer?

1945
01:31:00,720 --> 01:31:03,200
For the demo, I'm going to use this one.

1946
01:31:03,200 --> 01:31:04,640
You need this one?

1947
01:31:04,640 --> 01:31:05,120
This one.

1948
01:31:16,120 --> 01:31:16,880
So hello, everyone.

1949
01:31:16,880 --> 01:31:17,600
My name is Narik.

1950
01:31:17,600 --> 01:31:20,720
I'm a doctoral student at AeroAstro here.

1951
01:31:20,720 --> 01:31:23,760
My background is in gas turbine engines, and specifically

1952
01:31:23,760 --> 01:31:26,280
I've been looking at concept generation of gas turbine

1953
01:31:26,280 --> 01:31:28,840
engines, automated concept generation.

1954
01:31:28,840 --> 01:31:31,360
And the way I got acquainted with Modellica

1955
01:31:31,360 --> 01:31:34,840
was that I needed to be able to rapidly reconfigure different

1956
01:31:34,840 --> 01:31:38,080
concepts and simulate them mathematically,

1957
01:31:38,080 --> 01:31:39,880
do physics-based simulations.

1958
01:31:39,880 --> 01:31:42,440
So in contrast to the first two languages,

1959
01:31:42,440 --> 01:31:46,400
Modellica is a lot more about rapidly being

1960
01:31:46,400 --> 01:31:48,840
able to build physical models of systems

1961
01:31:48,840 --> 01:31:51,680
and reconfiguring them and reusing them for later on.

1962
01:31:54,280 --> 01:31:57,600
So like I mentioned, Modellica is primarily

1963
01:31:57,600 --> 01:32:00,400
about physics-based modeling of systems

1964
01:32:00,400 --> 01:32:04,560
and rapidly being able to reuse models and reconfigure them.

1965
01:32:04,560 --> 01:32:05,480
It's a language.

1966
01:32:05,480 --> 01:32:09,560
Again, it's not a tool, like the first two that you heard about.

1967
01:32:09,560 --> 01:32:12,080
There are many different tools which implement this language,

1968
01:32:12,080 --> 01:32:14,800
but I'm going to start off with just describing how the language

1969
01:32:14,800 --> 01:32:17,720
works and then go on to describe which tools that you can use.

1970
01:32:17,720 --> 01:32:20,760
In contrast to CISML, there are a couple of really good free

1971
01:32:20,760 --> 01:32:22,960
tools that you can use and rapidly get into.

1972
01:32:22,960 --> 01:32:25,440
And there are a lot of libraries that you

1973
01:32:25,440 --> 01:32:28,400
can use with hundreds of even thousands of actually basic

1974
01:32:28,400 --> 01:32:31,000
components that you can use for modeling.

1975
01:32:31,000 --> 01:32:32,680
So it's a declarative language.

1976
01:32:32,680 --> 01:32:35,880
And what I mean by declarative is that you don't,

1977
01:32:35,880 --> 01:32:39,920
in sequential sort of programming, you write commands

1978
01:32:39,920 --> 01:32:42,840
and you make assignments to various parameters.

1979
01:32:42,880 --> 01:32:45,760
Here, you just describe the governing equations

1980
01:32:45,760 --> 01:32:48,680
of the components you want to simulate.

1981
01:32:48,680 --> 01:32:51,320
And there's no particular order in which you do this.

1982
01:32:51,320 --> 01:32:52,520
The models are a-causal.

1983
01:32:52,520 --> 01:32:54,480
There's no direction to flows.

1984
01:32:54,480 --> 01:32:57,280
All you really need to do is describe what ports,

1985
01:32:57,280 --> 01:32:59,400
like Mark mentioned.

1986
01:32:59,400 --> 01:33:00,840
It's similar in this situation.

1987
01:33:00,840 --> 01:33:02,760
What kind of ports you have, what kind of interfaces

1988
01:33:02,760 --> 01:33:04,680
the components can have with other components,

1989
01:33:04,680 --> 01:33:08,160
and the governing equations and the parameters and variables.

1990
01:33:08,160 --> 01:33:10,160
It's a multi-domain modeling language,

1991
01:33:10,160 --> 01:33:12,520
so it's agnostic to what kind of domain you're working in.

1992
01:33:12,520 --> 01:33:14,920
It's not particularly electrical engineering.

1993
01:33:14,920 --> 01:33:17,120
For example, I'm going to be showing an electrical engineering

1994
01:33:17,120 --> 01:33:20,120
example and also show a gas turbine engine example

1995
01:33:20,120 --> 01:33:22,520
with aero-elastic vibrations.

1996
01:33:22,520 --> 01:33:24,440
So you don't necessarily, you're not attached

1997
01:33:24,440 --> 01:33:26,320
to any specific domain.

1998
01:33:26,320 --> 01:33:30,560
It's also object-orientated, and it enables you to decompose

1999
01:33:30,560 --> 01:33:35,200
systems into subsystems or recombine them

2000
01:33:35,200 --> 01:33:37,920
and look at them at various layers of abstraction.

2001
01:33:37,920 --> 01:33:40,680
It's designed to be efficient, so this

2002
01:33:40,680 --> 01:33:42,280
is a quote from Professor Peter Fritzen

2003
01:33:42,280 --> 01:33:44,320
at Linköping University.

2004
01:33:44,320 --> 01:33:47,600
So these are just about the sort of scale of problems

2005
01:33:47,600 --> 01:33:50,680
that you can solve with the medallic language.

2006
01:33:50,680 --> 01:33:52,600
Obviously, it depends on what kind of equations

2007
01:33:52,600 --> 01:33:55,480
you're talking about, but it's designed

2008
01:33:55,480 --> 01:34:00,520
to be a very efficient way of simulating systems.

2009
01:34:00,520 --> 01:34:02,600
So I really want to talk a little bit more

2010
01:34:02,600 --> 01:34:04,920
about this idea of a-causal modeling

2011
01:34:04,920 --> 01:34:06,520
that I mentioned before.

2012
01:34:06,520 --> 01:34:09,760
So on the left-hand side is an assignment,

2013
01:34:09,760 --> 01:34:13,560
and that's typically what you do when you program in MATLAB,

2014
01:34:13,560 --> 01:34:15,880
just the MATLAB normal scripts.

2015
01:34:15,880 --> 01:34:18,160
F is assigned to MA, or P is assigned

2016
01:34:18,160 --> 01:34:21,160
the value of RORT for the equation of state of a gas.

2017
01:34:21,160 --> 01:34:23,200
And what that means is that you know

2018
01:34:23,200 --> 01:34:24,760
what the mass and acceleration are,

2019
01:34:24,760 --> 01:34:26,000
and you figure out the force.

2020
01:34:26,000 --> 01:34:28,040
And you assign that value to the force.

2021
01:34:28,040 --> 01:34:30,440
In medallica, there's almost none of this.

2022
01:34:30,440 --> 01:34:32,360
It's equations, not assignments.

2023
01:34:32,360 --> 01:34:34,440
And what I mean by that is this equation

2024
01:34:34,440 --> 01:34:35,600
can be written in any which way.

2025
01:34:35,600 --> 01:34:38,720
As long as your system has the same number of equations

2026
01:34:38,760 --> 01:34:41,680
as unknowns, the tool that you're using

2027
01:34:41,680 --> 01:34:44,640
will interpret the language and will solve your problem.

2028
01:34:44,640 --> 01:34:47,680
So you can write this in any which way you want in any order.

2029
01:34:47,680 --> 01:34:51,120
As long as your problem is properly constrained,

2030
01:34:51,120 --> 01:34:53,680
the tool that you're using will interpret it and solve

2031
01:34:53,680 --> 01:34:54,640
the problem for you.

2032
01:34:58,040 --> 01:35:02,440
So just to go into a little bit more detail,

2033
01:35:02,440 --> 01:35:06,600
all of medallica's and also of a-causal modeling language

2034
01:35:06,600 --> 01:35:09,040
that I'll mention in a little bit, which is one of them

2035
01:35:09,040 --> 01:35:11,040
is Simscape.

2036
01:35:11,040 --> 01:35:12,840
Models have essentially three parts.

2037
01:35:12,840 --> 01:35:15,760
They're designed to be extremely simple.

2038
01:35:15,760 --> 01:35:19,800
The first, like Mark mentioned, are ports.

2039
01:35:19,800 --> 01:35:24,680
It's essentially identical to SSML in a way.

2040
01:35:24,680 --> 01:35:27,600
Ports are the ways with which components

2041
01:35:27,600 --> 01:35:31,880
can share information, material, or energy, for example.

2042
01:35:31,880 --> 01:35:33,880
You can define any kind of port you want.

2043
01:35:33,880 --> 01:35:35,240
All you need to really do is define

2044
01:35:35,240 --> 01:35:37,400
what kind of parameters it carries, like for gas,

2045
01:35:37,400 --> 01:35:39,400
for example, temperature, pressure, and mass flow,

2046
01:35:39,400 --> 01:35:42,960
or for electrical ports, voltage, and current.

2047
01:35:42,960 --> 01:35:44,960
The second part of any kind of model

2048
01:35:44,960 --> 01:35:47,600
that you're building in medallica or Simscape,

2049
01:35:47,600 --> 01:35:49,120
which I'll mention a little later,

2050
01:35:49,120 --> 01:35:51,240
are variables and parameters, so you just declare those.

2051
01:35:51,240 --> 01:35:53,000
And the third part are governing equations.

2052
01:35:53,000 --> 01:35:55,360
The point is that there's nothing else.

2053
01:35:55,360 --> 01:35:57,840
It's just that.

2054
01:35:57,840 --> 01:36:01,720
And I'll just briefly go through a very, very simple example.

2055
01:36:01,720 --> 01:36:04,720
So for example, a capacitor.

2056
01:36:04,720 --> 01:36:06,680
This is the entire code for a capacitor,

2057
01:36:06,680 --> 01:36:10,600
and this is what will generate a visual image of a capacitor

2058
01:36:10,600 --> 01:36:13,640
with the correct ports for you.

2059
01:36:13,640 --> 01:36:18,040
First, you have pins that carry voltage and current.

2060
01:36:18,040 --> 01:36:20,640
So the key thing to notice here is

2061
01:36:20,640 --> 01:36:23,440
that there are fundamentally two types of variables.

2062
01:36:23,440 --> 01:36:26,960
Flow variables and normal variables here.

2063
01:36:26,960 --> 01:36:30,200
Flow variables are ones through which the Kirchhoff's current

2064
01:36:30,200 --> 01:36:30,760
law applies.

2065
01:36:30,760 --> 01:36:33,640
So mass flow, for example, every time

2066
01:36:33,640 --> 01:36:36,040
you connect 15 components together in a network,

2067
01:36:36,040 --> 01:36:39,160
mass flow into that network needs to be conserved.

2068
01:36:39,160 --> 01:36:43,040
So the sum of mass flows into any node has to be 0.

2069
01:36:43,040 --> 01:36:46,360
That doesn't apply to the standard variables.

2070
01:36:49,480 --> 01:36:54,680
So then you essentially define the parameters of variables,

2071
01:36:54,680 --> 01:36:57,200
and you need to define the governing equations,

2072
01:36:57,200 --> 01:36:58,960
and that's the capacitor for you.

2073
01:36:58,960 --> 01:37:01,040
There are slightly more complicated components

2074
01:37:01,040 --> 01:37:05,480
that you can use, for example, a pressure drop component.

2075
01:37:05,480 --> 01:37:06,920
Did I lose my sharing?

2076
01:37:06,920 --> 01:37:08,840
No.

2077
01:37:08,840 --> 01:37:10,680
In this case, the interesting thing

2078
01:37:10,680 --> 01:37:12,560
is the main thing to take away from this one

2079
01:37:12,560 --> 01:37:15,000
is that if you have complicated mathematics describing

2080
01:37:15,000 --> 01:37:16,920
the fluid mechanics in a component,

2081
01:37:16,920 --> 01:37:19,480
you can actually initialize with one model

2082
01:37:19,480 --> 01:37:21,880
and then go to a full turbulent simulation.

2083
01:37:21,880 --> 01:37:25,120
That's what this is doing here.

2084
01:37:25,120 --> 01:37:30,800
So just to get to the tool side of the equation,

2085
01:37:30,800 --> 01:37:32,360
the language I just showed you, it's

2086
01:37:32,360 --> 01:37:34,040
the same across all the tools.

2087
01:37:34,040 --> 01:37:35,200
But there are many different tools

2088
01:37:35,200 --> 01:37:38,080
which you can use free and commercial to actually

2089
01:37:38,080 --> 01:37:40,720
run these models.

2090
01:37:40,720 --> 01:37:44,800
The main one that you'll be using if you want to get deeper

2091
01:37:44,800 --> 01:37:46,040
into this is open medelica.

2092
01:37:46,040 --> 01:37:47,120
It's free.

2093
01:37:47,120 --> 01:37:49,560
It's actually become quite user friendly,

2094
01:37:49,560 --> 01:37:53,680
and there's a link in the slides with which

2095
01:37:53,680 --> 01:37:55,600
from which you can download it.

2096
01:37:55,600 --> 01:37:57,120
There's one from Wolfram.

2097
01:37:57,120 --> 01:38:00,280
It's integrated with Mathematica,

2098
01:38:00,280 --> 01:38:03,000
which is quite useful, and there's a free trial of it as well.

2099
01:38:03,000 --> 01:38:05,800
There's Daimler, there are other ones.

2100
01:38:05,800 --> 01:38:07,760
But mainly, I think open medelica is the one

2101
01:38:07,760 --> 01:38:10,080
that you guys will be using.

2102
01:38:10,080 --> 01:38:13,520
OK, Sonar, I think we're actually going to wrap up,

2103
01:38:13,520 --> 01:38:14,600
and then have you back next week.

2104
01:38:14,600 --> 01:38:15,640
Are you around next week?

2105
01:38:15,640 --> 01:38:16,880
Yeah, yeah, sure.

2106
01:38:16,880 --> 01:38:21,800
So here's, just stay around.

2107
01:38:21,800 --> 01:38:27,400
So basically, we're going to finish this lecture next week.

2108
01:38:27,400 --> 01:38:29,640
I think it's important enough that you really

2109
01:38:29,640 --> 01:38:31,720
see the demo and see sort of the,

2110
01:38:31,720 --> 01:38:34,240
and it actually ties in kind of nicely with,

2111
01:38:34,240 --> 01:38:36,840
next week's topic is concept generation, right?

2112
01:38:36,840 --> 01:38:39,680
This is the next step in the V. And since, you know,

2113
01:38:39,680 --> 01:38:42,080
Narik, your research is also in concept generation,

2114
01:38:42,080 --> 01:38:44,360
it'll tie in nicely.

2115
01:38:44,360 --> 01:38:47,000
So I think we're going to stop here for today.

2116
01:38:47,000 --> 01:38:50,440
So you heard about the general idea of system modeling

2117
01:38:50,440 --> 01:38:54,160
languages that are rigorous, that have ontology, syntax,

2118
01:38:54,160 --> 01:38:55,840
and semantics.

2119
01:38:55,840 --> 01:38:58,320
There's different of these that have been proposed,

2120
01:38:58,320 --> 01:39:00,680
developed, some are used more than others.

2121
01:39:00,680 --> 01:39:03,040
There's really important differences between them.

2122
01:39:03,040 --> 01:39:05,560
So OPM is very conceptual.

2123
01:39:05,560 --> 01:39:09,920
CISML is based on UML, and has these different type

2124
01:39:09,920 --> 01:39:12,960
of diagrams, and can really help you flesh out

2125
01:39:12,960 --> 01:39:14,640
your design in more detail.

2126
01:39:14,640 --> 01:39:17,120
And then Medellica allows you to build these blocks.

2127
01:39:17,120 --> 01:39:20,960
It's acausal or declarative, and you can actually

2128
01:39:20,960 --> 01:39:25,920
simulate the physics of the system pretty readily.

2129
01:39:25,920 --> 01:39:29,240
So the big picture here, just to wrap up here,

2130
01:39:29,240 --> 01:39:32,200
the big picture is the following.

2131
01:39:32,200 --> 01:39:34,640
And we'll come back to this next week.

2132
01:39:34,640 --> 01:39:39,680
The big picture is basically that system engineering

2133
01:39:39,680 --> 01:39:41,880
is in a transition phase.

2134
01:39:41,880 --> 01:39:44,280
The classic way of doing system engineering, really,

2135
01:39:44,280 --> 01:39:48,400
for the last 50 years, is on the left, document-centric.

2136
01:39:48,400 --> 01:39:51,840
You know, write your requirements, do your drawings.

2137
01:39:51,840 --> 01:39:55,240
Even CAD, you know, computer-aided design, is great,

2138
01:39:55,240 --> 01:39:57,600
but it only essentially does the mechanical part

2139
01:39:57,600 --> 01:39:59,040
of the design, right?

2140
01:39:59,040 --> 01:40:02,200
And so the result of that is, as you get even REXIS,

2141
01:40:02,200 --> 01:40:05,880
so REXIS is a box like shoebox size, basically,

2142
01:40:05,880 --> 01:40:08,920
and it's going to fit on a much bigger spacecraft,

2143
01:40:08,920 --> 01:40:11,040
and you saw how much complexity is there.

2144
01:40:11,040 --> 01:40:13,280
And it gets very, very difficult to manage

2145
01:40:13,280 --> 01:40:16,000
all this information, to prevent errors,

2146
01:40:16,000 --> 01:40:19,400
oversights, any change that you make.

2147
01:40:19,400 --> 01:40:22,920
It doesn't propagate automatically in these documents.

2148
01:40:22,920 --> 01:40:26,360
So the transition is happening to the right side,

2149
01:40:26,360 --> 01:40:30,400
a model-centric way to do system engineering,

2150
01:40:30,400 --> 01:40:33,080
as think of paperless engineering.

2151
01:40:33,080 --> 01:40:35,720
Everything you're doing is in a model.

2152
01:40:35,720 --> 01:40:38,920
The models are linked, the models are executable,

2153
01:40:38,920 --> 01:40:42,240
the models automatically propagate any changes

2154
01:40:42,240 --> 01:40:44,880
that you make, you know, in requirements or design.

2155
01:40:44,880 --> 01:40:46,800
We're not quite there yet, but that

2156
01:40:46,800 --> 01:40:48,960
is where things are moving.

2157
01:40:48,960 --> 01:40:51,760
And so keep that in mind.

2158
01:40:51,760 --> 01:40:53,600
So there's no new assignment this week.

2159
01:40:53,600 --> 01:40:57,000
So next week, we have A2, which is due, the requirements.

2160
01:40:57,000 --> 01:40:58,320
Please let us know if you have any.

2161
01:40:58,320 --> 01:40:59,240
We're here for you.

2162
01:40:59,240 --> 01:41:02,360
So I'm going to have office hours now on the WebEx.

2163
01:41:02,360 --> 01:41:03,200
You have the link.

2164
01:41:05,800 --> 01:41:07,680
If you have any questions about A2,

2165
01:41:07,680 --> 01:41:10,440
don't be shy to email me or, you know,

2166
01:41:10,440 --> 01:41:13,640
Juana or Lieslu at EPFL.

2167
01:41:13,640 --> 01:41:15,360
We're really here to answer your questions.

2168
01:41:15,360 --> 01:41:17,720
So next week, topic we're going to finish

2169
01:41:17,720 --> 01:41:20,640
on modelica and concept generation

2170
01:41:20,640 --> 01:41:23,520
is going to be sort of our creativity, concept generation

2171
01:41:23,520 --> 01:41:25,120
is our main topic next week.

