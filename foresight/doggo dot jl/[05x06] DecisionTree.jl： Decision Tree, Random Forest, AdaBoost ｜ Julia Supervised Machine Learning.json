{"text": " Last week, we learned about the Support Vector Machine, which is a powerful algorithm with a science-fiction feel. But despite its usefulness, it can be difficult to understand and even more difficult to explain. What if I told you that there's another supervised machine learning algorithm that's also powerful and useful, but is grounded in real life so that it's much easier to understand and much easier to explain? That algorithm is the Decision Tree. The Decision Tree algorithm is one of the most popular machine learning algorithms in use today, but it's different than any of the algorithms that we've studied so far. What makes the Decision Tree algorithm so different? Well, let's find out. Welcome to Julia for Talented Amateurs, where I may call some Julia tutorials for Talented Amateurs everywhere. I am your host, TheDabblingDoggo. I dabble. For those of you who are visual learners, you're going to love the Decision Tree. While other machine learning algorithms can be highly abstract and difficult to visualize, the Decision Tree is just the opposite. The way a Decision Tree works is similar to how you might make decisions every day. The idea is that you can make a big decision based on a collection of little decisions. For example, if you're about to go outside during the rainy season, you might wonder, should I bring an umbrella? Before answering that question, your brain may ask a collection of smaller questions first. For example, it might ask a simple yes or no question like, is it raining now? If the answer is yes, then it tells you to bring an umbrella. If the answer is no, then it might ask another simple question like, is it forecasted to rain later today? If the answer is yes, it tells you to bring an umbrella. If the answer is no, then it tells you that you don't need to bring an umbrella. Whether you're conscious of these micro-decisions or not, your brain is going through a similar thought process as you make countless decisions throughout your day. What if you could build a computer model that followed that thought process to help your computer make decisions? That's the idea behind the Decision Tree algorithm. The Decision Tree is used in several different academic disciplines, but in machine learning, it's typically used for supervised machine learning. The Decision Tree may be used for either classification or regression, but in this tutorial, I will only be covering Decision Trees for classification. As an academic subject, Decision Trees have been around for over 100 years, but more recently, Decision Trees have been adapted for the computer age. There are several different Decision Tree algorithms used in machine learning, but the version that we will be using is called Classification and Regression Trees, or CART for short. The first version of the CART algorithm was completed in 1977 by Leo Breiman and Charles Stone from UC Berkeley and Jerome Friedman and Richard Olsson from Stanford University. In 1984, they published a book appropriately named Classification and Regression Trees, which detailed both the concepts and the mechanics of constructing Decision Trees. Decision Trees are typically visualized using some form of graph theory representation, meaning a visual combination of nodes and edges. Decision Trees are inverted trees with a root node at the top. A root node contains all of the data in the training data sets. For a binary decision, there are two edges coming out of the root node, typically representing a yes-no or true-false decision. These edges are also called branches. Connected to those branches will be another node. This time, the node may either be a leaf node or a decision node. A leaf node contains a subset of the training data and represents a final classification, so there are no further decisions to be made for that subset. A decision node also contains a subset of the training data set, but requires additional decisions to be made. Like the root node, the decision node has two edges coming out of it to represent a different yes-no or true-false question. Unless given constraints, the Decision Tree algorithm will continue this process of interrogating the data and growing the tree until every sample of data has been classified. Since the objective of using a Decision Tree algorithm is to create a model that can be used to make predictions on unseen data, it's a good practice to place some constraints on the Decision Tree algorithm so that it stops going through your data at some point. That way, you can have a more generalized model that you can use to classify new unseen data. Now that you know what a Decision Tree looks like, let's build one using the DecisionTree.jl package. While the Decision Tree is easy to visualize, it is surprisingly difficult to implement the code from scratch, so we'll be using the DecisionTree.jl package. DecisionTree.jl was created by Ben Sadeghi. On the surface, DecisionTree.jl seems like a simple package, but the more you dig into it, the more you'll understand how sophisticated it really is. DecisionTree.jl is not a wrapper to a library written in a different language. Instead, DecisionTree.jl is a pure Julia implementation of the CART algorithm. Let's start by setting up our programming environment. For today's tutorial, knowledge of Julia and VS Code is required. I'm also assuming that you're watching this entire machine learning playlist, so episodes 501 through 505 are required. In your VS Code Explorer panel, create a new folder for this tutorial. In the tutorial folder, create a new file called SL underscore trees.jl. Launch the Julia REPL by using ALT J, then ALT O. For this tutorial, I think it's useful to dock the REPL panel to the right side panel. This is optional, but we will be referring to the REPL throughout this tutorial. In order to dock the REPL to the right side panel, you can click and drag the REPL panel header until your mouse reaches the right edge of your window. A panel highlight should appear indicating that you can dock it there. Once it's docked, you can adjust the panel size to your liking. For those of you who use Julia's workspace panel, you can also dock the workspace panel in the right side panel if you wish. In the REPL, change the present working directory to your tutorial directory. Enter the package REPL by hitting the closing square bracket. Activate your tutorial directory. Add the decision tree.jl package. Type in status to confirm the version number. Exit the package REPL by hitting Backspace. Adjust the panels in VS Code so that you can see both your text editor as well as the REPL panel. Okay, let's get started. Let's start by loading some packages. Next, let's load some data. We'll be using the iris dataset as our motivating example to learn how to make predictions using decision trees. The decision tree.jl package comes included with its own version of the iris flower dataset. For some reason, there are some slight differences between this dataset and the one we used last week from the rdatasets package. It's not a material difference and it won't change the outcome of our models, but I did want to let you know that these are not identical datasets. The load underscore data function is from the decision tree.jl package and it splits the data for you between inputs and outputs. But if you view the data, you'll see that there are no Julia data types assigned to that data. As you can see, both the inputs and the outputs have a data type of any. In order to improve performance, the decision tree.jl package recommends assigning data types to your data before building any models. This dataset should look familiar to you. In this particular dataset, there is no header row, but as a reminder, the first four columns are the features, which are the various measurements and centimeters. And the fifth column contains the labeled class data, which is one of three classes. Satosa, Versicolor, or Virginica, which are the three different species of the iris flower. Next, we will need to split this data between training and testing. In order to do this, we'll be using Huda Nassar's code from last week. I am simply going to copy and paste this code from last week's tutorial so that you won't have to watch me retype this code. I'm going to go through the next few steps fairly quickly, since it's the same workflow that we used last week. I'm using the same random seed that I used last week, so the index numbers we used this week for training and testing should be the same. Next, we need to split the features between training and testing. I'm using the same random seed that I used last week, so the index numbers we used this week for training and testing should be the same as we used last week. Next, we need to split the features between training and testing. And then, we need to split the classes between training and testing. Unlike last week, we do not need to transpose our data, since the DecisionTree.jl package does not require it. Okay, we are now ready to build our first DecisionTree. In order to create a DecisionTree, all you need to do is use the DecisionTree classifier constructor. There are a lot of different keyword arguments that you can include in this constructor, but I'm only using the max underscore depth keyword argument, which will stop the tree from growing too large. You can find all of the available keyword arguments in the DecisionTree.jl documentation. The DecisionTree.jl package also includes a DecisionTree regressor constructor, which is used for regression problems, but I will only be covering the classifier in this tutorial. The rest of the workflow is very similar to the workflow that we use for SVM. You can fit your training data to the model by using the FitBang function. And that's it! You can see your DecisionTree in the REPL by using the print underscore tree function. I know it doesn't look like much, but there's a lot of information in this compact output. Here's the visualization of that output. The top line of the output is the root node. The algorithm has scanned all of the features and has determined that splitting feature number 4, or the fourth column, will provide the most useful information. The algorithm has selected a value of 0.8 as the threshold. Samples that have a feature 4 value of less than 0.8 go into the left node, and everything else goes into the right node. With the left node, the algorithm has determined that no further splits are required. This left node is a leaf node, and the classification is Satosa. The 35 slash 35 means that 35 samples have a class label of Satosa out of 35 total samples. The right node is a Decision node, since the algorithm has determined that more information may be gained by splitting the data further. For this subset of data, the algorithm has determined that splitting feature number 3, or the third column, will yield the most useful information, and it has selected a value of 4.95 as the threshold. Samples with a feature 3 value of less than 4.95 go into the left node, and everything else goes into the right node. At this point, the tree stops growing because we use the keyword argument max underscore depth equals 2. If we didn't use that keyword argument, the tree would continue to grow until the algorithm determined its own stopping point. As a result, the last two nodes are leaf nodes by default. For the left node, the algorithm is classifying that data subset as VersaColor, and for the right node, the algorithm is classifying that data subset as Virginia. But the algorithm knows that there are some misclassifications. In the left node, the 25 slash 26 means that 25 samples have a class label of VersaColor out of 26 total samples, meaning there's one sample that has been misclassified. In the right node, that 32 slash 33 means that 32 samples have a class label of Virginia out of 33 total samples, meaning there's one sample that has been misclassified. In order to get a better understanding of what the algorithm is looking at, let's take a look at the actual data subsets. Let's start by looking at the training data, which is what the root node is looking at. This data subset contains 94 samples. If you add up all the numbers in the decision tree nodes, you should get 94. If you sort column 4, you can see why the algorithm selected 0.8 as the threshold for feature number 4. It doesn't matter if it's less than or less than or equal to 0.8. As you can see, none of the samples have a feature 4 value of 0.8. Instead, there's a clear dividing line between the values of 0.6 and 1. 0.8 is just the average between those two values. There are 35 samples above the line, and all of them have a class label of Satosa. That's where the 35 slash 35 comes from. Now, let's take a closer look at the data subset that was sent to the decision node on the right. This subset contains 59 samples, and the class labels are either VersaColor or Virginica. If you sort on column 3, you'll see why the algorithm selected 4.95 as the threshold. There is no sample with a feature 3 value of 4.95. Instead, there's a clear dividing line between 4.9 and 5, so 4.95 is just the average. There are 26 samples above the line, and 33 samples below the line. Out of the samples above the line, 25 have a class label of VersaColor, which is where the 25 slash 26 comes from. And of the samples below the line, 32 have a class label of Virginica, which is where the 32 slash 33 comes from. So in each class, there's one sample that has been misclassified. You can see the misclassified samples in this data view. Being able to visualize this much detail is unlike any machine learning algorithm that we've used in the past, which is one of the reasons why decision trees are so popular. But we already know that this model has some mistakes in it, so let's see how well it does at making predictions. Like last week, you can make predictions by using the predict function. Now that we have a prediction, we can check the accuracy of that prediction. So this accuracy score of 89% is not very good. You'll recall that our SVM model got an accuracy score of 95% right out of the box. It seems like all of this transparency came at a price. Although decision trees are easy to understand and easy to explain, they are often not very good at making predictions, which of course is the primary reason for building machine learning classification models in the first place. Let's take a deeper dive into the misclassifications to gain a better understanding of what went wrong. A common analytic tool used in machine learning is called a confusion matrix. A confusion matrix provides a simple way to visualize where your model got confused while making predictions. The decisionTree.jl package comes included with a confusion matrix constructor. The way to read this confusion matrix is that the classes from the first arguments are in the rows, and the classes from the second arguments are in the columns. So since we used y underscore test as the first argument, the rows show the counts for the actual labeled data that we used for testing purposes. Since we used y underscore hat as the second argument, the columns show the classes predicted by our decision tree model. The numbers shown along the diagonal are the correct predictions, and any other number represents an incorrect prediction. For example, that one indicates that our model predicted for genica once when the actual labeled class was versicolor. That five indicates that our model predicted versicolor five times when the actual labeled class was virginica. The accuracy score shown here matches the accuracy score that we calculated manually. The kappa coefficient is a metric that you can derive from this confusion matrix. I won't go into the math, but the kappa coefficient offers a more nuanced assessment of your model's predictive abilities. When making predictions, there's always a possibility that your model made a correct prediction purely by chance, thus artificially inflating the accuracy score. The kappa coefficient attempts to remove the probability of random positive predictions in order to present a more conservative way to assess your model's performance. As you can see, after factoring out the probability of making a correct prediction just by getting lucky, the accuracy score is closer to 83%. We can see the incorrect predictions using the same code that we used last week to display the results. As a reminder, the first column contains the predictions, and the second column contains the class from the labeled test data, and the third column indicates whether or not the prediction was correct. If you sort on column three, you can see there's one sample where our model predicted virginica when the actual species was versicolor. And there are five samples where our model predicted versicolor when the actual species was virginica, which is consistent with what the confusion matrix showed. You'll recall from last week that the SVM model is non-probabilistic, meaning that it makes predictions without assigning probabilities. The decision tree algorithm is different. You can see the probabilities determined by the decision tree model by using the predict underscore proper function. So this display shows the 56 samples in the test data set. Column one is the probability that the test sample has a class label of Satosa. Column two is the probability that the test sample has a class label of versicolor. And column three is the probability that the test sample has a class label of virginica. As you can see, our model is 100% confident that the first 15 samples have a class label of Satosa. But for every other sample, our model is not as confident, since it knows that there's some probability of misclassification. All of the other samples show a 96% probability when predicting either versicolor or virginica. Okay, so now what do we do? The decision tree is great since it's a wealth of information, but it's not so great at making predictions, which is really what we need. The good news is that there are a couple of ways to improve this accuracy score, but like many things in life, those improvements will come with some tradeoffs. One of those tradeoffs is a fundamental concept in machine learning called the bias variance tradeoff. On the surface, the bias variance tradeoff may seem like a relatively easy concept to understand, but upon closer inspection, one learns that it is very nuanced, so it's surprisingly difficult to implement in real life. The bias variance tradeoff is typically visualized by these three diagrams. The diagram on the left is an example of underfitting the data, meaning that it hasn't captured enough of the relevant relationships between features and outputs. The diagram on the right is an example of overfitting the data, meaning that it has learned the training data too well, so that it will make a lot of mistakes when trying to make predictions using new data. The diagram in the middle is an example of a model being just right, meaning that it has captured enough of the relevant relationships between features and outputs, while still being able to be generalized so that it can be used to make predictions using unseen data. So these diagrams are really from the data's perspective, so they aren't necessarily helpful when you're trying to design a model. A different way to visualize the bias variance tradeoff is by looking at these four diagrams, which is from the model's perspective. The lower left diagram shows a model with low bias and low variance, which is the best case scenario. The upper right diagram shows a model with high bias and high variance, which is the worst case scenario. In reality, most models are neither best case nor worst case. Instead, most models fall along that diagonal region between the upper left diagram and the lower right diagram, meaning that your model will most likely have a high bias and low variance, or low bias and high variance. The best that you can hope to achieve is some result near the middle of all four diagrams, resulting in a model with some bias and some variance. The model generated by the decision tree algorithm is an example of a model with high variance and low bias, meaning that it should be placed in that lower right box. Decision trees have a natural tendency to overfit the data, since in theory, it can continue to split your data until it has correctly classified every sample in the training data sets. But that's no good, since you can't generalize such a model, since new unseen data will most likely be different than the training data. You can improve the predictive accuracy of decision trees by using something called ensemble learning. There are two main ensemble learning techniques that are used to improve the performance of decision trees. One is called bagging, and the other is called boosting. We'll cover bagging first. An example of a bagging algorithm is known as random forest. Bagging is a shortened form of the term bootstrap aggregating. Without getting into the details, the concept behind bagging is that you can reduce the variance of your machine learning model by doing two things. One, you can increase the independence of your features, and two, you can increase the number of models. You then take this increased number of models with features that are more independent, then you aggregate them into one metamodel. The result is a model with lower variance, but with a slightly higher bias. This is the bias variance tradeoff in action. One of the best known examples of a bagging algorithm is random forest. The first algorithm for random decision forests was created in 1995 by Tin Cam Ho. The way that random forest works is that it introduces independence between the features and then generates multiple decision tree models. But the random forest introduces even more randomness into the algorithm by only considering a fraction of the features at every split. This results in even more independence between the features, which results in even lower variance. I realize that this is a lot of hand-waving, so let's see random forest in action. Fortunately, we can use the decisionTree.jl package to generate a random forest model. All we need to do is use the random forest classifier constructor to generate our model. By default, this constructor will generate 10 decision trees. You can set the number of decision trees manually by using the n underscore trees keyword argument. After that, the rest of the code is similar to the code that we used for the decision tree model. So, we created a random forest model using the exact same training data that we used earlier and the exact same testing data. This time, we achieved a predictive accuracy score of around 95%, which is a significant improvement over the 89% that we scored earlier and comparable to the SVM model from last week. Just like before, we can view our results on a confusion matrix. As you can see, our random forest model only made 3 misclassifications versus the 6 misclassifications made by the decision tree model. And just like before, we can view the actual mistakes. If you click on the header of column 3, you'll see the 3 misclassifications. It predicted virginica twice when the actual class was versicolor, and it predicted versicolor once when the actual class was virginica. You can also view the probabilities of those predictions. This time, the probabilities look a little different. This random forest model is not as confident as before when it comes to the Satosa class. There are several samples that have a 10% probability of being Satosa. On the flip side, this random forest model is much more confident about the versicolor and virginica predictions, with many samples having 100% probabilities. There are also more probability splits like 90-10, 85-15, 70-30, and so on. Although we can still view some interesting information, unfortunately, we do not have as much access to information as we had with the decision tree model. For example, even though I know that this random forest model generated 20 decision trees, I do not know what those trees look like. Nor do I know what features they used, or what threshold levels were determined. I can no longer present a visualization of what's going on under the hood. So the random forest is kind of like a black box, just like our SVM model from last week. So even though this random forest model is more accurate, it's more difficult to explain. As you are no doubt concluding, creating machine learning models is a series of tradeoffs. Before we conclude for today, let's go through an example of boosting, which is another ensemble learning technique that will reinforce this concept of tradeoffs when creating machine learning models. While bagging is used to lower variance, boosting is generally used to lower bias. While it makes sense to use bagging with decision trees, since decision trees naturally tend to have high variance, it's not immediately clear why using boosting would help improve the performance of decision trees. The motivation behind boosting is to answer the question, can a set of weak learners create a single, strong learner? An example of a weak learner is a classifier that is only slightly better at making predictions compared to a random guess. An example of a boosting algorithm is Adaboost, which is short for adaptive boosting. It was first introduced by Joachim Freund and Robert Shapur in 1997. Adaboost may be used with various learning algorithms, but it seems to pair particularly well with decision trees. Unlike random forests that grow multiple decision trees and then aggregate them to form a new metamodel, Adaboost starts with what is known as a stump, meaning that it's a decision tree with only a root node and two leaf nodes. It's not clear to me how this works for classifications with three classes, like the IRIS dataset, but Adaboost does work for multi-class classification problems. Based on the information gathered by the Adaboost algorithm from that single stump, the algorithm will increase the weights given to the misclassified data so that it can focus on the misclassifications in the next round. The algorithm will then use that new weighted dataset and pass it through another stump and make another set of predictions. Again, the algorithm will increase the weight given to the misclassified data so that it can focus on the remaining misclassified data in the next round. The theory is that by doing this, the algorithm will focus on the samples that are hardest to classify as it continues going through this process. It will repeat this process and add the knowledge it gains from all of these weak learners to form a single, strong metamodel that can be used to make predictions. I realize that this is even more abstract than the random forest, so let's take a look at Adaboost in action. Fortunately, we can use the DecisionTree.jl package to generate an Adaboost model. All we need to do is use the Adaboost Stump classifier constructor to generate our model. This model does not have a default setting for the number of iterations, so you will need to enter that number manually by using the N underscore iterations keyword arguments. Setting the N iterations to 20 means that our model will generate 20 stumps to create one tree, as opposed to creating 20 full trees used in the random forest model. After that, all of the code is exactly the same as the code used in the random forest example, so I'm just going to copy and paste the code from above. So, we created an Adaboost model using the exact same training data and testing data that we used for both the DecisionTree and the random forest. This time, we achieved a predictive accuracy score of around 95%, which is a significant improvement over the 89% of the DecisionTree and comparable to the random forest and SVM models. Like the random forest model, this Adaboost model is sort of a black box. We do not have access to as much information as the DecisionTree model, but we still have access to some information. Just like before, we can view our results on a confusion matrix. The confusion matrix looks exactly the same as the confusion matrix on the random forest model. And the prediction versus actual data looks identical to the random forest, so you may be wondering if anything is different. Let's take a look at the probability distribution of the predictions. So, this looks very different from the DecisionTree and the random forest. Although the Adaboost model had the same predictive accuracy as the random forest model, it is a lot less confident about its predictions. Most of the predictions have a 65-35 splits, or a 70-30 splits. There are even some examples with a 52-48 splits, which is barely better than a coin flip. There's not a single sample with a 100% probability, although there are plenty of samples with a 0% probability. So that's really interesting, isn't it? Both random forest and Adaboost offer the potential for enhanced predictive accuracy, but they approach the problem using very different techniques. We covered a lot of material today, so let's go through a quick summary. While DecisionTrees are relatively easy to visualize and easy to explain, they are surprisingly difficult to implement. They also have some flaws, namely that they are not known for their predictive accuracy and they are prone to overfitting. This led to a discussion about the bias variance trade-off, which will be an ongoing subject of conversation throughout this machine learning series. Through that discussion, we learned that we could potentially enhance the performance of DecisionTrees by using ensemble learning methods, namely bagging and boosting. Bagging is short for bootstrap aggregating, and Random Forest is one of the best known implementations of that method. Random Forest works by using various techniques to increase the independence of features and by increasing the number of DecisionTrees to be used in a metamodel. Boosting, on the other hand, uses an additive approach by using a collection of so-called weak learners to combine into a single strong learner. Adaboost, which is short for adaptive boosting, is a well-known implementation of boosting. Along the way, we were introduced to another analytic tool, the confusion matrix, along with the CAPA coefficients, that we can use to better understand our results. That's a lot to cover in one tutorial, and that's a lot to include in a Julia package. Like I said at the beginning, the DecisionTree.jl package is surprisingly sophisticated and is full of Easter eggs. Please show your appreciation to the developer and the contributors for sharing their knowledge with the rest of us by going to the GitHub page of DecisionTree.jl and leave them a star. Well, that's all for today. If you made it this far, congratulations. If you enjoyed this video and you feel like you learned something new, please give it a thumbs up. For more wholesome Julia tutorials, please be sure to subscribe and hit that bell. If you like what I do, then please consider joining and becoming a channel member. New tutorials are posted on Sundays slash Mondays. Thanks for watching, and I'll see you in the next video.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 7.4, "text": " Last week, we learned about the Support Vector Machine, which is a powerful algorithm with a science-fiction feel.", "tokens": [50364, 5264, 1243, 11, 321, 3264, 466, 264, 18073, 691, 20814, 22155, 11, 597, 307, 257, 4005, 9284, 365, 257, 3497, 12, 32041, 841, 13, 50734], "temperature": 0.0, "avg_logprob": -0.2382815186406525, "compression_ratio": 1.5380952380952382, "no_speech_prob": 0.0037643180694431067}, {"id": 1, "seek": 0, "start": 8.2, "end": 15.3, "text": " But despite its usefulness, it can be difficult to understand and even more difficult to explain.", "tokens": [50774, 583, 7228, 1080, 4420, 1287, 11, 309, 393, 312, 2252, 281, 1223, 293, 754, 544, 2252, 281, 2903, 13, 51129], "temperature": 0.0, "avg_logprob": -0.2382815186406525, "compression_ratio": 1.5380952380952382, "no_speech_prob": 0.0037643180694431067}, {"id": 2, "seek": 0, "start": 16.6, "end": 23.3, "text": " What if I told you that there's another supervised machine learning algorithm that's also powerful and useful,", "tokens": [51194, 708, 498, 286, 1907, 291, 300, 456, 311, 1071, 46533, 3479, 2539, 9284, 300, 311, 611, 4005, 293, 4420, 11, 51529], "temperature": 0.0, "avg_logprob": -0.2382815186406525, "compression_ratio": 1.5380952380952382, "no_speech_prob": 0.0037643180694431067}, {"id": 3, "seek": 2330, "start": 23.5, "end": 30.0, "text": " but is grounded in real life so that it's much easier to understand and much easier to explain?", "tokens": [50374, 457, 307, 23535, 294, 957, 993, 370, 300, 309, 311, 709, 3571, 281, 1223, 293, 709, 3571, 281, 2903, 30, 50699], "temperature": 0.0, "avg_logprob": -0.15602951739207807, "compression_ratio": 1.8020304568527918, "no_speech_prob": 0.009264257736504078}, {"id": 4, "seek": 2330, "start": 32.1, "end": 35.6, "text": " That algorithm is the Decision Tree.", "tokens": [50804, 663, 9284, 307, 264, 12427, 1991, 22291, 13, 50979], "temperature": 0.0, "avg_logprob": -0.15602951739207807, "compression_ratio": 1.8020304568527918, "no_speech_prob": 0.009264257736504078}, {"id": 5, "seek": 2330, "start": 37.4, "end": 43.0, "text": " The Decision Tree algorithm is one of the most popular machine learning algorithms in use today,", "tokens": [51069, 440, 12427, 1991, 22291, 9284, 307, 472, 295, 264, 881, 3743, 3479, 2539, 14642, 294, 764, 965, 11, 51349], "temperature": 0.0, "avg_logprob": -0.15602951739207807, "compression_ratio": 1.8020304568527918, "no_speech_prob": 0.009264257736504078}, {"id": 6, "seek": 2330, "start": 43.900000000000006, "end": 47.8, "text": " but it's different than any of the algorithms that we've studied so far.", "tokens": [51394, 457, 309, 311, 819, 813, 604, 295, 264, 14642, 300, 321, 600, 9454, 370, 1400, 13, 51589], "temperature": 0.0, "avg_logprob": -0.15602951739207807, "compression_ratio": 1.8020304568527918, "no_speech_prob": 0.009264257736504078}, {"id": 7, "seek": 2330, "start": 49.5, "end": 52.5, "text": " What makes the Decision Tree algorithm so different?", "tokens": [51674, 708, 1669, 264, 12427, 1991, 22291, 9284, 370, 819, 30, 51824], "temperature": 0.0, "avg_logprob": -0.15602951739207807, "compression_ratio": 1.8020304568527918, "no_speech_prob": 0.009264257736504078}, {"id": 8, "seek": 5330, "start": 54.199999999999996, "end": 56.4, "text": " Well, let's find out.", "tokens": [50409, 1042, 11, 718, 311, 915, 484, 13, 50519], "temperature": 0.0, "avg_logprob": -0.1937114397684733, "compression_ratio": 1.4715909090909092, "no_speech_prob": 0.0009541934123262763}, {"id": 9, "seek": 5330, "start": 58.9, "end": 65.2, "text": " Welcome to Julia for Talented Amateurs, where I may call some Julia tutorials for Talented Amateurs everywhere.", "tokens": [50644, 4027, 281, 18551, 337, 10516, 6003, 2012, 25929, 11, 689, 286, 815, 818, 512, 18551, 17616, 337, 10516, 6003, 2012, 25929, 5315, 13, 50959], "temperature": 0.0, "avg_logprob": -0.1937114397684733, "compression_ratio": 1.4715909090909092, "no_speech_prob": 0.0009541934123262763}, {"id": 10, "seek": 5330, "start": 65.89999999999999, "end": 68.89999999999999, "text": " I am your host, TheDabblingDoggo.", "tokens": [50994, 286, 669, 428, 3975, 11, 440, 35, 10797, 1688, 35, 664, 1571, 13, 51144], "temperature": 0.0, "avg_logprob": -0.1937114397684733, "compression_ratio": 1.4715909090909092, "no_speech_prob": 0.0009541934123262763}, {"id": 11, "seek": 5330, "start": 69.5, "end": 70.19999999999999, "text": " I dabble.", "tokens": [51174, 286, 28964, 638, 13, 51209], "temperature": 0.0, "avg_logprob": -0.1937114397684733, "compression_ratio": 1.4715909090909092, "no_speech_prob": 0.0009541934123262763}, {"id": 12, "seek": 5330, "start": 71.3, "end": 76.1, "text": " For those of you who are visual learners, you're going to love the Decision Tree.", "tokens": [51264, 1171, 729, 295, 291, 567, 366, 5056, 23655, 11, 291, 434, 516, 281, 959, 264, 12427, 1991, 22291, 13, 51504], "temperature": 0.0, "avg_logprob": -0.1937114397684733, "compression_ratio": 1.4715909090909092, "no_speech_prob": 0.0009541934123262763}, {"id": 13, "seek": 7610, "start": 77.1, "end": 85.19999999999999, "text": " While other machine learning algorithms can be highly abstract and difficult to visualize, the Decision Tree is just the opposite.", "tokens": [50414, 3987, 661, 3479, 2539, 14642, 393, 312, 5405, 12649, 293, 2252, 281, 23273, 11, 264, 12427, 1991, 22291, 307, 445, 264, 6182, 13, 50819], "temperature": 0.0, "avg_logprob": -0.11114998006108981, "compression_ratio": 1.581151832460733, "no_speech_prob": 0.002286718925461173}, {"id": 14, "seek": 7610, "start": 86.5, "end": 91.1, "text": " The way a Decision Tree works is similar to how you might make decisions every day.", "tokens": [50884, 440, 636, 257, 12427, 1991, 22291, 1985, 307, 2531, 281, 577, 291, 1062, 652, 5327, 633, 786, 13, 51114], "temperature": 0.0, "avg_logprob": -0.11114998006108981, "compression_ratio": 1.581151832460733, "no_speech_prob": 0.002286718925461173}, {"id": 15, "seek": 7610, "start": 92.5, "end": 97.89999999999999, "text": " The idea is that you can make a big decision based on a collection of little decisions.", "tokens": [51184, 440, 1558, 307, 300, 291, 393, 652, 257, 955, 3537, 2361, 322, 257, 5765, 295, 707, 5327, 13, 51454], "temperature": 0.0, "avg_logprob": -0.11114998006108981, "compression_ratio": 1.581151832460733, "no_speech_prob": 0.002286718925461173}, {"id": 16, "seek": 9790, "start": 98.9, "end": 106.9, "text": " For example, if you're about to go outside during the rainy season, you might wonder, should I bring an umbrella?", "tokens": [50414, 1171, 1365, 11, 498, 291, 434, 466, 281, 352, 2380, 1830, 264, 27181, 3196, 11, 291, 1062, 2441, 11, 820, 286, 1565, 364, 21925, 30, 50814], "temperature": 0.0, "avg_logprob": -0.16168035619399126, "compression_ratio": 1.6878048780487804, "no_speech_prob": 0.12078318744897842}, {"id": 17, "seek": 9790, "start": 108.4, "end": 113.9, "text": " Before answering that question, your brain may ask a collection of smaller questions first.", "tokens": [50889, 4546, 13430, 300, 1168, 11, 428, 3567, 815, 1029, 257, 5765, 295, 4356, 1651, 700, 13, 51164], "temperature": 0.0, "avg_logprob": -0.16168035619399126, "compression_ratio": 1.6878048780487804, "no_speech_prob": 0.12078318744897842}, {"id": 18, "seek": 9790, "start": 114.4, "end": 119.9, "text": " For example, it might ask a simple yes or no question like, is it raining now?", "tokens": [51189, 1171, 1365, 11, 309, 1062, 1029, 257, 2199, 2086, 420, 572, 1168, 411, 11, 307, 309, 18441, 586, 30, 51464], "temperature": 0.0, "avg_logprob": -0.16168035619399126, "compression_ratio": 1.6878048780487804, "no_speech_prob": 0.12078318744897842}, {"id": 19, "seek": 9790, "start": 121.4, "end": 124.9, "text": " If the answer is yes, then it tells you to bring an umbrella.", "tokens": [51539, 759, 264, 1867, 307, 2086, 11, 550, 309, 5112, 291, 281, 1565, 364, 21925, 13, 51714], "temperature": 0.0, "avg_logprob": -0.16168035619399126, "compression_ratio": 1.6878048780487804, "no_speech_prob": 0.12078318744897842}, {"id": 20, "seek": 12490, "start": 125.9, "end": 133.9, "text": " If the answer is no, then it might ask another simple question like, is it forecasted to rain later today?", "tokens": [50414, 759, 264, 1867, 307, 572, 11, 550, 309, 1062, 1029, 1071, 2199, 1168, 411, 11, 307, 309, 14330, 292, 281, 4830, 1780, 965, 30, 50814], "temperature": 0.0, "avg_logprob": -0.08598907788594563, "compression_ratio": 1.7553956834532374, "no_speech_prob": 0.006588408257812262}, {"id": 21, "seek": 12490, "start": 134.9, "end": 138.9, "text": " If the answer is yes, it tells you to bring an umbrella.", "tokens": [50864, 759, 264, 1867, 307, 2086, 11, 309, 5112, 291, 281, 1565, 364, 21925, 13, 51064], "temperature": 0.0, "avg_logprob": -0.08598907788594563, "compression_ratio": 1.7553956834532374, "no_speech_prob": 0.006588408257812262}, {"id": 22, "seek": 12490, "start": 139.9, "end": 144.9, "text": " If the answer is no, then it tells you that you don't need to bring an umbrella.", "tokens": [51114, 759, 264, 1867, 307, 572, 11, 550, 309, 5112, 291, 300, 291, 500, 380, 643, 281, 1565, 364, 21925, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08598907788594563, "compression_ratio": 1.7553956834532374, "no_speech_prob": 0.006588408257812262}, {"id": 23, "seek": 14490, "start": 145.9, "end": 155.9, "text": " Whether you're conscious of these micro-decisions or not, your brain is going through a similar thought process as you make countless decisions throughout your day.", "tokens": [50414, 8503, 291, 434, 6648, 295, 613, 4532, 12, 42821, 4252, 420, 406, 11, 428, 3567, 307, 516, 807, 257, 2531, 1194, 1399, 382, 291, 652, 19223, 5327, 3710, 428, 786, 13, 50914], "temperature": 0.0, "avg_logprob": -0.06665705272129603, "compression_ratio": 1.6582914572864322, "no_speech_prob": 0.09396214783191681}, {"id": 24, "seek": 14490, "start": 156.9, "end": 162.9, "text": " What if you could build a computer model that followed that thought process to help your computer make decisions?", "tokens": [50964, 708, 498, 291, 727, 1322, 257, 3820, 2316, 300, 6263, 300, 1194, 1399, 281, 854, 428, 3820, 652, 5327, 30, 51264], "temperature": 0.0, "avg_logprob": -0.06665705272129603, "compression_ratio": 1.6582914572864322, "no_speech_prob": 0.09396214783191681}, {"id": 25, "seek": 14490, "start": 163.9, "end": 167.9, "text": " That's the idea behind the Decision Tree algorithm.", "tokens": [51314, 663, 311, 264, 1558, 2261, 264, 12427, 1991, 22291, 9284, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06665705272129603, "compression_ratio": 1.6582914572864322, "no_speech_prob": 0.09396214783191681}, {"id": 26, "seek": 16790, "start": 168.9, "end": 178.9, "text": " The Decision Tree is used in several different academic disciplines, but in machine learning, it's typically used for supervised machine learning.", "tokens": [50414, 440, 12427, 1991, 22291, 307, 1143, 294, 2940, 819, 7778, 21919, 11, 457, 294, 3479, 2539, 11, 309, 311, 5850, 1143, 337, 46533, 3479, 2539, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08847926508995795, "compression_ratio": 1.722543352601156, "no_speech_prob": 0.012619676999747753}, {"id": 27, "seek": 16790, "start": 179.9, "end": 189.9, "text": " The Decision Tree may be used for either classification or regression, but in this tutorial, I will only be covering Decision Trees for classification.", "tokens": [50964, 440, 12427, 1991, 22291, 815, 312, 1143, 337, 2139, 21538, 420, 24590, 11, 457, 294, 341, 7073, 11, 286, 486, 787, 312, 10322, 12427, 1991, 314, 4856, 337, 21538, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08847926508995795, "compression_ratio": 1.722543352601156, "no_speech_prob": 0.012619676999747753}, {"id": 28, "seek": 18990, "start": 190.9, "end": 201.9, "text": " As an academic subject, Decision Trees have been around for over 100 years, but more recently, Decision Trees have been adapted for the computer age.", "tokens": [50414, 1018, 364, 7778, 3983, 11, 12427, 1991, 314, 4856, 362, 668, 926, 337, 670, 2319, 924, 11, 457, 544, 3938, 11, 12427, 1991, 314, 4856, 362, 668, 20871, 337, 264, 3820, 3205, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07657887433704577, "compression_ratio": 1.603864734299517, "no_speech_prob": 0.009266216307878494}, {"id": 29, "seek": 18990, "start": 202.9, "end": 214.9, "text": " There are several different Decision Tree algorithms used in machine learning, but the version that we will be using is called Classification and Regression Trees, or CART for short.", "tokens": [51014, 821, 366, 2940, 819, 12427, 1991, 22291, 14642, 1143, 294, 3479, 2539, 11, 457, 264, 3037, 300, 321, 486, 312, 1228, 307, 1219, 9471, 3774, 293, 4791, 2775, 314, 4856, 11, 420, 383, 15118, 337, 2099, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07657887433704577, "compression_ratio": 1.603864734299517, "no_speech_prob": 0.009266216307878494}, {"id": 30, "seek": 21490, "start": 215.9, "end": 228.9, "text": " The first version of the CART algorithm was completed in 1977 by Leo Breiman and Charles Stone from UC Berkeley and Jerome Friedman and Richard Olsson from Stanford University.", "tokens": [50414, 440, 700, 3037, 295, 264, 383, 15118, 9284, 390, 7365, 294, 35092, 538, 19344, 7090, 25504, 293, 10523, 15012, 490, 14079, 23684, 293, 44965, 17605, 1601, 293, 9809, 6141, 82, 3015, 490, 20374, 3535, 13, 51064], "temperature": 0.0, "avg_logprob": -0.15091574497711965, "compression_ratio": 1.2394366197183098, "no_speech_prob": 0.010011257603764534}, {"id": 31, "seek": 22890, "start": 229.9, "end": 242.9, "text": " In 1984, they published a book appropriately named Classification and Regression Trees, which detailed both the concepts and the mechanics of constructing Decision Trees.", "tokens": [50414, 682, 27127, 11, 436, 6572, 257, 1446, 23505, 4926, 9471, 3774, 293, 4791, 2775, 314, 4856, 11, 597, 9942, 1293, 264, 10392, 293, 264, 12939, 295, 39969, 12427, 1991, 314, 4856, 13, 51064], "temperature": 0.0, "avg_logprob": -0.061708291371663414, "compression_ratio": 1.5198019801980198, "no_speech_prob": 0.034611187875270844}, {"id": 32, "seek": 22890, "start": 244.9, "end": 254.9, "text": " Decision Trees are typically visualized using some form of graph theory representation, meaning a visual combination of nodes and edges.", "tokens": [51164, 12427, 1991, 314, 4856, 366, 5850, 5056, 1602, 1228, 512, 1254, 295, 4295, 5261, 10290, 11, 3620, 257, 5056, 6562, 295, 13891, 293, 8819, 13, 51664], "temperature": 0.0, "avg_logprob": -0.061708291371663414, "compression_ratio": 1.5198019801980198, "no_speech_prob": 0.034611187875270844}, {"id": 33, "seek": 25490, "start": 255.9, "end": 265.9, "text": " Decision Trees are inverted trees with a root node at the top. A root node contains all of the data in the training data sets.", "tokens": [50414, 12427, 1991, 314, 4856, 366, 38969, 5852, 365, 257, 5593, 9984, 412, 264, 1192, 13, 316, 5593, 9984, 8306, 439, 295, 264, 1412, 294, 264, 3097, 1412, 6352, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08552013031423908, "compression_ratio": 1.6404494382022472, "no_speech_prob": 0.006690020672976971}, {"id": 34, "seek": 25490, "start": 267.9, "end": 277.9, "text": " For a binary decision, there are two edges coming out of the root node, typically representing a yes-no or true-false decision.", "tokens": [51014, 1171, 257, 17434, 3537, 11, 456, 366, 732, 8819, 1348, 484, 295, 264, 5593, 9984, 11, 5850, 13460, 257, 2086, 12, 1771, 420, 2074, 12, 36474, 405, 3537, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08552013031423908, "compression_ratio": 1.6404494382022472, "no_speech_prob": 0.006690020672976971}, {"id": 35, "seek": 25490, "start": 278.9, "end": 281.9, "text": " These edges are also called branches.", "tokens": [51564, 1981, 8819, 366, 611, 1219, 14770, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08552013031423908, "compression_ratio": 1.6404494382022472, "no_speech_prob": 0.006690020672976971}, {"id": 36, "seek": 28190, "start": 282.9, "end": 286.9, "text": " Connected to those branches will be another node.", "tokens": [50414, 11653, 292, 281, 729, 14770, 486, 312, 1071, 9984, 13, 50614], "temperature": 0.0, "avg_logprob": -0.07110334578014556, "compression_ratio": 1.5798816568047338, "no_speech_prob": 0.0016481580678373575}, {"id": 37, "seek": 28190, "start": 287.9, "end": 292.9, "text": " This time, the node may either be a leaf node or a decision node.", "tokens": [50664, 639, 565, 11, 264, 9984, 815, 2139, 312, 257, 10871, 9984, 420, 257, 3537, 9984, 13, 50914], "temperature": 0.0, "avg_logprob": -0.07110334578014556, "compression_ratio": 1.5798816568047338, "no_speech_prob": 0.0016481580678373575}, {"id": 38, "seek": 28190, "start": 294.9, "end": 304.9, "text": " A leaf node contains a subset of the training data and represents a final classification, so there are no further decisions to be made for that subset.", "tokens": [51014, 316, 10871, 9984, 8306, 257, 25993, 295, 264, 3097, 1412, 293, 8855, 257, 2572, 21538, 11, 370, 456, 366, 572, 3052, 5327, 281, 312, 1027, 337, 300, 25993, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07110334578014556, "compression_ratio": 1.5798816568047338, "no_speech_prob": 0.0016481580678373575}, {"id": 39, "seek": 30490, "start": 305.9, "end": 313.9, "text": " A decision node also contains a subset of the training data set, but requires additional decisions to be made.", "tokens": [50414, 316, 3537, 9984, 611, 8306, 257, 25993, 295, 264, 3097, 1412, 992, 11, 457, 7029, 4497, 5327, 281, 312, 1027, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07063273446900505, "compression_ratio": 1.5161290322580645, "no_speech_prob": 0.0018384807044640183}, {"id": 40, "seek": 30490, "start": 315.9, "end": 323.9, "text": " Like the root node, the decision node has two edges coming out of it to represent a different yes-no or true-false question.", "tokens": [50914, 1743, 264, 5593, 9984, 11, 264, 3537, 9984, 575, 732, 8819, 1348, 484, 295, 309, 281, 2906, 257, 819, 2086, 12, 1771, 420, 2074, 12, 36474, 405, 1168, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07063273446900505, "compression_ratio": 1.5161290322580645, "no_speech_prob": 0.0018384807044640183}, {"id": 41, "seek": 32390, "start": 323.9, "end": 336.9, "text": " Unless given constraints, the Decision Tree algorithm will continue this process of interrogating the data and growing the tree until every sample of data has been classified.", "tokens": [50364, 16581, 2212, 18491, 11, 264, 12427, 1991, 22291, 9284, 486, 2354, 341, 1399, 295, 24871, 990, 264, 1412, 293, 4194, 264, 4230, 1826, 633, 6889, 295, 1412, 575, 668, 20627, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09452051586574978, "compression_ratio": 1.6170212765957446, "no_speech_prob": 0.05338370427489281}, {"id": 42, "seek": 32390, "start": 338.9, "end": 346.9, "text": " Since the objective of using a Decision Tree algorithm is to create a model that can be used to make predictions on unseen data,", "tokens": [51114, 4162, 264, 10024, 295, 1228, 257, 12427, 1991, 22291, 9284, 307, 281, 1884, 257, 2316, 300, 393, 312, 1143, 281, 652, 21264, 322, 40608, 1412, 11, 51514], "temperature": 0.0, "avg_logprob": -0.09452051586574978, "compression_ratio": 1.6170212765957446, "no_speech_prob": 0.05338370427489281}, {"id": 43, "seek": 34690, "start": 346.9, "end": 354.9, "text": " it's a good practice to place some constraints on the Decision Tree algorithm so that it stops going through your data at some point.", "tokens": [50364, 309, 311, 257, 665, 3124, 281, 1081, 512, 18491, 322, 264, 12427, 1991, 22291, 9284, 370, 300, 309, 10094, 516, 807, 428, 1412, 412, 512, 935, 13, 50764], "temperature": 0.0, "avg_logprob": -0.06134112288312214, "compression_ratio": 1.604878048780488, "no_speech_prob": 0.017981702461838722}, {"id": 44, "seek": 34690, "start": 355.9, "end": 362.9, "text": " That way, you can have a more generalized model that you can use to classify new unseen data.", "tokens": [50814, 663, 636, 11, 291, 393, 362, 257, 544, 44498, 2316, 300, 291, 393, 764, 281, 33872, 777, 40608, 1412, 13, 51164], "temperature": 0.0, "avg_logprob": -0.06134112288312214, "compression_ratio": 1.604878048780488, "no_speech_prob": 0.017981702461838722}, {"id": 45, "seek": 34690, "start": 364.9, "end": 371.9, "text": " Now that you know what a Decision Tree looks like, let's build one using the DecisionTree.jl package.", "tokens": [51264, 823, 300, 291, 458, 437, 257, 12427, 1991, 22291, 1542, 411, 11, 718, 311, 1322, 472, 1228, 264, 12427, 1991, 51, 701, 13, 73, 75, 7372, 13, 51614], "temperature": 0.0, "avg_logprob": -0.06134112288312214, "compression_ratio": 1.604878048780488, "no_speech_prob": 0.017981702461838722}, {"id": 46, "seek": 37190, "start": 372.9, "end": 386.9, "text": " While the Decision Tree is easy to visualize, it is surprisingly difficult to implement the code from scratch, so we'll be using the DecisionTree.jl package.", "tokens": [50414, 3987, 264, 12427, 1991, 22291, 307, 1858, 281, 23273, 11, 309, 307, 17600, 2252, 281, 4445, 264, 3089, 490, 8459, 11, 370, 321, 603, 312, 1228, 264, 12427, 1991, 51, 701, 13, 73, 75, 7372, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10579070551642056, "compression_ratio": 1.4357142857142857, "no_speech_prob": 0.0007552687893621624}, {"id": 47, "seek": 37190, "start": 387.9, "end": 391.9, "text": " DecisionTree.jl was created by Ben Sadeghi.", "tokens": [51164, 12427, 1991, 51, 701, 13, 73, 75, 390, 2942, 538, 3964, 318, 762, 70, 4954, 13, 51364], "temperature": 0.0, "avg_logprob": -0.10579070551642056, "compression_ratio": 1.4357142857142857, "no_speech_prob": 0.0007552687893621624}, {"id": 48, "seek": 39190, "start": 392.9, "end": 402.9, "text": " On the surface, DecisionTree.jl seems like a simple package, but the more you dig into it, the more you'll understand how sophisticated it really is.", "tokens": [50414, 1282, 264, 3753, 11, 12427, 1991, 51, 701, 13, 73, 75, 2544, 411, 257, 2199, 7372, 11, 457, 264, 544, 291, 2528, 666, 309, 11, 264, 544, 291, 603, 1223, 577, 16950, 309, 534, 307, 13, 50914], "temperature": 0.0, "avg_logprob": -0.0437787998290289, "compression_ratio": 1.5505050505050506, "no_speech_prob": 0.0034818542189896107}, {"id": 49, "seek": 39190, "start": 404.9, "end": 409.9, "text": " DecisionTree.jl is not a wrapper to a library written in a different language.", "tokens": [51014, 12427, 1991, 51, 701, 13, 73, 75, 307, 406, 257, 46906, 281, 257, 6405, 3720, 294, 257, 819, 2856, 13, 51264], "temperature": 0.0, "avg_logprob": -0.0437787998290289, "compression_ratio": 1.5505050505050506, "no_speech_prob": 0.0034818542189896107}, {"id": 50, "seek": 39190, "start": 410.9, "end": 416.9, "text": " Instead, DecisionTree.jl is a pure Julia implementation of the CART algorithm.", "tokens": [51314, 7156, 11, 12427, 1991, 51, 701, 13, 73, 75, 307, 257, 6075, 18551, 11420, 295, 264, 383, 15118, 9284, 13, 51614], "temperature": 0.0, "avg_logprob": -0.0437787998290289, "compression_ratio": 1.5505050505050506, "no_speech_prob": 0.0034818542189896107}, {"id": 51, "seek": 41690, "start": 417.9, "end": 420.9, "text": " Let's start by setting up our programming environment.", "tokens": [50414, 961, 311, 722, 538, 3287, 493, 527, 9410, 2823, 13, 50564], "temperature": 0.0, "avg_logprob": -0.08151806870551959, "compression_ratio": 1.4739336492890995, "no_speech_prob": 0.018258368596434593}, {"id": 52, "seek": 41690, "start": 422.9, "end": 426.9, "text": " For today's tutorial, knowledge of Julia and VS Code is required.", "tokens": [50664, 1171, 965, 311, 7073, 11, 3601, 295, 18551, 293, 25091, 15549, 307, 4739, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08151806870551959, "compression_ratio": 1.4739336492890995, "no_speech_prob": 0.018258368596434593}, {"id": 53, "seek": 41690, "start": 427.9, "end": 435.9, "text": " I'm also assuming that you're watching this entire machine learning playlist, so episodes 501 through 505 are required.", "tokens": [50914, 286, 478, 611, 11926, 300, 291, 434, 1976, 341, 2302, 3479, 2539, 16788, 11, 370, 9313, 2625, 16, 807, 2625, 20, 366, 4739, 13, 51314], "temperature": 0.0, "avg_logprob": -0.08151806870551959, "compression_ratio": 1.4739336492890995, "no_speech_prob": 0.018258368596434593}, {"id": 54, "seek": 41690, "start": 437.9, "end": 442.9, "text": " In your VS Code Explorer panel, create a new folder for this tutorial.", "tokens": [51414, 682, 428, 25091, 15549, 31895, 4831, 11, 1884, 257, 777, 10820, 337, 341, 7073, 13, 51664], "temperature": 0.0, "avg_logprob": -0.08151806870551959, "compression_ratio": 1.4739336492890995, "no_speech_prob": 0.018258368596434593}, {"id": 55, "seek": 44290, "start": 442.9, "end": 451.9, "text": " In the tutorial folder, create a new file called SL underscore trees.jl.", "tokens": [50364, 682, 264, 7073, 10820, 11, 1884, 257, 777, 3991, 1219, 22999, 37556, 5852, 13, 73, 75, 13, 50814], "temperature": 0.0, "avg_logprob": -0.12558969259262084, "compression_ratio": 1.4871794871794872, "no_speech_prob": 0.002250819932669401}, {"id": 56, "seek": 44290, "start": 453.9, "end": 458.9, "text": " Launch the Julia REPL by using ALT J, then ALT O.", "tokens": [50914, 28119, 264, 18551, 31511, 43, 538, 1228, 7056, 51, 508, 11, 550, 7056, 51, 422, 13, 51164], "temperature": 0.0, "avg_logprob": -0.12558969259262084, "compression_ratio": 1.4871794871794872, "no_speech_prob": 0.002250819932669401}, {"id": 57, "seek": 44290, "start": 460.9, "end": 465.9, "text": " For this tutorial, I think it's useful to dock the REPL panel to the right side panel.", "tokens": [51264, 1171, 341, 7073, 11, 286, 519, 309, 311, 4420, 281, 20929, 264, 31511, 43, 4831, 281, 264, 558, 1252, 4831, 13, 51514], "temperature": 0.0, "avg_logprob": -0.12558969259262084, "compression_ratio": 1.4871794871794872, "no_speech_prob": 0.002250819932669401}, {"id": 58, "seek": 44290, "start": 466.9, "end": 471.9, "text": " This is optional, but we will be referring to the REPL throughout this tutorial.", "tokens": [51564, 639, 307, 17312, 11, 457, 321, 486, 312, 13761, 281, 264, 31511, 43, 3710, 341, 7073, 13, 51814], "temperature": 0.0, "avg_logprob": -0.12558969259262084, "compression_ratio": 1.4871794871794872, "no_speech_prob": 0.002250819932669401}, {"id": 59, "seek": 47290, "start": 473.9, "end": 481.9, "text": " In order to dock the REPL to the right side panel, you can click and drag the REPL panel header until your mouse reaches the right edge of your window.", "tokens": [50414, 682, 1668, 281, 20929, 264, 31511, 43, 281, 264, 558, 1252, 4831, 11, 291, 393, 2052, 293, 5286, 264, 31511, 43, 4831, 23117, 1826, 428, 9719, 14235, 264, 558, 4691, 295, 428, 4910, 13, 50814], "temperature": 0.0, "avg_logprob": -0.05173654623434577, "compression_ratio": 1.615819209039548, "no_speech_prob": 0.00027800240786746144}, {"id": 60, "seek": 47290, "start": 483.9, "end": 487.9, "text": " A panel highlight should appear indicating that you can dock it there.", "tokens": [50914, 316, 4831, 5078, 820, 4204, 25604, 300, 291, 393, 20929, 309, 456, 13, 51114], "temperature": 0.0, "avg_logprob": -0.05173654623434577, "compression_ratio": 1.615819209039548, "no_speech_prob": 0.00027800240786746144}, {"id": 61, "seek": 47290, "start": 489.9, "end": 493.9, "text": " Once it's docked, you can adjust the panel size to your liking.", "tokens": [51214, 3443, 309, 311, 20929, 292, 11, 291, 393, 4369, 264, 4831, 2744, 281, 428, 16933, 13, 51414], "temperature": 0.0, "avg_logprob": -0.05173654623434577, "compression_ratio": 1.615819209039548, "no_speech_prob": 0.00027800240786746144}, {"id": 62, "seek": 49390, "start": 493.9, "end": 503.9, "text": " For those of you who use Julia's workspace panel, you can also dock the workspace panel in the right side panel if you wish.", "tokens": [50364, 1171, 729, 295, 291, 567, 764, 18551, 311, 32706, 4831, 11, 291, 393, 611, 20929, 264, 32706, 4831, 294, 264, 558, 1252, 4831, 498, 291, 3172, 13, 50864], "temperature": 0.0, "avg_logprob": -0.06735747882298061, "compression_ratio": 1.6464088397790055, "no_speech_prob": 0.005384540185332298}, {"id": 63, "seek": 49390, "start": 506.9, "end": 511.9, "text": " In the REPL, change the present working directory to your tutorial directory.", "tokens": [51014, 682, 264, 31511, 43, 11, 1319, 264, 1974, 1364, 21120, 281, 428, 7073, 21120, 13, 51264], "temperature": 0.0, "avg_logprob": -0.06735747882298061, "compression_ratio": 1.6464088397790055, "no_speech_prob": 0.005384540185332298}, {"id": 64, "seek": 49390, "start": 513.9, "end": 516.9, "text": " Enter the package REPL by hitting the closing square bracket.", "tokens": [51364, 10399, 264, 7372, 31511, 43, 538, 8850, 264, 10377, 3732, 16904, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06735747882298061, "compression_ratio": 1.6464088397790055, "no_speech_prob": 0.005384540185332298}, {"id": 65, "seek": 49390, "start": 518.9, "end": 520.9, "text": " Activate your tutorial directory.", "tokens": [51614, 28550, 473, 428, 7073, 21120, 13, 51714], "temperature": 0.0, "avg_logprob": -0.06735747882298061, "compression_ratio": 1.6464088397790055, "no_speech_prob": 0.005384540185332298}, {"id": 66, "seek": 52090, "start": 521.9, "end": 524.9, "text": " Add the decision tree.jl package.", "tokens": [50414, 5349, 264, 3537, 4230, 13, 73, 75, 7372, 13, 50564], "temperature": 0.0, "avg_logprob": -0.14002090181623186, "compression_ratio": 1.4137931034482758, "no_speech_prob": 0.0014775653835386038}, {"id": 67, "seek": 52090, "start": 527.9, "end": 530.9, "text": " Type in status to confirm the version number.", "tokens": [50714, 15576, 294, 6558, 281, 9064, 264, 3037, 1230, 13, 50864], "temperature": 0.0, "avg_logprob": -0.14002090181623186, "compression_ratio": 1.4137931034482758, "no_speech_prob": 0.0014775653835386038}, {"id": 68, "seek": 52090, "start": 532.9, "end": 535.9, "text": " Exit the package REPL by hitting Backspace.", "tokens": [50964, 2111, 270, 264, 7372, 31511, 43, 538, 8850, 5833, 24824, 13, 51114], "temperature": 0.0, "avg_logprob": -0.14002090181623186, "compression_ratio": 1.4137931034482758, "no_speech_prob": 0.0014775653835386038}, {"id": 69, "seek": 52090, "start": 537.9, "end": 542.9, "text": " Adjust the panels in VS Code so that you can see both your text editor as well as the REPL panel.", "tokens": [51214, 34049, 264, 13419, 294, 25091, 15549, 370, 300, 291, 393, 536, 1293, 428, 2487, 9839, 382, 731, 382, 264, 31511, 43, 4831, 13, 51464], "temperature": 0.0, "avg_logprob": -0.14002090181623186, "compression_ratio": 1.4137931034482758, "no_speech_prob": 0.0014775653835386038}, {"id": 70, "seek": 52090, "start": 545.9, "end": 547.9, "text": " Okay, let's get started.", "tokens": [51614, 1033, 11, 718, 311, 483, 1409, 13, 51714], "temperature": 0.0, "avg_logprob": -0.14002090181623186, "compression_ratio": 1.4137931034482758, "no_speech_prob": 0.0014775653835386038}, {"id": 71, "seek": 55090, "start": 550.9, "end": 552.9, "text": " Let's start by loading some packages.", "tokens": [50364, 961, 311, 722, 538, 15114, 512, 17401, 13, 50464], "temperature": 0.0, "avg_logprob": -0.07575528060688692, "compression_ratio": 1.5755813953488371, "no_speech_prob": 0.00034053230774588883}, {"id": 72, "seek": 55090, "start": 558.9, "end": 560.9, "text": " Next, let's load some data.", "tokens": [50764, 3087, 11, 718, 311, 3677, 512, 1412, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07575528060688692, "compression_ratio": 1.5755813953488371, "no_speech_prob": 0.00034053230774588883}, {"id": 73, "seek": 55090, "start": 562.9, "end": 568.9, "text": " We'll be using the iris dataset as our motivating example to learn how to make predictions using decision trees.", "tokens": [50964, 492, 603, 312, 1228, 264, 3418, 271, 28872, 382, 527, 41066, 1365, 281, 1466, 577, 281, 652, 21264, 1228, 3537, 5852, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07575528060688692, "compression_ratio": 1.5755813953488371, "no_speech_prob": 0.00034053230774588883}, {"id": 74, "seek": 55090, "start": 569.9, "end": 575.9, "text": " The decision tree.jl package comes included with its own version of the iris flower dataset.", "tokens": [51314, 440, 3537, 4230, 13, 73, 75, 7372, 1487, 5556, 365, 1080, 1065, 3037, 295, 264, 3418, 271, 8617, 28872, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07575528060688692, "compression_ratio": 1.5755813953488371, "no_speech_prob": 0.00034053230774588883}, {"id": 75, "seek": 57590, "start": 576.9, "end": 584.9, "text": " For some reason, there are some slight differences between this dataset and the one we used last week from the rdatasets package.", "tokens": [50414, 1171, 512, 1778, 11, 456, 366, 512, 4036, 7300, 1296, 341, 28872, 293, 264, 472, 321, 1143, 1036, 1243, 490, 264, 367, 20367, 296, 1385, 7372, 13, 50814], "temperature": 0.0, "avg_logprob": -0.0945645992572491, "compression_ratio": 1.5561797752808988, "no_speech_prob": 0.0016741822473704815}, {"id": 76, "seek": 57590, "start": 585.9, "end": 593.9, "text": " It's not a material difference and it won't change the outcome of our models, but I did want to let you know that these are not identical datasets.", "tokens": [50864, 467, 311, 406, 257, 2527, 2649, 293, 309, 1582, 380, 1319, 264, 9700, 295, 527, 5245, 11, 457, 286, 630, 528, 281, 718, 291, 458, 300, 613, 366, 406, 14800, 42856, 13, 51264], "temperature": 0.0, "avg_logprob": -0.0945645992572491, "compression_ratio": 1.5561797752808988, "no_speech_prob": 0.0016741822473704815}, {"id": 77, "seek": 59390, "start": 594.9, "end": 603.9, "text": " The load underscore data function is from the decision tree.jl package and it splits the data for you between inputs and outputs.", "tokens": [50414, 440, 3677, 37556, 1412, 2445, 307, 490, 264, 3537, 4230, 13, 73, 75, 7372, 293, 309, 37741, 264, 1412, 337, 291, 1296, 15743, 293, 23930, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09309150721575762, "compression_ratio": 1.596774193548387, "no_speech_prob": 0.020957978442311287}, {"id": 78, "seek": 59390, "start": 605.9, "end": 611.9, "text": " But if you view the data, you'll see that there are no Julia data types assigned to that data.", "tokens": [50964, 583, 498, 291, 1910, 264, 1412, 11, 291, 603, 536, 300, 456, 366, 572, 18551, 1412, 3467, 13279, 281, 300, 1412, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09309150721575762, "compression_ratio": 1.596774193548387, "no_speech_prob": 0.020957978442311287}, {"id": 79, "seek": 59390, "start": 612.9, "end": 618.9, "text": " As you can see, both the inputs and the outputs have a data type of any.", "tokens": [51314, 1018, 291, 393, 536, 11, 1293, 264, 15743, 293, 264, 23930, 362, 257, 1412, 2010, 295, 604, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09309150721575762, "compression_ratio": 1.596774193548387, "no_speech_prob": 0.020957978442311287}, {"id": 80, "seek": 61890, "start": 618.9, "end": 631.9, "text": " In order to improve performance, the decision tree.jl package recommends assigning data types to your data before building any models.", "tokens": [50364, 682, 1668, 281, 3470, 3389, 11, 264, 3537, 4230, 13, 73, 75, 7372, 34556, 49602, 1412, 3467, 281, 428, 1412, 949, 2390, 604, 5245, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10328608292799729, "compression_ratio": 1.3435114503816794, "no_speech_prob": 0.0015974566340446472}, {"id": 81, "seek": 61890, "start": 641.9, "end": 644.9, "text": " This dataset should look familiar to you.", "tokens": [51514, 639, 28872, 820, 574, 4963, 281, 291, 13, 51664], "temperature": 0.0, "avg_logprob": -0.10328608292799729, "compression_ratio": 1.3435114503816794, "no_speech_prob": 0.0015974566340446472}, {"id": 82, "seek": 64490, "start": 645.9, "end": 654.9, "text": " In this particular dataset, there is no header row, but as a reminder, the first four columns are the features, which are the various measurements and centimeters.", "tokens": [50414, 682, 341, 1729, 28872, 11, 456, 307, 572, 23117, 5386, 11, 457, 382, 257, 13548, 11, 264, 700, 1451, 13766, 366, 264, 4122, 11, 597, 366, 264, 3683, 15383, 293, 23300, 13, 50864], "temperature": 0.0, "avg_logprob": -0.12812273502349852, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.003221940714865923}, {"id": 83, "seek": 64490, "start": 655.9, "end": 660.9, "text": " And the fifth column contains the labeled class data, which is one of three classes.", "tokens": [50914, 400, 264, 9266, 7738, 8306, 264, 21335, 1508, 1412, 11, 597, 307, 472, 295, 1045, 5359, 13, 51164], "temperature": 0.0, "avg_logprob": -0.12812273502349852, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.003221940714865923}, {"id": 84, "seek": 64490, "start": 661.9, "end": 668.9, "text": " Satosa, Versicolor, or Virginica, which are the three different species of the iris flower.", "tokens": [51214, 5344, 6447, 11, 12226, 299, 36182, 11, 420, 9281, 2262, 11, 597, 366, 264, 1045, 819, 6172, 295, 264, 3418, 271, 8617, 13, 51564], "temperature": 0.0, "avg_logprob": -0.12812273502349852, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.003221940714865923}, {"id": 85, "seek": 66890, "start": 669.9, "end": 674.9, "text": " Next, we will need to split this data between training and testing.", "tokens": [50414, 3087, 11, 321, 486, 643, 281, 7472, 341, 1412, 1296, 3097, 293, 4997, 13, 50664], "temperature": 0.0, "avg_logprob": -0.11589683426751031, "compression_ratio": 1.5654761904761905, "no_speech_prob": 0.008444276638329029}, {"id": 86, "seek": 66890, "start": 675.9, "end": 679.9, "text": " In order to do this, we'll be using Huda Nassar's code from last week.", "tokens": [50714, 682, 1668, 281, 360, 341, 11, 321, 603, 312, 1228, 389, 11152, 426, 640, 289, 311, 3089, 490, 1036, 1243, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11589683426751031, "compression_ratio": 1.5654761904761905, "no_speech_prob": 0.008444276638329029}, {"id": 87, "seek": 66890, "start": 680.9, "end": 687.9, "text": " I am simply going to copy and paste this code from last week's tutorial so that you won't have to watch me retype this code.", "tokens": [50964, 286, 669, 2935, 516, 281, 5055, 293, 9163, 341, 3089, 490, 1036, 1243, 311, 7073, 370, 300, 291, 1582, 380, 362, 281, 1159, 385, 319, 20467, 341, 3089, 13, 51314], "temperature": 0.0, "avg_logprob": -0.11589683426751031, "compression_ratio": 1.5654761904761905, "no_speech_prob": 0.008444276638329029}, {"id": 88, "seek": 68790, "start": 687.9, "end": 694.9, "text": " I'm going to go through the next few steps fairly quickly, since it's the same workflow that we used last week.", "tokens": [50364, 286, 478, 516, 281, 352, 807, 264, 958, 1326, 4439, 6457, 2661, 11, 1670, 309, 311, 264, 912, 20993, 300, 321, 1143, 1036, 1243, 13, 50714], "temperature": 0.0, "avg_logprob": -0.15261967455754516, "compression_ratio": 1.585987261146497, "no_speech_prob": 0.00793684646487236}, {"id": 89, "seek": 68790, "start": 696.9, "end": 705.9, "text": " I'm using the same random seed that I used last week, so the index numbers we used this week for training and testing should be the same.", "tokens": [50814, 286, 478, 1228, 264, 912, 4974, 8871, 300, 286, 1143, 1036, 1243, 11, 370, 264, 8186, 3547, 321, 1143, 341, 1243, 337, 3097, 293, 4997, 820, 312, 264, 912, 13, 51264], "temperature": 0.0, "avg_logprob": -0.15261967455754516, "compression_ratio": 1.585987261146497, "no_speech_prob": 0.00793684646487236}, {"id": 90, "seek": 70590, "start": 706.9, "end": 711.9, "text": " Next, we need to split the features between training and testing.", "tokens": [50414, 3087, 11, 321, 643, 281, 7472, 264, 4122, 1296, 3097, 293, 4997, 13, 50664], "temperature": 0.0, "avg_logprob": -0.2061161714441636, "compression_ratio": 2.027972027972028, "no_speech_prob": 0.028834547847509384}, {"id": 91, "seek": 70590, "start": 712.9, "end": 720.9, "text": " I'm using the same random seed that I used last week, so the index numbers we used this week for training and testing should be the same as we used last week.", "tokens": [50714, 286, 478, 1228, 264, 912, 4974, 8871, 300, 286, 1143, 1036, 1243, 11, 370, 264, 8186, 3547, 321, 1143, 341, 1243, 337, 3097, 293, 4997, 820, 312, 264, 912, 382, 321, 1143, 1036, 1243, 13, 51114], "temperature": 0.0, "avg_logprob": -0.2061161714441636, "compression_ratio": 2.027972027972028, "no_speech_prob": 0.028834547847509384}, {"id": 92, "seek": 70590, "start": 725.9, "end": 730.9, "text": " Next, we need to split the features between training and testing.", "tokens": [51364, 3087, 11, 321, 643, 281, 7472, 264, 4122, 1296, 3097, 293, 4997, 13, 51614], "temperature": 0.0, "avg_logprob": -0.2061161714441636, "compression_ratio": 2.027972027972028, "no_speech_prob": 0.028834547847509384}, {"id": 93, "seek": 73590, "start": 736.9, "end": 741.9, "text": " And then, we need to split the classes between training and testing.", "tokens": [50414, 400, 550, 11, 321, 643, 281, 7472, 264, 5359, 1296, 3097, 293, 4997, 13, 50664], "temperature": 0.0, "avg_logprob": -0.11233922094106674, "compression_ratio": 1.46875, "no_speech_prob": 0.0002199320588260889}, {"id": 94, "seek": 73590, "start": 746.9, "end": 753.9, "text": " Unlike last week, we do not need to transpose our data, since the DecisionTree.jl package does not require it.", "tokens": [50914, 17657, 1036, 1243, 11, 321, 360, 406, 643, 281, 25167, 527, 1412, 11, 1670, 264, 12427, 1991, 51, 701, 13, 73, 75, 7372, 775, 406, 3651, 309, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11233922094106674, "compression_ratio": 1.46875, "no_speech_prob": 0.0002199320588260889}, {"id": 95, "seek": 73590, "start": 756.9, "end": 760.9, "text": " Okay, we are now ready to build our first DecisionTree.", "tokens": [51414, 1033, 11, 321, 366, 586, 1919, 281, 1322, 527, 700, 12427, 1991, 51, 701, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11233922094106674, "compression_ratio": 1.46875, "no_speech_prob": 0.0002199320588260889}, {"id": 96, "seek": 76590, "start": 766.9, "end": 774.9, "text": " In order to create a DecisionTree, all you need to do is use the DecisionTree classifier constructor.", "tokens": [50414, 682, 1668, 281, 1884, 257, 12427, 1991, 51, 701, 11, 439, 291, 643, 281, 360, 307, 764, 264, 12427, 1991, 51, 701, 1508, 9902, 47479, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07020621299743653, "compression_ratio": 1.5759162303664922, "no_speech_prob": 0.0011692881816998124}, {"id": 97, "seek": 76590, "start": 776.9, "end": 788.9, "text": " There are a lot of different keyword arguments that you can include in this constructor, but I'm only using the max underscore depth keyword argument, which will stop the tree from growing too large.", "tokens": [50914, 821, 366, 257, 688, 295, 819, 20428, 12869, 300, 291, 393, 4090, 294, 341, 47479, 11, 457, 286, 478, 787, 1228, 264, 11469, 37556, 7161, 20428, 6770, 11, 597, 486, 1590, 264, 4230, 490, 4194, 886, 2416, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07020621299743653, "compression_ratio": 1.5759162303664922, "no_speech_prob": 0.0011692881816998124}, {"id": 98, "seek": 78890, "start": 789.9, "end": 795.9, "text": " You can find all of the available keyword arguments in the DecisionTree.jl documentation.", "tokens": [50414, 509, 393, 915, 439, 295, 264, 2435, 20428, 12869, 294, 264, 12427, 1991, 51, 701, 13, 73, 75, 14333, 13, 50714], "temperature": 0.0, "avg_logprob": -0.05123610880183077, "compression_ratio": 1.6214953271028036, "no_speech_prob": 0.005729333963245153}, {"id": 99, "seek": 78890, "start": 796.9, "end": 809.9, "text": " The DecisionTree.jl package also includes a DecisionTree regressor constructor, which is used for regression problems, but I will only be covering the classifier in this tutorial.", "tokens": [50764, 440, 12427, 1991, 51, 701, 13, 73, 75, 7372, 611, 5974, 257, 12427, 1991, 51, 701, 1121, 735, 284, 47479, 11, 597, 307, 1143, 337, 24590, 2740, 11, 457, 286, 486, 787, 312, 10322, 264, 1508, 9902, 294, 341, 7073, 13, 51414], "temperature": 0.0, "avg_logprob": -0.05123610880183077, "compression_ratio": 1.6214953271028036, "no_speech_prob": 0.005729333963245153}, {"id": 100, "seek": 78890, "start": 811.9, "end": 816.9, "text": " The rest of the workflow is very similar to the workflow that we use for SVM.", "tokens": [51514, 440, 1472, 295, 264, 20993, 307, 588, 2531, 281, 264, 20993, 300, 321, 764, 337, 31910, 44, 13, 51764], "temperature": 0.0, "avg_logprob": -0.05123610880183077, "compression_ratio": 1.6214953271028036, "no_speech_prob": 0.005729333963245153}, {"id": 101, "seek": 81690, "start": 817.9, "end": 822.9, "text": " You can fit your training data to the model by using the FitBang function.", "tokens": [50414, 509, 393, 3318, 428, 3097, 1412, 281, 264, 2316, 538, 1228, 264, 29263, 33, 656, 2445, 13, 50664], "temperature": 0.0, "avg_logprob": -0.08657520937632365, "compression_ratio": 1.5172413793103448, "no_speech_prob": 0.005059148650616407}, {"id": 102, "seek": 81690, "start": 824.9, "end": 825.9, "text": " And that's it!", "tokens": [50764, 400, 300, 311, 309, 0, 50814], "temperature": 0.0, "avg_logprob": -0.08657520937632365, "compression_ratio": 1.5172413793103448, "no_speech_prob": 0.005059148650616407}, {"id": 103, "seek": 81690, "start": 826.9, "end": 831.9, "text": " You can see your DecisionTree in the REPL by using the print underscore tree function.", "tokens": [50864, 509, 393, 536, 428, 12427, 1991, 51, 701, 294, 264, 31511, 43, 538, 1228, 264, 4482, 37556, 4230, 2445, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08657520937632365, "compression_ratio": 1.5172413793103448, "no_speech_prob": 0.005059148650616407}, {"id": 104, "seek": 81690, "start": 834.9, "end": 839.9, "text": " I know it doesn't look like much, but there's a lot of information in this compact output.", "tokens": [51264, 286, 458, 309, 1177, 380, 574, 411, 709, 11, 457, 456, 311, 257, 688, 295, 1589, 294, 341, 14679, 5598, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08657520937632365, "compression_ratio": 1.5172413793103448, "no_speech_prob": 0.005059148650616407}, {"id": 105, "seek": 81690, "start": 841.9, "end": 843.9, "text": " Here's the visualization of that output.", "tokens": [51614, 1692, 311, 264, 25801, 295, 300, 5598, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08657520937632365, "compression_ratio": 1.5172413793103448, "no_speech_prob": 0.005059148650616407}, {"id": 106, "seek": 84390, "start": 844.9, "end": 847.9, "text": " The top line of the output is the root node.", "tokens": [50414, 440, 1192, 1622, 295, 264, 5598, 307, 264, 5593, 9984, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09498204723481209, "compression_ratio": 1.592814371257485, "no_speech_prob": 0.003537192940711975}, {"id": 107, "seek": 84390, "start": 848.9, "end": 859.9, "text": " The algorithm has scanned all of the features and has determined that splitting feature number 4, or the fourth column, will provide the most useful information.", "tokens": [50614, 440, 9284, 575, 45089, 439, 295, 264, 4122, 293, 575, 9540, 300, 30348, 4111, 1230, 1017, 11, 420, 264, 6409, 7738, 11, 486, 2893, 264, 881, 4420, 1589, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09498204723481209, "compression_ratio": 1.592814371257485, "no_speech_prob": 0.003537192940711975}, {"id": 108, "seek": 84390, "start": 860.9, "end": 865.9, "text": " The algorithm has selected a value of 0.8 as the threshold.", "tokens": [51214, 440, 9284, 575, 8209, 257, 2158, 295, 1958, 13, 23, 382, 264, 14678, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09498204723481209, "compression_ratio": 1.592814371257485, "no_speech_prob": 0.003537192940711975}, {"id": 109, "seek": 86590, "start": 866.9, "end": 875.9, "text": " Samples that have a feature 4 value of less than 0.8 go into the left node, and everything else goes into the right node.", "tokens": [50414, 4832, 2622, 300, 362, 257, 4111, 1017, 2158, 295, 1570, 813, 1958, 13, 23, 352, 666, 264, 1411, 9984, 11, 293, 1203, 1646, 1709, 666, 264, 558, 9984, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08956639906939338, "compression_ratio": 1.6, "no_speech_prob": 0.0156591534614563}, {"id": 110, "seek": 86590, "start": 877.9, "end": 882.9, "text": " With the left node, the algorithm has determined that no further splits are required.", "tokens": [50964, 2022, 264, 1411, 9984, 11, 264, 9284, 575, 9540, 300, 572, 3052, 37741, 366, 4739, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08956639906939338, "compression_ratio": 1.6, "no_speech_prob": 0.0156591534614563}, {"id": 111, "seek": 86590, "start": 883.9, "end": 889.9, "text": " This left node is a leaf node, and the classification is Satosa.", "tokens": [51264, 639, 1411, 9984, 307, 257, 10871, 9984, 11, 293, 264, 21538, 307, 5344, 6447, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08956639906939338, "compression_ratio": 1.6, "no_speech_prob": 0.0156591534614563}, {"id": 112, "seek": 88990, "start": 890.9, "end": 898.9, "text": " The 35 slash 35 means that 35 samples have a class label of Satosa out of 35 total samples.", "tokens": [50414, 440, 6976, 17330, 6976, 1355, 300, 6976, 10938, 362, 257, 1508, 7645, 295, 5344, 6447, 484, 295, 6976, 3217, 10938, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09393414911234153, "compression_ratio": 1.4430379746835442, "no_speech_prob": 0.0013248727191239595}, {"id": 113, "seek": 88990, "start": 900.9, "end": 908.9, "text": " The right node is a Decision node, since the algorithm has determined that more information may be gained by splitting the data further.", "tokens": [50914, 440, 558, 9984, 307, 257, 12427, 1991, 9984, 11, 1670, 264, 9284, 575, 9540, 300, 544, 1589, 815, 312, 12634, 538, 30348, 264, 1412, 3052, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09393414911234153, "compression_ratio": 1.4430379746835442, "no_speech_prob": 0.0013248727191239595}, {"id": 114, "seek": 90890, "start": 909.9, "end": 927.9, "text": " For this subset of data, the algorithm has determined that splitting feature number 3, or the third column, will yield the most useful information, and it has selected a value of 4.95 as the threshold.", "tokens": [50414, 1171, 341, 25993, 295, 1412, 11, 264, 9284, 575, 9540, 300, 30348, 4111, 1230, 805, 11, 420, 264, 2636, 7738, 11, 486, 11257, 264, 881, 4420, 1589, 11, 293, 309, 575, 8209, 257, 2158, 295, 1017, 13, 15718, 382, 264, 14678, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07418048900106679, "compression_ratio": 1.3767123287671232, "no_speech_prob": 0.03903873637318611}, {"id": 115, "seek": 92790, "start": 928.9, "end": 938.9, "text": " Samples with a feature 3 value of less than 4.95 go into the left node, and everything else goes into the right node.", "tokens": [50414, 4832, 2622, 365, 257, 4111, 805, 2158, 295, 1570, 813, 1017, 13, 15718, 352, 666, 264, 1411, 9984, 11, 293, 1203, 1646, 1709, 666, 264, 558, 9984, 13, 50914], "temperature": 0.0, "avg_logprob": -0.06898560101472878, "compression_ratio": 1.5650224215246638, "no_speech_prob": 0.0034831662196666002}, {"id": 116, "seek": 92790, "start": 939.9, "end": 947.9, "text": " At this point, the tree stops growing because we use the keyword argument max underscore depth equals 2.", "tokens": [50964, 1711, 341, 935, 11, 264, 4230, 10094, 4194, 570, 321, 764, 264, 20428, 6770, 11469, 37556, 7161, 6915, 568, 13, 51364], "temperature": 0.0, "avg_logprob": -0.06898560101472878, "compression_ratio": 1.5650224215246638, "no_speech_prob": 0.0034831662196666002}, {"id": 117, "seek": 92790, "start": 948.9, "end": 955.9, "text": " If we didn't use that keyword argument, the tree would continue to grow until the algorithm determined its own stopping point.", "tokens": [51414, 759, 321, 994, 380, 764, 300, 20428, 6770, 11, 264, 4230, 576, 2354, 281, 1852, 1826, 264, 9284, 9540, 1080, 1065, 12767, 935, 13, 51764], "temperature": 0.0, "avg_logprob": -0.06898560101472878, "compression_ratio": 1.5650224215246638, "no_speech_prob": 0.0034831662196666002}, {"id": 118, "seek": 95790, "start": 957.9, "end": 961.9, "text": " As a result, the last two nodes are leaf nodes by default.", "tokens": [50364, 1018, 257, 1874, 11, 264, 1036, 732, 13891, 366, 10871, 13891, 538, 7576, 13, 50564], "temperature": 0.0, "avg_logprob": -0.07281475067138672, "compression_ratio": 1.875, "no_speech_prob": 0.0003799556870944798}, {"id": 119, "seek": 95790, "start": 962.9, "end": 974.9, "text": " For the left node, the algorithm is classifying that data subset as VersaColor, and for the right node, the algorithm is classifying that data subset as Virginia.", "tokens": [50614, 1171, 264, 1411, 9984, 11, 264, 9284, 307, 1508, 5489, 300, 1412, 25993, 382, 12226, 64, 34, 36182, 11, 293, 337, 264, 558, 9984, 11, 264, 9284, 307, 1508, 5489, 300, 1412, 25993, 382, 10956, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07281475067138672, "compression_ratio": 1.875, "no_speech_prob": 0.0003799556870944798}, {"id": 120, "seek": 95790, "start": 976.9, "end": 980.9, "text": " But the algorithm knows that there are some misclassifications.", "tokens": [51314, 583, 264, 9284, 3255, 300, 456, 366, 512, 3346, 11665, 7833, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07281475067138672, "compression_ratio": 1.875, "no_speech_prob": 0.0003799556870944798}, {"id": 121, "seek": 98090, "start": 981.9, "end": 994.9, "text": " In the left node, the 25 slash 26 means that 25 samples have a class label of VersaColor out of 26 total samples, meaning there's one sample that has been misclassified.", "tokens": [50414, 682, 264, 1411, 9984, 11, 264, 3552, 17330, 7551, 1355, 300, 3552, 10938, 362, 257, 1508, 7645, 295, 12226, 64, 34, 36182, 484, 295, 7551, 3217, 10938, 11, 3620, 456, 311, 472, 6889, 300, 575, 668, 3346, 11665, 2587, 13, 51064], "temperature": 0.0, "avg_logprob": -0.05664324760437012, "compression_ratio": 1.3739837398373984, "no_speech_prob": 0.017436135560274124}, {"id": 122, "seek": 99490, "start": 995.9, "end": 1009.9, "text": " In the right node, that 32 slash 33 means that 32 samples have a class label of Virginia out of 33 total samples, meaning there's one sample that has been misclassified.", "tokens": [50414, 682, 264, 558, 9984, 11, 300, 8858, 17330, 11816, 1355, 300, 8858, 10938, 362, 257, 1508, 7645, 295, 10956, 484, 295, 11816, 3217, 10938, 11, 3620, 456, 311, 472, 6889, 300, 575, 668, 3346, 11665, 2587, 13, 51114], "temperature": 0.0, "avg_logprob": -0.0489868232182094, "compression_ratio": 1.564516129032258, "no_speech_prob": 0.050309713929891586}, {"id": 123, "seek": 99490, "start": 1010.9, "end": 1018.9, "text": " In order to get a better understanding of what the algorithm is looking at, let's take a look at the actual data subsets.", "tokens": [51164, 682, 1668, 281, 483, 257, 1101, 3701, 295, 437, 264, 9284, 307, 1237, 412, 11, 718, 311, 747, 257, 574, 412, 264, 3539, 1412, 2090, 1385, 13, 51564], "temperature": 0.0, "avg_logprob": -0.0489868232182094, "compression_ratio": 1.564516129032258, "no_speech_prob": 0.050309713929891586}, {"id": 124, "seek": 101890, "start": 1019.9, "end": 1024.9, "text": " Let's start by looking at the training data, which is what the root node is looking at.", "tokens": [50414, 961, 311, 722, 538, 1237, 412, 264, 3097, 1412, 11, 597, 307, 437, 264, 5593, 9984, 307, 1237, 412, 13, 50664], "temperature": 0.0, "avg_logprob": -0.050689121462264154, "compression_ratio": 1.393103448275862, "no_speech_prob": 0.011329526081681252}, {"id": 125, "seek": 101890, "start": 1030.9, "end": 1034.9, "text": " This data subset contains 94 samples.", "tokens": [50964, 639, 1412, 25993, 8306, 30849, 10938, 13, 51164], "temperature": 0.0, "avg_logprob": -0.050689121462264154, "compression_ratio": 1.393103448275862, "no_speech_prob": 0.011329526081681252}, {"id": 126, "seek": 101890, "start": 1035.9, "end": 1040.9, "text": " If you add up all the numbers in the decision tree nodes, you should get 94.", "tokens": [51214, 759, 291, 909, 493, 439, 264, 3547, 294, 264, 3537, 4230, 13891, 11, 291, 820, 483, 30849, 13, 51464], "temperature": 0.0, "avg_logprob": -0.050689121462264154, "compression_ratio": 1.393103448275862, "no_speech_prob": 0.011329526081681252}, {"id": 127, "seek": 104090, "start": 1040.9, "end": 1050.9, "text": " If you sort column 4, you can see why the algorithm selected 0.8 as the threshold for feature number 4.", "tokens": [50364, 759, 291, 1333, 7738, 1017, 11, 291, 393, 536, 983, 264, 9284, 8209, 1958, 13, 23, 382, 264, 14678, 337, 4111, 1230, 1017, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08191187041146415, "compression_ratio": 1.5031847133757963, "no_speech_prob": 0.016654055565595627}, {"id": 128, "seek": 104090, "start": 1053.9, "end": 1058.9, "text": " It doesn't matter if it's less than or less than or equal to 0.8.", "tokens": [51014, 467, 1177, 380, 1871, 498, 309, 311, 1570, 813, 420, 1570, 813, 420, 2681, 281, 1958, 13, 23, 13, 51264], "temperature": 0.0, "avg_logprob": -0.08191187041146415, "compression_ratio": 1.5031847133757963, "no_speech_prob": 0.016654055565595627}, {"id": 129, "seek": 104090, "start": 1059.9, "end": 1065.9, "text": " As you can see, none of the samples have a feature 4 value of 0.8.", "tokens": [51314, 1018, 291, 393, 536, 11, 6022, 295, 264, 10938, 362, 257, 4111, 1017, 2158, 295, 1958, 13, 23, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08191187041146415, "compression_ratio": 1.5031847133757963, "no_speech_prob": 0.016654055565595627}, {"id": 130, "seek": 106590, "start": 1066.9, "end": 1072.9, "text": " Instead, there's a clear dividing line between the values of 0.6 and 1.", "tokens": [50414, 7156, 11, 456, 311, 257, 1850, 26764, 1622, 1296, 264, 4190, 295, 1958, 13, 21, 293, 502, 13, 50714], "temperature": 0.0, "avg_logprob": -0.06976109232221331, "compression_ratio": 1.4759036144578312, "no_speech_prob": 0.006191832013428211}, {"id": 131, "seek": 106590, "start": 1073.9, "end": 1077.9, "text": " 0.8 is just the average between those two values.", "tokens": [50764, 1958, 13, 23, 307, 445, 264, 4274, 1296, 729, 732, 4190, 13, 50964], "temperature": 0.0, "avg_logprob": -0.06976109232221331, "compression_ratio": 1.4759036144578312, "no_speech_prob": 0.006191832013428211}, {"id": 132, "seek": 106590, "start": 1079.9, "end": 1085.9, "text": " There are 35 samples above the line, and all of them have a class label of Satosa.", "tokens": [51064, 821, 366, 6976, 10938, 3673, 264, 1622, 11, 293, 439, 295, 552, 362, 257, 1508, 7645, 295, 5344, 6447, 13, 51364], "temperature": 0.0, "avg_logprob": -0.06976109232221331, "compression_ratio": 1.4759036144578312, "no_speech_prob": 0.006191832013428211}, {"id": 133, "seek": 106590, "start": 1086.9, "end": 1089.9, "text": " That's where the 35 slash 35 comes from.", "tokens": [51414, 663, 311, 689, 264, 6976, 17330, 6976, 1487, 490, 13, 51564], "temperature": 0.0, "avg_logprob": -0.06976109232221331, "compression_ratio": 1.4759036144578312, "no_speech_prob": 0.006191832013428211}, {"id": 134, "seek": 108990, "start": 1090.9, "end": 1096.9, "text": " Now, let's take a closer look at the data subset that was sent to the decision node on the right.", "tokens": [50414, 823, 11, 718, 311, 747, 257, 4966, 574, 412, 264, 1412, 25993, 300, 390, 2279, 281, 264, 3537, 9984, 322, 264, 558, 13, 50714], "temperature": 0.0, "avg_logprob": -0.12657405892196966, "compression_ratio": 1.375, "no_speech_prob": 0.0031232608016580343}, {"id": 135, "seek": 108990, "start": 1107.9, "end": 1114.9, "text": " This subset contains 59 samples, and the class labels are either VersaColor or Virginica.", "tokens": [51264, 639, 25993, 8306, 24624, 10938, 11, 293, 264, 1508, 16949, 366, 2139, 12226, 64, 34, 36182, 420, 9281, 2262, 13, 51614], "temperature": 0.0, "avg_logprob": -0.12657405892196966, "compression_ratio": 1.375, "no_speech_prob": 0.0031232608016580343}, {"id": 136, "seek": 111490, "start": 1114.9, "end": 1121.9, "text": " If you sort on column 3, you'll see why the algorithm selected 4.95 as the threshold.", "tokens": [50364, 759, 291, 1333, 322, 7738, 805, 11, 291, 603, 536, 983, 264, 9284, 8209, 1017, 13, 15718, 382, 264, 14678, 13, 50714], "temperature": 0.0, "avg_logprob": -0.08342361450195312, "compression_ratio": 1.376543209876543, "no_speech_prob": 0.0006461490993387997}, {"id": 137, "seek": 111490, "start": 1125.9, "end": 1130.9, "text": " There is no sample with a feature 3 value of 4.95.", "tokens": [50914, 821, 307, 572, 6889, 365, 257, 4111, 805, 2158, 295, 1017, 13, 15718, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08342361450195312, "compression_ratio": 1.376543209876543, "no_speech_prob": 0.0006461490993387997}, {"id": 138, "seek": 111490, "start": 1131.9, "end": 1139.9, "text": " Instead, there's a clear dividing line between 4.9 and 5, so 4.95 is just the average.", "tokens": [51214, 7156, 11, 456, 311, 257, 1850, 26764, 1622, 1296, 1017, 13, 24, 293, 1025, 11, 370, 1017, 13, 15718, 307, 445, 264, 4274, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08342361450195312, "compression_ratio": 1.376543209876543, "no_speech_prob": 0.0006461490993387997}, {"id": 139, "seek": 113990, "start": 1140.9, "end": 1145.9, "text": " There are 26 samples above the line, and 33 samples below the line.", "tokens": [50414, 821, 366, 7551, 10938, 3673, 264, 1622, 11, 293, 11816, 10938, 2507, 264, 1622, 13, 50664], "temperature": 0.0, "avg_logprob": -0.12258005142211914, "compression_ratio": 1.9096774193548387, "no_speech_prob": 0.001284202327951789}, {"id": 140, "seek": 113990, "start": 1147.9, "end": 1155.9, "text": " Out of the samples above the line, 25 have a class label of VersaColor, which is where the 25 slash 26 comes from.", "tokens": [50764, 5925, 295, 264, 10938, 3673, 264, 1622, 11, 3552, 362, 257, 1508, 7645, 295, 12226, 64, 34, 36182, 11, 597, 307, 689, 264, 3552, 17330, 7551, 1487, 490, 13, 51164], "temperature": 0.0, "avg_logprob": -0.12258005142211914, "compression_ratio": 1.9096774193548387, "no_speech_prob": 0.001284202327951789}, {"id": 141, "seek": 113990, "start": 1157.9, "end": 1165.9, "text": " And of the samples below the line, 32 have a class label of Virginica, which is where the 32 slash 33 comes from.", "tokens": [51264, 400, 295, 264, 10938, 2507, 264, 1622, 11, 8858, 362, 257, 1508, 7645, 295, 9281, 2262, 11, 597, 307, 689, 264, 8858, 17330, 11816, 1487, 490, 13, 51664], "temperature": 0.0, "avg_logprob": -0.12258005142211914, "compression_ratio": 1.9096774193548387, "no_speech_prob": 0.001284202327951789}, {"id": 142, "seek": 116990, "start": 1170.9, "end": 1175.9, "text": " So in each class, there's one sample that has been misclassified.", "tokens": [50414, 407, 294, 1184, 1508, 11, 456, 311, 472, 6889, 300, 575, 668, 3346, 11665, 2587, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07915215949489646, "compression_ratio": 1.549738219895288, "no_speech_prob": 0.0017544005531817675}, {"id": 143, "seek": 116990, "start": 1176.9, "end": 1180.9, "text": " You can see the misclassified samples in this data view.", "tokens": [50714, 509, 393, 536, 264, 3346, 11665, 2587, 10938, 294, 341, 1412, 1910, 13, 50914], "temperature": 0.0, "avg_logprob": -0.07915215949489646, "compression_ratio": 1.549738219895288, "no_speech_prob": 0.0017544005531817675}, {"id": 144, "seek": 116990, "start": 1182.9, "end": 1189.9, "text": " Being able to visualize this much detail is unlike any machine learning algorithm that we've used in the past,", "tokens": [51014, 8891, 1075, 281, 23273, 341, 709, 2607, 307, 8343, 604, 3479, 2539, 9284, 300, 321, 600, 1143, 294, 264, 1791, 11, 51364], "temperature": 0.0, "avg_logprob": -0.07915215949489646, "compression_ratio": 1.549738219895288, "no_speech_prob": 0.0017544005531817675}, {"id": 145, "seek": 116990, "start": 1190.9, "end": 1193.9, "text": " which is one of the reasons why decision trees are so popular.", "tokens": [51414, 597, 307, 472, 295, 264, 4112, 983, 3537, 5852, 366, 370, 3743, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07915215949489646, "compression_ratio": 1.549738219895288, "no_speech_prob": 0.0017544005531817675}, {"id": 146, "seek": 119390, "start": 1194.9, "end": 1202.9, "text": " But we already know that this model has some mistakes in it, so let's see how well it does at making predictions.", "tokens": [50414, 583, 321, 1217, 458, 300, 341, 2316, 575, 512, 8038, 294, 309, 11, 370, 718, 311, 536, 577, 731, 309, 775, 412, 1455, 21264, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08448368405538892, "compression_ratio": 1.587878787878788, "no_speech_prob": 0.005819152574986219}, {"id": 147, "seek": 119390, "start": 1203.9, "end": 1208.9, "text": " Like last week, you can make predictions by using the predict function.", "tokens": [50864, 1743, 1036, 1243, 11, 291, 393, 652, 21264, 538, 1228, 264, 6069, 2445, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08448368405538892, "compression_ratio": 1.587878787878788, "no_speech_prob": 0.005819152574986219}, {"id": 148, "seek": 119390, "start": 1213.9, "end": 1218.9, "text": " Now that we have a prediction, we can check the accuracy of that prediction.", "tokens": [51364, 823, 300, 321, 362, 257, 17630, 11, 321, 393, 1520, 264, 14170, 295, 300, 17630, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08448368405538892, "compression_ratio": 1.587878787878788, "no_speech_prob": 0.005819152574986219}, {"id": 149, "seek": 121890, "start": 1219.9, "end": 1226.9, "text": " So this accuracy score of 89% is not very good.", "tokens": [50414, 407, 341, 14170, 6175, 295, 31877, 4, 307, 406, 588, 665, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09980598848257492, "compression_ratio": 1.4245810055865922, "no_speech_prob": 0.005553800612688065}, {"id": 150, "seek": 121890, "start": 1228.9, "end": 1234.9, "text": " You'll recall that our SVM model got an accuracy score of 95% right out of the box.", "tokens": [50864, 509, 603, 9901, 300, 527, 31910, 44, 2316, 658, 364, 14170, 6175, 295, 13420, 4, 558, 484, 295, 264, 2424, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09980598848257492, "compression_ratio": 1.4245810055865922, "no_speech_prob": 0.005553800612688065}, {"id": 151, "seek": 121890, "start": 1236.9, "end": 1239.9, "text": " It seems like all of this transparency came at a price.", "tokens": [51264, 467, 2544, 411, 439, 295, 341, 17131, 1361, 412, 257, 3218, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09980598848257492, "compression_ratio": 1.4245810055865922, "no_speech_prob": 0.005553800612688065}, {"id": 152, "seek": 121890, "start": 1241.9, "end": 1245.9, "text": " Although decision trees are easy to understand and easy to explain,", "tokens": [51514, 5780, 3537, 5852, 366, 1858, 281, 1223, 293, 1858, 281, 2903, 11, 51714], "temperature": 0.0, "avg_logprob": -0.09980598848257492, "compression_ratio": 1.4245810055865922, "no_speech_prob": 0.005553800612688065}, {"id": 153, "seek": 124590, "start": 1246.9, "end": 1249.9, "text": " they are often not very good at making predictions,", "tokens": [50414, 436, 366, 2049, 406, 588, 665, 412, 1455, 21264, 11, 50564], "temperature": 0.0, "avg_logprob": -0.05974183017260408, "compression_ratio": 1.602803738317757, "no_speech_prob": 0.0007672090432606637}, {"id": 154, "seek": 124590, "start": 1250.9, "end": 1255.9, "text": " which of course is the primary reason for building machine learning classification models in the first place.", "tokens": [50614, 597, 295, 1164, 307, 264, 6194, 1778, 337, 2390, 3479, 2539, 21538, 5245, 294, 264, 700, 1081, 13, 50864], "temperature": 0.0, "avg_logprob": -0.05974183017260408, "compression_ratio": 1.602803738317757, "no_speech_prob": 0.0007672090432606637}, {"id": 155, "seek": 124590, "start": 1258.9, "end": 1264.9, "text": " Let's take a deeper dive into the misclassifications to gain a better understanding of what went wrong.", "tokens": [51014, 961, 311, 747, 257, 7731, 9192, 666, 264, 3346, 11665, 7833, 281, 6052, 257, 1101, 3701, 295, 437, 1437, 2085, 13, 51314], "temperature": 0.0, "avg_logprob": -0.05974183017260408, "compression_ratio": 1.602803738317757, "no_speech_prob": 0.0007672090432606637}, {"id": 156, "seek": 124590, "start": 1266.9, "end": 1271.9, "text": " A common analytic tool used in machine learning is called a confusion matrix.", "tokens": [51414, 316, 2689, 40358, 2290, 1143, 294, 3479, 2539, 307, 1219, 257, 15075, 8141, 13, 51664], "temperature": 0.0, "avg_logprob": -0.05974183017260408, "compression_ratio": 1.602803738317757, "no_speech_prob": 0.0007672090432606637}, {"id": 157, "seek": 127190, "start": 1272.9, "end": 1279.9, "text": " A confusion matrix provides a simple way to visualize where your model got confused while making predictions.", "tokens": [50414, 316, 15075, 8141, 6417, 257, 2199, 636, 281, 23273, 689, 428, 2316, 658, 9019, 1339, 1455, 21264, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08624624888102214, "compression_ratio": 1.828125, "no_speech_prob": 0.0010648841271176934}, {"id": 158, "seek": 127190, "start": 1281.9, "end": 1286.9, "text": " The decisionTree.jl package comes included with a confusion matrix constructor.", "tokens": [50864, 440, 3537, 51, 701, 13, 73, 75, 7372, 1487, 5556, 365, 257, 15075, 8141, 47479, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08624624888102214, "compression_ratio": 1.828125, "no_speech_prob": 0.0010648841271176934}, {"id": 159, "seek": 127190, "start": 1290.9, "end": 1296.9, "text": " The way to read this confusion matrix is that the classes from the first arguments are in the rows,", "tokens": [51314, 440, 636, 281, 1401, 341, 15075, 8141, 307, 300, 264, 5359, 490, 264, 700, 12869, 366, 294, 264, 13241, 11, 51614], "temperature": 0.0, "avg_logprob": -0.08624624888102214, "compression_ratio": 1.828125, "no_speech_prob": 0.0010648841271176934}, {"id": 160, "seek": 127190, "start": 1296.9, "end": 1300.9, "text": " and the classes from the second arguments are in the columns.", "tokens": [51614, 293, 264, 5359, 490, 264, 1150, 12869, 366, 294, 264, 13766, 13, 51814], "temperature": 0.0, "avg_logprob": -0.08624624888102214, "compression_ratio": 1.828125, "no_speech_prob": 0.0010648841271176934}, {"id": 161, "seek": 130190, "start": 1301.9, "end": 1306.9, "text": " So since we used y underscore test as the first argument,", "tokens": [50364, 407, 1670, 321, 1143, 288, 37556, 1500, 382, 264, 700, 6770, 11, 50614], "temperature": 0.0, "avg_logprob": -0.089600830078125, "compression_ratio": 1.7712765957446808, "no_speech_prob": 0.00018521204765420407}, {"id": 162, "seek": 130190, "start": 1306.9, "end": 1312.9, "text": " the rows show the counts for the actual labeled data that we used for testing purposes.", "tokens": [50614, 264, 13241, 855, 264, 14893, 337, 264, 3539, 21335, 1412, 300, 321, 1143, 337, 4997, 9932, 13, 50914], "temperature": 0.0, "avg_logprob": -0.089600830078125, "compression_ratio": 1.7712765957446808, "no_speech_prob": 0.00018521204765420407}, {"id": 163, "seek": 130190, "start": 1313.9, "end": 1317.9, "text": " Since we used y underscore hat as the second argument,", "tokens": [50964, 4162, 321, 1143, 288, 37556, 2385, 382, 264, 1150, 6770, 11, 51164], "temperature": 0.0, "avg_logprob": -0.089600830078125, "compression_ratio": 1.7712765957446808, "no_speech_prob": 0.00018521204765420407}, {"id": 164, "seek": 130190, "start": 1317.9, "end": 1322.9, "text": " the columns show the classes predicted by our decision tree model.", "tokens": [51164, 264, 13766, 855, 264, 5359, 19147, 538, 527, 3537, 4230, 2316, 13, 51414], "temperature": 0.0, "avg_logprob": -0.089600830078125, "compression_ratio": 1.7712765957446808, "no_speech_prob": 0.00018521204765420407}, {"id": 165, "seek": 130190, "start": 1324.9, "end": 1328.9, "text": " The numbers shown along the diagonal are the correct predictions,", "tokens": [51514, 440, 3547, 4898, 2051, 264, 21539, 366, 264, 3006, 21264, 11, 51714], "temperature": 0.0, "avg_logprob": -0.089600830078125, "compression_ratio": 1.7712765957446808, "no_speech_prob": 0.00018521204765420407}, {"id": 166, "seek": 132890, "start": 1328.9, "end": 1332.9, "text": " and any other number represents an incorrect prediction.", "tokens": [50364, 293, 604, 661, 1230, 8855, 364, 18424, 17630, 13, 50564], "temperature": 0.0, "avg_logprob": -0.10470265726889333, "compression_ratio": 1.8758169934640523, "no_speech_prob": 0.0019264183938503265}, {"id": 167, "seek": 132890, "start": 1333.9, "end": 1343.9, "text": " For example, that one indicates that our model predicted for genica once when the actual labeled class was versicolor.", "tokens": [50614, 1171, 1365, 11, 300, 472, 16203, 300, 527, 2316, 19147, 337, 1049, 2262, 1564, 562, 264, 3539, 21335, 1508, 390, 1774, 299, 36182, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10470265726889333, "compression_ratio": 1.8758169934640523, "no_speech_prob": 0.0019264183938503265}, {"id": 168, "seek": 132890, "start": 1344.9, "end": 1352.9, "text": " That five indicates that our model predicted versicolor five times when the actual labeled class was virginica.", "tokens": [51164, 663, 1732, 16203, 300, 527, 2316, 19147, 1774, 299, 36182, 1732, 1413, 562, 264, 3539, 21335, 1508, 390, 26404, 2262, 13, 51564], "temperature": 0.0, "avg_logprob": -0.10470265726889333, "compression_ratio": 1.8758169934640523, "no_speech_prob": 0.0019264183938503265}, {"id": 169, "seek": 135290, "start": 1353.9, "end": 1360.9, "text": " The accuracy score shown here matches the accuracy score that we calculated manually.", "tokens": [50414, 440, 14170, 6175, 4898, 510, 10676, 264, 14170, 6175, 300, 321, 15598, 16945, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07303329498048812, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.004468009807169437}, {"id": 170, "seek": 135290, "start": 1361.9, "end": 1367.9, "text": " The kappa coefficient is a metric that you can derive from this confusion matrix.", "tokens": [50814, 440, 350, 25637, 17619, 307, 257, 20678, 300, 291, 393, 28446, 490, 341, 15075, 8141, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07303329498048812, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.004468009807169437}, {"id": 171, "seek": 135290, "start": 1368.9, "end": 1376.9, "text": " I won't go into the math, but the kappa coefficient offers a more nuanced assessment of your model's predictive abilities.", "tokens": [51164, 286, 1582, 380, 352, 666, 264, 5221, 11, 457, 264, 350, 25637, 17619, 7736, 257, 544, 45115, 9687, 295, 428, 2316, 311, 35521, 11582, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07303329498048812, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.004468009807169437}, {"id": 172, "seek": 137690, "start": 1377.9, "end": 1386.9, "text": " When making predictions, there's always a possibility that your model made a correct prediction purely by chance,", "tokens": [50414, 1133, 1455, 21264, 11, 456, 311, 1009, 257, 7959, 300, 428, 2316, 1027, 257, 3006, 17630, 17491, 538, 2931, 11, 50864], "temperature": 0.0, "avg_logprob": -0.07229718877308404, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.004681269638240337}, {"id": 173, "seek": 137690, "start": 1387.9, "end": 1390.9, "text": " thus artificially inflating the accuracy score.", "tokens": [50914, 8807, 39905, 2270, 9922, 990, 264, 14170, 6175, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07229718877308404, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.004681269638240337}, {"id": 174, "seek": 137690, "start": 1392.9, "end": 1397.9, "text": " The kappa coefficient attempts to remove the probability of random positive predictions", "tokens": [51164, 440, 350, 25637, 17619, 15257, 281, 4159, 264, 8482, 295, 4974, 3353, 21264, 51414], "temperature": 0.0, "avg_logprob": -0.07229718877308404, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.004681269638240337}, {"id": 175, "seek": 137690, "start": 1397.9, "end": 1403.9, "text": " in order to present a more conservative way to assess your model's performance.", "tokens": [51414, 294, 1668, 281, 1974, 257, 544, 13780, 636, 281, 5877, 428, 2316, 311, 3389, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07229718877308404, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.004681269638240337}, {"id": 176, "seek": 140390, "start": 1404.9, "end": 1411.9, "text": " As you can see, after factoring out the probability of making a correct prediction just by getting lucky,", "tokens": [50414, 1018, 291, 393, 536, 11, 934, 1186, 3662, 484, 264, 8482, 295, 1455, 257, 3006, 17630, 445, 538, 1242, 6356, 11, 50764], "temperature": 0.0, "avg_logprob": -0.046197244099208286, "compression_ratio": 1.5279503105590062, "no_speech_prob": 0.0010985344415530562}, {"id": 177, "seek": 140390, "start": 1412.9, "end": 1416.9, "text": " the accuracy score is closer to 83%.", "tokens": [50814, 264, 14170, 6175, 307, 4966, 281, 30997, 6856, 51014], "temperature": 0.0, "avg_logprob": -0.046197244099208286, "compression_ratio": 1.5279503105590062, "no_speech_prob": 0.0010985344415530562}, {"id": 178, "seek": 140390, "start": 1418.9, "end": 1425.9, "text": " We can see the incorrect predictions using the same code that we used last week to display the results.", "tokens": [51114, 492, 393, 536, 264, 18424, 21264, 1228, 264, 912, 3089, 300, 321, 1143, 1036, 1243, 281, 4674, 264, 3542, 13, 51464], "temperature": 0.0, "avg_logprob": -0.046197244099208286, "compression_ratio": 1.5279503105590062, "no_speech_prob": 0.0010985344415530562}, {"id": 179, "seek": 143390, "start": 1433.9, "end": 1448.9, "text": " As a reminder, the first column contains the predictions, and the second column contains the class from the labeled test data,", "tokens": [50364, 1018, 257, 13548, 11, 264, 700, 7738, 8306, 264, 21264, 11, 293, 264, 1150, 7738, 8306, 264, 1508, 490, 264, 21335, 1500, 1412, 11, 51114], "temperature": 0.0, "avg_logprob": -0.11971524311945989, "compression_ratio": 1.7011494252873562, "no_speech_prob": 0.0013043018989264965}, {"id": 180, "seek": 143390, "start": 1449.9, "end": 1453.9, "text": " and the third column indicates whether or not the prediction was correct.", "tokens": [51164, 293, 264, 2636, 7738, 16203, 1968, 420, 406, 264, 17630, 390, 3006, 13, 51364], "temperature": 0.0, "avg_logprob": -0.11971524311945989, "compression_ratio": 1.7011494252873562, "no_speech_prob": 0.0013043018989264965}, {"id": 181, "seek": 143390, "start": 1455.9, "end": 1461.9, "text": " If you sort on column three, you can see there's one sample where our model predicted virginica", "tokens": [51464, 759, 291, 1333, 322, 7738, 1045, 11, 291, 393, 536, 456, 311, 472, 6889, 689, 527, 2316, 19147, 26404, 2262, 51764], "temperature": 0.0, "avg_logprob": -0.11971524311945989, "compression_ratio": 1.7011494252873562, "no_speech_prob": 0.0013043018989264965}, {"id": 182, "seek": 146190, "start": 1461.9, "end": 1464.9, "text": " when the actual species was versicolor.", "tokens": [50364, 562, 264, 3539, 6172, 390, 1774, 299, 36182, 13, 50514], "temperature": 0.0, "avg_logprob": -0.07613157297109628, "compression_ratio": 1.6407766990291262, "no_speech_prob": 0.0015484881587326527}, {"id": 183, "seek": 146190, "start": 1465.9, "end": 1472.9, "text": " And there are five samples where our model predicted versicolor when the actual species was virginica,", "tokens": [50564, 400, 456, 366, 1732, 10938, 689, 527, 2316, 19147, 1774, 299, 36182, 562, 264, 3539, 6172, 390, 26404, 2262, 11, 50914], "temperature": 0.0, "avg_logprob": -0.07613157297109628, "compression_ratio": 1.6407766990291262, "no_speech_prob": 0.0015484881587326527}, {"id": 184, "seek": 146190, "start": 1473.9, "end": 1476.9, "text": " which is consistent with what the confusion matrix showed.", "tokens": [50964, 597, 307, 8398, 365, 437, 264, 15075, 8141, 4712, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07613157297109628, "compression_ratio": 1.6407766990291262, "no_speech_prob": 0.0015484881587326527}, {"id": 185, "seek": 146190, "start": 1479.9, "end": 1484.9, "text": " You'll recall from last week that the SVM model is non-probabilistic,", "tokens": [51264, 509, 603, 9901, 490, 1036, 1243, 300, 264, 31910, 44, 2316, 307, 2107, 12, 41990, 5177, 3142, 11, 51514], "temperature": 0.0, "avg_logprob": -0.07613157297109628, "compression_ratio": 1.6407766990291262, "no_speech_prob": 0.0015484881587326527}, {"id": 186, "seek": 146190, "start": 1485.9, "end": 1488.9, "text": " meaning that it makes predictions without assigning probabilities.", "tokens": [51564, 3620, 300, 309, 1669, 21264, 1553, 49602, 33783, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07613157297109628, "compression_ratio": 1.6407766990291262, "no_speech_prob": 0.0015484881587326527}, {"id": 187, "seek": 149190, "start": 1491.9, "end": 1493.9, "text": " The decision tree algorithm is different.", "tokens": [50364, 440, 3537, 4230, 9284, 307, 819, 13, 50464], "temperature": 0.0, "avg_logprob": -0.11882682344806728, "compression_ratio": 1.6054054054054054, "no_speech_prob": 0.00014201045269146562}, {"id": 188, "seek": 149190, "start": 1494.9, "end": 1502.9, "text": " You can see the probabilities determined by the decision tree model by using the predict underscore proper function.", "tokens": [50514, 509, 393, 536, 264, 33783, 9540, 538, 264, 3537, 4230, 2316, 538, 1228, 264, 6069, 37556, 2296, 2445, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11882682344806728, "compression_ratio": 1.6054054054054054, "no_speech_prob": 0.00014201045269146562}, {"id": 189, "seek": 149190, "start": 1508.9, "end": 1512.9, "text": " So this display shows the 56 samples in the test data set.", "tokens": [51214, 407, 341, 4674, 3110, 264, 19687, 10938, 294, 264, 1500, 1412, 992, 13, 51414], "temperature": 0.0, "avg_logprob": -0.11882682344806728, "compression_ratio": 1.6054054054054054, "no_speech_prob": 0.00014201045269146562}, {"id": 190, "seek": 149190, "start": 1513.9, "end": 1519.9, "text": " Column one is the probability that the test sample has a class label of Satosa.", "tokens": [51464, 4004, 16449, 472, 307, 264, 8482, 300, 264, 1500, 6889, 575, 257, 1508, 7645, 295, 5344, 6447, 13, 51764], "temperature": 0.0, "avg_logprob": -0.11882682344806728, "compression_ratio": 1.6054054054054054, "no_speech_prob": 0.00014201045269146562}, {"id": 191, "seek": 151990, "start": 1520.9, "end": 1525.9, "text": " Column two is the probability that the test sample has a class label of versicolor.", "tokens": [50414, 4004, 16449, 732, 307, 264, 8482, 300, 264, 1500, 6889, 575, 257, 1508, 7645, 295, 1774, 299, 36182, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06632700420561291, "compression_ratio": 1.9244186046511629, "no_speech_prob": 0.0004802459152415395}, {"id": 192, "seek": 151990, "start": 1526.9, "end": 1531.9, "text": " And column three is the probability that the test sample has a class label of virginica.", "tokens": [50714, 400, 7738, 1045, 307, 264, 8482, 300, 264, 1500, 6889, 575, 257, 1508, 7645, 295, 26404, 2262, 13, 50964], "temperature": 0.0, "avg_logprob": -0.06632700420561291, "compression_ratio": 1.9244186046511629, "no_speech_prob": 0.0004802459152415395}, {"id": 193, "seek": 151990, "start": 1533.9, "end": 1541.9, "text": " As you can see, our model is 100% confident that the first 15 samples have a class label of Satosa.", "tokens": [51064, 1018, 291, 393, 536, 11, 527, 2316, 307, 2319, 4, 6679, 300, 264, 700, 2119, 10938, 362, 257, 1508, 7645, 295, 5344, 6447, 13, 51464], "temperature": 0.0, "avg_logprob": -0.06632700420561291, "compression_ratio": 1.9244186046511629, "no_speech_prob": 0.0004802459152415395}, {"id": 194, "seek": 151990, "start": 1542.9, "end": 1546.9, "text": " But for every other sample, our model is not as confident,", "tokens": [51514, 583, 337, 633, 661, 6889, 11, 527, 2316, 307, 406, 382, 6679, 11, 51714], "temperature": 0.0, "avg_logprob": -0.06632700420561291, "compression_ratio": 1.9244186046511629, "no_speech_prob": 0.0004802459152415395}, {"id": 195, "seek": 154690, "start": 1546.9, "end": 1550.9, "text": " since it knows that there's some probability of misclassification.", "tokens": [50364, 1670, 309, 3255, 300, 456, 311, 512, 8482, 295, 3346, 11665, 3774, 13, 50564], "temperature": 0.0, "avg_logprob": -0.10509006698410232, "compression_ratio": 1.4974874371859297, "no_speech_prob": 0.0006666474509984255}, {"id": 196, "seek": 154690, "start": 1551.9, "end": 1558.9, "text": " All of the other samples show a 96% probability when predicting either versicolor or virginica.", "tokens": [50614, 1057, 295, 264, 661, 10938, 855, 257, 24124, 4, 8482, 562, 32884, 2139, 1774, 299, 36182, 420, 26404, 2262, 13, 50964], "temperature": 0.0, "avg_logprob": -0.10509006698410232, "compression_ratio": 1.4974874371859297, "no_speech_prob": 0.0006666474509984255}, {"id": 197, "seek": 154690, "start": 1561.9, "end": 1564.9, "text": " Okay, so now what do we do?", "tokens": [51114, 1033, 11, 370, 586, 437, 360, 321, 360, 30, 51264], "temperature": 0.0, "avg_logprob": -0.10509006698410232, "compression_ratio": 1.4974874371859297, "no_speech_prob": 0.0006666474509984255}, {"id": 198, "seek": 154690, "start": 1566.9, "end": 1570.9, "text": " The decision tree is great since it's a wealth of information,", "tokens": [51364, 440, 3537, 4230, 307, 869, 1670, 309, 311, 257, 7203, 295, 1589, 11, 51564], "temperature": 0.0, "avg_logprob": -0.10509006698410232, "compression_ratio": 1.4974874371859297, "no_speech_prob": 0.0006666474509984255}, {"id": 199, "seek": 154690, "start": 1571.9, "end": 1573.9, "text": " but it's not so great at making predictions,", "tokens": [51614, 457, 309, 311, 406, 370, 869, 412, 1455, 21264, 11, 51714], "temperature": 0.0, "avg_logprob": -0.10509006698410232, "compression_ratio": 1.4974874371859297, "no_speech_prob": 0.0006666474509984255}, {"id": 200, "seek": 157390, "start": 1573.9, "end": 1576.9, "text": " which is really what we need.", "tokens": [50364, 597, 307, 534, 437, 321, 643, 13, 50514], "temperature": 0.0, "avg_logprob": -0.07882208063982535, "compression_ratio": 1.5668449197860963, "no_speech_prob": 0.0009252974996343255}, {"id": 201, "seek": 157390, "start": 1577.9, "end": 1582.9, "text": " The good news is that there are a couple of ways to improve this accuracy score,", "tokens": [50564, 440, 665, 2583, 307, 300, 456, 366, 257, 1916, 295, 2098, 281, 3470, 341, 14170, 6175, 11, 50814], "temperature": 0.0, "avg_logprob": -0.07882208063982535, "compression_ratio": 1.5668449197860963, "no_speech_prob": 0.0009252974996343255}, {"id": 202, "seek": 157390, "start": 1583.9, "end": 1588.9, "text": " but like many things in life, those improvements will come with some tradeoffs.", "tokens": [50864, 457, 411, 867, 721, 294, 993, 11, 729, 13797, 486, 808, 365, 512, 4923, 19231, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07882208063982535, "compression_ratio": 1.5668449197860963, "no_speech_prob": 0.0009252974996343255}, {"id": 203, "seek": 157390, "start": 1589.9, "end": 1597.9, "text": " One of those tradeoffs is a fundamental concept in machine learning called the bias variance tradeoff.", "tokens": [51164, 1485, 295, 729, 4923, 19231, 307, 257, 8088, 3410, 294, 3479, 2539, 1219, 264, 12577, 21977, 4923, 4506, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07882208063982535, "compression_ratio": 1.5668449197860963, "no_speech_prob": 0.0009252974996343255}, {"id": 204, "seek": 159790, "start": 1597.9, "end": 1607.9, "text": " On the surface, the bias variance tradeoff may seem like a relatively easy concept to understand,", "tokens": [50364, 1282, 264, 3753, 11, 264, 12577, 21977, 4923, 4506, 815, 1643, 411, 257, 7226, 1858, 3410, 281, 1223, 11, 50864], "temperature": 0.0, "avg_logprob": -0.07633591409939439, "compression_ratio": 1.544502617801047, "no_speech_prob": 0.000984890852123499}, {"id": 205, "seek": 159790, "start": 1608.9, "end": 1613.9, "text": " but upon closer inspection, one learns that it is very nuanced,", "tokens": [50914, 457, 3564, 4966, 22085, 11, 472, 27152, 300, 309, 307, 588, 45115, 11, 51164], "temperature": 0.0, "avg_logprob": -0.07633591409939439, "compression_ratio": 1.544502617801047, "no_speech_prob": 0.000984890852123499}, {"id": 206, "seek": 159790, "start": 1614.9, "end": 1617.9, "text": " so it's surprisingly difficult to implement in real life.", "tokens": [51214, 370, 309, 311, 17600, 2252, 281, 4445, 294, 957, 993, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07633591409939439, "compression_ratio": 1.544502617801047, "no_speech_prob": 0.000984890852123499}, {"id": 207, "seek": 159790, "start": 1618.9, "end": 1624.9, "text": " The bias variance tradeoff is typically visualized by these three diagrams.", "tokens": [51414, 440, 12577, 21977, 4923, 4506, 307, 5850, 5056, 1602, 538, 613, 1045, 36709, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07633591409939439, "compression_ratio": 1.544502617801047, "no_speech_prob": 0.000984890852123499}, {"id": 208, "seek": 162490, "start": 1625.9, "end": 1630.9, "text": " The diagram on the left is an example of underfitting the data,", "tokens": [50414, 440, 10686, 322, 264, 1411, 307, 364, 1365, 295, 833, 69, 2414, 264, 1412, 11, 50664], "temperature": 0.0, "avg_logprob": -0.03701308716175168, "compression_ratio": 1.8730964467005076, "no_speech_prob": 0.002631037263199687}, {"id": 209, "seek": 162490, "start": 1631.9, "end": 1637.9, "text": " meaning that it hasn't captured enough of the relevant relationships between features and outputs.", "tokens": [50714, 3620, 300, 309, 6132, 380, 11828, 1547, 295, 264, 7340, 6159, 1296, 4122, 293, 23930, 13, 51014], "temperature": 0.0, "avg_logprob": -0.03701308716175168, "compression_ratio": 1.8730964467005076, "no_speech_prob": 0.002631037263199687}, {"id": 210, "seek": 162490, "start": 1638.9, "end": 1643.9, "text": " The diagram on the right is an example of overfitting the data,", "tokens": [51064, 440, 10686, 322, 264, 558, 307, 364, 1365, 295, 670, 69, 2414, 264, 1412, 11, 51314], "temperature": 0.0, "avg_logprob": -0.03701308716175168, "compression_ratio": 1.8730964467005076, "no_speech_prob": 0.002631037263199687}, {"id": 211, "seek": 162490, "start": 1644.9, "end": 1647.9, "text": " meaning that it has learned the training data too well,", "tokens": [51364, 3620, 300, 309, 575, 3264, 264, 3097, 1412, 886, 731, 11, 51514], "temperature": 0.0, "avg_logprob": -0.03701308716175168, "compression_ratio": 1.8730964467005076, "no_speech_prob": 0.002631037263199687}, {"id": 212, "seek": 162490, "start": 1648.9, "end": 1653.9, "text": " so that it will make a lot of mistakes when trying to make predictions using new data.", "tokens": [51564, 370, 300, 309, 486, 652, 257, 688, 295, 8038, 562, 1382, 281, 652, 21264, 1228, 777, 1412, 13, 51814], "temperature": 0.0, "avg_logprob": -0.03701308716175168, "compression_ratio": 1.8730964467005076, "no_speech_prob": 0.002631037263199687}, {"id": 213, "seek": 165490, "start": 1655.9, "end": 1660.9, "text": " The diagram in the middle is an example of a model being just right,", "tokens": [50414, 440, 10686, 294, 264, 2808, 307, 364, 1365, 295, 257, 2316, 885, 445, 558, 11, 50664], "temperature": 0.0, "avg_logprob": -0.05101930591422067, "compression_ratio": 1.5776699029126213, "no_speech_prob": 0.000173991167685017}, {"id": 214, "seek": 165490, "start": 1661.9, "end": 1666.9, "text": " meaning that it has captured enough of the relevant relationships between features and outputs,", "tokens": [50714, 3620, 300, 309, 575, 11828, 1547, 295, 264, 7340, 6159, 1296, 4122, 293, 23930, 11, 50964], "temperature": 0.0, "avg_logprob": -0.05101930591422067, "compression_ratio": 1.5776699029126213, "no_speech_prob": 0.000173991167685017}, {"id": 215, "seek": 165490, "start": 1667.9, "end": 1673.9, "text": " while still being able to be generalized so that it can be used to make predictions using unseen data.", "tokens": [51014, 1339, 920, 885, 1075, 281, 312, 44498, 370, 300, 309, 393, 312, 1143, 281, 652, 21264, 1228, 40608, 1412, 13, 51314], "temperature": 0.0, "avg_logprob": -0.05101930591422067, "compression_ratio": 1.5776699029126213, "no_speech_prob": 0.000173991167685017}, {"id": 216, "seek": 165490, "start": 1675.9, "end": 1679.9, "text": " So these diagrams are really from the data's perspective,", "tokens": [51414, 407, 613, 36709, 366, 534, 490, 264, 1412, 311, 4585, 11, 51614], "temperature": 0.0, "avg_logprob": -0.05101930591422067, "compression_ratio": 1.5776699029126213, "no_speech_prob": 0.000173991167685017}, {"id": 217, "seek": 167990, "start": 1679.9, "end": 1684.9, "text": " so they aren't necessarily helpful when you're trying to design a model.", "tokens": [50364, 370, 436, 3212, 380, 4725, 4961, 562, 291, 434, 1382, 281, 1715, 257, 2316, 13, 50614], "temperature": 0.0, "avg_logprob": -0.0653590891096327, "compression_ratio": 1.5824742268041236, "no_speech_prob": 0.0059104678221046925}, {"id": 218, "seek": 167990, "start": 1685.9, "end": 1692.9, "text": " A different way to visualize the bias variance tradeoff is by looking at these four diagrams,", "tokens": [50664, 316, 819, 636, 281, 23273, 264, 12577, 21977, 4923, 4506, 307, 538, 1237, 412, 613, 1451, 36709, 11, 51014], "temperature": 0.0, "avg_logprob": -0.0653590891096327, "compression_ratio": 1.5824742268041236, "no_speech_prob": 0.0059104678221046925}, {"id": 219, "seek": 167990, "start": 1693.9, "end": 1695.9, "text": " which is from the model's perspective.", "tokens": [51064, 597, 307, 490, 264, 2316, 311, 4585, 13, 51164], "temperature": 0.0, "avg_logprob": -0.0653590891096327, "compression_ratio": 1.5824742268041236, "no_speech_prob": 0.0059104678221046925}, {"id": 220, "seek": 167990, "start": 1696.9, "end": 1704.9, "text": " The lower left diagram shows a model with low bias and low variance, which is the best case scenario.", "tokens": [51214, 440, 3126, 1411, 10686, 3110, 257, 2316, 365, 2295, 12577, 293, 2295, 21977, 11, 597, 307, 264, 1151, 1389, 9005, 13, 51614], "temperature": 0.0, "avg_logprob": -0.0653590891096327, "compression_ratio": 1.5824742268041236, "no_speech_prob": 0.0059104678221046925}, {"id": 221, "seek": 170490, "start": 1705.9, "end": 1713.9, "text": " The upper right diagram shows a model with high bias and high variance, which is the worst case scenario.", "tokens": [50414, 440, 6597, 558, 10686, 3110, 257, 2316, 365, 1090, 12577, 293, 1090, 21977, 11, 597, 307, 264, 5855, 1389, 9005, 13, 50814], "temperature": 0.0, "avg_logprob": -0.04988446158747519, "compression_ratio": 1.6867469879518073, "no_speech_prob": 0.001388399163261056}, {"id": 222, "seek": 170490, "start": 1715.9, "end": 1720.9, "text": " In reality, most models are neither best case nor worst case.", "tokens": [50914, 682, 4103, 11, 881, 5245, 366, 9662, 1151, 1389, 6051, 5855, 1389, 13, 51164], "temperature": 0.0, "avg_logprob": -0.04988446158747519, "compression_ratio": 1.6867469879518073, "no_speech_prob": 0.001388399163261056}, {"id": 223, "seek": 170490, "start": 1721.9, "end": 1730.9, "text": " Instead, most models fall along that diagonal region between the upper left diagram and the lower right diagram,", "tokens": [51214, 7156, 11, 881, 5245, 2100, 2051, 300, 21539, 4458, 1296, 264, 6597, 1411, 10686, 293, 264, 3126, 558, 10686, 11, 51664], "temperature": 0.0, "avg_logprob": -0.04988446158747519, "compression_ratio": 1.6867469879518073, "no_speech_prob": 0.001388399163261056}, {"id": 224, "seek": 173090, "start": 1731.9, "end": 1740.9, "text": " meaning that your model will most likely have a high bias and low variance, or low bias and high variance.", "tokens": [50414, 3620, 300, 428, 2316, 486, 881, 3700, 362, 257, 1090, 12577, 293, 2295, 21977, 11, 420, 2295, 12577, 293, 1090, 21977, 13, 50864], "temperature": 0.0, "avg_logprob": -0.06171636978785197, "compression_ratio": 1.6578947368421053, "no_speech_prob": 0.0012642997317016125}, {"id": 225, "seek": 173090, "start": 1742.9, "end": 1747.9, "text": " The best that you can hope to achieve is some result near the middle of all four diagrams,", "tokens": [50964, 440, 1151, 300, 291, 393, 1454, 281, 4584, 307, 512, 1874, 2651, 264, 2808, 295, 439, 1451, 36709, 11, 51214], "temperature": 0.0, "avg_logprob": -0.06171636978785197, "compression_ratio": 1.6578947368421053, "no_speech_prob": 0.0012642997317016125}, {"id": 226, "seek": 173090, "start": 1748.9, "end": 1751.9, "text": " resulting in a model with some bias and some variance.", "tokens": [51264, 16505, 294, 257, 2316, 365, 512, 12577, 293, 512, 21977, 13, 51414], "temperature": 0.0, "avg_logprob": -0.06171636978785197, "compression_ratio": 1.6578947368421053, "no_speech_prob": 0.0012642997317016125}, {"id": 227, "seek": 175190, "start": 1752.9, "end": 1762.9, "text": " The model generated by the decision tree algorithm is an example of a model with high variance and low bias,", "tokens": [50414, 440, 2316, 10833, 538, 264, 3537, 4230, 9284, 307, 364, 1365, 295, 257, 2316, 365, 1090, 21977, 293, 2295, 12577, 11, 50914], "temperature": 0.0, "avg_logprob": -0.07782252830795094, "compression_ratio": 1.6221198156682028, "no_speech_prob": 0.002251638565212488}, {"id": 228, "seek": 175190, "start": 1763.9, "end": 1766.9, "text": " meaning that it should be placed in that lower right box.", "tokens": [50964, 3620, 300, 309, 820, 312, 7074, 294, 300, 3126, 558, 2424, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07782252830795094, "compression_ratio": 1.6221198156682028, "no_speech_prob": 0.002251638565212488}, {"id": 229, "seek": 175190, "start": 1768.9, "end": 1772.9, "text": " Decision trees have a natural tendency to overfit the data,", "tokens": [51214, 12427, 1991, 5852, 362, 257, 3303, 18187, 281, 670, 6845, 264, 1412, 11, 51414], "temperature": 0.0, "avg_logprob": -0.07782252830795094, "compression_ratio": 1.6221198156682028, "no_speech_prob": 0.002251638565212488}, {"id": 230, "seek": 175190, "start": 1773.9, "end": 1780.9, "text": " since in theory, it can continue to split your data until it has correctly classified every sample in the training data sets.", "tokens": [51464, 1670, 294, 5261, 11, 309, 393, 2354, 281, 7472, 428, 1412, 1826, 309, 575, 8944, 20627, 633, 6889, 294, 264, 3097, 1412, 6352, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07782252830795094, "compression_ratio": 1.6221198156682028, "no_speech_prob": 0.002251638565212488}, {"id": 231, "seek": 178190, "start": 1782.9, "end": 1791.9, "text": " But that's no good, since you can't generalize such a model, since new unseen data will most likely be different than the training data.", "tokens": [50414, 583, 300, 311, 572, 665, 11, 1670, 291, 393, 380, 2674, 1125, 1270, 257, 2316, 11, 1670, 777, 40608, 1412, 486, 881, 3700, 312, 819, 813, 264, 3097, 1412, 13, 50864], "temperature": 0.0, "avg_logprob": -0.051567514737447105, "compression_ratio": 1.6523809523809523, "no_speech_prob": 0.0002779965871013701}, {"id": 232, "seek": 178190, "start": 1793.9, "end": 1800.9, "text": " You can improve the predictive accuracy of decision trees by using something called ensemble learning.", "tokens": [50964, 509, 393, 3470, 264, 35521, 14170, 295, 3537, 5852, 538, 1228, 746, 1219, 19492, 2539, 13, 51314], "temperature": 0.0, "avg_logprob": -0.051567514737447105, "compression_ratio": 1.6523809523809523, "no_speech_prob": 0.0002779965871013701}, {"id": 233, "seek": 178190, "start": 1801.9, "end": 1807.9, "text": " There are two main ensemble learning techniques that are used to improve the performance of decision trees.", "tokens": [51364, 821, 366, 732, 2135, 19492, 2539, 7512, 300, 366, 1143, 281, 3470, 264, 3389, 295, 3537, 5852, 13, 51664], "temperature": 0.0, "avg_logprob": -0.051567514737447105, "compression_ratio": 1.6523809523809523, "no_speech_prob": 0.0002779965871013701}, {"id": 234, "seek": 180790, "start": 1808.9, "end": 1812.9, "text": " One is called bagging, and the other is called boosting.", "tokens": [50414, 1485, 307, 1219, 3411, 3249, 11, 293, 264, 661, 307, 1219, 43117, 13, 50614], "temperature": 0.0, "avg_logprob": -0.0714707715170724, "compression_ratio": 1.4680851063829787, "no_speech_prob": 0.002115558600053191}, {"id": 235, "seek": 180790, "start": 1814.9, "end": 1821.9, "text": " We'll cover bagging first. An example of a bagging algorithm is known as random forest.", "tokens": [50714, 492, 603, 2060, 3411, 3249, 700, 13, 1107, 1365, 295, 257, 3411, 3249, 9284, 307, 2570, 382, 4974, 6719, 13, 51064], "temperature": 0.0, "avg_logprob": -0.0714707715170724, "compression_ratio": 1.4680851063829787, "no_speech_prob": 0.002115558600053191}, {"id": 236, "seek": 180790, "start": 1825.9, "end": 1829.9, "text": " Bagging is a shortened form of the term bootstrap aggregating.", "tokens": [51264, 24377, 3249, 307, 257, 45183, 1254, 295, 264, 1433, 11450, 372, 4007, 16743, 990, 13, 51464], "temperature": 0.0, "avg_logprob": -0.0714707715170724, "compression_ratio": 1.4680851063829787, "no_speech_prob": 0.002115558600053191}, {"id": 237, "seek": 182990, "start": 1830.9, "end": 1840.9, "text": " Without getting into the details, the concept behind bagging is that you can reduce the variance of your machine learning model by doing two things.", "tokens": [50414, 9129, 1242, 666, 264, 4365, 11, 264, 3410, 2261, 3411, 3249, 307, 300, 291, 393, 5407, 264, 21977, 295, 428, 3479, 2539, 2316, 538, 884, 732, 721, 13, 50914], "temperature": 0.0, "avg_logprob": -0.053278326988220215, "compression_ratio": 1.632258064516129, "no_speech_prob": 0.015421007759869099}, {"id": 238, "seek": 182990, "start": 1841.9, "end": 1849.9, "text": " One, you can increase the independence of your features, and two, you can increase the number of models.", "tokens": [50964, 1485, 11, 291, 393, 3488, 264, 14640, 295, 428, 4122, 11, 293, 732, 11, 291, 393, 3488, 264, 1230, 295, 5245, 13, 51364], "temperature": 0.0, "avg_logprob": -0.053278326988220215, "compression_ratio": 1.632258064516129, "no_speech_prob": 0.015421007759869099}, {"id": 239, "seek": 184990, "start": 1850.9, "end": 1860.9, "text": " You then take this increased number of models with features that are more independent, then you aggregate them into one metamodel.", "tokens": [50414, 509, 550, 747, 341, 6505, 1230, 295, 5245, 365, 4122, 300, 366, 544, 6695, 11, 550, 291, 26118, 552, 666, 472, 1131, 335, 41147, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1102234791901152, "compression_ratio": 1.5272727272727273, "no_speech_prob": 0.02032744511961937}, {"id": 240, "seek": 184990, "start": 1861.9, "end": 1867.9, "text": " The result is a model with lower variance, but with a slightly higher bias.", "tokens": [50964, 440, 1874, 307, 257, 2316, 365, 3126, 21977, 11, 457, 365, 257, 4748, 2946, 12577, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1102234791901152, "compression_ratio": 1.5272727272727273, "no_speech_prob": 0.02032744511961937}, {"id": 241, "seek": 184990, "start": 1869.9, "end": 1872.9, "text": " This is the bias variance tradeoff in action.", "tokens": [51364, 639, 307, 264, 12577, 21977, 4923, 4506, 294, 3069, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1102234791901152, "compression_ratio": 1.5272727272727273, "no_speech_prob": 0.02032744511961937}, {"id": 242, "seek": 187290, "start": 1873.9, "end": 1880.9, "text": " One of the best known examples of a bagging algorithm is random forest.", "tokens": [50414, 1485, 295, 264, 1151, 2570, 5110, 295, 257, 3411, 3249, 9284, 307, 4974, 6719, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09698181465023854, "compression_ratio": 1.5340314136125655, "no_speech_prob": 0.0038241096772253513}, {"id": 243, "seek": 187290, "start": 1881.9, "end": 1889.9, "text": " The first algorithm for random decision forests was created in 1995 by Tin Cam Ho.", "tokens": [50814, 440, 700, 9284, 337, 4974, 3537, 21700, 390, 2942, 294, 22601, 538, 47741, 6886, 3631, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09698181465023854, "compression_ratio": 1.5340314136125655, "no_speech_prob": 0.0038241096772253513}, {"id": 244, "seek": 187290, "start": 1890.9, "end": 1899.9, "text": " The way that random forest works is that it introduces independence between the features and then generates multiple decision tree models.", "tokens": [51264, 440, 636, 300, 4974, 6719, 1985, 307, 300, 309, 31472, 14640, 1296, 264, 4122, 293, 550, 23815, 3866, 3537, 4230, 5245, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09698181465023854, "compression_ratio": 1.5340314136125655, "no_speech_prob": 0.0038241096772253513}, {"id": 245, "seek": 189990, "start": 1900.9, "end": 1909.9, "text": " But the random forest introduces even more randomness into the algorithm by only considering a fraction of the features at every split.", "tokens": [50414, 583, 264, 4974, 6719, 31472, 754, 544, 4974, 1287, 666, 264, 9284, 538, 787, 8079, 257, 14135, 295, 264, 4122, 412, 633, 7472, 13, 50864], "temperature": 0.0, "avg_logprob": -0.06280481983238542, "compression_ratio": 1.6596858638743455, "no_speech_prob": 0.0034291278570890427}, {"id": 246, "seek": 189990, "start": 1910.9, "end": 1917.9, "text": " This results in even more independence between the features, which results in even lower variance.", "tokens": [50914, 639, 3542, 294, 754, 544, 14640, 1296, 264, 4122, 11, 597, 3542, 294, 754, 3126, 21977, 13, 51264], "temperature": 0.0, "avg_logprob": -0.06280481983238542, "compression_ratio": 1.6596858638743455, "no_speech_prob": 0.0034291278570890427}, {"id": 247, "seek": 189990, "start": 1919.9, "end": 1924.9, "text": " I realize that this is a lot of hand-waving, so let's see random forest in action.", "tokens": [51364, 286, 4325, 300, 341, 307, 257, 688, 295, 1011, 12, 86, 6152, 11, 370, 718, 311, 536, 4974, 6719, 294, 3069, 13, 51614], "temperature": 0.0, "avg_logprob": -0.06280481983238542, "compression_ratio": 1.6596858638743455, "no_speech_prob": 0.0034291278570890427}, {"id": 248, "seek": 192490, "start": 1925.9, "end": 1932.9, "text": " Fortunately, we can use the decisionTree.jl package to generate a random forest model.", "tokens": [50414, 20652, 11, 321, 393, 764, 264, 3537, 51, 701, 13, 73, 75, 7372, 281, 8460, 257, 4974, 6719, 2316, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1066837561757941, "compression_ratio": 1.6122448979591837, "no_speech_prob": 0.014952490106225014}, {"id": 249, "seek": 192490, "start": 1933.9, "end": 1940.9, "text": " All we need to do is use the random forest classifier constructor to generate our model.", "tokens": [50814, 1057, 321, 643, 281, 360, 307, 764, 264, 4974, 6719, 1508, 9902, 47479, 281, 8460, 527, 2316, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1066837561757941, "compression_ratio": 1.6122448979591837, "no_speech_prob": 0.014952490106225014}, {"id": 250, "seek": 192490, "start": 1941.9, "end": 1946.9, "text": " By default, this constructor will generate 10 decision trees.", "tokens": [51214, 3146, 7576, 11, 341, 47479, 486, 8460, 1266, 3537, 5852, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1066837561757941, "compression_ratio": 1.6122448979591837, "no_speech_prob": 0.014952490106225014}, {"id": 251, "seek": 194690, "start": 1946.9, "end": 1953.9, "text": " You can set the number of decision trees manually by using the n underscore trees keyword argument.", "tokens": [50364, 509, 393, 992, 264, 1230, 295, 3537, 5852, 16945, 538, 1228, 264, 297, 37556, 5852, 20428, 6770, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09972559887429942, "compression_ratio": 1.4701492537313432, "no_speech_prob": 0.01941295899450779}, {"id": 252, "seek": 194690, "start": 1955.9, "end": 1961.9, "text": " After that, the rest of the code is similar to the code that we used for the decision tree model.", "tokens": [50814, 2381, 300, 11, 264, 1472, 295, 264, 3089, 307, 2531, 281, 264, 3089, 300, 321, 1143, 337, 264, 3537, 4230, 2316, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09972559887429942, "compression_ratio": 1.4701492537313432, "no_speech_prob": 0.01941295899450779}, {"id": 253, "seek": 196190, "start": 1961.9, "end": 1982.9, "text": " So, we created a random forest model using the exact same training data that we used earlier and the exact same testing data.", "tokens": [50364, 407, 11, 321, 2942, 257, 4974, 6719, 2316, 1228, 264, 1900, 912, 3097, 1412, 300, 321, 1143, 3071, 293, 264, 1900, 912, 4997, 1412, 13, 51414], "temperature": 0.0, "avg_logprob": -0.10874893747527024, "compression_ratio": 1.3736263736263736, "no_speech_prob": 0.0011877190554514527}, {"id": 254, "seek": 198290, "start": 1983.9, "end": 1997.9, "text": " This time, we achieved a predictive accuracy score of around 95%, which is a significant improvement over the 89% that we scored earlier and comparable to the SVM model from last week.", "tokens": [50414, 639, 565, 11, 321, 11042, 257, 35521, 14170, 6175, 295, 926, 13420, 8923, 597, 307, 257, 4776, 10444, 670, 264, 31877, 4, 300, 321, 18139, 3071, 293, 25323, 281, 264, 31910, 44, 2316, 490, 1036, 1243, 13, 51114], "temperature": 0.0, "avg_logprob": -0.05596247053982919, "compression_ratio": 1.3756906077348066, "no_speech_prob": 0.027575593441724777}, {"id": 255, "seek": 198290, "start": 1999.9, "end": 2003.9, "text": " Just like before, we can view our results on a confusion matrix.", "tokens": [51214, 1449, 411, 949, 11, 321, 393, 1910, 527, 3542, 322, 257, 15075, 8141, 13, 51414], "temperature": 0.0, "avg_logprob": -0.05596247053982919, "compression_ratio": 1.3756906077348066, "no_speech_prob": 0.027575593441724777}, {"id": 256, "seek": 200390, "start": 2004.9, "end": 2019.9, "text": " As you can see, our random forest model only made 3 misclassifications versus the 6 misclassifications made by the decision tree model.", "tokens": [50414, 1018, 291, 393, 536, 11, 527, 4974, 6719, 2316, 787, 1027, 805, 3346, 11665, 7833, 5717, 264, 1386, 3346, 11665, 7833, 1027, 538, 264, 3537, 4230, 2316, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10042006174723307, "compression_ratio": 1.4615384615384615, "no_speech_prob": 0.01911398395895958}, {"id": 257, "seek": 200390, "start": 2020.9, "end": 2024.9, "text": " And just like before, we can view the actual mistakes.", "tokens": [51214, 400, 445, 411, 949, 11, 321, 393, 1910, 264, 3539, 8038, 13, 51414], "temperature": 0.0, "avg_logprob": -0.10042006174723307, "compression_ratio": 1.4615384615384615, "no_speech_prob": 0.01911398395895958}, {"id": 258, "seek": 203390, "start": 2033.9, "end": 2047.9, "text": " If you click on the header of column 3, you'll see the 3 misclassifications.", "tokens": [50364, 759, 291, 2052, 322, 264, 23117, 295, 7738, 805, 11, 291, 603, 536, 264, 805, 3346, 11665, 7833, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10298850801255968, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.005137104075402021}, {"id": 259, "seek": 203390, "start": 2048.9, "end": 2058.9, "text": " It predicted virginica twice when the actual class was versicolor, and it predicted versicolor once when the actual class was virginica.", "tokens": [51114, 467, 19147, 26404, 2262, 6091, 562, 264, 3539, 1508, 390, 1774, 299, 36182, 11, 293, 309, 19147, 1774, 299, 36182, 1564, 562, 264, 3539, 1508, 390, 26404, 2262, 13, 51614], "temperature": 0.0, "avg_logprob": -0.10298850801255968, "compression_ratio": 1.6136363636363635, "no_speech_prob": 0.005137104075402021}, {"id": 260, "seek": 205890, "start": 2058.9, "end": 2064.9, "text": " You can also view the probabilities of those predictions.", "tokens": [50364, 509, 393, 611, 1910, 264, 33783, 295, 729, 21264, 13, 50664], "temperature": 0.0, "avg_logprob": -0.08419710017265157, "compression_ratio": 1.5112781954887218, "no_speech_prob": 0.0041332063265144825}, {"id": 261, "seek": 205890, "start": 2074.9, "end": 2078.9, "text": " This time, the probabilities look a little different.", "tokens": [51164, 639, 565, 11, 264, 33783, 574, 257, 707, 819, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08419710017265157, "compression_ratio": 1.5112781954887218, "no_speech_prob": 0.0041332063265144825}, {"id": 262, "seek": 205890, "start": 2079.9, "end": 2085.9, "text": " This random forest model is not as confident as before when it comes to the Satosa class.", "tokens": [51414, 639, 4974, 6719, 2316, 307, 406, 382, 6679, 382, 949, 562, 309, 1487, 281, 264, 5344, 6447, 1508, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08419710017265157, "compression_ratio": 1.5112781954887218, "no_speech_prob": 0.0041332063265144825}, {"id": 263, "seek": 208590, "start": 2086.9, "end": 2091.9, "text": " There are several samples that have a 10% probability of being Satosa.", "tokens": [50414, 821, 366, 2940, 10938, 300, 362, 257, 1266, 4, 8482, 295, 885, 5344, 6447, 13, 50664], "temperature": 0.0, "avg_logprob": -0.039404447262103744, "compression_ratio": 1.4135802469135803, "no_speech_prob": 0.005908527411520481}, {"id": 264, "seek": 208590, "start": 2092.9, "end": 2104.9, "text": " On the flip side, this random forest model is much more confident about the versicolor and virginica predictions, with many samples having 100% probabilities.", "tokens": [50714, 1282, 264, 7929, 1252, 11, 341, 4974, 6719, 2316, 307, 709, 544, 6679, 466, 264, 1774, 299, 36182, 293, 26404, 2262, 21264, 11, 365, 867, 10938, 1419, 2319, 4, 33783, 13, 51314], "temperature": 0.0, "avg_logprob": -0.039404447262103744, "compression_ratio": 1.4135802469135803, "no_speech_prob": 0.005908527411520481}, {"id": 265, "seek": 210490, "start": 2105.9, "end": 2115.9, "text": " There are also more probability splits like 90-10, 85-15, 70-30, and so on.", "tokens": [50414, 821, 366, 611, 544, 8482, 37741, 411, 4289, 12, 3279, 11, 14695, 12, 5211, 11, 5285, 12, 3446, 11, 293, 370, 322, 13, 50914], "temperature": 0.0, "avg_logprob": -0.0746142946440598, "compression_ratio": 1.380952380952381, "no_speech_prob": 0.03357889503240585}, {"id": 266, "seek": 210490, "start": 2117.9, "end": 2127.9, "text": " Although we can still view some interesting information, unfortunately, we do not have as much access to information as we had with the decision tree model.", "tokens": [51014, 5780, 321, 393, 920, 1910, 512, 1880, 1589, 11, 7015, 11, 321, 360, 406, 362, 382, 709, 2105, 281, 1589, 382, 321, 632, 365, 264, 3537, 4230, 2316, 13, 51514], "temperature": 0.0, "avg_logprob": -0.0746142946440598, "compression_ratio": 1.380952380952381, "no_speech_prob": 0.03357889503240585}, {"id": 267, "seek": 212790, "start": 2128.9, "end": 2139.9, "text": " For example, even though I know that this random forest model generated 20 decision trees, I do not know what those trees look like.", "tokens": [50414, 1171, 1365, 11, 754, 1673, 286, 458, 300, 341, 4974, 6719, 2316, 10833, 945, 3537, 5852, 11, 286, 360, 406, 458, 437, 729, 5852, 574, 411, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08329231885014748, "compression_ratio": 1.429530201342282, "no_speech_prob": 0.08383696526288986}, {"id": 268, "seek": 212790, "start": 2140.9, "end": 2145.9, "text": " Nor do I know what features they used, or what threshold levels were determined.", "tokens": [51014, 6966, 360, 286, 458, 437, 4122, 436, 1143, 11, 420, 437, 14678, 4358, 645, 9540, 13, 51264], "temperature": 0.0, "avg_logprob": -0.08329231885014748, "compression_ratio": 1.429530201342282, "no_speech_prob": 0.08383696526288986}, {"id": 269, "seek": 214590, "start": 2146.9, "end": 2151.9, "text": " I can no longer present a visualization of what's going on under the hood.", "tokens": [50414, 286, 393, 572, 2854, 1974, 257, 25801, 295, 437, 311, 516, 322, 833, 264, 13376, 13, 50664], "temperature": 0.0, "avg_logprob": -0.0660111563546317, "compression_ratio": 1.5265486725663717, "no_speech_prob": 0.04400193318724632}, {"id": 270, "seek": 214590, "start": 2152.9, "end": 2158.9, "text": " So the random forest is kind of like a black box, just like our SVM model from last week.", "tokens": [50714, 407, 264, 4974, 6719, 307, 733, 295, 411, 257, 2211, 2424, 11, 445, 411, 527, 31910, 44, 2316, 490, 1036, 1243, 13, 51014], "temperature": 0.0, "avg_logprob": -0.0660111563546317, "compression_ratio": 1.5265486725663717, "no_speech_prob": 0.04400193318724632}, {"id": 271, "seek": 214590, "start": 2160.9, "end": 2166.9, "text": " So even though this random forest model is more accurate, it's more difficult to explain.", "tokens": [51114, 407, 754, 1673, 341, 4974, 6719, 2316, 307, 544, 8559, 11, 309, 311, 544, 2252, 281, 2903, 13, 51414], "temperature": 0.0, "avg_logprob": -0.0660111563546317, "compression_ratio": 1.5265486725663717, "no_speech_prob": 0.04400193318724632}, {"id": 272, "seek": 214590, "start": 2168.9, "end": 2174.9, "text": " As you are no doubt concluding, creating machine learning models is a series of tradeoffs.", "tokens": [51514, 1018, 291, 366, 572, 6385, 9312, 278, 11, 4084, 3479, 2539, 5245, 307, 257, 2638, 295, 4923, 19231, 13, 51814], "temperature": 0.0, "avg_logprob": -0.0660111563546317, "compression_ratio": 1.5265486725663717, "no_speech_prob": 0.04400193318724632}, {"id": 273, "seek": 217590, "start": 2176.9, "end": 2191.9, "text": " Before we conclude for today, let's go through an example of boosting, which is another ensemble learning technique that will reinforce this concept of tradeoffs when creating machine learning models.", "tokens": [50414, 4546, 321, 16886, 337, 965, 11, 718, 311, 352, 807, 364, 1365, 295, 43117, 11, 597, 307, 1071, 19492, 2539, 6532, 300, 486, 22634, 341, 3410, 295, 4923, 19231, 562, 4084, 3479, 2539, 5245, 13, 51164], "temperature": 0.0, "avg_logprob": -0.04812881042217386, "compression_ratio": 1.546448087431694, "no_speech_prob": 0.0002737022587098181}, {"id": 274, "seek": 217590, "start": 2195.9, "end": 2201.9, "text": " While bagging is used to lower variance, boosting is generally used to lower bias.", "tokens": [51364, 3987, 3411, 3249, 307, 1143, 281, 3126, 21977, 11, 43117, 307, 5101, 1143, 281, 3126, 12577, 13, 51664], "temperature": 0.0, "avg_logprob": -0.04812881042217386, "compression_ratio": 1.546448087431694, "no_speech_prob": 0.0002737022587098181}, {"id": 275, "seek": 220190, "start": 2202.9, "end": 2217.9, "text": " While it makes sense to use bagging with decision trees, since decision trees naturally tend to have high variance, it's not immediately clear why using boosting would help improve the performance of decision trees.", "tokens": [50414, 3987, 309, 1669, 2020, 281, 764, 3411, 3249, 365, 3537, 5852, 11, 1670, 3537, 5852, 8195, 3928, 281, 362, 1090, 21977, 11, 309, 311, 406, 4258, 1850, 983, 1228, 43117, 576, 854, 3470, 264, 3389, 295, 3537, 5852, 13, 51164], "temperature": 0.0, "avg_logprob": -0.0436327387304867, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.0022165896371006966}, {"id": 276, "seek": 220190, "start": 2219.9, "end": 2229.9, "text": " The motivation behind boosting is to answer the question, can a set of weak learners create a single, strong learner?", "tokens": [51264, 440, 12335, 2261, 43117, 307, 281, 1867, 264, 1168, 11, 393, 257, 992, 295, 5336, 23655, 1884, 257, 2167, 11, 2068, 33347, 30, 51764], "temperature": 0.0, "avg_logprob": -0.0436327387304867, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.0022165896371006966}, {"id": 277, "seek": 222990, "start": 2230.9, "end": 2240.9, "text": " An example of a weak learner is a classifier that is only slightly better at making predictions compared to a random guess.", "tokens": [50414, 1107, 1365, 295, 257, 5336, 33347, 307, 257, 1508, 9902, 300, 307, 787, 4748, 1101, 412, 1455, 21264, 5347, 281, 257, 4974, 2041, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1355861317027699, "compression_ratio": 1.4329896907216495, "no_speech_prob": 0.008574031293392181}, {"id": 278, "seek": 222990, "start": 2242.9, "end": 2249.9, "text": " An example of a boosting algorithm is Adaboost, which is short for adaptive boosting.", "tokens": [51014, 1107, 1365, 295, 257, 43117, 9284, 307, 1999, 41265, 555, 11, 597, 307, 2099, 337, 27912, 43117, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1355861317027699, "compression_ratio": 1.4329896907216495, "no_speech_prob": 0.008574031293392181}, {"id": 279, "seek": 222990, "start": 2250.9, "end": 2256.9, "text": " It was first introduced by Joachim Freund and Robert Shapur in 1997.", "tokens": [51414, 467, 390, 700, 7268, 538, 3139, 608, 332, 29685, 293, 7977, 44160, 374, 294, 22383, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1355861317027699, "compression_ratio": 1.4329896907216495, "no_speech_prob": 0.008574031293392181}, {"id": 280, "seek": 225690, "start": 2257.9, "end": 2265.9, "text": " Adaboost may be used with various learning algorithms, but it seems to pair particularly well with decision trees.", "tokens": [50414, 1999, 41265, 555, 815, 312, 1143, 365, 3683, 2539, 14642, 11, 457, 309, 2544, 281, 6119, 4098, 731, 365, 3537, 5852, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07617655553315815, "compression_ratio": 1.6285714285714286, "no_speech_prob": 0.003272515255957842}, {"id": 281, "seek": 225690, "start": 2267.9, "end": 2285.9, "text": " Unlike random forests that grow multiple decision trees and then aggregate them to form a new metamodel, Adaboost starts with what is known as a stump, meaning that it's a decision tree with only a root node and two leaf nodes.", "tokens": [50914, 17657, 4974, 21700, 300, 1852, 3866, 3537, 5852, 293, 550, 26118, 552, 281, 1254, 257, 777, 1131, 335, 41147, 11, 1999, 41265, 555, 3719, 365, 437, 307, 2570, 382, 257, 43164, 11, 3620, 300, 309, 311, 257, 3537, 4230, 365, 787, 257, 5593, 9984, 293, 732, 10871, 13891, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07617655553315815, "compression_ratio": 1.6285714285714286, "no_speech_prob": 0.003272515255957842}, {"id": 282, "seek": 228690, "start": 2286.9, "end": 2298.9, "text": " It's not clear to me how this works for classifications with three classes, like the IRIS dataset, but Adaboost does work for multi-class classification problems.", "tokens": [50364, 467, 311, 406, 1850, 281, 385, 577, 341, 1985, 337, 1508, 7833, 365, 1045, 5359, 11, 411, 264, 286, 9698, 28872, 11, 457, 1999, 41265, 555, 775, 589, 337, 4825, 12, 11665, 21538, 2740, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08113521621340797, "compression_ratio": 1.737556561085973, "no_speech_prob": 0.000527391501236707}, {"id": 283, "seek": 228690, "start": 2299.9, "end": 2315.9, "text": " Based on the information gathered by the Adaboost algorithm from that single stump, the algorithm will increase the weights given to the misclassified data so that it can focus on the misclassifications in the next round.", "tokens": [51014, 18785, 322, 264, 1589, 13032, 538, 264, 1999, 41265, 555, 9284, 490, 300, 2167, 43164, 11, 264, 9284, 486, 3488, 264, 17443, 2212, 281, 264, 3346, 11665, 2587, 1412, 370, 300, 309, 393, 1879, 322, 264, 3346, 11665, 7833, 294, 264, 958, 3098, 13, 51814], "temperature": 0.0, "avg_logprob": -0.08113521621340797, "compression_ratio": 1.737556561085973, "no_speech_prob": 0.000527391501236707}, {"id": 284, "seek": 231690, "start": 2316.9, "end": 2325.9, "text": " The algorithm will then use that new weighted dataset and pass it through another stump and make another set of predictions.", "tokens": [50364, 440, 9284, 486, 550, 764, 300, 777, 32807, 28872, 293, 1320, 309, 807, 1071, 43164, 293, 652, 1071, 992, 295, 21264, 13, 50814], "temperature": 0.0, "avg_logprob": -0.0366791566212972, "compression_ratio": 1.6746987951807228, "no_speech_prob": 0.001647898112423718}, {"id": 285, "seek": 231690, "start": 2326.9, "end": 2337.9, "text": " Again, the algorithm will increase the weight given to the misclassified data so that it can focus on the remaining misclassified data in the next round.", "tokens": [50864, 3764, 11, 264, 9284, 486, 3488, 264, 3364, 2212, 281, 264, 3346, 11665, 2587, 1412, 370, 300, 309, 393, 1879, 322, 264, 8877, 3346, 11665, 2587, 1412, 294, 264, 958, 3098, 13, 51414], "temperature": 0.0, "avg_logprob": -0.0366791566212972, "compression_ratio": 1.6746987951807228, "no_speech_prob": 0.001647898112423718}, {"id": 286, "seek": 233790, "start": 2338.9, "end": 2348.9, "text": " The theory is that by doing this, the algorithm will focus on the samples that are hardest to classify as it continues going through this process.", "tokens": [50414, 440, 5261, 307, 300, 538, 884, 341, 11, 264, 9284, 486, 1879, 322, 264, 10938, 300, 366, 13158, 281, 33872, 382, 309, 6515, 516, 807, 341, 1399, 13, 50914], "temperature": 0.0, "avg_logprob": -0.043178369017208326, "compression_ratio": 1.5816326530612246, "no_speech_prob": 0.027580028399825096}, {"id": 287, "seek": 233790, "start": 2349.9, "end": 2361.9, "text": " It will repeat this process and add the knowledge it gains from all of these weak learners to form a single, strong metamodel that can be used to make predictions.", "tokens": [50964, 467, 486, 7149, 341, 1399, 293, 909, 264, 3601, 309, 16823, 490, 439, 295, 613, 5336, 23655, 281, 1254, 257, 2167, 11, 2068, 1131, 335, 41147, 300, 393, 312, 1143, 281, 652, 21264, 13, 51564], "temperature": 0.0, "avg_logprob": -0.043178369017208326, "compression_ratio": 1.5816326530612246, "no_speech_prob": 0.027580028399825096}, {"id": 288, "seek": 236190, "start": 2362.9, "end": 2372.9, "text": " I realize that this is even more abstract than the random forest, so let's take a look at Adaboost in action.", "tokens": [50414, 286, 4325, 300, 341, 307, 754, 544, 12649, 813, 264, 4974, 6719, 11, 370, 718, 311, 747, 257, 574, 412, 1999, 41265, 555, 294, 3069, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08038523290064428, "compression_ratio": 1.5326086956521738, "no_speech_prob": 0.05498644337058067}, {"id": 289, "seek": 236190, "start": 2373.9, "end": 2379.9, "text": " Fortunately, we can use the DecisionTree.jl package to generate an Adaboost model.", "tokens": [50964, 20652, 11, 321, 393, 764, 264, 12427, 1991, 51, 701, 13, 73, 75, 7372, 281, 8460, 364, 1999, 41265, 555, 2316, 13, 51264], "temperature": 0.0, "avg_logprob": -0.08038523290064428, "compression_ratio": 1.5326086956521738, "no_speech_prob": 0.05498644337058067}, {"id": 290, "seek": 236190, "start": 2380.9, "end": 2387.9, "text": " All we need to do is use the Adaboost Stump classifier constructor to generate our model.", "tokens": [51314, 1057, 321, 643, 281, 360, 307, 764, 264, 1999, 41265, 555, 745, 1420, 1508, 9902, 47479, 281, 8460, 527, 2316, 13, 51664], "temperature": 0.0, "avg_logprob": -0.08038523290064428, "compression_ratio": 1.5326086956521738, "no_speech_prob": 0.05498644337058067}, {"id": 291, "seek": 238790, "start": 2388.9, "end": 2400.9, "text": " This model does not have a default setting for the number of iterations, so you will need to enter that number manually by using the N underscore iterations keyword arguments.", "tokens": [50414, 639, 2316, 775, 406, 362, 257, 7576, 3287, 337, 264, 1230, 295, 36540, 11, 370, 291, 486, 643, 281, 3242, 300, 1230, 16945, 538, 1228, 264, 426, 37556, 36540, 20428, 12869, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09847970803578694, "compression_ratio": 1.6553398058252426, "no_speech_prob": 0.010164815932512283}, {"id": 292, "seek": 238790, "start": 2401.9, "end": 2414.9, "text": " Setting the N iterations to 20 means that our model will generate 20 stumps to create one tree, as opposed to creating 20 full trees used in the random forest model.", "tokens": [51064, 21063, 264, 426, 36540, 281, 945, 1355, 300, 527, 2316, 486, 8460, 945, 342, 16951, 281, 1884, 472, 4230, 11, 382, 8851, 281, 4084, 945, 1577, 5852, 1143, 294, 264, 4974, 6719, 2316, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09847970803578694, "compression_ratio": 1.6553398058252426, "no_speech_prob": 0.010164815932512283}, {"id": 293, "seek": 241490, "start": 2415.9, "end": 2426.9, "text": " After that, all of the code is exactly the same as the code used in the random forest example, so I'm just going to copy and paste the code from above.", "tokens": [50414, 2381, 300, 11, 439, 295, 264, 3089, 307, 2293, 264, 912, 382, 264, 3089, 1143, 294, 264, 4974, 6719, 1365, 11, 370, 286, 478, 445, 516, 281, 5055, 293, 9163, 264, 3089, 490, 3673, 13, 50964], "temperature": 0.0, "avg_logprob": -0.05748059199406551, "compression_ratio": 1.3482142857142858, "no_speech_prob": 0.004330787342041731}, {"id": 294, "seek": 242690, "start": 2426.9, "end": 2444.9, "text": " So, we created an Adaboost model using the exact same training data and testing data that we used for both the DecisionTree and the random forest.", "tokens": [50364, 407, 11, 321, 2942, 364, 1999, 41265, 555, 2316, 1228, 264, 1900, 912, 3097, 1412, 293, 4997, 1412, 300, 321, 1143, 337, 1293, 264, 12427, 1991, 51, 701, 293, 264, 4974, 6719, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10599620277817184, "compression_ratio": 1.3153153153153154, "no_speech_prob": 0.004467659629881382}, {"id": 295, "seek": 244490, "start": 2445.9, "end": 2460.9, "text": " This time, we achieved a predictive accuracy score of around 95%, which is a significant improvement over the 89% of the DecisionTree and comparable to the random forest and SVM models.", "tokens": [50414, 639, 565, 11, 321, 11042, 257, 35521, 14170, 6175, 295, 926, 13420, 8923, 597, 307, 257, 4776, 10444, 670, 264, 31877, 4, 295, 264, 12427, 1991, 51, 701, 293, 25323, 281, 264, 4974, 6719, 293, 31910, 44, 5245, 13, 51164], "temperature": 0.0, "avg_logprob": -0.060566270162188816, "compression_ratio": 1.446927374301676, "no_speech_prob": 0.13290807604789734}, {"id": 296, "seek": 244490, "start": 2461.9, "end": 2466.9, "text": " Like the random forest model, this Adaboost model is sort of a black box.", "tokens": [51214, 1743, 264, 4974, 6719, 2316, 11, 341, 1999, 41265, 555, 2316, 307, 1333, 295, 257, 2211, 2424, 13, 51464], "temperature": 0.0, "avg_logprob": -0.060566270162188816, "compression_ratio": 1.446927374301676, "no_speech_prob": 0.13290807604789734}, {"id": 297, "seek": 246690, "start": 2467.9, "end": 2475.9, "text": " We do not have access to as much information as the DecisionTree model, but we still have access to some information.", "tokens": [50414, 492, 360, 406, 362, 2105, 281, 382, 709, 1589, 382, 264, 12427, 1991, 51, 701, 2316, 11, 457, 321, 920, 362, 2105, 281, 512, 1589, 13, 50814], "temperature": 0.0, "avg_logprob": -0.055884286761283875, "compression_ratio": 1.6848484848484848, "no_speech_prob": 0.0384531244635582}, {"id": 298, "seek": 246690, "start": 2476.9, "end": 2481.9, "text": " Just like before, we can view our results on a confusion matrix.", "tokens": [50864, 1449, 411, 949, 11, 321, 393, 1910, 527, 3542, 322, 257, 15075, 8141, 13, 51114], "temperature": 0.0, "avg_logprob": -0.055884286761283875, "compression_ratio": 1.6848484848484848, "no_speech_prob": 0.0384531244635582}, {"id": 299, "seek": 246690, "start": 2482.9, "end": 2488.9, "text": " The confusion matrix looks exactly the same as the confusion matrix on the random forest model.", "tokens": [51164, 440, 15075, 8141, 1542, 2293, 264, 912, 382, 264, 15075, 8141, 322, 264, 4974, 6719, 2316, 13, 51464], "temperature": 0.0, "avg_logprob": -0.055884286761283875, "compression_ratio": 1.6848484848484848, "no_speech_prob": 0.0384531244635582}, {"id": 300, "seek": 249690, "start": 2496.9, "end": 2507.9, "text": " And the prediction versus actual data looks identical to the random forest, so you may be wondering if anything is different.", "tokens": [50364, 400, 264, 17630, 5717, 3539, 1412, 1542, 14800, 281, 264, 4974, 6719, 11, 370, 291, 815, 312, 6359, 498, 1340, 307, 819, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08989224547431582, "compression_ratio": 1.4338235294117647, "no_speech_prob": 0.0012642896035686135}, {"id": 301, "seek": 249690, "start": 2508.9, "end": 2513.9, "text": " Let's take a look at the probability distribution of the predictions.", "tokens": [50964, 961, 311, 747, 257, 574, 412, 264, 8482, 7316, 295, 264, 21264, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08989224547431582, "compression_ratio": 1.4338235294117647, "no_speech_prob": 0.0012642896035686135}, {"id": 302, "seek": 251390, "start": 2514.9, "end": 2528.9, "text": " So, this looks very different from the DecisionTree and the random forest.", "tokens": [50414, 407, 11, 341, 1542, 588, 819, 490, 264, 12427, 1991, 51, 701, 293, 264, 4974, 6719, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10025991439819336, "compression_ratio": 1.4791666666666667, "no_speech_prob": 0.000767177261877805}, {"id": 303, "seek": 251390, "start": 2529.9, "end": 2539.9, "text": " Although the Adaboost model had the same predictive accuracy as the random forest model, it is a lot less confident about its predictions.", "tokens": [51164, 5780, 264, 1999, 41265, 555, 2316, 632, 264, 912, 35521, 14170, 382, 264, 4974, 6719, 2316, 11, 309, 307, 257, 688, 1570, 6679, 466, 1080, 21264, 13, 51664], "temperature": 0.0, "avg_logprob": -0.10025991439819336, "compression_ratio": 1.4791666666666667, "no_speech_prob": 0.000767177261877805}, {"id": 304, "seek": 253990, "start": 2540.9, "end": 2547.9, "text": " Most of the predictions have a 65-35 splits, or a 70-30 splits.", "tokens": [50414, 4534, 295, 264, 21264, 362, 257, 11624, 12, 8794, 37741, 11, 420, 257, 5285, 12, 3446, 37741, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08231892384273905, "compression_ratio": 1.5170454545454546, "no_speech_prob": 0.004828677978366613}, {"id": 305, "seek": 253990, "start": 2548.9, "end": 2555.9, "text": " There are even some examples with a 52-48 splits, which is barely better than a coin flip.", "tokens": [50814, 821, 366, 754, 512, 5110, 365, 257, 18079, 12, 13318, 37741, 11, 597, 307, 10268, 1101, 813, 257, 11464, 7929, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08231892384273905, "compression_ratio": 1.5170454545454546, "no_speech_prob": 0.004828677978366613}, {"id": 306, "seek": 253990, "start": 2556.9, "end": 2565.9, "text": " There's not a single sample with a 100% probability, although there are plenty of samples with a 0% probability.", "tokens": [51214, 821, 311, 406, 257, 2167, 6889, 365, 257, 2319, 4, 8482, 11, 4878, 456, 366, 7140, 295, 10938, 365, 257, 1958, 4, 8482, 13, 51664], "temperature": 0.0, "avg_logprob": -0.08231892384273905, "compression_ratio": 1.5170454545454546, "no_speech_prob": 0.004828677978366613}, {"id": 307, "seek": 256590, "start": 2566.9, "end": 2569.9, "text": " So that's really interesting, isn't it?", "tokens": [50414, 407, 300, 311, 534, 1880, 11, 1943, 380, 309, 30, 50564], "temperature": 0.0, "avg_logprob": -0.09394180774688721, "compression_ratio": 1.4108108108108108, "no_speech_prob": 0.001115864492021501}, {"id": 308, "seek": 256590, "start": 2570.9, "end": 2580.9, "text": " Both random forest and Adaboost offer the potential for enhanced predictive accuracy, but they approach the problem using very different techniques.", "tokens": [50614, 6767, 4974, 6719, 293, 1999, 41265, 555, 2626, 264, 3995, 337, 21191, 35521, 14170, 11, 457, 436, 3109, 264, 1154, 1228, 588, 819, 7512, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09394180774688721, "compression_ratio": 1.4108108108108108, "no_speech_prob": 0.001115864492021501}, {"id": 309, "seek": 256590, "start": 2584.9, "end": 2589.9, "text": " We covered a lot of material today, so let's go through a quick summary.", "tokens": [51314, 492, 5343, 257, 688, 295, 2527, 965, 11, 370, 718, 311, 352, 807, 257, 1702, 12691, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09394180774688721, "compression_ratio": 1.4108108108108108, "no_speech_prob": 0.001115864492021501}, {"id": 310, "seek": 258990, "start": 2590.9, "end": 2598.9, "text": " While DecisionTrees are relatively easy to visualize and easy to explain, they are surprisingly difficult to implement.", "tokens": [50414, 3987, 12427, 1991, 51, 4856, 366, 7226, 1858, 281, 23273, 293, 1858, 281, 2903, 11, 436, 366, 17600, 2252, 281, 4445, 13, 50814], "temperature": 0.0, "avg_logprob": -0.0673344540146162, "compression_ratio": 1.4846625766871167, "no_speech_prob": 0.018825281411409378}, {"id": 311, "seek": 258990, "start": 2599.9, "end": 2608.9, "text": " They also have some flaws, namely that they are not known for their predictive accuracy and they are prone to overfitting.", "tokens": [50864, 814, 611, 362, 512, 27108, 11, 20926, 300, 436, 366, 406, 2570, 337, 641, 35521, 14170, 293, 436, 366, 25806, 281, 670, 69, 2414, 13, 51314], "temperature": 0.0, "avg_logprob": -0.0673344540146162, "compression_ratio": 1.4846625766871167, "no_speech_prob": 0.018825281411409378}, {"id": 312, "seek": 260890, "start": 2609.9, "end": 2619.9, "text": " This led to a discussion about the bias variance trade-off, which will be an ongoing subject of conversation throughout this machine learning series.", "tokens": [50414, 639, 4684, 281, 257, 5017, 466, 264, 12577, 21977, 4923, 12, 4506, 11, 597, 486, 312, 364, 10452, 3983, 295, 3761, 3710, 341, 3479, 2539, 2638, 13, 50914], "temperature": 0.0, "avg_logprob": -0.0798868527488103, "compression_ratio": 1.592964824120603, "no_speech_prob": 0.014497614465653896}, {"id": 313, "seek": 260890, "start": 2620.9, "end": 2632.9, "text": " Through that discussion, we learned that we could potentially enhance the performance of DecisionTrees by using ensemble learning methods, namely bagging and boosting.", "tokens": [50964, 8927, 300, 5017, 11, 321, 3264, 300, 321, 727, 7263, 11985, 264, 3389, 295, 12427, 1991, 51, 4856, 538, 1228, 19492, 2539, 7150, 11, 20926, 3411, 3249, 293, 43117, 13, 51564], "temperature": 0.0, "avg_logprob": -0.0798868527488103, "compression_ratio": 1.592964824120603, "no_speech_prob": 0.014497614465653896}, {"id": 314, "seek": 263290, "start": 2633.9, "end": 2642.9, "text": " Bagging is short for bootstrap aggregating, and Random Forest is one of the best known implementations of that method.", "tokens": [50414, 24377, 3249, 307, 2099, 337, 11450, 372, 4007, 16743, 990, 11, 293, 37603, 18124, 307, 472, 295, 264, 1151, 2570, 4445, 763, 295, 300, 3170, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08769235759973526, "compression_ratio": 1.530054644808743, "no_speech_prob": 0.003943823277950287}, {"id": 315, "seek": 263290, "start": 2643.9, "end": 2654.9, "text": " Random Forest works by using various techniques to increase the independence of features and by increasing the number of DecisionTrees to be used in a metamodel.", "tokens": [50914, 37603, 18124, 1985, 538, 1228, 3683, 7512, 281, 3488, 264, 14640, 295, 4122, 293, 538, 5662, 264, 1230, 295, 12427, 1991, 51, 4856, 281, 312, 1143, 294, 257, 1131, 335, 41147, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08769235759973526, "compression_ratio": 1.530054644808743, "no_speech_prob": 0.003943823277950287}, {"id": 316, "seek": 265490, "start": 2655.9, "end": 2666.9, "text": " Boosting, on the other hand, uses an additive approach by using a collection of so-called weak learners to combine into a single strong learner.", "tokens": [50414, 43902, 278, 11, 322, 264, 661, 1011, 11, 4960, 364, 45558, 3109, 538, 1228, 257, 5765, 295, 370, 12, 11880, 5336, 23655, 281, 10432, 666, 257, 2167, 2068, 33347, 13, 50964], "temperature": 0.0, "avg_logprob": -0.0536625725882394, "compression_ratio": 1.5031847133757963, "no_speech_prob": 0.01743699051439762}, {"id": 317, "seek": 265490, "start": 2667.9, "end": 2674.9, "text": " Adaboost, which is short for adaptive boosting, is a well-known implementation of boosting.", "tokens": [51014, 1999, 41265, 555, 11, 597, 307, 2099, 337, 27912, 43117, 11, 307, 257, 731, 12, 6861, 11420, 295, 43117, 13, 51364], "temperature": 0.0, "avg_logprob": -0.0536625725882394, "compression_ratio": 1.5031847133757963, "no_speech_prob": 0.01743699051439762}, {"id": 318, "seek": 267490, "start": 2675.9, "end": 2687.9, "text": " Along the way, we were introduced to another analytic tool, the confusion matrix, along with the CAPA coefficients, that we can use to better understand our results.", "tokens": [50414, 17457, 264, 636, 11, 321, 645, 7268, 281, 1071, 40358, 2290, 11, 264, 15075, 8141, 11, 2051, 365, 264, 33636, 32, 31994, 11, 300, 321, 393, 764, 281, 1101, 1223, 527, 3542, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09235479792610543, "compression_ratio": 1.4823529411764707, "no_speech_prob": 0.07366374135017395}, {"id": 319, "seek": 267490, "start": 2689.9, "end": 2695.9, "text": " That's a lot to cover in one tutorial, and that's a lot to include in a Julia package.", "tokens": [51114, 663, 311, 257, 688, 281, 2060, 294, 472, 7073, 11, 293, 300, 311, 257, 688, 281, 4090, 294, 257, 18551, 7372, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09235479792610543, "compression_ratio": 1.4823529411764707, "no_speech_prob": 0.07366374135017395}, {"id": 320, "seek": 269590, "start": 2696.9, "end": 2704.9, "text": " Like I said at the beginning, the DecisionTree.jl package is surprisingly sophisticated and is full of Easter eggs.", "tokens": [50414, 1743, 286, 848, 412, 264, 2863, 11, 264, 12427, 1991, 51, 701, 13, 73, 75, 7372, 307, 17600, 16950, 293, 307, 1577, 295, 9403, 6466, 13, 50814], "temperature": 0.0, "avg_logprob": -0.06191485364672164, "compression_ratio": 1.5125628140703518, "no_speech_prob": 0.027984576299786568}, {"id": 321, "seek": 269590, "start": 2706.9, "end": 2718.9, "text": " Please show your appreciation to the developer and the contributors for sharing their knowledge with the rest of us by going to the GitHub page of DecisionTree.jl and leave them a star.", "tokens": [50914, 2555, 855, 428, 18909, 281, 264, 10754, 293, 264, 45627, 337, 5414, 641, 3601, 365, 264, 1472, 295, 505, 538, 516, 281, 264, 23331, 3028, 295, 12427, 1991, 51, 701, 13, 73, 75, 293, 1856, 552, 257, 3543, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06191485364672164, "compression_ratio": 1.5125628140703518, "no_speech_prob": 0.027984576299786568}, {"id": 322, "seek": 271890, "start": 2719.9, "end": 2729.9, "text": " Well, that's all for today. If you made it this far, congratulations.", "tokens": [50414, 1042, 11, 300, 311, 439, 337, 965, 13, 759, 291, 1027, 309, 341, 1400, 11, 13568, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1156534921555292, "compression_ratio": 1.4678362573099415, "no_speech_prob": 0.05029305815696716}, {"id": 323, "seek": 271890, "start": 2730.9, "end": 2738.9, "text": " If you enjoyed this video and you feel like you learned something new, please give it a thumbs up.", "tokens": [50964, 759, 291, 4626, 341, 960, 293, 291, 841, 411, 291, 3264, 746, 777, 11, 1767, 976, 309, 257, 8838, 493, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1156534921555292, "compression_ratio": 1.4678362573099415, "no_speech_prob": 0.05029305815696716}, {"id": 324, "seek": 271890, "start": 2739.9, "end": 2745.9, "text": " For more wholesome Julia tutorials, please be sure to subscribe and hit that bell.", "tokens": [51414, 1171, 544, 315, 45880, 18551, 17616, 11, 1767, 312, 988, 281, 3022, 293, 2045, 300, 4549, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1156534921555292, "compression_ratio": 1.4678362573099415, "no_speech_prob": 0.05029305815696716}, {"id": 325, "seek": 274590, "start": 2745.9, "end": 2751.9, "text": " If you like what I do, then please consider joining and becoming a channel member.", "tokens": [50364, 759, 291, 411, 437, 286, 360, 11, 550, 1767, 1949, 5549, 293, 5617, 257, 2269, 4006, 13, 50664], "temperature": 0.0, "avg_logprob": -0.08648049831390381, "compression_ratio": 1.3380281690140845, "no_speech_prob": 0.035080891102552414}, {"id": 326, "seek": 274590, "start": 2752.9, "end": 2755.9, "text": " New tutorials are posted on Sundays slash Mondays.", "tokens": [50714, 1873, 17616, 366, 9437, 322, 44857, 17330, 7492, 3772, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08648049831390381, "compression_ratio": 1.3380281690140845, "no_speech_prob": 0.035080891102552414}, {"id": 327, "seek": 274590, "start": 2756.9, "end": 2760.9, "text": " Thanks for watching, and I'll see you in the next video.", "tokens": [50914, 2561, 337, 1976, 11, 293, 286, 603, 536, 291, 294, 264, 958, 960, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08648049831390381, "compression_ratio": 1.3380281690140845, "no_speech_prob": 0.035080891102552414}], "language": "en"}