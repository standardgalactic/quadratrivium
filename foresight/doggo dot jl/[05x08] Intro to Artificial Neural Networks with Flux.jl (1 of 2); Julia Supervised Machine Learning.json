{"text": " Today, we tackle the famous MNIST classification problem, which has become the Hello World of Deep Learning. I introduced the MNIST database way back in the first episode of this series. As a reminder, it's a dataset containing a collection of handwritten numbers from 0 to 9. It was created in 1998 to answer the question, is it possible to teach a computer to recognize handwritten digits? So, is it possible to teach your computer how to recognize handwritten digits? Well, let's find out. Welcome to Julia for Talented Amateurs, where I may call some Julia tutorials for talented amateurs everywhere. I am your host, the Dabbling Doggo. In today's tutorial, we'll get an introduction to Artificial Neural Networks, or simply known as Neural Networks. If you look on the Wikipedia page for machine learning and expand the supervised learning section, you'll see Artificial Neural Networks listed there. But you'll also notice that there's a separate section further down called Artificial Neural Networks. If you expand that section, you'll see a lot of different subjects listed there. Artificial Neural Networks are part of a very large field of study that goes well beyond the scope of the series. There is no way I'm going to be able to cover all of those subjects now, so I will try to cover them in a future 13-part series. For this series, I will use this tutorial and the next tutorial to provide a high-level introduction to Artificial Neural Networks, which is the gateway to deep learning. There are many different ways to approach the MNIST classification problem using various programming languages. In today's tutorial, we'll go through a pure Julia approach by building an Artificial Neural Network using the flux.jl package. In the next tutorial, we'll take the code that we developed today and go through it in more detail to understand the concepts behind the code. So, the game plan for today is to get through all of the code and to get our model up and running. As a result, I will not be providing a lot of explanations today. For today's tutorial, knowledge of Julia and VS Code is required. I'm also assuming that you're watching this entire machine learning playlist. In your VS Code Explorer panel, create a new folder for this tutorial. In the tutorial folder, create a new file called sl underscore ann.jl. Change the Julia REPL by using ALT J then ALT O. Maximize the REPL panel. Change the present working directory to your tutorial directory. Enter the package REPL by hitting the closing square bracket. Activate your tutorial directory. Add the following packages, flux, images, ml data sets, and plots. Type in status to confirm the version numbers. Exit the package REPL by hitting backspace. Change the REPL panel. Okay, let's get started. Let's start by loading some packages. One of the quirks of the flux package is that you also need to load some of the specific functions that you want to use in your session. And finally, we need to use some of Julia's standard libraries. Using a random seed is not required, but I'm using it so I can reproduce my results. The ml data sets package contains several data sets that are commonly used in machine learning. One of those data sets is the mNIST data sets. The ml data sets package also contains a convenient way to load those data sets into memory. If this is your first time loading the mNIST data set onto your computer, you should be prompted to confirm whether or not you want to download the data set, since it's quite large. Select yes to begin the download. Depending on your internet connection, it may take a few minutes. Since I already have the mNIST data set on my computer, the data set was loaded right away. Now that we have the data, let's take a look at it. This is the input training data. So it looks like a tensor of floating point numbers that has 28 rows and 28 columns and is 60,000 layers deep. This is by far the largest data set that I've used on my channel to date. Unfortunately, there's not a great way to view it in the REPL. The 28 rows and 28 columns contain numbers from 0 to 1 that represent a black and white image of a handwritten digit. We can use the images package to view one of the images. For some reason, the images are loaded horizontally. You need to transpose the image in order to view it vertically, so don't forget that apostrophe. You should see a white handwritten number on a black background. No offense, but that's not exactly the nicest handwriting. But it's a useful sample since everyone has a slightly different handwriting style, and it's important for your computer to be able to read different handwritten versions of the same number. Now the question is, what number is it? Like any other data set used for classification problems, every sample in the MNIST data set includes a label with a correct number. Let's take a look at the label attached to this image. So the labels are contained in a column vector containing 60,000 integers. These labels are integers from 0 to 9. The label for the first sample is 5. If you look at the image, it sort of looks like a 5, and it sort of doesn't. If it's this hard for humans to figure out, you can imagine how challenging this will be for our computer to try to figure this out. Now let's take a look at the test data. In past tutorials, we took our data set and split it between training and testing. The MNIST data set contains 60,000 samples for training and another 10,000 samples for testing, so there's no need to split the data since it's already been split for you. Let's take a look at a testing sample. So it's the same 28x28 matrix for the image, but it's only 10,000 layers deep. So this image is easier to read. It looks like a 7, but let's check the label to be sure. So the label is indeed 7, which is comforting. Now that we have our data loaded into memory and have it split between inputs and outputs, as well as split between training and testing, we should be ready to build our model, right? Well no, not exactly. There are a couple of additional preprocessing steps that we need to do. Fortunately, the Flux.jl package comes included with utilities to make these preprocessing steps easy. For the input data, we need to, quote unquote, flatten the three-dimensional tensor into a two-dimensional matrix. Normally, that would mean reshaping our Julia array, but the Flux.jl package has a utility function called flatten that will do that for us. You can see that our 28x28x60,000 tensor is now a 784x60,000 matrix. All it did was take the 28x28 image and convert it into a column vector with 784 elements, so each column contains the floating point numbers associated with each image. We also need to flatten the inputs for the testing data as well. For the labels, we need to do something called one-hot encoding. If you look in the REPL, you'll see what it did. For each label, it replaced the integer with a column vector with a one at the index representing the integer. So in the first column, that one is in the sixth row. Well, you'll recall that the first label is five, not six. That's because this column vector starts at zero and goes to nine. So the sixth row represents the label for the number five. The one-hot batch function also concatenates all of these column vectors horizontally, so the result is a 10x60,000 one-hot matrix made up of Boolean values. All of those dots are zeros. We need to do the same thing for the testing labels. In the REPL, you can see that it's a similar result, except the testing data only has 10,000 labels. Okay, we are now ready to define our model. Unlike other machine learning packages that we've seen so far, the flux.jl package is not an algorithm. Instead, it's a deep learning toolkit that provides building blocks that you can use to create your own custom deep learning models. We'll go through the flux package in more detail in the next tutorial, but for now, let's just use those building blocks to create our first artificial neural network. There's a lot going on in this deceptively simple code. Here's a visualization of what we just built. This is a diagram of a neural network. Specifically, this is an example of a multi-layer perceptron, or MLP, which is a type of artificial neural network. Although this model is more complex than any model that we've seen so far, the MLP is considered relatively simple in the deep learning world. We'll go through this diagram in more detail in the next tutorial, but at a very high level, this diagram represents a model containing a lot of parameters. We're going to feed our training inputs into this model, and then the model will try to learn the parameters necessary to predict the training labels, just like any other machine learning model. In other words, the model will digest the data and calculate a loss. Based on the result after a single epoch, the model will then update the parameter slightly in order to reduce the loss by using an optimization algorithm. Your model will repeat this process until you tell it to stop. I'll cover all of those other coding terms like chain, dense, reilu, and softmax in the next tutorial. Let's move on to defining the loss function. There are many different loss functions used in deep learning, and the flux.jl package supports all of the major loss functions. Today, we're using a loss function called cross entropy. Again, more on this in the next tutorial. Our model contains a lot of different parameters. The flux.jl package initializes all of those parameters using random values. Next, we need to select an optimization algorithm that will determine how our computer will quote unquote, learn the data. There are several different optimizers used in deep learning, and the flux.jl package supports all of the commonly used optimizers. Today, we're going to use an optimizer called atom, which is short for adaptive moment estimation. Okay, we are now ready to train our model. The flux.jl package comes included with a handy utility that makes it easy to train our model. All we need to do is provide a for loop to repeat the training process over multiple epochs. Just a warning, depending on your computer's CPU, this may take several minutes to train. I'm going to fast forward through this part. After an initial delay, you should see some outputs in the REPL, and if everything went okay, the training loss should be decreasing over time. We now have a trained model with lots of updated parameters. So, how do we use this model in order to make predictions? Well, we can just run our test data through our newly trained model in order to get the predictions. So, running our test data through our model results in a 10 by 10,000 matrix, which you can see in the REPL. It's a little difficult to read, but those crazy looking numbers are really small values close to zero. In each column, you should see a single value close to one. The sum of each column adds up to 100%, and each row contains the probability of the prediction. Remember that the index numbers for the rows go from 1 to 10, but our labels go from 0 to 9. So, the first row is the probability that the image is a zero, and the second row is the probability that the image is a one, and so on. In order to make it easier to work with these predictions, we can use the one cold utility function from the flux.jl package, which is like the opposite of the one hot batch utility function. A one cold function converts a matrix into a column vector containing the index number that has the highest probability value. In order to convert index numbers into labels, we need to subtract one from each of the index numbers. You can see that our predictions are now contained in a column vector with 10,000 elements. Now, all we need to do is compare the predicted labels with the actual labels for the test data. So, our little artificial neural network model achieved an accuracy score of 96.24%, which is pretty amazing considering how difficult the challenge is. Now, before we go out and celebrate, let's take a look at the current best-in-class accuracy score. According to the Wikipedia article on the MNIST database, the highest average accuracy score for any machine learning model is 99.83%, which was achieved in 2020 using something called a convolutional neural network. In any event, let's take a look at some of our misclassifications to see if we can gain any insights. So this table contains 10,000 rows. The first column is the index number for both the predictions as well as the actual label data. The second column contains the predicted labels, and the third column contains the actual labels from the test data sets. The fourth column contains one for true if the predicted label has been classified correctly, and a zero for false if the predicted label has been misclassified. If you sort on column 4, you can see all of the misclassifications. So there are 376 misclassifications, which sounds like a lot, but remember, there are 10,000 test samples. Let's take a look at the first misclassification, which has an index number of 9. So I don't know about you, but I cannot read this handwriting. I mean, what is that? It's labeled as a 5, but does that look like a 5 to you? Our model guessed 4, and you can kind of forgive it since I don't think I could have classified this image correctly as a 5 just by looking at it. Anyways, you get my point. This is not a trivial classification problem, and it's amazing that any model can achieve accuracy levels that are comparable to human beings, given the wide range in handwriting styles. So that was fun, right? Here we go, let's plot a learning curve to see how our model did while training. So this learning curve looks similar to other learning curves that we've seen in past tutorials. Even though the code for this neural network looks very different, the overall learning workflow is very similar to other machine learning algorithms. Let's save this plot and recap what we just witnessed. Today we became very familiar with the MNIST data sets, and we got a quick introduction to the Flux.jl package. After doing a little preprocessing work on the data, we immediately built an artificial neural network model using the tools provided by the Flux.jl package. Then we followed a similar workflow that we used with other machine learning algorithms by defining a loss function, by initializing parameters, by selecting an optimizer, and by training our model using a for loop. But the actual details of that workflow are very different with a lot of new terms. In the end, we were able to use this trained model in order to make predictions, like we did with other machine learning models. We were also able to calculate an accuracy score and plot a learning curve. Hopefully, today's tutorial has left you both excited and confused. After seeing what's possible with artificial neural networks, you probably want to use it right away, but may be hesitant since you may be wondering what's going on under the hood. In the next tutorial, we'll revisit this code in order to gain a better understanding of the concepts that make these artificial neural networks such a modern marvel. So stay tuned for that. Well, that's all for today. If you made it this far, congratulations! If you enjoyed this video and you feel like you learned something new, please give it a thumbs up. For more wholesome Julia tutorials, please be sure to subscribe and hit that bell. If you like what I do, then please consider joining and becoming a channel member. New tutorials are posted on Sundays slash Mondays. Thanks for watching, and I'll see you in the next video.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 7.44, "text": " Today, we tackle the famous MNIST classification problem, which has become the Hello World", "tokens": [50364, 2692, 11, 321, 14896, 264, 4618, 376, 45, 19756, 21538, 1154, 11, 597, 575, 1813, 264, 2425, 3937, 50736], "temperature": 0.0, "avg_logprob": -0.1726210956842127, "compression_ratio": 1.393939393939394, "no_speech_prob": 0.003943843301385641}, {"id": 1, "seek": 0, "start": 7.44, "end": 10.16, "text": " of Deep Learning.", "tokens": [50736, 295, 14895, 15205, 13, 50872], "temperature": 0.0, "avg_logprob": -0.1726210956842127, "compression_ratio": 1.393939393939394, "no_speech_prob": 0.003943843301385641}, {"id": 2, "seek": 0, "start": 10.16, "end": 16.56, "text": " I introduced the MNIST database way back in the first episode of this series.", "tokens": [50872, 286, 7268, 264, 376, 45, 19756, 8149, 636, 646, 294, 264, 700, 3500, 295, 341, 2638, 13, 51192], "temperature": 0.0, "avg_logprob": -0.1726210956842127, "compression_ratio": 1.393939393939394, "no_speech_prob": 0.003943843301385641}, {"id": 3, "seek": 0, "start": 16.56, "end": 22.48, "text": " As a reminder, it's a dataset containing a collection of handwritten numbers from 0", "tokens": [51192, 1018, 257, 13548, 11, 309, 311, 257, 28872, 19273, 257, 5765, 295, 1011, 26859, 3547, 490, 1958, 51488], "temperature": 0.0, "avg_logprob": -0.1726210956842127, "compression_ratio": 1.393939393939394, "no_speech_prob": 0.003943843301385641}, {"id": 4, "seek": 0, "start": 22.48, "end": 24.96, "text": " to 9.", "tokens": [51488, 281, 1722, 13, 51612], "temperature": 0.0, "avg_logprob": -0.1726210956842127, "compression_ratio": 1.393939393939394, "no_speech_prob": 0.003943843301385641}, {"id": 5, "seek": 2496, "start": 24.96, "end": 33.32, "text": " It was created in 1998 to answer the question, is it possible to teach a computer to recognize", "tokens": [50364, 467, 390, 2942, 294, 21404, 281, 1867, 264, 1168, 11, 307, 309, 1944, 281, 2924, 257, 3820, 281, 5521, 50782], "temperature": 0.0, "avg_logprob": -0.20045069644325658, "compression_ratio": 1.6906077348066297, "no_speech_prob": 0.0038840656634420156}, {"id": 6, "seek": 2496, "start": 33.32, "end": 35.44, "text": " handwritten digits?", "tokens": [50782, 1011, 26859, 27011, 30, 50888], "temperature": 0.0, "avg_logprob": -0.20045069644325658, "compression_ratio": 1.6906077348066297, "no_speech_prob": 0.0038840656634420156}, {"id": 7, "seek": 2496, "start": 35.44, "end": 42.96, "text": " So, is it possible to teach your computer how to recognize handwritten digits?", "tokens": [50888, 407, 11, 307, 309, 1944, 281, 2924, 428, 3820, 577, 281, 5521, 1011, 26859, 27011, 30, 51264], "temperature": 0.0, "avg_logprob": -0.20045069644325658, "compression_ratio": 1.6906077348066297, "no_speech_prob": 0.0038840656634420156}, {"id": 8, "seek": 2496, "start": 42.96, "end": 48.44, "text": " Well, let's find out.", "tokens": [51264, 1042, 11, 718, 311, 915, 484, 13, 51538], "temperature": 0.0, "avg_logprob": -0.20045069644325658, "compression_ratio": 1.6906077348066297, "no_speech_prob": 0.0038840656634420156}, {"id": 9, "seek": 2496, "start": 48.44, "end": 53.16, "text": " Welcome to Julia for Talented Amateurs, where I may call some Julia tutorials for talented", "tokens": [51538, 4027, 281, 18551, 337, 10516, 6003, 2012, 25929, 11, 689, 286, 815, 818, 512, 18551, 17616, 337, 13467, 51774], "temperature": 0.0, "avg_logprob": -0.20045069644325658, "compression_ratio": 1.6906077348066297, "no_speech_prob": 0.0038840656634420156}, {"id": 10, "seek": 5316, "start": 53.16, "end": 55.16, "text": " amateurs everywhere.", "tokens": [50364, 669, 25929, 5315, 13, 50464], "temperature": 0.0, "avg_logprob": -0.1895517526670944, "compression_ratio": 1.6130653266331658, "no_speech_prob": 0.007814209908246994}, {"id": 11, "seek": 5316, "start": 55.16, "end": 60.48, "text": " I am your host, the Dabbling Doggo.", "tokens": [50464, 286, 669, 428, 3975, 11, 264, 413, 10797, 1688, 13472, 1571, 13, 50730], "temperature": 0.0, "avg_logprob": -0.1895517526670944, "compression_ratio": 1.6130653266331658, "no_speech_prob": 0.007814209908246994}, {"id": 12, "seek": 5316, "start": 60.48, "end": 66.47999999999999, "text": " In today's tutorial, we'll get an introduction to Artificial Neural Networks, or simply known", "tokens": [50730, 682, 965, 311, 7073, 11, 321, 603, 483, 364, 9339, 281, 5735, 10371, 1734, 1807, 12640, 82, 11, 420, 2935, 2570, 51030], "temperature": 0.0, "avg_logprob": -0.1895517526670944, "compression_ratio": 1.6130653266331658, "no_speech_prob": 0.007814209908246994}, {"id": 13, "seek": 5316, "start": 66.47999999999999, "end": 69.16, "text": " as Neural Networks.", "tokens": [51030, 382, 1734, 1807, 12640, 82, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1895517526670944, "compression_ratio": 1.6130653266331658, "no_speech_prob": 0.007814209908246994}, {"id": 14, "seek": 5316, "start": 69.16, "end": 73.6, "text": " If you look on the Wikipedia page for machine learning and expand the supervised learning", "tokens": [51164, 759, 291, 574, 322, 264, 28999, 3028, 337, 3479, 2539, 293, 5268, 264, 46533, 2539, 51386], "temperature": 0.0, "avg_logprob": -0.1895517526670944, "compression_ratio": 1.6130653266331658, "no_speech_prob": 0.007814209908246994}, {"id": 15, "seek": 5316, "start": 73.6, "end": 78.32, "text": " section, you'll see Artificial Neural Networks listed there.", "tokens": [51386, 3541, 11, 291, 603, 536, 5735, 10371, 1734, 1807, 12640, 82, 10052, 456, 13, 51622], "temperature": 0.0, "avg_logprob": -0.1895517526670944, "compression_ratio": 1.6130653266331658, "no_speech_prob": 0.007814209908246994}, {"id": 16, "seek": 7832, "start": 79.32, "end": 84.6, "text": " But you'll also notice that there's a separate section further down called Artificial Neural", "tokens": [50414, 583, 291, 603, 611, 3449, 300, 456, 311, 257, 4994, 3541, 3052, 760, 1219, 5735, 10371, 1734, 1807, 50678], "temperature": 0.0, "avg_logprob": -0.10470815658569337, "compression_ratio": 1.6753246753246753, "no_speech_prob": 0.02757905423641205}, {"id": 17, "seek": 7832, "start": 84.6, "end": 86.6, "text": " Networks.", "tokens": [50678, 12640, 82, 13, 50778], "temperature": 0.0, "avg_logprob": -0.10470815658569337, "compression_ratio": 1.6753246753246753, "no_speech_prob": 0.02757905423641205}, {"id": 18, "seek": 7832, "start": 86.6, "end": 93.63999999999999, "text": " If you expand that section, you'll see a lot of different subjects listed there.", "tokens": [50778, 759, 291, 5268, 300, 3541, 11, 291, 603, 536, 257, 688, 295, 819, 13066, 10052, 456, 13, 51130], "temperature": 0.0, "avg_logprob": -0.10470815658569337, "compression_ratio": 1.6753246753246753, "no_speech_prob": 0.02757905423641205}, {"id": 19, "seek": 7832, "start": 93.63999999999999, "end": 98.39999999999999, "text": " Artificial Neural Networks are part of a very large field of study that goes well beyond", "tokens": [51130, 5735, 10371, 1734, 1807, 12640, 82, 366, 644, 295, 257, 588, 2416, 2519, 295, 2979, 300, 1709, 731, 4399, 51368], "temperature": 0.0, "avg_logprob": -0.10470815658569337, "compression_ratio": 1.6753246753246753, "no_speech_prob": 0.02757905423641205}, {"id": 20, "seek": 7832, "start": 98.39999999999999, "end": 101.39999999999999, "text": " the scope of the series.", "tokens": [51368, 264, 11923, 295, 264, 2638, 13, 51518], "temperature": 0.0, "avg_logprob": -0.10470815658569337, "compression_ratio": 1.6753246753246753, "no_speech_prob": 0.02757905423641205}, {"id": 21, "seek": 7832, "start": 101.39999999999999, "end": 106.88, "text": " There is no way I'm going to be able to cover all of those subjects now, so I will try to", "tokens": [51518, 821, 307, 572, 636, 286, 478, 516, 281, 312, 1075, 281, 2060, 439, 295, 729, 13066, 586, 11, 370, 286, 486, 853, 281, 51792], "temperature": 0.0, "avg_logprob": -0.10470815658569337, "compression_ratio": 1.6753246753246753, "no_speech_prob": 0.02757905423641205}, {"id": 22, "seek": 10688, "start": 106.88, "end": 111.39999999999999, "text": " cover them in a future 13-part series.", "tokens": [50364, 2060, 552, 294, 257, 2027, 3705, 12, 6971, 2638, 13, 50590], "temperature": 0.0, "avg_logprob": -0.1033681752730389, "compression_ratio": 1.5984555984555984, "no_speech_prob": 0.005910124164074659}, {"id": 23, "seek": 10688, "start": 111.39999999999999, "end": 116.56, "text": " For this series, I will use this tutorial and the next tutorial to provide a high-level", "tokens": [50590, 1171, 341, 2638, 11, 286, 486, 764, 341, 7073, 293, 264, 958, 7073, 281, 2893, 257, 1090, 12, 12418, 50848], "temperature": 0.0, "avg_logprob": -0.1033681752730389, "compression_ratio": 1.5984555984555984, "no_speech_prob": 0.005910124164074659}, {"id": 24, "seek": 10688, "start": 116.56, "end": 124.16, "text": " introduction to Artificial Neural Networks, which is the gateway to deep learning.", "tokens": [50848, 9339, 281, 5735, 10371, 1734, 1807, 12640, 82, 11, 597, 307, 264, 28532, 281, 2452, 2539, 13, 51228], "temperature": 0.0, "avg_logprob": -0.1033681752730389, "compression_ratio": 1.5984555984555984, "no_speech_prob": 0.005910124164074659}, {"id": 25, "seek": 10688, "start": 124.16, "end": 128.48, "text": " There are many different ways to approach the MNIST classification problem using various", "tokens": [51228, 821, 366, 867, 819, 2098, 281, 3109, 264, 376, 45, 19756, 21538, 1154, 1228, 3683, 51444], "temperature": 0.0, "avg_logprob": -0.1033681752730389, "compression_ratio": 1.5984555984555984, "no_speech_prob": 0.005910124164074659}, {"id": 26, "seek": 10688, "start": 128.48, "end": 131.48, "text": " programming languages.", "tokens": [51444, 9410, 8650, 13, 51594], "temperature": 0.0, "avg_logprob": -0.1033681752730389, "compression_ratio": 1.5984555984555984, "no_speech_prob": 0.005910124164074659}, {"id": 27, "seek": 10688, "start": 131.48, "end": 136.64, "text": " In today's tutorial, we'll go through a pure Julia approach by building an Artificial Neural", "tokens": [51594, 682, 965, 311, 7073, 11, 321, 603, 352, 807, 257, 6075, 18551, 3109, 538, 2390, 364, 5735, 10371, 1734, 1807, 51852], "temperature": 0.0, "avg_logprob": -0.1033681752730389, "compression_ratio": 1.5984555984555984, "no_speech_prob": 0.005910124164074659}, {"id": 28, "seek": 13664, "start": 136.64, "end": 141.55999999999997, "text": " Network using the flux.jl package.", "tokens": [50364, 12640, 1228, 264, 19298, 13, 73, 75, 7372, 13, 50610], "temperature": 0.0, "avg_logprob": -0.17542704476250542, "compression_ratio": 1.5981308411214954, "no_speech_prob": 0.0010321404552087188}, {"id": 29, "seek": 13664, "start": 141.55999999999997, "end": 146.27999999999997, "text": " In the next tutorial, we'll take the code that we developed today and go through it", "tokens": [50610, 682, 264, 958, 7073, 11, 321, 603, 747, 264, 3089, 300, 321, 4743, 965, 293, 352, 807, 309, 50846], "temperature": 0.0, "avg_logprob": -0.17542704476250542, "compression_ratio": 1.5981308411214954, "no_speech_prob": 0.0010321404552087188}, {"id": 30, "seek": 13664, "start": 146.27999999999997, "end": 150.79999999999998, "text": " in more detail to understand the concepts behind the code.", "tokens": [50846, 294, 544, 2607, 281, 1223, 264, 10392, 2261, 264, 3089, 13, 51072], "temperature": 0.0, "avg_logprob": -0.17542704476250542, "compression_ratio": 1.5981308411214954, "no_speech_prob": 0.0010321404552087188}, {"id": 31, "seek": 13664, "start": 150.79999999999998, "end": 156.95999999999998, "text": " So, the game plan for today is to get through all of the code and to get our model up and", "tokens": [51072, 407, 11, 264, 1216, 1393, 337, 965, 307, 281, 483, 807, 439, 295, 264, 3089, 293, 281, 483, 527, 2316, 493, 293, 51380], "temperature": 0.0, "avg_logprob": -0.17542704476250542, "compression_ratio": 1.5981308411214954, "no_speech_prob": 0.0010321404552087188}, {"id": 32, "seek": 13664, "start": 156.95999999999998, "end": 159.04, "text": " running.", "tokens": [51380, 2614, 13, 51484], "temperature": 0.0, "avg_logprob": -0.17542704476250542, "compression_ratio": 1.5981308411214954, "no_speech_prob": 0.0010321404552087188}, {"id": 33, "seek": 13664, "start": 159.04, "end": 163.64, "text": " As a result, I will not be providing a lot of explanations today.", "tokens": [51484, 1018, 257, 1874, 11, 286, 486, 406, 312, 6530, 257, 688, 295, 28708, 965, 13, 51714], "temperature": 0.0, "avg_logprob": -0.17542704476250542, "compression_ratio": 1.5981308411214954, "no_speech_prob": 0.0010321404552087188}, {"id": 34, "seek": 16664, "start": 167.2, "end": 172.92, "text": " For today's tutorial, knowledge of Julia and VS Code is required.", "tokens": [50392, 1171, 965, 311, 7073, 11, 3601, 295, 18551, 293, 25091, 15549, 307, 4739, 13, 50678], "temperature": 0.0, "avg_logprob": -0.15859951771480937, "compression_ratio": 1.5405405405405406, "no_speech_prob": 0.056624624878168106}, {"id": 35, "seek": 16664, "start": 172.92, "end": 179.32, "text": " I'm also assuming that you're watching this entire machine learning playlist.", "tokens": [50678, 286, 478, 611, 11926, 300, 291, 434, 1976, 341, 2302, 3479, 2539, 16788, 13, 50998], "temperature": 0.0, "avg_logprob": -0.15859951771480937, "compression_ratio": 1.5405405405405406, "no_speech_prob": 0.056624624878168106}, {"id": 36, "seek": 16664, "start": 179.32, "end": 185.92, "text": " In your VS Code Explorer panel, create a new folder for this tutorial.", "tokens": [50998, 682, 428, 25091, 15549, 31895, 4831, 11, 1884, 257, 777, 10820, 337, 341, 7073, 13, 51328], "temperature": 0.0, "avg_logprob": -0.15859951771480937, "compression_ratio": 1.5405405405405406, "no_speech_prob": 0.056624624878168106}, {"id": 37, "seek": 16664, "start": 185.92, "end": 194.95999999999998, "text": " In the tutorial folder, create a new file called sl underscore ann.jl.", "tokens": [51328, 682, 264, 7073, 10820, 11, 1884, 257, 777, 3991, 1219, 1061, 37556, 364, 77, 13, 73, 75, 13, 51780], "temperature": 0.0, "avg_logprob": -0.15859951771480937, "compression_ratio": 1.5405405405405406, "no_speech_prob": 0.056624624878168106}, {"id": 38, "seek": 19496, "start": 194.96, "end": 201.20000000000002, "text": " Change the Julia REPL by using ALT J then ALT O.", "tokens": [50364, 15060, 264, 18551, 31511, 43, 538, 1228, 7056, 51, 508, 550, 7056, 51, 422, 13, 50676], "temperature": 0.0, "avg_logprob": -0.25733846233737084, "compression_ratio": 1.56, "no_speech_prob": 0.03962154686450958}, {"id": 39, "seek": 19496, "start": 201.20000000000002, "end": 205.12, "text": " Maximize the REPL panel.", "tokens": [50676, 29076, 1125, 264, 31511, 43, 4831, 13, 50872], "temperature": 0.0, "avg_logprob": -0.25733846233737084, "compression_ratio": 1.56, "no_speech_prob": 0.03962154686450958}, {"id": 40, "seek": 19496, "start": 205.12, "end": 210.4, "text": " Change the present working directory to your tutorial directory.", "tokens": [50872, 15060, 264, 1974, 1364, 21120, 281, 428, 7073, 21120, 13, 51136], "temperature": 0.0, "avg_logprob": -0.25733846233737084, "compression_ratio": 1.56, "no_speech_prob": 0.03962154686450958}, {"id": 41, "seek": 19496, "start": 210.4, "end": 215.88, "text": " Enter the package REPL by hitting the closing square bracket.", "tokens": [51136, 10399, 264, 7372, 31511, 43, 538, 8850, 264, 10377, 3732, 16904, 13, 51410], "temperature": 0.0, "avg_logprob": -0.25733846233737084, "compression_ratio": 1.56, "no_speech_prob": 0.03962154686450958}, {"id": 42, "seek": 19496, "start": 215.88, "end": 219.56, "text": " Activate your tutorial directory.", "tokens": [51410, 28550, 473, 428, 7073, 21120, 13, 51594], "temperature": 0.0, "avg_logprob": -0.25733846233737084, "compression_ratio": 1.56, "no_speech_prob": 0.03962154686450958}, {"id": 43, "seek": 21956, "start": 219.56, "end": 237.08, "text": " Add the following packages, flux, images, ml data sets, and plots.", "tokens": [50364, 5349, 264, 3480, 17401, 11, 19298, 11, 5267, 11, 23271, 1412, 6352, 11, 293, 28609, 13, 51240], "temperature": 0.0, "avg_logprob": -0.2661332433873957, "compression_ratio": 1.236220472440945, "no_speech_prob": 0.003027573460713029}, {"id": 44, "seek": 21956, "start": 237.08, "end": 241.48000000000002, "text": " Type in status to confirm the version numbers.", "tokens": [51240, 15576, 294, 6558, 281, 9064, 264, 3037, 3547, 13, 51460], "temperature": 0.0, "avg_logprob": -0.2661332433873957, "compression_ratio": 1.236220472440945, "no_speech_prob": 0.003027573460713029}, {"id": 45, "seek": 21956, "start": 241.48000000000002, "end": 246.08, "text": " Exit the package REPL by hitting backspace.", "tokens": [51460, 2111, 270, 264, 7372, 31511, 43, 538, 8850, 646, 24824, 13, 51690], "temperature": 0.0, "avg_logprob": -0.2661332433873957, "compression_ratio": 1.236220472440945, "no_speech_prob": 0.003027573460713029}, {"id": 46, "seek": 24608, "start": 246.08, "end": 248.96, "text": " Change the REPL panel.", "tokens": [50364, 15060, 264, 31511, 43, 4831, 13, 50508], "temperature": 0.0, "avg_logprob": -0.23037144494435144, "compression_ratio": 1.4899328859060403, "no_speech_prob": 0.01615077257156372}, {"id": 47, "seek": 24608, "start": 248.96, "end": 259.36, "text": " Okay, let's get started.", "tokens": [50508, 1033, 11, 718, 311, 483, 1409, 13, 51028], "temperature": 0.0, "avg_logprob": -0.23037144494435144, "compression_ratio": 1.4899328859060403, "no_speech_prob": 0.01615077257156372}, {"id": 48, "seek": 24608, "start": 259.36, "end": 266.0, "text": " Let's start by loading some packages.", "tokens": [51028, 961, 311, 722, 538, 15114, 512, 17401, 13, 51360], "temperature": 0.0, "avg_logprob": -0.23037144494435144, "compression_ratio": 1.4899328859060403, "no_speech_prob": 0.01615077257156372}, {"id": 49, "seek": 24608, "start": 266.0, "end": 270.64, "text": " One of the quirks of the flux package is that you also need to load some of the specific", "tokens": [51360, 1485, 295, 264, 35645, 1694, 295, 264, 19298, 7372, 307, 300, 291, 611, 643, 281, 3677, 512, 295, 264, 2685, 51592], "temperature": 0.0, "avg_logprob": -0.23037144494435144, "compression_ratio": 1.4899328859060403, "no_speech_prob": 0.01615077257156372}, {"id": 50, "seek": 24608, "start": 270.64, "end": 275.84000000000003, "text": " functions that you want to use in your session.", "tokens": [51592, 6828, 300, 291, 528, 281, 764, 294, 428, 5481, 13, 51852], "temperature": 0.0, "avg_logprob": -0.23037144494435144, "compression_ratio": 1.4899328859060403, "no_speech_prob": 0.01615077257156372}, {"id": 51, "seek": 27584, "start": 275.84, "end": 282.2, "text": " And finally, we need to use some of Julia's standard libraries.", "tokens": [50364, 400, 2721, 11, 321, 643, 281, 764, 512, 295, 18551, 311, 3832, 15148, 13, 50682], "temperature": 0.0, "avg_logprob": -0.12229096262078536, "compression_ratio": 1.4923076923076923, "no_speech_prob": 0.0007672401261515915}, {"id": 52, "seek": 27584, "start": 282.2, "end": 289.96, "text": " Using a random seed is not required, but I'm using it so I can reproduce my results.", "tokens": [50682, 11142, 257, 4974, 8871, 307, 406, 4739, 11, 457, 286, 478, 1228, 309, 370, 286, 393, 29501, 452, 3542, 13, 51070], "temperature": 0.0, "avg_logprob": -0.12229096262078536, "compression_ratio": 1.4923076923076923, "no_speech_prob": 0.0007672401261515915}, {"id": 53, "seek": 27584, "start": 289.96, "end": 295.23999999999995, "text": " The ml data sets package contains several data sets that are commonly used in machine", "tokens": [51070, 440, 23271, 1412, 6352, 7372, 8306, 2940, 1412, 6352, 300, 366, 12719, 1143, 294, 3479, 51334], "temperature": 0.0, "avg_logprob": -0.12229096262078536, "compression_ratio": 1.4923076923076923, "no_speech_prob": 0.0007672401261515915}, {"id": 54, "seek": 27584, "start": 295.23999999999995, "end": 298.12, "text": " learning.", "tokens": [51334, 2539, 13, 51478], "temperature": 0.0, "avg_logprob": -0.12229096262078536, "compression_ratio": 1.4923076923076923, "no_speech_prob": 0.0007672401261515915}, {"id": 55, "seek": 27584, "start": 298.12, "end": 303.08, "text": " One of those data sets is the mNIST data sets.", "tokens": [51478, 1485, 295, 729, 1412, 6352, 307, 264, 275, 45, 19756, 1412, 6352, 13, 51726], "temperature": 0.0, "avg_logprob": -0.12229096262078536, "compression_ratio": 1.4923076923076923, "no_speech_prob": 0.0007672401261515915}, {"id": 56, "seek": 30308, "start": 303.08, "end": 311.32, "text": " The ml data sets package also contains a convenient way to load those data sets into memory.", "tokens": [50364, 440, 23271, 1412, 6352, 7372, 611, 8306, 257, 10851, 636, 281, 3677, 729, 1412, 6352, 666, 4675, 13, 50776], "temperature": 0.0, "avg_logprob": -0.15431329478388248, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.031131597235798836}, {"id": 57, "seek": 30308, "start": 311.32, "end": 316.71999999999997, "text": " If this is your first time loading the mNIST data set onto your computer, you should be", "tokens": [50776, 759, 341, 307, 428, 700, 565, 15114, 264, 275, 45, 19756, 1412, 992, 3911, 428, 3820, 11, 291, 820, 312, 51046], "temperature": 0.0, "avg_logprob": -0.15431329478388248, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.031131597235798836}, {"id": 58, "seek": 30308, "start": 316.71999999999997, "end": 321.44, "text": " prompted to confirm whether or not you want to download the data set, since it's quite", "tokens": [51046, 31042, 281, 9064, 1968, 420, 406, 291, 528, 281, 5484, 264, 1412, 992, 11, 1670, 309, 311, 1596, 51282], "temperature": 0.0, "avg_logprob": -0.15431329478388248, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.031131597235798836}, {"id": 59, "seek": 30308, "start": 321.44, "end": 323.59999999999997, "text": " large.", "tokens": [51282, 2416, 13, 51390], "temperature": 0.0, "avg_logprob": -0.15431329478388248, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.031131597235798836}, {"id": 60, "seek": 30308, "start": 323.59999999999997, "end": 326.68, "text": " Select yes to begin the download.", "tokens": [51390, 13638, 2086, 281, 1841, 264, 5484, 13, 51544], "temperature": 0.0, "avg_logprob": -0.15431329478388248, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.031131597235798836}, {"id": 61, "seek": 30308, "start": 326.68, "end": 332.0, "text": " Depending on your internet connection, it may take a few minutes.", "tokens": [51544, 22539, 322, 428, 4705, 4984, 11, 309, 815, 747, 257, 1326, 2077, 13, 51810], "temperature": 0.0, "avg_logprob": -0.15431329478388248, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.031131597235798836}, {"id": 62, "seek": 33200, "start": 332.0, "end": 337.08, "text": " Since I already have the mNIST data set on my computer, the data set was loaded right", "tokens": [50364, 4162, 286, 1217, 362, 264, 275, 45, 19756, 1412, 992, 322, 452, 3820, 11, 264, 1412, 992, 390, 13210, 558, 50618], "temperature": 0.0, "avg_logprob": -0.09804864676601915, "compression_ratio": 1.471794871794872, "no_speech_prob": 0.003272834699600935}, {"id": 63, "seek": 33200, "start": 337.08, "end": 340.08, "text": " away.", "tokens": [50618, 1314, 13, 50768], "temperature": 0.0, "avg_logprob": -0.09804864676601915, "compression_ratio": 1.471794871794872, "no_speech_prob": 0.003272834699600935}, {"id": 64, "seek": 33200, "start": 340.08, "end": 344.48, "text": " Now that we have the data, let's take a look at it.", "tokens": [50768, 823, 300, 321, 362, 264, 1412, 11, 718, 311, 747, 257, 574, 412, 309, 13, 50988], "temperature": 0.0, "avg_logprob": -0.09804864676601915, "compression_ratio": 1.471794871794872, "no_speech_prob": 0.003272834699600935}, {"id": 65, "seek": 33200, "start": 344.48, "end": 350.72, "text": " This is the input training data.", "tokens": [50988, 639, 307, 264, 4846, 3097, 1412, 13, 51300], "temperature": 0.0, "avg_logprob": -0.09804864676601915, "compression_ratio": 1.471794871794872, "no_speech_prob": 0.003272834699600935}, {"id": 66, "seek": 33200, "start": 350.72, "end": 357.56, "text": " So it looks like a tensor of floating point numbers that has 28 rows and 28 columns and", "tokens": [51300, 407, 309, 1542, 411, 257, 40863, 295, 12607, 935, 3547, 300, 575, 7562, 13241, 293, 7562, 13766, 293, 51642], "temperature": 0.0, "avg_logprob": -0.09804864676601915, "compression_ratio": 1.471794871794872, "no_speech_prob": 0.003272834699600935}, {"id": 67, "seek": 33200, "start": 357.56, "end": 361.4, "text": " is 60,000 layers deep.", "tokens": [51642, 307, 4060, 11, 1360, 7914, 2452, 13, 51834], "temperature": 0.0, "avg_logprob": -0.09804864676601915, "compression_ratio": 1.471794871794872, "no_speech_prob": 0.003272834699600935}, {"id": 68, "seek": 36140, "start": 361.4, "end": 366.67999999999995, "text": " This is by far the largest data set that I've used on my channel to date.", "tokens": [50364, 639, 307, 538, 1400, 264, 6443, 1412, 992, 300, 286, 600, 1143, 322, 452, 2269, 281, 4002, 13, 50628], "temperature": 0.0, "avg_logprob": -0.12316652706691197, "compression_ratio": 1.4669811320754718, "no_speech_prob": 0.0005702775670215487}, {"id": 69, "seek": 36140, "start": 366.67999999999995, "end": 372.08, "text": " Unfortunately, there's not a great way to view it in the REPL.", "tokens": [50628, 8590, 11, 456, 311, 406, 257, 869, 636, 281, 1910, 309, 294, 264, 31511, 43, 13, 50898], "temperature": 0.0, "avg_logprob": -0.12316652706691197, "compression_ratio": 1.4669811320754718, "no_speech_prob": 0.0005702775670215487}, {"id": 70, "seek": 36140, "start": 372.08, "end": 379.2, "text": " The 28 rows and 28 columns contain numbers from 0 to 1 that represent a black and white", "tokens": [50898, 440, 7562, 13241, 293, 7562, 13766, 5304, 3547, 490, 1958, 281, 502, 300, 2906, 257, 2211, 293, 2418, 51254], "temperature": 0.0, "avg_logprob": -0.12316652706691197, "compression_ratio": 1.4669811320754718, "no_speech_prob": 0.0005702775670215487}, {"id": 71, "seek": 36140, "start": 379.2, "end": 383.12, "text": " image of a handwritten digit.", "tokens": [51254, 3256, 295, 257, 1011, 26859, 14293, 13, 51450], "temperature": 0.0, "avg_logprob": -0.12316652706691197, "compression_ratio": 1.4669811320754718, "no_speech_prob": 0.0005702775670215487}, {"id": 72, "seek": 36140, "start": 383.12, "end": 390.52, "text": " We can use the images package to view one of the images.", "tokens": [51450, 492, 393, 764, 264, 5267, 7372, 281, 1910, 472, 295, 264, 5267, 13, 51820], "temperature": 0.0, "avg_logprob": -0.12316652706691197, "compression_ratio": 1.4669811320754718, "no_speech_prob": 0.0005702775670215487}, {"id": 73, "seek": 39052, "start": 390.52, "end": 394.44, "text": " For some reason, the images are loaded horizontally.", "tokens": [50364, 1171, 512, 1778, 11, 264, 5267, 366, 13210, 33796, 13, 50560], "temperature": 0.0, "avg_logprob": -0.10692390175752861, "compression_ratio": 1.5764192139737991, "no_speech_prob": 0.005554473027586937}, {"id": 74, "seek": 39052, "start": 394.44, "end": 398.96, "text": " You need to transpose the image in order to view it vertically, so don't forget that", "tokens": [50560, 509, 643, 281, 25167, 264, 3256, 294, 1668, 281, 1910, 309, 28450, 11, 370, 500, 380, 2870, 300, 50786], "temperature": 0.0, "avg_logprob": -0.10692390175752861, "compression_ratio": 1.5764192139737991, "no_speech_prob": 0.005554473027586937}, {"id": 75, "seek": 39052, "start": 398.96, "end": 402.03999999999996, "text": " apostrophe.", "tokens": [50786, 19484, 27194, 13, 50940], "temperature": 0.0, "avg_logprob": -0.10692390175752861, "compression_ratio": 1.5764192139737991, "no_speech_prob": 0.005554473027586937}, {"id": 76, "seek": 39052, "start": 402.03999999999996, "end": 407.76, "text": " You should see a white handwritten number on a black background.", "tokens": [50940, 509, 820, 536, 257, 2418, 1011, 26859, 1230, 322, 257, 2211, 3678, 13, 51226], "temperature": 0.0, "avg_logprob": -0.10692390175752861, "compression_ratio": 1.5764192139737991, "no_speech_prob": 0.005554473027586937}, {"id": 77, "seek": 39052, "start": 407.76, "end": 413.0, "text": " No offense, but that's not exactly the nicest handwriting.", "tokens": [51226, 883, 17834, 11, 457, 300, 311, 406, 2293, 264, 45516, 39179, 13, 51488], "temperature": 0.0, "avg_logprob": -0.10692390175752861, "compression_ratio": 1.5764192139737991, "no_speech_prob": 0.005554473027586937}, {"id": 78, "seek": 39052, "start": 413.0, "end": 417.96, "text": " But it's a useful sample since everyone has a slightly different handwriting style, and", "tokens": [51488, 583, 309, 311, 257, 4420, 6889, 1670, 1518, 575, 257, 4748, 819, 39179, 3758, 11, 293, 51736], "temperature": 0.0, "avg_logprob": -0.10692390175752861, "compression_ratio": 1.5764192139737991, "no_speech_prob": 0.005554473027586937}, {"id": 79, "seek": 41796, "start": 417.96, "end": 422.56, "text": " it's important for your computer to be able to read different handwritten versions of", "tokens": [50364, 309, 311, 1021, 337, 428, 3820, 281, 312, 1075, 281, 1401, 819, 1011, 26859, 9606, 295, 50594], "temperature": 0.0, "avg_logprob": -0.11252757481166295, "compression_ratio": 1.5207373271889402, "no_speech_prob": 0.0004305488255340606}, {"id": 80, "seek": 41796, "start": 422.56, "end": 425.28, "text": " the same number.", "tokens": [50594, 264, 912, 1230, 13, 50730], "temperature": 0.0, "avg_logprob": -0.11252757481166295, "compression_ratio": 1.5207373271889402, "no_speech_prob": 0.0004305488255340606}, {"id": 81, "seek": 41796, "start": 425.28, "end": 429.84, "text": " Now the question is, what number is it?", "tokens": [50730, 823, 264, 1168, 307, 11, 437, 1230, 307, 309, 30, 50958], "temperature": 0.0, "avg_logprob": -0.11252757481166295, "compression_ratio": 1.5207373271889402, "no_speech_prob": 0.0004305488255340606}, {"id": 82, "seek": 41796, "start": 429.84, "end": 435.64, "text": " Like any other data set used for classification problems, every sample in the MNIST data set", "tokens": [50958, 1743, 604, 661, 1412, 992, 1143, 337, 21538, 2740, 11, 633, 6889, 294, 264, 376, 45, 19756, 1412, 992, 51248], "temperature": 0.0, "avg_logprob": -0.11252757481166295, "compression_ratio": 1.5207373271889402, "no_speech_prob": 0.0004305488255340606}, {"id": 83, "seek": 41796, "start": 435.64, "end": 439.76, "text": " includes a label with a correct number.", "tokens": [51248, 5974, 257, 7645, 365, 257, 3006, 1230, 13, 51454], "temperature": 0.0, "avg_logprob": -0.11252757481166295, "compression_ratio": 1.5207373271889402, "no_speech_prob": 0.0004305488255340606}, {"id": 84, "seek": 41796, "start": 439.76, "end": 444.56, "text": " Let's take a look at the label attached to this image.", "tokens": [51454, 961, 311, 747, 257, 574, 412, 264, 7645, 8570, 281, 341, 3256, 13, 51694], "temperature": 0.0, "avg_logprob": -0.11252757481166295, "compression_ratio": 1.5207373271889402, "no_speech_prob": 0.0004305488255340606}, {"id": 85, "seek": 44456, "start": 444.56, "end": 450.8, "text": " So the labels are contained in a column vector containing 60,000 integers.", "tokens": [50364, 407, 264, 16949, 366, 16212, 294, 257, 7738, 8062, 19273, 4060, 11, 1360, 41674, 13, 50676], "temperature": 0.0, "avg_logprob": -0.07666009454166188, "compression_ratio": 1.5728643216080402, "no_speech_prob": 0.00034598782076500356}, {"id": 86, "seek": 44456, "start": 450.8, "end": 455.96, "text": " These labels are integers from 0 to 9.", "tokens": [50676, 1981, 16949, 366, 41674, 490, 1958, 281, 1722, 13, 50934], "temperature": 0.0, "avg_logprob": -0.07666009454166188, "compression_ratio": 1.5728643216080402, "no_speech_prob": 0.00034598782076500356}, {"id": 87, "seek": 44456, "start": 455.96, "end": 460.72, "text": " The label for the first sample is 5.", "tokens": [50934, 440, 7645, 337, 264, 700, 6889, 307, 1025, 13, 51172], "temperature": 0.0, "avg_logprob": -0.07666009454166188, "compression_ratio": 1.5728643216080402, "no_speech_prob": 0.00034598782076500356}, {"id": 88, "seek": 44456, "start": 460.72, "end": 467.32, "text": " If you look at the image, it sort of looks like a 5, and it sort of doesn't.", "tokens": [51172, 759, 291, 574, 412, 264, 3256, 11, 309, 1333, 295, 1542, 411, 257, 1025, 11, 293, 309, 1333, 295, 1177, 380, 13, 51502], "temperature": 0.0, "avg_logprob": -0.07666009454166188, "compression_ratio": 1.5728643216080402, "no_speech_prob": 0.00034598782076500356}, {"id": 89, "seek": 44456, "start": 467.32, "end": 472.0, "text": " If it's this hard for humans to figure out, you can imagine how challenging this will", "tokens": [51502, 759, 309, 311, 341, 1152, 337, 6255, 281, 2573, 484, 11, 291, 393, 3811, 577, 7595, 341, 486, 51736], "temperature": 0.0, "avg_logprob": -0.07666009454166188, "compression_ratio": 1.5728643216080402, "no_speech_prob": 0.00034598782076500356}, {"id": 90, "seek": 47200, "start": 472.0, "end": 477.0, "text": " be for our computer to try to figure this out.", "tokens": [50364, 312, 337, 527, 3820, 281, 853, 281, 2573, 341, 484, 13, 50614], "temperature": 0.0, "avg_logprob": -0.15643726600395455, "compression_ratio": 1.6161137440758293, "no_speech_prob": 0.004069891292601824}, {"id": 91, "seek": 47200, "start": 477.0, "end": 480.68, "text": " Now let's take a look at the test data.", "tokens": [50614, 823, 718, 311, 747, 257, 574, 412, 264, 1500, 1412, 13, 50798], "temperature": 0.0, "avg_logprob": -0.15643726600395455, "compression_ratio": 1.6161137440758293, "no_speech_prob": 0.004069891292601824}, {"id": 92, "seek": 47200, "start": 480.68, "end": 487.56, "text": " In past tutorials, we took our data set and split it between training and testing.", "tokens": [50798, 682, 1791, 17616, 11, 321, 1890, 527, 1412, 992, 293, 7472, 309, 1296, 3097, 293, 4997, 13, 51142], "temperature": 0.0, "avg_logprob": -0.15643726600395455, "compression_ratio": 1.6161137440758293, "no_speech_prob": 0.004069891292601824}, {"id": 93, "seek": 47200, "start": 487.56, "end": 494.36, "text": " The MNIST data set contains 60,000 samples for training and another 10,000 samples for", "tokens": [51142, 440, 376, 45, 19756, 1412, 992, 8306, 4060, 11, 1360, 10938, 337, 3097, 293, 1071, 1266, 11, 1360, 10938, 337, 51482], "temperature": 0.0, "avg_logprob": -0.15643726600395455, "compression_ratio": 1.6161137440758293, "no_speech_prob": 0.004069891292601824}, {"id": 94, "seek": 47200, "start": 494.36, "end": 501.8, "text": " testing, so there's no need to split the data since it's already been split for you.", "tokens": [51482, 4997, 11, 370, 456, 311, 572, 643, 281, 7472, 264, 1412, 1670, 309, 311, 1217, 668, 7472, 337, 291, 13, 51854], "temperature": 0.0, "avg_logprob": -0.15643726600395455, "compression_ratio": 1.6161137440758293, "no_speech_prob": 0.004069891292601824}, {"id": 95, "seek": 50180, "start": 501.8, "end": 506.68, "text": " Let's take a look at a testing sample.", "tokens": [50364, 961, 311, 747, 257, 574, 412, 257, 4997, 6889, 13, 50608], "temperature": 0.0, "avg_logprob": -0.10798348212728695, "compression_ratio": 1.271186440677966, "no_speech_prob": 0.00026118449750356376}, {"id": 96, "seek": 50180, "start": 506.68, "end": 524.84, "text": " So it's the same 28x28 matrix for the image, but it's only 10,000 layers deep.", "tokens": [50608, 407, 309, 311, 264, 912, 7562, 87, 11205, 8141, 337, 264, 3256, 11, 457, 309, 311, 787, 1266, 11, 1360, 7914, 2452, 13, 51516], "temperature": 0.0, "avg_logprob": -0.10798348212728695, "compression_ratio": 1.271186440677966, "no_speech_prob": 0.00026118449750356376}, {"id": 97, "seek": 50180, "start": 524.84, "end": 528.36, "text": " So this image is easier to read.", "tokens": [51516, 407, 341, 3256, 307, 3571, 281, 1401, 13, 51692], "temperature": 0.0, "avg_logprob": -0.10798348212728695, "compression_ratio": 1.271186440677966, "no_speech_prob": 0.00026118449750356376}, {"id": 98, "seek": 52836, "start": 528.36, "end": 540.32, "text": " It looks like a 7, but let's check the label to be sure.", "tokens": [50364, 467, 1542, 411, 257, 1614, 11, 457, 718, 311, 1520, 264, 7645, 281, 312, 988, 13, 50962], "temperature": 0.0, "avg_logprob": -0.10542967634380988, "compression_ratio": 1.3566433566433567, "no_speech_prob": 0.0013669893378391862}, {"id": 99, "seek": 52836, "start": 540.32, "end": 546.0, "text": " So the label is indeed 7, which is comforting.", "tokens": [50962, 407, 264, 7645, 307, 6451, 1614, 11, 597, 307, 38439, 13, 51246], "temperature": 0.0, "avg_logprob": -0.10542967634380988, "compression_ratio": 1.3566433566433567, "no_speech_prob": 0.0013669893378391862}, {"id": 100, "seek": 52836, "start": 546.0, "end": 551.64, "text": " Now that we have our data loaded into memory and have it split between inputs and outputs,", "tokens": [51246, 823, 300, 321, 362, 527, 1412, 13210, 666, 4675, 293, 362, 309, 7472, 1296, 15743, 293, 23930, 11, 51528], "temperature": 0.0, "avg_logprob": -0.10542967634380988, "compression_ratio": 1.3566433566433567, "no_speech_prob": 0.0013669893378391862}, {"id": 101, "seek": 55164, "start": 551.64, "end": 559.56, "text": " as well as split between training and testing, we should be ready to build our model, right?", "tokens": [50364, 382, 731, 382, 7472, 1296, 3097, 293, 4997, 11, 321, 820, 312, 1919, 281, 1322, 527, 2316, 11, 558, 30, 50760], "temperature": 0.0, "avg_logprob": -0.1604622082832532, "compression_ratio": 1.5104166666666667, "no_speech_prob": 0.1037079393863678}, {"id": 102, "seek": 55164, "start": 559.56, "end": 562.6, "text": " Well no, not exactly.", "tokens": [50760, 1042, 572, 11, 406, 2293, 13, 50912], "temperature": 0.0, "avg_logprob": -0.1604622082832532, "compression_ratio": 1.5104166666666667, "no_speech_prob": 0.1037079393863678}, {"id": 103, "seek": 55164, "start": 562.6, "end": 567.36, "text": " There are a couple of additional preprocessing steps that we need to do.", "tokens": [50912, 821, 366, 257, 1916, 295, 4497, 2666, 340, 780, 278, 4439, 300, 321, 643, 281, 360, 13, 51150], "temperature": 0.0, "avg_logprob": -0.1604622082832532, "compression_ratio": 1.5104166666666667, "no_speech_prob": 0.1037079393863678}, {"id": 104, "seek": 55164, "start": 567.36, "end": 573.4399999999999, "text": " Fortunately, the Flux.jl package comes included with utilities to make these preprocessing", "tokens": [51150, 20652, 11, 264, 3235, 2449, 13, 73, 75, 7372, 1487, 5556, 365, 30482, 281, 652, 613, 2666, 340, 780, 278, 51454], "temperature": 0.0, "avg_logprob": -0.1604622082832532, "compression_ratio": 1.5104166666666667, "no_speech_prob": 0.1037079393863678}, {"id": 105, "seek": 55164, "start": 573.4399999999999, "end": 576.2, "text": " steps easy.", "tokens": [51454, 4439, 1858, 13, 51592], "temperature": 0.0, "avg_logprob": -0.1604622082832532, "compression_ratio": 1.5104166666666667, "no_speech_prob": 0.1037079393863678}, {"id": 106, "seek": 57620, "start": 576.2, "end": 582.44, "text": " For the input data, we need to, quote unquote, flatten the three-dimensional tensor into", "tokens": [50364, 1171, 264, 4846, 1412, 11, 321, 643, 281, 11, 6513, 37557, 11, 24183, 264, 1045, 12, 18759, 40863, 666, 50676], "temperature": 0.0, "avg_logprob": -0.16055976480677508, "compression_ratio": 1.4655172413793103, "no_speech_prob": 0.019713135436177254}, {"id": 107, "seek": 57620, "start": 582.44, "end": 584.84, "text": " a two-dimensional matrix.", "tokens": [50676, 257, 732, 12, 18759, 8141, 13, 50796], "temperature": 0.0, "avg_logprob": -0.16055976480677508, "compression_ratio": 1.4655172413793103, "no_speech_prob": 0.019713135436177254}, {"id": 108, "seek": 57620, "start": 584.84, "end": 591.5600000000001, "text": " Normally, that would mean reshaping our Julia array, but the Flux.jl package has a utility", "tokens": [50796, 17424, 11, 300, 576, 914, 725, 71, 569, 278, 527, 18551, 10225, 11, 457, 264, 3235, 2449, 13, 73, 75, 7372, 575, 257, 14877, 51132], "temperature": 0.0, "avg_logprob": -0.16055976480677508, "compression_ratio": 1.4655172413793103, "no_speech_prob": 0.019713135436177254}, {"id": 109, "seek": 57620, "start": 591.5600000000001, "end": 596.76, "text": " function called flatten that will do that for us.", "tokens": [51132, 2445, 1219, 24183, 300, 486, 360, 300, 337, 505, 13, 51392], "temperature": 0.0, "avg_logprob": -0.16055976480677508, "compression_ratio": 1.4655172413793103, "no_speech_prob": 0.019713135436177254}, {"id": 110, "seek": 59676, "start": 596.76, "end": 606.76, "text": " You can see that our 28x28x60,000 tensor is now a 784x60,000 matrix.", "tokens": [50364, 509, 393, 536, 300, 527, 7562, 87, 11205, 87, 4550, 11, 1360, 40863, 307, 586, 257, 1614, 25494, 87, 4550, 11, 1360, 8141, 13, 50864], "temperature": 0.0, "avg_logprob": -0.10083829111127711, "compression_ratio": 1.460122699386503, "no_speech_prob": 0.294074147939682}, {"id": 111, "seek": 59676, "start": 606.76, "end": 614.88, "text": " All it did was take the 28x28 image and convert it into a column vector with 784 elements,", "tokens": [50864, 1057, 309, 630, 390, 747, 264, 7562, 87, 11205, 3256, 293, 7620, 309, 666, 257, 7738, 8062, 365, 1614, 25494, 4959, 11, 51270], "temperature": 0.0, "avg_logprob": -0.10083829111127711, "compression_ratio": 1.460122699386503, "no_speech_prob": 0.294074147939682}, {"id": 112, "seek": 59676, "start": 614.88, "end": 621.24, "text": " so each column contains the floating point numbers associated with each image.", "tokens": [51270, 370, 1184, 7738, 8306, 264, 12607, 935, 3547, 6615, 365, 1184, 3256, 13, 51588], "temperature": 0.0, "avg_logprob": -0.10083829111127711, "compression_ratio": 1.460122699386503, "no_speech_prob": 0.294074147939682}, {"id": 113, "seek": 62124, "start": 621.24, "end": 627.24, "text": " We also need to flatten the inputs for the testing data as well.", "tokens": [50364, 492, 611, 643, 281, 24183, 264, 15743, 337, 264, 4997, 1412, 382, 731, 13, 50664], "temperature": 0.0, "avg_logprob": -0.11455815572005051, "compression_ratio": 1.3383458646616542, "no_speech_prob": 0.0019266821909695864}, {"id": 114, "seek": 62124, "start": 627.24, "end": 642.44, "text": " For the labels, we need to do something called one-hot encoding.", "tokens": [50664, 1171, 264, 16949, 11, 321, 643, 281, 360, 746, 1219, 472, 12, 12194, 43430, 13, 51424], "temperature": 0.0, "avg_logprob": -0.11455815572005051, "compression_ratio": 1.3383458646616542, "no_speech_prob": 0.0019266821909695864}, {"id": 115, "seek": 62124, "start": 642.44, "end": 646.48, "text": " If you look in the REPL, you'll see what it did.", "tokens": [51424, 759, 291, 574, 294, 264, 31511, 43, 11, 291, 603, 536, 437, 309, 630, 13, 51626], "temperature": 0.0, "avg_logprob": -0.11455815572005051, "compression_ratio": 1.3383458646616542, "no_speech_prob": 0.0019266821909695864}, {"id": 116, "seek": 64648, "start": 646.48, "end": 653.08, "text": " For each label, it replaced the integer with a column vector with a one at the index representing", "tokens": [50364, 1171, 1184, 7645, 11, 309, 10772, 264, 24922, 365, 257, 7738, 8062, 365, 257, 472, 412, 264, 8186, 13460, 50694], "temperature": 0.0, "avg_logprob": -0.1461211927644499, "compression_ratio": 1.745, "no_speech_prob": 0.12589183449745178}, {"id": 117, "seek": 64648, "start": 653.08, "end": 655.52, "text": " the integer.", "tokens": [50694, 264, 24922, 13, 50816], "temperature": 0.0, "avg_logprob": -0.1461211927644499, "compression_ratio": 1.745, "no_speech_prob": 0.12589183449745178}, {"id": 118, "seek": 64648, "start": 655.52, "end": 659.84, "text": " So in the first column, that one is in the sixth row.", "tokens": [50816, 407, 294, 264, 700, 7738, 11, 300, 472, 307, 294, 264, 15102, 5386, 13, 51032], "temperature": 0.0, "avg_logprob": -0.1461211927644499, "compression_ratio": 1.745, "no_speech_prob": 0.12589183449745178}, {"id": 119, "seek": 64648, "start": 659.84, "end": 665.76, "text": " Well, you'll recall that the first label is five, not six.", "tokens": [51032, 1042, 11, 291, 603, 9901, 300, 264, 700, 7645, 307, 1732, 11, 406, 2309, 13, 51328], "temperature": 0.0, "avg_logprob": -0.1461211927644499, "compression_ratio": 1.745, "no_speech_prob": 0.12589183449745178}, {"id": 120, "seek": 64648, "start": 665.76, "end": 670.4, "text": " That's because this column vector starts at zero and goes to nine.", "tokens": [51328, 663, 311, 570, 341, 7738, 8062, 3719, 412, 4018, 293, 1709, 281, 4949, 13, 51560], "temperature": 0.0, "avg_logprob": -0.1461211927644499, "compression_ratio": 1.745, "no_speech_prob": 0.12589183449745178}, {"id": 121, "seek": 64648, "start": 670.4, "end": 676.16, "text": " So the sixth row represents the label for the number five.", "tokens": [51560, 407, 264, 15102, 5386, 8855, 264, 7645, 337, 264, 1230, 1732, 13, 51848], "temperature": 0.0, "avg_logprob": -0.1461211927644499, "compression_ratio": 1.745, "no_speech_prob": 0.12589183449745178}, {"id": 122, "seek": 67616, "start": 676.16, "end": 681.8, "text": " The one-hot batch function also concatenates all of these column vectors horizontally, so", "tokens": [50364, 440, 472, 12, 12194, 15245, 2445, 611, 1588, 7186, 1024, 439, 295, 613, 7738, 18875, 33796, 11, 370, 50646], "temperature": 0.0, "avg_logprob": -0.11296738439531469, "compression_ratio": 1.4397590361445782, "no_speech_prob": 0.000755362503696233}, {"id": 123, "seek": 67616, "start": 681.8, "end": 689.8, "text": " the result is a 10x60,000 one-hot matrix made up of Boolean values.", "tokens": [50646, 264, 1874, 307, 257, 1266, 87, 4550, 11, 1360, 472, 12, 12194, 8141, 1027, 493, 295, 23351, 28499, 4190, 13, 51046], "temperature": 0.0, "avg_logprob": -0.11296738439531469, "compression_ratio": 1.4397590361445782, "no_speech_prob": 0.000755362503696233}, {"id": 124, "seek": 67616, "start": 689.8, "end": 694.1999999999999, "text": " All of those dots are zeros.", "tokens": [51046, 1057, 295, 729, 15026, 366, 35193, 13, 51266], "temperature": 0.0, "avg_logprob": -0.11296738439531469, "compression_ratio": 1.4397590361445782, "no_speech_prob": 0.000755362503696233}, {"id": 125, "seek": 67616, "start": 694.1999999999999, "end": 701.1999999999999, "text": " We need to do the same thing for the testing labels.", "tokens": [51266, 492, 643, 281, 360, 264, 912, 551, 337, 264, 4997, 16949, 13, 51616], "temperature": 0.0, "avg_logprob": -0.11296738439531469, "compression_ratio": 1.4397590361445782, "no_speech_prob": 0.000755362503696233}, {"id": 126, "seek": 70120, "start": 701.2, "end": 708.5600000000001, "text": " In the REPL, you can see that it's a similar result, except the testing data only has 10,000", "tokens": [50364, 682, 264, 31511, 43, 11, 291, 393, 536, 300, 309, 311, 257, 2531, 1874, 11, 3993, 264, 4997, 1412, 787, 575, 1266, 11, 1360, 50732], "temperature": 0.0, "avg_logprob": -0.2145237922668457, "compression_ratio": 1.329479768786127, "no_speech_prob": 0.00039820154779590666}, {"id": 127, "seek": 70120, "start": 708.5600000000001, "end": 712.5600000000001, "text": " labels.", "tokens": [50732, 16949, 13, 50932], "temperature": 0.0, "avg_logprob": -0.2145237922668457, "compression_ratio": 1.329479768786127, "no_speech_prob": 0.00039820154779590666}, {"id": 128, "seek": 70120, "start": 712.5600000000001, "end": 722.88, "text": " Okay, we are now ready to define our model.", "tokens": [50932, 1033, 11, 321, 366, 586, 1919, 281, 6964, 527, 2316, 13, 51448], "temperature": 0.0, "avg_logprob": -0.2145237922668457, "compression_ratio": 1.329479768786127, "no_speech_prob": 0.00039820154779590666}, {"id": 129, "seek": 70120, "start": 722.88, "end": 728.6, "text": " Unlike other machine learning packages that we've seen so far, the flux.jl package is", "tokens": [51448, 17657, 661, 3479, 2539, 17401, 300, 321, 600, 1612, 370, 1400, 11, 264, 19298, 13, 73, 75, 7372, 307, 51734], "temperature": 0.0, "avg_logprob": -0.2145237922668457, "compression_ratio": 1.329479768786127, "no_speech_prob": 0.00039820154779590666}, {"id": 130, "seek": 72860, "start": 728.6, "end": 730.76, "text": " not an algorithm.", "tokens": [50364, 406, 364, 9284, 13, 50472], "temperature": 0.0, "avg_logprob": -0.17283606211344402, "compression_ratio": 1.5979899497487438, "no_speech_prob": 0.07917780429124832}, {"id": 131, "seek": 72860, "start": 730.76, "end": 736.5600000000001, "text": " Instead, it's a deep learning toolkit that provides building blocks that you can use to", "tokens": [50472, 7156, 11, 309, 311, 257, 2452, 2539, 40167, 300, 6417, 2390, 8474, 300, 291, 393, 764, 281, 50762], "temperature": 0.0, "avg_logprob": -0.17283606211344402, "compression_ratio": 1.5979899497487438, "no_speech_prob": 0.07917780429124832}, {"id": 132, "seek": 72860, "start": 736.5600000000001, "end": 740.12, "text": " create your own custom deep learning models.", "tokens": [50762, 1884, 428, 1065, 2375, 2452, 2539, 5245, 13, 50940], "temperature": 0.0, "avg_logprob": -0.17283606211344402, "compression_ratio": 1.5979899497487438, "no_speech_prob": 0.07917780429124832}, {"id": 133, "seek": 72860, "start": 740.12, "end": 746.6800000000001, "text": " We'll go through the flux package in more detail in the next tutorial, but for now, let's", "tokens": [50940, 492, 603, 352, 807, 264, 19298, 7372, 294, 544, 2607, 294, 264, 958, 7073, 11, 457, 337, 586, 11, 718, 311, 51268], "temperature": 0.0, "avg_logprob": -0.17283606211344402, "compression_ratio": 1.5979899497487438, "no_speech_prob": 0.07917780429124832}, {"id": 134, "seek": 72860, "start": 746.6800000000001, "end": 756.0, "text": " just use those building blocks to create our first artificial neural network.", "tokens": [51268, 445, 764, 729, 2390, 8474, 281, 1884, 527, 700, 11677, 18161, 3209, 13, 51734], "temperature": 0.0, "avg_logprob": -0.17283606211344402, "compression_ratio": 1.5979899497487438, "no_speech_prob": 0.07917780429124832}, {"id": 135, "seek": 75600, "start": 756.0, "end": 761.8, "text": " There's a lot going on in this deceptively simple code.", "tokens": [50364, 821, 311, 257, 688, 516, 322, 294, 341, 368, 1336, 3413, 2199, 3089, 13, 50654], "temperature": 0.0, "avg_logprob": -0.14395738627812635, "compression_ratio": 1.4628571428571429, "no_speech_prob": 0.06951835006475449}, {"id": 136, "seek": 75600, "start": 761.8, "end": 766.76, "text": " Here's a visualization of what we just built.", "tokens": [50654, 1692, 311, 257, 25801, 295, 437, 321, 445, 3094, 13, 50902], "temperature": 0.0, "avg_logprob": -0.14395738627812635, "compression_ratio": 1.4628571428571429, "no_speech_prob": 0.06951835006475449}, {"id": 137, "seek": 75600, "start": 766.76, "end": 769.92, "text": " This is a diagram of a neural network.", "tokens": [50902, 639, 307, 257, 10686, 295, 257, 18161, 3209, 13, 51060], "temperature": 0.0, "avg_logprob": -0.14395738627812635, "compression_ratio": 1.4628571428571429, "no_speech_prob": 0.06951835006475449}, {"id": 138, "seek": 75600, "start": 769.92, "end": 778.24, "text": " Specifically, this is an example of a multi-layer perceptron, or MLP, which is a type of artificial", "tokens": [51060, 26058, 11, 341, 307, 364, 1365, 295, 257, 4825, 12, 8376, 260, 43276, 2044, 11, 420, 21601, 47, 11, 597, 307, 257, 2010, 295, 11677, 51476], "temperature": 0.0, "avg_logprob": -0.14395738627812635, "compression_ratio": 1.4628571428571429, "no_speech_prob": 0.06951835006475449}, {"id": 139, "seek": 75600, "start": 778.24, "end": 781.12, "text": " neural network.", "tokens": [51476, 18161, 3209, 13, 51620], "temperature": 0.0, "avg_logprob": -0.14395738627812635, "compression_ratio": 1.4628571428571429, "no_speech_prob": 0.06951835006475449}, {"id": 140, "seek": 78112, "start": 781.24, "end": 787.44, "text": " Although this model is more complex than any model that we've seen so far, the MLP is", "tokens": [50370, 5780, 341, 2316, 307, 544, 3997, 813, 604, 2316, 300, 321, 600, 1612, 370, 1400, 11, 264, 21601, 47, 307, 50680], "temperature": 0.0, "avg_logprob": -0.10237224205680516, "compression_ratio": 1.6753246753246753, "no_speech_prob": 0.0011694497661665082}, {"id": 141, "seek": 78112, "start": 787.44, "end": 792.5600000000001, "text": " considered relatively simple in the deep learning world.", "tokens": [50680, 4888, 7226, 2199, 294, 264, 2452, 2539, 1002, 13, 50936], "temperature": 0.0, "avg_logprob": -0.10237224205680516, "compression_ratio": 1.6753246753246753, "no_speech_prob": 0.0011694497661665082}, {"id": 142, "seek": 78112, "start": 792.5600000000001, "end": 798.52, "text": " We'll go through this diagram in more detail in the next tutorial, but at a very high level,", "tokens": [50936, 492, 603, 352, 807, 341, 10686, 294, 544, 2607, 294, 264, 958, 7073, 11, 457, 412, 257, 588, 1090, 1496, 11, 51234], "temperature": 0.0, "avg_logprob": -0.10237224205680516, "compression_ratio": 1.6753246753246753, "no_speech_prob": 0.0011694497661665082}, {"id": 143, "seek": 78112, "start": 798.52, "end": 804.88, "text": " this diagram represents a model containing a lot of parameters.", "tokens": [51234, 341, 10686, 8855, 257, 2316, 19273, 257, 688, 295, 9834, 13, 51552], "temperature": 0.0, "avg_logprob": -0.10237224205680516, "compression_ratio": 1.6753246753246753, "no_speech_prob": 0.0011694497661665082}, {"id": 144, "seek": 78112, "start": 804.88, "end": 809.6800000000001, "text": " We're going to feed our training inputs into this model, and then the model will try to", "tokens": [51552, 492, 434, 516, 281, 3154, 527, 3097, 15743, 666, 341, 2316, 11, 293, 550, 264, 2316, 486, 853, 281, 51792], "temperature": 0.0, "avg_logprob": -0.10237224205680516, "compression_ratio": 1.6753246753246753, "no_speech_prob": 0.0011694497661665082}, {"id": 145, "seek": 80968, "start": 809.68, "end": 815.4, "text": " learn the parameters necessary to predict the training labels, just like any other machine", "tokens": [50364, 1466, 264, 9834, 4818, 281, 6069, 264, 3097, 16949, 11, 445, 411, 604, 661, 3479, 50650], "temperature": 0.0, "avg_logprob": -0.11124940236409506, "compression_ratio": 1.6386138613861385, "no_speech_prob": 0.007815079763531685}, {"id": 146, "seek": 80968, "start": 815.4, "end": 818.2399999999999, "text": " learning model.", "tokens": [50650, 2539, 2316, 13, 50792], "temperature": 0.0, "avg_logprob": -0.11124940236409506, "compression_ratio": 1.6386138613861385, "no_speech_prob": 0.007815079763531685}, {"id": 147, "seek": 80968, "start": 818.2399999999999, "end": 824.4399999999999, "text": " In other words, the model will digest the data and calculate a loss.", "tokens": [50792, 682, 661, 2283, 11, 264, 2316, 486, 13884, 264, 1412, 293, 8873, 257, 4470, 13, 51102], "temperature": 0.0, "avg_logprob": -0.11124940236409506, "compression_ratio": 1.6386138613861385, "no_speech_prob": 0.007815079763531685}, {"id": 148, "seek": 80968, "start": 824.4399999999999, "end": 830.5999999999999, "text": " Based on the result after a single epoch, the model will then update the parameter slightly", "tokens": [51102, 18785, 322, 264, 1874, 934, 257, 2167, 30992, 339, 11, 264, 2316, 486, 550, 5623, 264, 13075, 4748, 51410], "temperature": 0.0, "avg_logprob": -0.11124940236409506, "compression_ratio": 1.6386138613861385, "no_speech_prob": 0.007815079763531685}, {"id": 149, "seek": 80968, "start": 830.5999999999999, "end": 836.8, "text": " in order to reduce the loss by using an optimization algorithm.", "tokens": [51410, 294, 1668, 281, 5407, 264, 4470, 538, 1228, 364, 19618, 9284, 13, 51720], "temperature": 0.0, "avg_logprob": -0.11124940236409506, "compression_ratio": 1.6386138613861385, "no_speech_prob": 0.007815079763531685}, {"id": 150, "seek": 83680, "start": 836.8, "end": 841.52, "text": " Your model will repeat this process until you tell it to stop.", "tokens": [50364, 2260, 2316, 486, 7149, 341, 1399, 1826, 291, 980, 309, 281, 1590, 13, 50600], "temperature": 0.0, "avg_logprob": -0.2701726525516833, "compression_ratio": 1.3548387096774193, "no_speech_prob": 0.001810132758691907}, {"id": 151, "seek": 83680, "start": 841.52, "end": 848.92, "text": " I'll cover all of those other coding terms like chain, dense, reilu, and softmax in the", "tokens": [50600, 286, 603, 2060, 439, 295, 729, 661, 17720, 2115, 411, 5021, 11, 18011, 11, 319, 388, 84, 11, 293, 2787, 41167, 294, 264, 50970], "temperature": 0.0, "avg_logprob": -0.2701726525516833, "compression_ratio": 1.3548387096774193, "no_speech_prob": 0.001810132758691907}, {"id": 152, "seek": 83680, "start": 848.92, "end": 850.8, "text": " next tutorial.", "tokens": [50970, 958, 7073, 13, 51064], "temperature": 0.0, "avg_logprob": -0.2701726525516833, "compression_ratio": 1.3548387096774193, "no_speech_prob": 0.001810132758691907}, {"id": 153, "seek": 83680, "start": 850.8, "end": 860.92, "text": " Let's move on to defining the loss function.", "tokens": [51064, 961, 311, 1286, 322, 281, 17827, 264, 4470, 2445, 13, 51570], "temperature": 0.0, "avg_logprob": -0.2701726525516833, "compression_ratio": 1.3548387096774193, "no_speech_prob": 0.001810132758691907}, {"id": 154, "seek": 86092, "start": 860.92, "end": 866.4399999999999, "text": " There are many different loss functions used in deep learning, and the flux.jl package", "tokens": [50364, 821, 366, 867, 819, 4470, 6828, 1143, 294, 2452, 2539, 11, 293, 264, 19298, 13, 73, 75, 7372, 50640], "temperature": 0.0, "avg_logprob": -0.16721526436183765, "compression_ratio": 1.521978021978022, "no_speech_prob": 0.08386091887950897}, {"id": 155, "seek": 86092, "start": 866.4399999999999, "end": 869.68, "text": " supports all of the major loss functions.", "tokens": [50640, 9346, 439, 295, 264, 2563, 4470, 6828, 13, 50802], "temperature": 0.0, "avg_logprob": -0.16721526436183765, "compression_ratio": 1.521978021978022, "no_speech_prob": 0.08386091887950897}, {"id": 156, "seek": 86092, "start": 869.68, "end": 875.28, "text": " Today, we're using a loss function called cross entropy.", "tokens": [50802, 2692, 11, 321, 434, 1228, 257, 4470, 2445, 1219, 3278, 30867, 13, 51082], "temperature": 0.0, "avg_logprob": -0.16721526436183765, "compression_ratio": 1.521978021978022, "no_speech_prob": 0.08386091887950897}, {"id": 157, "seek": 86092, "start": 875.28, "end": 881.0799999999999, "text": " Again, more on this in the next tutorial.", "tokens": [51082, 3764, 11, 544, 322, 341, 294, 264, 958, 7073, 13, 51372], "temperature": 0.0, "avg_logprob": -0.16721526436183765, "compression_ratio": 1.521978021978022, "no_speech_prob": 0.08386091887950897}, {"id": 158, "seek": 86092, "start": 881.0799999999999, "end": 885.36, "text": " Our model contains a lot of different parameters.", "tokens": [51372, 2621, 2316, 8306, 257, 688, 295, 819, 9834, 13, 51586], "temperature": 0.0, "avg_logprob": -0.16721526436183765, "compression_ratio": 1.521978021978022, "no_speech_prob": 0.08386091887950897}, {"id": 159, "seek": 88536, "start": 885.36, "end": 891.76, "text": " The flux.jl package initializes all of those parameters using random values.", "tokens": [50364, 440, 19298, 13, 73, 75, 7372, 5883, 5660, 439, 295, 729, 9834, 1228, 4974, 4190, 13, 50684], "temperature": 0.0, "avg_logprob": -0.19397366352570364, "compression_ratio": 1.6146341463414635, "no_speech_prob": 0.004264401271939278}, {"id": 160, "seek": 88536, "start": 891.76, "end": 898.6, "text": " Next, we need to select an optimization algorithm that will determine how our computer will", "tokens": [50684, 3087, 11, 321, 643, 281, 3048, 364, 19618, 9284, 300, 486, 6997, 577, 527, 3820, 486, 51026], "temperature": 0.0, "avg_logprob": -0.19397366352570364, "compression_ratio": 1.6146341463414635, "no_speech_prob": 0.004264401271939278}, {"id": 161, "seek": 88536, "start": 898.6, "end": 902.88, "text": " quote unquote, learn the data.", "tokens": [51026, 6513, 37557, 11, 1466, 264, 1412, 13, 51240], "temperature": 0.0, "avg_logprob": -0.19397366352570364, "compression_ratio": 1.6146341463414635, "no_speech_prob": 0.004264401271939278}, {"id": 162, "seek": 88536, "start": 902.88, "end": 907.96, "text": " There are several different optimizers used in deep learning, and the flux.jl package", "tokens": [51240, 821, 366, 2940, 819, 5028, 22525, 1143, 294, 2452, 2539, 11, 293, 264, 19298, 13, 73, 75, 7372, 51494], "temperature": 0.0, "avg_logprob": -0.19397366352570364, "compression_ratio": 1.6146341463414635, "no_speech_prob": 0.004264401271939278}, {"id": 163, "seek": 88536, "start": 907.96, "end": 911.32, "text": " supports all of the commonly used optimizers.", "tokens": [51494, 9346, 439, 295, 264, 12719, 1143, 5028, 22525, 13, 51662], "temperature": 0.0, "avg_logprob": -0.19397366352570364, "compression_ratio": 1.6146341463414635, "no_speech_prob": 0.004264401271939278}, {"id": 164, "seek": 91132, "start": 912.32, "end": 921.32, "text": " Today, we're going to use an optimizer called atom, which is short for adaptive moment estimation.", "tokens": [50414, 2692, 11, 321, 434, 516, 281, 764, 364, 5028, 6545, 1219, 12018, 11, 597, 307, 2099, 337, 27912, 1623, 35701, 13, 50864], "temperature": 0.0, "avg_logprob": -0.20586012280176555, "compression_ratio": 1.475, "no_speech_prob": 0.0012842138530686498}, {"id": 165, "seek": 91132, "start": 921.32, "end": 927.8000000000001, "text": " Okay, we are now ready to train our model.", "tokens": [50864, 1033, 11, 321, 366, 586, 1919, 281, 3847, 527, 2316, 13, 51188], "temperature": 0.0, "avg_logprob": -0.20586012280176555, "compression_ratio": 1.475, "no_speech_prob": 0.0012842138530686498}, {"id": 166, "seek": 91132, "start": 927.8000000000001, "end": 932.84, "text": " The flux.jl package comes included with a handy utility that makes it easy to train", "tokens": [51188, 440, 19298, 13, 73, 75, 7372, 1487, 5556, 365, 257, 13239, 14877, 300, 1669, 309, 1858, 281, 3847, 51440], "temperature": 0.0, "avg_logprob": -0.20586012280176555, "compression_ratio": 1.475, "no_speech_prob": 0.0012842138530686498}, {"id": 167, "seek": 91132, "start": 932.84, "end": 934.96, "text": " our model.", "tokens": [51440, 527, 2316, 13, 51546], "temperature": 0.0, "avg_logprob": -0.20586012280176555, "compression_ratio": 1.475, "no_speech_prob": 0.0012842138530686498}, {"id": 168, "seek": 93496, "start": 934.96, "end": 939.48, "text": " All we need to do is provide a for loop to repeat the training process over multiple", "tokens": [50364, 1057, 321, 643, 281, 360, 307, 2893, 257, 337, 6367, 281, 7149, 264, 3097, 1399, 670, 3866, 50590], "temperature": 0.0, "avg_logprob": -0.2089907057741855, "compression_ratio": 1.3093525179856116, "no_speech_prob": 0.01282022800296545}, {"id": 169, "seek": 93496, "start": 939.48, "end": 942.76, "text": " epochs.", "tokens": [50590, 30992, 28346, 13, 50754], "temperature": 0.0, "avg_logprob": -0.2089907057741855, "compression_ratio": 1.3093525179856116, "no_speech_prob": 0.01282022800296545}, {"id": 170, "seek": 93496, "start": 942.76, "end": 954.0, "text": " Just a warning, depending on your computer's CPU, this may take several minutes to train.", "tokens": [50754, 1449, 257, 9164, 11, 5413, 322, 428, 3820, 311, 13199, 11, 341, 815, 747, 2940, 2077, 281, 3847, 13, 51316], "temperature": 0.0, "avg_logprob": -0.2089907057741855, "compression_ratio": 1.3093525179856116, "no_speech_prob": 0.01282022800296545}, {"id": 171, "seek": 95400, "start": 954.0, "end": 969.72, "text": " I'm going to fast forward through this part.", "tokens": [50364, 286, 478, 516, 281, 2370, 2128, 807, 341, 644, 13, 51150], "temperature": 0.0, "avg_logprob": -0.21918249130249023, "compression_ratio": 1.1478260869565218, "no_speech_prob": 0.0023965060245245695}, {"id": 172, "seek": 95400, "start": 969.72, "end": 975.52, "text": " After an initial delay, you should see some outputs in the REPL, and if everything went", "tokens": [51150, 2381, 364, 5883, 8577, 11, 291, 820, 536, 512, 23930, 294, 264, 31511, 43, 11, 293, 498, 1203, 1437, 51440], "temperature": 0.0, "avg_logprob": -0.21918249130249023, "compression_ratio": 1.1478260869565218, "no_speech_prob": 0.0023965060245245695}, {"id": 173, "seek": 97552, "start": 975.52, "end": 987.3199999999999, "text": " okay, the training loss should be decreasing over time.", "tokens": [50364, 1392, 11, 264, 3097, 4470, 820, 312, 23223, 670, 565, 13, 50954], "temperature": 0.0, "avg_logprob": -0.18461386362711588, "compression_ratio": 1.3461538461538463, "no_speech_prob": 0.05664419010281563}, {"id": 174, "seek": 97552, "start": 987.3199999999999, "end": 991.88, "text": " We now have a trained model with lots of updated parameters.", "tokens": [50954, 492, 586, 362, 257, 8895, 2316, 365, 3195, 295, 10588, 9834, 13, 51182], "temperature": 0.0, "avg_logprob": -0.18461386362711588, "compression_ratio": 1.3461538461538463, "no_speech_prob": 0.05664419010281563}, {"id": 175, "seek": 97552, "start": 991.88, "end": 997.52, "text": " So, how do we use this model in order to make predictions?", "tokens": [51182, 407, 11, 577, 360, 321, 764, 341, 2316, 294, 1668, 281, 652, 21264, 30, 51464], "temperature": 0.0, "avg_logprob": -0.18461386362711588, "compression_ratio": 1.3461538461538463, "no_speech_prob": 0.05664419010281563}, {"id": 176, "seek": 99752, "start": 998.52, "end": 1004.04, "text": " Well, we can just run our test data through our newly trained model in order to get the", "tokens": [50414, 1042, 11, 321, 393, 445, 1190, 527, 1500, 1412, 807, 527, 15109, 8895, 2316, 294, 1668, 281, 483, 264, 50690], "temperature": 0.0, "avg_logprob": -0.16589622270493282, "compression_ratio": 1.5048076923076923, "no_speech_prob": 0.012052238918840885}, {"id": 177, "seek": 99752, "start": 1004.04, "end": 1006.1999999999999, "text": " predictions.", "tokens": [50690, 21264, 13, 50798], "temperature": 0.0, "avg_logprob": -0.16589622270493282, "compression_ratio": 1.5048076923076923, "no_speech_prob": 0.012052238918840885}, {"id": 178, "seek": 99752, "start": 1006.1999999999999, "end": 1014.68, "text": " So, running our test data through our model results in a 10 by 10,000 matrix, which you", "tokens": [50798, 407, 11, 2614, 527, 1500, 1412, 807, 527, 2316, 3542, 294, 257, 1266, 538, 1266, 11, 1360, 8141, 11, 597, 291, 51222], "temperature": 0.0, "avg_logprob": -0.16589622270493282, "compression_ratio": 1.5048076923076923, "no_speech_prob": 0.012052238918840885}, {"id": 179, "seek": 99752, "start": 1014.68, "end": 1017.4399999999999, "text": " can see in the REPL.", "tokens": [51222, 393, 536, 294, 264, 31511, 43, 13, 51360], "temperature": 0.0, "avg_logprob": -0.16589622270493282, "compression_ratio": 1.5048076923076923, "no_speech_prob": 0.012052238918840885}, {"id": 180, "seek": 99752, "start": 1017.4399999999999, "end": 1023.16, "text": " It's a little difficult to read, but those crazy looking numbers are really small values", "tokens": [51360, 467, 311, 257, 707, 2252, 281, 1401, 11, 457, 729, 3219, 1237, 3547, 366, 534, 1359, 4190, 51646], "temperature": 0.0, "avg_logprob": -0.16589622270493282, "compression_ratio": 1.5048076923076923, "no_speech_prob": 0.012052238918840885}, {"id": 181, "seek": 99752, "start": 1023.16, "end": 1025.6, "text": " close to zero.", "tokens": [51646, 1998, 281, 4018, 13, 51768], "temperature": 0.0, "avg_logprob": -0.16589622270493282, "compression_ratio": 1.5048076923076923, "no_speech_prob": 0.012052238918840885}, {"id": 182, "seek": 102560, "start": 1025.6, "end": 1031.24, "text": " In each column, you should see a single value close to one.", "tokens": [50364, 682, 1184, 7738, 11, 291, 820, 536, 257, 2167, 2158, 1998, 281, 472, 13, 50646], "temperature": 0.0, "avg_logprob": -0.16021749475500086, "compression_ratio": 1.6616915422885572, "no_speech_prob": 0.01204996183514595}, {"id": 183, "seek": 102560, "start": 1031.24, "end": 1037.8799999999999, "text": " The sum of each column adds up to 100%, and each row contains the probability of the", "tokens": [50646, 440, 2408, 295, 1184, 7738, 10860, 493, 281, 2319, 8923, 293, 1184, 5386, 8306, 264, 8482, 295, 264, 50978], "temperature": 0.0, "avg_logprob": -0.16021749475500086, "compression_ratio": 1.6616915422885572, "no_speech_prob": 0.01204996183514595}, {"id": 184, "seek": 102560, "start": 1037.8799999999999, "end": 1040.8, "text": " prediction.", "tokens": [50978, 17630, 13, 51124], "temperature": 0.0, "avg_logprob": -0.16021749475500086, "compression_ratio": 1.6616915422885572, "no_speech_prob": 0.01204996183514595}, {"id": 185, "seek": 102560, "start": 1040.8, "end": 1047.52, "text": " Remember that the index numbers for the rows go from 1 to 10, but our labels go from 0", "tokens": [51124, 5459, 300, 264, 8186, 3547, 337, 264, 13241, 352, 490, 502, 281, 1266, 11, 457, 527, 16949, 352, 490, 1958, 51460], "temperature": 0.0, "avg_logprob": -0.16021749475500086, "compression_ratio": 1.6616915422885572, "no_speech_prob": 0.01204996183514595}, {"id": 186, "seek": 102560, "start": 1047.52, "end": 1048.52, "text": " to 9.", "tokens": [51460, 281, 1722, 13, 51510], "temperature": 0.0, "avg_logprob": -0.16021749475500086, "compression_ratio": 1.6616915422885572, "no_speech_prob": 0.01204996183514595}, {"id": 187, "seek": 102560, "start": 1048.52, "end": 1055.04, "text": " So, the first row is the probability that the image is a zero, and the second row is", "tokens": [51510, 407, 11, 264, 700, 5386, 307, 264, 8482, 300, 264, 3256, 307, 257, 4018, 11, 293, 264, 1150, 5386, 307, 51836], "temperature": 0.0, "avg_logprob": -0.16021749475500086, "compression_ratio": 1.6616915422885572, "no_speech_prob": 0.01204996183514595}, {"id": 188, "seek": 105504, "start": 1055.04, "end": 1060.8799999999999, "text": " the probability that the image is a one, and so on.", "tokens": [50364, 264, 8482, 300, 264, 3256, 307, 257, 472, 11, 293, 370, 322, 13, 50656], "temperature": 0.0, "avg_logprob": -0.12005479600694445, "compression_ratio": 1.705069124423963, "no_speech_prob": 0.00034597882768139243}, {"id": 189, "seek": 105504, "start": 1060.8799999999999, "end": 1066.6, "text": " In order to make it easier to work with these predictions, we can use the one cold utility", "tokens": [50656, 682, 1668, 281, 652, 309, 3571, 281, 589, 365, 613, 21264, 11, 321, 393, 764, 264, 472, 3554, 14877, 50942], "temperature": 0.0, "avg_logprob": -0.12005479600694445, "compression_ratio": 1.705069124423963, "no_speech_prob": 0.00034597882768139243}, {"id": 190, "seek": 105504, "start": 1066.6, "end": 1072.8, "text": " function from the flux.jl package, which is like the opposite of the one hot batch utility", "tokens": [50942, 2445, 490, 264, 19298, 13, 73, 75, 7372, 11, 597, 307, 411, 264, 6182, 295, 264, 472, 2368, 15245, 14877, 51252], "temperature": 0.0, "avg_logprob": -0.12005479600694445, "compression_ratio": 1.705069124423963, "no_speech_prob": 0.00034597882768139243}, {"id": 191, "seek": 105504, "start": 1072.8, "end": 1075.3, "text": " function.", "tokens": [51252, 2445, 13, 51377], "temperature": 0.0, "avg_logprob": -0.12005479600694445, "compression_ratio": 1.705069124423963, "no_speech_prob": 0.00034597882768139243}, {"id": 192, "seek": 105504, "start": 1075.3, "end": 1080.8, "text": " A one cold function converts a matrix into a column vector containing the index number", "tokens": [51377, 316, 472, 3554, 2445, 38874, 257, 8141, 666, 257, 7738, 8062, 19273, 264, 8186, 1230, 51652], "temperature": 0.0, "avg_logprob": -0.12005479600694445, "compression_ratio": 1.705069124423963, "no_speech_prob": 0.00034597882768139243}, {"id": 193, "seek": 105504, "start": 1080.8, "end": 1084.3999999999999, "text": " that has the highest probability value.", "tokens": [51652, 300, 575, 264, 6343, 8482, 2158, 13, 51832], "temperature": 0.0, "avg_logprob": -0.12005479600694445, "compression_ratio": 1.705069124423963, "no_speech_prob": 0.00034597882768139243}, {"id": 194, "seek": 108440, "start": 1084.4, "end": 1090.3200000000002, "text": " In order to convert index numbers into labels, we need to subtract one from each of the index", "tokens": [50364, 682, 1668, 281, 7620, 8186, 3547, 666, 16949, 11, 321, 643, 281, 16390, 472, 490, 1184, 295, 264, 8186, 50660], "temperature": 0.0, "avg_logprob": -0.16741044553991866, "compression_ratio": 1.5815217391304348, "no_speech_prob": 0.0019266384188085794}, {"id": 195, "seek": 108440, "start": 1090.3200000000002, "end": 1092.92, "text": " numbers.", "tokens": [50660, 3547, 13, 50790], "temperature": 0.0, "avg_logprob": -0.16741044553991866, "compression_ratio": 1.5815217391304348, "no_speech_prob": 0.0019266384188085794}, {"id": 196, "seek": 108440, "start": 1092.92, "end": 1099.48, "text": " You can see that our predictions are now contained in a column vector with 10,000 elements.", "tokens": [50790, 509, 393, 536, 300, 527, 21264, 366, 586, 16212, 294, 257, 7738, 8062, 365, 1266, 11, 1360, 4959, 13, 51118], "temperature": 0.0, "avg_logprob": -0.16741044553991866, "compression_ratio": 1.5815217391304348, "no_speech_prob": 0.0019266384188085794}, {"id": 197, "seek": 108440, "start": 1099.48, "end": 1105.68, "text": " Now, all we need to do is compare the predicted labels with the actual labels for the test", "tokens": [51118, 823, 11, 439, 321, 643, 281, 360, 307, 6794, 264, 19147, 16949, 365, 264, 3539, 16949, 337, 264, 1500, 51428], "temperature": 0.0, "avg_logprob": -0.16741044553991866, "compression_ratio": 1.5815217391304348, "no_speech_prob": 0.0019266384188085794}, {"id": 198, "seek": 108440, "start": 1105.68, "end": 1107.2, "text": " data.", "tokens": [51428, 1412, 13, 51504], "temperature": 0.0, "avg_logprob": -0.16741044553991866, "compression_ratio": 1.5815217391304348, "no_speech_prob": 0.0019266384188085794}, {"id": 199, "seek": 110720, "start": 1108.2, "end": 1116.44, "text": " So, our little artificial neural network model achieved an accuracy score of 96.24%, which", "tokens": [50414, 407, 11, 527, 707, 11677, 18161, 3209, 2316, 11042, 364, 14170, 6175, 295, 24124, 13, 7911, 8923, 597, 50826], "temperature": 0.0, "avg_logprob": -0.1695547339356976, "compression_ratio": 1.4612068965517242, "no_speech_prob": 0.005554634612053633}, {"id": 200, "seek": 110720, "start": 1116.44, "end": 1120.72, "text": " is pretty amazing considering how difficult the challenge is.", "tokens": [50826, 307, 1238, 2243, 8079, 577, 2252, 264, 3430, 307, 13, 51040], "temperature": 0.0, "avg_logprob": -0.1695547339356976, "compression_ratio": 1.4612068965517242, "no_speech_prob": 0.005554634612053633}, {"id": 201, "seek": 110720, "start": 1120.72, "end": 1127.3600000000001, "text": " Now, before we go out and celebrate, let's take a look at the current best-in-class accuracy", "tokens": [51040, 823, 11, 949, 321, 352, 484, 293, 8098, 11, 718, 311, 747, 257, 574, 412, 264, 2190, 1151, 12, 259, 12, 11665, 14170, 51372], "temperature": 0.0, "avg_logprob": -0.1695547339356976, "compression_ratio": 1.4612068965517242, "no_speech_prob": 0.005554634612053633}, {"id": 202, "seek": 110720, "start": 1127.3600000000001, "end": 1129.8, "text": " score.", "tokens": [51372, 6175, 13, 51494], "temperature": 0.0, "avg_logprob": -0.1695547339356976, "compression_ratio": 1.4612068965517242, "no_speech_prob": 0.005554634612053633}, {"id": 203, "seek": 110720, "start": 1129.8, "end": 1135.4, "text": " According to the Wikipedia article on the MNIST database, the highest average accuracy", "tokens": [51494, 7328, 281, 264, 28999, 7222, 322, 264, 376, 45, 19756, 8149, 11, 264, 6343, 4274, 14170, 51774], "temperature": 0.0, "avg_logprob": -0.1695547339356976, "compression_ratio": 1.4612068965517242, "no_speech_prob": 0.005554634612053633}, {"id": 204, "seek": 113540, "start": 1135.4, "end": 1143.96, "text": " score for any machine learning model is 99.83%, which was achieved in 2020 using something", "tokens": [50364, 6175, 337, 604, 3479, 2539, 2316, 307, 11803, 13, 31849, 8923, 597, 390, 11042, 294, 4808, 1228, 746, 50792], "temperature": 0.0, "avg_logprob": -0.12400235262784091, "compression_ratio": 1.3647798742138364, "no_speech_prob": 0.004198234062641859}, {"id": 205, "seek": 113540, "start": 1143.96, "end": 1148.8000000000002, "text": " called a convolutional neural network.", "tokens": [50792, 1219, 257, 45216, 304, 18161, 3209, 13, 51034], "temperature": 0.0, "avg_logprob": -0.12400235262784091, "compression_ratio": 1.3647798742138364, "no_speech_prob": 0.004198234062641859}, {"id": 206, "seek": 113540, "start": 1148.8000000000002, "end": 1154.0800000000002, "text": " In any event, let's take a look at some of our misclassifications to see if we can gain", "tokens": [51034, 682, 604, 2280, 11, 718, 311, 747, 257, 574, 412, 512, 295, 527, 3346, 11665, 7833, 281, 536, 498, 321, 393, 6052, 51298], "temperature": 0.0, "avg_logprob": -0.12400235262784091, "compression_ratio": 1.3647798742138364, "no_speech_prob": 0.004198234062641859}, {"id": 207, "seek": 115408, "start": 1154.08, "end": 1172.72, "text": " any insights.", "tokens": [50364, 604, 14310, 13, 51296], "temperature": 0.0, "avg_logprob": -0.4533950487772624, "compression_ratio": 0.875, "no_speech_prob": 0.02096232958137989}, {"id": 208, "seek": 115408, "start": 1172.72, "end": 1176.8799999999999, "text": " So this table contains 10,000 rows.", "tokens": [51296, 407, 341, 3199, 8306, 1266, 11, 1360, 13241, 13, 51504], "temperature": 0.0, "avg_logprob": -0.4533950487772624, "compression_ratio": 0.875, "no_speech_prob": 0.02096232958137989}, {"id": 209, "seek": 117688, "start": 1176.88, "end": 1184.88, "text": " The first column is the index number for both the predictions as well as the actual", "tokens": [50364, 440, 700, 7738, 307, 264, 8186, 1230, 337, 1293, 264, 21264, 382, 731, 382, 264, 3539, 50764], "temperature": 0.0, "avg_logprob": -0.15942986806233725, "compression_ratio": 1.8734939759036144, "no_speech_prob": 0.0028006769716739655}, {"id": 210, "seek": 117688, "start": 1184.88, "end": 1187.16, "text": " label data.", "tokens": [50764, 7645, 1412, 13, 50878], "temperature": 0.0, "avg_logprob": -0.15942986806233725, "compression_ratio": 1.8734939759036144, "no_speech_prob": 0.0028006769716739655}, {"id": 211, "seek": 117688, "start": 1187.16, "end": 1192.92, "text": " The second column contains the predicted labels, and the third column contains the actual", "tokens": [50878, 440, 1150, 7738, 8306, 264, 19147, 16949, 11, 293, 264, 2636, 7738, 8306, 264, 3539, 51166], "temperature": 0.0, "avg_logprob": -0.15942986806233725, "compression_ratio": 1.8734939759036144, "no_speech_prob": 0.0028006769716739655}, {"id": 212, "seek": 117688, "start": 1192.92, "end": 1196.1200000000001, "text": " labels from the test data sets.", "tokens": [51166, 16949, 490, 264, 1500, 1412, 6352, 13, 51326], "temperature": 0.0, "avg_logprob": -0.15942986806233725, "compression_ratio": 1.8734939759036144, "no_speech_prob": 0.0028006769716739655}, {"id": 213, "seek": 117688, "start": 1196.1200000000001, "end": 1202.5200000000002, "text": " The fourth column contains one for true if the predicted label has been classified correctly,", "tokens": [51326, 440, 6409, 7738, 8306, 472, 337, 2074, 498, 264, 19147, 7645, 575, 668, 20627, 8944, 11, 51646], "temperature": 0.0, "avg_logprob": -0.15942986806233725, "compression_ratio": 1.8734939759036144, "no_speech_prob": 0.0028006769716739655}, {"id": 214, "seek": 120252, "start": 1202.52, "end": 1208.92, "text": " and a zero for false if the predicted label has been misclassified.", "tokens": [50364, 293, 257, 4018, 337, 7908, 498, 264, 19147, 7645, 575, 668, 3346, 11665, 2587, 13, 50684], "temperature": 0.0, "avg_logprob": -0.14848493127261891, "compression_ratio": 1.5031055900621118, "no_speech_prob": 0.00198771758005023}, {"id": 215, "seek": 120252, "start": 1208.92, "end": 1219.6399999999999, "text": " If you sort on column 4, you can see all of the misclassifications.", "tokens": [50684, 759, 291, 1333, 322, 7738, 1017, 11, 291, 393, 536, 439, 295, 264, 3346, 11665, 7833, 13, 51220], "temperature": 0.0, "avg_logprob": -0.14848493127261891, "compression_ratio": 1.5031055900621118, "no_speech_prob": 0.00198771758005023}, {"id": 216, "seek": 120252, "start": 1219.6399999999999, "end": 1227.2, "text": " So there are 376 misclassifications, which sounds like a lot, but remember, there are", "tokens": [51220, 407, 456, 366, 13435, 21, 3346, 11665, 7833, 11, 597, 3263, 411, 257, 688, 11, 457, 1604, 11, 456, 366, 51598], "temperature": 0.0, "avg_logprob": -0.14848493127261891, "compression_ratio": 1.5031055900621118, "no_speech_prob": 0.00198771758005023}, {"id": 217, "seek": 120252, "start": 1227.2, "end": 1231.32, "text": " 10,000 test samples.", "tokens": [51598, 1266, 11, 1360, 1500, 10938, 13, 51804], "temperature": 0.0, "avg_logprob": -0.14848493127261891, "compression_ratio": 1.5031055900621118, "no_speech_prob": 0.00198771758005023}, {"id": 218, "seek": 123132, "start": 1231.32, "end": 1247.0, "text": " Let's take a look at the first misclassification, which has an index number of 9.", "tokens": [50364, 961, 311, 747, 257, 574, 412, 264, 700, 3346, 11665, 3774, 11, 597, 575, 364, 8186, 1230, 295, 1722, 13, 51148], "temperature": 0.0, "avg_logprob": -0.12218210173816216, "compression_ratio": 1.2, "no_speech_prob": 0.03209608048200607}, {"id": 219, "seek": 123132, "start": 1247.0, "end": 1251.8799999999999, "text": " So I don't know about you, but I cannot read this handwriting.", "tokens": [51148, 407, 286, 500, 380, 458, 466, 291, 11, 457, 286, 2644, 1401, 341, 39179, 13, 51392], "temperature": 0.0, "avg_logprob": -0.12218210173816216, "compression_ratio": 1.2, "no_speech_prob": 0.03209608048200607}, {"id": 220, "seek": 125188, "start": 1251.88, "end": 1263.3600000000001, "text": " I mean, what is that?", "tokens": [50364, 286, 914, 11, 437, 307, 300, 30, 50938], "temperature": 0.0, "avg_logprob": -0.13032155666711195, "compression_ratio": 1.3082706766917294, "no_speech_prob": 0.25675225257873535}, {"id": 221, "seek": 125188, "start": 1263.3600000000001, "end": 1270.7600000000002, "text": " It's labeled as a 5, but does that look like a 5 to you?", "tokens": [50938, 467, 311, 21335, 382, 257, 1025, 11, 457, 775, 300, 574, 411, 257, 1025, 281, 291, 30, 51308], "temperature": 0.0, "avg_logprob": -0.13032155666711195, "compression_ratio": 1.3082706766917294, "no_speech_prob": 0.25675225257873535}, {"id": 222, "seek": 125188, "start": 1270.7600000000002, "end": 1277.2, "text": " Our model guessed 4, and you can kind of forgive it since I don't think I could have classified", "tokens": [51308, 2621, 2316, 21852, 1017, 11, 293, 291, 393, 733, 295, 10718, 309, 1670, 286, 500, 380, 519, 286, 727, 362, 20627, 51630], "temperature": 0.0, "avg_logprob": -0.13032155666711195, "compression_ratio": 1.3082706766917294, "no_speech_prob": 0.25675225257873535}, {"id": 223, "seek": 127720, "start": 1277.2, "end": 1281.48, "text": " this image correctly as a 5 just by looking at it.", "tokens": [50364, 341, 3256, 8944, 382, 257, 1025, 445, 538, 1237, 412, 309, 13, 50578], "temperature": 0.0, "avg_logprob": -0.16202510369790568, "compression_ratio": 1.4328358208955223, "no_speech_prob": 0.18233978748321533}, {"id": 224, "seek": 127720, "start": 1281.48, "end": 1285.0, "text": " Anyways, you get my point.", "tokens": [50578, 15585, 11, 291, 483, 452, 935, 13, 50754], "temperature": 0.0, "avg_logprob": -0.16202510369790568, "compression_ratio": 1.4328358208955223, "no_speech_prob": 0.18233978748321533}, {"id": 225, "seek": 127720, "start": 1285.0, "end": 1291.6000000000001, "text": " This is not a trivial classification problem, and it's amazing that any model can achieve", "tokens": [50754, 639, 307, 406, 257, 26703, 21538, 1154, 11, 293, 309, 311, 2243, 300, 604, 2316, 393, 4584, 51084], "temperature": 0.0, "avg_logprob": -0.16202510369790568, "compression_ratio": 1.4328358208955223, "no_speech_prob": 0.18233978748321533}, {"id": 226, "seek": 127720, "start": 1291.6000000000001, "end": 1297.0, "text": " accuracy levels that are comparable to human beings, given the wide range in handwriting", "tokens": [51084, 14170, 4358, 300, 366, 25323, 281, 1952, 8958, 11, 2212, 264, 4874, 3613, 294, 39179, 51354], "temperature": 0.0, "avg_logprob": -0.16202510369790568, "compression_ratio": 1.4328358208955223, "no_speech_prob": 0.18233978748321533}, {"id": 227, "seek": 127720, "start": 1297.0, "end": 1300.16, "text": " styles.", "tokens": [51354, 13273, 13, 51512], "temperature": 0.0, "avg_logprob": -0.16202510369790568, "compression_ratio": 1.4328358208955223, "no_speech_prob": 0.18233978748321533}, {"id": 228, "seek": 127720, "start": 1300.16, "end": 1303.48, "text": " So that was fun, right?", "tokens": [51512, 407, 300, 390, 1019, 11, 558, 30, 51678], "temperature": 0.0, "avg_logprob": -0.16202510369790568, "compression_ratio": 1.4328358208955223, "no_speech_prob": 0.18233978748321533}, {"id": 229, "seek": 130348, "start": 1303.48, "end": 1332.0, "text": " Here we go, let's plot a learning curve to see how our model did while training.", "tokens": [50364, 1692, 321, 352, 11, 718, 311, 7542, 257, 2539, 7605, 281, 536, 577, 527, 2316, 630, 1339, 3097, 13, 51790], "temperature": 0.0, "avg_logprob": -0.1629125864609428, "compression_ratio": 1.0389610389610389, "no_speech_prob": 0.7515586614608765}, {"id": 230, "seek": 133200, "start": 1332.0, "end": 1338.56, "text": " So this learning curve looks similar to other learning curves that we've seen in past tutorials.", "tokens": [50364, 407, 341, 2539, 7605, 1542, 2531, 281, 661, 2539, 19490, 300, 321, 600, 1612, 294, 1791, 17616, 13, 50692], "temperature": 0.0, "avg_logprob": -0.14662587092472956, "compression_ratio": 1.641304347826087, "no_speech_prob": 0.20416219532489777}, {"id": 231, "seek": 133200, "start": 1338.56, "end": 1343.36, "text": " Even though the code for this neural network looks very different, the overall learning", "tokens": [50692, 2754, 1673, 264, 3089, 337, 341, 18161, 3209, 1542, 588, 819, 11, 264, 4787, 2539, 50932], "temperature": 0.0, "avg_logprob": -0.14662587092472956, "compression_ratio": 1.641304347826087, "no_speech_prob": 0.20416219532489777}, {"id": 232, "seek": 133200, "start": 1343.36, "end": 1349.56, "text": " workflow is very similar to other machine learning algorithms.", "tokens": [50932, 20993, 307, 588, 2531, 281, 661, 3479, 2539, 14642, 13, 51242], "temperature": 0.0, "avg_logprob": -0.14662587092472956, "compression_ratio": 1.641304347826087, "no_speech_prob": 0.20416219532489777}, {"id": 233, "seek": 133200, "start": 1349.56, "end": 1360.36, "text": " Let's save this plot and recap what we just witnessed.", "tokens": [51242, 961, 311, 3155, 341, 7542, 293, 20928, 437, 321, 445, 21519, 13, 51782], "temperature": 0.0, "avg_logprob": -0.14662587092472956, "compression_ratio": 1.641304347826087, "no_speech_prob": 0.20416219532489777}, {"id": 234, "seek": 136036, "start": 1360.36, "end": 1367.04, "text": " Today we became very familiar with the MNIST data sets, and we got a quick introduction", "tokens": [50364, 2692, 321, 3062, 588, 4963, 365, 264, 376, 45, 19756, 1412, 6352, 11, 293, 321, 658, 257, 1702, 9339, 50698], "temperature": 0.0, "avg_logprob": -0.12180638313293457, "compression_ratio": 1.5589519650655022, "no_speech_prob": 0.3305984437465668}, {"id": 235, "seek": 136036, "start": 1367.04, "end": 1370.6799999999998, "text": " to the Flux.jl package.", "tokens": [50698, 281, 264, 3235, 2449, 13, 73, 75, 7372, 13, 50880], "temperature": 0.0, "avg_logprob": -0.12180638313293457, "compression_ratio": 1.5589519650655022, "no_speech_prob": 0.3305984437465668}, {"id": 236, "seek": 136036, "start": 1370.6799999999998, "end": 1376.3999999999999, "text": " After doing a little preprocessing work on the data, we immediately built an artificial", "tokens": [50880, 2381, 884, 257, 707, 2666, 340, 780, 278, 589, 322, 264, 1412, 11, 321, 4258, 3094, 364, 11677, 51166], "temperature": 0.0, "avg_logprob": -0.12180638313293457, "compression_ratio": 1.5589519650655022, "no_speech_prob": 0.3305984437465668}, {"id": 237, "seek": 136036, "start": 1376.3999999999999, "end": 1383.32, "text": " neural network model using the tools provided by the Flux.jl package.", "tokens": [51166, 18161, 3209, 2316, 1228, 264, 3873, 5649, 538, 264, 3235, 2449, 13, 73, 75, 7372, 13, 51512], "temperature": 0.0, "avg_logprob": -0.12180638313293457, "compression_ratio": 1.5589519650655022, "no_speech_prob": 0.3305984437465668}, {"id": 238, "seek": 136036, "start": 1383.32, "end": 1388.76, "text": " Then we followed a similar workflow that we used with other machine learning algorithms", "tokens": [51512, 1396, 321, 6263, 257, 2531, 20993, 300, 321, 1143, 365, 661, 3479, 2539, 14642, 51784], "temperature": 0.0, "avg_logprob": -0.12180638313293457, "compression_ratio": 1.5589519650655022, "no_speech_prob": 0.3305984437465668}, {"id": 239, "seek": 138876, "start": 1388.76, "end": 1394.96, "text": " by defining a loss function, by initializing parameters, by selecting an optimizer, and", "tokens": [50364, 538, 17827, 257, 4470, 2445, 11, 538, 5883, 3319, 9834, 11, 538, 18182, 364, 5028, 6545, 11, 293, 50674], "temperature": 0.0, "avg_logprob": -0.10844119198351021, "compression_ratio": 1.596244131455399, "no_speech_prob": 0.05030902847647667}, {"id": 240, "seek": 138876, "start": 1394.96, "end": 1398.8, "text": " by training our model using a for loop.", "tokens": [50674, 538, 3097, 527, 2316, 1228, 257, 337, 6367, 13, 50866], "temperature": 0.0, "avg_logprob": -0.10844119198351021, "compression_ratio": 1.596244131455399, "no_speech_prob": 0.05030902847647667}, {"id": 241, "seek": 138876, "start": 1398.8, "end": 1405.8799999999999, "text": " But the actual details of that workflow are very different with a lot of new terms.", "tokens": [50866, 583, 264, 3539, 4365, 295, 300, 20993, 366, 588, 819, 365, 257, 688, 295, 777, 2115, 13, 51220], "temperature": 0.0, "avg_logprob": -0.10844119198351021, "compression_ratio": 1.596244131455399, "no_speech_prob": 0.05030902847647667}, {"id": 242, "seek": 138876, "start": 1405.8799999999999, "end": 1411.76, "text": " In the end, we were able to use this trained model in order to make predictions, like we", "tokens": [51220, 682, 264, 917, 11, 321, 645, 1075, 281, 764, 341, 8895, 2316, 294, 1668, 281, 652, 21264, 11, 411, 321, 51514], "temperature": 0.0, "avg_logprob": -0.10844119198351021, "compression_ratio": 1.596244131455399, "no_speech_prob": 0.05030902847647667}, {"id": 243, "seek": 138876, "start": 1411.76, "end": 1415.48, "text": " did with other machine learning models.", "tokens": [51514, 630, 365, 661, 3479, 2539, 5245, 13, 51700], "temperature": 0.0, "avg_logprob": -0.10844119198351021, "compression_ratio": 1.596244131455399, "no_speech_prob": 0.05030902847647667}, {"id": 244, "seek": 141548, "start": 1415.48, "end": 1420.92, "text": " We were also able to calculate an accuracy score and plot a learning curve.", "tokens": [50364, 492, 645, 611, 1075, 281, 8873, 364, 14170, 6175, 293, 7542, 257, 2539, 7605, 13, 50636], "temperature": 0.0, "avg_logprob": -0.15388595430474533, "compression_ratio": 1.5355450236966826, "no_speech_prob": 0.029306944459676743}, {"id": 245, "seek": 141548, "start": 1420.92, "end": 1428.48, "text": " Hopefully, today's tutorial has left you both excited and confused.", "tokens": [50636, 10429, 11, 965, 311, 7073, 575, 1411, 291, 1293, 2919, 293, 9019, 13, 51014], "temperature": 0.0, "avg_logprob": -0.15388595430474533, "compression_ratio": 1.5355450236966826, "no_speech_prob": 0.029306944459676743}, {"id": 246, "seek": 141548, "start": 1428.48, "end": 1432.84, "text": " After seeing what's possible with artificial neural networks, you probably want to use", "tokens": [51014, 2381, 2577, 437, 311, 1944, 365, 11677, 18161, 9590, 11, 291, 1391, 528, 281, 764, 51232], "temperature": 0.0, "avg_logprob": -0.15388595430474533, "compression_ratio": 1.5355450236966826, "no_speech_prob": 0.029306944459676743}, {"id": 247, "seek": 141548, "start": 1432.84, "end": 1438.32, "text": " it right away, but may be hesitant since you may be wondering what's going on under the", "tokens": [51232, 309, 558, 1314, 11, 457, 815, 312, 36290, 1670, 291, 815, 312, 6359, 437, 311, 516, 322, 833, 264, 51506], "temperature": 0.0, "avg_logprob": -0.15388595430474533, "compression_ratio": 1.5355450236966826, "no_speech_prob": 0.029306944459676743}, {"id": 248, "seek": 141548, "start": 1438.32, "end": 1440.68, "text": " hood.", "tokens": [51506, 13376, 13, 51624], "temperature": 0.0, "avg_logprob": -0.15388595430474533, "compression_ratio": 1.5355450236966826, "no_speech_prob": 0.029306944459676743}, {"id": 249, "seek": 144068, "start": 1440.68, "end": 1446.48, "text": " In the next tutorial, we'll revisit this code in order to gain a better understanding of", "tokens": [50364, 682, 264, 958, 7073, 11, 321, 603, 32676, 341, 3089, 294, 1668, 281, 6052, 257, 1101, 3701, 295, 50654], "temperature": 0.0, "avg_logprob": -0.1675551009900642, "compression_ratio": 1.4444444444444444, "no_speech_prob": 0.020328456535935402}, {"id": 250, "seek": 144068, "start": 1446.48, "end": 1452.6000000000001, "text": " the concepts that make these artificial neural networks such a modern marvel.", "tokens": [50654, 264, 10392, 300, 652, 613, 11677, 18161, 9590, 1270, 257, 4363, 23893, 13, 50960], "temperature": 0.0, "avg_logprob": -0.1675551009900642, "compression_ratio": 1.4444444444444444, "no_speech_prob": 0.020328456535935402}, {"id": 251, "seek": 144068, "start": 1452.6000000000001, "end": 1456.6000000000001, "text": " So stay tuned for that.", "tokens": [50960, 407, 1754, 10870, 337, 300, 13, 51160], "temperature": 0.0, "avg_logprob": -0.1675551009900642, "compression_ratio": 1.4444444444444444, "no_speech_prob": 0.020328456535935402}, {"id": 252, "seek": 144068, "start": 1456.6000000000001, "end": 1461.16, "text": " Well, that's all for today.", "tokens": [51160, 1042, 11, 300, 311, 439, 337, 965, 13, 51388], "temperature": 0.0, "avg_logprob": -0.1675551009900642, "compression_ratio": 1.4444444444444444, "no_speech_prob": 0.020328456535935402}, {"id": 253, "seek": 144068, "start": 1461.16, "end": 1467.04, "text": " If you made it this far, congratulations!", "tokens": [51388, 759, 291, 1027, 309, 341, 1400, 11, 13568, 0, 51682], "temperature": 0.0, "avg_logprob": -0.1675551009900642, "compression_ratio": 1.4444444444444444, "no_speech_prob": 0.020328456535935402}, {"id": 254, "seek": 146704, "start": 1467.04, "end": 1472.12, "text": " If you enjoyed this video and you feel like you learned something new, please give it", "tokens": [50364, 759, 291, 4626, 341, 960, 293, 291, 841, 411, 291, 3264, 746, 777, 11, 1767, 976, 309, 50618], "temperature": 0.0, "avg_logprob": -0.15582926861651533, "compression_ratio": 1.5441176470588236, "no_speech_prob": 0.5880470871925354}, {"id": 255, "seek": 146704, "start": 1472.12, "end": 1474.44, "text": " a thumbs up.", "tokens": [50618, 257, 8838, 493, 13, 50734], "temperature": 0.0, "avg_logprob": -0.15582926861651533, "compression_ratio": 1.5441176470588236, "no_speech_prob": 0.5880470871925354}, {"id": 256, "seek": 146704, "start": 1474.44, "end": 1481.52, "text": " For more wholesome Julia tutorials, please be sure to subscribe and hit that bell.", "tokens": [50734, 1171, 544, 315, 45880, 18551, 17616, 11, 1767, 312, 988, 281, 3022, 293, 2045, 300, 4549, 13, 51088], "temperature": 0.0, "avg_logprob": -0.15582926861651533, "compression_ratio": 1.5441176470588236, "no_speech_prob": 0.5880470871925354}, {"id": 257, "seek": 146704, "start": 1481.52, "end": 1487.6399999999999, "text": " If you like what I do, then please consider joining and becoming a channel member.", "tokens": [51088, 759, 291, 411, 437, 286, 360, 11, 550, 1767, 1949, 5549, 293, 5617, 257, 2269, 4006, 13, 51394], "temperature": 0.0, "avg_logprob": -0.15582926861651533, "compression_ratio": 1.5441176470588236, "no_speech_prob": 0.5880470871925354}, {"id": 258, "seek": 146704, "start": 1487.6399999999999, "end": 1492.6, "text": " New tutorials are posted on Sundays slash Mondays.", "tokens": [51394, 1873, 17616, 366, 9437, 322, 44857, 17330, 7492, 3772, 13, 51642], "temperature": 0.0, "avg_logprob": -0.15582926861651533, "compression_ratio": 1.5441176470588236, "no_speech_prob": 0.5880470871925354}, {"id": 259, "seek": 149260, "start": 1492.6, "end": 1496.6, "text": " Thanks for watching, and I'll see you in the next video.", "tokens": [50364, 2561, 337, 1976, 11, 293, 286, 603, 536, 291, 294, 264, 958, 960, 13, 50564], "temperature": 0.0, "avg_logprob": -0.20641195072847254, "compression_ratio": 0.875, "no_speech_prob": 0.7507401704788208}], "language": "en"}