WEBVTT

00:00.000 --> 00:05.560
Which sorting algorithm is the simplest?

00:05.560 --> 00:10.920
Well that depends on what you mean by simple, but a good candidate might be selection sort.

00:10.920 --> 00:15.080
This is the algorithm where you repeatedly find the smallest element and move it to the

00:15.080 --> 00:16.080
left.

00:16.080 --> 00:19.880
You can implement it like this, with two for loops and a conditional swap.

00:19.880 --> 00:25.360
The outer loop creates n phases and in each phase we run the inner loop to find the next

00:25.360 --> 00:27.000
smallest number.

00:27.000 --> 00:31.240
And as for simplicity, I learned that there are two for loops and just one comparison

00:31.240 --> 00:33.880
between ai and aj.

00:33.880 --> 00:37.240
But what about this inner loop where j starts from i plus 1?

00:37.240 --> 00:39.320
That seems a bit error prone.

00:39.320 --> 00:45.400
So maybe we could improve it by letting it run from 1 rather than i plus 1.

00:45.400 --> 00:47.800
Now it's just beautiful.

00:47.800 --> 00:49.320
Just look at the symmetry.

00:49.320 --> 00:55.120
Two nested for loops from 1 to n and a nicely symmetric loop conditional swap inside.

00:55.120 --> 00:58.480
But the question is, does this actually still sort?

00:58.480 --> 01:00.680
And if so, then why?

01:00.680 --> 01:04.120
We think that's a great riddle, so go ahead and pause the video and think about it for

01:04.120 --> 01:09.120
yourself.

01:09.120 --> 01:11.080
Alright here comes the solution.

01:11.080 --> 01:29.960
This is what the algorithm actually does.

01:29.960 --> 01:34.160
Okay so apparently this sorts, but in reverse order?

01:34.160 --> 01:35.160
That's pretty weird.

01:35.160 --> 01:38.840
Let's go through the algorithm one more time together.

01:38.840 --> 01:44.200
In the first phase, when ai is 1, the algorithm is doing the same thing as selection sort,

01:44.200 --> 01:47.920
so it finds the smallest number and it brings it to the left.

01:47.920 --> 01:51.920
That's kind of counterproductive since the algorithm will end up sorting in the opposite

01:51.920 --> 01:54.160
order, but okay.

01:54.160 --> 02:06.400
In the following phases, we can finally see what's actually happening.

02:06.400 --> 02:08.760
Let's stop the algorithm after 4 phases.

02:08.760 --> 02:13.880
At this point, the first 4 columns are sorted in reverse order and the last one of them

02:13.880 --> 02:16.480
is the smallest in the entire array.

02:16.480 --> 02:18.080
And this is no coincidence.

02:18.080 --> 02:21.560
These two properties will hold in general.

02:21.560 --> 02:26.800
If we look at the 5th phase, we start by comparing the red column to the already sorted sequence.

02:26.800 --> 02:31.280
Once it becomes larger than the column at position j, we insert it into the sequence

02:31.280 --> 02:37.080
like this and then we continue swapping the columns after it until j reaches i.

02:37.080 --> 02:39.720
This just shifts them by one to the right.

02:39.720 --> 02:44.200
So now we've successfully inserted the column into our sorted sequence.

02:44.200 --> 02:48.320
And now we run the steps that were present in the original selection sort.

02:48.320 --> 02:53.000
And you can see that these steps do absolutely nothing because at this point, the column

02:53.000 --> 02:57.000
at position i is the smallest, so it'll never get swapped.

02:57.000 --> 02:58.600
Let's look at one more phase.

02:58.600 --> 03:02.760
We first find the right place for the magenta column, then shift the rest of the sorted

03:02.760 --> 03:09.240
sequence to the right and then no more swaps happen.

03:09.240 --> 03:10.480
Nice.

03:10.480 --> 03:14.880
And all of this complexity comes just from these 4 simple lines of code.

03:14.880 --> 03:20.840
Here comes the final iteration and then we're done.

03:20.840 --> 03:25.040
So we were actually pulling your leg a bit when we said this was a variation on selection

03:25.040 --> 03:26.040
sort.

03:26.040 --> 03:31.600
In fact, if we throw away the useless selection sort part of the algorithm and only let the

03:31.600 --> 03:37.640
inner loop run from one to i, we surprisingly get what's known as insertion sort, a very

03:37.640 --> 03:39.440
different algorithm.

03:39.440 --> 03:45.320
So our beautiful and simple algorithm is actually under the hood, two basic sorting algorithms

03:45.320 --> 03:47.480
stitched into one.

03:47.480 --> 03:52.560
Each inner loop first has an insertion sort part followed by a selection sort part.

03:52.560 --> 03:57.720
But they're combined in such a way that only the insertion sort is actually doing anything.

03:57.720 --> 04:02.240
The only drawback is that it sorts in reverse order, but we can simply fix that by flipping

04:02.240 --> 04:04.920
the comparison sign.

04:04.920 --> 04:09.840
And now we are looking at what could well be the simplest sorting algorithm ever.

