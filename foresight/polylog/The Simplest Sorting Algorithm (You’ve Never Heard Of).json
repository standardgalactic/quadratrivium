{"text": " Which sorting algorithm is the simplest? Well that depends on what you mean by simple, but a good candidate might be selection sort. This is the algorithm where you repeatedly find the smallest element and move it to the left. You can implement it like this, with two for loops and a conditional swap. The outer loop creates n phases and in each phase we run the inner loop to find the next smallest number. And as for simplicity, I learned that there are two for loops and just one comparison between ai and aj. But what about this inner loop where j starts from i plus 1? That seems a bit error prone. So maybe we could improve it by letting it run from 1 rather than i plus 1. Now it's just beautiful. Just look at the symmetry. Two nested for loops from 1 to n and a nicely symmetric loop conditional swap inside. But the question is, does this actually still sort? And if so, then why? We think that's a great riddle, so go ahead and pause the video and think about it for yourself. Alright here comes the solution. This is what the algorithm actually does. Okay so apparently this sorts, but in reverse order? That's pretty weird. Let's go through the algorithm one more time together. In the first phase, when ai is 1, the algorithm is doing the same thing as selection sort, so it finds the smallest number and it brings it to the left. That's kind of counterproductive since the algorithm will end up sorting in the opposite order, but okay. In the following phases, we can finally see what's actually happening. Let's stop the algorithm after 4 phases. At this point, the first 4 columns are sorted in reverse order and the last one of them is the smallest in the entire array. And this is no coincidence. These two properties will hold in general. If we look at the 5th phase, we start by comparing the red column to the already sorted sequence. Once it becomes larger than the column at position j, we insert it into the sequence like this and then we continue swapping the columns after it until j reaches i. This just shifts them by one to the right. So now we've successfully inserted the column into our sorted sequence. And now we run the steps that were present in the original selection sort. And you can see that these steps do absolutely nothing because at this point, the column at position i is the smallest, so it'll never get swapped. Let's look at one more phase. We first find the right place for the magenta column, then shift the rest of the sorted sequence to the right and then no more swaps happen. Nice. And all of this complexity comes just from these 4 simple lines of code. Here comes the final iteration and then we're done. So we were actually pulling your leg a bit when we said this was a variation on selection sort. In fact, if we throw away the useless selection sort part of the algorithm and only let the inner loop run from one to i, we surprisingly get what's known as insertion sort, a very different algorithm. So our beautiful and simple algorithm is actually under the hood, two basic sorting algorithms stitched into one. Each inner loop first has an insertion sort part followed by a selection sort part. But they're combined in such a way that only the insertion sort is actually doing anything. The only drawback is that it sorts in reverse order, but we can simply fix that by flipping the comparison sign. And now we are looking at what could well be the simplest sorting algorithm ever.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 5.5600000000000005, "text": " Which sorting algorithm is the simplest?", "tokens": [50364, 3013, 32411, 9284, 307, 264, 22811, 30, 50642], "temperature": 0.0, "avg_logprob": -0.1448227629369619, "compression_ratio": 1.702928870292887, "no_speech_prob": 0.07470125705003738}, {"id": 1, "seek": 0, "start": 5.5600000000000005, "end": 10.92, "text": " Well that depends on what you mean by simple, but a good candidate might be selection sort.", "tokens": [50642, 1042, 300, 5946, 322, 437, 291, 914, 538, 2199, 11, 457, 257, 665, 11532, 1062, 312, 9450, 1333, 13, 50910], "temperature": 0.0, "avg_logprob": -0.1448227629369619, "compression_ratio": 1.702928870292887, "no_speech_prob": 0.07470125705003738}, {"id": 2, "seek": 0, "start": 10.92, "end": 15.08, "text": " This is the algorithm where you repeatedly find the smallest element and move it to the", "tokens": [50910, 639, 307, 264, 9284, 689, 291, 18227, 915, 264, 16998, 4478, 293, 1286, 309, 281, 264, 51118], "temperature": 0.0, "avg_logprob": -0.1448227629369619, "compression_ratio": 1.702928870292887, "no_speech_prob": 0.07470125705003738}, {"id": 3, "seek": 0, "start": 15.08, "end": 16.080000000000002, "text": " left.", "tokens": [51118, 1411, 13, 51168], "temperature": 0.0, "avg_logprob": -0.1448227629369619, "compression_ratio": 1.702928870292887, "no_speech_prob": 0.07470125705003738}, {"id": 4, "seek": 0, "start": 16.080000000000002, "end": 19.88, "text": " You can implement it like this, with two for loops and a conditional swap.", "tokens": [51168, 509, 393, 4445, 309, 411, 341, 11, 365, 732, 337, 16121, 293, 257, 27708, 18135, 13, 51358], "temperature": 0.0, "avg_logprob": -0.1448227629369619, "compression_ratio": 1.702928870292887, "no_speech_prob": 0.07470125705003738}, {"id": 5, "seek": 0, "start": 19.88, "end": 25.36, "text": " The outer loop creates n phases and in each phase we run the inner loop to find the next", "tokens": [51358, 440, 10847, 6367, 7829, 297, 18764, 293, 294, 1184, 5574, 321, 1190, 264, 7284, 6367, 281, 915, 264, 958, 51632], "temperature": 0.0, "avg_logprob": -0.1448227629369619, "compression_ratio": 1.702928870292887, "no_speech_prob": 0.07470125705003738}, {"id": 6, "seek": 0, "start": 25.36, "end": 27.0, "text": " smallest number.", "tokens": [51632, 16998, 1230, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1448227629369619, "compression_ratio": 1.702928870292887, "no_speech_prob": 0.07470125705003738}, {"id": 7, "seek": 2700, "start": 27.0, "end": 31.240000000000002, "text": " And as for simplicity, I learned that there are two for loops and just one comparison", "tokens": [50364, 400, 382, 337, 25632, 11, 286, 3264, 300, 456, 366, 732, 337, 16121, 293, 445, 472, 9660, 50576], "temperature": 0.0, "avg_logprob": -0.18583530461022613, "compression_ratio": 1.610236220472441, "no_speech_prob": 0.0012253783643245697}, {"id": 8, "seek": 2700, "start": 31.240000000000002, "end": 33.88, "text": " between ai and aj.", "tokens": [50576, 1296, 9783, 293, 17680, 13, 50708], "temperature": 0.0, "avg_logprob": -0.18583530461022613, "compression_ratio": 1.610236220472441, "no_speech_prob": 0.0012253783643245697}, {"id": 9, "seek": 2700, "start": 33.88, "end": 37.24, "text": " But what about this inner loop where j starts from i plus 1?", "tokens": [50708, 583, 437, 466, 341, 7284, 6367, 689, 361, 3719, 490, 741, 1804, 502, 30, 50876], "temperature": 0.0, "avg_logprob": -0.18583530461022613, "compression_ratio": 1.610236220472441, "no_speech_prob": 0.0012253783643245697}, {"id": 10, "seek": 2700, "start": 37.24, "end": 39.32, "text": " That seems a bit error prone.", "tokens": [50876, 663, 2544, 257, 857, 6713, 25806, 13, 50980], "temperature": 0.0, "avg_logprob": -0.18583530461022613, "compression_ratio": 1.610236220472441, "no_speech_prob": 0.0012253783643245697}, {"id": 11, "seek": 2700, "start": 39.32, "end": 45.400000000000006, "text": " So maybe we could improve it by letting it run from 1 rather than i plus 1.", "tokens": [50980, 407, 1310, 321, 727, 3470, 309, 538, 8295, 309, 1190, 490, 502, 2831, 813, 741, 1804, 502, 13, 51284], "temperature": 0.0, "avg_logprob": -0.18583530461022613, "compression_ratio": 1.610236220472441, "no_speech_prob": 0.0012253783643245697}, {"id": 12, "seek": 2700, "start": 45.400000000000006, "end": 47.8, "text": " Now it's just beautiful.", "tokens": [51284, 823, 309, 311, 445, 2238, 13, 51404], "temperature": 0.0, "avg_logprob": -0.18583530461022613, "compression_ratio": 1.610236220472441, "no_speech_prob": 0.0012253783643245697}, {"id": 13, "seek": 2700, "start": 47.8, "end": 49.32, "text": " Just look at the symmetry.", "tokens": [51404, 1449, 574, 412, 264, 25440, 13, 51480], "temperature": 0.0, "avg_logprob": -0.18583530461022613, "compression_ratio": 1.610236220472441, "no_speech_prob": 0.0012253783643245697}, {"id": 14, "seek": 2700, "start": 49.32, "end": 55.120000000000005, "text": " Two nested for loops from 1 to n and a nicely symmetric loop conditional swap inside.", "tokens": [51480, 4453, 15646, 292, 337, 16121, 490, 502, 281, 297, 293, 257, 9594, 32330, 6367, 27708, 18135, 1854, 13, 51770], "temperature": 0.0, "avg_logprob": -0.18583530461022613, "compression_ratio": 1.610236220472441, "no_speech_prob": 0.0012253783643245697}, {"id": 15, "seek": 5512, "start": 55.12, "end": 58.48, "text": " But the question is, does this actually still sort?", "tokens": [50364, 583, 264, 1168, 307, 11, 775, 341, 767, 920, 1333, 30, 50532], "temperature": 0.0, "avg_logprob": -0.22363140623448258, "compression_ratio": 1.3557046979865772, "no_speech_prob": 0.0012206140672788024}, {"id": 16, "seek": 5512, "start": 58.48, "end": 60.68, "text": " And if so, then why?", "tokens": [50532, 400, 498, 370, 11, 550, 983, 30, 50642], "temperature": 0.0, "avg_logprob": -0.22363140623448258, "compression_ratio": 1.3557046979865772, "no_speech_prob": 0.0012206140672788024}, {"id": 17, "seek": 5512, "start": 60.68, "end": 64.12, "text": " We think that's a great riddle, so go ahead and pause the video and think about it for", "tokens": [50642, 492, 519, 300, 311, 257, 869, 3973, 2285, 11, 370, 352, 2286, 293, 10465, 264, 960, 293, 519, 466, 309, 337, 50814], "temperature": 0.0, "avg_logprob": -0.22363140623448258, "compression_ratio": 1.3557046979865772, "no_speech_prob": 0.0012206140672788024}, {"id": 18, "seek": 5512, "start": 64.12, "end": 69.12, "text": " yourself.", "tokens": [50814, 1803, 13, 51064], "temperature": 0.0, "avg_logprob": -0.22363140623448258, "compression_ratio": 1.3557046979865772, "no_speech_prob": 0.0012206140672788024}, {"id": 19, "seek": 5512, "start": 69.12, "end": 71.08, "text": " Alright here comes the solution.", "tokens": [51064, 2798, 510, 1487, 264, 3827, 13, 51162], "temperature": 0.0, "avg_logprob": -0.22363140623448258, "compression_ratio": 1.3557046979865772, "no_speech_prob": 0.0012206140672788024}, {"id": 20, "seek": 7108, "start": 71.08, "end": 89.96, "text": " This is what the algorithm actually does.", "tokens": [50364, 639, 307, 437, 264, 9284, 767, 775, 13, 51308], "temperature": 0.0, "avg_logprob": -0.24380120171440972, "compression_ratio": 1.3076923076923077, "no_speech_prob": 0.025451859459280968}, {"id": 21, "seek": 7108, "start": 89.96, "end": 94.16, "text": " Okay so apparently this sorts, but in reverse order?", "tokens": [51308, 1033, 370, 7970, 341, 7527, 11, 457, 294, 9943, 1668, 30, 51518], "temperature": 0.0, "avg_logprob": -0.24380120171440972, "compression_ratio": 1.3076923076923077, "no_speech_prob": 0.025451859459280968}, {"id": 22, "seek": 7108, "start": 94.16, "end": 95.16, "text": " That's pretty weird.", "tokens": [51518, 663, 311, 1238, 3657, 13, 51568], "temperature": 0.0, "avg_logprob": -0.24380120171440972, "compression_ratio": 1.3076923076923077, "no_speech_prob": 0.025451859459280968}, {"id": 23, "seek": 7108, "start": 95.16, "end": 98.84, "text": " Let's go through the algorithm one more time together.", "tokens": [51568, 961, 311, 352, 807, 264, 9284, 472, 544, 565, 1214, 13, 51752], "temperature": 0.0, "avg_logprob": -0.24380120171440972, "compression_ratio": 1.3076923076923077, "no_speech_prob": 0.025451859459280968}, {"id": 24, "seek": 9884, "start": 98.84, "end": 104.2, "text": " In the first phase, when ai is 1, the algorithm is doing the same thing as selection sort,", "tokens": [50364, 682, 264, 700, 5574, 11, 562, 9783, 307, 502, 11, 264, 9284, 307, 884, 264, 912, 551, 382, 9450, 1333, 11, 50632], "temperature": 0.0, "avg_logprob": -0.1648810569276201, "compression_ratio": 1.6444444444444444, "no_speech_prob": 0.004374920856207609}, {"id": 25, "seek": 9884, "start": 104.2, "end": 107.92, "text": " so it finds the smallest number and it brings it to the left.", "tokens": [50632, 370, 309, 10704, 264, 16998, 1230, 293, 309, 5607, 309, 281, 264, 1411, 13, 50818], "temperature": 0.0, "avg_logprob": -0.1648810569276201, "compression_ratio": 1.6444444444444444, "no_speech_prob": 0.004374920856207609}, {"id": 26, "seek": 9884, "start": 107.92, "end": 111.92, "text": " That's kind of counterproductive since the algorithm will end up sorting in the opposite", "tokens": [50818, 663, 311, 733, 295, 5682, 14314, 20221, 1670, 264, 9284, 486, 917, 493, 32411, 294, 264, 6182, 51018], "temperature": 0.0, "avg_logprob": -0.1648810569276201, "compression_ratio": 1.6444444444444444, "no_speech_prob": 0.004374920856207609}, {"id": 27, "seek": 9884, "start": 111.92, "end": 114.16, "text": " order, but okay.", "tokens": [51018, 1668, 11, 457, 1392, 13, 51130], "temperature": 0.0, "avg_logprob": -0.1648810569276201, "compression_ratio": 1.6444444444444444, "no_speech_prob": 0.004374920856207609}, {"id": 28, "seek": 9884, "start": 114.16, "end": 126.4, "text": " In the following phases, we can finally see what's actually happening.", "tokens": [51130, 682, 264, 3480, 18764, 11, 321, 393, 2721, 536, 437, 311, 767, 2737, 13, 51742], "temperature": 0.0, "avg_logprob": -0.1648810569276201, "compression_ratio": 1.6444444444444444, "no_speech_prob": 0.004374920856207609}, {"id": 29, "seek": 9884, "start": 126.4, "end": 128.76, "text": " Let's stop the algorithm after 4 phases.", "tokens": [51742, 961, 311, 1590, 264, 9284, 934, 1017, 18764, 13, 51860], "temperature": 0.0, "avg_logprob": -0.1648810569276201, "compression_ratio": 1.6444444444444444, "no_speech_prob": 0.004374920856207609}, {"id": 30, "seek": 12876, "start": 128.76, "end": 133.88, "text": " At this point, the first 4 columns are sorted in reverse order and the last one of them", "tokens": [50364, 1711, 341, 935, 11, 264, 700, 1017, 13766, 366, 25462, 294, 9943, 1668, 293, 264, 1036, 472, 295, 552, 50620], "temperature": 0.0, "avg_logprob": -0.1145919782925496, "compression_ratio": 1.6900369003690037, "no_speech_prob": 0.029295863583683968}, {"id": 31, "seek": 12876, "start": 133.88, "end": 136.48, "text": " is the smallest in the entire array.", "tokens": [50620, 307, 264, 16998, 294, 264, 2302, 10225, 13, 50750], "temperature": 0.0, "avg_logprob": -0.1145919782925496, "compression_ratio": 1.6900369003690037, "no_speech_prob": 0.029295863583683968}, {"id": 32, "seek": 12876, "start": 136.48, "end": 138.07999999999998, "text": " And this is no coincidence.", "tokens": [50750, 400, 341, 307, 572, 22137, 13, 50830], "temperature": 0.0, "avg_logprob": -0.1145919782925496, "compression_ratio": 1.6900369003690037, "no_speech_prob": 0.029295863583683968}, {"id": 33, "seek": 12876, "start": 138.07999999999998, "end": 141.56, "text": " These two properties will hold in general.", "tokens": [50830, 1981, 732, 7221, 486, 1797, 294, 2674, 13, 51004], "temperature": 0.0, "avg_logprob": -0.1145919782925496, "compression_ratio": 1.6900369003690037, "no_speech_prob": 0.029295863583683968}, {"id": 34, "seek": 12876, "start": 141.56, "end": 146.79999999999998, "text": " If we look at the 5th phase, we start by comparing the red column to the already sorted sequence.", "tokens": [51004, 759, 321, 574, 412, 264, 1025, 392, 5574, 11, 321, 722, 538, 15763, 264, 2182, 7738, 281, 264, 1217, 25462, 8310, 13, 51266], "temperature": 0.0, "avg_logprob": -0.1145919782925496, "compression_ratio": 1.6900369003690037, "no_speech_prob": 0.029295863583683968}, {"id": 35, "seek": 12876, "start": 146.79999999999998, "end": 151.28, "text": " Once it becomes larger than the column at position j, we insert it into the sequence", "tokens": [51266, 3443, 309, 3643, 4833, 813, 264, 7738, 412, 2535, 361, 11, 321, 8969, 309, 666, 264, 8310, 51490], "temperature": 0.0, "avg_logprob": -0.1145919782925496, "compression_ratio": 1.6900369003690037, "no_speech_prob": 0.029295863583683968}, {"id": 36, "seek": 12876, "start": 151.28, "end": 157.07999999999998, "text": " like this and then we continue swapping the columns after it until j reaches i.", "tokens": [51490, 411, 341, 293, 550, 321, 2354, 1693, 10534, 264, 13766, 934, 309, 1826, 361, 14235, 741, 13, 51780], "temperature": 0.0, "avg_logprob": -0.1145919782925496, "compression_ratio": 1.6900369003690037, "no_speech_prob": 0.029295863583683968}, {"id": 37, "seek": 15708, "start": 157.08, "end": 159.72, "text": " This just shifts them by one to the right.", "tokens": [50364, 639, 445, 19201, 552, 538, 472, 281, 264, 558, 13, 50496], "temperature": 0.0, "avg_logprob": -0.10929756505148751, "compression_ratio": 1.7041198501872659, "no_speech_prob": 0.08497925102710724}, {"id": 38, "seek": 15708, "start": 159.72, "end": 164.20000000000002, "text": " So now we've successfully inserted the column into our sorted sequence.", "tokens": [50496, 407, 586, 321, 600, 10727, 27992, 264, 7738, 666, 527, 25462, 8310, 13, 50720], "temperature": 0.0, "avg_logprob": -0.10929756505148751, "compression_ratio": 1.7041198501872659, "no_speech_prob": 0.08497925102710724}, {"id": 39, "seek": 15708, "start": 164.20000000000002, "end": 168.32000000000002, "text": " And now we run the steps that were present in the original selection sort.", "tokens": [50720, 400, 586, 321, 1190, 264, 4439, 300, 645, 1974, 294, 264, 3380, 9450, 1333, 13, 50926], "temperature": 0.0, "avg_logprob": -0.10929756505148751, "compression_ratio": 1.7041198501872659, "no_speech_prob": 0.08497925102710724}, {"id": 40, "seek": 15708, "start": 168.32000000000002, "end": 173.0, "text": " And you can see that these steps do absolutely nothing because at this point, the column", "tokens": [50926, 400, 291, 393, 536, 300, 613, 4439, 360, 3122, 1825, 570, 412, 341, 935, 11, 264, 7738, 51160], "temperature": 0.0, "avg_logprob": -0.10929756505148751, "compression_ratio": 1.7041198501872659, "no_speech_prob": 0.08497925102710724}, {"id": 41, "seek": 15708, "start": 173.0, "end": 177.0, "text": " at position i is the smallest, so it'll never get swapped.", "tokens": [51160, 412, 2535, 741, 307, 264, 16998, 11, 370, 309, 603, 1128, 483, 50011, 13, 51360], "temperature": 0.0, "avg_logprob": -0.10929756505148751, "compression_ratio": 1.7041198501872659, "no_speech_prob": 0.08497925102710724}, {"id": 42, "seek": 15708, "start": 177.0, "end": 178.60000000000002, "text": " Let's look at one more phase.", "tokens": [51360, 961, 311, 574, 412, 472, 544, 5574, 13, 51440], "temperature": 0.0, "avg_logprob": -0.10929756505148751, "compression_ratio": 1.7041198501872659, "no_speech_prob": 0.08497925102710724}, {"id": 43, "seek": 15708, "start": 178.60000000000002, "end": 182.76000000000002, "text": " We first find the right place for the magenta column, then shift the rest of the sorted", "tokens": [51440, 492, 700, 915, 264, 558, 1081, 337, 264, 2258, 8938, 7738, 11, 550, 5513, 264, 1472, 295, 264, 25462, 51648], "temperature": 0.0, "avg_logprob": -0.10929756505148751, "compression_ratio": 1.7041198501872659, "no_speech_prob": 0.08497925102710724}, {"id": 44, "seek": 18276, "start": 182.76, "end": 189.23999999999998, "text": " sequence to the right and then no more swaps happen.", "tokens": [50364, 8310, 281, 264, 558, 293, 550, 572, 544, 1693, 2382, 1051, 13, 50688], "temperature": 0.0, "avg_logprob": -0.1453204305548417, "compression_ratio": 1.6200873362445414, "no_speech_prob": 0.008982782252132893}, {"id": 45, "seek": 18276, "start": 189.23999999999998, "end": 190.48, "text": " Nice.", "tokens": [50688, 5490, 13, 50750], "temperature": 0.0, "avg_logprob": -0.1453204305548417, "compression_ratio": 1.6200873362445414, "no_speech_prob": 0.008982782252132893}, {"id": 46, "seek": 18276, "start": 190.48, "end": 194.88, "text": " And all of this complexity comes just from these 4 simple lines of code.", "tokens": [50750, 400, 439, 295, 341, 14024, 1487, 445, 490, 613, 1017, 2199, 3876, 295, 3089, 13, 50970], "temperature": 0.0, "avg_logprob": -0.1453204305548417, "compression_ratio": 1.6200873362445414, "no_speech_prob": 0.008982782252132893}, {"id": 47, "seek": 18276, "start": 194.88, "end": 200.84, "text": " Here comes the final iteration and then we're done.", "tokens": [50970, 1692, 1487, 264, 2572, 24784, 293, 550, 321, 434, 1096, 13, 51268], "temperature": 0.0, "avg_logprob": -0.1453204305548417, "compression_ratio": 1.6200873362445414, "no_speech_prob": 0.008982782252132893}, {"id": 48, "seek": 18276, "start": 200.84, "end": 205.04, "text": " So we were actually pulling your leg a bit when we said this was a variation on selection", "tokens": [51268, 407, 321, 645, 767, 8407, 428, 1676, 257, 857, 562, 321, 848, 341, 390, 257, 12990, 322, 9450, 51478], "temperature": 0.0, "avg_logprob": -0.1453204305548417, "compression_ratio": 1.6200873362445414, "no_speech_prob": 0.008982782252132893}, {"id": 49, "seek": 18276, "start": 205.04, "end": 206.04, "text": " sort.", "tokens": [51478, 1333, 13, 51528], "temperature": 0.0, "avg_logprob": -0.1453204305548417, "compression_ratio": 1.6200873362445414, "no_speech_prob": 0.008982782252132893}, {"id": 50, "seek": 18276, "start": 206.04, "end": 211.6, "text": " In fact, if we throw away the useless selection sort part of the algorithm and only let the", "tokens": [51528, 682, 1186, 11, 498, 321, 3507, 1314, 264, 14115, 9450, 1333, 644, 295, 264, 9284, 293, 787, 718, 264, 51806], "temperature": 0.0, "avg_logprob": -0.1453204305548417, "compression_ratio": 1.6200873362445414, "no_speech_prob": 0.008982782252132893}, {"id": 51, "seek": 21160, "start": 211.6, "end": 217.64, "text": " inner loop run from one to i, we surprisingly get what's known as insertion sort, a very", "tokens": [50364, 7284, 6367, 1190, 490, 472, 281, 741, 11, 321, 17600, 483, 437, 311, 2570, 382, 8969, 313, 1333, 11, 257, 588, 50666], "temperature": 0.0, "avg_logprob": -0.11678964533704392, "compression_ratio": 1.7124463519313304, "no_speech_prob": 0.010983453132212162}, {"id": 52, "seek": 21160, "start": 217.64, "end": 219.44, "text": " different algorithm.", "tokens": [50666, 819, 9284, 13, 50756], "temperature": 0.0, "avg_logprob": -0.11678964533704392, "compression_ratio": 1.7124463519313304, "no_speech_prob": 0.010983453132212162}, {"id": 53, "seek": 21160, "start": 219.44, "end": 225.32, "text": " So our beautiful and simple algorithm is actually under the hood, two basic sorting algorithms", "tokens": [50756, 407, 527, 2238, 293, 2199, 9284, 307, 767, 833, 264, 13376, 11, 732, 3875, 32411, 14642, 51050], "temperature": 0.0, "avg_logprob": -0.11678964533704392, "compression_ratio": 1.7124463519313304, "no_speech_prob": 0.010983453132212162}, {"id": 54, "seek": 21160, "start": 225.32, "end": 227.48, "text": " stitched into one.", "tokens": [51050, 48992, 666, 472, 13, 51158], "temperature": 0.0, "avg_logprob": -0.11678964533704392, "compression_ratio": 1.7124463519313304, "no_speech_prob": 0.010983453132212162}, {"id": 55, "seek": 21160, "start": 227.48, "end": 232.56, "text": " Each inner loop first has an insertion sort part followed by a selection sort part.", "tokens": [51158, 6947, 7284, 6367, 700, 575, 364, 8969, 313, 1333, 644, 6263, 538, 257, 9450, 1333, 644, 13, 51412], "temperature": 0.0, "avg_logprob": -0.11678964533704392, "compression_ratio": 1.7124463519313304, "no_speech_prob": 0.010983453132212162}, {"id": 56, "seek": 21160, "start": 232.56, "end": 237.72, "text": " But they're combined in such a way that only the insertion sort is actually doing anything.", "tokens": [51412, 583, 436, 434, 9354, 294, 1270, 257, 636, 300, 787, 264, 8969, 313, 1333, 307, 767, 884, 1340, 13, 51670], "temperature": 0.0, "avg_logprob": -0.11678964533704392, "compression_ratio": 1.7124463519313304, "no_speech_prob": 0.010983453132212162}, {"id": 57, "seek": 23772, "start": 237.72, "end": 242.24, "text": " The only drawback is that it sorts in reverse order, but we can simply fix that by flipping", "tokens": [50364, 440, 787, 2642, 3207, 307, 300, 309, 7527, 294, 9943, 1668, 11, 457, 321, 393, 2935, 3191, 300, 538, 26886, 50590], "temperature": 0.0, "avg_logprob": -0.1886173816437417, "compression_ratio": 1.4057971014492754, "no_speech_prob": 0.01015418954193592}, {"id": 58, "seek": 23772, "start": 242.24, "end": 244.92, "text": " the comparison sign.", "tokens": [50590, 264, 9660, 1465, 13, 50724], "temperature": 0.0, "avg_logprob": -0.1886173816437417, "compression_ratio": 1.4057971014492754, "no_speech_prob": 0.01015418954193592}, {"id": 59, "seek": 23772, "start": 244.92, "end": 249.84, "text": " And now we are looking at what could well be the simplest sorting algorithm ever.", "tokens": [50724, 400, 586, 321, 366, 1237, 412, 437, 727, 731, 312, 264, 22811, 32411, 9284, 1562, 13, 50970], "temperature": 0.0, "avg_logprob": -0.1886173816437417, "compression_ratio": 1.4057971014492754, "no_speech_prob": 0.01015418954193592}], "language": "en"}