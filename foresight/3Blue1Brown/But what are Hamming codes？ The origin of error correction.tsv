start	end	text
0	8640	Have you ever wondered how it's possible to scratch a CD or a DVD and still have it
8640	10880	play back whatever it's storing?
10880	15260	The scratch really does affect the ones and zeros on the disc, so it reads off different
15260	20140	data from what was stored, but unless it's really scratched up, the bits that it reads
20140	26080	off are decoded into precisely the same file that was encoded onto it, a bit-for-bit copy,
26080	28400	despite all of those errors.
28400	32800	There is a whole pile of mathematical cleverness that allows us to store data, and just as
32800	37080	importantly to transmit data, in a way that's resilient to errors.
37080	41440	Well, okay, actually it doesn't take that much cleverness to come up with a way to do
41440	42440	this.
42440	47680	Any file, whether it's a video or sound or text, some code, an image, whatever, is
47680	50960	ultimately some sequence of ones and zeros.
50960	55340	And a simple strategy to correct any bit that gets flipped would be to store three copies
55340	57780	of each bit.
57780	62140	Then the machine reading this file could compare these three copies, and always take the best
62140	67420	two out of three whenever there's a discrepancy.
67420	72300	But what that means is using two-thirds of your space for redundancy, and even then,
72300	76040	for all of that space given up, there's no strong guarantee about what happens if more
76040	78120	than one bit gets flipped.
78120	81940	The much more interesting question is how to make it so that errors can be corrected
81940	84740	while giving up as little space as possible.
84740	88240	For example, using the method that you'll learn about this video, you could store your
88240	95840	data in 256-bit blocks, where each block uses 9 bits, 9, to act as a kind of redundancy,
95840	101000	and the other 247 bits are free to carry whatever meaningful message or data that you want.
101000	104720	And it will still be the case that if any bit gets flipped here, just by looking at
104720	109640	this block and nothing more, a machine will be able to identify that there was an error
109640	113120	and precisely where it was so that it knows how to correct it.
113120	115540	And honestly, that feels like magic.
115540	119380	And for this particular scheme, if two bits get flipped, the machine will at least be
119380	123180	able to detect that there were two errors, though it won't know how to fix them.
123180	128140	We'll talk a little bit later about how this scales for blocks with different sizes.
128140	132740	Methods that let you correct errors like this are known, reasonably enough, as error correction
132740	133860	codes.
133860	138220	For the better part of the last century, this field has been a really rich source of surprisingly
138220	142980	deep math that gets incorporated into devices we use every day.
142980	147680	The goal here is to give you a very thorough understanding of one of the earliest examples,
147680	149640	known as a Hamming code.
149640	152640	And by the way, the way I'm thinking about the structure of this video is less about
152640	157080	explaining it as directly as possible, and more a matter of prompting you to invent it
157080	160240	for yourself, with a little gentle guidance here and there.
160240	163920	So when you feel like you see where it's going at some point, take that moment to pause,
163920	167160	actively predict what the scheme is going to be before I tell you.
167160	171520	Also, if you want your understanding to get down to the hardware level, Ben Eater has
171540	175180	made a video in conjunction with this one showing you how to actually implement Hamming
175180	178540	codes on breadboards, which is extremely satisfying.
178540	183020	Now, you should know, Hamming codes are not as widely used as more modern codes, like
183020	187180	the Reed Solomon algorithm, but there is a certain magic to the contrast between just
187180	192100	how impossible this task feels at the start, and how utterly reasonable it seems once you
192100	194220	learn about Hamming.
194220	199300	The basic principle of error correction is that in a vast space of all possible messages,
199300	203920	only some subset are going to be considered valid messages, as in analogy, think about
203920	209080	correctly spelled words versus incorrectly spelled words.
209080	213320	Whenever a valid message gets altered, the receiver is responsible for correcting what
213320	218480	they see back to the nearest valid neighbor, as you might do with a typo.
218480	223120	Coming up with a concrete algorithm to efficiently categorize messages like this, though, takes
223120	227160	a certain cleverness.
227160	232060	The story begins in the 1940s, when a young Richard Hamming was working for Bell Labs,
232060	235900	and some of his work involved using a very big, expensive punch card computer that he
235900	237460	had only limited access to.
237460	241140	And the programs he kept putting through it kept failing, because every now and then
241140	243180	a bit would get misread.
243180	247140	Frustration being the crucible of invention, he got so fed up that he invented the world's
247140	249260	first error correction code.
249260	252900	There are many different ways to frame Hamming codes, but as a first pass, we're going
252900	256620	to go through it the way that Hamming himself thought about them.
256620	261920	Let's use an example that's simple, but not too simple, a block of 16 bits.
261920	265720	We'll number the positions of these bits from 0 up to 15.
265720	270320	The actual data that we want to store is only going to make up 12 of these bits, while four
270320	273960	of the positions are going to be reserved as a kind of redundancy.
273960	278160	The word redundant here doesn't simply mean copy, after all, those four bits don't give
278160	280720	us enough room to blindly copy the data.
280720	285160	Instead, they'll need to be a much more nuanced and clever kind of redundancy, not adding
285160	288760	any new information, but adding resilience.
288760	292340	You might expect these four special bits to come nicely packaged together, maybe at the
292340	296100	end or something like that, but as you'll see, having them sit in positions which are
296100	300340	powers of two allows for something that's really elegant by the end.
300340	304580	It also might give you a little hint about how this scales for larger blocks.
304580	309220	Also, technically it ends up being only 11 bits of data, you'll find there's a mild
309220	314280	nuance for what goes on at position zero, but don't worry about that for now.
314280	318500	Like any error correction algorithm, this will involve two players, a sender, who's
318500	322620	responsible for setting these four special bits, and then a receiver, who's responsible
322620	326380	for performing some kind of check and then correcting the errors.
326380	330060	Of course, the word sender and receiver really refer to machines or software that's doing
330060	334060	all the checks, and the idea of a message is meant really broadly, to include things
334060	335500	like storage.
335500	339380	After all, storing data is the same thing as sending a message just from the past to
339380	342660	the future, instead of from one place to another.
342660	346920	So that's the setup, but before we can dive in, we need to talk about a related idea which
346920	351160	was fresh on Hemming's mind in the time of his discovery, a method which lets you
351160	357280	detect any single bit errors, but not to correct them, known in the business as a parity check.
357280	361280	For a parity check, we separate out only one single bit that the sender is responsible
361280	364920	for tuning, and the rest are free to carry a message.
364920	369600	The only job of this special bit is to make sure that the total number of ones in the
369600	372080	message is an even number.
372080	376580	So for example, right now that total number of ones is 7, that's odd, so the sender
376580	380940	needs to flip that special bit to be a 1, making the count even.
380940	385300	But if the block had already started off with an even number of ones, then this special bit
385300	387460	would have been kept at a 0.
387460	391620	This is pretty simple, deceptively simple, but it's an incredibly elegant way to distill
391620	397180	the idea of change anywhere in a message to be reflected in a single bit of information.
397440	403640	Notice, if any bit of this message gets flipped, either from 0 to 1 or 1 to 0, it changes the
403640	408080	total count of ones from being even to being odd.
408080	411960	So if you're the receiver, you look at this message and you see an odd number of ones,
411960	416560	you can know, for sure, that some error has occurred, even though you might have no idea
416560	418680	where it was.
418680	422480	In the jargon, whether a group of bits has an even or an odd number of ones is known
422480	424920	as its parity.
424920	429140	You could also use numbers and say the parity is 0 or 1, which is typically more helpful
429140	433300	once you start doing math with the idea, and this special bit that the sender uses to control
433300	437980	the parity is called the parity bit.
437980	442420	And actually, we should be clear, if the receiver sees an odd parity, it doesn't necessarily
442420	447460	mean there was just one error, there might have been 3 errors or 5 or any other odd number,
447460	449500	but they can know for sure that it wasn't 0.
449500	454860	On the other hand, if there had been 2 errors, or any even number of errors, that final
454880	459200	count of ones would still be even, so the receiver can't have full confidence that
459200	463400	an even count necessarily means the message is error free.
463400	467880	You might complain that a message which gets messed up by only 2 bit flips is pretty weak,
467880	469800	and you would be absolutely right.
469800	474360	Keep in mind, though, there is no method for error detection, or correction, that could
474360	479760	give you 100% confidence that the message you receive is the one that the sender intended.
479760	483800	After all, enough random noise could always change one valid message into another valid
483820	485940	message just by pure chance.
485940	490540	Instead, the goal is to come up with a scheme that's robust up to a certain maximum number
490540	496500	of errors, or maybe to reduce the probability of a false positive like this.
496500	500940	Parity checks on their own are pretty weak, but by distilling the idea of change across
500940	505660	a full message down to a single bit, what they give us is a powerful building block
505660	508020	for more sophisticated schemes.
508020	512900	For example, as Hamming was searching for a way to identify where an error happened,
512920	516960	not just that it happened, his key insight was that if you apply some parity checks
516960	522080	not to the full message, but to certain carefully selected subsets, you can ask a more refined
522080	526880	series of questions that pin down the location of any single bit error.
526880	531280	The overall feeling is a bit like playing a game of 20 questions, asking yes or no queries
531280	534320	that chopped the space of possibilities in half.
534320	538880	For example, let's say we do a parity check just on these 8 bits, all of the odd numbered
538880	539880	positions.
540340	544580	Then if an error is detected, it gives the receiver a little more information about where
544580	549180	specifically the error is, namely that it's in an odd position.
549180	554340	If no error is detected, among those 8 bits, it either means there's no error at all,
554340	557260	or it's somewhere in the even positions.
557260	561540	You might think that limiting a parity check to half the bits makes it less effective,
561540	565460	but when it's done in conjunction with other well-chosen checks, it counter-intuitively
565460	567420	gives us something a lot more powerful.
567420	574420	To actually set up that parity check, remember, it requires earmarking some special bit that
574420	577040	has control for the parity of that full group.
577040	579800	Here, let's just choose position number one.
579800	583960	So for the example shown, the parity of these 8 bits is currently odd, so the sender is
583960	588200	responsible for toggling that parity bit, and now it's even.
588200	591000	This is only one out of four parity checks that we'll do.
591000	595080	The second check is going to be among the 8 bits on the right half of the grid, at least
595080	596880	as we've drawn it here.
596880	601740	This time we might use position number two as a parity bit, so these 8 bits already have
601740	607140	an even parity, and the sender can feel good leaving that bit number two unchanged.
607140	610940	Then on the other end, if the receiver checks the parity of this group, and they find that
610940	615700	it's odd, they'll know that the error is somewhere among these 8 bits on the right.
615700	621260	Otherwise, it means either there's no error, or the error is somewhere on the left half.
621260	624220	Or I guess there could have been two errors, but for right now we're going to assume that
624220	627080	there's at most one error in the entire block.
627080	629200	Things break down completely for more than that.
629200	632920	Here, before we look at the next two checks, take a moment to think about what these first
632920	635320	two allow us to do when you consider them together.
635320	640240	Let's say you detect an error among the odd columns, and among the right half.
640240	643940	It necessarily means the error is somewhere in the last column.
643940	648080	If there was no error in the odd column, but there was one in the right half, well that
648080	650240	tells you it's in the second to last column.
650420	654540	Likewise, if there is an error in the odd columns, but not in the right half, you know
654540	656580	that it's somewhere in the second column.
656580	660560	And then if neither of those two parity checks detects anything, it means the only place
660560	663780	that an error could be is in that leftmost column.
663780	666500	But it also might simply mean there's no error at all.
666500	670460	Which is all a rather belabored way to say that two parity checks let us pin down the
670460	671660	column.
671660	674020	From here, you can probably guess what follows.
674020	676100	We do basically the same thing, but for the rows.
676600	681560	There's going to be a parity check on the odd rows, using position 4 as a parity bit.
681560	685480	So in this example, that group already has an even parity, so bit 4 would be set to a
685480	686640	zero.
686640	691280	And finally, there's a parity check on the bottom two rows, using position 8 as a parity
691280	692280	bit.
692280	695840	In this case, it looks like the sender needs to turn that bit 8 on in order to give the
695840	697840	group even parity.
697840	701360	Just as the first two checks let us pin down the column, these next two let you pin down
701360	702980	the row.
702980	708360	As an example, imagine that during the transmission there's an error at, say, position 3.
708360	712600	Well this affects the first parity group, and it also affects the second parity group.
712600	716320	So the receiver knows that there's an error somewhere in that right column.
716320	721360	But it doesn't affect the third group, and it doesn't affect the fourth group.
721360	725440	And that lets the receiver pinpoint the error up to the first row, which necessarily means
725440	728640	position 3, so they can fix the error.
728640	732620	You might enjoy taking a moment to convince yourself that the answers to these four questions
732760	736760	really will always let you pin down a specific location, no matter where they turn out to
736760	737760	be.
737760	742040	In fact, the astute among you might even notice a connection between these questions
742040	743600	and binary counting.
743600	745400	And if you do, again let me emphasize.
745400	746400	Pause.
746400	750880	Try for yourself to draw the connection before I spoil it.
750880	755560	If you're wondering what happens if a parity bit itself gets affected, well, you can just
755560	756560	try it.
756560	760720	Take a moment to think about how any error among these four special bits is going to
760720	767460	be tracked down just like any other, with the same group of four questions.
767460	770540	It doesn't really matter, since at the end of the day what we want is to protect the
770540	771540	message bits.
771540	773660	The error correction bits are just riding along.
773660	777140	But protecting those bits as well is something that naturally falls out of this scheme as
777140	779300	a byproduct.
779300	782420	You might also enjoy anticipating how this scales.
782420	788060	If we used a block of size 256 bits, for example, in order to pin down a location, you need
788060	795720	only eight, yes or no questions, to binary search your way down to some specific spot.
795720	799720	And remember, each question requires giving up only a single bit to set the appropriate
799720	803360	parity check.
803360	807000	Some of you may already see it, but we'll talk later about the systematic way to find
807000	809920	what these questions are in just a minute or two.
809920	813440	Hopefully this sketch is enough to appreciate the efficiency of what we're developing
813440	814440	here.
814440	818380	Interesting, except for those eight highlighted parity bits, can be whatever you want it
818380	821740	to be, carrying whatever message or data you want.
821740	825300	The eight bits are redundant in the sense that they're completely determined by the
825300	829300	rest of the message, but it's in a much smarter way than simply copying the message
829300	833660	as a whole.
833660	838220	And still, for so little given up, you would be able to identify and fix any single bit
838220	839220	error.
839220	840740	Well, almost.
840740	845880	Okay, so the one problem here is that if none of the four parity checks detect an error,
845880	850200	meaning that the specially selected subsets of eight bits all have even parodies, just
850200	855560	like the sender intended, then it either means there was no error at all, or it narrows us
855560	857800	down into position zero.
857800	863080	You see, with four yes or no questions, we have 16 possible outcomes for our parity checks.
863080	867960	And at first, that feels perfect for pinpointing one out of 16 positions in the block, but
867960	873020	you also need to communicate a 17th outcome, the no error condition.
873020	875360	The solution here is actually pretty simple.
875360	877860	Just forget about that zeroth bit entirely.
877860	881900	So when we do our four parity checks and we see that they're all even, it unambiguously
881900	884300	means that there is no error.
884300	889300	What that means is rather than working with a 16-bit block, we work with a 15-bit block,
889300	894060	where 11 of the bits are free to carry a message and four of them are there for redundancy.
894060	898400	And with that, we now have what people in the business would prefer to as a 15-11 hamming
898400	899920	code.
899920	903880	That said, it is nice to have a block size that's a clean power of two, and there's
903880	907440	a clever way that we can keep that zeroth bit around and get it to do a little extra
907440	908880	work for us.
908880	913560	If we use it as a parity bit across the whole block, it lets us actually detect, even though
913560	916280	we can't correct, two-bit errors.
916280	917440	Here's how it works.
917440	921760	After setting those four special error correcting bits, we set that zeroth one so that the parity
921760	925460	of the full block is even, just like a normal parity check.
925460	929860	Now, if there's a single bit error, then the parity of the full block toggles to be
929860	933980	odd, but we would catch that anyway thanks to the four error correcting checks.
933980	938100	However, if there's two errors, then the overall parity is going to toggle back to
938100	942660	being even, but the receiver would still see that there's been at least some error because
942660	945820	of what's going on with those four usual parity checks.
945820	949780	So if they notice an even parity overall, but something non-zero happening with the
949780	953600	other checks, it tells them there were at least two errors.
953600	954600	Isn't that clever?
954600	958520	Even though we can't correct those two-bit errors, just by putting that one little bothersome
958520	962360	zeroth bit back to work, it lets us detect them.
962360	963520	This is pretty standard.
963520	966560	It's known as an extended hamming code.
966560	970920	Technically speaking, you now have a full description of what a hamming code does, at
970920	973600	least for the example of a 16-bit block.
973600	977320	But I think you'll find it more satisfying to check your understanding and solidify everything
977320	982060	up to this point by doing one full example from start to finish yourself.
982060	985100	I'll step through it with you though, so you can check yourself.
985100	989060	To set up a message, whether that's a literal message that you're translating over space
989060	994140	or some data that you want to store over time, the first step is to divide it up into 11-bit
994140	995700	chunks.
995700	1000380	Each chunk is going to get packaged into an error-resistant 16-bit block.
1000380	1003740	So let's take this one as an example and actually work it out.
1003740	1005380	Go ahead, actually do it.
1005380	1009320	Pause and try putting together this block.
1009320	1014480	Okay, you ready?
1014480	1018520	Remember, position 0 along with the other powers of 2 are reserved for error correction
1018520	1019520	duty.
1019520	1025760	So you start by placing the message bits in all of the remaining spots, in order.
1025760	1029720	You need this group to have an even parity, which it already does, so you should have
1029720	1033160	set that parity bit in position 1 to be a 0.
1033160	1037820	The next group starts off with an odd parity, so you should have set its parity bit to be
1037820	1039320	1.
1039320	1043780	The group after that starts with an odd parity, so again, you should have set its parity bit
1043780	1044780	to 1.
1044780	1049540	And the final group also has an odd parity, meaning we set that bit in position 8 to be
1049540	1051540	a 1.
1051540	1056300	And then as the final step, the full block now has an even parity, meaning that you can
1056300	1061540	set that bit number 0, the overarching parity bit, to be 0.
1061800	1065800	So as this block is sent off, the parity of the four special subsets and the block as
1065800	1069000	a whole will all be even, or 0.
1069000	1073640	As the second part of the exercise, let's have you play the role of the receiver.
1073640	1077600	Of course, that would mean you don't already know what this message is, maybe some of you
1077600	1080220	memorized it, but let's assume that you haven't.
1080220	1085560	What I'm going to do is change either 0, 1, or 2 of the bits in that block, and then
1085560	1088360	ask you to figure out what it is that I did.
1088360	1091360	So again, pause, and try working it out.
1100060	1104100	Okay, so you as the receiver now check the first parity group, and you can see that it's
1104100	1105100	even.
1105100	1109820	So any error that exists would have to be in an even column.
1109820	1114500	The next check gives us an odd number, telling us both that there's at least one error,
1114500	1118760	and narrowing us down into this specific column.
1118760	1122900	The third check is even, chopping down the possibilities even further.
1122900	1126800	And the last parity check is odd, telling us there's an error somewhere in the bottom,
1126800	1131720	which by now we can see must be in position number 10.
1131720	1136120	What's more, the parity of the whole block is odd, giving us confidence that there was
1136120	1138200	one flip and not two.
1138200	1141600	If it's three or more, all bets are off.
1141600	1146540	After correcting that bit number 10, pulling out the 11 bits that were not used for correction
1146540	1151620	gives us the relevant segment of the original message, which if you rewind and compare is
1151620	1156140	indeed exactly what we started the example with.
1156140	1159260	And now that you know how to do all this by hand, I'd like to show you how you can carry
1159260	1163940	out the core part of all of this logic with a single line of Python code.
1163940	1168380	You see, what I haven't told you yet is just how elegant this algorithm really is, how
1168380	1172400	simple it is to get a machine to point to the position of an error, how to systematically
1172400	1177680	scale it, and how we can frame all of this as one single operation rather than multiple
1177680	1179600	separate parity checks.
1179600	1181640	To see what I mean, come join me in part two.
