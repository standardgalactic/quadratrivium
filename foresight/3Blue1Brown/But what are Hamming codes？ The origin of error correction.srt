1
00:00:00,000 --> 00:00:08,640
Have you ever wondered how it's possible to scratch a CD or a DVD and still have it

2
00:00:08,640 --> 00:00:10,880
play back whatever it's storing?

3
00:00:10,880 --> 00:00:15,260
The scratch really does affect the ones and zeros on the disc, so it reads off different

4
00:00:15,260 --> 00:00:20,140
data from what was stored, but unless it's really scratched up, the bits that it reads

5
00:00:20,140 --> 00:00:26,080
off are decoded into precisely the same file that was encoded onto it, a bit-for-bit copy,

6
00:00:26,080 --> 00:00:28,400
despite all of those errors.

7
00:00:28,400 --> 00:00:32,800
There is a whole pile of mathematical cleverness that allows us to store data, and just as

8
00:00:32,800 --> 00:00:37,080
importantly to transmit data, in a way that's resilient to errors.

9
00:00:37,080 --> 00:00:41,440
Well, okay, actually it doesn't take that much cleverness to come up with a way to do

10
00:00:41,440 --> 00:00:42,440
this.

11
00:00:42,440 --> 00:00:47,680
Any file, whether it's a video or sound or text, some code, an image, whatever, is

12
00:00:47,680 --> 00:00:50,960
ultimately some sequence of ones and zeros.

13
00:00:50,960 --> 00:00:55,340
And a simple strategy to correct any bit that gets flipped would be to store three copies

14
00:00:55,340 --> 00:00:57,780
of each bit.

15
00:00:57,780 --> 00:01:02,140
Then the machine reading this file could compare these three copies, and always take the best

16
00:01:02,140 --> 00:01:07,420
two out of three whenever there's a discrepancy.

17
00:01:07,420 --> 00:01:12,300
But what that means is using two-thirds of your space for redundancy, and even then,

18
00:01:12,300 --> 00:01:16,040
for all of that space given up, there's no strong guarantee about what happens if more

19
00:01:16,040 --> 00:01:18,120
than one bit gets flipped.

20
00:01:18,120 --> 00:01:21,940
The much more interesting question is how to make it so that errors can be corrected

21
00:01:21,940 --> 00:01:24,740
while giving up as little space as possible.

22
00:01:24,740 --> 00:01:28,240
For example, using the method that you'll learn about this video, you could store your

23
00:01:28,240 --> 00:01:35,840
data in 256-bit blocks, where each block uses 9 bits, 9, to act as a kind of redundancy,

24
00:01:35,840 --> 00:01:41,000
and the other 247 bits are free to carry whatever meaningful message or data that you want.

25
00:01:41,000 --> 00:01:44,720
And it will still be the case that if any bit gets flipped here, just by looking at

26
00:01:44,720 --> 00:01:49,640
this block and nothing more, a machine will be able to identify that there was an error

27
00:01:49,640 --> 00:01:53,120
and precisely where it was so that it knows how to correct it.

28
00:01:53,120 --> 00:01:55,540
And honestly, that feels like magic.

29
00:01:55,540 --> 00:01:59,380
And for this particular scheme, if two bits get flipped, the machine will at least be

30
00:01:59,380 --> 00:02:03,180
able to detect that there were two errors, though it won't know how to fix them.

31
00:02:03,180 --> 00:02:08,140
We'll talk a little bit later about how this scales for blocks with different sizes.

32
00:02:08,140 --> 00:02:12,740
Methods that let you correct errors like this are known, reasonably enough, as error correction

33
00:02:12,740 --> 00:02:13,860
codes.

34
00:02:13,860 --> 00:02:18,220
For the better part of the last century, this field has been a really rich source of surprisingly

35
00:02:18,220 --> 00:02:22,980
deep math that gets incorporated into devices we use every day.

36
00:02:22,980 --> 00:02:27,680
The goal here is to give you a very thorough understanding of one of the earliest examples,

37
00:02:27,680 --> 00:02:29,640
known as a Hamming code.

38
00:02:29,640 --> 00:02:32,640
And by the way, the way I'm thinking about the structure of this video is less about

39
00:02:32,640 --> 00:02:37,080
explaining it as directly as possible, and more a matter of prompting you to invent it

40
00:02:37,080 --> 00:02:40,240
for yourself, with a little gentle guidance here and there.

41
00:02:40,240 --> 00:02:43,920
So when you feel like you see where it's going at some point, take that moment to pause,

42
00:02:43,920 --> 00:02:47,160
actively predict what the scheme is going to be before I tell you.

43
00:02:47,160 --> 00:02:51,520
Also, if you want your understanding to get down to the hardware level, Ben Eater has

44
00:02:51,540 --> 00:02:55,180
made a video in conjunction with this one showing you how to actually implement Hamming

45
00:02:55,180 --> 00:02:58,540
codes on breadboards, which is extremely satisfying.

46
00:02:58,540 --> 00:03:03,020
Now, you should know, Hamming codes are not as widely used as more modern codes, like

47
00:03:03,020 --> 00:03:07,180
the Reed Solomon algorithm, but there is a certain magic to the contrast between just

48
00:03:07,180 --> 00:03:12,100
how impossible this task feels at the start, and how utterly reasonable it seems once you

49
00:03:12,100 --> 00:03:14,220
learn about Hamming.

50
00:03:14,220 --> 00:03:19,300
The basic principle of error correction is that in a vast space of all possible messages,

51
00:03:19,300 --> 00:03:23,920
only some subset are going to be considered valid messages, as in analogy, think about

52
00:03:23,920 --> 00:03:29,080
correctly spelled words versus incorrectly spelled words.

53
00:03:29,080 --> 00:03:33,320
Whenever a valid message gets altered, the receiver is responsible for correcting what

54
00:03:33,320 --> 00:03:38,480
they see back to the nearest valid neighbor, as you might do with a typo.

55
00:03:38,480 --> 00:03:43,120
Coming up with a concrete algorithm to efficiently categorize messages like this, though, takes

56
00:03:43,120 --> 00:03:47,160
a certain cleverness.

57
00:03:47,160 --> 00:03:52,060
The story begins in the 1940s, when a young Richard Hamming was working for Bell Labs,

58
00:03:52,060 --> 00:03:55,900
and some of his work involved using a very big, expensive punch card computer that he

59
00:03:55,900 --> 00:03:57,460
had only limited access to.

60
00:03:57,460 --> 00:04:01,140
And the programs he kept putting through it kept failing, because every now and then

61
00:04:01,140 --> 00:04:03,180
a bit would get misread.

62
00:04:03,180 --> 00:04:07,140
Frustration being the crucible of invention, he got so fed up that he invented the world's

63
00:04:07,140 --> 00:04:09,260
first error correction code.

64
00:04:09,260 --> 00:04:12,900
There are many different ways to frame Hamming codes, but as a first pass, we're going

65
00:04:12,900 --> 00:04:16,620
to go through it the way that Hamming himself thought about them.

66
00:04:16,620 --> 00:04:21,920
Let's use an example that's simple, but not too simple, a block of 16 bits.

67
00:04:21,920 --> 00:04:25,720
We'll number the positions of these bits from 0 up to 15.

68
00:04:25,720 --> 00:04:30,320
The actual data that we want to store is only going to make up 12 of these bits, while four

69
00:04:30,320 --> 00:04:33,960
of the positions are going to be reserved as a kind of redundancy.

70
00:04:33,960 --> 00:04:38,160
The word redundant here doesn't simply mean copy, after all, those four bits don't give

71
00:04:38,160 --> 00:04:40,720
us enough room to blindly copy the data.

72
00:04:40,720 --> 00:04:45,160
Instead, they'll need to be a much more nuanced and clever kind of redundancy, not adding

73
00:04:45,160 --> 00:04:48,760
any new information, but adding resilience.

74
00:04:48,760 --> 00:04:52,340
You might expect these four special bits to come nicely packaged together, maybe at the

75
00:04:52,340 --> 00:04:56,100
end or something like that, but as you'll see, having them sit in positions which are

76
00:04:56,100 --> 00:05:00,340
powers of two allows for something that's really elegant by the end.

77
00:05:00,340 --> 00:05:04,580
It also might give you a little hint about how this scales for larger blocks.

78
00:05:04,580 --> 00:05:09,220
Also, technically it ends up being only 11 bits of data, you'll find there's a mild

79
00:05:09,220 --> 00:05:14,280
nuance for what goes on at position zero, but don't worry about that for now.

80
00:05:14,280 --> 00:05:18,500
Like any error correction algorithm, this will involve two players, a sender, who's

81
00:05:18,500 --> 00:05:22,620
responsible for setting these four special bits, and then a receiver, who's responsible

82
00:05:22,620 --> 00:05:26,380
for performing some kind of check and then correcting the errors.

83
00:05:26,380 --> 00:05:30,060
Of course, the word sender and receiver really refer to machines or software that's doing

84
00:05:30,060 --> 00:05:34,060
all the checks, and the idea of a message is meant really broadly, to include things

85
00:05:34,060 --> 00:05:35,500
like storage.

86
00:05:35,500 --> 00:05:39,380
After all, storing data is the same thing as sending a message just from the past to

87
00:05:39,380 --> 00:05:42,660
the future, instead of from one place to another.

88
00:05:42,660 --> 00:05:46,920
So that's the setup, but before we can dive in, we need to talk about a related idea which

89
00:05:46,920 --> 00:05:51,160
was fresh on Hemming's mind in the time of his discovery, a method which lets you

90
00:05:51,160 --> 00:05:57,280
detect any single bit errors, but not to correct them, known in the business as a parity check.

91
00:05:57,280 --> 00:06:01,280
For a parity check, we separate out only one single bit that the sender is responsible

92
00:06:01,280 --> 00:06:04,920
for tuning, and the rest are free to carry a message.

93
00:06:04,920 --> 00:06:09,600
The only job of this special bit is to make sure that the total number of ones in the

94
00:06:09,600 --> 00:06:12,080
message is an even number.

95
00:06:12,080 --> 00:06:16,580
So for example, right now that total number of ones is 7, that's odd, so the sender

96
00:06:16,580 --> 00:06:20,940
needs to flip that special bit to be a 1, making the count even.

97
00:06:20,940 --> 00:06:25,300
But if the block had already started off with an even number of ones, then this special bit

98
00:06:25,300 --> 00:06:27,460
would have been kept at a 0.

99
00:06:27,460 --> 00:06:31,620
This is pretty simple, deceptively simple, but it's an incredibly elegant way to distill

100
00:06:31,620 --> 00:06:37,180
the idea of change anywhere in a message to be reflected in a single bit of information.

101
00:06:37,440 --> 00:06:43,640
Notice, if any bit of this message gets flipped, either from 0 to 1 or 1 to 0, it changes the

102
00:06:43,640 --> 00:06:48,080
total count of ones from being even to being odd.

103
00:06:48,080 --> 00:06:51,960
So if you're the receiver, you look at this message and you see an odd number of ones,

104
00:06:51,960 --> 00:06:56,560
you can know, for sure, that some error has occurred, even though you might have no idea

105
00:06:56,560 --> 00:06:58,680
where it was.

106
00:06:58,680 --> 00:07:02,480
In the jargon, whether a group of bits has an even or an odd number of ones is known

107
00:07:02,480 --> 00:07:04,920
as its parity.

108
00:07:04,920 --> 00:07:09,140
You could also use numbers and say the parity is 0 or 1, which is typically more helpful

109
00:07:09,140 --> 00:07:13,300
once you start doing math with the idea, and this special bit that the sender uses to control

110
00:07:13,300 --> 00:07:17,980
the parity is called the parity bit.

111
00:07:17,980 --> 00:07:22,420
And actually, we should be clear, if the receiver sees an odd parity, it doesn't necessarily

112
00:07:22,420 --> 00:07:27,460
mean there was just one error, there might have been 3 errors or 5 or any other odd number,

113
00:07:27,460 --> 00:07:29,500
but they can know for sure that it wasn't 0.

114
00:07:29,500 --> 00:07:34,860
On the other hand, if there had been 2 errors, or any even number of errors, that final

115
00:07:34,880 --> 00:07:39,200
count of ones would still be even, so the receiver can't have full confidence that

116
00:07:39,200 --> 00:07:43,400
an even count necessarily means the message is error free.

117
00:07:43,400 --> 00:07:47,880
You might complain that a message which gets messed up by only 2 bit flips is pretty weak,

118
00:07:47,880 --> 00:07:49,800
and you would be absolutely right.

119
00:07:49,800 --> 00:07:54,360
Keep in mind, though, there is no method for error detection, or correction, that could

120
00:07:54,360 --> 00:07:59,760
give you 100% confidence that the message you receive is the one that the sender intended.

121
00:07:59,760 --> 00:08:03,800
After all, enough random noise could always change one valid message into another valid

122
00:08:03,820 --> 00:08:05,940
message just by pure chance.

123
00:08:05,940 --> 00:08:10,540
Instead, the goal is to come up with a scheme that's robust up to a certain maximum number

124
00:08:10,540 --> 00:08:16,500
of errors, or maybe to reduce the probability of a false positive like this.

125
00:08:16,500 --> 00:08:20,940
Parity checks on their own are pretty weak, but by distilling the idea of change across

126
00:08:20,940 --> 00:08:25,660
a full message down to a single bit, what they give us is a powerful building block

127
00:08:25,660 --> 00:08:28,020
for more sophisticated schemes.

128
00:08:28,020 --> 00:08:32,900
For example, as Hamming was searching for a way to identify where an error happened,

129
00:08:32,920 --> 00:08:36,960
not just that it happened, his key insight was that if you apply some parity checks

130
00:08:36,960 --> 00:08:42,080
not to the full message, but to certain carefully selected subsets, you can ask a more refined

131
00:08:42,080 --> 00:08:46,880
series of questions that pin down the location of any single bit error.

132
00:08:46,880 --> 00:08:51,280
The overall feeling is a bit like playing a game of 20 questions, asking yes or no queries

133
00:08:51,280 --> 00:08:54,320
that chopped the space of possibilities in half.

134
00:08:54,320 --> 00:08:58,880
For example, let's say we do a parity check just on these 8 bits, all of the odd numbered

135
00:08:58,880 --> 00:08:59,880
positions.

136
00:09:00,340 --> 00:09:04,580
Then if an error is detected, it gives the receiver a little more information about where

137
00:09:04,580 --> 00:09:09,180
specifically the error is, namely that it's in an odd position.

138
00:09:09,180 --> 00:09:14,340
If no error is detected, among those 8 bits, it either means there's no error at all,

139
00:09:14,340 --> 00:09:17,260
or it's somewhere in the even positions.

140
00:09:17,260 --> 00:09:21,540
You might think that limiting a parity check to half the bits makes it less effective,

141
00:09:21,540 --> 00:09:25,460
but when it's done in conjunction with other well-chosen checks, it counter-intuitively

142
00:09:25,460 --> 00:09:27,420
gives us something a lot more powerful.

143
00:09:27,420 --> 00:09:34,420
To actually set up that parity check, remember, it requires earmarking some special bit that

144
00:09:34,420 --> 00:09:37,040
has control for the parity of that full group.

145
00:09:37,040 --> 00:09:39,800
Here, let's just choose position number one.

146
00:09:39,800 --> 00:09:43,960
So for the example shown, the parity of these 8 bits is currently odd, so the sender is

147
00:09:43,960 --> 00:09:48,200
responsible for toggling that parity bit, and now it's even.

148
00:09:48,200 --> 00:09:51,000
This is only one out of four parity checks that we'll do.

149
00:09:51,000 --> 00:09:55,080
The second check is going to be among the 8 bits on the right half of the grid, at least

150
00:09:55,080 --> 00:09:56,880
as we've drawn it here.

151
00:09:56,880 --> 00:10:01,740
This time we might use position number two as a parity bit, so these 8 bits already have

152
00:10:01,740 --> 00:10:07,140
an even parity, and the sender can feel good leaving that bit number two unchanged.

153
00:10:07,140 --> 00:10:10,940
Then on the other end, if the receiver checks the parity of this group, and they find that

154
00:10:10,940 --> 00:10:15,700
it's odd, they'll know that the error is somewhere among these 8 bits on the right.

155
00:10:15,700 --> 00:10:21,260
Otherwise, it means either there's no error, or the error is somewhere on the left half.

156
00:10:21,260 --> 00:10:24,220
Or I guess there could have been two errors, but for right now we're going to assume that

157
00:10:24,220 --> 00:10:27,080
there's at most one error in the entire block.

158
00:10:27,080 --> 00:10:29,200
Things break down completely for more than that.

159
00:10:29,200 --> 00:10:32,920
Here, before we look at the next two checks, take a moment to think about what these first

160
00:10:32,920 --> 00:10:35,320
two allow us to do when you consider them together.

161
00:10:35,320 --> 00:10:40,240
Let's say you detect an error among the odd columns, and among the right half.

162
00:10:40,240 --> 00:10:43,940
It necessarily means the error is somewhere in the last column.

163
00:10:43,940 --> 00:10:48,080
If there was no error in the odd column, but there was one in the right half, well that

164
00:10:48,080 --> 00:10:50,240
tells you it's in the second to last column.

165
00:10:50,420 --> 00:10:54,540
Likewise, if there is an error in the odd columns, but not in the right half, you know

166
00:10:54,540 --> 00:10:56,580
that it's somewhere in the second column.

167
00:10:56,580 --> 00:11:00,560
And then if neither of those two parity checks detects anything, it means the only place

168
00:11:00,560 --> 00:11:03,780
that an error could be is in that leftmost column.

169
00:11:03,780 --> 00:11:06,500
But it also might simply mean there's no error at all.

170
00:11:06,500 --> 00:11:10,460
Which is all a rather belabored way to say that two parity checks let us pin down the

171
00:11:10,460 --> 00:11:11,660
column.

172
00:11:11,660 --> 00:11:14,020
From here, you can probably guess what follows.

173
00:11:14,020 --> 00:11:16,100
We do basically the same thing, but for the rows.

174
00:11:16,600 --> 00:11:21,560
There's going to be a parity check on the odd rows, using position 4 as a parity bit.

175
00:11:21,560 --> 00:11:25,480
So in this example, that group already has an even parity, so bit 4 would be set to a

176
00:11:25,480 --> 00:11:26,640
zero.

177
00:11:26,640 --> 00:11:31,280
And finally, there's a parity check on the bottom two rows, using position 8 as a parity

178
00:11:31,280 --> 00:11:32,280
bit.

179
00:11:32,280 --> 00:11:35,840
In this case, it looks like the sender needs to turn that bit 8 on in order to give the

180
00:11:35,840 --> 00:11:37,840
group even parity.

181
00:11:37,840 --> 00:11:41,360
Just as the first two checks let us pin down the column, these next two let you pin down

182
00:11:41,360 --> 00:11:42,980
the row.

183
00:11:42,980 --> 00:11:48,360
As an example, imagine that during the transmission there's an error at, say, position 3.

184
00:11:48,360 --> 00:11:52,600
Well this affects the first parity group, and it also affects the second parity group.

185
00:11:52,600 --> 00:11:56,320
So the receiver knows that there's an error somewhere in that right column.

186
00:11:56,320 --> 00:12:01,360
But it doesn't affect the third group, and it doesn't affect the fourth group.

187
00:12:01,360 --> 00:12:05,440
And that lets the receiver pinpoint the error up to the first row, which necessarily means

188
00:12:05,440 --> 00:12:08,640
position 3, so they can fix the error.

189
00:12:08,640 --> 00:12:12,620
You might enjoy taking a moment to convince yourself that the answers to these four questions

190
00:12:12,760 --> 00:12:16,760
really will always let you pin down a specific location, no matter where they turn out to

191
00:12:16,760 --> 00:12:17,760
be.

192
00:12:17,760 --> 00:12:22,040
In fact, the astute among you might even notice a connection between these questions

193
00:12:22,040 --> 00:12:23,600
and binary counting.

194
00:12:23,600 --> 00:12:25,400
And if you do, again let me emphasize.

195
00:12:25,400 --> 00:12:26,400
Pause.

196
00:12:26,400 --> 00:12:30,880
Try for yourself to draw the connection before I spoil it.

197
00:12:30,880 --> 00:12:35,560
If you're wondering what happens if a parity bit itself gets affected, well, you can just

198
00:12:35,560 --> 00:12:36,560
try it.

199
00:12:36,560 --> 00:12:40,720
Take a moment to think about how any error among these four special bits is going to

200
00:12:40,720 --> 00:12:47,460
be tracked down just like any other, with the same group of four questions.

201
00:12:47,460 --> 00:12:50,540
It doesn't really matter, since at the end of the day what we want is to protect the

202
00:12:50,540 --> 00:12:51,540
message bits.

203
00:12:51,540 --> 00:12:53,660
The error correction bits are just riding along.

204
00:12:53,660 --> 00:12:57,140
But protecting those bits as well is something that naturally falls out of this scheme as

205
00:12:57,140 --> 00:12:59,300
a byproduct.

206
00:12:59,300 --> 00:13:02,420
You might also enjoy anticipating how this scales.

207
00:13:02,420 --> 00:13:08,060
If we used a block of size 256 bits, for example, in order to pin down a location, you need

208
00:13:08,060 --> 00:13:15,720
only eight, yes or no questions, to binary search your way down to some specific spot.

209
00:13:15,720 --> 00:13:19,720
And remember, each question requires giving up only a single bit to set the appropriate

210
00:13:19,720 --> 00:13:23,360
parity check.

211
00:13:23,360 --> 00:13:27,000
Some of you may already see it, but we'll talk later about the systematic way to find

212
00:13:27,000 --> 00:13:29,920
what these questions are in just a minute or two.

213
00:13:29,920 --> 00:13:33,440
Hopefully this sketch is enough to appreciate the efficiency of what we're developing

214
00:13:33,440 --> 00:13:34,440
here.

215
00:13:34,440 --> 00:13:38,380
Interesting, except for those eight highlighted parity bits, can be whatever you want it

216
00:13:38,380 --> 00:13:41,740
to be, carrying whatever message or data you want.

217
00:13:41,740 --> 00:13:45,300
The eight bits are redundant in the sense that they're completely determined by the

218
00:13:45,300 --> 00:13:49,300
rest of the message, but it's in a much smarter way than simply copying the message

219
00:13:49,300 --> 00:13:53,660
as a whole.

220
00:13:53,660 --> 00:13:58,220
And still, for so little given up, you would be able to identify and fix any single bit

221
00:13:58,220 --> 00:13:59,220
error.

222
00:13:59,220 --> 00:14:00,740
Well, almost.

223
00:14:00,740 --> 00:14:05,880
Okay, so the one problem here is that if none of the four parity checks detect an error,

224
00:14:05,880 --> 00:14:10,200
meaning that the specially selected subsets of eight bits all have even parodies, just

225
00:14:10,200 --> 00:14:15,560
like the sender intended, then it either means there was no error at all, or it narrows us

226
00:14:15,560 --> 00:14:17,800
down into position zero.

227
00:14:17,800 --> 00:14:23,080
You see, with four yes or no questions, we have 16 possible outcomes for our parity checks.

228
00:14:23,080 --> 00:14:27,960
And at first, that feels perfect for pinpointing one out of 16 positions in the block, but

229
00:14:27,960 --> 00:14:33,020
you also need to communicate a 17th outcome, the no error condition.

230
00:14:33,020 --> 00:14:35,360
The solution here is actually pretty simple.

231
00:14:35,360 --> 00:14:37,860
Just forget about that zeroth bit entirely.

232
00:14:37,860 --> 00:14:41,900
So when we do our four parity checks and we see that they're all even, it unambiguously

233
00:14:41,900 --> 00:14:44,300
means that there is no error.

234
00:14:44,300 --> 00:14:49,300
What that means is rather than working with a 16-bit block, we work with a 15-bit block,

235
00:14:49,300 --> 00:14:54,060
where 11 of the bits are free to carry a message and four of them are there for redundancy.

236
00:14:54,060 --> 00:14:58,400
And with that, we now have what people in the business would prefer to as a 15-11 hamming

237
00:14:58,400 --> 00:14:59,920
code.

238
00:14:59,920 --> 00:15:03,880
That said, it is nice to have a block size that's a clean power of two, and there's

239
00:15:03,880 --> 00:15:07,440
a clever way that we can keep that zeroth bit around and get it to do a little extra

240
00:15:07,440 --> 00:15:08,880
work for us.

241
00:15:08,880 --> 00:15:13,560
If we use it as a parity bit across the whole block, it lets us actually detect, even though

242
00:15:13,560 --> 00:15:16,280
we can't correct, two-bit errors.

243
00:15:16,280 --> 00:15:17,440
Here's how it works.

244
00:15:17,440 --> 00:15:21,760
After setting those four special error correcting bits, we set that zeroth one so that the parity

245
00:15:21,760 --> 00:15:25,460
of the full block is even, just like a normal parity check.

246
00:15:25,460 --> 00:15:29,860
Now, if there's a single bit error, then the parity of the full block toggles to be

247
00:15:29,860 --> 00:15:33,980
odd, but we would catch that anyway thanks to the four error correcting checks.

248
00:15:33,980 --> 00:15:38,100
However, if there's two errors, then the overall parity is going to toggle back to

249
00:15:38,100 --> 00:15:42,660
being even, but the receiver would still see that there's been at least some error because

250
00:15:42,660 --> 00:15:45,820
of what's going on with those four usual parity checks.

251
00:15:45,820 --> 00:15:49,780
So if they notice an even parity overall, but something non-zero happening with the

252
00:15:49,780 --> 00:15:53,600
other checks, it tells them there were at least two errors.

253
00:15:53,600 --> 00:15:54,600
Isn't that clever?

254
00:15:54,600 --> 00:15:58,520
Even though we can't correct those two-bit errors, just by putting that one little bothersome

255
00:15:58,520 --> 00:16:02,360
zeroth bit back to work, it lets us detect them.

256
00:16:02,360 --> 00:16:03,520
This is pretty standard.

257
00:16:03,520 --> 00:16:06,560
It's known as an extended hamming code.

258
00:16:06,560 --> 00:16:10,920
Technically speaking, you now have a full description of what a hamming code does, at

259
00:16:10,920 --> 00:16:13,600
least for the example of a 16-bit block.

260
00:16:13,600 --> 00:16:17,320
But I think you'll find it more satisfying to check your understanding and solidify everything

261
00:16:17,320 --> 00:16:22,060
up to this point by doing one full example from start to finish yourself.

262
00:16:22,060 --> 00:16:25,100
I'll step through it with you though, so you can check yourself.

263
00:16:25,100 --> 00:16:29,060
To set up a message, whether that's a literal message that you're translating over space

264
00:16:29,060 --> 00:16:34,140
or some data that you want to store over time, the first step is to divide it up into 11-bit

265
00:16:34,140 --> 00:16:35,700
chunks.

266
00:16:35,700 --> 00:16:40,380
Each chunk is going to get packaged into an error-resistant 16-bit block.

267
00:16:40,380 --> 00:16:43,740
So let's take this one as an example and actually work it out.

268
00:16:43,740 --> 00:16:45,380
Go ahead, actually do it.

269
00:16:45,380 --> 00:16:49,320
Pause and try putting together this block.

270
00:16:49,320 --> 00:16:54,480
Okay, you ready?

271
00:16:54,480 --> 00:16:58,520
Remember, position 0 along with the other powers of 2 are reserved for error correction

272
00:16:58,520 --> 00:16:59,520
duty.

273
00:16:59,520 --> 00:17:05,760
So you start by placing the message bits in all of the remaining spots, in order.

274
00:17:05,760 --> 00:17:09,720
You need this group to have an even parity, which it already does, so you should have

275
00:17:09,720 --> 00:17:13,160
set that parity bit in position 1 to be a 0.

276
00:17:13,160 --> 00:17:17,820
The next group starts off with an odd parity, so you should have set its parity bit to be

277
00:17:17,820 --> 00:17:19,320
1.

278
00:17:19,320 --> 00:17:23,780
The group after that starts with an odd parity, so again, you should have set its parity bit

279
00:17:23,780 --> 00:17:24,780
to 1.

280
00:17:24,780 --> 00:17:29,540
And the final group also has an odd parity, meaning we set that bit in position 8 to be

281
00:17:29,540 --> 00:17:31,540
a 1.

282
00:17:31,540 --> 00:17:36,300
And then as the final step, the full block now has an even parity, meaning that you can

283
00:17:36,300 --> 00:17:41,540
set that bit number 0, the overarching parity bit, to be 0.

284
00:17:41,800 --> 00:17:45,800
So as this block is sent off, the parity of the four special subsets and the block as

285
00:17:45,800 --> 00:17:49,000
a whole will all be even, or 0.

286
00:17:49,000 --> 00:17:53,640
As the second part of the exercise, let's have you play the role of the receiver.

287
00:17:53,640 --> 00:17:57,600
Of course, that would mean you don't already know what this message is, maybe some of you

288
00:17:57,600 --> 00:18:00,220
memorized it, but let's assume that you haven't.

289
00:18:00,220 --> 00:18:05,560
What I'm going to do is change either 0, 1, or 2 of the bits in that block, and then

290
00:18:05,560 --> 00:18:08,360
ask you to figure out what it is that I did.

291
00:18:08,360 --> 00:18:11,360
So again, pause, and try working it out.

292
00:18:20,060 --> 00:18:24,100
Okay, so you as the receiver now check the first parity group, and you can see that it's

293
00:18:24,100 --> 00:18:25,100
even.

294
00:18:25,100 --> 00:18:29,820
So any error that exists would have to be in an even column.

295
00:18:29,820 --> 00:18:34,500
The next check gives us an odd number, telling us both that there's at least one error,

296
00:18:34,500 --> 00:18:38,760
and narrowing us down into this specific column.

297
00:18:38,760 --> 00:18:42,900
The third check is even, chopping down the possibilities even further.

298
00:18:42,900 --> 00:18:46,800
And the last parity check is odd, telling us there's an error somewhere in the bottom,

299
00:18:46,800 --> 00:18:51,720
which by now we can see must be in position number 10.

300
00:18:51,720 --> 00:18:56,120
What's more, the parity of the whole block is odd, giving us confidence that there was

301
00:18:56,120 --> 00:18:58,200
one flip and not two.

302
00:18:58,200 --> 00:19:01,600
If it's three or more, all bets are off.

303
00:19:01,600 --> 00:19:06,540
After correcting that bit number 10, pulling out the 11 bits that were not used for correction

304
00:19:06,540 --> 00:19:11,620
gives us the relevant segment of the original message, which if you rewind and compare is

305
00:19:11,620 --> 00:19:16,140
indeed exactly what we started the example with.

306
00:19:16,140 --> 00:19:19,260
And now that you know how to do all this by hand, I'd like to show you how you can carry

307
00:19:19,260 --> 00:19:23,940
out the core part of all of this logic with a single line of Python code.

308
00:19:23,940 --> 00:19:28,380
You see, what I haven't told you yet is just how elegant this algorithm really is, how

309
00:19:28,380 --> 00:19:32,400
simple it is to get a machine to point to the position of an error, how to systematically

310
00:19:32,400 --> 00:19:37,680
scale it, and how we can frame all of this as one single operation rather than multiple

311
00:19:37,680 --> 00:19:39,600
separate parity checks.

312
00:19:39,600 --> 00:19:41,640
To see what I mean, come join me in part two.

