start	end	text
0	8280	Okay, this is just going to be a quick video where I just show how to edit packages efficiently.
8280	11440	Just how to do this in a very interactive way.
11440	16640	So right here I have simple Diffie queue set up in my Juneau.
16640	25960	And so what I'm doing right here is I'm going to add an Euler Mary Yama method.
26920	29800	Let me make sure I spelled that right.
29800	32440	So Euler Mary Yama.
32440	34600	Yeah, that's why I don't like that.
34600	43000	Okay, so I'm going to then add a Euler Mary Yama.jl.
43000	50280	So what simple Diffie queue.jl is, is it's a library of just simple differential equation solvers.
50680	55800	The reason why I'm building this is so that way contributors will have
58040	62200	two reasons, three reasons is so that we have something to benchmark against.
62200	66680	So that way we have very simple versions that we can cross compile to GPUs.
66680	72600	And so that way, and also so that way I can have a nice style guide for how some things
72600	74440	should look inside a Diffie queue.
74440	79400	So simple repo, you can see that there's a very simple function map.
79400	84680	It has an integrator with stepping and also has just a solve that just does a loop.
84680	87080	So no callbacks or anything like that are supported.
87080	90760	It's just this is what simple Diffie queue code looks like.
90760	94440	And what I want to do is I want to make the Euler Mary Yama version of that.
94440	99560	So if you look it up, the Euler Mary Yama method is just you take a stochastic differential equation.
101000	105000	You update it by multiplying by dt and multiplying by a random number.
105240	111960	So I already have in the top level here a Diffie queue base.
111960	112360	Let me.
116680	125160	And so now that I already have Diffie queue base in here,
125160	129560	what I want to do is I want to create an algorithm and overload solve.
129800	137240	So here what I'm going to use is simple EM so simple Euler Mary Yama.
137800	143640	And what I want to do is I want to override the function Diffie queue base dot solve for
144760	150760	an SDE problem when someone calls it with the simple EM algorithm.
151640	160040	And the only option I'm going to support here is the GT option.
161080	161480	Right.
161480	167640	So just so that way everyone's understanding what's going on here,
167640	169000	differential equations.
169000	173320	If I go over to the documentation, the only options which we have inside of this
175160	180120	part right here for solve are the ones listed as the common solver options.
180120	181960	Anything else would go into the algorithm.
183320	186920	There's tiny exceptions for the different problems.
186920	196520	So for say, for example, the SDE solvers, you can have special keyword arguments.
196520	198920	So you can also have save noise and delta.
198920	201000	I'm not going to support that in the simple version.
203000	204440	So yeah.
204440	206200	So those are like all the args.
206200	209080	I'm just going to support a few of them in the future.
209080	212600	What I might want to do is add warnings for the ones that don't support.
212600	216600	So I mean, you probably don't have to send to the queue that if you call an algorithm
216600	221480	with options that aren't implemented for it, it warns you and tells you that it's ignoring it.
222360	226680	So here, I'm actually going to make it air because I don't know how to make it work without a DT.
226680	232200	So DT required for simple EM.
234680	237880	And so now I'm just going to implement the Euler-Mariella method.
239960	247640	So in the Euler, or in this, what I'm going to do is I'm going to create a test.
247640	252440	So simple EM, test.jail.
253080	256200	And inside of here, I'm going to create a stochastic difference.
256200	259080	So I'm just going to write what a user code would look like.
259720	265800	So using simple Diffie queue and simple Diffie queue with this reexports Diffie
265800	268520	queue base. Let me do this in a first session.
269080	272840	So I just did ctrl-j, ctrl-k to quit Julia.
273560	277000	ctrl-j, ctrl-c will then clear the console.
277640	279400	That gives me something brand new.
279400	280680	I click over to the REPL.
280680	281400	I hit enter.
282040	284520	And now I'm in a brand new REPL.
284520	285080	Right.
285080	286920	And you can see that this is grayed out.
286920	288520	That tells me that it's new.
288520	290360	And so let me recompile everything.
290920	292440	Hopefully that doesn't fail.
292520	293080	This is...
296840	297320	Okay.
297320	298440	Did I misspell something?
299000	300440	Meru, Yama.
308040	308440	Mary.
313960	314680	Yeah, there we go.
314920	320600	So when I do ctrl-
321560	323320	There's a few commands I'm going to be using here.
323320	325560	We want to do the interactive side on the left.
326440	327560	Shift-Enter.
327560	330440	So if I shift-Enter, it goes down to the new line.
330440	333080	If I ctrl-Enter, it evaluates on the same line.
335560	340920	And what I'm going to do here is I'm going to create
340920	342440	us to cast a differential equation.
342520	348440	So if I do something like f of upt is 2u.
348440	352040	And g of upt equals 1.
352600	355080	And this is the stochastic differential equation.
357320	364360	dx of t equals 2u dt plus dw sub t.
366120	369560	And I want to give a initial condition and the time span.
372760	377160	And then this makes an sd problem.
383080	384520	And there's no parameters.
385400	385960	All right.
385960	388040	So that's my sd problem I want to do.
388040	390040	So this setup is called test driven development.
390040	393560	What I'm doing is I'm writing the test before I even write the code.
393560	395560	So that way I know what I want it to do.
396280	401320	So here, all I want to want to do here is I just want to do solve
402520	407480	this problem with simple vm.
414200	416520	So now it's saying that there's no method solve for this
419080	421080	because I haven't really written anything.
421080	425720	So now I'm going to actually save that file if I run this code.
425880	433080	So what I did here is I clicked over to the package code
433080	435240	and I just evaluated some functions.
435240	438040	When I evaluate that function in the package code,
438040	441560	it will actually update the code in the package.
441560	443640	So when I jump back over to my task script,
445800	447400	now this is the new code.
447400	453320	So if I do something like dt gets 0.5, it's now doing nothing.
454040	457080	So let me jump in here then and go, okay.
461240	462680	So the first thing that we want to do,
462680	464360	let's just unpack a few variables.
466360	478040	G gets prob dot g dot u0 and let's see.
479000	484200	T span gets prob dot t span.
485080	485720	Right.
485720	490600	And now what I want to do is let's see.
490600	494200	So n, the number of steps is going to be
496440	502360	prob dot t span of 2 minus or I can just do this as t span of 2
502360	506360	minus t span of 1 divided by dt.
508040	514440	And I'm going to just enforce that this is going to be an integer.
514440	519480	So this will be enforcing that the result
519480	521640	has to actually be an integer or will error.
522360	527800	So for now, I'm just not going to support handling the extra on the end.
529640	534680	And so what I want to do then is I want my solution array to be
535640	544360	created from my initial values for u in 1 through n.
546840	549080	So let me make sure that that's good right now.
549880	550440	Invalued.
551560	555400	I didn't give it a so here I evaluated the function in place.
555960	559320	Now what you see is this actually does something different.
559320	562760	So Julia by default will return the last thing that happened.
562840	564600	So it's returning what this u is.
565960	574280	So I did dt equals 0.5 and it's returning an array u of the initial condition two times.
574280	575960	Let's make sure that this is good.
575960	577000	That looks good.
577000	590680	All right, t should then be t equals i times dt for this t span of 1 plus i times dt for
591640	594840	i in 1 through n.
599560	600840	And this is good.
600840	601800	That's almost good, right?
601800	604200	But we are missing our initial condition.
604200	608760	So we're actually, this is actually showing me that I need to have one more.
613960	618600	So that way I have, what did that look like?
620920	624840	Okay, this needs to be like that.
625720	627000	So it was an off by one error.
634680	636920	Let me just close that because it's stripping me up.
638520	641400	I name test files test.jl all the time.
641400	645560	So actually what I want is that and so I'll just match it here.
645560	651960	Okay, so now,
657560	661480	actually it's probably better to just make that plus one.
665560	666040	It's okay.
666040	668040	So now let's do the Euler-Maryon method.
668840	674040	This is just going to be for i in 1, 2 through n.
676040	684040	And so what I'm going to do in this loop is I'm going to say that u, the next value equals
686120	686760	f of,
690920	695080	so u-preve equals u of i minus 1.
695080	703160	And t-preve is t of i minus 1.
703160	706360	And so the algorithm is, let me grab the parameters here too.
706360	708040	So p equals prob dot p.
710120	711640	Lot of space for good measure.
712360	715560	Then this is going to be u-preve,
718360	723720	p-t-preve times dt plus
725640	734680	g of u-preve p-t-preve times square root of dt.
734680	737000	Let me voice this out of the loop.
737880	743720	Just, I'm pretty sure Julia would actually handle this, but this is just to be safe.
743720	752440	So square root of dt times a random of
752440	756200	Now let me just play with this over here.
756200	758600	So random n is like that.
758600	760840	I also want this to support static arrays.
763720	766920	So if I do random of
767160	774360	So if I make a a static
776600	784360	at s vector 234 random of a, what does that do?
784360	785080	That's not good.
789640	790280	Let's see.
790280	791640	So then what do I want here?
792600	798200	I want, this might be something I should just handle later.
802200	807000	Because I want to get a random number for each of the values that
811080	813320	Right now they're only support scalers.
815320	819720	So I'm just going to throw up in the static arrays.jl.
822120	822600	And
827480	827880	Oh yeah.
827880	837400	So I want to do this by size.
840680	842440	So I'm just going here and going.
842440	843400	Okay.
851640	853880	So if I do size of a
858680	859240	That's good.
859960	863720	And if I do size of 1.0, that is not what I want.
863720	865960	So then let me just do handling care.
865960	875160	So if I then add using static arrays, I evaluate that that's now in scope in the package.
875160	878600	So if let's see.
878600	884200	So if Upreve is a static s array,
886120	896600	then our gets random of size of Upreve else our gets random.
898360	900920	And from there, what we do is that
905560	906760	I think that's right.
906760	913400	So let's just output those two things for now.
914120	916200	And let's check how our function is doing.
916920	917960	So type error.
918520	920920	So when I click here, I click on the stack trace.
920920	923240	It brings me right to where the error is.
923240	926680	The error is that this is supposed to be a type, not the actual value.
927320	929000	I evaluate that in place.
929000	932440	And now you see that I get times and I get the values.
935560	937320	So yeah.
937320	941720	And then right here, what I do is that then I do things like at test cell dot t.
944200	950520	Well, it's all dot t should be equal to 0 by 2.25 to 1.0.
951160	951480	Right.
952280	955080	Let me add base dot test in here.
956680	958600	Oops, I just evaluated everything.
960360	961240	So okay.
961240	962440	Why is that not the same?
963400	965560	Can anyone guess why this is not the same?
978840	981720	So let me collect this so that way I get an array here.
983080	984440	And you see, boom.
984440	988040	See what this printed out is that this value is an array.
988040	989000	This value is not.
989000	992680	So equals equals just didn't handle that.
993240	998760	Anyways, so let's make sure that the length of U is 5.
1003160	1004440	Here, what is U?
1004440	1008600	U is, oh, that's equals.
1008600	1009240	And there we go.
1009240	1010200	Now we have some tests.
1010440	1020920	Now if I want to check that the type of U is a DE solution,
1023720	1025080	right now this fails.
1025080	1027560	So I can add at test broken.
1029800	1032600	And that tells me that this test is broken for now.
1033640	1035080	Now what I'm going to do is
1036040	1040520	I have simple EM tests.
1040520	1044200	So simple EM test.jl.
1045400	1047480	I'm just going to make sure really quickly that it runs.
1047480	1051480	You see that there's a pass, a broken, and a total is 3.
1051480	1054600	So why broken is nice is because A,
1054600	1057320	it will throw you an error if it ever gets fixed.
1057320	1059400	So I mean, that's a quick way to be able to tell you,
1059400	1061400	hey, you accidentally fixed something.
1061400	1064760	But also what's really nice is that it tells you it's broken.
1065400	1066920	You can track it, that it's broken,
1066920	1069160	and you can just make sure it's broken.
1069160	1071800	The other way to do this is to comment out tests.
1071800	1075560	And once you get any significant amount of code,
1075560	1078360	your tests, which are commented out, will get lost, right?
1079160	1080520	You'll just forget that they exist.
1082920	1087640	So by doing this, this way you have a nice tracker
1087640	1089240	for all your broken tests.
1089240	1091960	So then to run our tests, you do pkg.test.
1092600	1093880	Simple diff eq.
1099160	1100920	And then this will run this test suite,
1100920	1104680	which will do the discrete test for that function map.
1104680	1109160	And simple em, which will test our Euler-Meriama method.
1112040	1113160	So while that's running,
1113160	1116360	I'm just going to grab some code over from this function map,
1116360	1120840	which is just how the heck do you create a DE solution?
1122920	1126920	Simple em was not defined.
1131320	1132760	Oh, because it did not export it.
1134440	1134920	Okay.
1146040	1148920	So now let me run this in place here to make sure this works well.
1152040	1173000	So okay, so by adding the export, this actually works now.
1173000	1177160	So the issue that happens that when I did this included,
1177160	1181000	actually included some stuff into my global scope, but fixed.
1182040	1185080	And now what I just did here is I estimate it.
1185080	1187400	So that way it returns a proper diff eq solution.
1188520	1191480	So this will probably do something weird now.
1192120	1194440	Instead, it should be a solution object.
1197080	1201240	And now I should say solve.t and solve.u.
1202040	1203480	And this will actually pass now.
1204520	1206360	And so this got an unexpected pass.
1207320	1208840	So I should change it to test.
1210280	1211000	And there you go.
1211000	1216920	Now this test file should be good if I do simple diff eq.
1223720	1226280	Then what this will do is this will run my package tests
1226280	1227480	and make sure everything works.
1228520	1231480	In the meantime, because I know this is probably going to pass,
1231480	1234840	let me open up simple diff eq.jl.
1235960	1238840	You see that these are my commits.
1239640	1242440	I'm going to review my commits, make sure that they all look okay.
1250680	1251720	And what's this?
1251720	1252600	U not defined.
1255000	1257640	Oh, solve.t.
1265400	1266600	So what's going on here?
1266680	1271160	I can pull this down and nope, I want to do solve.
1273880	1274440	There you go.
1277640	1282200	So yeah, I hope that this video just shows off a nice interactive workflow
1282200	1285800	where you're basically just going between your test function
1285800	1288760	and your package code very quickly.
1290200	1292440	I actually like to do this for my research codes as well,
1292440	1296920	because then you have at test making sure that your research code always works
1296920	1300840	and you have your longer functions than as your package for your research.
1300840	1303880	Actually, I do this and then I release the research as a package.
1305000	1307000	And that's how diff eq came about.
1307000	1311240	So hopefully this gives a nice way to show you how to use Juno
1311240	1313640	to do package development really quickly.
1313640	1318600	As a last step here, just reviewing the PR, everything looks nice.
1318600	1320040	If I needed to pull something out,
1320040	1323080	like if I had an extra test in here, let me see.
1323640	1327080	Yeah, so if I had like a extra blob in here that was bad,
1327080	1331000	I can you can just go to discard hunk and you can get rid of parts of it.
1333880	1335320	Let me just show you one last thing.
1336360	1341000	One easy way to see what's going on is if you just add show inside here.
1341000	1345640	So if you add show, evaluate, and then you'll see that it tells you.
1345640	1349160	So at show is nice because it prints out the name and then equals.
1350280	1356600	So yeah, that's some nice stuff for just working in Juno.
1356600	1358040	Hopefully that helps you out.
1358840	1359080	Cool.
1361720	1364360	Let's do this and push.
1364360	1368840	So add out of place simple.
1374520	1377000	So both of these are actually pointing to the same thing right now.
1377000	1377560	That's silly.
1378520	1380200	And then if I check online.
1383560	1383800	No.
1386840	1388200	The build if you Q.JL.
1388840	1390520	You see that out of place simple.
1390520	1391640	Yeah, is there.
1395240	1399960	So I can push the master because it's my repo and I have all the power in the world.
1399960	1405080	If it's not your repo, then what you need to do is you need to go fork it.
1405320	1408120	When you fork it, you add a remote to your fork.
1408120	1415560	So you can see that George has his own fork actually on this repo and then what you can do
1415560	1424040	there is you can set upstream to your branch and then you'll see it over here.
1424040	1428040	What this will do is they'll make it push to your fork and then you just drag and drop
1428040	1429800	and that will open up a pull request.
1429960	1436840	So in that setup, you can use your own fork just like it's your own repo.
1436840	1441480	It is your own repo, but whenever you want it to update the code in the actual package,
1441480	1445880	you need to get a pull request and they need to accept your code changes.
1445880	1454360	Well, that's pretty much how you do test driven package development in Julia.
