WEBVTT

00:00.000 --> 00:08.280
Okay, this is just going to be a quick video where I just show how to edit packages efficiently.

00:08.280 --> 00:11.440
Just how to do this in a very interactive way.

00:11.440 --> 00:16.640
So right here I have simple Diffie queue set up in my Juneau.

00:16.640 --> 00:25.960
And so what I'm doing right here is I'm going to add an Euler Mary Yama method.

00:26.920 --> 00:29.800
Let me make sure I spelled that right.

00:29.800 --> 00:32.440
So Euler Mary Yama.

00:32.440 --> 00:34.600
Yeah, that's why I don't like that.

00:34.600 --> 00:43.000
Okay, so I'm going to then add a Euler Mary Yama.jl.

00:43.000 --> 00:50.280
So what simple Diffie queue.jl is, is it's a library of just simple differential equation solvers.

00:50.680 --> 00:55.800
The reason why I'm building this is so that way contributors will have

00:58.040 --> 01:02.200
two reasons, three reasons is so that we have something to benchmark against.

01:02.200 --> 01:06.680
So that way we have very simple versions that we can cross compile to GPUs.

01:06.680 --> 01:12.600
And so that way, and also so that way I can have a nice style guide for how some things

01:12.600 --> 01:14.440
should look inside a Diffie queue.

01:14.440 --> 01:19.400
So simple repo, you can see that there's a very simple function map.

01:19.400 --> 01:24.680
It has an integrator with stepping and also has just a solve that just does a loop.

01:24.680 --> 01:27.080
So no callbacks or anything like that are supported.

01:27.080 --> 01:30.760
It's just this is what simple Diffie queue code looks like.

01:30.760 --> 01:34.440
And what I want to do is I want to make the Euler Mary Yama version of that.

01:34.440 --> 01:39.560
So if you look it up, the Euler Mary Yama method is just you take a stochastic differential equation.

01:41.000 --> 01:45.000
You update it by multiplying by dt and multiplying by a random number.

01:45.240 --> 01:51.960
So I already have in the top level here a Diffie queue base.

01:51.960 --> 01:52.360
Let me.

01:56.680 --> 02:05.160
And so now that I already have Diffie queue base in here,

02:05.160 --> 02:09.560
what I want to do is I want to create an algorithm and overload solve.

02:09.800 --> 02:17.240
So here what I'm going to use is simple EM so simple Euler Mary Yama.

02:17.800 --> 02:23.640
And what I want to do is I want to override the function Diffie queue base dot solve for

02:24.760 --> 02:30.760
an SDE problem when someone calls it with the simple EM algorithm.

02:31.640 --> 02:40.040
And the only option I'm going to support here is the GT option.

02:41.080 --> 02:41.480
Right.

02:41.480 --> 02:47.640
So just so that way everyone's understanding what's going on here,

02:47.640 --> 02:49.000
differential equations.

02:49.000 --> 02:53.320
If I go over to the documentation, the only options which we have inside of this

02:55.160 --> 03:00.120
part right here for solve are the ones listed as the common solver options.

03:00.120 --> 03:01.960
Anything else would go into the algorithm.

03:03.320 --> 03:06.920
There's tiny exceptions for the different problems.

03:06.920 --> 03:16.520
So for say, for example, the SDE solvers, you can have special keyword arguments.

03:16.520 --> 03:18.920
So you can also have save noise and delta.

03:18.920 --> 03:21.000
I'm not going to support that in the simple version.

03:23.000 --> 03:24.440
So yeah.

03:24.440 --> 03:26.200
So those are like all the args.

03:26.200 --> 03:29.080
I'm just going to support a few of them in the future.

03:29.080 --> 03:32.600
What I might want to do is add warnings for the ones that don't support.

03:32.600 --> 03:36.600
So I mean, you probably don't have to send to the queue that if you call an algorithm

03:36.600 --> 03:41.480
with options that aren't implemented for it, it warns you and tells you that it's ignoring it.

03:42.360 --> 03:46.680
So here, I'm actually going to make it air because I don't know how to make it work without a DT.

03:46.680 --> 03:52.200
So DT required for simple EM.

03:54.680 --> 03:57.880
And so now I'm just going to implement the Euler-Mariella method.

03:59.960 --> 04:07.640
So in the Euler, or in this, what I'm going to do is I'm going to create a test.

04:07.640 --> 04:12.440
So simple EM, test.jail.

04:13.080 --> 04:16.200
And inside of here, I'm going to create a stochastic difference.

04:16.200 --> 04:19.080
So I'm just going to write what a user code would look like.

04:19.720 --> 04:25.800
So using simple Diffie queue and simple Diffie queue with this reexports Diffie

04:25.800 --> 04:28.520
queue base. Let me do this in a first session.

04:29.080 --> 04:32.840
So I just did ctrl-j, ctrl-k to quit Julia.

04:33.560 --> 04:37.000
ctrl-j, ctrl-c will then clear the console.

04:37.640 --> 04:39.400
That gives me something brand new.

04:39.400 --> 04:40.680
I click over to the REPL.

04:40.680 --> 04:41.400
I hit enter.

04:42.040 --> 04:44.520
And now I'm in a brand new REPL.

04:44.520 --> 04:45.080
Right.

04:45.080 --> 04:46.920
And you can see that this is grayed out.

04:46.920 --> 04:48.520
That tells me that it's new.

04:48.520 --> 04:50.360
And so let me recompile everything.

04:50.920 --> 04:52.440
Hopefully that doesn't fail.

04:52.520 --> 04:53.080
This is...

04:56.840 --> 04:57.320
Okay.

04:57.320 --> 04:58.440
Did I misspell something?

04:59.000 --> 05:00.440
Meru, Yama.

05:08.040 --> 05:08.440
Mary.

05:13.960 --> 05:14.680
Yeah, there we go.

05:14.920 --> 05:20.600
So when I do ctrl-

05:21.560 --> 05:23.320
There's a few commands I'm going to be using here.

05:23.320 --> 05:25.560
We want to do the interactive side on the left.

05:26.440 --> 05:27.560
Shift-Enter.

05:27.560 --> 05:30.440
So if I shift-Enter, it goes down to the new line.

05:30.440 --> 05:33.080
If I ctrl-Enter, it evaluates on the same line.

05:35.560 --> 05:40.920
And what I'm going to do here is I'm going to create

05:40.920 --> 05:42.440
us to cast a differential equation.

05:42.520 --> 05:48.440
So if I do something like f of upt is 2u.

05:48.440 --> 05:52.040
And g of upt equals 1.

05:52.600 --> 05:55.080
And this is the stochastic differential equation.

05:57.320 --> 06:04.360
dx of t equals 2u dt plus dw sub t.

06:06.120 --> 06:09.560
And I want to give a initial condition and the time span.

06:12.760 --> 06:17.160
And then this makes an sd problem.

06:23.080 --> 06:24.520
And there's no parameters.

06:25.400 --> 06:25.960
All right.

06:25.960 --> 06:28.040
So that's my sd problem I want to do.

06:28.040 --> 06:30.040
So this setup is called test driven development.

06:30.040 --> 06:33.560
What I'm doing is I'm writing the test before I even write the code.

06:33.560 --> 06:35.560
So that way I know what I want it to do.

06:36.280 --> 06:41.320
So here, all I want to want to do here is I just want to do solve

06:42.520 --> 06:47.480
this problem with simple vm.

06:54.200 --> 06:56.520
So now it's saying that there's no method solve for this

06:59.080 --> 07:01.080
because I haven't really written anything.

07:01.080 --> 07:05.720
So now I'm going to actually save that file if I run this code.

07:05.880 --> 07:13.080
So what I did here is I clicked over to the package code

07:13.080 --> 07:15.240
and I just evaluated some functions.

07:15.240 --> 07:18.040
When I evaluate that function in the package code,

07:18.040 --> 07:21.560
it will actually update the code in the package.

07:21.560 --> 07:23.640
So when I jump back over to my task script,

07:25.800 --> 07:27.400
now this is the new code.

07:27.400 --> 07:33.320
So if I do something like dt gets 0.5, it's now doing nothing.

07:34.040 --> 07:37.080
So let me jump in here then and go, okay.

07:41.240 --> 07:42.680
So the first thing that we want to do,

07:42.680 --> 07:44.360
let's just unpack a few variables.

07:46.360 --> 07:58.040
G gets prob dot g dot u0 and let's see.

07:59.000 --> 08:04.200
T span gets prob dot t span.

08:05.080 --> 08:05.720
Right.

08:05.720 --> 08:10.600
And now what I want to do is let's see.

08:10.600 --> 08:14.200
So n, the number of steps is going to be

08:16.440 --> 08:22.360
prob dot t span of 2 minus or I can just do this as t span of 2

08:22.360 --> 08:26.360
minus t span of 1 divided by dt.

08:28.040 --> 08:34.440
And I'm going to just enforce that this is going to be an integer.

08:34.440 --> 08:39.480
So this will be enforcing that the result

08:39.480 --> 08:41.640
has to actually be an integer or will error.

08:42.360 --> 08:47.800
So for now, I'm just not going to support handling the extra on the end.

08:49.640 --> 08:54.680
And so what I want to do then is I want my solution array to be

08:55.640 --> 09:04.360
created from my initial values for u in 1 through n.

09:06.840 --> 09:09.080
So let me make sure that that's good right now.

09:09.880 --> 09:10.440
Invalued.

09:11.560 --> 09:15.400
I didn't give it a so here I evaluated the function in place.

09:15.960 --> 09:19.320
Now what you see is this actually does something different.

09:19.320 --> 09:22.760
So Julia by default will return the last thing that happened.

09:22.840 --> 09:24.600
So it's returning what this u is.

09:25.960 --> 09:34.280
So I did dt equals 0.5 and it's returning an array u of the initial condition two times.

09:34.280 --> 09:35.960
Let's make sure that this is good.

09:35.960 --> 09:37.000
That looks good.

09:37.000 --> 09:50.680
All right, t should then be t equals i times dt for this t span of 1 plus i times dt for

09:51.640 --> 09:54.840
i in 1 through n.

09:59.560 --> 10:00.840
And this is good.

10:00.840 --> 10:01.800
That's almost good, right?

10:01.800 --> 10:04.200
But we are missing our initial condition.

10:04.200 --> 10:08.760
So we're actually, this is actually showing me that I need to have one more.

10:13.960 --> 10:18.600
So that way I have, what did that look like?

10:20.920 --> 10:24.840
Okay, this needs to be like that.

10:25.720 --> 10:27.000
So it was an off by one error.

10:34.680 --> 10:36.920
Let me just close that because it's stripping me up.

10:38.520 --> 10:41.400
I name test files test.jl all the time.

10:41.400 --> 10:45.560
So actually what I want is that and so I'll just match it here.

10:45.560 --> 10:51.960
Okay, so now,

10:57.560 --> 11:01.480
actually it's probably better to just make that plus one.

11:05.560 --> 11:06.040
It's okay.

11:06.040 --> 11:08.040
So now let's do the Euler-Maryon method.

11:08.840 --> 11:14.040
This is just going to be for i in 1, 2 through n.

11:16.040 --> 11:24.040
And so what I'm going to do in this loop is I'm going to say that u, the next value equals

11:26.120 --> 11:26.760
f of,

11:30.920 --> 11:35.080
so u-preve equals u of i minus 1.

11:35.080 --> 11:43.160
And t-preve is t of i minus 1.

11:43.160 --> 11:46.360
And so the algorithm is, let me grab the parameters here too.

11:46.360 --> 11:48.040
So p equals prob dot p.

11:50.120 --> 11:51.640
Lot of space for good measure.

11:52.360 --> 11:55.560
Then this is going to be u-preve,

11:58.360 --> 12:03.720
p-t-preve times dt plus

12:05.640 --> 12:14.680
g of u-preve p-t-preve times square root of dt.

12:14.680 --> 12:17.000
Let me voice this out of the loop.

12:17.880 --> 12:23.720
Just, I'm pretty sure Julia would actually handle this, but this is just to be safe.

12:23.720 --> 12:32.440
So square root of dt times a random of

12:32.440 --> 12:36.200
Now let me just play with this over here.

12:36.200 --> 12:38.600
So random n is like that.

12:38.600 --> 12:40.840
I also want this to support static arrays.

12:43.720 --> 12:46.920
So if I do random of

12:47.160 --> 12:54.360
So if I make a a static

12:56.600 --> 13:04.360
at s vector 234 random of a, what does that do?

13:04.360 --> 13:05.080
That's not good.

13:09.640 --> 13:10.280
Let's see.

13:10.280 --> 13:11.640
So then what do I want here?

13:12.600 --> 13:18.200
I want, this might be something I should just handle later.

13:22.200 --> 13:27.000
Because I want to get a random number for each of the values that

13:31.080 --> 13:33.320
Right now they're only support scalers.

13:35.320 --> 13:39.720
So I'm just going to throw up in the static arrays.jl.

13:42.120 --> 13:42.600
And

13:47.480 --> 13:47.880
Oh yeah.

13:47.880 --> 13:57.400
So I want to do this by size.

14:00.680 --> 14:02.440
So I'm just going here and going.

14:02.440 --> 14:03.400
Okay.

14:11.640 --> 14:13.880
So if I do size of a

14:18.680 --> 14:19.240
That's good.

14:19.960 --> 14:23.720
And if I do size of 1.0, that is not what I want.

14:23.720 --> 14:25.960
So then let me just do handling care.

14:25.960 --> 14:35.160
So if I then add using static arrays, I evaluate that that's now in scope in the package.

14:35.160 --> 14:38.600
So if let's see.

14:38.600 --> 14:44.200
So if Upreve is a static s array,

14:46.120 --> 14:56.600
then our gets random of size of Upreve else our gets random.

14:58.360 --> 15:00.920
And from there, what we do is that

15:05.560 --> 15:06.760
I think that's right.

15:06.760 --> 15:13.400
So let's just output those two things for now.

15:14.120 --> 15:16.200
And let's check how our function is doing.

15:16.920 --> 15:17.960
So type error.

15:18.520 --> 15:20.920
So when I click here, I click on the stack trace.

15:20.920 --> 15:23.240
It brings me right to where the error is.

15:23.240 --> 15:26.680
The error is that this is supposed to be a type, not the actual value.

15:27.320 --> 15:29.000
I evaluate that in place.

15:29.000 --> 15:32.440
And now you see that I get times and I get the values.

15:35.560 --> 15:37.320
So yeah.

15:37.320 --> 15:41.720
And then right here, what I do is that then I do things like at test cell dot t.

15:44.200 --> 15:50.520
Well, it's all dot t should be equal to 0 by 2.25 to 1.0.

15:51.160 --> 15:51.480
Right.

15:52.280 --> 15:55.080
Let me add base dot test in here.

15:56.680 --> 15:58.600
Oops, I just evaluated everything.

16:00.360 --> 16:01.240
So okay.

16:01.240 --> 16:02.440
Why is that not the same?

16:03.400 --> 16:05.560
Can anyone guess why this is not the same?

16:18.840 --> 16:21.720
So let me collect this so that way I get an array here.

16:23.080 --> 16:24.440
And you see, boom.

16:24.440 --> 16:28.040
See what this printed out is that this value is an array.

16:28.040 --> 16:29.000
This value is not.

16:29.000 --> 16:32.680
So equals equals just didn't handle that.

16:33.240 --> 16:38.760
Anyways, so let's make sure that the length of U is 5.

16:43.160 --> 16:44.440
Here, what is U?

16:44.440 --> 16:48.600
U is, oh, that's equals.

16:48.600 --> 16:49.240
And there we go.

16:49.240 --> 16:50.200
Now we have some tests.

16:50.440 --> 17:00.920
Now if I want to check that the type of U is a DE solution,

17:03.720 --> 17:05.080
right now this fails.

17:05.080 --> 17:07.560
So I can add at test broken.

17:09.800 --> 17:12.600
And that tells me that this test is broken for now.

17:13.640 --> 17:15.080
Now what I'm going to do is

17:16.040 --> 17:20.520
I have simple EM tests.

17:20.520 --> 17:24.200
So simple EM test.jl.

17:25.400 --> 17:27.480
I'm just going to make sure really quickly that it runs.

17:27.480 --> 17:31.480
You see that there's a pass, a broken, and a total is 3.

17:31.480 --> 17:34.600
So why broken is nice is because A,

17:34.600 --> 17:37.320
it will throw you an error if it ever gets fixed.

17:37.320 --> 17:39.400
So I mean, that's a quick way to be able to tell you,

17:39.400 --> 17:41.400
hey, you accidentally fixed something.

17:41.400 --> 17:44.760
But also what's really nice is that it tells you it's broken.

17:45.400 --> 17:46.920
You can track it, that it's broken,

17:46.920 --> 17:49.160
and you can just make sure it's broken.

17:49.160 --> 17:51.800
The other way to do this is to comment out tests.

17:51.800 --> 17:55.560
And once you get any significant amount of code,

17:55.560 --> 17:58.360
your tests, which are commented out, will get lost, right?

17:59.160 --> 18:00.520
You'll just forget that they exist.

18:02.920 --> 18:07.640
So by doing this, this way you have a nice tracker

18:07.640 --> 18:09.240
for all your broken tests.

18:09.240 --> 18:11.960
So then to run our tests, you do pkg.test.

18:12.600 --> 18:13.880
Simple diff eq.

18:19.160 --> 18:20.920
And then this will run this test suite,

18:20.920 --> 18:24.680
which will do the discrete test for that function map.

18:24.680 --> 18:29.160
And simple em, which will test our Euler-Meriama method.

18:32.040 --> 18:33.160
So while that's running,

18:33.160 --> 18:36.360
I'm just going to grab some code over from this function map,

18:36.360 --> 18:40.840
which is just how the heck do you create a DE solution?

18:42.920 --> 18:46.920
Simple em was not defined.

18:51.320 --> 18:52.760
Oh, because it did not export it.

18:54.440 --> 18:54.920
Okay.

19:06.040 --> 19:08.920
So now let me run this in place here to make sure this works well.

19:12.040 --> 19:33.000
So okay, so by adding the export, this actually works now.

19:33.000 --> 19:37.160
So the issue that happens that when I did this included,

19:37.160 --> 19:41.000
actually included some stuff into my global scope, but fixed.

19:42.040 --> 19:45.080
And now what I just did here is I estimate it.

19:45.080 --> 19:47.400
So that way it returns a proper diff eq solution.

19:48.520 --> 19:51.480
So this will probably do something weird now.

19:52.120 --> 19:54.440
Instead, it should be a solution object.

19:57.080 --> 20:01.240
And now I should say solve.t and solve.u.

20:02.040 --> 20:03.480
And this will actually pass now.

20:04.520 --> 20:06.360
And so this got an unexpected pass.

20:07.320 --> 20:08.840
So I should change it to test.

20:10.280 --> 20:11.000
And there you go.

20:11.000 --> 20:16.920
Now this test file should be good if I do simple diff eq.

20:23.720 --> 20:26.280
Then what this will do is this will run my package tests

20:26.280 --> 20:27.480
and make sure everything works.

20:28.520 --> 20:31.480
In the meantime, because I know this is probably going to pass,

20:31.480 --> 20:34.840
let me open up simple diff eq.jl.

20:35.960 --> 20:38.840
You see that these are my commits.

20:39.640 --> 20:42.440
I'm going to review my commits, make sure that they all look okay.

20:50.680 --> 20:51.720
And what's this?

20:51.720 --> 20:52.600
U not defined.

20:55.000 --> 20:57.640
Oh, solve.t.

21:05.400 --> 21:06.600
So what's going on here?

21:06.680 --> 21:11.160
I can pull this down and nope, I want to do solve.

21:13.880 --> 21:14.440
There you go.

21:17.640 --> 21:22.200
So yeah, I hope that this video just shows off a nice interactive workflow

21:22.200 --> 21:25.800
where you're basically just going between your test function

21:25.800 --> 21:28.760
and your package code very quickly.

21:30.200 --> 21:32.440
I actually like to do this for my research codes as well,

21:32.440 --> 21:36.920
because then you have at test making sure that your research code always works

21:36.920 --> 21:40.840
and you have your longer functions than as your package for your research.

21:40.840 --> 21:43.880
Actually, I do this and then I release the research as a package.

21:45.000 --> 21:47.000
And that's how diff eq came about.

21:47.000 --> 21:51.240
So hopefully this gives a nice way to show you how to use Juno

21:51.240 --> 21:53.640
to do package development really quickly.

21:53.640 --> 21:58.600
As a last step here, just reviewing the PR, everything looks nice.

21:58.600 --> 22:00.040
If I needed to pull something out,

22:00.040 --> 22:03.080
like if I had an extra test in here, let me see.

22:03.640 --> 22:07.080
Yeah, so if I had like a extra blob in here that was bad,

22:07.080 --> 22:11.000
I can you can just go to discard hunk and you can get rid of parts of it.

22:13.880 --> 22:15.320
Let me just show you one last thing.

22:16.360 --> 22:21.000
One easy way to see what's going on is if you just add show inside here.

22:21.000 --> 22:25.640
So if you add show, evaluate, and then you'll see that it tells you.

22:25.640 --> 22:29.160
So at show is nice because it prints out the name and then equals.

22:30.280 --> 22:36.600
So yeah, that's some nice stuff for just working in Juno.

22:36.600 --> 22:38.040
Hopefully that helps you out.

22:38.840 --> 22:39.080
Cool.

22:41.720 --> 22:44.360
Let's do this and push.

22:44.360 --> 22:48.840
So add out of place simple.

22:54.520 --> 22:57.000
So both of these are actually pointing to the same thing right now.

22:57.000 --> 22:57.560
That's silly.

22:58.520 --> 23:00.200
And then if I check online.

23:03.560 --> 23:03.800
No.

23:06.840 --> 23:08.200
The build if you Q.JL.

23:08.840 --> 23:10.520
You see that out of place simple.

23:10.520 --> 23:11.640
Yeah, is there.

23:15.240 --> 23:19.960
So I can push the master because it's my repo and I have all the power in the world.

23:19.960 --> 23:25.080
If it's not your repo, then what you need to do is you need to go fork it.

23:25.320 --> 23:28.120
When you fork it, you add a remote to your fork.

23:28.120 --> 23:35.560
So you can see that George has his own fork actually on this repo and then what you can do

23:35.560 --> 23:44.040
there is you can set upstream to your branch and then you'll see it over here.

23:44.040 --> 23:48.040
What this will do is they'll make it push to your fork and then you just drag and drop

23:48.040 --> 23:49.800
and that will open up a pull request.

23:49.960 --> 23:56.840
So in that setup, you can use your own fork just like it's your own repo.

23:56.840 --> 24:01.480
It is your own repo, but whenever you want it to update the code in the actual package,

24:01.480 --> 24:05.880
you need to get a pull request and they need to accept your code changes.

24:05.880 --> 24:14.360
Well, that's pretty much how you do test driven package development in Julia.

