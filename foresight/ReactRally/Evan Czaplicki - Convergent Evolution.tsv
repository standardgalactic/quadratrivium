start	end	text
0	11640	Okay, I'm Evan Treplicchi, I designed the Elm programming language, and what I wanted
11640	17280	to talk about is people often wonder, they see similarities between React and Elm, both
17280	21400	these things are about creating things in browsers, these interactive applications,
21400	25480	and people say, well, which came first, where, who originated this idea, that idea?
25480	30360	And so I thought I could offer a sort of unique perspective on how these things evolved in
30360	31360	the timeline.
31360	37800	And what's interesting is that usually it's a case of conversion evolution, where something
37800	43040	was going on inside Facebook, I didn't know about it, and independently I was working
43040	49680	on my thesis at college, coming up with certain ideas, and it just turns out we came to a
49680	53920	lot of similar conclusions, and so I want to emphasize those and sort of see what that
53920	55040	might mean.
55040	61080	And I want to start by giving an example of conversion evolution, just from real life,
61080	65960	which is you have these sort of very different creatures, birds and bees, that both can fly.
65960	71440	They both somehow ended up with wings, even though millions of years ago they diverged
71440	73040	evolutionarily.
73040	79800	And one thing that a developer might say when they see this connection is like, well, who
79800	80800	did it better?
80800	85640	Who did wings best?
85640	92440	And so one person may say, okay, well, birds, they have feathers, that's pretty cool.
92440	94160	Whereas wings, they have chitin.
94160	97960	And so with feathers, well, if it gets damaged, it can be replaced.
97960	101680	Whereas with chitin, if it gets chipped, it's just chipped, it's just bad now.
101680	108880	So like, but I think this is kind of a silly question, and in this context, like, it sort
108920	110760	of seems ridiculous.
110760	115480	And I prefer to ask the question, how does this design fit in with all the other features?
115480	120440	So if we take a step back and we look at bees, well, bees have the exoskeleton, that's also
120440	121600	made of chitin.
121600	124800	And so the fact that the same material can be what their wings are made of, there's no
124800	129760	extra nutrients that they need to be able to fly, it's kind of a beautiful design.
129760	133640	They also have an open circulatory system, so instead of a heart, they just have like,
133640	139280	they don't have blood, it's just like hemolymph seeps through their shell.
139280	145360	Point is, they don't live a super long time because that's not an ideal system.
145360	152280	But for the purpose of a bee, it's like, I'm going to be alive for six weeks, maybe a couple
152280	156040	months, and if a wing gets chipped in that time, it's going to serve its purpose and
156040	158520	do a really good job in that context.
158520	163440	Whereas with a bird, you have hollow bones, and hey, if the bone breaks, the wing is broken
163440	169520	too, so that thing about feathers wasn't such a nice thing.
169520	172800	And they have a four-chamber heart, so they can be much bigger, so they can use their
172800	177480	wings to kill bugs, so they're using the wings in very different ways.
177480	181760	The big point here is that flying seems like a good idea.
181760	185200	And the fact that these two creatures came to the same conclusion in these totally different
185200	193240	ways with these totally different other feature sets, it's suggested like flying, it's pretty
193240	195400	neat.
195400	199480	And so when it comes to implementation details, I prefer to ask, how does this fit with other
199480	203120	features rather than who did flying best?
203120	208920	So with that context, we're going to try to do a similar thing with React and Elm.
208920	212640	So one of the features that React and Elm have in common is virtual DOM.
212640	219160	And so when I was working on Elm from the very beginning, we were having functions that
219160	222680	would create this data structure, and then I would just, based on that data structure,
222680	226000	we built the DOM on every frame.
226000	230280	And I was like, that's kind of crazy, I don't know if that's going to work out.
230280	233800	And so over time, I was like, okay, well, I can incrementally do it so it doesn't flash,
233800	236200	and I can preserve some information.
236200	240960	And subsequently, I saw that React did the same thing, and that sort of really validated
240960	247680	that design that I think anyone I asked who would have said, that's obviously crazy.
247680	252440	And so when you look into the details in virtual DOM, with React, you have a special
252440	257240	syntax called JSX, so it's giving you this familiar HTML in your JavaScript code.
257240	260360	Whereas in Elm, we don't have a special syntax, and this is something that people, when they
260360	264960	come to Elm, will find weird, it's like, well, how do I set this up?
264960	271520	So I want to show a little program here.
271520	280640	So I'm going to take a program from the Elm guide.
280640	288400	That's just like the very beginner thing, and we'll take a look at it.
288400	293080	Tell me when you can see this.
293080	296080	Okay.
296080	300240	This is the problem of having the massive high resolution.
300240	303040	It's quite the right size.
303040	304200	Okay.
304200	308680	So I'm going to build that, and we can look at how the view code works here.
308680	312480	So rather than an HTML-style thing, we're saying, okay, I have a div, and it has three
312480	315840	children, a button, a div, and another button.
315840	323960	And when I actually go look at that code, we can see, okay, not the most exciting beginner
323960	326760	program, but it does something.
326760	330840	And when we look back at the view code, we see that exact structure.
330840	331840	We have the button.
331840	333720	It's got a negative sign.
333720	337320	And what's neat about doing this all in Elm is anything you want to do, you can do it
337320	338320	in Elm syntax.
338320	345240	So rather than saying I want a number here, I can say maybe I want a list, and I want
345240	352360	to view a dot for every number from one to the count.
352360	356880	And then I can just make an Elm function of view dot that takes the number, and instead
356880	360680	it just says, I'll show a star here.
360680	368440	And so when I compile that, I can go and look, and oops.
368440	371080	So now I see dots when it shows up.
371080	372440	So it's quite a nice thing.
372440	376560	So if I want to use any feature of Elm, it's sort of like the templating language for Elm
376560	378800	is Elm.
378800	382000	So I'm not here to say one way is better or not.
382000	384040	It's better to look at it in context.
384040	389120	And so in the React world, you're using JavaScript, you're using the C-style syntax.
389120	393760	And this goes back to 1972 at least when C came out.
393760	399560	And so JavaScript, if you believe the origin myths, could have had a Lisp syntax.
399560	403720	But for the sake of familiarity, went with the C-style syntax that everyone was familiar
403720	404720	with.
404720	410040	So essentially, this is an ecosystem that's putting a premium or using familiarity as
410040	416600	an onboarding tool to make people feel confident and dive into things and use that to learn.
416600	418840	Whereas in Elm, I have an ML-style syntax.
418840	426160	And interestingly, that goes back to 1973 at least, but it's just not as widely known.
426160	429720	And so to say, well, which of these is better is kind of like saying, well, is Arabic script
429720	431720	better or is Korean script better?
431720	433760	It's like, well, which one do you know?
433760	438640	And you probably will prefer that one, at least at first.
438640	443840	And so I know that Elm pays a familiarity cost in making this choice.
443840	447440	But I think it fits in with all the other Elm features that we're going to see.
447440	453840	And so I'm willing to pay that hit in maybe where our community grows a little bit slower.
453840	455440	But it makes this coherent whole.
455440	458400	And so when a question comes up, should we use something like JSX?
458400	466560	It's like, well, we've already sort of committed to not using syntax as an onboarding technique.
466560	469880	So we'll come back to that and see how it fits in more.
469880	474240	So another thing that React and Elm have in common is unidirectional flow.
474240	483280	And so for me, I first sort of, this became a distinct concept for me when I was at Hacker
483280	486120	School, now Recurse Center back in 2014.
486120	488800	And a student there made this game called Bessel.
488800	494760	And this student had never done like functional programming before.
494760	497840	They had done Python, I think, with the language that they knew.
497840	501120	And while I was there for the two weeks, they wanted to try something out.
501120	504320	So they made this little game where you have to go through the blood vessel.
504320	507600	And if you run into the wall, you explode.
507600	509200	And so this is like a weak project.
509200	512200	He's just trying functional programming for the first time.
512200	514400	And at the end, he asked me for a code review.
514400	518640	And what was crazy was his code was really good.
518640	523960	And that's not to say like, it's just like when you start, I found it surprising that
523960	526360	someone starting functional programming for the first time would end up with a program
526360	528400	where like, that's how I would architect it.
528400	531960	I have no concerns, like that's great.
531960	534760	And it matched how I would structure my code as well.
534760	536680	And I thought that was just a me thing.
536680	539920	And so this was when I started to notice, okay, there's this pattern that sort of Elm
539920	541920	wants us to write code in a certain way.
541920	545880	So this is when the Elm architecture sort of got a name, even though everyone who used
545880	549040	it, who used Elm had been doing this kind of pattern.
549040	554400	And the idea is that you have a model that says what's going on in your application.
554400	555800	And it creates HTML.
555800	557680	That gets sent to the Elm runtime system.
557680	561440	It renders it, deals with the DOM, does the diffing, all that kind of stuff.
561440	563640	And then it'll send back messages.
563640	565600	And that is how you update your model.
565600	570000	You send new HTML, and the cycle just goes round and round and round.
570000	573600	And when I first presented this kind of stuff, again, this was something that seemed like
573600	575640	a crazy idea.
575640	577240	And from the JavaScript world, it looked crazy.
577240	578760	From the functional world, it looked crazy.
578760	581600	Everyone was like, this is silly.
581600	587040	And so when I saw that React had this thing called, they were promoting this thing called
587040	590720	Flux, I was like, okay, that actually sort of validates this design.
590720	594160	And it sort of arose, I think, separately.
594160	602880	Since Flux, there's been more, it hasn't been as much independent development.
602880	605320	So people have seen Elm architecture and things as neat.
605320	609000	But so let's look at what the Elm architecture looked like in Elm.
609000	614600	So we can go back to our little counter program.
614600	617160	And we have a model.
617160	620000	And in this case, it's just a number that we're counting up.
620000	621240	And we have a way to update.
621240	624840	So if we want to increment our document, we have messages like that.
624840	629560	And when we handle them in each case, and then we can put those in here.
629560	635760	So if I wanted to add a new feature, I could say, okay, I want a thing called reset.
635760	639640	And it's going to be a reset button.
639640	649080	And I need to add in that kind of message and handle that case.
649080	659520	And if we go look at it, now I have my same thing and I can reset back.
659520	662200	So it sort of gives structure to your program.
662200	665480	And so this is a really simple example, but it actually shows up in every Elm program
665480	666480	ever.
666480	678240	So if we go look at the to do MVC code, we see the structure again.
678240	679640	So we start with a model.
679640	681960	In this case, it's a bit more complicated.
681960	686600	So let's open it up.
686600	691240	So here we can say hello in all of this.
691240	694080	So we have a model of, we have a list of entries.
694080	695600	We have a field that you can type in.
695600	697720	We have what things are visible or not.
697720	698720	We have our entries.
698720	699720	That has a description.
699720	700720	Is it completed?
700720	702560	Is it being edited?
702560	706120	We have our messages, all the things that you can do to this program.
706120	708820	And a way to update our program.
708820	713640	And we have a view, which again is using this Elm as the HTML syntax.
713640	716360	So you can see, okay, I've got a div.
716360	717360	It's got some attributes.
717360	720000	It's got some children.
720000	723280	And we're just using Elm functions to create the different parts.
723280	726200	So here's where the text input is, that kind of thing.
726200	731200	And no matter what level of crazy program you go to, so another program you could look
731200	736720	at is Richard did this real world thing that's been sort of going around the internet in
736720	737720	Elm.
737720	740960	And you see the same pattern again, where there's the model, there's the update, there's
740960	741960	a view.
741960	744800	And one thing that's really neat about this is when you come to an Elm project, you're
744800	749040	immediately oriented, because you're like, every Elm project starts this way, and then
749040	753240	they're just functions out from there.
753240	759840	So when you go and put this in context, in the react world, my understanding is that
759840	762440	not everyone is into unidirectional flow.
762440	767400	And I think that's because components are an important idea in the react world.
767400	773080	And when I look at components, I see local, state, methods, like getters and setters to
773080	774080	deal with it.
774280	776680	Whenever I think of that, I think of an object.
776680	778760	We've got local, state, getters and setters.
778760	781200	It's sort of an object-oriented way of thinking.
781200	784480	And that's one way to approach things, and this unidirectional flow is another way to
784480	785480	approach it.
785480	789560	Whereas in Elm, we don't have the objects, we just have functions.
789560	793040	And if that's your only tool, you're going to end up with a unidirectional flow.
793040	797240	So because of the feature set of Elm, it really makes sense that that's how all Elm programs
797240	798240	work.
798240	802320	And because the feature set of react, it makes sense that people might mix and match and use
802320	807880	some depending on what their case is, depending on what their preferences are.
807880	813080	Another case that people ended up at independently is immutability.
813080	818560	So Elm is a language where every single value in the whole language is immutable.
818560	824880	And so I think this became important in the react world because react has this thing called
824880	832920	shouldComponentUpdate, and it looks something like this, where you have some function and
832920	836080	you're saying, all right, did any of these properties change?
836080	838600	If so, we should update.
838600	840280	And I just want to do a quick poll.
840280	844440	How many people have had a bug where they changed the component, but they forgot to
844440	849560	change the shouldComponentUpdate, and then they were like, so how many people out there?
849560	854640	Okay, was it a fun bug?
855400	859280	This can be something that's super frustrating because you're like, I swear this code works,
859280	865160	my test is fine, and you just don't think to look at this piece of code.
865160	872320	And so ClosureScript, David Nolan came up with this idea of putting pairing shouldComponentUpdate
872320	874160	with immutability.
874160	878480	And so the basic realization is if you have an immutable value and you say, well, is this
878480	880240	reference the same as that reference?
880240	883200	No one could have changed it in the meantime, so it must be the same.
883200	889680	And so it's a really nice way of making this reliable, even as the shape of that value changes.
889680	893240	And so he wrote about this in this blog post, and I really want to give him credit for this
893240	898640	idea because I think, one, it popularized, or like it made immutability palatable, like
898640	903640	not an insane person idea in the JavaScript world, and it really made space for functional
903640	908360	languages to have a place in front of development.
908360	910520	So in Elm, everything's immutable.
910520	914560	So I saw David Nolan's idea here, and I was like, great, like, what is this, how does
914560	918720	this come to Elm in the Elmi way?
918720	921400	And so we have this thing called lazy.
921400	929880	So if we go look at our toDo app, I'm going to remove the lazies real quick so we can
929880	931300	see it without.
931300	937320	So here I have a div, it holds a section, and it has three subnodes.
937320	942200	And so for the first one, I'm calling a function, and I'm giving it some field value, and that's
942200	943960	what's going to show up in there.
943960	948160	And so essentially what's happening when I add lazy is I'm saying, instead of calling
948160	953920	this function now, building the virtual DOM, doing the diff, seeing if there's patches,
953920	958960	and finding out yes or no, I'm going to say, okay, hold on to this function, hold on to
958960	964400	this value, and when it's time to diff, I'll say, are these the same as last time?
964400	967920	And if it's the same function by reference, same argument by reference, I'll just skip
967920	971000	the whole thing because I know the results are going to be the same.
971000	976600	And because everything in Elm is immutable, this is known to be safe.
976600	981480	You can just trust, you can sprinkle in this lazy operator wherever you want.
981480	985960	And so if we look around this file more, I use it in other places, so each entry in
985960	988560	the list is lazy.
988560	993400	This is the footer where there's some controls, so if we look at the app again, there's these
993400	998720	kinds of things at the bottom.
998720	1000840	So that can be lazy too.
1000840	1004200	And what's neat about this is it's not tied to the component itself, it's just if you
1004200	1010960	have a function and you have some arguments, that can become a lazy piece of the structure.
1010960	1018840	Okay, so another thing that React in Elm have in common that's maybe more, one of the more
1018840	1021960	controversial things is static analysis.
1021960	1028160	And so when I use that term, I mean how can computers look at your code and give you helpful
1028160	1035760	timely hints that help make your code better and don't waste your time or don't give you
1035760	1037280	good feedback.
1037280	1042320	And so for React that may be a linter is a version of this, something like flow, something
1042320	1048620	like TypeScript, giving this extra machine help to improve your code.
1048620	1052660	So in Elm, static analysis has been sort of an important part from the very beginning.
1052660	1057140	So in Elm, Compiler is able to give you these hints.
1057140	1059620	And I want to look at a couple and try to put in context.
1059620	1065020	It's something that's hard to, I feel like Elm programs have like a personal relationship
1065020	1069320	with this, but it doesn't translate well, so I'm going to do my best.
1069320	1073580	So we have here this little expression where I'm trying to join the strings Alice and Bob
1073580	1077660	with the number four and it's saying, okay, function join is expecting the first argument
1077660	1079900	to be a string, but in fact it's a number.
1079900	1083860	So it's sort of giving you this very human explanation of what's going wrong in that
1083860	1084860	code.
1084860	1087300	And the neat thing is as your code gets bigger and bigger and bigger, the error may not be
1087300	1091100	as simple as just it's the number four here, but you have some variable and through some
1091100	1094820	other fact in your code base, it will be a number.
1094820	1096460	It'll catch that as well.
1096460	1101620	So in a little bit more complex case here, we have an if expression and in the body we're
1101620	1104860	saying is the length, what is the length of this?
1104860	1108300	And so Elm is saying, hey, this needs to be a Boolean value.
1108300	1110940	You've given me an integer, but I need a Boolean.
1110940	1113500	And what's nice about this one is it has the little hint.
1113500	1118740	So I know that when people come to Elm, there's certain mistakes that are like super predictable,
1118740	1121100	like lots of people are coming from Python, JavaScript.
1121100	1124740	And so I try to give a hint that, hey, Elm doesn't have truthiness such that instance
1124740	1126020	strings are automatically converted.
1126020	1128300	You need to do that conversion explicitly.
1128300	1132900	So I'm trying to give as much scaffolding as possible so that you know, okay, list length,
1132900	1133900	is it equal to zero?
1133940	1138460	Less than one is greater than 10, like be explicit about that kind of thing.
1138460	1143300	Now I think those examples don't really show what this means in a large setting.
1143300	1147660	So I work at this company called NoWriteInc, and we've been using Elm for about two years
1147660	1154980	now, and we have about 200,000 lines of Elm code, and there's been zero runtime exceptions
1154980	1157100	in production.
1157100	1163260	And so the kinds of things that this is catching is really, really extensive, and it's doing
1163260	1167540	it in a way that feels like a pair of programmers saying, hey, did you think about this case?
1167540	1169660	Did you think about that case?
1169660	1174220	And so one question you might ask is, how do you know it's zero, like is your URL misconfigured
1174220	1177100	so you're just not getting any reports?
1177100	1180620	There is legacy JavaScript code that will throw exceptions from time to time.
1180620	1184060	So we know errors can be detected.
1184060	1192740	So I want to show in a larger program what it means.
1192740	1198620	And so I accidentally, okay, no, I think this is good, I think this is good.
1198620	1209500	So let's say I want to add a new control, so rather than just having all the things,
1209500	1216380	what's active, what's completed, I want to show if something's complex.
1216380	1221860	So here I can say, here's my controls for which things are visible, and I'm going to
1221980	1229620	add an extra case for, is it a complex task?
1229620	1241380	So what's nice in Elm is you can kind of just run the compiler and see what it tells you.
1241380	1245700	So in this case, it's saying, hey, this complex thing, I don't know what it is.
1245700	1249020	Is it supposed to be an import?
1249180	1253860	So where did the code go?
1253860	1259460	Okay, so it's suggesting like, hey, you need to define complex before you use it.
1259460	1263620	So one of the visibility options is, okay, I want complex stuff.
1263620	1266460	So I added that, let's see if that works.
1266460	1272180	And it's saying, hey, one of your cases doesn't cover that scenario, so case, visibility.
1272180	1274780	So in this case, we're changing it to strings.
1274780	1278740	So in the complex case, we're just going to say complex.
1278740	1283140	And one question you may have here is, why turn it to strings that looks the same as
1283140	1284140	the value?
1284140	1287700	So your designer may say, I don't want it to be complex, I want it to be called like
1287700	1289900	fancy tasks.
1289900	1292180	And so you can change that without changing all your code.
1292180	1297660	So I think this decoupling is important even if you're not using it at the start.
1297660	1299820	So we'll stick with complex for now.
1299820	1302140	So let's just ask the compiler again what's going on.
1302140	1305740	Okay, this case doesn't handle all the possibilities.
1305740	1310340	It's saying, hey, you need to handle complex in particular.
1310340	1312700	So let's go find that.
1312700	1318660	Okay, and so this is a function that's figuring out, given the visibility, is the entry visible
1318660	1319660	or not?
1319660	1326500	So in the complex case, we can say, is the length of the to-do description?
1326500	1330180	Oh, yeah, and I want to make all sorts of typos here.
1330180	1331700	So I misspell that.
1331700	1334060	I'm going to misspell this thing.
1334060	1345740	And the description, that was a legit typo, I didn't mean, is less than 15, let's say.
1345740	1350700	So some of these errors are bound to happen eventually.
1350700	1353020	So let's see what the compiler tells me about it.
1353020	1359140	So it's saying, hey, I found this pattern complex.
1359140	1364900	Maybe you want this other idea, okay, that is exactly what I want, in fact.
1364900	1365900	And here's a naming error.
1365900	1370820	You use toad, maybe you want one of these other things, and it tries to find names in
1370820	1373180	scope that are close.
1373180	1375140	So I want to do.
1375140	1376860	So okay, I fixed all the errors.
1376860	1377860	Let's see.
1377860	1382820	And it's saying, hey, to-do doesn't have a thing called description, but this is close
1382820	1386420	to a field that it could have, so maybe you want description.
1386420	1392260	And so for each of those errors, had this been a string, it just would have been wrong.
1392260	1396740	And then some point you find that error through some bug report.
1396740	1399500	And then you find out that this was also misspelled.
1399500	1403300	And then that would have been, I can't access a field on an undefined value.
1403300	1407340	And then you would find out, okay, this thing is spelled wrong, and that's going to actually
1407340	1409100	be an undefined.
1409100	1410100	And what is string.length?
1410100	1411100	Do you want undefined?
1411100	1413980	I don't know.
1413980	1417020	So it's catching all these things in a really nice way.
1417020	1421420	And so as your program gets bigger, it's catching all these things still across a whole code
1421420	1422420	base.
1422420	1426580	So for the 200,000 lines that Norbert Inc. has, this is the kind of help they're getting
1426580	1428180	along the way.
1428180	1432780	And so because that's such an important part of Elm, it sort of fits in with, like, another
1432780	1437500	question people have is, React uses NPM for all of its package management.
1437500	1440900	Elm uses Elm package, so we actually don't use NPM.
1440900	1445820	But all of the half a million packages on NPM aren't directly available.
1445820	1448700	And so some people look at that and they're like, well, you're a crazy person.
1448700	1452780	That's like, obviously, you need that to have something nice.
1452780	1456980	And the thing is that because we have all the static analysis tools, it makes sense to
1456980	1459180	use them in Elm package.
1459180	1466580	So for example, if I say Elm package diff Elm laying core, which is the core library,
1466580	1471660	then I'm going to take a recent release with the most recent release.
1471660	1476580	It's going to tell me all the things that have changed between those two versions.
1476580	1483420	And so I can do it on another package of mine, Elm tools parser.
1483420	1488060	And the first release and the second release, I made a decent amount of changes.
1488060	1489960	So here it can say, hey, this is a major change.
1489960	1490960	You added all this stuff.
1490960	1492460	You removed all this stuff.
1492460	1494060	Here are the things you changed.
1494060	1498220	And so for any package in the Elm ecosystem, you can ask this question and see exactly
1498220	1499340	what changed.
1499340	1503900	And what that means is when someone's publishing, I can say, okay, I looked at your code.
1503900	1505500	You have made major changes.
1505500	1508180	This is the new version number that you will be using.
1508180	1511180	And so it's not a matter of like, oh, do people get semantic version?
1511180	1512180	Do they like it or not?
1512180	1514620	It's just like the Elm ecosystem uses semantic versioning.
1514620	1519340	And if you're making a major change, everyone's going to get that major change.
1519340	1524460	And so what that means for the whole ecosystem is there's no way to sneak through like, well,
1524460	1528180	I know it'll break people's code, but it doesn't feel important.
1528180	1531100	It doesn't feel major.
1531100	1534500	And so I think, again, so this is like using the ML style syntax.
1534500	1538780	I know that this means that Elm will have a smaller ecosystem and the community will
1538780	1540220	grow more slowly.
1540220	1544900	But I think it makes sense because of how everything fits together to make that investment
1544900	1548820	and 10 years down the line, 20 years down the line, it's going to be something really,
1548820	1555940	really special, even if it wasn't like as big as possible at the very beginning.
1555940	1561060	So yeah, and to come back to the ML style syntax, when all your values are immutable,
1561060	1562460	that syntax makes a lot of sense.
1562460	1567740	So when it fits into the whole picture here, it becomes a coherent whole.
1567740	1574180	And so I want to sort of end by saying, not one thing is better than the other, but these
1574180	1578420	features that we arrived at independently seem like good ideas.
1578420	1580020	And there are lots of ways to do it.
1580020	1583660	And the thing you want to be thinking about is, how does this fit in with other features?
1583660	1585520	What are the trade-offs that I need to make?
1585520	1586620	What are my constraints?
1586620	1587620	What are my preferences?
1587620	1589440	How's that going to work for me?
1589440	1593700	And if you're interested in Elm at all, you can learn more at the guide, which is trying
1593700	1597500	to go through a bunch of these things, or on the subreddit or on Slack.
1597500	1600220	And people are really friendly and happy to help out.
1600220	1604180	And I encourage you, if you're interested, do it with a spirit of kindness and learning,
1604180	1607620	because there are some people who really, really love Elm and they're really happy to
1607620	1608620	be helpful.
1608620	1609620	And I just want...
1609620	1612980	I like them a lot, and I want them to have fun.
1612980	1616820	And so ultimately, my goal with this project is I want to make web programming delightful.
1616820	1623220	So even if Elm isn't for you, we're trying to do our best, and we'll hopefully get there.
1623220	1628140	So I hope that spirit is how you come to these.
1628140	1631740	And so ultimately, if the goal is to make web programming delightful, that will look
1631740	1632980	different for different people.
1632980	1638660	So if you go check out ClosureScript or Elm or TypeScript or Flow or React or whatever
1638660	1642100	it is, you're going to find a place that works well for you.
1642100	1646380	And it's not that someone's right, someone's wrong, it's that there are different constellations
1646380	1650060	of features that work together in a particular way.
1650060	1654500	And there are certain parts that overlap, and those seem like a good idea.
1654500	1655500	Thank you.
1655500	1656500	Thank you.
1656500	1657500	Thank you.
1657500	1658500	Thank you.
1658500	1659500	Thank you.
1659500	1660500	Thank you.
1660500	1661500	Thank you.
1661500	1662500	Thank you.
1662500	1663500	Thank you.
1663500	1664500	Thank you.
1664500	1665500	Thank you.
1665500	1666500	Thank you.
1666500	1667500	Thank you.
1667500	1668500	Thank you.
1668500	1669500	Thank you.
1669500	1670500	Thank you.
1670500	1671500	Thank you.
1671500	1672500	Thank you.
1672500	1673500	Thank you.
1673500	1674500	Thank you.
1674500	1675500	Thank you.
1675500	1676500	Thank you.
1676500	1677500	Thank you.
1677500	1678500	Thank you.
1678500	1679500	Thank you.
1679500	1680500	Thank you.
1680500	1681500	Thank you.
1681500	1682500	Thank you.
