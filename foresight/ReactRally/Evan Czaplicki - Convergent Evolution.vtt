WEBVTT

00:00.000 --> 00:11.640
Okay, I'm Evan Treplicchi, I designed the Elm programming language, and what I wanted

00:11.640 --> 00:17.280
to talk about is people often wonder, they see similarities between React and Elm, both

00:17.280 --> 00:21.400
these things are about creating things in browsers, these interactive applications,

00:21.400 --> 00:25.480
and people say, well, which came first, where, who originated this idea, that idea?

00:25.480 --> 00:30.360
And so I thought I could offer a sort of unique perspective on how these things evolved in

00:30.360 --> 00:31.360
the timeline.

00:31.360 --> 00:37.800
And what's interesting is that usually it's a case of conversion evolution, where something

00:37.800 --> 00:43.040
was going on inside Facebook, I didn't know about it, and independently I was working

00:43.040 --> 00:49.680
on my thesis at college, coming up with certain ideas, and it just turns out we came to a

00:49.680 --> 00:53.920
lot of similar conclusions, and so I want to emphasize those and sort of see what that

00:53.920 --> 00:55.040
might mean.

00:55.040 --> 01:01.080
And I want to start by giving an example of conversion evolution, just from real life,

01:01.080 --> 01:05.960
which is you have these sort of very different creatures, birds and bees, that both can fly.

01:05.960 --> 01:11.440
They both somehow ended up with wings, even though millions of years ago they diverged

01:11.440 --> 01:13.040
evolutionarily.

01:13.040 --> 01:19.800
And one thing that a developer might say when they see this connection is like, well, who

01:19.800 --> 01:20.800
did it better?

01:20.800 --> 01:25.640
Who did wings best?

01:25.640 --> 01:32.440
And so one person may say, okay, well, birds, they have feathers, that's pretty cool.

01:32.440 --> 01:34.160
Whereas wings, they have chitin.

01:34.160 --> 01:37.960
And so with feathers, well, if it gets damaged, it can be replaced.

01:37.960 --> 01:41.680
Whereas with chitin, if it gets chipped, it's just chipped, it's just bad now.

01:41.680 --> 01:48.880
So like, but I think this is kind of a silly question, and in this context, like, it sort

01:48.920 --> 01:50.760
of seems ridiculous.

01:50.760 --> 01:55.480
And I prefer to ask the question, how does this design fit in with all the other features?

01:55.480 --> 02:00.440
So if we take a step back and we look at bees, well, bees have the exoskeleton, that's also

02:00.440 --> 02:01.600
made of chitin.

02:01.600 --> 02:04.800
And so the fact that the same material can be what their wings are made of, there's no

02:04.800 --> 02:09.760
extra nutrients that they need to be able to fly, it's kind of a beautiful design.

02:09.760 --> 02:13.640
They also have an open circulatory system, so instead of a heart, they just have like,

02:13.640 --> 02:19.280
they don't have blood, it's just like hemolymph seeps through their shell.

02:19.280 --> 02:25.360
Point is, they don't live a super long time because that's not an ideal system.

02:25.360 --> 02:32.280
But for the purpose of a bee, it's like, I'm going to be alive for six weeks, maybe a couple

02:32.280 --> 02:36.040
months, and if a wing gets chipped in that time, it's going to serve its purpose and

02:36.040 --> 02:38.520
do a really good job in that context.

02:38.520 --> 02:43.440
Whereas with a bird, you have hollow bones, and hey, if the bone breaks, the wing is broken

02:43.440 --> 02:49.520
too, so that thing about feathers wasn't such a nice thing.

02:49.520 --> 02:52.800
And they have a four-chamber heart, so they can be much bigger, so they can use their

02:52.800 --> 02:57.480
wings to kill bugs, so they're using the wings in very different ways.

02:57.480 --> 03:01.760
The big point here is that flying seems like a good idea.

03:01.760 --> 03:05.200
And the fact that these two creatures came to the same conclusion in these totally different

03:05.200 --> 03:13.240
ways with these totally different other feature sets, it's suggested like flying, it's pretty

03:13.240 --> 03:15.400
neat.

03:15.400 --> 03:19.480
And so when it comes to implementation details, I prefer to ask, how does this fit with other

03:19.480 --> 03:23.120
features rather than who did flying best?

03:23.120 --> 03:28.920
So with that context, we're going to try to do a similar thing with React and Elm.

03:28.920 --> 03:32.640
So one of the features that React and Elm have in common is virtual DOM.

03:32.640 --> 03:39.160
And so when I was working on Elm from the very beginning, we were having functions that

03:39.160 --> 03:42.680
would create this data structure, and then I would just, based on that data structure,

03:42.680 --> 03:46.000
we built the DOM on every frame.

03:46.000 --> 03:50.280
And I was like, that's kind of crazy, I don't know if that's going to work out.

03:50.280 --> 03:53.800
And so over time, I was like, okay, well, I can incrementally do it so it doesn't flash,

03:53.800 --> 03:56.200
and I can preserve some information.

03:56.200 --> 04:00.960
And subsequently, I saw that React did the same thing, and that sort of really validated

04:00.960 --> 04:07.680
that design that I think anyone I asked who would have said, that's obviously crazy.

04:07.680 --> 04:12.440
And so when you look into the details in virtual DOM, with React, you have a special

04:12.440 --> 04:17.240
syntax called JSX, so it's giving you this familiar HTML in your JavaScript code.

04:17.240 --> 04:20.360
Whereas in Elm, we don't have a special syntax, and this is something that people, when they

04:20.360 --> 04:24.960
come to Elm, will find weird, it's like, well, how do I set this up?

04:24.960 --> 04:31.520
So I want to show a little program here.

04:31.520 --> 04:40.640
So I'm going to take a program from the Elm guide.

04:40.640 --> 04:48.400
That's just like the very beginner thing, and we'll take a look at it.

04:48.400 --> 04:53.080
Tell me when you can see this.

04:53.080 --> 04:56.080
Okay.

04:56.080 --> 05:00.240
This is the problem of having the massive high resolution.

05:00.240 --> 05:03.040
It's quite the right size.

05:03.040 --> 05:04.200
Okay.

05:04.200 --> 05:08.680
So I'm going to build that, and we can look at how the view code works here.

05:08.680 --> 05:12.480
So rather than an HTML-style thing, we're saying, okay, I have a div, and it has three

05:12.480 --> 05:15.840
children, a button, a div, and another button.

05:15.840 --> 05:23.960
And when I actually go look at that code, we can see, okay, not the most exciting beginner

05:23.960 --> 05:26.760
program, but it does something.

05:26.760 --> 05:30.840
And when we look back at the view code, we see that exact structure.

05:30.840 --> 05:31.840
We have the button.

05:31.840 --> 05:33.720
It's got a negative sign.

05:33.720 --> 05:37.320
And what's neat about doing this all in Elm is anything you want to do, you can do it

05:37.320 --> 05:38.320
in Elm syntax.

05:38.320 --> 05:45.240
So rather than saying I want a number here, I can say maybe I want a list, and I want

05:45.240 --> 05:52.360
to view a dot for every number from one to the count.

05:52.360 --> 05:56.880
And then I can just make an Elm function of view dot that takes the number, and instead

05:56.880 --> 06:00.680
it just says, I'll show a star here.

06:00.680 --> 06:08.440
And so when I compile that, I can go and look, and oops.

06:08.440 --> 06:11.080
So now I see dots when it shows up.

06:11.080 --> 06:12.440
So it's quite a nice thing.

06:12.440 --> 06:16.560
So if I want to use any feature of Elm, it's sort of like the templating language for Elm

06:16.560 --> 06:18.800
is Elm.

06:18.800 --> 06:22.000
So I'm not here to say one way is better or not.

06:22.000 --> 06:24.040
It's better to look at it in context.

06:24.040 --> 06:29.120
And so in the React world, you're using JavaScript, you're using the C-style syntax.

06:29.120 --> 06:33.760
And this goes back to 1972 at least when C came out.

06:33.760 --> 06:39.560
And so JavaScript, if you believe the origin myths, could have had a Lisp syntax.

06:39.560 --> 06:43.720
But for the sake of familiarity, went with the C-style syntax that everyone was familiar

06:43.720 --> 06:44.720
with.

06:44.720 --> 06:50.040
So essentially, this is an ecosystem that's putting a premium or using familiarity as

06:50.040 --> 06:56.600
an onboarding tool to make people feel confident and dive into things and use that to learn.

06:56.600 --> 06:58.840
Whereas in Elm, I have an ML-style syntax.

06:58.840 --> 07:06.160
And interestingly, that goes back to 1973 at least, but it's just not as widely known.

07:06.160 --> 07:09.720
And so to say, well, which of these is better is kind of like saying, well, is Arabic script

07:09.720 --> 07:11.720
better or is Korean script better?

07:11.720 --> 07:13.760
It's like, well, which one do you know?

07:13.760 --> 07:18.640
And you probably will prefer that one, at least at first.

07:18.640 --> 07:23.840
And so I know that Elm pays a familiarity cost in making this choice.

07:23.840 --> 07:27.440
But I think it fits in with all the other Elm features that we're going to see.

07:27.440 --> 07:33.840
And so I'm willing to pay that hit in maybe where our community grows a little bit slower.

07:33.840 --> 07:35.440
But it makes this coherent whole.

07:35.440 --> 07:38.400
And so when a question comes up, should we use something like JSX?

07:38.400 --> 07:46.560
It's like, well, we've already sort of committed to not using syntax as an onboarding technique.

07:46.560 --> 07:49.880
So we'll come back to that and see how it fits in more.

07:49.880 --> 07:54.240
So another thing that React and Elm have in common is unidirectional flow.

07:54.240 --> 08:03.280
And so for me, I first sort of, this became a distinct concept for me when I was at Hacker

08:03.280 --> 08:06.120
School, now Recurse Center back in 2014.

08:06.120 --> 08:08.800
And a student there made this game called Bessel.

08:08.800 --> 08:14.760
And this student had never done like functional programming before.

08:14.760 --> 08:17.840
They had done Python, I think, with the language that they knew.

08:17.840 --> 08:21.120
And while I was there for the two weeks, they wanted to try something out.

08:21.120 --> 08:24.320
So they made this little game where you have to go through the blood vessel.

08:24.320 --> 08:27.600
And if you run into the wall, you explode.

08:27.600 --> 08:29.200
And so this is like a weak project.

08:29.200 --> 08:32.200
He's just trying functional programming for the first time.

08:32.200 --> 08:34.400
And at the end, he asked me for a code review.

08:34.400 --> 08:38.640
And what was crazy was his code was really good.

08:38.640 --> 08:43.960
And that's not to say like, it's just like when you start, I found it surprising that

08:43.960 --> 08:46.360
someone starting functional programming for the first time would end up with a program

08:46.360 --> 08:48.400
where like, that's how I would architect it.

08:48.400 --> 08:51.960
I have no concerns, like that's great.

08:51.960 --> 08:54.760
And it matched how I would structure my code as well.

08:54.760 --> 08:56.680
And I thought that was just a me thing.

08:56.680 --> 08:59.920
And so this was when I started to notice, okay, there's this pattern that sort of Elm

08:59.920 --> 09:01.920
wants us to write code in a certain way.

09:01.920 --> 09:05.880
So this is when the Elm architecture sort of got a name, even though everyone who used

09:05.880 --> 09:09.040
it, who used Elm had been doing this kind of pattern.

09:09.040 --> 09:14.400
And the idea is that you have a model that says what's going on in your application.

09:14.400 --> 09:15.800
And it creates HTML.

09:15.800 --> 09:17.680
That gets sent to the Elm runtime system.

09:17.680 --> 09:21.440
It renders it, deals with the DOM, does the diffing, all that kind of stuff.

09:21.440 --> 09:23.640
And then it'll send back messages.

09:23.640 --> 09:25.600
And that is how you update your model.

09:25.600 --> 09:30.000
You send new HTML, and the cycle just goes round and round and round.

09:30.000 --> 09:33.600
And when I first presented this kind of stuff, again, this was something that seemed like

09:33.600 --> 09:35.640
a crazy idea.

09:35.640 --> 09:37.240
And from the JavaScript world, it looked crazy.

09:37.240 --> 09:38.760
From the functional world, it looked crazy.

09:38.760 --> 09:41.600
Everyone was like, this is silly.

09:41.600 --> 09:47.040
And so when I saw that React had this thing called, they were promoting this thing called

09:47.040 --> 09:50.720
Flux, I was like, okay, that actually sort of validates this design.

09:50.720 --> 09:54.160
And it sort of arose, I think, separately.

09:54.160 --> 10:02.880
Since Flux, there's been more, it hasn't been as much independent development.

10:02.880 --> 10:05.320
So people have seen Elm architecture and things as neat.

10:05.320 --> 10:09.000
But so let's look at what the Elm architecture looked like in Elm.

10:09.000 --> 10:14.600
So we can go back to our little counter program.

10:14.600 --> 10:17.160
And we have a model.

10:17.160 --> 10:20.000
And in this case, it's just a number that we're counting up.

10:20.000 --> 10:21.240
And we have a way to update.

10:21.240 --> 10:24.840
So if we want to increment our document, we have messages like that.

10:24.840 --> 10:29.560
And when we handle them in each case, and then we can put those in here.

10:29.560 --> 10:35.760
So if I wanted to add a new feature, I could say, okay, I want a thing called reset.

10:35.760 --> 10:39.640
And it's going to be a reset button.

10:39.640 --> 10:49.080
And I need to add in that kind of message and handle that case.

10:49.080 --> 10:59.520
And if we go look at it, now I have my same thing and I can reset back.

10:59.520 --> 11:02.200
So it sort of gives structure to your program.

11:02.200 --> 11:05.480
And so this is a really simple example, but it actually shows up in every Elm program

11:05.480 --> 11:06.480
ever.

11:06.480 --> 11:18.240
So if we go look at the to do MVC code, we see the structure again.

11:18.240 --> 11:19.640
So we start with a model.

11:19.640 --> 11:21.960
In this case, it's a bit more complicated.

11:21.960 --> 11:26.600
So let's open it up.

11:26.600 --> 11:31.240
So here we can say hello in all of this.

11:31.240 --> 11:34.080
So we have a model of, we have a list of entries.

11:34.080 --> 11:35.600
We have a field that you can type in.

11:35.600 --> 11:37.720
We have what things are visible or not.

11:37.720 --> 11:38.720
We have our entries.

11:38.720 --> 11:39.720
That has a description.

11:39.720 --> 11:40.720
Is it completed?

11:40.720 --> 11:42.560
Is it being edited?

11:42.560 --> 11:46.120
We have our messages, all the things that you can do to this program.

11:46.120 --> 11:48.820
And a way to update our program.

11:48.820 --> 11:53.640
And we have a view, which again is using this Elm as the HTML syntax.

11:53.640 --> 11:56.360
So you can see, okay, I've got a div.

11:56.360 --> 11:57.360
It's got some attributes.

11:57.360 --> 12:00.000
It's got some children.

12:00.000 --> 12:03.280
And we're just using Elm functions to create the different parts.

12:03.280 --> 12:06.200
So here's where the text input is, that kind of thing.

12:06.200 --> 12:11.200
And no matter what level of crazy program you go to, so another program you could look

12:11.200 --> 12:16.720
at is Richard did this real world thing that's been sort of going around the internet in

12:16.720 --> 12:17.720
Elm.

12:17.720 --> 12:20.960
And you see the same pattern again, where there's the model, there's the update, there's

12:20.960 --> 12:21.960
a view.

12:21.960 --> 12:24.800
And one thing that's really neat about this is when you come to an Elm project, you're

12:24.800 --> 12:29.040
immediately oriented, because you're like, every Elm project starts this way, and then

12:29.040 --> 12:33.240
they're just functions out from there.

12:33.240 --> 12:39.840
So when you go and put this in context, in the react world, my understanding is that

12:39.840 --> 12:42.440
not everyone is into unidirectional flow.

12:42.440 --> 12:47.400
And I think that's because components are an important idea in the react world.

12:47.400 --> 12:53.080
And when I look at components, I see local, state, methods, like getters and setters to

12:53.080 --> 12:54.080
deal with it.

12:54.280 --> 12:56.680
Whenever I think of that, I think of an object.

12:56.680 --> 12:58.760
We've got local, state, getters and setters.

12:58.760 --> 13:01.200
It's sort of an object-oriented way of thinking.

13:01.200 --> 13:04.480
And that's one way to approach things, and this unidirectional flow is another way to

13:04.480 --> 13:05.480
approach it.

13:05.480 --> 13:09.560
Whereas in Elm, we don't have the objects, we just have functions.

13:09.560 --> 13:13.040
And if that's your only tool, you're going to end up with a unidirectional flow.

13:13.040 --> 13:17.240
So because of the feature set of Elm, it really makes sense that that's how all Elm programs

13:17.240 --> 13:18.240
work.

13:18.240 --> 13:22.320
And because the feature set of react, it makes sense that people might mix and match and use

13:22.320 --> 13:27.880
some depending on what their case is, depending on what their preferences are.

13:27.880 --> 13:33.080
Another case that people ended up at independently is immutability.

13:33.080 --> 13:38.560
So Elm is a language where every single value in the whole language is immutable.

13:38.560 --> 13:44.880
And so I think this became important in the react world because react has this thing called

13:44.880 --> 13:52.920
shouldComponentUpdate, and it looks something like this, where you have some function and

13:52.920 --> 13:56.080
you're saying, all right, did any of these properties change?

13:56.080 --> 13:58.600
If so, we should update.

13:58.600 --> 14:00.280
And I just want to do a quick poll.

14:00.280 --> 14:04.440
How many people have had a bug where they changed the component, but they forgot to

14:04.440 --> 14:09.560
change the shouldComponentUpdate, and then they were like, so how many people out there?

14:09.560 --> 14:14.640
Okay, was it a fun bug?

14:15.400 --> 14:19.280
This can be something that's super frustrating because you're like, I swear this code works,

14:19.280 --> 14:25.160
my test is fine, and you just don't think to look at this piece of code.

14:25.160 --> 14:32.320
And so ClosureScript, David Nolan came up with this idea of putting pairing shouldComponentUpdate

14:32.320 --> 14:34.160
with immutability.

14:34.160 --> 14:38.480
And so the basic realization is if you have an immutable value and you say, well, is this

14:38.480 --> 14:40.240
reference the same as that reference?

14:40.240 --> 14:43.200
No one could have changed it in the meantime, so it must be the same.

14:43.200 --> 14:49.680
And so it's a really nice way of making this reliable, even as the shape of that value changes.

14:49.680 --> 14:53.240
And so he wrote about this in this blog post, and I really want to give him credit for this

14:53.240 --> 14:58.640
idea because I think, one, it popularized, or like it made immutability palatable, like

14:58.640 --> 15:03.640
not an insane person idea in the JavaScript world, and it really made space for functional

15:03.640 --> 15:08.360
languages to have a place in front of development.

15:08.360 --> 15:10.520
So in Elm, everything's immutable.

15:10.520 --> 15:14.560
So I saw David Nolan's idea here, and I was like, great, like, what is this, how does

15:14.560 --> 15:18.720
this come to Elm in the Elmi way?

15:18.720 --> 15:21.400
And so we have this thing called lazy.

15:21.400 --> 15:29.880
So if we go look at our toDo app, I'm going to remove the lazies real quick so we can

15:29.880 --> 15:31.300
see it without.

15:31.300 --> 15:37.320
So here I have a div, it holds a section, and it has three subnodes.

15:37.320 --> 15:42.200
And so for the first one, I'm calling a function, and I'm giving it some field value, and that's

15:42.200 --> 15:43.960
what's going to show up in there.

15:43.960 --> 15:48.160
And so essentially what's happening when I add lazy is I'm saying, instead of calling

15:48.160 --> 15:53.920
this function now, building the virtual DOM, doing the diff, seeing if there's patches,

15:53.920 --> 15:58.960
and finding out yes or no, I'm going to say, okay, hold on to this function, hold on to

15:58.960 --> 16:04.400
this value, and when it's time to diff, I'll say, are these the same as last time?

16:04.400 --> 16:07.920
And if it's the same function by reference, same argument by reference, I'll just skip

16:07.920 --> 16:11.000
the whole thing because I know the results are going to be the same.

16:11.000 --> 16:16.600
And because everything in Elm is immutable, this is known to be safe.

16:16.600 --> 16:21.480
You can just trust, you can sprinkle in this lazy operator wherever you want.

16:21.480 --> 16:25.960
And so if we look around this file more, I use it in other places, so each entry in

16:25.960 --> 16:28.560
the list is lazy.

16:28.560 --> 16:33.400
This is the footer where there's some controls, so if we look at the app again, there's these

16:33.400 --> 16:38.720
kinds of things at the bottom.

16:38.720 --> 16:40.840
So that can be lazy too.

16:40.840 --> 16:44.200
And what's neat about this is it's not tied to the component itself, it's just if you

16:44.200 --> 16:50.960
have a function and you have some arguments, that can become a lazy piece of the structure.

16:50.960 --> 16:58.840
Okay, so another thing that React in Elm have in common that's maybe more, one of the more

16:58.840 --> 17:01.960
controversial things is static analysis.

17:01.960 --> 17:08.160
And so when I use that term, I mean how can computers look at your code and give you helpful

17:08.160 --> 17:15.760
timely hints that help make your code better and don't waste your time or don't give you

17:15.760 --> 17:17.280
good feedback.

17:17.280 --> 17:22.320
And so for React that may be a linter is a version of this, something like flow, something

17:22.320 --> 17:28.620
like TypeScript, giving this extra machine help to improve your code.

17:28.620 --> 17:32.660
So in Elm, static analysis has been sort of an important part from the very beginning.

17:32.660 --> 17:37.140
So in Elm, Compiler is able to give you these hints.

17:37.140 --> 17:39.620
And I want to look at a couple and try to put in context.

17:39.620 --> 17:45.020
It's something that's hard to, I feel like Elm programs have like a personal relationship

17:45.020 --> 17:49.320
with this, but it doesn't translate well, so I'm going to do my best.

17:49.320 --> 17:53.580
So we have here this little expression where I'm trying to join the strings Alice and Bob

17:53.580 --> 17:57.660
with the number four and it's saying, okay, function join is expecting the first argument

17:57.660 --> 17:59.900
to be a string, but in fact it's a number.

17:59.900 --> 18:03.860
So it's sort of giving you this very human explanation of what's going wrong in that

18:03.860 --> 18:04.860
code.

18:04.860 --> 18:07.300
And the neat thing is as your code gets bigger and bigger and bigger, the error may not be

18:07.300 --> 18:11.100
as simple as just it's the number four here, but you have some variable and through some

18:11.100 --> 18:14.820
other fact in your code base, it will be a number.

18:14.820 --> 18:16.460
It'll catch that as well.

18:16.460 --> 18:21.620
So in a little bit more complex case here, we have an if expression and in the body we're

18:21.620 --> 18:24.860
saying is the length, what is the length of this?

18:24.860 --> 18:28.300
And so Elm is saying, hey, this needs to be a Boolean value.

18:28.300 --> 18:30.940
You've given me an integer, but I need a Boolean.

18:30.940 --> 18:33.500
And what's nice about this one is it has the little hint.

18:33.500 --> 18:38.740
So I know that when people come to Elm, there's certain mistakes that are like super predictable,

18:38.740 --> 18:41.100
like lots of people are coming from Python, JavaScript.

18:41.100 --> 18:44.740
And so I try to give a hint that, hey, Elm doesn't have truthiness such that instance

18:44.740 --> 18:46.020
strings are automatically converted.

18:46.020 --> 18:48.300
You need to do that conversion explicitly.

18:48.300 --> 18:52.900
So I'm trying to give as much scaffolding as possible so that you know, okay, list length,

18:52.900 --> 18:53.900
is it equal to zero?

18:53.940 --> 18:58.460
Less than one is greater than 10, like be explicit about that kind of thing.

18:58.460 --> 19:03.300
Now I think those examples don't really show what this means in a large setting.

19:03.300 --> 19:07.660
So I work at this company called NoWriteInc, and we've been using Elm for about two years

19:07.660 --> 19:14.980
now, and we have about 200,000 lines of Elm code, and there's been zero runtime exceptions

19:14.980 --> 19:17.100
in production.

19:17.100 --> 19:23.260
And so the kinds of things that this is catching is really, really extensive, and it's doing

19:23.260 --> 19:27.540
it in a way that feels like a pair of programmers saying, hey, did you think about this case?

19:27.540 --> 19:29.660
Did you think about that case?

19:29.660 --> 19:34.220
And so one question you might ask is, how do you know it's zero, like is your URL misconfigured

19:34.220 --> 19:37.100
so you're just not getting any reports?

19:37.100 --> 19:40.620
There is legacy JavaScript code that will throw exceptions from time to time.

19:40.620 --> 19:44.060
So we know errors can be detected.

19:44.060 --> 19:52.740
So I want to show in a larger program what it means.

19:52.740 --> 19:58.620
And so I accidentally, okay, no, I think this is good, I think this is good.

19:58.620 --> 20:09.500
So let's say I want to add a new control, so rather than just having all the things,

20:09.500 --> 20:16.380
what's active, what's completed, I want to show if something's complex.

20:16.380 --> 20:21.860
So here I can say, here's my controls for which things are visible, and I'm going to

20:21.980 --> 20:29.620
add an extra case for, is it a complex task?

20:29.620 --> 20:41.380
So what's nice in Elm is you can kind of just run the compiler and see what it tells you.

20:41.380 --> 20:45.700
So in this case, it's saying, hey, this complex thing, I don't know what it is.

20:45.700 --> 20:49.020
Is it supposed to be an import?

20:49.180 --> 20:53.860
So where did the code go?

20:53.860 --> 20:59.460
Okay, so it's suggesting like, hey, you need to define complex before you use it.

20:59.460 --> 21:03.620
So one of the visibility options is, okay, I want complex stuff.

21:03.620 --> 21:06.460
So I added that, let's see if that works.

21:06.460 --> 21:12.180
And it's saying, hey, one of your cases doesn't cover that scenario, so case, visibility.

21:12.180 --> 21:14.780
So in this case, we're changing it to strings.

21:14.780 --> 21:18.740
So in the complex case, we're just going to say complex.

21:18.740 --> 21:23.140
And one question you may have here is, why turn it to strings that looks the same as

21:23.140 --> 21:24.140
the value?

21:24.140 --> 21:27.700
So your designer may say, I don't want it to be complex, I want it to be called like

21:27.700 --> 21:29.900
fancy tasks.

21:29.900 --> 21:32.180
And so you can change that without changing all your code.

21:32.180 --> 21:37.660
So I think this decoupling is important even if you're not using it at the start.

21:37.660 --> 21:39.820
So we'll stick with complex for now.

21:39.820 --> 21:42.140
So let's just ask the compiler again what's going on.

21:42.140 --> 21:45.740
Okay, this case doesn't handle all the possibilities.

21:45.740 --> 21:50.340
It's saying, hey, you need to handle complex in particular.

21:50.340 --> 21:52.700
So let's go find that.

21:52.700 --> 21:58.660
Okay, and so this is a function that's figuring out, given the visibility, is the entry visible

21:58.660 --> 21:59.660
or not?

21:59.660 --> 22:06.500
So in the complex case, we can say, is the length of the to-do description?

22:06.500 --> 22:10.180
Oh, yeah, and I want to make all sorts of typos here.

22:10.180 --> 22:11.700
So I misspell that.

22:11.700 --> 22:14.060
I'm going to misspell this thing.

22:14.060 --> 22:25.740
And the description, that was a legit typo, I didn't mean, is less than 15, let's say.

22:25.740 --> 22:30.700
So some of these errors are bound to happen eventually.

22:30.700 --> 22:33.020
So let's see what the compiler tells me about it.

22:33.020 --> 22:39.140
So it's saying, hey, I found this pattern complex.

22:39.140 --> 22:44.900
Maybe you want this other idea, okay, that is exactly what I want, in fact.

22:44.900 --> 22:45.900
And here's a naming error.

22:45.900 --> 22:50.820
You use toad, maybe you want one of these other things, and it tries to find names in

22:50.820 --> 22:53.180
scope that are close.

22:53.180 --> 22:55.140
So I want to do.

22:55.140 --> 22:56.860
So okay, I fixed all the errors.

22:56.860 --> 22:57.860
Let's see.

22:57.860 --> 23:02.820
And it's saying, hey, to-do doesn't have a thing called description, but this is close

23:02.820 --> 23:06.420
to a field that it could have, so maybe you want description.

23:06.420 --> 23:12.260
And so for each of those errors, had this been a string, it just would have been wrong.

23:12.260 --> 23:16.740
And then some point you find that error through some bug report.

23:16.740 --> 23:19.500
And then you find out that this was also misspelled.

23:19.500 --> 23:23.300
And then that would have been, I can't access a field on an undefined value.

23:23.300 --> 23:27.340
And then you would find out, okay, this thing is spelled wrong, and that's going to actually

23:27.340 --> 23:29.100
be an undefined.

23:29.100 --> 23:30.100
And what is string.length?

23:30.100 --> 23:31.100
Do you want undefined?

23:31.100 --> 23:33.980
I don't know.

23:33.980 --> 23:37.020
So it's catching all these things in a really nice way.

23:37.020 --> 23:41.420
And so as your program gets bigger, it's catching all these things still across a whole code

23:41.420 --> 23:42.420
base.

23:42.420 --> 23:46.580
So for the 200,000 lines that Norbert Inc. has, this is the kind of help they're getting

23:46.580 --> 23:48.180
along the way.

23:48.180 --> 23:52.780
And so because that's such an important part of Elm, it sort of fits in with, like, another

23:52.780 --> 23:57.500
question people have is, React uses NPM for all of its package management.

23:57.500 --> 24:00.900
Elm uses Elm package, so we actually don't use NPM.

24:00.900 --> 24:05.820
But all of the half a million packages on NPM aren't directly available.

24:05.820 --> 24:08.700
And so some people look at that and they're like, well, you're a crazy person.

24:08.700 --> 24:12.780
That's like, obviously, you need that to have something nice.

24:12.780 --> 24:16.980
And the thing is that because we have all the static analysis tools, it makes sense to

24:16.980 --> 24:19.180
use them in Elm package.

24:19.180 --> 24:26.580
So for example, if I say Elm package diff Elm laying core, which is the core library,

24:26.580 --> 24:31.660
then I'm going to take a recent release with the most recent release.

24:31.660 --> 24:36.580
It's going to tell me all the things that have changed between those two versions.

24:36.580 --> 24:43.420
And so I can do it on another package of mine, Elm tools parser.

24:43.420 --> 24:48.060
And the first release and the second release, I made a decent amount of changes.

24:48.060 --> 24:49.960
So here it can say, hey, this is a major change.

24:49.960 --> 24:50.960
You added all this stuff.

24:50.960 --> 24:52.460
You removed all this stuff.

24:52.460 --> 24:54.060
Here are the things you changed.

24:54.060 --> 24:58.220
And so for any package in the Elm ecosystem, you can ask this question and see exactly

24:58.220 --> 24:59.340
what changed.

24:59.340 --> 25:03.900
And what that means is when someone's publishing, I can say, okay, I looked at your code.

25:03.900 --> 25:05.500
You have made major changes.

25:05.500 --> 25:08.180
This is the new version number that you will be using.

25:08.180 --> 25:11.180
And so it's not a matter of like, oh, do people get semantic version?

25:11.180 --> 25:12.180
Do they like it or not?

25:12.180 --> 25:14.620
It's just like the Elm ecosystem uses semantic versioning.

25:14.620 --> 25:19.340
And if you're making a major change, everyone's going to get that major change.

25:19.340 --> 25:24.460
And so what that means for the whole ecosystem is there's no way to sneak through like, well,

25:24.460 --> 25:28.180
I know it'll break people's code, but it doesn't feel important.

25:28.180 --> 25:31.100
It doesn't feel major.

25:31.100 --> 25:34.500
And so I think, again, so this is like using the ML style syntax.

25:34.500 --> 25:38.780
I know that this means that Elm will have a smaller ecosystem and the community will

25:38.780 --> 25:40.220
grow more slowly.

25:40.220 --> 25:44.900
But I think it makes sense because of how everything fits together to make that investment

25:44.900 --> 25:48.820
and 10 years down the line, 20 years down the line, it's going to be something really,

25:48.820 --> 25:55.940
really special, even if it wasn't like as big as possible at the very beginning.

25:55.940 --> 26:01.060
So yeah, and to come back to the ML style syntax, when all your values are immutable,

26:01.060 --> 26:02.460
that syntax makes a lot of sense.

26:02.460 --> 26:07.740
So when it fits into the whole picture here, it becomes a coherent whole.

26:07.740 --> 26:14.180
And so I want to sort of end by saying, not one thing is better than the other, but these

26:14.180 --> 26:18.420
features that we arrived at independently seem like good ideas.

26:18.420 --> 26:20.020
And there are lots of ways to do it.

26:20.020 --> 26:23.660
And the thing you want to be thinking about is, how does this fit in with other features?

26:23.660 --> 26:25.520
What are the trade-offs that I need to make?

26:25.520 --> 26:26.620
What are my constraints?

26:26.620 --> 26:27.620
What are my preferences?

26:27.620 --> 26:29.440
How's that going to work for me?

26:29.440 --> 26:33.700
And if you're interested in Elm at all, you can learn more at the guide, which is trying

26:33.700 --> 26:37.500
to go through a bunch of these things, or on the subreddit or on Slack.

26:37.500 --> 26:40.220
And people are really friendly and happy to help out.

26:40.220 --> 26:44.180
And I encourage you, if you're interested, do it with a spirit of kindness and learning,

26:44.180 --> 26:47.620
because there are some people who really, really love Elm and they're really happy to

26:47.620 --> 26:48.620
be helpful.

26:48.620 --> 26:49.620
And I just want...

26:49.620 --> 26:52.980
I like them a lot, and I want them to have fun.

26:52.980 --> 26:56.820
And so ultimately, my goal with this project is I want to make web programming delightful.

26:56.820 --> 27:03.220
So even if Elm isn't for you, we're trying to do our best, and we'll hopefully get there.

27:03.220 --> 27:08.140
So I hope that spirit is how you come to these.

27:08.140 --> 27:11.740
And so ultimately, if the goal is to make web programming delightful, that will look

27:11.740 --> 27:12.980
different for different people.

27:12.980 --> 27:18.660
So if you go check out ClosureScript or Elm or TypeScript or Flow or React or whatever

27:18.660 --> 27:22.100
it is, you're going to find a place that works well for you.

27:22.100 --> 27:26.380
And it's not that someone's right, someone's wrong, it's that there are different constellations

27:26.380 --> 27:30.060
of features that work together in a particular way.

27:30.060 --> 27:34.500
And there are certain parts that overlap, and those seem like a good idea.

27:34.500 --> 27:35.500
Thank you.

27:35.500 --> 27:36.500
Thank you.

27:36.500 --> 27:37.500
Thank you.

27:37.500 --> 27:38.500
Thank you.

27:38.500 --> 27:39.500
Thank you.

27:39.500 --> 27:40.500
Thank you.

27:40.500 --> 27:41.500
Thank you.

27:41.500 --> 27:42.500
Thank you.

27:42.500 --> 27:43.500
Thank you.

27:43.500 --> 27:44.500
Thank you.

27:44.500 --> 27:45.500
Thank you.

27:45.500 --> 27:46.500
Thank you.

27:46.500 --> 27:47.500
Thank you.

27:47.500 --> 27:48.500
Thank you.

27:48.500 --> 27:49.500
Thank you.

27:49.500 --> 27:50.500
Thank you.

27:50.500 --> 27:51.500
Thank you.

27:51.500 --> 27:52.500
Thank you.

27:52.500 --> 27:53.500
Thank you.

27:53.500 --> 27:54.500
Thank you.

27:54.500 --> 27:55.500
Thank you.

27:55.500 --> 27:56.500
Thank you.

27:56.500 --> 27:57.500
Thank you.

27:57.500 --> 27:58.500
Thank you.

27:58.500 --> 27:59.500
Thank you.

27:59.500 --> 28:00.500
Thank you.

28:00.500 --> 28:01.500
Thank you.

28:01.500 --> 28:02.500
Thank you.

