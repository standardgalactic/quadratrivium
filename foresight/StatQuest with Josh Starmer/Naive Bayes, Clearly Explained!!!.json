{"text": " I'm at home during lockdown, working on my stat quest, yeah. I'm at home during lockdown, working on my stat quest, yeah. Stat quest. Hello, I'm Josh Starmer, and welcome to Stat Quest. Today we're going to talk about naive bays, and it's going to be clearly explained. This stat quest is sponsored by JADBIO. Just add data, and their automatic machine learning algorithms will do the rest of the work for you. For more details, follow the link in the pinned comment below. Note, when most people want to learn about naive bays, they want to learn about the multinomial naive bays classifier, and that's what we talk about in this video. However, just know that there is another commonly used version of naive bays, called Gaussian naive bays classification, and I cover that in a follow-up stat quest. So check that one out when you're done with this quest. BAM. Now, imagine we received normal messages from friends and family. And we also received spam, unwanted messages that are usually scams or unsolicited advertisements. And we wanted to filter out the spam messages. So, the first thing we do is make a histogram of all the words that occur in the normal messages from friends and family. We can use the histogram to calculate the probabilities of seeing each word, given that it was in a normal message. For example, the probability we see the word deer, given that we saw it in a normal message, is 8. The total number of times deer occurred in normal messages, divided by 17, the total number of words in all of the normal messages. And that gives us 0.47. So let's put that over the word deer so we don't forget it. Likewise, the probability that we see the word friend, given that we saw it in a normal message, is 5. The total number of times friend occurred in normal messages, divided by 17, the total number of words in all of the normal messages. And that gives us 0.29. So let's put that over the word friend so we don't forget it. Likewise, the probability that we see the word lunch, given that it is in a normal message, is 0.18. And the probability that we see the word money, given that it is in a normal message, is 0.06. Now we make a histogram of all the words that occur in the spam, and calculate the probability of seeing the word deer, given that we saw it in the spam. And that is 2, the number of times we saw deer in the spam, divided by 7, the total number of words in the spam. And that gives us 0.29. Likewise, we calculate the probability of seeing the remaining words, given that they were in the spam. Bam! Now, because these histograms are taking up a lot of space, let's get rid of them, but keep the probabilities. Oh no, it's the dreaded terminology alert. Because we have calculated the probabilities of discrete, individual words, and not the probability of something continuous, like weight or height, these probabilities are also called likelihoods. I mention this because some tutorials say these are probabilities, and others say they are likelihoods. In this case, the terms are interchangeable, so don't sweat it. We'll talk more about probabilities versus likelihoods when we talk about Gaussian naive Bayes in the follow-up quest. Now, imagine we got a new message that said, Dear Friend, and we want to decide if it is a normal message or spam. We start with an initial guess about the probability that any message, regardless of what it says, is a normal message. This guess can be any probability that we want, but a common guess is estimated from the training data. For example, since 8 of the 12 messages are normal messages, our initial guess will be 0.67. So let's put that under the normal messages so we don't forget it. Oh no, it's another dreaded terminology alert. The initial guess that we observe a normal message is called a prior probability. Now we multiply the initial guess by the probability that the word Dear occurs in a normal message, and the probability that the word Friend occurs in a normal message. Now we just plug in the values that we worked out earlier and do the math, beep boop beep boop beep, and we get 0.09. We can think of 0.09 as the score that Dear Friend gets if it is a normal message. However, technically, it is proportional to the probability that the message is normal, given that it says Dear Friend. So let's put that on top of the normal messages so we don't forget. Now, just like we did before, we start with an initial guess about the probability that any message, regardless of what it says, is spam. And just like before, the guess can be any probability we want, but a common guess is estimated from the training data. And since 4 of the 12 messages are spam, our initial guess will be 0.33. So let's put that under the spam so we don't forget it. Now we multiply that initial guess by the probability that the word Dear occurs in spam, and the probability that the word Friend occurs in spam. Now we just plug in the values that we worked out earlier and do the math, beep boop beep boop beep, and we get 0.01. Like before, we can think of 0.01 as the score that Dear Friend gets if it is spam. However, technically, it is proportional to the probability that the message is spam, given that it says Dear Friend. And because the score we got for normal message, 0.09, is greater than the score we got for spam, 0.01, we will decide that Dear Friend is a normal message. Double BAM! Now, before we move on to a slightly more complex situation, let's review what we've done so far. We started with histograms of all the words in the normal messages, and all of the words in the spam. Then we calculated the probabilities of seeing each word, given that we saw the word in either a normal message or spam. Then we made an initial guess about the probability of seeing a normal message. This guess can be anything between 0 and 1, but we based ours on the classifications in the training dataset. Then we made the same sort of guess about the probability of seeing spam. Then we multiplied our initial guess that the message was normal, by the probabilities of seeing the words Dear and Friend, given that the message was normal. Then we multiplied our initial guess that the message was spam, by the probabilities of seeing the words Dear and Friend, given that the message was spam. Then we did the math and decided that Dear Friend was a normal message, 0.09 is greater than 0.01. Now that we understand the basics of how naive Bayes classification works, let's look at a slightly more complicated example. This time, let's try to classify this message, lunch, money, money, money, money. Note, this message contains the word money four times. And since the probability of seeing the word money is much higher in spam than in normal messages, then it seems reasonable to predict that this message will end up being spam. So let's do the math. Calculating the score for a normal message works just like before. We start with the initial guess, then we multiply it by the probability we see lunch, given that it is in a normal message. And the probability we see money four times, given that it is in a normal message. When we do the math, we get this tiny number. However, when we do the same calculation for spam, we get 0. This is because the probability we see lunch in spam is 0, since it was not in the training data. And when we plug in 0 for the probability we see lunch, given that it was in spam, then it doesn't matter what value we picked for the initial guess that the message was spam, and it doesn't matter what the probability is that we see money, given that the message was spam, because anything times 0 is 0. In other words, if a message contains the word lunch, it will not be classified as spam. And that means we will always classify the messages with lunch in them as normal, no matter how many times we see the word money. And that's a problem. To work around this problem, people usually add one count, represented by a black box, to each word in the histograms. Note, the number of counts we add to each word is typically referred to with the Greek letter, alpha. In this case, alpha equals 1, but we could have said it to anything. Anyway, now when we calculate the probabilities of observing each word, we never get 0. For example, the probability of seeing lunch, given that it is in spam, is 1, divided by 7, the total number of words in spam, plus 4, the extra counts that we added. And that gives us 0.09. Note, adding counts to each word does not change our initial guess that a message is normal, or the initial guess that the message is spam, because adding a count to each word did not change the number of messages in the training dataset that are normal. Or the number of messages that are spam. Now when we calculate the scores for this message, we still get a small number for the normal message, but now when we calculate the value for spam, we get a value greater than 0. And since the value for spam is greater than the one for a normal message, we classify the message as spam. Spam! Now let's talk about why Naive Bayes is naive. The thing that makes Naive Bayes so naive is that it treats all word orders the same. For example, the normal message score for the phrase dear friend is the exact same for the score for friend dear. In other words, regardless of how the words are ordered, we get 0.08. Treating all word orders equal is very different from how you and I communicate. Every language has grammar rules and common phrases, but Naive Bayes ignores all of that stuff. Instead, Naive Bayes treats a language like it is just a bag full of words and each message is a random handful of them. Naive Bayes ignores all the rules because keeping track of every single reasonable phrase in a language would be impossible. That said, even though Naive Bayes is naive, it tends to perform surprisingly well when separating normal messages from spam. In machine learning lingo, we'd say that by ignoring relationships among words, Naive Bayes has high bias. But because it works well in practice, Naive Bayes has low variance. Shameless self-promotion If you are not already familiar with the terms bias and variance, check out the quest. The link is in the description below. Triple spam! Oh no, it's one last shameless self-promotion. One awesome way to support StatQuest is to purchase the Naive Bayes StatQuest Study Guide. It has everything you need to study for an exam or job interview. It's eight pages of total awesomeness. And while you're there, check out the other StatQuest Study Guides. There's something for everyone. Hooray! We've made it to the end of another exciting StatQuest. If you like this StatQuest and want to see more, please subscribe. And if you want to support StatQuest, consider contributing to my Patreon campaign, becoming a channel member, buying one or two of my original songs or a t-shirt or a hoodie, or just donate. The links are in the description below. Alright, until next time, quest on!", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 6.0, "text": " I'm at home during lockdown, working on my stat quest, yeah.", "tokens": [50364, 286, 478, 412, 1280, 1830, 17267, 11, 1364, 322, 452, 2219, 866, 11, 1338, 13, 50664], "temperature": 0.0, "avg_logprob": -0.22621849308843198, "compression_ratio": 1.7556818181818181, "no_speech_prob": 0.08869989961385727}, {"id": 1, "seek": 0, "start": 6.0, "end": 12.0, "text": " I'm at home during lockdown, working on my stat quest, yeah.", "tokens": [50664, 286, 478, 412, 1280, 1830, 17267, 11, 1364, 322, 452, 2219, 866, 11, 1338, 13, 50964], "temperature": 0.0, "avg_logprob": -0.22621849308843198, "compression_ratio": 1.7556818181818181, "no_speech_prob": 0.08869989961385727}, {"id": 2, "seek": 0, "start": 12.0, "end": 14.0, "text": " Stat quest.", "tokens": [50964, 16249, 866, 13, 51064], "temperature": 0.0, "avg_logprob": -0.22621849308843198, "compression_ratio": 1.7556818181818181, "no_speech_prob": 0.08869989961385727}, {"id": 3, "seek": 0, "start": 14.0, "end": 18.0, "text": " Hello, I'm Josh Starmer, and welcome to Stat Quest.", "tokens": [51064, 2425, 11, 286, 478, 9785, 5705, 936, 11, 293, 2928, 281, 16249, 8800, 13, 51264], "temperature": 0.0, "avg_logprob": -0.22621849308843198, "compression_ratio": 1.7556818181818181, "no_speech_prob": 0.08869989961385727}, {"id": 4, "seek": 0, "start": 18.0, "end": 24.0, "text": " Today we're going to talk about naive bays, and it's going to be clearly explained.", "tokens": [51264, 2692, 321, 434, 516, 281, 751, 466, 29052, 272, 3772, 11, 293, 309, 311, 516, 281, 312, 4448, 8825, 13, 51564], "temperature": 0.0, "avg_logprob": -0.22621849308843198, "compression_ratio": 1.7556818181818181, "no_speech_prob": 0.08869989961385727}, {"id": 5, "seek": 0, "start": 24.0, "end": 28.0, "text": " This stat quest is sponsored by JADBIO.", "tokens": [51564, 639, 2219, 866, 307, 16621, 538, 508, 6112, 11291, 46, 13, 51764], "temperature": 0.0, "avg_logprob": -0.22621849308843198, "compression_ratio": 1.7556818181818181, "no_speech_prob": 0.08869989961385727}, {"id": 6, "seek": 2800, "start": 28.0, "end": 34.0, "text": " Just add data, and their automatic machine learning algorithms will do the rest of the work for you.", "tokens": [50364, 1449, 909, 1412, 11, 293, 641, 12509, 3479, 2539, 14642, 486, 360, 264, 1472, 295, 264, 589, 337, 291, 13, 50664], "temperature": 0.0, "avg_logprob": -0.05918614069620768, "compression_ratio": 1.618811881188119, "no_speech_prob": 0.03512992709875107}, {"id": 7, "seek": 2800, "start": 34.0, "end": 39.0, "text": " For more details, follow the link in the pinned comment below.", "tokens": [50664, 1171, 544, 4365, 11, 1524, 264, 2113, 294, 264, 33802, 2871, 2507, 13, 50914], "temperature": 0.0, "avg_logprob": -0.05918614069620768, "compression_ratio": 1.618811881188119, "no_speech_prob": 0.03512992709875107}, {"id": 8, "seek": 2800, "start": 39.0, "end": 48.0, "text": " Note, when most people want to learn about naive bays, they want to learn about the multinomial naive bays classifier,", "tokens": [50914, 11633, 11, 562, 881, 561, 528, 281, 1466, 466, 29052, 272, 3772, 11, 436, 528, 281, 1466, 466, 264, 45872, 47429, 29052, 272, 3772, 1508, 9902, 11, 51364], "temperature": 0.0, "avg_logprob": -0.05918614069620768, "compression_ratio": 1.618811881188119, "no_speech_prob": 0.03512992709875107}, {"id": 9, "seek": 2800, "start": 48.0, "end": 50.0, "text": " and that's what we talk about in this video.", "tokens": [51364, 293, 300, 311, 437, 321, 751, 466, 294, 341, 960, 13, 51464], "temperature": 0.0, "avg_logprob": -0.05918614069620768, "compression_ratio": 1.618811881188119, "no_speech_prob": 0.03512992709875107}, {"id": 10, "seek": 5000, "start": 50.0, "end": 59.0, "text": " However, just know that there is another commonly used version of naive bays, called Gaussian naive bays classification,", "tokens": [50364, 2908, 11, 445, 458, 300, 456, 307, 1071, 12719, 1143, 3037, 295, 29052, 272, 3772, 11, 1219, 39148, 29052, 272, 3772, 21538, 11, 50814], "temperature": 0.0, "avg_logprob": -0.1262074915568034, "compression_ratio": 1.4696969696969697, "no_speech_prob": 0.31393104791641235}, {"id": 11, "seek": 5000, "start": 59.0, "end": 62.0, "text": " and I cover that in a follow-up stat quest.", "tokens": [50814, 293, 286, 2060, 300, 294, 257, 1524, 12, 1010, 2219, 866, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1262074915568034, "compression_ratio": 1.4696969696969697, "no_speech_prob": 0.31393104791641235}, {"id": 12, "seek": 5000, "start": 62.0, "end": 66.0, "text": " So check that one out when you're done with this quest.", "tokens": [50964, 407, 1520, 300, 472, 484, 562, 291, 434, 1096, 365, 341, 866, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1262074915568034, "compression_ratio": 1.4696969696969697, "no_speech_prob": 0.31393104791641235}, {"id": 13, "seek": 5000, "start": 66.0, "end": 68.0, "text": " BAM.", "tokens": [51164, 363, 2865, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1262074915568034, "compression_ratio": 1.4696969696969697, "no_speech_prob": 0.31393104791641235}, {"id": 14, "seek": 5000, "start": 68.0, "end": 73.0, "text": " Now, imagine we received normal messages from friends and family.", "tokens": [51264, 823, 11, 3811, 321, 4613, 2710, 7897, 490, 1855, 293, 1605, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1262074915568034, "compression_ratio": 1.4696969696969697, "no_speech_prob": 0.31393104791641235}, {"id": 15, "seek": 7300, "start": 73.0, "end": 81.0, "text": " And we also received spam, unwanted messages that are usually scams or unsolicited advertisements.", "tokens": [50364, 400, 321, 611, 4613, 24028, 11, 33745, 7897, 300, 366, 2673, 795, 4070, 420, 2693, 7940, 1226, 42897, 13, 50764], "temperature": 0.0, "avg_logprob": -0.030816517092964867, "compression_ratio": 1.6946902654867257, "no_speech_prob": 0.1776752471923828}, {"id": 16, "seek": 7300, "start": 81.0, "end": 85.0, "text": " And we wanted to filter out the spam messages.", "tokens": [50764, 400, 321, 1415, 281, 6608, 484, 264, 24028, 7897, 13, 50964], "temperature": 0.0, "avg_logprob": -0.030816517092964867, "compression_ratio": 1.6946902654867257, "no_speech_prob": 0.1776752471923828}, {"id": 17, "seek": 7300, "start": 85.0, "end": 94.0, "text": " So, the first thing we do is make a histogram of all the words that occur in the normal messages from friends and family.", "tokens": [50964, 407, 11, 264, 700, 551, 321, 360, 307, 652, 257, 49816, 295, 439, 264, 2283, 300, 5160, 294, 264, 2710, 7897, 490, 1855, 293, 1605, 13, 51414], "temperature": 0.0, "avg_logprob": -0.030816517092964867, "compression_ratio": 1.6946902654867257, "no_speech_prob": 0.1776752471923828}, {"id": 18, "seek": 7300, "start": 94.0, "end": 102.0, "text": " We can use the histogram to calculate the probabilities of seeing each word, given that it was in a normal message.", "tokens": [51414, 492, 393, 764, 264, 49816, 281, 8873, 264, 33783, 295, 2577, 1184, 1349, 11, 2212, 300, 309, 390, 294, 257, 2710, 3636, 13, 51814], "temperature": 0.0, "avg_logprob": -0.030816517092964867, "compression_ratio": 1.6946902654867257, "no_speech_prob": 0.1776752471923828}, {"id": 19, "seek": 10200, "start": 102.0, "end": 112.0, "text": " For example, the probability we see the word deer, given that we saw it in a normal message, is 8.", "tokens": [50364, 1171, 1365, 11, 264, 8482, 321, 536, 264, 1349, 17120, 11, 2212, 300, 321, 1866, 309, 294, 257, 2710, 3636, 11, 307, 1649, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08864887461942784, "compression_ratio": 1.6526315789473685, "no_speech_prob": 0.0052193240262568}, {"id": 20, "seek": 10200, "start": 112.0, "end": 123.0, "text": " The total number of times deer occurred in normal messages, divided by 17, the total number of words in all of the normal messages.", "tokens": [50864, 440, 3217, 1230, 295, 1413, 17120, 11068, 294, 2710, 7897, 11, 6666, 538, 3282, 11, 264, 3217, 1230, 295, 2283, 294, 439, 295, 264, 2710, 7897, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08864887461942784, "compression_ratio": 1.6526315789473685, "no_speech_prob": 0.0052193240262568}, {"id": 21, "seek": 10200, "start": 123.0, "end": 127.0, "text": " And that gives us 0.47.", "tokens": [51414, 400, 300, 2709, 505, 1958, 13, 14060, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08864887461942784, "compression_ratio": 1.6526315789473685, "no_speech_prob": 0.0052193240262568}, {"id": 22, "seek": 10200, "start": 127.0, "end": 131.0, "text": " So let's put that over the word deer so we don't forget it.", "tokens": [51614, 407, 718, 311, 829, 300, 670, 264, 1349, 17120, 370, 321, 500, 380, 2870, 309, 13, 51814], "temperature": 0.0, "avg_logprob": -0.08864887461942784, "compression_ratio": 1.6526315789473685, "no_speech_prob": 0.0052193240262568}, {"id": 23, "seek": 13100, "start": 131.0, "end": 141.0, "text": " Likewise, the probability that we see the word friend, given that we saw it in a normal message, is 5.", "tokens": [50364, 30269, 11, 264, 8482, 300, 321, 536, 264, 1349, 1277, 11, 2212, 300, 321, 1866, 309, 294, 257, 2710, 3636, 11, 307, 1025, 13, 50864], "temperature": 0.0, "avg_logprob": -0.034862585628733914, "compression_ratio": 1.6770833333333333, "no_speech_prob": 0.038451120257377625}, {"id": 24, "seek": 13100, "start": 141.0, "end": 151.0, "text": " The total number of times friend occurred in normal messages, divided by 17, the total number of words in all of the normal messages.", "tokens": [50864, 440, 3217, 1230, 295, 1413, 1277, 11068, 294, 2710, 7897, 11, 6666, 538, 3282, 11, 264, 3217, 1230, 295, 2283, 294, 439, 295, 264, 2710, 7897, 13, 51364], "temperature": 0.0, "avg_logprob": -0.034862585628733914, "compression_ratio": 1.6770833333333333, "no_speech_prob": 0.038451120257377625}, {"id": 25, "seek": 13100, "start": 151.0, "end": 155.0, "text": " And that gives us 0.29.", "tokens": [51364, 400, 300, 2709, 505, 1958, 13, 11871, 13, 51564], "temperature": 0.0, "avg_logprob": -0.034862585628733914, "compression_ratio": 1.6770833333333333, "no_speech_prob": 0.038451120257377625}, {"id": 26, "seek": 13100, "start": 155.0, "end": 160.0, "text": " So let's put that over the word friend so we don't forget it.", "tokens": [51564, 407, 718, 311, 829, 300, 670, 264, 1349, 1277, 370, 321, 500, 380, 2870, 309, 13, 51814], "temperature": 0.0, "avg_logprob": -0.034862585628733914, "compression_ratio": 1.6770833333333333, "no_speech_prob": 0.038451120257377625}, {"id": 27, "seek": 16000, "start": 160.0, "end": 168.0, "text": " Likewise, the probability that we see the word lunch, given that it is in a normal message, is 0.18.", "tokens": [50364, 30269, 11, 264, 8482, 300, 321, 536, 264, 1349, 6349, 11, 2212, 300, 309, 307, 294, 257, 2710, 3636, 11, 307, 1958, 13, 6494, 13, 50764], "temperature": 0.0, "avg_logprob": -0.04784208972279618, "compression_ratio": 1.920731707317073, "no_speech_prob": 0.0044672563672065735}, {"id": 28, "seek": 16000, "start": 168.0, "end": 176.0, "text": " And the probability that we see the word money, given that it is in a normal message, is 0.06.", "tokens": [50764, 400, 264, 8482, 300, 321, 536, 264, 1349, 1460, 11, 2212, 300, 309, 307, 294, 257, 2710, 3636, 11, 307, 1958, 13, 12791, 13, 51164], "temperature": 0.0, "avg_logprob": -0.04784208972279618, "compression_ratio": 1.920731707317073, "no_speech_prob": 0.0044672563672065735}, {"id": 29, "seek": 16000, "start": 176.0, "end": 186.0, "text": " Now we make a histogram of all the words that occur in the spam, and calculate the probability of seeing the word deer,", "tokens": [51164, 823, 321, 652, 257, 49816, 295, 439, 264, 2283, 300, 5160, 294, 264, 24028, 11, 293, 8873, 264, 8482, 295, 2577, 264, 1349, 17120, 11, 51664], "temperature": 0.0, "avg_logprob": -0.04784208972279618, "compression_ratio": 1.920731707317073, "no_speech_prob": 0.0044672563672065735}, {"id": 30, "seek": 18600, "start": 186.0, "end": 190.0, "text": " given that we saw it in the spam.", "tokens": [50364, 2212, 300, 321, 1866, 309, 294, 264, 24028, 13, 50564], "temperature": 0.0, "avg_logprob": -0.06398422718048095, "compression_ratio": 1.701219512195122, "no_speech_prob": 0.030205758288502693}, {"id": 31, "seek": 18600, "start": 190.0, "end": 200.0, "text": " And that is 2, the number of times we saw deer in the spam, divided by 7, the total number of words in the spam.", "tokens": [50564, 400, 300, 307, 568, 11, 264, 1230, 295, 1413, 321, 1866, 17120, 294, 264, 24028, 11, 6666, 538, 1614, 11, 264, 3217, 1230, 295, 2283, 294, 264, 24028, 13, 51064], "temperature": 0.0, "avg_logprob": -0.06398422718048095, "compression_ratio": 1.701219512195122, "no_speech_prob": 0.030205758288502693}, {"id": 32, "seek": 18600, "start": 200.0, "end": 204.0, "text": " And that gives us 0.29.", "tokens": [51064, 400, 300, 2709, 505, 1958, 13, 11871, 13, 51264], "temperature": 0.0, "avg_logprob": -0.06398422718048095, "compression_ratio": 1.701219512195122, "no_speech_prob": 0.030205758288502693}, {"id": 33, "seek": 18600, "start": 204.0, "end": 211.0, "text": " Likewise, we calculate the probability of seeing the remaining words, given that they were in the spam.", "tokens": [51264, 30269, 11, 321, 8873, 264, 8482, 295, 2577, 264, 8877, 2283, 11, 2212, 300, 436, 645, 294, 264, 24028, 13, 51614], "temperature": 0.0, "avg_logprob": -0.06398422718048095, "compression_ratio": 1.701219512195122, "no_speech_prob": 0.030205758288502693}, {"id": 34, "seek": 18600, "start": 211.0, "end": 214.0, "text": " Bam!", "tokens": [51614, 26630, 0, 51764], "temperature": 0.0, "avg_logprob": -0.06398422718048095, "compression_ratio": 1.701219512195122, "no_speech_prob": 0.030205758288502693}, {"id": 35, "seek": 21400, "start": 214.0, "end": 222.0, "text": " Now, because these histograms are taking up a lot of space, let's get rid of them, but keep the probabilities.", "tokens": [50364, 823, 11, 570, 613, 49816, 82, 366, 1940, 493, 257, 688, 295, 1901, 11, 718, 311, 483, 3973, 295, 552, 11, 457, 1066, 264, 33783, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07195661067962647, "compression_ratio": 1.6431924882629108, "no_speech_prob": 0.006287777330726385}, {"id": 36, "seek": 21400, "start": 222.0, "end": 226.0, "text": " Oh no, it's the dreaded terminology alert.", "tokens": [50764, 876, 572, 11, 309, 311, 264, 22236, 292, 27575, 9615, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07195661067962647, "compression_ratio": 1.6431924882629108, "no_speech_prob": 0.006287777330726385}, {"id": 37, "seek": 21400, "start": 226.0, "end": 236.0, "text": " Because we have calculated the probabilities of discrete, individual words, and not the probability of something continuous, like weight or height,", "tokens": [50964, 1436, 321, 362, 15598, 264, 33783, 295, 27706, 11, 2609, 2283, 11, 293, 406, 264, 8482, 295, 746, 10957, 11, 411, 3364, 420, 6681, 11, 51464], "temperature": 0.0, "avg_logprob": -0.07195661067962647, "compression_ratio": 1.6431924882629108, "no_speech_prob": 0.006287777330726385}, {"id": 38, "seek": 21400, "start": 236.0, "end": 241.0, "text": " these probabilities are also called likelihoods.", "tokens": [51464, 613, 33783, 366, 611, 1219, 22119, 82, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07195661067962647, "compression_ratio": 1.6431924882629108, "no_speech_prob": 0.006287777330726385}, {"id": 39, "seek": 24100, "start": 241.0, "end": 249.0, "text": " I mention this because some tutorials say these are probabilities, and others say they are likelihoods.", "tokens": [50364, 286, 2152, 341, 570, 512, 17616, 584, 613, 366, 33783, 11, 293, 2357, 584, 436, 366, 22119, 82, 13, 50764], "temperature": 0.0, "avg_logprob": -0.0818420708179474, "compression_ratio": 1.5687203791469195, "no_speech_prob": 0.0028005405329167843}, {"id": 40, "seek": 24100, "start": 249.0, "end": 254.0, "text": " In this case, the terms are interchangeable, so don't sweat it.", "tokens": [50764, 682, 341, 1389, 11, 264, 2115, 366, 30358, 712, 11, 370, 500, 380, 11872, 309, 13, 51014], "temperature": 0.0, "avg_logprob": -0.0818420708179474, "compression_ratio": 1.5687203791469195, "no_speech_prob": 0.0028005405329167843}, {"id": 41, "seek": 24100, "start": 254.0, "end": 263.0, "text": " We'll talk more about probabilities versus likelihoods when we talk about Gaussian naive Bayes in the follow-up quest.", "tokens": [51014, 492, 603, 751, 544, 466, 33783, 5717, 22119, 82, 562, 321, 751, 466, 39148, 29052, 7840, 279, 294, 264, 1524, 12, 1010, 866, 13, 51464], "temperature": 0.0, "avg_logprob": -0.0818420708179474, "compression_ratio": 1.5687203791469195, "no_speech_prob": 0.0028005405329167843}, {"id": 42, "seek": 24100, "start": 263.0, "end": 267.0, "text": " Now, imagine we got a new message that said,", "tokens": [51464, 823, 11, 3811, 321, 658, 257, 777, 3636, 300, 848, 11, 51664], "temperature": 0.0, "avg_logprob": -0.0818420708179474, "compression_ratio": 1.5687203791469195, "no_speech_prob": 0.0028005405329167843}, {"id": 43, "seek": 26700, "start": 267.0, "end": 274.0, "text": " Dear Friend, and we want to decide if it is a normal message or spam.", "tokens": [50364, 14383, 22812, 11, 293, 321, 528, 281, 4536, 498, 309, 307, 257, 2710, 3636, 420, 24028, 13, 50714], "temperature": 0.0, "avg_logprob": -0.04133450984954834, "compression_ratio": 1.646067415730337, "no_speech_prob": 0.054964397102594376}, {"id": 44, "seek": 26700, "start": 274.0, "end": 283.0, "text": " We start with an initial guess about the probability that any message, regardless of what it says, is a normal message.", "tokens": [50714, 492, 722, 365, 364, 5883, 2041, 466, 264, 8482, 300, 604, 3636, 11, 10060, 295, 437, 309, 1619, 11, 307, 257, 2710, 3636, 13, 51164], "temperature": 0.0, "avg_logprob": -0.04133450984954834, "compression_ratio": 1.646067415730337, "no_speech_prob": 0.054964397102594376}, {"id": 45, "seek": 26700, "start": 283.0, "end": 290.0, "text": " This guess can be any probability that we want, but a common guess is estimated from the training data.", "tokens": [51164, 639, 2041, 393, 312, 604, 8482, 300, 321, 528, 11, 457, 257, 2689, 2041, 307, 14109, 490, 264, 3097, 1412, 13, 51514], "temperature": 0.0, "avg_logprob": -0.04133450984954834, "compression_ratio": 1.646067415730337, "no_speech_prob": 0.054964397102594376}, {"id": 46, "seek": 29000, "start": 290.0, "end": 299.0, "text": " For example, since 8 of the 12 messages are normal messages, our initial guess will be 0.67.", "tokens": [50364, 1171, 1365, 11, 1670, 1649, 295, 264, 2272, 7897, 366, 2710, 7897, 11, 527, 5883, 2041, 486, 312, 1958, 13, 22452, 13, 50814], "temperature": 0.0, "avg_logprob": -0.038792710046510435, "compression_ratio": 1.5483870967741935, "no_speech_prob": 0.026753172278404236}, {"id": 47, "seek": 29000, "start": 299.0, "end": 304.0, "text": " So let's put that under the normal messages so we don't forget it.", "tokens": [50814, 407, 718, 311, 829, 300, 833, 264, 2710, 7897, 370, 321, 500, 380, 2870, 309, 13, 51064], "temperature": 0.0, "avg_logprob": -0.038792710046510435, "compression_ratio": 1.5483870967741935, "no_speech_prob": 0.026753172278404236}, {"id": 48, "seek": 29000, "start": 304.0, "end": 308.0, "text": " Oh no, it's another dreaded terminology alert.", "tokens": [51064, 876, 572, 11, 309, 311, 1071, 22236, 292, 27575, 9615, 13, 51264], "temperature": 0.0, "avg_logprob": -0.038792710046510435, "compression_ratio": 1.5483870967741935, "no_speech_prob": 0.026753172278404236}, {"id": 49, "seek": 29000, "start": 308.0, "end": 315.0, "text": " The initial guess that we observe a normal message is called a prior probability.", "tokens": [51264, 440, 5883, 2041, 300, 321, 11441, 257, 2710, 3636, 307, 1219, 257, 4059, 8482, 13, 51614], "temperature": 0.0, "avg_logprob": -0.038792710046510435, "compression_ratio": 1.5483870967741935, "no_speech_prob": 0.026753172278404236}, {"id": 50, "seek": 31500, "start": 315.0, "end": 322.0, "text": " Now we multiply the initial guess by the probability that the word Dear occurs in a normal message,", "tokens": [50364, 823, 321, 12972, 264, 5883, 2041, 538, 264, 8482, 300, 264, 1349, 14383, 11843, 294, 257, 2710, 3636, 11, 50714], "temperature": 0.0, "avg_logprob": -0.10784318640425399, "compression_ratio": 1.7875, "no_speech_prob": 0.003706775140017271}, {"id": 51, "seek": 31500, "start": 322.0, "end": 328.0, "text": " and the probability that the word Friend occurs in a normal message.", "tokens": [50714, 293, 264, 8482, 300, 264, 1349, 22812, 11843, 294, 257, 2710, 3636, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10784318640425399, "compression_ratio": 1.7875, "no_speech_prob": 0.003706775140017271}, {"id": 52, "seek": 31500, "start": 328.0, "end": 333.0, "text": " Now we just plug in the values that we worked out earlier and do the math,", "tokens": [51014, 823, 321, 445, 5452, 294, 264, 4190, 300, 321, 2732, 484, 3071, 293, 360, 264, 5221, 11, 51264], "temperature": 0.0, "avg_logprob": -0.10784318640425399, "compression_ratio": 1.7875, "no_speech_prob": 0.003706775140017271}, {"id": 53, "seek": 31500, "start": 333.0, "end": 339.0, "text": " beep boop beep boop beep, and we get 0.09.", "tokens": [51264, 28678, 748, 404, 28678, 748, 404, 28678, 11, 293, 321, 483, 1958, 13, 13811, 13, 51564], "temperature": 0.0, "avg_logprob": -0.10784318640425399, "compression_ratio": 1.7875, "no_speech_prob": 0.003706775140017271}, {"id": 54, "seek": 33900, "start": 339.0, "end": 346.0, "text": " We can think of 0.09 as the score that Dear Friend gets if it is a normal message.", "tokens": [50364, 492, 393, 519, 295, 1958, 13, 13811, 382, 264, 6175, 300, 14383, 22812, 2170, 498, 309, 307, 257, 2710, 3636, 13, 50714], "temperature": 0.0, "avg_logprob": -0.04993095950803895, "compression_ratio": 1.560693641618497, "no_speech_prob": 0.0023965593427419662}, {"id": 55, "seek": 33900, "start": 346.0, "end": 356.0, "text": " However, technically, it is proportional to the probability that the message is normal, given that it says Dear Friend.", "tokens": [50714, 2908, 11, 12120, 11, 309, 307, 24969, 281, 264, 8482, 300, 264, 3636, 307, 2710, 11, 2212, 300, 309, 1619, 14383, 22812, 13, 51214], "temperature": 0.0, "avg_logprob": -0.04993095950803895, "compression_ratio": 1.560693641618497, "no_speech_prob": 0.0023965593427419662}, {"id": 56, "seek": 33900, "start": 356.0, "end": 361.0, "text": " So let's put that on top of the normal messages so we don't forget.", "tokens": [51214, 407, 718, 311, 829, 300, 322, 1192, 295, 264, 2710, 7897, 370, 321, 500, 380, 2870, 13, 51464], "temperature": 0.0, "avg_logprob": -0.04993095950803895, "compression_ratio": 1.560693641618497, "no_speech_prob": 0.0023965593427419662}, {"id": 57, "seek": 36100, "start": 362.0, "end": 368.0, "text": " Now, just like we did before, we start with an initial guess about the probability that any message,", "tokens": [50414, 823, 11, 445, 411, 321, 630, 949, 11, 321, 722, 365, 364, 5883, 2041, 466, 264, 8482, 300, 604, 3636, 11, 50714], "temperature": 0.0, "avg_logprob": -0.05000205267043341, "compression_ratio": 1.6417910447761195, "no_speech_prob": 0.008314809761941433}, {"id": 58, "seek": 36100, "start": 368.0, "end": 372.0, "text": " regardless of what it says, is spam.", "tokens": [50714, 10060, 295, 437, 309, 1619, 11, 307, 24028, 13, 50914], "temperature": 0.0, "avg_logprob": -0.05000205267043341, "compression_ratio": 1.6417910447761195, "no_speech_prob": 0.008314809761941433}, {"id": 59, "seek": 36100, "start": 372.0, "end": 381.0, "text": " And just like before, the guess can be any probability we want, but a common guess is estimated from the training data.", "tokens": [50914, 400, 445, 411, 949, 11, 264, 2041, 393, 312, 604, 8482, 321, 528, 11, 457, 257, 2689, 2041, 307, 14109, 490, 264, 3097, 1412, 13, 51364], "temperature": 0.0, "avg_logprob": -0.05000205267043341, "compression_ratio": 1.6417910447761195, "no_speech_prob": 0.008314809761941433}, {"id": 60, "seek": 36100, "start": 381.0, "end": 389.0, "text": " And since 4 of the 12 messages are spam, our initial guess will be 0.33.", "tokens": [51364, 400, 1670, 1017, 295, 264, 2272, 7897, 366, 24028, 11, 527, 5883, 2041, 486, 312, 1958, 13, 10191, 13, 51764], "temperature": 0.0, "avg_logprob": -0.05000205267043341, "compression_ratio": 1.6417910447761195, "no_speech_prob": 0.008314809761941433}, {"id": 61, "seek": 38900, "start": 389.0, "end": 393.0, "text": " So let's put that under the spam so we don't forget it.", "tokens": [50364, 407, 718, 311, 829, 300, 833, 264, 24028, 370, 321, 500, 380, 2870, 309, 13, 50564], "temperature": 0.0, "avg_logprob": -0.041625236642771755, "compression_ratio": 1.7243243243243243, "no_speech_prob": 0.0006461564917117357}, {"id": 62, "seek": 38900, "start": 393.0, "end": 400.0, "text": " Now we multiply that initial guess by the probability that the word Dear occurs in spam,", "tokens": [50564, 823, 321, 12972, 300, 5883, 2041, 538, 264, 8482, 300, 264, 1349, 14383, 11843, 294, 24028, 11, 50914], "temperature": 0.0, "avg_logprob": -0.041625236642771755, "compression_ratio": 1.7243243243243243, "no_speech_prob": 0.0006461564917117357}, {"id": 63, "seek": 38900, "start": 400.0, "end": 406.0, "text": " and the probability that the word Friend occurs in spam.", "tokens": [50914, 293, 264, 8482, 300, 264, 1349, 22812, 11843, 294, 24028, 13, 51214], "temperature": 0.0, "avg_logprob": -0.041625236642771755, "compression_ratio": 1.7243243243243243, "no_speech_prob": 0.0006461564917117357}, {"id": 64, "seek": 38900, "start": 406.0, "end": 411.0, "text": " Now we just plug in the values that we worked out earlier and do the math,", "tokens": [51214, 823, 321, 445, 5452, 294, 264, 4190, 300, 321, 2732, 484, 3071, 293, 360, 264, 5221, 11, 51464], "temperature": 0.0, "avg_logprob": -0.041625236642771755, "compression_ratio": 1.7243243243243243, "no_speech_prob": 0.0006461564917117357}, {"id": 65, "seek": 38900, "start": 411.0, "end": 417.0, "text": " beep boop beep boop beep, and we get 0.01.", "tokens": [51464, 28678, 748, 404, 28678, 748, 404, 28678, 11, 293, 321, 483, 1958, 13, 10607, 13, 51764], "temperature": 0.0, "avg_logprob": -0.041625236642771755, "compression_ratio": 1.7243243243243243, "no_speech_prob": 0.0006461564917117357}, {"id": 66, "seek": 41700, "start": 417.0, "end": 425.0, "text": " Like before, we can think of 0.01 as the score that Dear Friend gets if it is spam.", "tokens": [50364, 1743, 949, 11, 321, 393, 519, 295, 1958, 13, 10607, 382, 264, 6175, 300, 14383, 22812, 2170, 498, 309, 307, 24028, 13, 50764], "temperature": 0.0, "avg_logprob": -0.03228111914646478, "compression_ratio": 1.6137566137566137, "no_speech_prob": 0.0038238621782511473}, {"id": 67, "seek": 41700, "start": 425.0, "end": 435.0, "text": " However, technically, it is proportional to the probability that the message is spam, given that it says Dear Friend.", "tokens": [50764, 2908, 11, 12120, 11, 309, 307, 24969, 281, 264, 8482, 300, 264, 3636, 307, 24028, 11, 2212, 300, 309, 1619, 14383, 22812, 13, 51264], "temperature": 0.0, "avg_logprob": -0.03228111914646478, "compression_ratio": 1.6137566137566137, "no_speech_prob": 0.0038238621782511473}, {"id": 68, "seek": 41700, "start": 435.0, "end": 445.0, "text": " And because the score we got for normal message, 0.09, is greater than the score we got for spam, 0.01,", "tokens": [51264, 400, 570, 264, 6175, 321, 658, 337, 2710, 3636, 11, 1958, 13, 13811, 11, 307, 5044, 813, 264, 6175, 321, 658, 337, 24028, 11, 1958, 13, 10607, 11, 51764], "temperature": 0.0, "avg_logprob": -0.03228111914646478, "compression_ratio": 1.6137566137566137, "no_speech_prob": 0.0038238621782511473}, {"id": 69, "seek": 44500, "start": 445.0, "end": 450.0, "text": " we will decide that Dear Friend is a normal message.", "tokens": [50364, 321, 486, 4536, 300, 14383, 22812, 307, 257, 2710, 3636, 13, 50614], "temperature": 0.0, "avg_logprob": -0.06164014171546613, "compression_ratio": 1.4831460674157304, "no_speech_prob": 0.020638011395931244}, {"id": 70, "seek": 44500, "start": 450.0, "end": 453.0, "text": " Double BAM!", "tokens": [50614, 16633, 363, 2865, 0, 50764], "temperature": 0.0, "avg_logprob": -0.06164014171546613, "compression_ratio": 1.4831460674157304, "no_speech_prob": 0.020638011395931244}, {"id": 71, "seek": 44500, "start": 453.0, "end": 461.0, "text": " Now, before we move on to a slightly more complex situation, let's review what we've done so far.", "tokens": [50764, 823, 11, 949, 321, 1286, 322, 281, 257, 4748, 544, 3997, 2590, 11, 718, 311, 3131, 437, 321, 600, 1096, 370, 1400, 13, 51164], "temperature": 0.0, "avg_logprob": -0.06164014171546613, "compression_ratio": 1.4831460674157304, "no_speech_prob": 0.020638011395931244}, {"id": 72, "seek": 44500, "start": 461.0, "end": 469.0, "text": " We started with histograms of all the words in the normal messages, and all of the words in the spam.", "tokens": [51164, 492, 1409, 365, 49816, 82, 295, 439, 264, 2283, 294, 264, 2710, 7897, 11, 293, 439, 295, 264, 2283, 294, 264, 24028, 13, 51564], "temperature": 0.0, "avg_logprob": -0.06164014171546613, "compression_ratio": 1.4831460674157304, "no_speech_prob": 0.020638011395931244}, {"id": 73, "seek": 46900, "start": 469.0, "end": 478.0, "text": " Then we calculated the probabilities of seeing each word, given that we saw the word in either a normal message or spam.", "tokens": [50364, 1396, 321, 15598, 264, 33783, 295, 2577, 1184, 1349, 11, 2212, 300, 321, 1866, 264, 1349, 294, 2139, 257, 2710, 3636, 420, 24028, 13, 50814], "temperature": 0.0, "avg_logprob": -0.0424197295616413, "compression_ratio": 1.9104477611940298, "no_speech_prob": 0.014060220681130886}, {"id": 74, "seek": 46900, "start": 478.0, "end": 484.0, "text": " Then we made an initial guess about the probability of seeing a normal message.", "tokens": [50814, 1396, 321, 1027, 364, 5883, 2041, 466, 264, 8482, 295, 2577, 257, 2710, 3636, 13, 51114], "temperature": 0.0, "avg_logprob": -0.0424197295616413, "compression_ratio": 1.9104477611940298, "no_speech_prob": 0.014060220681130886}, {"id": 75, "seek": 46900, "start": 484.0, "end": 492.0, "text": " This guess can be anything between 0 and 1, but we based ours on the classifications in the training dataset.", "tokens": [51114, 639, 2041, 393, 312, 1340, 1296, 1958, 293, 502, 11, 457, 321, 2361, 11896, 322, 264, 1508, 7833, 294, 264, 3097, 28872, 13, 51514], "temperature": 0.0, "avg_logprob": -0.0424197295616413, "compression_ratio": 1.9104477611940298, "no_speech_prob": 0.014060220681130886}, {"id": 76, "seek": 46900, "start": 492.0, "end": 498.0, "text": " Then we made the same sort of guess about the probability of seeing spam.", "tokens": [51514, 1396, 321, 1027, 264, 912, 1333, 295, 2041, 466, 264, 8482, 295, 2577, 24028, 13, 51814], "temperature": 0.0, "avg_logprob": -0.0424197295616413, "compression_ratio": 1.9104477611940298, "no_speech_prob": 0.014060220681130886}, {"id": 77, "seek": 49800, "start": 498.0, "end": 506.0, "text": " Then we multiplied our initial guess that the message was normal, by the probabilities of seeing the words Dear and Friend,", "tokens": [50364, 1396, 321, 17207, 527, 5883, 2041, 300, 264, 3636, 390, 2710, 11, 538, 264, 33783, 295, 2577, 264, 2283, 14383, 293, 22812, 11, 50764], "temperature": 1.0, "avg_logprob": -0.09783023527298851, "compression_ratio": 2.5, "no_speech_prob": 0.014059538021683693}, {"id": 78, "seek": 49800, "start": 506.0, "end": 509.0, "text": " given that the message was normal.", "tokens": [50764, 2212, 300, 264, 3636, 390, 2710, 13, 50914], "temperature": 1.0, "avg_logprob": -0.09783023527298851, "compression_ratio": 2.5, "no_speech_prob": 0.014059538021683693}, {"id": 79, "seek": 49800, "start": 509.0, "end": 514.0, "text": " Then we multiplied our initial guess that the message was spam,", "tokens": [50914, 1396, 321, 17207, 527, 5883, 2041, 300, 264, 3636, 390, 24028, 11, 51164], "temperature": 1.0, "avg_logprob": -0.09783023527298851, "compression_ratio": 2.5, "no_speech_prob": 0.014059538021683693}, {"id": 80, "seek": 49800, "start": 514.0, "end": 520.0, "text": " by the probabilities of seeing the words Dear and Friend, given that the message was spam.", "tokens": [51164, 538, 264, 33783, 295, 2577, 264, 2283, 14383, 293, 22812, 11, 2212, 300, 264, 3636, 390, 24028, 13, 51464], "temperature": 1.0, "avg_logprob": -0.09783023527298851, "compression_ratio": 2.5, "no_speech_prob": 0.014059538021683693}, {"id": 81, "seek": 49800, "start": 520.0, "end": 525.0, "text": " Then we did the math and decided that Dear Friend was a normal message,", "tokens": [51464, 1396, 321, 630, 264, 5221, 293, 3047, 300, 14383, 22812, 390, 257, 2710, 3636, 11, 51714], "temperature": 1.0, "avg_logprob": -0.09783023527298851, "compression_ratio": 2.5, "no_speech_prob": 0.014059538021683693}, {"id": 82, "seek": 52500, "start": 525.0, "end": 530.72, "text": " 0.09 is greater than 0.01.", "tokens": [50364, 1958, 13, 13811, 307, 5044, 813, 1958, 13, 10607, 13, 50650], "temperature": 0.0, "avg_logprob": -0.19438976049423218, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.11426129192113876}, {"id": 83, "seek": 52500, "start": 530.72, "end": 536.46, "text": " Now that we understand the basics of how naive Bayes classification works,", "tokens": [50650, 823, 300, 321, 1223, 264, 14688, 295, 577, 29052, 7840, 279, 21538, 1985, 11, 50937], "temperature": 0.0, "avg_logprob": -0.19438976049423218, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.11426129192113876}, {"id": 84, "seek": 52500, "start": 536.46, "end": 540.88, "text": " let's look at a slightly more complicated example.", "tokens": [50937, 718, 311, 574, 412, 257, 4748, 544, 6179, 1365, 13, 51158], "temperature": 0.0, "avg_logprob": -0.19438976049423218, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.11426129192113876}, {"id": 85, "seek": 52500, "start": 540.88, "end": 544.4, "text": " This time, let's try to classify this message,", "tokens": [51158, 639, 565, 11, 718, 311, 853, 281, 33872, 341, 3636, 11, 51334], "temperature": 0.0, "avg_logprob": -0.19438976049423218, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.11426129192113876}, {"id": 86, "seek": 52500, "start": 544.4, "end": 548.56, "text": " lunch, money, money, money, money.", "tokens": [51334, 6349, 11, 1460, 11, 1460, 11, 1460, 11, 1460, 13, 51542], "temperature": 0.0, "avg_logprob": -0.19438976049423218, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.11426129192113876}, {"id": 87, "seek": 52500, "start": 548.56, "end": 554.04, "text": " Note, this message contains the word money four times.", "tokens": [51542, 11633, 11, 341, 3636, 8306, 264, 1349, 1460, 1451, 1413, 13, 51816], "temperature": 0.0, "avg_logprob": -0.19438976049423218, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.11426129192113876}, {"id": 88, "seek": 55404, "start": 554.04, "end": 561.4399999999999, "text": " And since the probability of seeing the word money is much higher in spam than in normal messages,", "tokens": [50364, 400, 1670, 264, 8482, 295, 2577, 264, 1349, 1460, 307, 709, 2946, 294, 24028, 813, 294, 2710, 7897, 11, 50734], "temperature": 0.0, "avg_logprob": -0.1297638951515665, "compression_ratio": 1.691304347826087, "no_speech_prob": 0.00016863772179931402}, {"id": 89, "seek": 55404, "start": 561.4399999999999, "end": 567.1999999999999, "text": " then it seems reasonable to predict that this message will end up being spam.", "tokens": [50734, 550, 309, 2544, 10585, 281, 6069, 300, 341, 3636, 486, 917, 493, 885, 24028, 13, 51022], "temperature": 0.0, "avg_logprob": -0.1297638951515665, "compression_ratio": 1.691304347826087, "no_speech_prob": 0.00016863772179931402}, {"id": 90, "seek": 55404, "start": 567.1999999999999, "end": 569.7199999999999, "text": " So let's do the math.", "tokens": [51022, 407, 718, 311, 360, 264, 5221, 13, 51148], "temperature": 0.0, "avg_logprob": -0.1297638951515665, "compression_ratio": 1.691304347826087, "no_speech_prob": 0.00016863772179931402}, {"id": 91, "seek": 55404, "start": 569.7199999999999, "end": 574.64, "text": " Calculating the score for a normal message works just like before.", "tokens": [51148, 3511, 2444, 990, 264, 6175, 337, 257, 2710, 3636, 1985, 445, 411, 949, 13, 51394], "temperature": 0.0, "avg_logprob": -0.1297638951515665, "compression_ratio": 1.691304347826087, "no_speech_prob": 0.00016863772179931402}, {"id": 92, "seek": 55404, "start": 574.64, "end": 577.0799999999999, "text": " We start with the initial guess,", "tokens": [51394, 492, 722, 365, 264, 5883, 2041, 11, 51516], "temperature": 0.0, "avg_logprob": -0.1297638951515665, "compression_ratio": 1.691304347826087, "no_speech_prob": 0.00016863772179931402}, {"id": 93, "seek": 55404, "start": 577.0799999999999, "end": 580.56, "text": " then we multiply it by the probability we see lunch,", "tokens": [51516, 550, 321, 12972, 309, 538, 264, 8482, 321, 536, 6349, 11, 51690], "temperature": 0.0, "avg_logprob": -0.1297638951515665, "compression_ratio": 1.691304347826087, "no_speech_prob": 0.00016863772179931402}, {"id": 94, "seek": 55404, "start": 580.56, "end": 583.52, "text": " given that it is in a normal message.", "tokens": [51690, 2212, 300, 309, 307, 294, 257, 2710, 3636, 13, 51838], "temperature": 0.0, "avg_logprob": -0.1297638951515665, "compression_ratio": 1.691304347826087, "no_speech_prob": 0.00016863772179931402}, {"id": 95, "seek": 58352, "start": 583.52, "end": 590.4399999999999, "text": " And the probability we see money four times, given that it is in a normal message.", "tokens": [50364, 400, 264, 8482, 321, 536, 1460, 1451, 1413, 11, 2212, 300, 309, 307, 294, 257, 2710, 3636, 13, 50710], "temperature": 0.0, "avg_logprob": -0.11166525475772811, "compression_ratio": 1.5769230769230769, "no_speech_prob": 0.00011958940012846142}, {"id": 96, "seek": 58352, "start": 590.4399999999999, "end": 595.0, "text": " When we do the math, we get this tiny number.", "tokens": [50710, 1133, 321, 360, 264, 5221, 11, 321, 483, 341, 5870, 1230, 13, 50938], "temperature": 0.0, "avg_logprob": -0.11166525475772811, "compression_ratio": 1.5769230769230769, "no_speech_prob": 0.00011958940012846142}, {"id": 97, "seek": 58352, "start": 595.0, "end": 599.8, "text": " However, when we do the same calculation for spam,", "tokens": [50938, 2908, 11, 562, 321, 360, 264, 912, 17108, 337, 24028, 11, 51178], "temperature": 0.0, "avg_logprob": -0.11166525475772811, "compression_ratio": 1.5769230769230769, "no_speech_prob": 0.00011958940012846142}, {"id": 98, "seek": 58352, "start": 599.8, "end": 602.52, "text": " we get 0.", "tokens": [51178, 321, 483, 1958, 13, 51314], "temperature": 0.0, "avg_logprob": -0.11166525475772811, "compression_ratio": 1.5769230769230769, "no_speech_prob": 0.00011958940012846142}, {"id": 99, "seek": 58352, "start": 602.52, "end": 607.0799999999999, "text": " This is because the probability we see lunch in spam is 0,", "tokens": [51314, 639, 307, 570, 264, 8482, 321, 536, 6349, 294, 24028, 307, 1958, 11, 51542], "temperature": 0.0, "avg_logprob": -0.11166525475772811, "compression_ratio": 1.5769230769230769, "no_speech_prob": 0.00011958940012846142}, {"id": 100, "seek": 58352, "start": 607.0799999999999, "end": 610.28, "text": " since it was not in the training data.", "tokens": [51542, 1670, 309, 390, 406, 294, 264, 3097, 1412, 13, 51702], "temperature": 0.0, "avg_logprob": -0.11166525475772811, "compression_ratio": 1.5769230769230769, "no_speech_prob": 0.00011958940012846142}, {"id": 101, "seek": 61028, "start": 610.3199999999999, "end": 614.04, "text": " And when we plug in 0 for the probability we see lunch,", "tokens": [50366, 400, 562, 321, 5452, 294, 1958, 337, 264, 8482, 321, 536, 6349, 11, 50552], "temperature": 0.0, "avg_logprob": -0.12599664865080842, "compression_ratio": 1.854922279792746, "no_speech_prob": 0.0018674194579944015}, {"id": 102, "seek": 61028, "start": 614.04, "end": 616.88, "text": " given that it was in spam,", "tokens": [50552, 2212, 300, 309, 390, 294, 24028, 11, 50694], "temperature": 0.0, "avg_logprob": -0.12599664865080842, "compression_ratio": 1.854922279792746, "no_speech_prob": 0.0018674194579944015}, {"id": 103, "seek": 61028, "start": 616.88, "end": 623.0, "text": " then it doesn't matter what value we picked for the initial guess that the message was spam,", "tokens": [50694, 550, 309, 1177, 380, 1871, 437, 2158, 321, 6183, 337, 264, 5883, 2041, 300, 264, 3636, 390, 24028, 11, 51000], "temperature": 0.0, "avg_logprob": -0.12599664865080842, "compression_ratio": 1.854922279792746, "no_speech_prob": 0.0018674194579944015}, {"id": 104, "seek": 61028, "start": 623.0, "end": 627.0, "text": " and it doesn't matter what the probability is that we see money,", "tokens": [51000, 293, 309, 1177, 380, 1871, 437, 264, 8482, 307, 300, 321, 536, 1460, 11, 51200], "temperature": 0.0, "avg_logprob": -0.12599664865080842, "compression_ratio": 1.854922279792746, "no_speech_prob": 0.0018674194579944015}, {"id": 105, "seek": 61028, "start": 627.0, "end": 630.24, "text": " given that the message was spam,", "tokens": [51200, 2212, 300, 264, 3636, 390, 24028, 11, 51362], "temperature": 0.0, "avg_logprob": -0.12599664865080842, "compression_ratio": 1.854922279792746, "no_speech_prob": 0.0018674194579944015}, {"id": 106, "seek": 61028, "start": 630.24, "end": 635.56, "text": " because anything times 0 is 0.", "tokens": [51362, 570, 1340, 1413, 1958, 307, 1958, 13, 51628], "temperature": 0.0, "avg_logprob": -0.12599664865080842, "compression_ratio": 1.854922279792746, "no_speech_prob": 0.0018674194579944015}, {"id": 107, "seek": 61028, "start": 635.56, "end": 637.0, "text": " In other words,", "tokens": [51628, 682, 661, 2283, 11, 51700], "temperature": 0.0, "avg_logprob": -0.12599664865080842, "compression_ratio": 1.854922279792746, "no_speech_prob": 0.0018674194579944015}, {"id": 108, "seek": 61028, "start": 637.0, "end": 639.6, "text": " if a message contains the word lunch,", "tokens": [51700, 498, 257, 3636, 8306, 264, 1349, 6349, 11, 51830], "temperature": 0.0, "avg_logprob": -0.12599664865080842, "compression_ratio": 1.854922279792746, "no_speech_prob": 0.0018674194579944015}, {"id": 109, "seek": 63960, "start": 639.6, "end": 642.96, "text": " it will not be classified as spam.", "tokens": [50364, 309, 486, 406, 312, 20627, 382, 24028, 13, 50532], "temperature": 0.0, "avg_logprob": -0.11677749677636158, "compression_ratio": 1.5628140703517588, "no_speech_prob": 0.001548568718135357}, {"id": 110, "seek": 63960, "start": 642.96, "end": 648.16, "text": " And that means we will always classify the messages with lunch in them as normal,", "tokens": [50532, 400, 300, 1355, 321, 486, 1009, 33872, 264, 7897, 365, 6349, 294, 552, 382, 2710, 11, 50792], "temperature": 0.0, "avg_logprob": -0.11677749677636158, "compression_ratio": 1.5628140703517588, "no_speech_prob": 0.001548568718135357}, {"id": 111, "seek": 63960, "start": 648.16, "end": 652.36, "text": " no matter how many times we see the word money.", "tokens": [50792, 572, 1871, 577, 867, 1413, 321, 536, 264, 1349, 1460, 13, 51002], "temperature": 0.0, "avg_logprob": -0.11677749677636158, "compression_ratio": 1.5628140703517588, "no_speech_prob": 0.001548568718135357}, {"id": 112, "seek": 63960, "start": 652.36, "end": 655.12, "text": " And that's a problem.", "tokens": [51002, 400, 300, 311, 257, 1154, 13, 51140], "temperature": 0.0, "avg_logprob": -0.11677749677636158, "compression_ratio": 1.5628140703517588, "no_speech_prob": 0.001548568718135357}, {"id": 113, "seek": 63960, "start": 655.12, "end": 657.0400000000001, "text": " To work around this problem,", "tokens": [51140, 1407, 589, 926, 341, 1154, 11, 51236], "temperature": 0.0, "avg_logprob": -0.11677749677636158, "compression_ratio": 1.5628140703517588, "no_speech_prob": 0.001548568718135357}, {"id": 114, "seek": 63960, "start": 657.0400000000001, "end": 661.44, "text": " people usually add one count, represented by a black box,", "tokens": [51236, 561, 2673, 909, 472, 1207, 11, 10379, 538, 257, 2211, 2424, 11, 51456], "temperature": 0.0, "avg_logprob": -0.11677749677636158, "compression_ratio": 1.5628140703517588, "no_speech_prob": 0.001548568718135357}, {"id": 115, "seek": 63960, "start": 661.44, "end": 664.84, "text": " to each word in the histograms.", "tokens": [51456, 281, 1184, 1349, 294, 264, 49816, 82, 13, 51626], "temperature": 0.0, "avg_logprob": -0.11677749677636158, "compression_ratio": 1.5628140703517588, "no_speech_prob": 0.001548568718135357}, {"id": 116, "seek": 63960, "start": 664.84, "end": 665.84, "text": " Note,", "tokens": [51626, 11633, 11, 51676], "temperature": 0.0, "avg_logprob": -0.11677749677636158, "compression_ratio": 1.5628140703517588, "no_speech_prob": 0.001548568718135357}, {"id": 117, "seek": 66584, "start": 665.84, "end": 672.76, "text": " the number of counts we add to each word is typically referred to with the Greek letter, alpha.", "tokens": [50364, 264, 1230, 295, 14893, 321, 909, 281, 1184, 1349, 307, 5850, 10839, 281, 365, 264, 10281, 5063, 11, 8961, 13, 50710], "temperature": 0.0, "avg_logprob": -0.13020997246106467, "compression_ratio": 1.5492957746478873, "no_speech_prob": 0.0012446906184777617}, {"id": 118, "seek": 66584, "start": 672.76, "end": 675.64, "text": " In this case, alpha equals 1,", "tokens": [50710, 682, 341, 1389, 11, 8961, 6915, 502, 11, 50854], "temperature": 0.0, "avg_logprob": -0.13020997246106467, "compression_ratio": 1.5492957746478873, "no_speech_prob": 0.0012446906184777617}, {"id": 119, "seek": 66584, "start": 675.64, "end": 678.64, "text": " but we could have said it to anything.", "tokens": [50854, 457, 321, 727, 362, 848, 309, 281, 1340, 13, 51004], "temperature": 0.0, "avg_logprob": -0.13020997246106467, "compression_ratio": 1.5492957746478873, "no_speech_prob": 0.0012446906184777617}, {"id": 120, "seek": 66584, "start": 678.64, "end": 679.76, "text": " Anyway,", "tokens": [51004, 5684, 11, 51060], "temperature": 0.0, "avg_logprob": -0.13020997246106467, "compression_ratio": 1.5492957746478873, "no_speech_prob": 0.0012446906184777617}, {"id": 121, "seek": 66584, "start": 679.76, "end": 683.8000000000001, "text": " now when we calculate the probabilities of observing each word,", "tokens": [51060, 586, 562, 321, 8873, 264, 33783, 295, 22107, 1184, 1349, 11, 51262], "temperature": 0.0, "avg_logprob": -0.13020997246106467, "compression_ratio": 1.5492957746478873, "no_speech_prob": 0.0012446906184777617}, {"id": 122, "seek": 66584, "start": 683.8000000000001, "end": 686.6800000000001, "text": " we never get 0.", "tokens": [51262, 321, 1128, 483, 1958, 13, 51406], "temperature": 0.0, "avg_logprob": -0.13020997246106467, "compression_ratio": 1.5492957746478873, "no_speech_prob": 0.0012446906184777617}, {"id": 123, "seek": 66584, "start": 686.6800000000001, "end": 688.08, "text": " For example,", "tokens": [51406, 1171, 1365, 11, 51476], "temperature": 0.0, "avg_logprob": -0.13020997246106467, "compression_ratio": 1.5492957746478873, "no_speech_prob": 0.0012446906184777617}, {"id": 124, "seek": 66584, "start": 688.08, "end": 690.4000000000001, "text": " the probability of seeing lunch,", "tokens": [51476, 264, 8482, 295, 2577, 6349, 11, 51592], "temperature": 0.0, "avg_logprob": -0.13020997246106467, "compression_ratio": 1.5492957746478873, "no_speech_prob": 0.0012446906184777617}, {"id": 125, "seek": 66584, "start": 690.4000000000001, "end": 693.0400000000001, "text": " given that it is in spam,", "tokens": [51592, 2212, 300, 309, 307, 294, 24028, 11, 51724], "temperature": 0.0, "avg_logprob": -0.13020997246106467, "compression_ratio": 1.5492957746478873, "no_speech_prob": 0.0012446906184777617}, {"id": 126, "seek": 66584, "start": 693.0400000000001, "end": 694.44, "text": " is 1,", "tokens": [51724, 307, 502, 11, 51794], "temperature": 0.0, "avg_logprob": -0.13020997246106467, "compression_ratio": 1.5492957746478873, "no_speech_prob": 0.0012446906184777617}, {"id": 127, "seek": 69444, "start": 694.44, "end": 696.08, "text": " divided by 7,", "tokens": [50364, 6666, 538, 1614, 11, 50446], "temperature": 0.0, "avg_logprob": -0.1274662489938264, "compression_ratio": 1.816831683168317, "no_speech_prob": 0.0008039888925850391}, {"id": 128, "seek": 69444, "start": 696.08, "end": 698.44, "text": " the total number of words in spam,", "tokens": [50446, 264, 3217, 1230, 295, 2283, 294, 24028, 11, 50564], "temperature": 0.0, "avg_logprob": -0.1274662489938264, "compression_ratio": 1.816831683168317, "no_speech_prob": 0.0008039888925850391}, {"id": 129, "seek": 69444, "start": 698.44, "end": 699.6800000000001, "text": " plus 4,", "tokens": [50564, 1804, 1017, 11, 50626], "temperature": 0.0, "avg_logprob": -0.1274662489938264, "compression_ratio": 1.816831683168317, "no_speech_prob": 0.0008039888925850391}, {"id": 130, "seek": 69444, "start": 699.6800000000001, "end": 702.9200000000001, "text": " the extra counts that we added.", "tokens": [50626, 264, 2857, 14893, 300, 321, 3869, 13, 50788], "temperature": 0.0, "avg_logprob": -0.1274662489938264, "compression_ratio": 1.816831683168317, "no_speech_prob": 0.0008039888925850391}, {"id": 131, "seek": 69444, "start": 702.9200000000001, "end": 707.0, "text": " And that gives us 0.09.", "tokens": [50788, 400, 300, 2709, 505, 1958, 13, 13811, 13, 50992], "temperature": 0.0, "avg_logprob": -0.1274662489938264, "compression_ratio": 1.816831683168317, "no_speech_prob": 0.0008039888925850391}, {"id": 132, "seek": 69444, "start": 707.0, "end": 707.8000000000001, "text": " Note,", "tokens": [50992, 11633, 11, 51032], "temperature": 0.0, "avg_logprob": -0.1274662489938264, "compression_ratio": 1.816831683168317, "no_speech_prob": 0.0008039888925850391}, {"id": 133, "seek": 69444, "start": 707.8000000000001, "end": 713.6, "text": " adding counts to each word does not change our initial guess that a message is normal,", "tokens": [51032, 5127, 14893, 281, 1184, 1349, 775, 406, 1319, 527, 5883, 2041, 300, 257, 3636, 307, 2710, 11, 51322], "temperature": 0.0, "avg_logprob": -0.1274662489938264, "compression_ratio": 1.816831683168317, "no_speech_prob": 0.0008039888925850391}, {"id": 134, "seek": 69444, "start": 713.6, "end": 717.2800000000001, "text": " or the initial guess that the message is spam,", "tokens": [51322, 420, 264, 5883, 2041, 300, 264, 3636, 307, 24028, 11, 51506], "temperature": 0.0, "avg_logprob": -0.1274662489938264, "compression_ratio": 1.816831683168317, "no_speech_prob": 0.0008039888925850391}, {"id": 135, "seek": 69444, "start": 717.2800000000001, "end": 724.4000000000001, "text": " because adding a count to each word did not change the number of messages in the training dataset that are normal.", "tokens": [51506, 570, 5127, 257, 1207, 281, 1184, 1349, 630, 406, 1319, 264, 1230, 295, 7897, 294, 264, 3097, 28872, 300, 366, 2710, 13, 51862], "temperature": 0.0, "avg_logprob": -0.1274662489938264, "compression_ratio": 1.816831683168317, "no_speech_prob": 0.0008039888925850391}, {"id": 136, "seek": 72440, "start": 724.76, "end": 728.88, "text": " Or the number of messages that are spam.", "tokens": [50382, 1610, 264, 1230, 295, 7897, 300, 366, 24028, 13, 50588], "temperature": 0.0, "avg_logprob": -0.1614743265612372, "compression_ratio": 1.9759036144578312, "no_speech_prob": 0.0014101681299507618}, {"id": 137, "seek": 72440, "start": 728.88, "end": 733.1999999999999, "text": " Now when we calculate the scores for this message,", "tokens": [50588, 823, 562, 321, 8873, 264, 13444, 337, 341, 3636, 11, 50804], "temperature": 0.0, "avg_logprob": -0.1614743265612372, "compression_ratio": 1.9759036144578312, "no_speech_prob": 0.0014101681299507618}, {"id": 138, "seek": 72440, "start": 733.1999999999999, "end": 737.48, "text": " we still get a small number for the normal message,", "tokens": [50804, 321, 920, 483, 257, 1359, 1230, 337, 264, 2710, 3636, 11, 51018], "temperature": 0.0, "avg_logprob": -0.1614743265612372, "compression_ratio": 1.9759036144578312, "no_speech_prob": 0.0014101681299507618}, {"id": 139, "seek": 72440, "start": 737.48, "end": 740.48, "text": " but now when we calculate the value for spam,", "tokens": [51018, 457, 586, 562, 321, 8873, 264, 2158, 337, 24028, 11, 51168], "temperature": 0.0, "avg_logprob": -0.1614743265612372, "compression_ratio": 1.9759036144578312, "no_speech_prob": 0.0014101681299507618}, {"id": 140, "seek": 72440, "start": 740.48, "end": 743.68, "text": " we get a value greater than 0.", "tokens": [51168, 321, 483, 257, 2158, 5044, 813, 1958, 13, 51328], "temperature": 0.0, "avg_logprob": -0.1614743265612372, "compression_ratio": 1.9759036144578312, "no_speech_prob": 0.0014101681299507618}, {"id": 141, "seek": 72440, "start": 743.68, "end": 749.0799999999999, "text": " And since the value for spam is greater than the one for a normal message,", "tokens": [51328, 400, 1670, 264, 2158, 337, 24028, 307, 5044, 813, 264, 472, 337, 257, 2710, 3636, 11, 51598], "temperature": 0.0, "avg_logprob": -0.1614743265612372, "compression_ratio": 1.9759036144578312, "no_speech_prob": 0.0014101681299507618}, {"id": 142, "seek": 72440, "start": 749.0799999999999, "end": 752.48, "text": " we classify the message as spam.", "tokens": [51598, 321, 33872, 264, 3636, 382, 24028, 13, 51768], "temperature": 0.0, "avg_logprob": -0.1614743265612372, "compression_ratio": 1.9759036144578312, "no_speech_prob": 0.0014101681299507618}, {"id": 143, "seek": 75248, "start": 752.5600000000001, "end": 755.5600000000001, "text": " Spam!", "tokens": [50368, 1738, 335, 0, 50518], "temperature": 0.0, "avg_logprob": -0.21086654180212866, "compression_ratio": 1.567251461988304, "no_speech_prob": 0.0006262930110096931}, {"id": 144, "seek": 75248, "start": 755.5600000000001, "end": 760.88, "text": " Now let's talk about why Naive Bayes is naive.", "tokens": [50518, 823, 718, 311, 751, 466, 983, 6056, 488, 7840, 279, 307, 29052, 13, 50784], "temperature": 0.0, "avg_logprob": -0.21086654180212866, "compression_ratio": 1.567251461988304, "no_speech_prob": 0.0006262930110096931}, {"id": 145, "seek": 75248, "start": 760.88, "end": 768.64, "text": " The thing that makes Naive Bayes so naive is that it treats all word orders the same.", "tokens": [50784, 440, 551, 300, 1669, 6056, 488, 7840, 279, 370, 29052, 307, 300, 309, 19566, 439, 1349, 9470, 264, 912, 13, 51172], "temperature": 0.0, "avg_logprob": -0.21086654180212866, "compression_ratio": 1.567251461988304, "no_speech_prob": 0.0006262930110096931}, {"id": 146, "seek": 75248, "start": 768.64, "end": 770.08, "text": " For example,", "tokens": [51172, 1171, 1365, 11, 51244], "temperature": 0.0, "avg_logprob": -0.21086654180212866, "compression_ratio": 1.567251461988304, "no_speech_prob": 0.0006262930110096931}, {"id": 147, "seek": 75248, "start": 770.08, "end": 774.6800000000001, "text": " the normal message score for the phrase dear friend", "tokens": [51244, 264, 2710, 3636, 6175, 337, 264, 9535, 6875, 1277, 51474], "temperature": 0.0, "avg_logprob": -0.21086654180212866, "compression_ratio": 1.567251461988304, "no_speech_prob": 0.0006262930110096931}, {"id": 148, "seek": 75248, "start": 774.6800000000001, "end": 779.6, "text": " is the exact same for the score for friend dear.", "tokens": [51474, 307, 264, 1900, 912, 337, 264, 6175, 337, 1277, 6875, 13, 51720], "temperature": 0.0, "avg_logprob": -0.21086654180212866, "compression_ratio": 1.567251461988304, "no_speech_prob": 0.0006262930110096931}, {"id": 149, "seek": 75248, "start": 779.6, "end": 780.9200000000001, "text": " In other words,", "tokens": [51720, 682, 661, 2283, 11, 51786], "temperature": 0.0, "avg_logprob": -0.21086654180212866, "compression_ratio": 1.567251461988304, "no_speech_prob": 0.0006262930110096931}, {"id": 150, "seek": 78092, "start": 780.9599999999999, "end": 783.4399999999999, "text": " regardless of how the words are ordered,", "tokens": [50366, 10060, 295, 577, 264, 2283, 366, 8866, 11, 50490], "temperature": 0.0, "avg_logprob": -0.10473983162327817, "compression_ratio": 1.56, "no_speech_prob": 0.0005032744957134128}, {"id": 151, "seek": 78092, "start": 783.4399999999999, "end": 786.7199999999999, "text": " we get 0.08.", "tokens": [50490, 321, 483, 1958, 13, 16133, 13, 50654], "temperature": 0.0, "avg_logprob": -0.10473983162327817, "compression_ratio": 1.56, "no_speech_prob": 0.0005032744957134128}, {"id": 152, "seek": 78092, "start": 786.7199999999999, "end": 793.52, "text": " Treating all word orders equal is very different from how you and I communicate.", "tokens": [50654, 20298, 278, 439, 1349, 9470, 2681, 307, 588, 819, 490, 577, 291, 293, 286, 7890, 13, 50994], "temperature": 0.0, "avg_logprob": -0.10473983162327817, "compression_ratio": 1.56, "no_speech_prob": 0.0005032744957134128}, {"id": 153, "seek": 78092, "start": 793.52, "end": 797.24, "text": " Every language has grammar rules and common phrases,", "tokens": [50994, 2048, 2856, 575, 22317, 4474, 293, 2689, 20312, 11, 51180], "temperature": 0.0, "avg_logprob": -0.10473983162327817, "compression_ratio": 1.56, "no_speech_prob": 0.0005032744957134128}, {"id": 154, "seek": 78092, "start": 797.24, "end": 801.16, "text": " but Naive Bayes ignores all of that stuff.", "tokens": [51180, 457, 6056, 488, 7840, 279, 5335, 2706, 439, 295, 300, 1507, 13, 51376], "temperature": 0.0, "avg_logprob": -0.10473983162327817, "compression_ratio": 1.56, "no_speech_prob": 0.0005032744957134128}, {"id": 155, "seek": 78092, "start": 801.16, "end": 806.36, "text": " Instead, Naive Bayes treats a language like it is just a bag full of words", "tokens": [51376, 7156, 11, 6056, 488, 7840, 279, 19566, 257, 2856, 411, 309, 307, 445, 257, 3411, 1577, 295, 2283, 51636], "temperature": 0.0, "avg_logprob": -0.10473983162327817, "compression_ratio": 1.56, "no_speech_prob": 0.0005032744957134128}, {"id": 156, "seek": 78092, "start": 806.36, "end": 810.36, "text": " and each message is a random handful of them.", "tokens": [51636, 293, 1184, 3636, 307, 257, 4974, 16458, 295, 552, 13, 51836], "temperature": 0.0, "avg_logprob": -0.10473983162327817, "compression_ratio": 1.56, "no_speech_prob": 0.0005032744957134128}, {"id": 157, "seek": 81036, "start": 810.36, "end": 819.08, "text": " Naive Bayes ignores all the rules because keeping track of every single reasonable phrase in a language would be impossible.", "tokens": [50364, 6056, 488, 7840, 279, 5335, 2706, 439, 264, 4474, 570, 5145, 2837, 295, 633, 2167, 10585, 9535, 294, 257, 2856, 576, 312, 6243, 13, 50800], "temperature": 0.0, "avg_logprob": -0.13352353545441026, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.00012730520393233746}, {"id": 158, "seek": 81036, "start": 819.08, "end": 822.84, "text": " That said, even though Naive Bayes is naive,", "tokens": [50800, 663, 848, 11, 754, 1673, 6056, 488, 7840, 279, 307, 29052, 11, 50988], "temperature": 0.0, "avg_logprob": -0.13352353545441026, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.00012730520393233746}, {"id": 159, "seek": 81036, "start": 822.84, "end": 829.6, "text": " it tends to perform surprisingly well when separating normal messages from spam.", "tokens": [50988, 309, 12258, 281, 2042, 17600, 731, 562, 29279, 2710, 7897, 490, 24028, 13, 51326], "temperature": 0.0, "avg_logprob": -0.13352353545441026, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.00012730520393233746}, {"id": 160, "seek": 81036, "start": 829.6, "end": 831.5600000000001, "text": " In machine learning lingo,", "tokens": [51326, 682, 3479, 2539, 287, 18459, 11, 51424], "temperature": 0.0, "avg_logprob": -0.13352353545441026, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.00012730520393233746}, {"id": 161, "seek": 81036, "start": 831.5600000000001, "end": 835.2, "text": " we'd say that by ignoring relationships among words,", "tokens": [51424, 321, 1116, 584, 300, 538, 26258, 6159, 3654, 2283, 11, 51606], "temperature": 0.0, "avg_logprob": -0.13352353545441026, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.00012730520393233746}, {"id": 162, "seek": 81036, "start": 835.2, "end": 838.5600000000001, "text": " Naive Bayes has high bias.", "tokens": [51606, 6056, 488, 7840, 279, 575, 1090, 12577, 13, 51774], "temperature": 0.0, "avg_logprob": -0.13352353545441026, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.00012730520393233746}, {"id": 163, "seek": 83856, "start": 838.5999999999999, "end": 841.4399999999999, "text": " But because it works well in practice,", "tokens": [50366, 583, 570, 309, 1985, 731, 294, 3124, 11, 50508], "temperature": 0.0, "avg_logprob": -0.17449184743369497, "compression_ratio": 1.470899470899471, "no_speech_prob": 0.004467703867703676}, {"id": 164, "seek": 83856, "start": 841.4399999999999, "end": 844.8399999999999, "text": " Naive Bayes has low variance.", "tokens": [50508, 6056, 488, 7840, 279, 575, 2295, 21977, 13, 50678], "temperature": 0.0, "avg_logprob": -0.17449184743369497, "compression_ratio": 1.470899470899471, "no_speech_prob": 0.004467703867703676}, {"id": 165, "seek": 83856, "start": 844.8399999999999, "end": 847.92, "text": " Shameless self-promotion", "tokens": [50678, 42912, 4272, 2698, 12, 28722, 19228, 50832], "temperature": 0.0, "avg_logprob": -0.17449184743369497, "compression_ratio": 1.470899470899471, "no_speech_prob": 0.004467703867703676}, {"id": 166, "seek": 83856, "start": 847.92, "end": 852.1199999999999, "text": " If you are not already familiar with the terms bias and variance,", "tokens": [50832, 759, 291, 366, 406, 1217, 4963, 365, 264, 2115, 12577, 293, 21977, 11, 51042], "temperature": 0.0, "avg_logprob": -0.17449184743369497, "compression_ratio": 1.470899470899471, "no_speech_prob": 0.004467703867703676}, {"id": 167, "seek": 83856, "start": 852.1199999999999, "end": 853.4799999999999, "text": " check out the quest.", "tokens": [51042, 1520, 484, 264, 866, 13, 51110], "temperature": 0.0, "avg_logprob": -0.17449184743369497, "compression_ratio": 1.470899470899471, "no_speech_prob": 0.004467703867703676}, {"id": 168, "seek": 83856, "start": 853.4799999999999, "end": 856.68, "text": " The link is in the description below.", "tokens": [51110, 440, 2113, 307, 294, 264, 3855, 2507, 13, 51270], "temperature": 0.0, "avg_logprob": -0.17449184743369497, "compression_ratio": 1.470899470899471, "no_speech_prob": 0.004467703867703676}, {"id": 169, "seek": 83856, "start": 856.68, "end": 859.9599999999999, "text": " Triple spam!", "tokens": [51270, 32159, 24028, 0, 51434], "temperature": 0.0, "avg_logprob": -0.17449184743369497, "compression_ratio": 1.470899470899471, "no_speech_prob": 0.004467703867703676}, {"id": 170, "seek": 83856, "start": 859.9599999999999, "end": 864.28, "text": " Oh no, it's one last shameless self-promotion.", "tokens": [51434, 876, 572, 11, 309, 311, 472, 1036, 40164, 2698, 12, 28722, 19228, 13, 51650], "temperature": 0.0, "avg_logprob": -0.17449184743369497, "compression_ratio": 1.470899470899471, "no_speech_prob": 0.004467703867703676}, {"id": 171, "seek": 86428, "start": 864.28, "end": 871.12, "text": " One awesome way to support StatQuest is to purchase the Naive Bayes StatQuest Study Guide.", "tokens": [50364, 1485, 3476, 636, 281, 1406, 16249, 8547, 377, 307, 281, 8110, 264, 6056, 488, 7840, 279, 16249, 8547, 377, 27039, 18727, 13, 50706], "temperature": 0.0, "avg_logprob": -0.11929711173562442, "compression_ratio": 1.609865470852018, "no_speech_prob": 0.0618487112224102}, {"id": 172, "seek": 86428, "start": 871.12, "end": 875.52, "text": " It has everything you need to study for an exam or job interview.", "tokens": [50706, 467, 575, 1203, 291, 643, 281, 2979, 337, 364, 1139, 420, 1691, 4049, 13, 50926], "temperature": 0.0, "avg_logprob": -0.11929711173562442, "compression_ratio": 1.609865470852018, "no_speech_prob": 0.0618487112224102}, {"id": 173, "seek": 86428, "start": 875.52, "end": 878.92, "text": " It's eight pages of total awesomeness.", "tokens": [50926, 467, 311, 3180, 7183, 295, 3217, 1714, 279, 4726, 442, 13, 51096], "temperature": 0.0, "avg_logprob": -0.11929711173562442, "compression_ratio": 1.609865470852018, "no_speech_prob": 0.0618487112224102}, {"id": 174, "seek": 86428, "start": 878.92, "end": 882.88, "text": " And while you're there, check out the other StatQuest Study Guides.", "tokens": [51096, 400, 1339, 291, 434, 456, 11, 1520, 484, 264, 661, 16249, 8547, 377, 27039, 2694, 1875, 13, 51294], "temperature": 0.0, "avg_logprob": -0.11929711173562442, "compression_ratio": 1.609865470852018, "no_speech_prob": 0.0618487112224102}, {"id": 175, "seek": 86428, "start": 882.88, "end": 886.48, "text": " There's something for everyone.", "tokens": [51294, 821, 311, 746, 337, 1518, 13, 51474], "temperature": 0.0, "avg_logprob": -0.11929711173562442, "compression_ratio": 1.609865470852018, "no_speech_prob": 0.0618487112224102}, {"id": 176, "seek": 86428, "start": 886.48, "end": 891.12, "text": " Hooray! We've made it to the end of another exciting StatQuest.", "tokens": [51474, 3631, 284, 320, 0, 492, 600, 1027, 309, 281, 264, 917, 295, 1071, 4670, 16249, 8547, 377, 13, 51706], "temperature": 0.0, "avg_logprob": -0.11929711173562442, "compression_ratio": 1.609865470852018, "no_speech_prob": 0.0618487112224102}, {"id": 177, "seek": 89112, "start": 891.12, "end": 894.88, "text": " If you like this StatQuest and want to see more, please subscribe.", "tokens": [50364, 759, 291, 411, 341, 16249, 8547, 377, 293, 528, 281, 536, 544, 11, 1767, 3022, 13, 50552], "temperature": 0.0, "avg_logprob": -0.1585445089654608, "compression_ratio": 1.518181818181818, "no_speech_prob": 0.8134778738021851}, {"id": 178, "seek": 89112, "start": 894.88, "end": 899.5600000000001, "text": " And if you want to support StatQuest, consider contributing to my Patreon campaign,", "tokens": [50552, 400, 498, 291, 528, 281, 1406, 16249, 8547, 377, 11, 1949, 19270, 281, 452, 15692, 5129, 11, 50786], "temperature": 0.0, "avg_logprob": -0.1585445089654608, "compression_ratio": 1.518181818181818, "no_speech_prob": 0.8134778738021851}, {"id": 179, "seek": 89112, "start": 899.5600000000001, "end": 904.8, "text": " becoming a channel member, buying one or two of my original songs or a t-shirt or a hoodie,", "tokens": [50786, 5617, 257, 2269, 4006, 11, 6382, 472, 420, 732, 295, 452, 3380, 5781, 420, 257, 256, 12, 15313, 420, 257, 41191, 11, 51048], "temperature": 0.0, "avg_logprob": -0.1585445089654608, "compression_ratio": 1.518181818181818, "no_speech_prob": 0.8134778738021851}, {"id": 180, "seek": 89112, "start": 904.8, "end": 906.0, "text": " or just donate.", "tokens": [51048, 420, 445, 17751, 13, 51108], "temperature": 0.0, "avg_logprob": -0.1585445089654608, "compression_ratio": 1.518181818181818, "no_speech_prob": 0.8134778738021851}, {"id": 181, "seek": 89112, "start": 906.0, "end": 908.36, "text": " The links are in the description below.", "tokens": [51108, 440, 6123, 366, 294, 264, 3855, 2507, 13, 51226], "temperature": 0.0, "avg_logprob": -0.1585445089654608, "compression_ratio": 1.518181818181818, "no_speech_prob": 0.8134778738021851}, {"id": 182, "seek": 89112, "start": 908.36, "end": 910.64, "text": " Alright, until next time,", "tokens": [51226, 2798, 11, 1826, 958, 565, 11, 51340], "temperature": 0.0, "avg_logprob": -0.1585445089654608, "compression_ratio": 1.518181818181818, "no_speech_prob": 0.8134778738021851}, {"id": 183, "seek": 89112, "start": 910.64, "end": 911.64, "text": " quest on!", "tokens": [51340, 866, 322, 0, 51390], "temperature": 0.0, "avg_logprob": -0.1585445089654608, "compression_ratio": 1.518181818181818, "no_speech_prob": 0.8134778738021851}], "language": "en"}